// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BattleQueueOld is an object representing the database table.
type BattleQueueOld struct {
	QueuedAt                       time.Time   `boiler:"queued_at" boil:"queued_at" json:"queued_at" toml:"queued_at" yaml:"queued_at"`
	FactionID                      string      `boiler:"faction_id" boil:"faction_id" json:"faction_id" toml:"faction_id" yaml:"faction_id"`
	OwnerID                        string      `boiler:"owner_id" boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	BattleID                       null.String `boiler:"battle_id" boil:"battle_id" json:"battle_id,omitempty" toml:"battle_id" yaml:"battle_id,omitempty"`
	Notified                       bool        `boiler:"notified" boil:"notified" json:"notified" toml:"notified" yaml:"notified"`
	QueueFeeTXID                   null.String `boiler:"queue_fee_tx_id" boil:"queue_fee_tx_id" json:"queue_fee_tx_id,omitempty" toml:"queue_fee_tx_id" yaml:"queue_fee_tx_id,omitempty"`
	QueueNotificationFeeTXID       null.String `boiler:"queue_notification_fee_tx_id" boil:"queue_notification_fee_tx_id" json:"queue_notification_fee_tx_id,omitempty" toml:"queue_notification_fee_tx_id" yaml:"queue_notification_fee_tx_id,omitempty"`
	QueueFeeTXIDRefund             null.String `boiler:"queue_fee_tx_id_refund" boil:"queue_fee_tx_id_refund" json:"queue_fee_tx_id_refund,omitempty" toml:"queue_fee_tx_id_refund" yaml:"queue_fee_tx_id_refund,omitempty"`
	QueueNotificationFeeTXIDRefund null.String `boiler:"queue_notification_fee_tx_id_refund" boil:"queue_notification_fee_tx_id_refund" json:"queue_notification_fee_tx_id_refund,omitempty" toml:"queue_notification_fee_tx_id_refund" yaml:"queue_notification_fee_tx_id_refund,omitempty"`
	ID                             string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	UpdatedAt                      time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	MechID                         string      `boiler:"mech_id" boil:"mech_id" json:"mech_id" toml:"mech_id" yaml:"mech_id"`
	FeeID                          null.String `boiler:"fee_id" boil:"fee_id" json:"fee_id,omitempty" toml:"fee_id" yaml:"fee_id,omitempty"`
	SystemMessageNotified          bool        `boiler:"system_message_notified" boil:"system_message_notified" json:"system_message_notified" toml:"system_message_notified" yaml:"system_message_notified"`

	R *battleQueueOldR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L battleQueueOldL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattleQueueOldColumns = struct {
	QueuedAt                       string
	FactionID                      string
	OwnerID                        string
	BattleID                       string
	Notified                       string
	QueueFeeTXID                   string
	QueueNotificationFeeTXID       string
	QueueFeeTXIDRefund             string
	QueueNotificationFeeTXIDRefund string
	ID                             string
	UpdatedAt                      string
	MechID                         string
	FeeID                          string
	SystemMessageNotified          string
}{
	QueuedAt:                       "queued_at",
	FactionID:                      "faction_id",
	OwnerID:                        "owner_id",
	BattleID:                       "battle_id",
	Notified:                       "notified",
	QueueFeeTXID:                   "queue_fee_tx_id",
	QueueNotificationFeeTXID:       "queue_notification_fee_tx_id",
	QueueFeeTXIDRefund:             "queue_fee_tx_id_refund",
	QueueNotificationFeeTXIDRefund: "queue_notification_fee_tx_id_refund",
	ID:                             "id",
	UpdatedAt:                      "updated_at",
	MechID:                         "mech_id",
	FeeID:                          "fee_id",
	SystemMessageNotified:          "system_message_notified",
}

var BattleQueueOldTableColumns = struct {
	QueuedAt                       string
	FactionID                      string
	OwnerID                        string
	BattleID                       string
	Notified                       string
	QueueFeeTXID                   string
	QueueNotificationFeeTXID       string
	QueueFeeTXIDRefund             string
	QueueNotificationFeeTXIDRefund string
	ID                             string
	UpdatedAt                      string
	MechID                         string
	FeeID                          string
	SystemMessageNotified          string
}{
	QueuedAt:                       "battle_queue_old.queued_at",
	FactionID:                      "battle_queue_old.faction_id",
	OwnerID:                        "battle_queue_old.owner_id",
	BattleID:                       "battle_queue_old.battle_id",
	Notified:                       "battle_queue_old.notified",
	QueueFeeTXID:                   "battle_queue_old.queue_fee_tx_id",
	QueueNotificationFeeTXID:       "battle_queue_old.queue_notification_fee_tx_id",
	QueueFeeTXIDRefund:             "battle_queue_old.queue_fee_tx_id_refund",
	QueueNotificationFeeTXIDRefund: "battle_queue_old.queue_notification_fee_tx_id_refund",
	ID:                             "battle_queue_old.id",
	UpdatedAt:                      "battle_queue_old.updated_at",
	MechID:                         "battle_queue_old.mech_id",
	FeeID:                          "battle_queue_old.fee_id",
	SystemMessageNotified:          "battle_queue_old.system_message_notified",
}

// Generated where

var BattleQueueOldWhere = struct {
	QueuedAt                       whereHelpertime_Time
	FactionID                      whereHelperstring
	OwnerID                        whereHelperstring
	BattleID                       whereHelpernull_String
	Notified                       whereHelperbool
	QueueFeeTXID                   whereHelpernull_String
	QueueNotificationFeeTXID       whereHelpernull_String
	QueueFeeTXIDRefund             whereHelpernull_String
	QueueNotificationFeeTXIDRefund whereHelpernull_String
	ID                             whereHelperstring
	UpdatedAt                      whereHelpertime_Time
	MechID                         whereHelperstring
	FeeID                          whereHelpernull_String
	SystemMessageNotified          whereHelperbool
}{
	QueuedAt:                       whereHelpertime_Time{field: "\"battle_queue_old\".\"queued_at\""},
	FactionID:                      whereHelperstring{field: "\"battle_queue_old\".\"faction_id\""},
	OwnerID:                        whereHelperstring{field: "\"battle_queue_old\".\"owner_id\""},
	BattleID:                       whereHelpernull_String{field: "\"battle_queue_old\".\"battle_id\""},
	Notified:                       whereHelperbool{field: "\"battle_queue_old\".\"notified\""},
	QueueFeeTXID:                   whereHelpernull_String{field: "\"battle_queue_old\".\"queue_fee_tx_id\""},
	QueueNotificationFeeTXID:       whereHelpernull_String{field: "\"battle_queue_old\".\"queue_notification_fee_tx_id\""},
	QueueFeeTXIDRefund:             whereHelpernull_String{field: "\"battle_queue_old\".\"queue_fee_tx_id_refund\""},
	QueueNotificationFeeTXIDRefund: whereHelpernull_String{field: "\"battle_queue_old\".\"queue_notification_fee_tx_id_refund\""},
	ID:                             whereHelperstring{field: "\"battle_queue_old\".\"id\""},
	UpdatedAt:                      whereHelpertime_Time{field: "\"battle_queue_old\".\"updated_at\""},
	MechID:                         whereHelperstring{field: "\"battle_queue_old\".\"mech_id\""},
	FeeID:                          whereHelpernull_String{field: "\"battle_queue_old\".\"fee_id\""},
	SystemMessageNotified:          whereHelperbool{field: "\"battle_queue_old\".\"system_message_notified\""},
}

// BattleQueueOldRels is where relationship names are stored.
var BattleQueueOldRels = struct {
	Battle                            string
	Mech                              string
	Faction                           string
	Fee                               string
	Owner                             string
	QueueMechBattleQueueNotifications string
}{
	Battle:                            "Battle",
	Mech:                              "Mech",
	Faction:                           "Faction",
	Fee:                               "Fee",
	Owner:                             "Owner",
	QueueMechBattleQueueNotifications: "QueueMechBattleQueueNotifications",
}

// battleQueueOldR is where relationships are stored.
type battleQueueOldR struct {
	Battle                            *Battle                      `boiler:"Battle" boil:"Battle" json:"Battle" toml:"Battle" yaml:"Battle"`
	Mech                              *Mech                        `boiler:"Mech" boil:"Mech" json:"Mech" toml:"Mech" yaml:"Mech"`
	Faction                           *Faction                     `boiler:"Faction" boil:"Faction" json:"Faction" toml:"Faction" yaml:"Faction"`
	Fee                               *BattleQueueFeesOld          `boiler:"Fee" boil:"Fee" json:"Fee" toml:"Fee" yaml:"Fee"`
	Owner                             *Player                      `boiler:"Owner" boil:"Owner" json:"Owner" toml:"Owner" yaml:"Owner"`
	QueueMechBattleQueueNotifications BattleQueueNotificationSlice `boiler:"QueueMechBattleQueueNotifications" boil:"QueueMechBattleQueueNotifications" json:"QueueMechBattleQueueNotifications" toml:"QueueMechBattleQueueNotifications" yaml:"QueueMechBattleQueueNotifications"`
}

// NewStruct creates a new relationship struct
func (*battleQueueOldR) NewStruct() *battleQueueOldR {
	return &battleQueueOldR{}
}

// battleQueueOldL is where Load methods for each relationship are stored.
type battleQueueOldL struct{}

var (
	battleQueueOldAllColumns            = []string{"queued_at", "faction_id", "owner_id", "battle_id", "notified", "queue_fee_tx_id", "queue_notification_fee_tx_id", "queue_fee_tx_id_refund", "queue_notification_fee_tx_id_refund", "id", "updated_at", "mech_id", "fee_id", "system_message_notified"}
	battleQueueOldColumnsWithoutDefault = []string{"faction_id", "owner_id", "mech_id"}
	battleQueueOldColumnsWithDefault    = []string{"queued_at", "battle_id", "notified", "queue_fee_tx_id", "queue_notification_fee_tx_id", "queue_fee_tx_id_refund", "queue_notification_fee_tx_id_refund", "id", "updated_at", "fee_id", "system_message_notified"}
	battleQueueOldPrimaryKeyColumns     = []string{"mech_id"}
	battleQueueOldGeneratedColumns      = []string{}
)

type (
	// BattleQueueOldSlice is an alias for a slice of pointers to BattleQueueOld.
	// This should almost always be used instead of []BattleQueueOld.
	BattleQueueOldSlice []*BattleQueueOld
	// BattleQueueOldHook is the signature for custom BattleQueueOld hook methods
	BattleQueueOldHook func(boil.Executor, *BattleQueueOld) error

	battleQueueOldQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battleQueueOldType                 = reflect.TypeOf(&BattleQueueOld{})
	battleQueueOldMapping              = queries.MakeStructMapping(battleQueueOldType)
	battleQueueOldPrimaryKeyMapping, _ = queries.BindMapping(battleQueueOldType, battleQueueOldMapping, battleQueueOldPrimaryKeyColumns)
	battleQueueOldInsertCacheMut       sync.RWMutex
	battleQueueOldInsertCache          = make(map[string]insertCache)
	battleQueueOldUpdateCacheMut       sync.RWMutex
	battleQueueOldUpdateCache          = make(map[string]updateCache)
	battleQueueOldUpsertCacheMut       sync.RWMutex
	battleQueueOldUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battleQueueOldAfterSelectHooks []BattleQueueOldHook

var battleQueueOldBeforeInsertHooks []BattleQueueOldHook
var battleQueueOldAfterInsertHooks []BattleQueueOldHook

var battleQueueOldBeforeUpdateHooks []BattleQueueOldHook
var battleQueueOldAfterUpdateHooks []BattleQueueOldHook

var battleQueueOldBeforeDeleteHooks []BattleQueueOldHook
var battleQueueOldAfterDeleteHooks []BattleQueueOldHook

var battleQueueOldBeforeUpsertHooks []BattleQueueOldHook
var battleQueueOldAfterUpsertHooks []BattleQueueOldHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BattleQueueOld) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueOldAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BattleQueueOld) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueOldBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BattleQueueOld) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueOldAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BattleQueueOld) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueOldBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BattleQueueOld) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueOldAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BattleQueueOld) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueOldBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BattleQueueOld) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueOldAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BattleQueueOld) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueOldBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BattleQueueOld) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueOldAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattleQueueOldHook registers your hook function for all future operations.
func AddBattleQueueOldHook(hookPoint boil.HookPoint, battleQueueOldHook BattleQueueOldHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		battleQueueOldAfterSelectHooks = append(battleQueueOldAfterSelectHooks, battleQueueOldHook)
	case boil.BeforeInsertHook:
		battleQueueOldBeforeInsertHooks = append(battleQueueOldBeforeInsertHooks, battleQueueOldHook)
	case boil.AfterInsertHook:
		battleQueueOldAfterInsertHooks = append(battleQueueOldAfterInsertHooks, battleQueueOldHook)
	case boil.BeforeUpdateHook:
		battleQueueOldBeforeUpdateHooks = append(battleQueueOldBeforeUpdateHooks, battleQueueOldHook)
	case boil.AfterUpdateHook:
		battleQueueOldAfterUpdateHooks = append(battleQueueOldAfterUpdateHooks, battleQueueOldHook)
	case boil.BeforeDeleteHook:
		battleQueueOldBeforeDeleteHooks = append(battleQueueOldBeforeDeleteHooks, battleQueueOldHook)
	case boil.AfterDeleteHook:
		battleQueueOldAfterDeleteHooks = append(battleQueueOldAfterDeleteHooks, battleQueueOldHook)
	case boil.BeforeUpsertHook:
		battleQueueOldBeforeUpsertHooks = append(battleQueueOldBeforeUpsertHooks, battleQueueOldHook)
	case boil.AfterUpsertHook:
		battleQueueOldAfterUpsertHooks = append(battleQueueOldAfterUpsertHooks, battleQueueOldHook)
	}
}

// One returns a single battleQueueOld record from the query.
func (q battleQueueOldQuery) One(exec boil.Executor) (*BattleQueueOld, error) {
	o := &BattleQueueOld{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for battle_queue_old")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BattleQueueOld records from the query.
func (q battleQueueOldQuery) All(exec boil.Executor) (BattleQueueOldSlice, error) {
	var o []*BattleQueueOld

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BattleQueueOld slice")
	}

	if len(battleQueueOldAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BattleQueueOld records in the query.
func (q battleQueueOldQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count battle_queue_old rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battleQueueOldQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if battle_queue_old exists")
	}

	return count > 0, nil
}

// Battle pointed to by the foreign key.
func (o *BattleQueueOld) Battle(mods ...qm.QueryMod) battleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BattleID),
	}

	queryMods = append(queryMods, mods...)

	query := Battles(queryMods...)
	queries.SetFrom(query.Query, "\"battles\"")

	return query
}

// Mech pointed to by the foreign key.
func (o *BattleQueueOld) Mech(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MechID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// Faction pointed to by the foreign key.
func (o *BattleQueueOld) Faction(mods ...qm.QueryMod) factionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FactionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Factions(queryMods...)
	queries.SetFrom(query.Query, "\"factions\"")

	return query
}

// Fee pointed to by the foreign key.
func (o *BattleQueueOld) Fee(mods ...qm.QueryMod) battleQueueFeesOldQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FeeID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := BattleQueueFeesOlds(queryMods...)
	queries.SetFrom(query.Query, "\"battle_queue_fees_old\"")

	return query
}

// Owner pointed to by the foreign key.
func (o *BattleQueueOld) Owner(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OwnerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// QueueMechBattleQueueNotifications retrieves all the battle_queue_notification's BattleQueueNotifications with an executor via queue_mech_id column.
func (o *BattleQueueOld) QueueMechBattleQueueNotifications(mods ...qm.QueryMod) battleQueueNotificationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_queue_notifications\".\"queue_mech_id\"=?", o.MechID),
	)

	query := BattleQueueNotifications(queryMods...)
	queries.SetFrom(query.Query, "\"battle_queue_notifications\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_queue_notifications\".*"})
	}

	return query
}

// LoadBattle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleQueueOldL) LoadBattle(e boil.Executor, singular bool, maybeBattleQueueOld interface{}, mods queries.Applicator) error {
	var slice []*BattleQueueOld
	var object *BattleQueueOld

	if singular {
		object = maybeBattleQueueOld.(*BattleQueueOld)
	} else {
		slice = *maybeBattleQueueOld.(*[]*BattleQueueOld)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleQueueOldR{}
		}
		if !queries.IsNil(object.BattleID) {
			args = append(args, object.BattleID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleQueueOldR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BattleID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BattleID) {
				args = append(args, obj.BattleID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battles`),
		qm.WhereIn(`battles.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Battle")
	}

	var resultSlice []*Battle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Battle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battles")
	}

	if len(battleQueueOldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Battle = foreign
		if foreign.R == nil {
			foreign.R = &battleR{}
		}
		foreign.R.BattleQueueOlds = append(foreign.R.BattleQueueOlds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BattleID, foreign.ID) {
				local.R.Battle = foreign
				if foreign.R == nil {
					foreign.R = &battleR{}
				}
				foreign.R.BattleQueueOlds = append(foreign.R.BattleQueueOlds, local)
				break
			}
		}
	}

	return nil
}

// LoadMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleQueueOldL) LoadMech(e boil.Executor, singular bool, maybeBattleQueueOld interface{}, mods queries.Applicator) error {
	var slice []*BattleQueueOld
	var object *BattleQueueOld

	if singular {
		object = maybeBattleQueueOld.(*BattleQueueOld)
	} else {
		slice = *maybeBattleQueueOld.(*[]*BattleQueueOld)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleQueueOldR{}
		}
		args = append(args, object.MechID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleQueueOldR{}
			}

			for _, a := range args {
				if a == obj.MechID {
					continue Outer
				}
			}

			args = append(args, obj.MechID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(battleQueueOldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Mech = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.BattleQueueOld = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MechID == foreign.ID {
				local.R.Mech = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.BattleQueueOld = local
				break
			}
		}
	}

	return nil
}

// LoadFaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleQueueOldL) LoadFaction(e boil.Executor, singular bool, maybeBattleQueueOld interface{}, mods queries.Applicator) error {
	var slice []*BattleQueueOld
	var object *BattleQueueOld

	if singular {
		object = maybeBattleQueueOld.(*BattleQueueOld)
	} else {
		slice = *maybeBattleQueueOld.(*[]*BattleQueueOld)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleQueueOldR{}
		}
		args = append(args, object.FactionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleQueueOldR{}
			}

			for _, a := range args {
				if a == obj.FactionID {
					continue Outer
				}
			}

			args = append(args, obj.FactionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`factions`),
		qm.WhereIn(`factions.id in ?`, args...),
		qmhelper.WhereIsNull(`factions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Faction")
	}

	var resultSlice []*Faction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Faction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for factions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for factions")
	}

	if len(battleQueueOldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Faction = foreign
		if foreign.R == nil {
			foreign.R = &factionR{}
		}
		foreign.R.BattleQueueOlds = append(foreign.R.BattleQueueOlds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FactionID == foreign.ID {
				local.R.Faction = foreign
				if foreign.R == nil {
					foreign.R = &factionR{}
				}
				foreign.R.BattleQueueOlds = append(foreign.R.BattleQueueOlds, local)
				break
			}
		}
	}

	return nil
}

// LoadFee allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleQueueOldL) LoadFee(e boil.Executor, singular bool, maybeBattleQueueOld interface{}, mods queries.Applicator) error {
	var slice []*BattleQueueOld
	var object *BattleQueueOld

	if singular {
		object = maybeBattleQueueOld.(*BattleQueueOld)
	} else {
		slice = *maybeBattleQueueOld.(*[]*BattleQueueOld)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleQueueOldR{}
		}
		if !queries.IsNil(object.FeeID) {
			args = append(args, object.FeeID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleQueueOldR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.FeeID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.FeeID) {
				args = append(args, obj.FeeID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_queue_fees_old`),
		qm.WhereIn(`battle_queue_fees_old.id in ?`, args...),
		qmhelper.WhereIsNull(`battle_queue_fees_old.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BattleQueueFeesOld")
	}

	var resultSlice []*BattleQueueFeesOld
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BattleQueueFeesOld")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battle_queue_fees_old")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_queue_fees_old")
	}

	if len(battleQueueOldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Fee = foreign
		if foreign.R == nil {
			foreign.R = &battleQueueFeesOldR{}
		}
		foreign.R.FeeBattleQueueOlds = append(foreign.R.FeeBattleQueueOlds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.FeeID, foreign.ID) {
				local.R.Fee = foreign
				if foreign.R == nil {
					foreign.R = &battleQueueFeesOldR{}
				}
				foreign.R.FeeBattleQueueOlds = append(foreign.R.FeeBattleQueueOlds, local)
				break
			}
		}
	}

	return nil
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleQueueOldL) LoadOwner(e boil.Executor, singular bool, maybeBattleQueueOld interface{}, mods queries.Applicator) error {
	var slice []*BattleQueueOld
	var object *BattleQueueOld

	if singular {
		object = maybeBattleQueueOld.(*BattleQueueOld)
	} else {
		slice = *maybeBattleQueueOld.(*[]*BattleQueueOld)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleQueueOldR{}
		}
		args = append(args, object.OwnerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleQueueOldR{}
			}

			for _, a := range args {
				if a == obj.OwnerID {
					continue Outer
				}
			}

			args = append(args, obj.OwnerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(battleQueueOldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Owner = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.OwnerBattleQueueOlds = append(foreign.R.OwnerBattleQueueOlds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerID == foreign.ID {
				local.R.Owner = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.OwnerBattleQueueOlds = append(foreign.R.OwnerBattleQueueOlds, local)
				break
			}
		}
	}

	return nil
}

// LoadQueueMechBattleQueueNotifications allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleQueueOldL) LoadQueueMechBattleQueueNotifications(e boil.Executor, singular bool, maybeBattleQueueOld interface{}, mods queries.Applicator) error {
	var slice []*BattleQueueOld
	var object *BattleQueueOld

	if singular {
		object = maybeBattleQueueOld.(*BattleQueueOld)
	} else {
		slice = *maybeBattleQueueOld.(*[]*BattleQueueOld)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleQueueOldR{}
		}
		args = append(args, object.MechID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleQueueOldR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.MechID) {
					continue Outer
				}
			}

			args = append(args, obj.MechID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_queue_notifications`),
		qm.WhereIn(`battle_queue_notifications.queue_mech_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_queue_notifications")
	}

	var resultSlice []*BattleQueueNotification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_queue_notifications")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_queue_notifications")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_queue_notifications")
	}

	if len(battleQueueNotificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.QueueMechBattleQueueNotifications = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleQueueNotificationR{}
			}
			foreign.R.QueueMech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.MechID, foreign.QueueMechID) {
				local.R.QueueMechBattleQueueNotifications = append(local.R.QueueMechBattleQueueNotifications, foreign)
				if foreign.R == nil {
					foreign.R = &battleQueueNotificationR{}
				}
				foreign.R.QueueMech = local
				break
			}
		}
	}

	return nil
}

// SetBattle of the battleQueueOld to the related item.
// Sets o.R.Battle to related.
// Adds o to related.R.BattleQueueOlds.
func (o *BattleQueueOld) SetBattle(exec boil.Executor, insert bool, related *Battle) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_queue_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleQueueOldPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MechID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BattleID, related.ID)
	if o.R == nil {
		o.R = &battleQueueOldR{
			Battle: related,
		}
	} else {
		o.R.Battle = related
	}

	if related.R == nil {
		related.R = &battleR{
			BattleQueueOlds: BattleQueueOldSlice{o},
		}
	} else {
		related.R.BattleQueueOlds = append(related.R.BattleQueueOlds, o)
	}

	return nil
}

// RemoveBattle relationship.
// Sets o.R.Battle to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BattleQueueOld) RemoveBattle(exec boil.Executor, related *Battle) error {
	var err error

	queries.SetScanner(&o.BattleID, nil)
	if _, err = o.Update(exec, boil.Whitelist("battle_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Battle = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BattleQueueOlds {
		if queries.Equal(o.BattleID, ri.BattleID) {
			continue
		}

		ln := len(related.R.BattleQueueOlds)
		if ln > 1 && i < ln-1 {
			related.R.BattleQueueOlds[i] = related.R.BattleQueueOlds[ln-1]
		}
		related.R.BattleQueueOlds = related.R.BattleQueueOlds[:ln-1]
		break
	}
	return nil
}

// SetMech of the battleQueueOld to the related item.
// Sets o.R.Mech to related.
// Adds o to related.R.BattleQueueOld.
func (o *BattleQueueOld) SetMech(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_queue_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleQueueOldPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MechID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MechID = related.ID
	if o.R == nil {
		o.R = &battleQueueOldR{
			Mech: related,
		}
	} else {
		o.R.Mech = related
	}

	if related.R == nil {
		related.R = &mechR{
			BattleQueueOld: o,
		}
	} else {
		related.R.BattleQueueOld = o
	}

	return nil
}

// SetFaction of the battleQueueOld to the related item.
// Sets o.R.Faction to related.
// Adds o to related.R.BattleQueueOlds.
func (o *BattleQueueOld) SetFaction(exec boil.Executor, insert bool, related *Faction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_queue_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"faction_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleQueueOldPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MechID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FactionID = related.ID
	if o.R == nil {
		o.R = &battleQueueOldR{
			Faction: related,
		}
	} else {
		o.R.Faction = related
	}

	if related.R == nil {
		related.R = &factionR{
			BattleQueueOlds: BattleQueueOldSlice{o},
		}
	} else {
		related.R.BattleQueueOlds = append(related.R.BattleQueueOlds, o)
	}

	return nil
}

// SetFee of the battleQueueOld to the related item.
// Sets o.R.Fee to related.
// Adds o to related.R.FeeBattleQueueOlds.
func (o *BattleQueueOld) SetFee(exec boil.Executor, insert bool, related *BattleQueueFeesOld) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_queue_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"fee_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleQueueOldPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MechID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.FeeID, related.ID)
	if o.R == nil {
		o.R = &battleQueueOldR{
			Fee: related,
		}
	} else {
		o.R.Fee = related
	}

	if related.R == nil {
		related.R = &battleQueueFeesOldR{
			FeeBattleQueueOlds: BattleQueueOldSlice{o},
		}
	} else {
		related.R.FeeBattleQueueOlds = append(related.R.FeeBattleQueueOlds, o)
	}

	return nil
}

// RemoveFee relationship.
// Sets o.R.Fee to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BattleQueueOld) RemoveFee(exec boil.Executor, related *BattleQueueFeesOld) error {
	var err error

	queries.SetScanner(&o.FeeID, nil)
	if _, err = o.Update(exec, boil.Whitelist("fee_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Fee = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.FeeBattleQueueOlds {
		if queries.Equal(o.FeeID, ri.FeeID) {
			continue
		}

		ln := len(related.R.FeeBattleQueueOlds)
		if ln > 1 && i < ln-1 {
			related.R.FeeBattleQueueOlds[i] = related.R.FeeBattleQueueOlds[ln-1]
		}
		related.R.FeeBattleQueueOlds = related.R.FeeBattleQueueOlds[:ln-1]
		break
	}
	return nil
}

// SetOwner of the battleQueueOld to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerBattleQueueOlds.
func (o *BattleQueueOld) SetOwner(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_queue_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleQueueOldPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MechID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerID = related.ID
	if o.R == nil {
		o.R = &battleQueueOldR{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &playerR{
			OwnerBattleQueueOlds: BattleQueueOldSlice{o},
		}
	} else {
		related.R.OwnerBattleQueueOlds = append(related.R.OwnerBattleQueueOlds, o)
	}

	return nil
}

// AddQueueMechBattleQueueNotifications adds the given related objects to the existing relationships
// of the battle_queue_old, optionally inserting them as new records.
// Appends related to o.R.QueueMechBattleQueueNotifications.
// Sets related.R.QueueMech appropriately.
func (o *BattleQueueOld) AddQueueMechBattleQueueNotifications(exec boil.Executor, insert bool, related ...*BattleQueueNotification) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.QueueMechID, o.MechID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_queue_notifications\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"queue_mech_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleQueueNotificationPrimaryKeyColumns),
			)
			values := []interface{}{o.MechID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.QueueMechID, o.MechID)
		}
	}

	if o.R == nil {
		o.R = &battleQueueOldR{
			QueueMechBattleQueueNotifications: related,
		}
	} else {
		o.R.QueueMechBattleQueueNotifications = append(o.R.QueueMechBattleQueueNotifications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleQueueNotificationR{
				QueueMech: o,
			}
		} else {
			rel.R.QueueMech = o
		}
	}
	return nil
}

// SetQueueMechBattleQueueNotifications removes all previously related items of the
// battle_queue_old replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.QueueMech's QueueMechBattleQueueNotifications accordingly.
// Replaces o.R.QueueMechBattleQueueNotifications with related.
// Sets related.R.QueueMech's QueueMechBattleQueueNotifications accordingly.
func (o *BattleQueueOld) SetQueueMechBattleQueueNotifications(exec boil.Executor, insert bool, related ...*BattleQueueNotification) error {
	query := "update \"battle_queue_notifications\" set \"queue_mech_id\" = null where \"queue_mech_id\" = $1"
	values := []interface{}{o.MechID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.QueueMechBattleQueueNotifications {
			queries.SetScanner(&rel.QueueMechID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.QueueMech = nil
		}

		o.R.QueueMechBattleQueueNotifications = nil
	}
	return o.AddQueueMechBattleQueueNotifications(exec, insert, related...)
}

// RemoveQueueMechBattleQueueNotifications relationships from objects passed in.
// Removes related items from R.QueueMechBattleQueueNotifications (uses pointer comparison, removal does not keep order)
// Sets related.R.QueueMech.
func (o *BattleQueueOld) RemoveQueueMechBattleQueueNotifications(exec boil.Executor, related ...*BattleQueueNotification) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.QueueMechID, nil)
		if rel.R != nil {
			rel.R.QueueMech = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("queue_mech_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.QueueMechBattleQueueNotifications {
			if rel != ri {
				continue
			}

			ln := len(o.R.QueueMechBattleQueueNotifications)
			if ln > 1 && i < ln-1 {
				o.R.QueueMechBattleQueueNotifications[i] = o.R.QueueMechBattleQueueNotifications[ln-1]
			}
			o.R.QueueMechBattleQueueNotifications = o.R.QueueMechBattleQueueNotifications[:ln-1]
			break
		}
	}

	return nil
}

// BattleQueueOlds retrieves all the records using an executor.
func BattleQueueOlds(mods ...qm.QueryMod) battleQueueOldQuery {
	mods = append(mods, qm.From("\"battle_queue_old\""))
	return battleQueueOldQuery{NewQuery(mods...)}
}

// FindBattleQueueOld retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattleQueueOld(exec boil.Executor, mechID string, selectCols ...string) (*BattleQueueOld, error) {
	battleQueueOldObj := &BattleQueueOld{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battle_queue_old\" where \"mech_id\"=$1", sel,
	)

	q := queries.Raw(query, mechID)

	err := q.Bind(nil, exec, battleQueueOldObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from battle_queue_old")
	}

	if err = battleQueueOldObj.doAfterSelectHooks(exec); err != nil {
		return battleQueueOldObj, err
	}

	return battleQueueOldObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BattleQueueOld) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_queue_old provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleQueueOldColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battleQueueOldInsertCacheMut.RLock()
	cache, cached := battleQueueOldInsertCache[key]
	battleQueueOldInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battleQueueOldAllColumns,
			battleQueueOldColumnsWithDefault,
			battleQueueOldColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battleQueueOldType, battleQueueOldMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battleQueueOldType, battleQueueOldMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battle_queue_old\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battle_queue_old\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into battle_queue_old")
	}

	if !cached {
		battleQueueOldInsertCacheMut.Lock()
		battleQueueOldInsertCache[key] = cache
		battleQueueOldInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BattleQueueOld.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BattleQueueOld) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battleQueueOldUpdateCacheMut.RLock()
	cache, cached := battleQueueOldUpdateCache[key]
	battleQueueOldUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battleQueueOldAllColumns,
			battleQueueOldPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update battle_queue_old, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battle_queue_old\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battleQueueOldPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battleQueueOldType, battleQueueOldMapping, append(wl, battleQueueOldPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update battle_queue_old row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for battle_queue_old")
	}

	if !cached {
		battleQueueOldUpdateCacheMut.Lock()
		battleQueueOldUpdateCache[key] = cache
		battleQueueOldUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battleQueueOldQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for battle_queue_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for battle_queue_old")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattleQueueOldSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleQueueOldPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battle_queue_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battleQueueOldPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in battleQueueOld slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all battleQueueOld")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BattleQueueOld) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_queue_old provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleQueueOldColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battleQueueOldUpsertCacheMut.RLock()
	cache, cached := battleQueueOldUpsertCache[key]
	battleQueueOldUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battleQueueOldAllColumns,
			battleQueueOldColumnsWithDefault,
			battleQueueOldColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			battleQueueOldAllColumns,
			battleQueueOldPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert battle_queue_old, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battleQueueOldPrimaryKeyColumns))
			copy(conflict, battleQueueOldPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battle_queue_old\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battleQueueOldType, battleQueueOldMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battleQueueOldType, battleQueueOldMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert battle_queue_old")
	}

	if !cached {
		battleQueueOldUpsertCacheMut.Lock()
		battleQueueOldUpsertCache[key] = cache
		battleQueueOldUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BattleQueueOld record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BattleQueueOld) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BattleQueueOld provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battleQueueOldPrimaryKeyMapping)
	sql := "DELETE FROM \"battle_queue_old\" WHERE \"mech_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from battle_queue_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for battle_queue_old")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battleQueueOldQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no battleQueueOldQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battle_queue_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_queue_old")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattleQueueOldSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(battleQueueOldBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleQueueOldPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"battle_queue_old\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleQueueOldPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battleQueueOld slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_queue_old")
	}

	if len(battleQueueOldAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BattleQueueOld) Reload(exec boil.Executor) error {
	ret, err := FindBattleQueueOld(exec, o.MechID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattleQueueOldSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattleQueueOldSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleQueueOldPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battle_queue_old\".* FROM \"battle_queue_old\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleQueueOldPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BattleQueueOldSlice")
	}

	*o = slice

	return nil
}

// BattleQueueOldExists checks if the BattleQueueOld row exists.
func BattleQueueOldExists(exec boil.Executor, mechID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battle_queue_old\" where \"mech_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, mechID)
	}
	row := exec.QueryRow(sql, mechID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if battle_queue_old exists")
	}

	return exists, nil
}
