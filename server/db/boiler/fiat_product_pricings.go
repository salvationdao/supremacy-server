// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FiatProductPricing is an object representing the database table.
type FiatProductPricing struct {
	FiatProductID string          `boiler:"fiat_product_id" boil:"fiat_product_id" json:"fiat_product_id" toml:"fiat_product_id" yaml:"fiat_product_id"`
	CurrencyCode  string          `boiler:"currency_code" boil:"currency_code" json:"currency_code" toml:"currency_code" yaml:"currency_code"`
	Amount        decimal.Decimal `boiler:"amount" boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	UpdatedAt     time.Time       `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *fiatProductPricingR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L fiatProductPricingL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FiatProductPricingColumns = struct {
	FiatProductID string
	CurrencyCode  string
	Amount        string
	UpdatedAt     string
}{
	FiatProductID: "fiat_product_id",
	CurrencyCode:  "currency_code",
	Amount:        "amount",
	UpdatedAt:     "updated_at",
}

var FiatProductPricingTableColumns = struct {
	FiatProductID string
	CurrencyCode  string
	Amount        string
	UpdatedAt     string
}{
	FiatProductID: "fiat_product_pricings.fiat_product_id",
	CurrencyCode:  "fiat_product_pricings.currency_code",
	Amount:        "fiat_product_pricings.amount",
	UpdatedAt:     "fiat_product_pricings.updated_at",
}

// Generated where

var FiatProductPricingWhere = struct {
	FiatProductID whereHelperstring
	CurrencyCode  whereHelperstring
	Amount        whereHelperdecimal_Decimal
	UpdatedAt     whereHelpertime_Time
}{
	FiatProductID: whereHelperstring{field: "\"fiat_product_pricings\".\"fiat_product_id\""},
	CurrencyCode:  whereHelperstring{field: "\"fiat_product_pricings\".\"currency_code\""},
	Amount:        whereHelperdecimal_Decimal{field: "\"fiat_product_pricings\".\"amount\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"fiat_product_pricings\".\"updated_at\""},
}

// FiatProductPricingRels is where relationship names are stored.
var FiatProductPricingRels = struct {
	FiatProduct string
}{
	FiatProduct: "FiatProduct",
}

// fiatProductPricingR is where relationships are stored.
type fiatProductPricingR struct {
	FiatProduct *FiatProduct `boiler:"FiatProduct" boil:"FiatProduct" json:"FiatProduct" toml:"FiatProduct" yaml:"FiatProduct"`
}

// NewStruct creates a new relationship struct
func (*fiatProductPricingR) NewStruct() *fiatProductPricingR {
	return &fiatProductPricingR{}
}

// fiatProductPricingL is where Load methods for each relationship are stored.
type fiatProductPricingL struct{}

var (
	fiatProductPricingAllColumns            = []string{"fiat_product_id", "currency_code", "amount", "updated_at"}
	fiatProductPricingColumnsWithoutDefault = []string{"fiat_product_id", "currency_code", "amount"}
	fiatProductPricingColumnsWithDefault    = []string{"updated_at"}
	fiatProductPricingPrimaryKeyColumns     = []string{"fiat_product_id", "currency_code"}
	fiatProductPricingGeneratedColumns      = []string{}
)

type (
	// FiatProductPricingSlice is an alias for a slice of pointers to FiatProductPricing.
	// This should almost always be used instead of []FiatProductPricing.
	FiatProductPricingSlice []*FiatProductPricing
	// FiatProductPricingHook is the signature for custom FiatProductPricing hook methods
	FiatProductPricingHook func(boil.Executor, *FiatProductPricing) error

	fiatProductPricingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	fiatProductPricingType                 = reflect.TypeOf(&FiatProductPricing{})
	fiatProductPricingMapping              = queries.MakeStructMapping(fiatProductPricingType)
	fiatProductPricingPrimaryKeyMapping, _ = queries.BindMapping(fiatProductPricingType, fiatProductPricingMapping, fiatProductPricingPrimaryKeyColumns)
	fiatProductPricingInsertCacheMut       sync.RWMutex
	fiatProductPricingInsertCache          = make(map[string]insertCache)
	fiatProductPricingUpdateCacheMut       sync.RWMutex
	fiatProductPricingUpdateCache          = make(map[string]updateCache)
	fiatProductPricingUpsertCacheMut       sync.RWMutex
	fiatProductPricingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var fiatProductPricingAfterSelectHooks []FiatProductPricingHook

var fiatProductPricingBeforeInsertHooks []FiatProductPricingHook
var fiatProductPricingAfterInsertHooks []FiatProductPricingHook

var fiatProductPricingBeforeUpdateHooks []FiatProductPricingHook
var fiatProductPricingAfterUpdateHooks []FiatProductPricingHook

var fiatProductPricingBeforeDeleteHooks []FiatProductPricingHook
var fiatProductPricingAfterDeleteHooks []FiatProductPricingHook

var fiatProductPricingBeforeUpsertHooks []FiatProductPricingHook
var fiatProductPricingAfterUpsertHooks []FiatProductPricingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FiatProductPricing) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range fiatProductPricingAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FiatProductPricing) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range fiatProductPricingBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FiatProductPricing) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range fiatProductPricingAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FiatProductPricing) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range fiatProductPricingBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FiatProductPricing) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range fiatProductPricingAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FiatProductPricing) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range fiatProductPricingBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FiatProductPricing) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range fiatProductPricingAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FiatProductPricing) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range fiatProductPricingBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FiatProductPricing) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range fiatProductPricingAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFiatProductPricingHook registers your hook function for all future operations.
func AddFiatProductPricingHook(hookPoint boil.HookPoint, fiatProductPricingHook FiatProductPricingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		fiatProductPricingAfterSelectHooks = append(fiatProductPricingAfterSelectHooks, fiatProductPricingHook)
	case boil.BeforeInsertHook:
		fiatProductPricingBeforeInsertHooks = append(fiatProductPricingBeforeInsertHooks, fiatProductPricingHook)
	case boil.AfterInsertHook:
		fiatProductPricingAfterInsertHooks = append(fiatProductPricingAfterInsertHooks, fiatProductPricingHook)
	case boil.BeforeUpdateHook:
		fiatProductPricingBeforeUpdateHooks = append(fiatProductPricingBeforeUpdateHooks, fiatProductPricingHook)
	case boil.AfterUpdateHook:
		fiatProductPricingAfterUpdateHooks = append(fiatProductPricingAfterUpdateHooks, fiatProductPricingHook)
	case boil.BeforeDeleteHook:
		fiatProductPricingBeforeDeleteHooks = append(fiatProductPricingBeforeDeleteHooks, fiatProductPricingHook)
	case boil.AfterDeleteHook:
		fiatProductPricingAfterDeleteHooks = append(fiatProductPricingAfterDeleteHooks, fiatProductPricingHook)
	case boil.BeforeUpsertHook:
		fiatProductPricingBeforeUpsertHooks = append(fiatProductPricingBeforeUpsertHooks, fiatProductPricingHook)
	case boil.AfterUpsertHook:
		fiatProductPricingAfterUpsertHooks = append(fiatProductPricingAfterUpsertHooks, fiatProductPricingHook)
	}
}

// One returns a single fiatProductPricing record from the query.
func (q fiatProductPricingQuery) One(exec boil.Executor) (*FiatProductPricing, error) {
	o := &FiatProductPricing{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for fiat_product_pricings")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FiatProductPricing records from the query.
func (q fiatProductPricingQuery) All(exec boil.Executor) (FiatProductPricingSlice, error) {
	var o []*FiatProductPricing

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to FiatProductPricing slice")
	}

	if len(fiatProductPricingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FiatProductPricing records in the query.
func (q fiatProductPricingQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count fiat_product_pricings rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q fiatProductPricingQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if fiat_product_pricings exists")
	}

	return count > 0, nil
}

// FiatProduct pointed to by the foreign key.
func (o *FiatProductPricing) FiatProduct(mods ...qm.QueryMod) fiatProductQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FiatProductID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := FiatProducts(queryMods...)
	queries.SetFrom(query.Query, "\"fiat_products\"")

	return query
}

// LoadFiatProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (fiatProductPricingL) LoadFiatProduct(e boil.Executor, singular bool, maybeFiatProductPricing interface{}, mods queries.Applicator) error {
	var slice []*FiatProductPricing
	var object *FiatProductPricing

	if singular {
		object = maybeFiatProductPricing.(*FiatProductPricing)
	} else {
		slice = *maybeFiatProductPricing.(*[]*FiatProductPricing)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fiatProductPricingR{}
		}
		args = append(args, object.FiatProductID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fiatProductPricingR{}
			}

			for _, a := range args {
				if a == obj.FiatProductID {
					continue Outer
				}
			}

			args = append(args, obj.FiatProductID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`fiat_products`),
		qm.WhereIn(`fiat_products.id in ?`, args...),
		qmhelper.WhereIsNull(`fiat_products.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load FiatProduct")
	}

	var resultSlice []*FiatProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice FiatProduct")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for fiat_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for fiat_products")
	}

	if len(fiatProductPricingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FiatProduct = foreign
		if foreign.R == nil {
			foreign.R = &fiatProductR{}
		}
		foreign.R.FiatProductPricings = append(foreign.R.FiatProductPricings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FiatProductID == foreign.ID {
				local.R.FiatProduct = foreign
				if foreign.R == nil {
					foreign.R = &fiatProductR{}
				}
				foreign.R.FiatProductPricings = append(foreign.R.FiatProductPricings, local)
				break
			}
		}
	}

	return nil
}

// SetFiatProduct of the fiatProductPricing to the related item.
// Sets o.R.FiatProduct to related.
// Adds o to related.R.FiatProductPricings.
func (o *FiatProductPricing) SetFiatProduct(exec boil.Executor, insert bool, related *FiatProduct) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"fiat_product_pricings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"fiat_product_id"}),
		strmangle.WhereClause("\"", "\"", 2, fiatProductPricingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.FiatProductID, o.CurrencyCode}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FiatProductID = related.ID
	if o.R == nil {
		o.R = &fiatProductPricingR{
			FiatProduct: related,
		}
	} else {
		o.R.FiatProduct = related
	}

	if related.R == nil {
		related.R = &fiatProductR{
			FiatProductPricings: FiatProductPricingSlice{o},
		}
	} else {
		related.R.FiatProductPricings = append(related.R.FiatProductPricings, o)
	}

	return nil
}

// FiatProductPricings retrieves all the records using an executor.
func FiatProductPricings(mods ...qm.QueryMod) fiatProductPricingQuery {
	mods = append(mods, qm.From("\"fiat_product_pricings\""))
	return fiatProductPricingQuery{NewQuery(mods...)}
}

// FindFiatProductPricing retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFiatProductPricing(exec boil.Executor, fiatProductID string, currencyCode string, selectCols ...string) (*FiatProductPricing, error) {
	fiatProductPricingObj := &FiatProductPricing{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"fiat_product_pricings\" where \"fiat_product_id\"=$1 AND \"currency_code\"=$2", sel,
	)

	q := queries.Raw(query, fiatProductID, currencyCode)

	err := q.Bind(nil, exec, fiatProductPricingObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from fiat_product_pricings")
	}

	if err = fiatProductPricingObj.doAfterSelectHooks(exec); err != nil {
		return fiatProductPricingObj, err
	}

	return fiatProductPricingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FiatProductPricing) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no fiat_product_pricings provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fiatProductPricingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	fiatProductPricingInsertCacheMut.RLock()
	cache, cached := fiatProductPricingInsertCache[key]
	fiatProductPricingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			fiatProductPricingAllColumns,
			fiatProductPricingColumnsWithDefault,
			fiatProductPricingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(fiatProductPricingType, fiatProductPricingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(fiatProductPricingType, fiatProductPricingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"fiat_product_pricings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"fiat_product_pricings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into fiat_product_pricings")
	}

	if !cached {
		fiatProductPricingInsertCacheMut.Lock()
		fiatProductPricingInsertCache[key] = cache
		fiatProductPricingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the FiatProductPricing.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FiatProductPricing) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	fiatProductPricingUpdateCacheMut.RLock()
	cache, cached := fiatProductPricingUpdateCache[key]
	fiatProductPricingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			fiatProductPricingAllColumns,
			fiatProductPricingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update fiat_product_pricings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"fiat_product_pricings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, fiatProductPricingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(fiatProductPricingType, fiatProductPricingMapping, append(wl, fiatProductPricingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update fiat_product_pricings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for fiat_product_pricings")
	}

	if !cached {
		fiatProductPricingUpdateCacheMut.Lock()
		fiatProductPricingUpdateCache[key] = cache
		fiatProductPricingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q fiatProductPricingQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for fiat_product_pricings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for fiat_product_pricings")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FiatProductPricingSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fiatProductPricingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"fiat_product_pricings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, fiatProductPricingPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in fiatProductPricing slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all fiatProductPricing")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FiatProductPricing) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no fiat_product_pricings provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fiatProductPricingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	fiatProductPricingUpsertCacheMut.RLock()
	cache, cached := fiatProductPricingUpsertCache[key]
	fiatProductPricingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			fiatProductPricingAllColumns,
			fiatProductPricingColumnsWithDefault,
			fiatProductPricingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			fiatProductPricingAllColumns,
			fiatProductPricingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert fiat_product_pricings, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(fiatProductPricingPrimaryKeyColumns))
			copy(conflict, fiatProductPricingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"fiat_product_pricings\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(fiatProductPricingType, fiatProductPricingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(fiatProductPricingType, fiatProductPricingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert fiat_product_pricings")
	}

	if !cached {
		fiatProductPricingUpsertCacheMut.Lock()
		fiatProductPricingUpsertCache[key] = cache
		fiatProductPricingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single FiatProductPricing record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FiatProductPricing) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no FiatProductPricing provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), fiatProductPricingPrimaryKeyMapping)
	sql := "DELETE FROM \"fiat_product_pricings\" WHERE \"fiat_product_id\"=$1 AND \"currency_code\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from fiat_product_pricings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for fiat_product_pricings")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q fiatProductPricingQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no fiatProductPricingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from fiat_product_pricings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for fiat_product_pricings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FiatProductPricingSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(fiatProductPricingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fiatProductPricingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"fiat_product_pricings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, fiatProductPricingPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from fiatProductPricing slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for fiat_product_pricings")
	}

	if len(fiatProductPricingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FiatProductPricing) Reload(exec boil.Executor) error {
	ret, err := FindFiatProductPricing(exec, o.FiatProductID, o.CurrencyCode)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FiatProductPricingSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FiatProductPricingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fiatProductPricingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"fiat_product_pricings\".* FROM \"fiat_product_pricings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, fiatProductPricingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in FiatProductPricingSlice")
	}

	*o = slice

	return nil
}

// FiatProductPricingExists checks if the FiatProductPricing row exists.
func FiatProductPricingExists(exec boil.Executor, fiatProductID string, currencyCode string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"fiat_product_pricings\" where \"fiat_product_id\"=$1 AND \"currency_code\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, fiatProductID, currencyCode)
	}
	row := exec.QueryRow(sql, fiatProductID, currencyCode)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if fiat_product_pricings exists")
	}

	return exists, nil
}
