// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BlueprintWeapon is an object representing the database table.
type BlueprintWeapon struct {
	ID                  string              `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BrandID             null.String         `boiler:"brand_id" boil:"brand_id" json:"brand_id,omitempty" toml:"brand_id" yaml:"brand_id,omitempty"`
	Label               string              `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	WeaponType          string              `boiler:"weapon_type" boil:"weapon_type" json:"weapon_type" toml:"weapon_type" yaml:"weapon_type"`
	DefaultSkinID       string              `boiler:"default_skin_id" boil:"default_skin_id" json:"default_skin_id" toml:"default_skin_id" yaml:"default_skin_id"`
	DeletedAt           null.Time           `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt           time.Time           `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt           time.Time           `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	RepairBlocks        int                 `boiler:"repair_blocks" boil:"repair_blocks" json:"repair_blocks" toml:"repair_blocks" yaml:"repair_blocks"`
	GameClientWeaponID  null.String         `boiler:"game_client_weapon_id" boil:"game_client_weapon_id" json:"game_client_weapon_id,omitempty" toml:"game_client_weapon_id" yaml:"game_client_weapon_id,omitempty"`
	Collection          string              `boiler:"collection" boil:"collection" json:"collection" toml:"collection" yaml:"collection"`
	Damage              int                 `boiler:"damage" boil:"damage" json:"damage" toml:"damage" yaml:"damage"`
	DefaultDamageType   string              `boiler:"default_damage_type" boil:"default_damage_type" json:"default_damage_type" toml:"default_damage_type" yaml:"default_damage_type"`
	DamageFalloff       null.Int            `boiler:"damage_falloff" boil:"damage_falloff" json:"damage_falloff,omitempty" toml:"damage_falloff" yaml:"damage_falloff,omitempty"`
	DamageFalloffRate   null.Int            `boiler:"damage_falloff_rate" boil:"damage_falloff_rate" json:"damage_falloff_rate,omitempty" toml:"damage_falloff_rate" yaml:"damage_falloff_rate,omitempty"`
	Radius              null.Int            `boiler:"radius" boil:"radius" json:"radius,omitempty" toml:"radius" yaml:"radius,omitempty"`
	RadiusDamageFalloff null.Int            `boiler:"radius_damage_falloff" boil:"radius_damage_falloff" json:"radius_damage_falloff,omitempty" toml:"radius_damage_falloff" yaml:"radius_damage_falloff,omitempty"`
	Spread              decimal.NullDecimal `boiler:"spread" boil:"spread" json:"spread,omitempty" toml:"spread" yaml:"spread,omitempty"`
	RateOfFire          decimal.NullDecimal `boiler:"rate_of_fire" boil:"rate_of_fire" json:"rate_of_fire,omitempty" toml:"rate_of_fire" yaml:"rate_of_fire,omitempty"`
	ProjectileSpeed     decimal.NullDecimal `boiler:"projectile_speed" boil:"projectile_speed" json:"projectile_speed,omitempty" toml:"projectile_speed" yaml:"projectile_speed,omitempty"`
	EnergyCost          decimal.NullDecimal `boiler:"energy_cost" boil:"energy_cost" json:"energy_cost,omitempty" toml:"energy_cost" yaml:"energy_cost,omitempty"`
	IsMelee             bool                `boiler:"is_melee" boil:"is_melee" json:"is_melee" toml:"is_melee" yaml:"is_melee"`
	MaxAmmo             null.Int            `boiler:"max_ammo" boil:"max_ammo" json:"max_ammo,omitempty" toml:"max_ammo" yaml:"max_ammo,omitempty"`

	R *blueprintWeaponR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L blueprintWeaponL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlueprintWeaponColumns = struct {
	ID                  string
	BrandID             string
	Label               string
	WeaponType          string
	DefaultSkinID       string
	DeletedAt           string
	UpdatedAt           string
	CreatedAt           string
	RepairBlocks        string
	GameClientWeaponID  string
	Collection          string
	Damage              string
	DefaultDamageType   string
	DamageFalloff       string
	DamageFalloffRate   string
	Radius              string
	RadiusDamageFalloff string
	Spread              string
	RateOfFire          string
	ProjectileSpeed     string
	EnergyCost          string
	IsMelee             string
	MaxAmmo             string
}{
	ID:                  "id",
	BrandID:             "brand_id",
	Label:               "label",
	WeaponType:          "weapon_type",
	DefaultSkinID:       "default_skin_id",
	DeletedAt:           "deleted_at",
	UpdatedAt:           "updated_at",
	CreatedAt:           "created_at",
	RepairBlocks:        "repair_blocks",
	GameClientWeaponID:  "game_client_weapon_id",
	Collection:          "collection",
	Damage:              "damage",
	DefaultDamageType:   "default_damage_type",
	DamageFalloff:       "damage_falloff",
	DamageFalloffRate:   "damage_falloff_rate",
	Radius:              "radius",
	RadiusDamageFalloff: "radius_damage_falloff",
	Spread:              "spread",
	RateOfFire:          "rate_of_fire",
	ProjectileSpeed:     "projectile_speed",
	EnergyCost:          "energy_cost",
	IsMelee:             "is_melee",
	MaxAmmo:             "max_ammo",
}

var BlueprintWeaponTableColumns = struct {
	ID                  string
	BrandID             string
	Label               string
	WeaponType          string
	DefaultSkinID       string
	DeletedAt           string
	UpdatedAt           string
	CreatedAt           string
	RepairBlocks        string
	GameClientWeaponID  string
	Collection          string
	Damage              string
	DefaultDamageType   string
	DamageFalloff       string
	DamageFalloffRate   string
	Radius              string
	RadiusDamageFalloff string
	Spread              string
	RateOfFire          string
	ProjectileSpeed     string
	EnergyCost          string
	IsMelee             string
	MaxAmmo             string
}{
	ID:                  "blueprint_weapons.id",
	BrandID:             "blueprint_weapons.brand_id",
	Label:               "blueprint_weapons.label",
	WeaponType:          "blueprint_weapons.weapon_type",
	DefaultSkinID:       "blueprint_weapons.default_skin_id",
	DeletedAt:           "blueprint_weapons.deleted_at",
	UpdatedAt:           "blueprint_weapons.updated_at",
	CreatedAt:           "blueprint_weapons.created_at",
	RepairBlocks:        "blueprint_weapons.repair_blocks",
	GameClientWeaponID:  "blueprint_weapons.game_client_weapon_id",
	Collection:          "blueprint_weapons.collection",
	Damage:              "blueprint_weapons.damage",
	DefaultDamageType:   "blueprint_weapons.default_damage_type",
	DamageFalloff:       "blueprint_weapons.damage_falloff",
	DamageFalloffRate:   "blueprint_weapons.damage_falloff_rate",
	Radius:              "blueprint_weapons.radius",
	RadiusDamageFalloff: "blueprint_weapons.radius_damage_falloff",
	Spread:              "blueprint_weapons.spread",
	RateOfFire:          "blueprint_weapons.rate_of_fire",
	ProjectileSpeed:     "blueprint_weapons.projectile_speed",
	EnergyCost:          "blueprint_weapons.energy_cost",
	IsMelee:             "blueprint_weapons.is_melee",
	MaxAmmo:             "blueprint_weapons.max_ammo",
}

// Generated where

var BlueprintWeaponWhere = struct {
	ID                  whereHelperstring
	BrandID             whereHelpernull_String
	Label               whereHelperstring
	WeaponType          whereHelperstring
	DefaultSkinID       whereHelperstring
	DeletedAt           whereHelpernull_Time
	UpdatedAt           whereHelpertime_Time
	CreatedAt           whereHelpertime_Time
	RepairBlocks        whereHelperint
	GameClientWeaponID  whereHelpernull_String
	Collection          whereHelperstring
	Damage              whereHelperint
	DefaultDamageType   whereHelperstring
	DamageFalloff       whereHelpernull_Int
	DamageFalloffRate   whereHelpernull_Int
	Radius              whereHelpernull_Int
	RadiusDamageFalloff whereHelpernull_Int
	Spread              whereHelperdecimal_NullDecimal
	RateOfFire          whereHelperdecimal_NullDecimal
	ProjectileSpeed     whereHelperdecimal_NullDecimal
	EnergyCost          whereHelperdecimal_NullDecimal
	IsMelee             whereHelperbool
	MaxAmmo             whereHelpernull_Int
}{
	ID:                  whereHelperstring{field: "\"blueprint_weapons\".\"id\""},
	BrandID:             whereHelpernull_String{field: "\"blueprint_weapons\".\"brand_id\""},
	Label:               whereHelperstring{field: "\"blueprint_weapons\".\"label\""},
	WeaponType:          whereHelperstring{field: "\"blueprint_weapons\".\"weapon_type\""},
	DefaultSkinID:       whereHelperstring{field: "\"blueprint_weapons\".\"default_skin_id\""},
	DeletedAt:           whereHelpernull_Time{field: "\"blueprint_weapons\".\"deleted_at\""},
	UpdatedAt:           whereHelpertime_Time{field: "\"blueprint_weapons\".\"updated_at\""},
	CreatedAt:           whereHelpertime_Time{field: "\"blueprint_weapons\".\"created_at\""},
	RepairBlocks:        whereHelperint{field: "\"blueprint_weapons\".\"repair_blocks\""},
	GameClientWeaponID:  whereHelpernull_String{field: "\"blueprint_weapons\".\"game_client_weapon_id\""},
	Collection:          whereHelperstring{field: "\"blueprint_weapons\".\"collection\""},
	Damage:              whereHelperint{field: "\"blueprint_weapons\".\"damage\""},
	DefaultDamageType:   whereHelperstring{field: "\"blueprint_weapons\".\"default_damage_type\""},
	DamageFalloff:       whereHelpernull_Int{field: "\"blueprint_weapons\".\"damage_falloff\""},
	DamageFalloffRate:   whereHelpernull_Int{field: "\"blueprint_weapons\".\"damage_falloff_rate\""},
	Radius:              whereHelpernull_Int{field: "\"blueprint_weapons\".\"radius\""},
	RadiusDamageFalloff: whereHelpernull_Int{field: "\"blueprint_weapons\".\"radius_damage_falloff\""},
	Spread:              whereHelperdecimal_NullDecimal{field: "\"blueprint_weapons\".\"spread\""},
	RateOfFire:          whereHelperdecimal_NullDecimal{field: "\"blueprint_weapons\".\"rate_of_fire\""},
	ProjectileSpeed:     whereHelperdecimal_NullDecimal{field: "\"blueprint_weapons\".\"projectile_speed\""},
	EnergyCost:          whereHelperdecimal_NullDecimal{field: "\"blueprint_weapons\".\"energy_cost\""},
	IsMelee:             whereHelperbool{field: "\"blueprint_weapons\".\"is_melee\""},
	MaxAmmo:             whereHelpernull_Int{field: "\"blueprint_weapons\".\"max_ammo\""},
}

// BlueprintWeaponRels is where relationship names are stored.
var BlueprintWeaponRels = struct {
	DefaultSkin                               string
	Brand                                     string
	WeaponModelWeaponModelSkinCompatibilities string
	BlueprintWeapons                          string
}{
	DefaultSkin: "DefaultSkin",
	Brand:       "Brand",
	WeaponModelWeaponModelSkinCompatibilities: "WeaponModelWeaponModelSkinCompatibilities",
	BlueprintWeapons: "BlueprintWeapons",
}

// blueprintWeaponR is where relationships are stored.
type blueprintWeaponR struct {
	DefaultSkin                               *BlueprintWeaponSkin              `boiler:"DefaultSkin" boil:"DefaultSkin" json:"DefaultSkin" toml:"DefaultSkin" yaml:"DefaultSkin"`
	Brand                                     *Brand                            `boiler:"Brand" boil:"Brand" json:"Brand" toml:"Brand" yaml:"Brand"`
	WeaponModelWeaponModelSkinCompatibilities WeaponModelSkinCompatibilitySlice `boiler:"WeaponModelWeaponModelSkinCompatibilities" boil:"WeaponModelWeaponModelSkinCompatibilities" json:"WeaponModelWeaponModelSkinCompatibilities" toml:"WeaponModelWeaponModelSkinCompatibilities" yaml:"WeaponModelWeaponModelSkinCompatibilities"`
	BlueprintWeapons                          WeaponSlice                       `boiler:"BlueprintWeapons" boil:"BlueprintWeapons" json:"BlueprintWeapons" toml:"BlueprintWeapons" yaml:"BlueprintWeapons"`
}

// NewStruct creates a new relationship struct
func (*blueprintWeaponR) NewStruct() *blueprintWeaponR {
	return &blueprintWeaponR{}
}

// blueprintWeaponL is where Load methods for each relationship are stored.
type blueprintWeaponL struct{}

var (
	blueprintWeaponAllColumns            = []string{"id", "brand_id", "label", "weapon_type", "default_skin_id", "deleted_at", "updated_at", "created_at", "repair_blocks", "game_client_weapon_id", "collection", "damage", "default_damage_type", "damage_falloff", "damage_falloff_rate", "radius", "radius_damage_falloff", "spread", "rate_of_fire", "projectile_speed", "energy_cost", "is_melee", "max_ammo"}
	blueprintWeaponColumnsWithoutDefault = []string{"label", "weapon_type", "default_skin_id"}
	blueprintWeaponColumnsWithDefault    = []string{"id", "brand_id", "deleted_at", "updated_at", "created_at", "repair_blocks", "game_client_weapon_id", "collection", "damage", "default_damage_type", "damage_falloff", "damage_falloff_rate", "radius", "radius_damage_falloff", "spread", "rate_of_fire", "projectile_speed", "energy_cost", "is_melee", "max_ammo"}
	blueprintWeaponPrimaryKeyColumns     = []string{"id"}
	blueprintWeaponGeneratedColumns      = []string{}
)

type (
	// BlueprintWeaponSlice is an alias for a slice of pointers to BlueprintWeapon.
	// This should almost always be used instead of []BlueprintWeapon.
	BlueprintWeaponSlice []*BlueprintWeapon
	// BlueprintWeaponHook is the signature for custom BlueprintWeapon hook methods
	BlueprintWeaponHook func(boil.Executor, *BlueprintWeapon) error

	blueprintWeaponQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blueprintWeaponType                 = reflect.TypeOf(&BlueprintWeapon{})
	blueprintWeaponMapping              = queries.MakeStructMapping(blueprintWeaponType)
	blueprintWeaponPrimaryKeyMapping, _ = queries.BindMapping(blueprintWeaponType, blueprintWeaponMapping, blueprintWeaponPrimaryKeyColumns)
	blueprintWeaponInsertCacheMut       sync.RWMutex
	blueprintWeaponInsertCache          = make(map[string]insertCache)
	blueprintWeaponUpdateCacheMut       sync.RWMutex
	blueprintWeaponUpdateCache          = make(map[string]updateCache)
	blueprintWeaponUpsertCacheMut       sync.RWMutex
	blueprintWeaponUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var blueprintWeaponAfterSelectHooks []BlueprintWeaponHook

var blueprintWeaponBeforeInsertHooks []BlueprintWeaponHook
var blueprintWeaponAfterInsertHooks []BlueprintWeaponHook

var blueprintWeaponBeforeUpdateHooks []BlueprintWeaponHook
var blueprintWeaponAfterUpdateHooks []BlueprintWeaponHook

var blueprintWeaponBeforeDeleteHooks []BlueprintWeaponHook
var blueprintWeaponAfterDeleteHooks []BlueprintWeaponHook

var blueprintWeaponBeforeUpsertHooks []BlueprintWeaponHook
var blueprintWeaponAfterUpsertHooks []BlueprintWeaponHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BlueprintWeapon) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintWeaponAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BlueprintWeapon) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintWeaponBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BlueprintWeapon) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintWeaponAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BlueprintWeapon) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintWeaponBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BlueprintWeapon) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintWeaponAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BlueprintWeapon) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintWeaponBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BlueprintWeapon) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintWeaponAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BlueprintWeapon) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintWeaponBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BlueprintWeapon) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintWeaponAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBlueprintWeaponHook registers your hook function for all future operations.
func AddBlueprintWeaponHook(hookPoint boil.HookPoint, blueprintWeaponHook BlueprintWeaponHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		blueprintWeaponAfterSelectHooks = append(blueprintWeaponAfterSelectHooks, blueprintWeaponHook)
	case boil.BeforeInsertHook:
		blueprintWeaponBeforeInsertHooks = append(blueprintWeaponBeforeInsertHooks, blueprintWeaponHook)
	case boil.AfterInsertHook:
		blueprintWeaponAfterInsertHooks = append(blueprintWeaponAfterInsertHooks, blueprintWeaponHook)
	case boil.BeforeUpdateHook:
		blueprintWeaponBeforeUpdateHooks = append(blueprintWeaponBeforeUpdateHooks, blueprintWeaponHook)
	case boil.AfterUpdateHook:
		blueprintWeaponAfterUpdateHooks = append(blueprintWeaponAfterUpdateHooks, blueprintWeaponHook)
	case boil.BeforeDeleteHook:
		blueprintWeaponBeforeDeleteHooks = append(blueprintWeaponBeforeDeleteHooks, blueprintWeaponHook)
	case boil.AfterDeleteHook:
		blueprintWeaponAfterDeleteHooks = append(blueprintWeaponAfterDeleteHooks, blueprintWeaponHook)
	case boil.BeforeUpsertHook:
		blueprintWeaponBeforeUpsertHooks = append(blueprintWeaponBeforeUpsertHooks, blueprintWeaponHook)
	case boil.AfterUpsertHook:
		blueprintWeaponAfterUpsertHooks = append(blueprintWeaponAfterUpsertHooks, blueprintWeaponHook)
	}
}

// One returns a single blueprintWeapon record from the query.
func (q blueprintWeaponQuery) One(exec boil.Executor) (*BlueprintWeapon, error) {
	o := &BlueprintWeapon{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for blueprint_weapons")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BlueprintWeapon records from the query.
func (q blueprintWeaponQuery) All(exec boil.Executor) (BlueprintWeaponSlice, error) {
	var o []*BlueprintWeapon

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BlueprintWeapon slice")
	}

	if len(blueprintWeaponAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BlueprintWeapon records in the query.
func (q blueprintWeaponQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count blueprint_weapons rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q blueprintWeaponQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if blueprint_weapons exists")
	}

	return count > 0, nil
}

// DefaultSkin pointed to by the foreign key.
func (o *BlueprintWeapon) DefaultSkin(mods ...qm.QueryMod) blueprintWeaponSkinQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DefaultSkinID),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintWeaponSkins(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_weapon_skin\"")

	return query
}

// Brand pointed to by the foreign key.
func (o *BlueprintWeapon) Brand(mods ...qm.QueryMod) brandQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BrandID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Brands(queryMods...)
	queries.SetFrom(query.Query, "\"brands\"")

	return query
}

// WeaponModelWeaponModelSkinCompatibilities retrieves all the weapon_model_skin_compatibility's WeaponModelSkinCompatibilities with an executor via weapon_model_id column.
func (o *BlueprintWeapon) WeaponModelWeaponModelSkinCompatibilities(mods ...qm.QueryMod) weaponModelSkinCompatibilityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"weapon_model_skin_compatibilities\".\"weapon_model_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"weapon_model_skin_compatibilities\".\"deleted_at\""),
	)

	query := WeaponModelSkinCompatibilities(queryMods...)
	queries.SetFrom(query.Query, "\"weapon_model_skin_compatibilities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"weapon_model_skin_compatibilities\".*"})
	}

	return query
}

// BlueprintWeapons retrieves all the weapon's Weapons with an executor via blueprint_id column.
func (o *BlueprintWeapon) BlueprintWeapons(mods ...qm.QueryMod) weaponQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"weapons\".\"blueprint_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"weapons\".\"deleted_at\""),
	)

	query := Weapons(queryMods...)
	queries.SetFrom(query.Query, "\"weapons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"weapons\".*"})
	}

	return query
}

// LoadDefaultSkin allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blueprintWeaponL) LoadDefaultSkin(e boil.Executor, singular bool, maybeBlueprintWeapon interface{}, mods queries.Applicator) error {
	var slice []*BlueprintWeapon
	var object *BlueprintWeapon

	if singular {
		object = maybeBlueprintWeapon.(*BlueprintWeapon)
	} else {
		slice = *maybeBlueprintWeapon.(*[]*BlueprintWeapon)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintWeaponR{}
		}
		args = append(args, object.DefaultSkinID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintWeaponR{}
			}

			for _, a := range args {
				if a == obj.DefaultSkinID {
					continue Outer
				}
			}

			args = append(args, obj.DefaultSkinID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_weapon_skin`),
		qm.WhereIn(`blueprint_weapon_skin.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintWeaponSkin")
	}

	var resultSlice []*BlueprintWeaponSkin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintWeaponSkin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_weapon_skin")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_weapon_skin")
	}

	if len(blueprintWeaponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DefaultSkin = foreign
		if foreign.R == nil {
			foreign.R = &blueprintWeaponSkinR{}
		}
		foreign.R.DefaultSkinBlueprintWeapons = append(foreign.R.DefaultSkinBlueprintWeapons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DefaultSkinID == foreign.ID {
				local.R.DefaultSkin = foreign
				if foreign.R == nil {
					foreign.R = &blueprintWeaponSkinR{}
				}
				foreign.R.DefaultSkinBlueprintWeapons = append(foreign.R.DefaultSkinBlueprintWeapons, local)
				break
			}
		}
	}

	return nil
}

// LoadBrand allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blueprintWeaponL) LoadBrand(e boil.Executor, singular bool, maybeBlueprintWeapon interface{}, mods queries.Applicator) error {
	var slice []*BlueprintWeapon
	var object *BlueprintWeapon

	if singular {
		object = maybeBlueprintWeapon.(*BlueprintWeapon)
	} else {
		slice = *maybeBlueprintWeapon.(*[]*BlueprintWeapon)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintWeaponR{}
		}
		if !queries.IsNil(object.BrandID) {
			args = append(args, object.BrandID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintWeaponR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BrandID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BrandID) {
				args = append(args, obj.BrandID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`brands`),
		qm.WhereIn(`brands.id in ?`, args...),
		qmhelper.WhereIsNull(`brands.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Brand")
	}

	var resultSlice []*Brand
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Brand")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for brands")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for brands")
	}

	if len(blueprintWeaponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Brand = foreign
		if foreign.R == nil {
			foreign.R = &brandR{}
		}
		foreign.R.BlueprintWeapons = append(foreign.R.BlueprintWeapons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BrandID, foreign.ID) {
				local.R.Brand = foreign
				if foreign.R == nil {
					foreign.R = &brandR{}
				}
				foreign.R.BlueprintWeapons = append(foreign.R.BlueprintWeapons, local)
				break
			}
		}
	}

	return nil
}

// LoadWeaponModelWeaponModelSkinCompatibilities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blueprintWeaponL) LoadWeaponModelWeaponModelSkinCompatibilities(e boil.Executor, singular bool, maybeBlueprintWeapon interface{}, mods queries.Applicator) error {
	var slice []*BlueprintWeapon
	var object *BlueprintWeapon

	if singular {
		object = maybeBlueprintWeapon.(*BlueprintWeapon)
	} else {
		slice = *maybeBlueprintWeapon.(*[]*BlueprintWeapon)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintWeaponR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintWeaponR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`weapon_model_skin_compatibilities`),
		qm.WhereIn(`weapon_model_skin_compatibilities.weapon_model_id in ?`, args...),
		qmhelper.WhereIsNull(`weapon_model_skin_compatibilities.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load weapon_model_skin_compatibilities")
	}

	var resultSlice []*WeaponModelSkinCompatibility
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice weapon_model_skin_compatibilities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on weapon_model_skin_compatibilities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for weapon_model_skin_compatibilities")
	}

	if len(weaponModelSkinCompatibilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WeaponModelWeaponModelSkinCompatibilities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &weaponModelSkinCompatibilityR{}
			}
			foreign.R.WeaponModel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.WeaponModelID {
				local.R.WeaponModelWeaponModelSkinCompatibilities = append(local.R.WeaponModelWeaponModelSkinCompatibilities, foreign)
				if foreign.R == nil {
					foreign.R = &weaponModelSkinCompatibilityR{}
				}
				foreign.R.WeaponModel = local
				break
			}
		}
	}

	return nil
}

// LoadBlueprintWeapons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blueprintWeaponL) LoadBlueprintWeapons(e boil.Executor, singular bool, maybeBlueprintWeapon interface{}, mods queries.Applicator) error {
	var slice []*BlueprintWeapon
	var object *BlueprintWeapon

	if singular {
		object = maybeBlueprintWeapon.(*BlueprintWeapon)
	} else {
		slice = *maybeBlueprintWeapon.(*[]*BlueprintWeapon)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintWeaponR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintWeaponR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`weapons`),
		qm.WhereIn(`weapons.blueprint_id in ?`, args...),
		qmhelper.WhereIsNull(`weapons.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load weapons")
	}

	var resultSlice []*Weapon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice weapons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on weapons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for weapons")
	}

	if len(weaponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlueprintWeapons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &weaponR{}
			}
			foreign.R.Blueprint = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BlueprintID {
				local.R.BlueprintWeapons = append(local.R.BlueprintWeapons, foreign)
				if foreign.R == nil {
					foreign.R = &weaponR{}
				}
				foreign.R.Blueprint = local
				break
			}
		}
	}

	return nil
}

// SetDefaultSkin of the blueprintWeapon to the related item.
// Sets o.R.DefaultSkin to related.
// Adds o to related.R.DefaultSkinBlueprintWeapons.
func (o *BlueprintWeapon) SetDefaultSkin(exec boil.Executor, insert bool, related *BlueprintWeaponSkin) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"blueprint_weapons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"default_skin_id"}),
		strmangle.WhereClause("\"", "\"", 2, blueprintWeaponPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DefaultSkinID = related.ID
	if o.R == nil {
		o.R = &blueprintWeaponR{
			DefaultSkin: related,
		}
	} else {
		o.R.DefaultSkin = related
	}

	if related.R == nil {
		related.R = &blueprintWeaponSkinR{
			DefaultSkinBlueprintWeapons: BlueprintWeaponSlice{o},
		}
	} else {
		related.R.DefaultSkinBlueprintWeapons = append(related.R.DefaultSkinBlueprintWeapons, o)
	}

	return nil
}

// SetBrand of the blueprintWeapon to the related item.
// Sets o.R.Brand to related.
// Adds o to related.R.BlueprintWeapons.
func (o *BlueprintWeapon) SetBrand(exec boil.Executor, insert bool, related *Brand) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"blueprint_weapons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"brand_id"}),
		strmangle.WhereClause("\"", "\"", 2, blueprintWeaponPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BrandID, related.ID)
	if o.R == nil {
		o.R = &blueprintWeaponR{
			Brand: related,
		}
	} else {
		o.R.Brand = related
	}

	if related.R == nil {
		related.R = &brandR{
			BlueprintWeapons: BlueprintWeaponSlice{o},
		}
	} else {
		related.R.BlueprintWeapons = append(related.R.BlueprintWeapons, o)
	}

	return nil
}

// RemoveBrand relationship.
// Sets o.R.Brand to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BlueprintWeapon) RemoveBrand(exec boil.Executor, related *Brand) error {
	var err error

	queries.SetScanner(&o.BrandID, nil)
	if _, err = o.Update(exec, boil.Whitelist("brand_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Brand = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BlueprintWeapons {
		if queries.Equal(o.BrandID, ri.BrandID) {
			continue
		}

		ln := len(related.R.BlueprintWeapons)
		if ln > 1 && i < ln-1 {
			related.R.BlueprintWeapons[i] = related.R.BlueprintWeapons[ln-1]
		}
		related.R.BlueprintWeapons = related.R.BlueprintWeapons[:ln-1]
		break
	}
	return nil
}

// AddWeaponModelWeaponModelSkinCompatibilities adds the given related objects to the existing relationships
// of the blueprint_weapon, optionally inserting them as new records.
// Appends related to o.R.WeaponModelWeaponModelSkinCompatibilities.
// Sets related.R.WeaponModel appropriately.
func (o *BlueprintWeapon) AddWeaponModelWeaponModelSkinCompatibilities(exec boil.Executor, insert bool, related ...*WeaponModelSkinCompatibility) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.WeaponModelID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"weapon_model_skin_compatibilities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"weapon_model_id"}),
				strmangle.WhereClause("\"", "\"", 2, weaponModelSkinCompatibilityPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.BlueprintWeaponSkinID, rel.WeaponModelID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.WeaponModelID = o.ID
		}
	}

	if o.R == nil {
		o.R = &blueprintWeaponR{
			WeaponModelWeaponModelSkinCompatibilities: related,
		}
	} else {
		o.R.WeaponModelWeaponModelSkinCompatibilities = append(o.R.WeaponModelWeaponModelSkinCompatibilities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &weaponModelSkinCompatibilityR{
				WeaponModel: o,
			}
		} else {
			rel.R.WeaponModel = o
		}
	}
	return nil
}

// AddBlueprintWeapons adds the given related objects to the existing relationships
// of the blueprint_weapon, optionally inserting them as new records.
// Appends related to o.R.BlueprintWeapons.
// Sets related.R.Blueprint appropriately.
func (o *BlueprintWeapon) AddBlueprintWeapons(exec boil.Executor, insert bool, related ...*Weapon) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BlueprintID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"weapons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_id"}),
				strmangle.WhereClause("\"", "\"", 2, weaponPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BlueprintID = o.ID
		}
	}

	if o.R == nil {
		o.R = &blueprintWeaponR{
			BlueprintWeapons: related,
		}
	} else {
		o.R.BlueprintWeapons = append(o.R.BlueprintWeapons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &weaponR{
				Blueprint: o,
			}
		} else {
			rel.R.Blueprint = o
		}
	}
	return nil
}

// BlueprintWeapons retrieves all the records using an executor.
func BlueprintWeapons(mods ...qm.QueryMod) blueprintWeaponQuery {
	mods = append(mods, qm.From("\"blueprint_weapons\""), qmhelper.WhereIsNull("\"blueprint_weapons\".\"deleted_at\""))
	return blueprintWeaponQuery{NewQuery(mods...)}
}

// FindBlueprintWeapon retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlueprintWeapon(exec boil.Executor, iD string, selectCols ...string) (*BlueprintWeapon, error) {
	blueprintWeaponObj := &BlueprintWeapon{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"blueprint_weapons\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, blueprintWeaponObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from blueprint_weapons")
	}

	if err = blueprintWeaponObj.doAfterSelectHooks(exec); err != nil {
		return blueprintWeaponObj, err
	}

	return blueprintWeaponObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlueprintWeapon) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_weapons provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintWeaponColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blueprintWeaponInsertCacheMut.RLock()
	cache, cached := blueprintWeaponInsertCache[key]
	blueprintWeaponInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blueprintWeaponAllColumns,
			blueprintWeaponColumnsWithDefault,
			blueprintWeaponColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blueprintWeaponType, blueprintWeaponMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blueprintWeaponType, blueprintWeaponMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"blueprint_weapons\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"blueprint_weapons\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into blueprint_weapons")
	}

	if !cached {
		blueprintWeaponInsertCacheMut.Lock()
		blueprintWeaponInsertCache[key] = cache
		blueprintWeaponInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BlueprintWeapon.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlueprintWeapon) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	blueprintWeaponUpdateCacheMut.RLock()
	cache, cached := blueprintWeaponUpdateCache[key]
	blueprintWeaponUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blueprintWeaponAllColumns,
			blueprintWeaponPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update blueprint_weapons, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"blueprint_weapons\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, blueprintWeaponPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blueprintWeaponType, blueprintWeaponMapping, append(wl, blueprintWeaponPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update blueprint_weapons row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for blueprint_weapons")
	}

	if !cached {
		blueprintWeaponUpdateCacheMut.Lock()
		blueprintWeaponUpdateCache[key] = cache
		blueprintWeaponUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q blueprintWeaponQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for blueprint_weapons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for blueprint_weapons")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlueprintWeaponSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintWeaponPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"blueprint_weapons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, blueprintWeaponPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in blueprintWeapon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all blueprintWeapon")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlueprintWeapon) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_weapons provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintWeaponColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blueprintWeaponUpsertCacheMut.RLock()
	cache, cached := blueprintWeaponUpsertCache[key]
	blueprintWeaponUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blueprintWeaponAllColumns,
			blueprintWeaponColumnsWithDefault,
			blueprintWeaponColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			blueprintWeaponAllColumns,
			blueprintWeaponPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert blueprint_weapons, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(blueprintWeaponPrimaryKeyColumns))
			copy(conflict, blueprintWeaponPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"blueprint_weapons\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(blueprintWeaponType, blueprintWeaponMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blueprintWeaponType, blueprintWeaponMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert blueprint_weapons")
	}

	if !cached {
		blueprintWeaponUpsertCacheMut.Lock()
		blueprintWeaponUpsertCache[key] = cache
		blueprintWeaponUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BlueprintWeapon record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlueprintWeapon) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BlueprintWeapon provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blueprintWeaponPrimaryKeyMapping)
		sql = "DELETE FROM \"blueprint_weapons\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"blueprint_weapons\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(blueprintWeaponType, blueprintWeaponMapping, append(wl, blueprintWeaponPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from blueprint_weapons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for blueprint_weapons")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q blueprintWeaponQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no blueprintWeaponQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprint_weapons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_weapons")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlueprintWeaponSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(blueprintWeaponBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintWeaponPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"blueprint_weapons\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintWeaponPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintWeaponPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"blueprint_weapons\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, blueprintWeaponPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprintWeapon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_weapons")
	}

	if len(blueprintWeaponAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlueprintWeapon) Reload(exec boil.Executor) error {
	ret, err := FindBlueprintWeapon(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlueprintWeaponSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlueprintWeaponSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintWeaponPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"blueprint_weapons\".* FROM \"blueprint_weapons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintWeaponPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BlueprintWeaponSlice")
	}

	*o = slice

	return nil
}

// BlueprintWeaponExists checks if the BlueprintWeapon row exists.
func BlueprintWeaponExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"blueprint_weapons\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if blueprint_weapons exists")
	}

	return exists, nil
}
