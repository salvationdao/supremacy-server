// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// OvenStream is an object representing the database table.
type OvenStream struct {
	ID                   string            `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Name                 string            `boiler:"name" boil:"name" json:"name" toml:"name" yaml:"name"`
	BaseURL              string            `boiler:"base_url" boil:"base_url" json:"base_url" toml:"base_url" yaml:"base_url"`
	AvailableResolutions types.StringArray `boiler:"available_resolutions" boil:"available_resolutions" json:"available_resolutions" toml:"available_resolutions" yaml:"available_resolutions"`
	DefaultResolution    string            `boiler:"default_resolution" boil:"default_resolution" json:"default_resolution" toml:"default_resolution" yaml:"default_resolution"`
	Active               bool              `boiler:"active" boil:"active" json:"active" toml:"active" yaml:"active"`

	R *ovenStreamR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L ovenStreamL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OvenStreamColumns = struct {
	ID                   string
	Name                 string
	BaseURL              string
	AvailableResolutions string
	DefaultResolution    string
	Active               string
}{
	ID:                   "id",
	Name:                 "name",
	BaseURL:              "base_url",
	AvailableResolutions: "available_resolutions",
	DefaultResolution:    "default_resolution",
	Active:               "active",
}

var OvenStreamTableColumns = struct {
	ID                   string
	Name                 string
	BaseURL              string
	AvailableResolutions string
	DefaultResolution    string
	Active               string
}{
	ID:                   "oven_streams.id",
	Name:                 "oven_streams.name",
	BaseURL:              "oven_streams.base_url",
	AvailableResolutions: "oven_streams.available_resolutions",
	DefaultResolution:    "oven_streams.default_resolution",
	Active:               "oven_streams.active",
}

// Generated where

type whereHelpertypes_StringArray struct{ field string }

func (w whereHelpertypes_StringArray) EQ(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_StringArray) NEQ(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_StringArray) LT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_StringArray) LTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_StringArray) GT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_StringArray) GTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var OvenStreamWhere = struct {
	ID                   whereHelperstring
	Name                 whereHelperstring
	BaseURL              whereHelperstring
	AvailableResolutions whereHelpertypes_StringArray
	DefaultResolution    whereHelperstring
	Active               whereHelperbool
}{
	ID:                   whereHelperstring{field: "\"oven_streams\".\"id\""},
	Name:                 whereHelperstring{field: "\"oven_streams\".\"name\""},
	BaseURL:              whereHelperstring{field: "\"oven_streams\".\"base_url\""},
	AvailableResolutions: whereHelpertypes_StringArray{field: "\"oven_streams\".\"available_resolutions\""},
	DefaultResolution:    whereHelperstring{field: "\"oven_streams\".\"default_resolution\""},
	Active:               whereHelperbool{field: "\"oven_streams\".\"active\""},
}

// OvenStreamRels is where relationship names are stored.
var OvenStreamRels = struct {
	BattleArenas string
}{
	BattleArenas: "BattleArenas",
}

// ovenStreamR is where relationships are stored.
type ovenStreamR struct {
	BattleArenas BattleArenaSlice `boiler:"BattleArenas" boil:"BattleArenas" json:"BattleArenas" toml:"BattleArenas" yaml:"BattleArenas"`
}

// NewStruct creates a new relationship struct
func (*ovenStreamR) NewStruct() *ovenStreamR {
	return &ovenStreamR{}
}

// ovenStreamL is where Load methods for each relationship are stored.
type ovenStreamL struct{}

var (
	ovenStreamAllColumns            = []string{"id", "name", "base_url", "available_resolutions", "default_resolution", "active"}
	ovenStreamColumnsWithoutDefault = []string{"name", "base_url", "available_resolutions", "default_resolution", "active"}
	ovenStreamColumnsWithDefault    = []string{"id"}
	ovenStreamPrimaryKeyColumns     = []string{"id"}
	ovenStreamGeneratedColumns      = []string{}
)

type (
	// OvenStreamSlice is an alias for a slice of pointers to OvenStream.
	// This should almost always be used instead of []OvenStream.
	OvenStreamSlice []*OvenStream
	// OvenStreamHook is the signature for custom OvenStream hook methods
	OvenStreamHook func(boil.Executor, *OvenStream) error

	ovenStreamQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	ovenStreamType                 = reflect.TypeOf(&OvenStream{})
	ovenStreamMapping              = queries.MakeStructMapping(ovenStreamType)
	ovenStreamPrimaryKeyMapping, _ = queries.BindMapping(ovenStreamType, ovenStreamMapping, ovenStreamPrimaryKeyColumns)
	ovenStreamInsertCacheMut       sync.RWMutex
	ovenStreamInsertCache          = make(map[string]insertCache)
	ovenStreamUpdateCacheMut       sync.RWMutex
	ovenStreamUpdateCache          = make(map[string]updateCache)
	ovenStreamUpsertCacheMut       sync.RWMutex
	ovenStreamUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var ovenStreamAfterSelectHooks []OvenStreamHook

var ovenStreamBeforeInsertHooks []OvenStreamHook
var ovenStreamAfterInsertHooks []OvenStreamHook

var ovenStreamBeforeUpdateHooks []OvenStreamHook
var ovenStreamAfterUpdateHooks []OvenStreamHook

var ovenStreamBeforeDeleteHooks []OvenStreamHook
var ovenStreamAfterDeleteHooks []OvenStreamHook

var ovenStreamBeforeUpsertHooks []OvenStreamHook
var ovenStreamAfterUpsertHooks []OvenStreamHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OvenStream) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range ovenStreamAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OvenStream) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range ovenStreamBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OvenStream) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range ovenStreamAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OvenStream) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range ovenStreamBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OvenStream) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range ovenStreamAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OvenStream) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range ovenStreamBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OvenStream) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range ovenStreamAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OvenStream) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range ovenStreamBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OvenStream) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range ovenStreamAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOvenStreamHook registers your hook function for all future operations.
func AddOvenStreamHook(hookPoint boil.HookPoint, ovenStreamHook OvenStreamHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		ovenStreamAfterSelectHooks = append(ovenStreamAfterSelectHooks, ovenStreamHook)
	case boil.BeforeInsertHook:
		ovenStreamBeforeInsertHooks = append(ovenStreamBeforeInsertHooks, ovenStreamHook)
	case boil.AfterInsertHook:
		ovenStreamAfterInsertHooks = append(ovenStreamAfterInsertHooks, ovenStreamHook)
	case boil.BeforeUpdateHook:
		ovenStreamBeforeUpdateHooks = append(ovenStreamBeforeUpdateHooks, ovenStreamHook)
	case boil.AfterUpdateHook:
		ovenStreamAfterUpdateHooks = append(ovenStreamAfterUpdateHooks, ovenStreamHook)
	case boil.BeforeDeleteHook:
		ovenStreamBeforeDeleteHooks = append(ovenStreamBeforeDeleteHooks, ovenStreamHook)
	case boil.AfterDeleteHook:
		ovenStreamAfterDeleteHooks = append(ovenStreamAfterDeleteHooks, ovenStreamHook)
	case boil.BeforeUpsertHook:
		ovenStreamBeforeUpsertHooks = append(ovenStreamBeforeUpsertHooks, ovenStreamHook)
	case boil.AfterUpsertHook:
		ovenStreamAfterUpsertHooks = append(ovenStreamAfterUpsertHooks, ovenStreamHook)
	}
}

// One returns a single ovenStream record from the query.
func (q ovenStreamQuery) One(exec boil.Executor) (*OvenStream, error) {
	o := &OvenStream{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for oven_streams")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OvenStream records from the query.
func (q ovenStreamQuery) All(exec boil.Executor) (OvenStreamSlice, error) {
	var o []*OvenStream

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to OvenStream slice")
	}

	if len(ovenStreamAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OvenStream records in the query.
func (q ovenStreamQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count oven_streams rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q ovenStreamQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if oven_streams exists")
	}

	return count > 0, nil
}

// BattleArenas retrieves all the battle_arena's BattleArenas with an executor.
func (o *OvenStream) BattleArenas(mods ...qm.QueryMod) battleArenaQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_arena\".\"oven_stream_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"battle_arena\".\"deleted_at\""),
	)

	query := BattleArenas(queryMods...)
	queries.SetFrom(query.Query, "\"battle_arena\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_arena\".*"})
	}

	return query
}

// LoadBattleArenas allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (ovenStreamL) LoadBattleArenas(e boil.Executor, singular bool, maybeOvenStream interface{}, mods queries.Applicator) error {
	var slice []*OvenStream
	var object *OvenStream

	if singular {
		object = maybeOvenStream.(*OvenStream)
	} else {
		slice = *maybeOvenStream.(*[]*OvenStream)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &ovenStreamR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &ovenStreamR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_arena`),
		qm.WhereIn(`battle_arena.oven_stream_id in ?`, args...),
		qmhelper.WhereIsNull(`battle_arena.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_arena")
	}

	var resultSlice []*BattleArena
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_arena")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_arena")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_arena")
	}

	if len(battleArenaAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleArenas = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleArenaR{}
			}
			foreign.R.OvenStream = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OvenStreamID {
				local.R.BattleArenas = append(local.R.BattleArenas, foreign)
				if foreign.R == nil {
					foreign.R = &battleArenaR{}
				}
				foreign.R.OvenStream = local
				break
			}
		}
	}

	return nil
}

// AddBattleArenas adds the given related objects to the existing relationships
// of the oven_stream, optionally inserting them as new records.
// Appends related to o.R.BattleArenas.
// Sets related.R.OvenStream appropriately.
func (o *OvenStream) AddBattleArenas(exec boil.Executor, insert bool, related ...*BattleArena) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OvenStreamID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_arena\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"oven_stream_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleArenaPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OvenStreamID = o.ID
		}
	}

	if o.R == nil {
		o.R = &ovenStreamR{
			BattleArenas: related,
		}
	} else {
		o.R.BattleArenas = append(o.R.BattleArenas, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleArenaR{
				OvenStream: o,
			}
		} else {
			rel.R.OvenStream = o
		}
	}
	return nil
}

// OvenStreams retrieves all the records using an executor.
func OvenStreams(mods ...qm.QueryMod) ovenStreamQuery {
	mods = append(mods, qm.From("\"oven_streams\""))
	return ovenStreamQuery{NewQuery(mods...)}
}

// FindOvenStream retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOvenStream(exec boil.Executor, iD string, selectCols ...string) (*OvenStream, error) {
	ovenStreamObj := &OvenStream{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"oven_streams\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, ovenStreamObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from oven_streams")
	}

	if err = ovenStreamObj.doAfterSelectHooks(exec); err != nil {
		return ovenStreamObj, err
	}

	return ovenStreamObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OvenStream) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no oven_streams provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ovenStreamColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	ovenStreamInsertCacheMut.RLock()
	cache, cached := ovenStreamInsertCache[key]
	ovenStreamInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			ovenStreamAllColumns,
			ovenStreamColumnsWithDefault,
			ovenStreamColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(ovenStreamType, ovenStreamMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(ovenStreamType, ovenStreamMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"oven_streams\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"oven_streams\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into oven_streams")
	}

	if !cached {
		ovenStreamInsertCacheMut.Lock()
		ovenStreamInsertCache[key] = cache
		ovenStreamInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the OvenStream.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OvenStream) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	ovenStreamUpdateCacheMut.RLock()
	cache, cached := ovenStreamUpdateCache[key]
	ovenStreamUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			ovenStreamAllColumns,
			ovenStreamPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update oven_streams, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"oven_streams\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, ovenStreamPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(ovenStreamType, ovenStreamMapping, append(wl, ovenStreamPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update oven_streams row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for oven_streams")
	}

	if !cached {
		ovenStreamUpdateCacheMut.Lock()
		ovenStreamUpdateCache[key] = cache
		ovenStreamUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q ovenStreamQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for oven_streams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for oven_streams")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OvenStreamSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ovenStreamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"oven_streams\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, ovenStreamPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in ovenStream slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all ovenStream")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OvenStream) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no oven_streams provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(ovenStreamColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	ovenStreamUpsertCacheMut.RLock()
	cache, cached := ovenStreamUpsertCache[key]
	ovenStreamUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			ovenStreamAllColumns,
			ovenStreamColumnsWithDefault,
			ovenStreamColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			ovenStreamAllColumns,
			ovenStreamPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert oven_streams, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(ovenStreamPrimaryKeyColumns))
			copy(conflict, ovenStreamPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"oven_streams\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(ovenStreamType, ovenStreamMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(ovenStreamType, ovenStreamMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert oven_streams")
	}

	if !cached {
		ovenStreamUpsertCacheMut.Lock()
		ovenStreamUpsertCache[key] = cache
		ovenStreamUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single OvenStream record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OvenStream) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no OvenStream provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ovenStreamPrimaryKeyMapping)
	sql := "DELETE FROM \"oven_streams\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from oven_streams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for oven_streams")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q ovenStreamQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no ovenStreamQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from oven_streams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for oven_streams")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OvenStreamSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(ovenStreamBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ovenStreamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"oven_streams\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ovenStreamPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from ovenStream slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for oven_streams")
	}

	if len(ovenStreamAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OvenStream) Reload(exec boil.Executor) error {
	ret, err := FindOvenStream(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OvenStreamSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OvenStreamSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ovenStreamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"oven_streams\".* FROM \"oven_streams\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, ovenStreamPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in OvenStreamSlice")
	}

	*o = slice

	return nil
}

// OvenStreamExists checks if the OvenStream row exists.
func OvenStreamExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"oven_streams\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if oven_streams exists")
	}

	return exists, nil
}
