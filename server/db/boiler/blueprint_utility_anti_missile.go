// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BlueprintUtilityAntiMissile is an object representing the database table.
type BlueprintUtilityAntiMissile struct {
	ID                 string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BlueprintUtilityID string    `boiler:"blueprint_utility_id" boil:"blueprint_utility_id" json:"blueprint_utility_id" toml:"blueprint_utility_id" yaml:"blueprint_utility_id"`
	RateOfFire         int       `boiler:"rate_of_fire" boil:"rate_of_fire" json:"rate_of_fire" toml:"rate_of_fire" yaml:"rate_of_fire"`
	FireEnergyCost     int       `boiler:"fire_energy_cost" boil:"fire_energy_cost" json:"fire_energy_cost" toml:"fire_energy_cost" yaml:"fire_energy_cost"`
	CreatedAt          time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *blueprintUtilityAntiMissileR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L blueprintUtilityAntiMissileL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlueprintUtilityAntiMissileColumns = struct {
	ID                 string
	BlueprintUtilityID string
	RateOfFire         string
	FireEnergyCost     string
	CreatedAt          string
}{
	ID:                 "id",
	BlueprintUtilityID: "blueprint_utility_id",
	RateOfFire:         "rate_of_fire",
	FireEnergyCost:     "fire_energy_cost",
	CreatedAt:          "created_at",
}

var BlueprintUtilityAntiMissileTableColumns = struct {
	ID                 string
	BlueprintUtilityID string
	RateOfFire         string
	FireEnergyCost     string
	CreatedAt          string
}{
	ID:                 "blueprint_utility_anti_missile.id",
	BlueprintUtilityID: "blueprint_utility_anti_missile.blueprint_utility_id",
	RateOfFire:         "blueprint_utility_anti_missile.rate_of_fire",
	FireEnergyCost:     "blueprint_utility_anti_missile.fire_energy_cost",
	CreatedAt:          "blueprint_utility_anti_missile.created_at",
}

// Generated where

var BlueprintUtilityAntiMissileWhere = struct {
	ID                 whereHelperstring
	BlueprintUtilityID whereHelperstring
	RateOfFire         whereHelperint
	FireEnergyCost     whereHelperint
	CreatedAt          whereHelpertime_Time
}{
	ID:                 whereHelperstring{field: "\"blueprint_utility_anti_missile\".\"id\""},
	BlueprintUtilityID: whereHelperstring{field: "\"blueprint_utility_anti_missile\".\"blueprint_utility_id\""},
	RateOfFire:         whereHelperint{field: "\"blueprint_utility_anti_missile\".\"rate_of_fire\""},
	FireEnergyCost:     whereHelperint{field: "\"blueprint_utility_anti_missile\".\"fire_energy_cost\""},
	CreatedAt:          whereHelpertime_Time{field: "\"blueprint_utility_anti_missile\".\"created_at\""},
}

// BlueprintUtilityAntiMissileRels is where relationship names are stored.
var BlueprintUtilityAntiMissileRels = struct {
	BlueprintUtility string
}{
	BlueprintUtility: "BlueprintUtility",
}

// blueprintUtilityAntiMissileR is where relationships are stored.
type blueprintUtilityAntiMissileR struct {
	BlueprintUtility *BlueprintUtility `boiler:"BlueprintUtility" boil:"BlueprintUtility" json:"BlueprintUtility" toml:"BlueprintUtility" yaml:"BlueprintUtility"`
}

// NewStruct creates a new relationship struct
func (*blueprintUtilityAntiMissileR) NewStruct() *blueprintUtilityAntiMissileR {
	return &blueprintUtilityAntiMissileR{}
}

// blueprintUtilityAntiMissileL is where Load methods for each relationship are stored.
type blueprintUtilityAntiMissileL struct{}

var (
	blueprintUtilityAntiMissileAllColumns            = []string{"id", "blueprint_utility_id", "rate_of_fire", "fire_energy_cost", "created_at"}
	blueprintUtilityAntiMissileColumnsWithoutDefault = []string{"blueprint_utility_id", "rate_of_fire", "fire_energy_cost"}
	blueprintUtilityAntiMissileColumnsWithDefault    = []string{"id", "created_at"}
	blueprintUtilityAntiMissilePrimaryKeyColumns     = []string{"id"}
	blueprintUtilityAntiMissileGeneratedColumns      = []string{}
)

type (
	// BlueprintUtilityAntiMissileSlice is an alias for a slice of pointers to BlueprintUtilityAntiMissile.
	// This should almost always be used instead of []BlueprintUtilityAntiMissile.
	BlueprintUtilityAntiMissileSlice []*BlueprintUtilityAntiMissile
	// BlueprintUtilityAntiMissileHook is the signature for custom BlueprintUtilityAntiMissile hook methods
	BlueprintUtilityAntiMissileHook func(boil.Executor, *BlueprintUtilityAntiMissile) error

	blueprintUtilityAntiMissileQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blueprintUtilityAntiMissileType                 = reflect.TypeOf(&BlueprintUtilityAntiMissile{})
	blueprintUtilityAntiMissileMapping              = queries.MakeStructMapping(blueprintUtilityAntiMissileType)
	blueprintUtilityAntiMissilePrimaryKeyMapping, _ = queries.BindMapping(blueprintUtilityAntiMissileType, blueprintUtilityAntiMissileMapping, blueprintUtilityAntiMissilePrimaryKeyColumns)
	blueprintUtilityAntiMissileInsertCacheMut       sync.RWMutex
	blueprintUtilityAntiMissileInsertCache          = make(map[string]insertCache)
	blueprintUtilityAntiMissileUpdateCacheMut       sync.RWMutex
	blueprintUtilityAntiMissileUpdateCache          = make(map[string]updateCache)
	blueprintUtilityAntiMissileUpsertCacheMut       sync.RWMutex
	blueprintUtilityAntiMissileUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var blueprintUtilityAntiMissileAfterSelectHooks []BlueprintUtilityAntiMissileHook

var blueprintUtilityAntiMissileBeforeInsertHooks []BlueprintUtilityAntiMissileHook
var blueprintUtilityAntiMissileAfterInsertHooks []BlueprintUtilityAntiMissileHook

var blueprintUtilityAntiMissileBeforeUpdateHooks []BlueprintUtilityAntiMissileHook
var blueprintUtilityAntiMissileAfterUpdateHooks []BlueprintUtilityAntiMissileHook

var blueprintUtilityAntiMissileBeforeDeleteHooks []BlueprintUtilityAntiMissileHook
var blueprintUtilityAntiMissileAfterDeleteHooks []BlueprintUtilityAntiMissileHook

var blueprintUtilityAntiMissileBeforeUpsertHooks []BlueprintUtilityAntiMissileHook
var blueprintUtilityAntiMissileAfterUpsertHooks []BlueprintUtilityAntiMissileHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BlueprintUtilityAntiMissile) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityAntiMissileAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BlueprintUtilityAntiMissile) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityAntiMissileBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BlueprintUtilityAntiMissile) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityAntiMissileAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BlueprintUtilityAntiMissile) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityAntiMissileBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BlueprintUtilityAntiMissile) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityAntiMissileAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BlueprintUtilityAntiMissile) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityAntiMissileBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BlueprintUtilityAntiMissile) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityAntiMissileAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BlueprintUtilityAntiMissile) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityAntiMissileBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BlueprintUtilityAntiMissile) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityAntiMissileAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBlueprintUtilityAntiMissileHook registers your hook function for all future operations.
func AddBlueprintUtilityAntiMissileHook(hookPoint boil.HookPoint, blueprintUtilityAntiMissileHook BlueprintUtilityAntiMissileHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		blueprintUtilityAntiMissileAfterSelectHooks = append(blueprintUtilityAntiMissileAfterSelectHooks, blueprintUtilityAntiMissileHook)
	case boil.BeforeInsertHook:
		blueprintUtilityAntiMissileBeforeInsertHooks = append(blueprintUtilityAntiMissileBeforeInsertHooks, blueprintUtilityAntiMissileHook)
	case boil.AfterInsertHook:
		blueprintUtilityAntiMissileAfterInsertHooks = append(blueprintUtilityAntiMissileAfterInsertHooks, blueprintUtilityAntiMissileHook)
	case boil.BeforeUpdateHook:
		blueprintUtilityAntiMissileBeforeUpdateHooks = append(blueprintUtilityAntiMissileBeforeUpdateHooks, blueprintUtilityAntiMissileHook)
	case boil.AfterUpdateHook:
		blueprintUtilityAntiMissileAfterUpdateHooks = append(blueprintUtilityAntiMissileAfterUpdateHooks, blueprintUtilityAntiMissileHook)
	case boil.BeforeDeleteHook:
		blueprintUtilityAntiMissileBeforeDeleteHooks = append(blueprintUtilityAntiMissileBeforeDeleteHooks, blueprintUtilityAntiMissileHook)
	case boil.AfterDeleteHook:
		blueprintUtilityAntiMissileAfterDeleteHooks = append(blueprintUtilityAntiMissileAfterDeleteHooks, blueprintUtilityAntiMissileHook)
	case boil.BeforeUpsertHook:
		blueprintUtilityAntiMissileBeforeUpsertHooks = append(blueprintUtilityAntiMissileBeforeUpsertHooks, blueprintUtilityAntiMissileHook)
	case boil.AfterUpsertHook:
		blueprintUtilityAntiMissileAfterUpsertHooks = append(blueprintUtilityAntiMissileAfterUpsertHooks, blueprintUtilityAntiMissileHook)
	}
}

// One returns a single blueprintUtilityAntiMissile record from the query.
func (q blueprintUtilityAntiMissileQuery) One(exec boil.Executor) (*BlueprintUtilityAntiMissile, error) {
	o := &BlueprintUtilityAntiMissile{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for blueprint_utility_anti_missile")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BlueprintUtilityAntiMissile records from the query.
func (q blueprintUtilityAntiMissileQuery) All(exec boil.Executor) (BlueprintUtilityAntiMissileSlice, error) {
	var o []*BlueprintUtilityAntiMissile

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BlueprintUtilityAntiMissile slice")
	}

	if len(blueprintUtilityAntiMissileAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BlueprintUtilityAntiMissile records in the query.
func (q blueprintUtilityAntiMissileQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count blueprint_utility_anti_missile rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q blueprintUtilityAntiMissileQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if blueprint_utility_anti_missile exists")
	}

	return count > 0, nil
}

// BlueprintUtility pointed to by the foreign key.
func (o *BlueprintUtilityAntiMissile) BlueprintUtility(mods ...qm.QueryMod) blueprintUtilityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BlueprintUtilityID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintUtilities(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_utility\"")

	return query
}

// LoadBlueprintUtility allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blueprintUtilityAntiMissileL) LoadBlueprintUtility(e boil.Executor, singular bool, maybeBlueprintUtilityAntiMissile interface{}, mods queries.Applicator) error {
	var slice []*BlueprintUtilityAntiMissile
	var object *BlueprintUtilityAntiMissile

	if singular {
		object = maybeBlueprintUtilityAntiMissile.(*BlueprintUtilityAntiMissile)
	} else {
		slice = *maybeBlueprintUtilityAntiMissile.(*[]*BlueprintUtilityAntiMissile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintUtilityAntiMissileR{}
		}
		args = append(args, object.BlueprintUtilityID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintUtilityAntiMissileR{}
			}

			for _, a := range args {
				if a == obj.BlueprintUtilityID {
					continue Outer
				}
			}

			args = append(args, obj.BlueprintUtilityID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_utility`),
		qm.WhereIn(`blueprint_utility.id in ?`, args...),
		qmhelper.WhereIsNull(`blueprint_utility.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintUtility")
	}

	var resultSlice []*BlueprintUtility
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintUtility")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_utility")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_utility")
	}

	if len(blueprintUtilityAntiMissileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BlueprintUtility = foreign
		if foreign.R == nil {
			foreign.R = &blueprintUtilityR{}
		}
		foreign.R.BlueprintUtilityAntiMissiles = append(foreign.R.BlueprintUtilityAntiMissiles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlueprintUtilityID == foreign.ID {
				local.R.BlueprintUtility = foreign
				if foreign.R == nil {
					foreign.R = &blueprintUtilityR{}
				}
				foreign.R.BlueprintUtilityAntiMissiles = append(foreign.R.BlueprintUtilityAntiMissiles, local)
				break
			}
		}
	}

	return nil
}

// SetBlueprintUtility of the blueprintUtilityAntiMissile to the related item.
// Sets o.R.BlueprintUtility to related.
// Adds o to related.R.BlueprintUtilityAntiMissiles.
func (o *BlueprintUtilityAntiMissile) SetBlueprintUtility(exec boil.Executor, insert bool, related *BlueprintUtility) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"blueprint_utility_anti_missile\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_utility_id"}),
		strmangle.WhereClause("\"", "\"", 2, blueprintUtilityAntiMissilePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlueprintUtilityID = related.ID
	if o.R == nil {
		o.R = &blueprintUtilityAntiMissileR{
			BlueprintUtility: related,
		}
	} else {
		o.R.BlueprintUtility = related
	}

	if related.R == nil {
		related.R = &blueprintUtilityR{
			BlueprintUtilityAntiMissiles: BlueprintUtilityAntiMissileSlice{o},
		}
	} else {
		related.R.BlueprintUtilityAntiMissiles = append(related.R.BlueprintUtilityAntiMissiles, o)
	}

	return nil
}

// BlueprintUtilityAntiMissiles retrieves all the records using an executor.
func BlueprintUtilityAntiMissiles(mods ...qm.QueryMod) blueprintUtilityAntiMissileQuery {
	mods = append(mods, qm.From("\"blueprint_utility_anti_missile\""))
	return blueprintUtilityAntiMissileQuery{NewQuery(mods...)}
}

// FindBlueprintUtilityAntiMissile retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlueprintUtilityAntiMissile(exec boil.Executor, iD string, selectCols ...string) (*BlueprintUtilityAntiMissile, error) {
	blueprintUtilityAntiMissileObj := &BlueprintUtilityAntiMissile{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"blueprint_utility_anti_missile\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, blueprintUtilityAntiMissileObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from blueprint_utility_anti_missile")
	}

	if err = blueprintUtilityAntiMissileObj.doAfterSelectHooks(exec); err != nil {
		return blueprintUtilityAntiMissileObj, err
	}

	return blueprintUtilityAntiMissileObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlueprintUtilityAntiMissile) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_utility_anti_missile provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintUtilityAntiMissileColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blueprintUtilityAntiMissileInsertCacheMut.RLock()
	cache, cached := blueprintUtilityAntiMissileInsertCache[key]
	blueprintUtilityAntiMissileInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blueprintUtilityAntiMissileAllColumns,
			blueprintUtilityAntiMissileColumnsWithDefault,
			blueprintUtilityAntiMissileColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blueprintUtilityAntiMissileType, blueprintUtilityAntiMissileMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blueprintUtilityAntiMissileType, blueprintUtilityAntiMissileMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"blueprint_utility_anti_missile\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"blueprint_utility_anti_missile\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into blueprint_utility_anti_missile")
	}

	if !cached {
		blueprintUtilityAntiMissileInsertCacheMut.Lock()
		blueprintUtilityAntiMissileInsertCache[key] = cache
		blueprintUtilityAntiMissileInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BlueprintUtilityAntiMissile.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlueprintUtilityAntiMissile) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	blueprintUtilityAntiMissileUpdateCacheMut.RLock()
	cache, cached := blueprintUtilityAntiMissileUpdateCache[key]
	blueprintUtilityAntiMissileUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blueprintUtilityAntiMissileAllColumns,
			blueprintUtilityAntiMissilePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update blueprint_utility_anti_missile, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"blueprint_utility_anti_missile\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, blueprintUtilityAntiMissilePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blueprintUtilityAntiMissileType, blueprintUtilityAntiMissileMapping, append(wl, blueprintUtilityAntiMissilePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update blueprint_utility_anti_missile row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for blueprint_utility_anti_missile")
	}

	if !cached {
		blueprintUtilityAntiMissileUpdateCacheMut.Lock()
		blueprintUtilityAntiMissileUpdateCache[key] = cache
		blueprintUtilityAntiMissileUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q blueprintUtilityAntiMissileQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for blueprint_utility_anti_missile")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for blueprint_utility_anti_missile")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlueprintUtilityAntiMissileSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintUtilityAntiMissilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"blueprint_utility_anti_missile\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, blueprintUtilityAntiMissilePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in blueprintUtilityAntiMissile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all blueprintUtilityAntiMissile")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlueprintUtilityAntiMissile) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_utility_anti_missile provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintUtilityAntiMissileColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blueprintUtilityAntiMissileUpsertCacheMut.RLock()
	cache, cached := blueprintUtilityAntiMissileUpsertCache[key]
	blueprintUtilityAntiMissileUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blueprintUtilityAntiMissileAllColumns,
			blueprintUtilityAntiMissileColumnsWithDefault,
			blueprintUtilityAntiMissileColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			blueprintUtilityAntiMissileAllColumns,
			blueprintUtilityAntiMissilePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert blueprint_utility_anti_missile, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(blueprintUtilityAntiMissilePrimaryKeyColumns))
			copy(conflict, blueprintUtilityAntiMissilePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"blueprint_utility_anti_missile\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(blueprintUtilityAntiMissileType, blueprintUtilityAntiMissileMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blueprintUtilityAntiMissileType, blueprintUtilityAntiMissileMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert blueprint_utility_anti_missile")
	}

	if !cached {
		blueprintUtilityAntiMissileUpsertCacheMut.Lock()
		blueprintUtilityAntiMissileUpsertCache[key] = cache
		blueprintUtilityAntiMissileUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BlueprintUtilityAntiMissile record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlueprintUtilityAntiMissile) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BlueprintUtilityAntiMissile provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blueprintUtilityAntiMissilePrimaryKeyMapping)
	sql := "DELETE FROM \"blueprint_utility_anti_missile\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from blueprint_utility_anti_missile")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for blueprint_utility_anti_missile")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q blueprintUtilityAntiMissileQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no blueprintUtilityAntiMissileQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprint_utility_anti_missile")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_utility_anti_missile")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlueprintUtilityAntiMissileSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(blueprintUtilityAntiMissileBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintUtilityAntiMissilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"blueprint_utility_anti_missile\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintUtilityAntiMissilePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprintUtilityAntiMissile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_utility_anti_missile")
	}

	if len(blueprintUtilityAntiMissileAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlueprintUtilityAntiMissile) Reload(exec boil.Executor) error {
	ret, err := FindBlueprintUtilityAntiMissile(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlueprintUtilityAntiMissileSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlueprintUtilityAntiMissileSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintUtilityAntiMissilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"blueprint_utility_anti_missile\".* FROM \"blueprint_utility_anti_missile\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintUtilityAntiMissilePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BlueprintUtilityAntiMissileSlice")
	}

	*o = slice

	return nil
}

// BlueprintUtilityAntiMissileExists checks if the BlueprintUtilityAntiMissile row exists.
func BlueprintUtilityAntiMissileExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"blueprint_utility_anti_missile\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if blueprint_utility_anti_missile exists")
	}

	return exists, nil
}
