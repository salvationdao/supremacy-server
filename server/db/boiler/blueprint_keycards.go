// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BlueprintKeycard is an object representing the database table.
type BlueprintKeycard struct {
	ID             string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Label          string      `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	Description    string      `boiler:"description" boil:"description" json:"description" toml:"description" yaml:"description"`
	Collection     string      `boiler:"collection" boil:"collection" json:"collection" toml:"collection" yaml:"collection"`
	KeycardTokenID int         `boiler:"keycard_token_id" boil:"keycard_token_id" json:"keycard_token_id" toml:"keycard_token_id" yaml:"keycard_token_id"`
	ImageURL       string      `boiler:"image_url" boil:"image_url" json:"image_url" toml:"image_url" yaml:"image_url"`
	AnimationURL   null.String `boiler:"animation_url" boil:"animation_url" json:"animation_url,omitempty" toml:"animation_url" yaml:"animation_url,omitempty"`
	KeycardGroup   string      `boiler:"keycard_group" boil:"keycard_group" json:"keycard_group" toml:"keycard_group" yaml:"keycard_group"`
	Syndicate      null.String `boiler:"syndicate" boil:"syndicate" json:"syndicate,omitempty" toml:"syndicate" yaml:"syndicate,omitempty"`
	CreatedAt      time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *blueprintKeycardR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L blueprintKeycardL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlueprintKeycardColumns = struct {
	ID             string
	Label          string
	Description    string
	Collection     string
	KeycardTokenID string
	ImageURL       string
	AnimationURL   string
	KeycardGroup   string
	Syndicate      string
	CreatedAt      string
}{
	ID:             "id",
	Label:          "label",
	Description:    "description",
	Collection:     "collection",
	KeycardTokenID: "keycard_token_id",
	ImageURL:       "image_url",
	AnimationURL:   "animation_url",
	KeycardGroup:   "keycard_group",
	Syndicate:      "syndicate",
	CreatedAt:      "created_at",
}

var BlueprintKeycardTableColumns = struct {
	ID             string
	Label          string
	Description    string
	Collection     string
	KeycardTokenID string
	ImageURL       string
	AnimationURL   string
	KeycardGroup   string
	Syndicate      string
	CreatedAt      string
}{
	ID:             "blueprint_keycards.id",
	Label:          "blueprint_keycards.label",
	Description:    "blueprint_keycards.description",
	Collection:     "blueprint_keycards.collection",
	KeycardTokenID: "blueprint_keycards.keycard_token_id",
	ImageURL:       "blueprint_keycards.image_url",
	AnimationURL:   "blueprint_keycards.animation_url",
	KeycardGroup:   "blueprint_keycards.keycard_group",
	Syndicate:      "blueprint_keycards.syndicate",
	CreatedAt:      "blueprint_keycards.created_at",
}

// Generated where

var BlueprintKeycardWhere = struct {
	ID             whereHelperstring
	Label          whereHelperstring
	Description    whereHelperstring
	Collection     whereHelperstring
	KeycardTokenID whereHelperint
	ImageURL       whereHelperstring
	AnimationURL   whereHelpernull_String
	KeycardGroup   whereHelperstring
	Syndicate      whereHelpernull_String
	CreatedAt      whereHelpertime_Time
}{
	ID:             whereHelperstring{field: "\"blueprint_keycards\".\"id\""},
	Label:          whereHelperstring{field: "\"blueprint_keycards\".\"label\""},
	Description:    whereHelperstring{field: "\"blueprint_keycards\".\"description\""},
	Collection:     whereHelperstring{field: "\"blueprint_keycards\".\"collection\""},
	KeycardTokenID: whereHelperint{field: "\"blueprint_keycards\".\"keycard_token_id\""},
	ImageURL:       whereHelperstring{field: "\"blueprint_keycards\".\"image_url\""},
	AnimationURL:   whereHelpernull_String{field: "\"blueprint_keycards\".\"animation_url\""},
	KeycardGroup:   whereHelperstring{field: "\"blueprint_keycards\".\"keycard_group\""},
	Syndicate:      whereHelpernull_String{field: "\"blueprint_keycards\".\"syndicate\""},
	CreatedAt:      whereHelpertime_Time{field: "\"blueprint_keycards\".\"created_at\""},
}

// BlueprintKeycardRels is where relationship names are stored.
var BlueprintKeycardRels = struct {
	FailedPlayerKeycardsSyncs string
	PlayerKeycards            string
}{
	FailedPlayerKeycardsSyncs: "FailedPlayerKeycardsSyncs",
	PlayerKeycards:            "PlayerKeycards",
}

// blueprintKeycardR is where relationships are stored.
type blueprintKeycardR struct {
	FailedPlayerKeycardsSyncs FailedPlayerKeycardsSyncSlice `boiler:"FailedPlayerKeycardsSyncs" boil:"FailedPlayerKeycardsSyncs" json:"FailedPlayerKeycardsSyncs" toml:"FailedPlayerKeycardsSyncs" yaml:"FailedPlayerKeycardsSyncs"`
	PlayerKeycards            PlayerKeycardSlice            `boiler:"PlayerKeycards" boil:"PlayerKeycards" json:"PlayerKeycards" toml:"PlayerKeycards" yaml:"PlayerKeycards"`
}

// NewStruct creates a new relationship struct
func (*blueprintKeycardR) NewStruct() *blueprintKeycardR {
	return &blueprintKeycardR{}
}

// blueprintKeycardL is where Load methods for each relationship are stored.
type blueprintKeycardL struct{}

var (
	blueprintKeycardAllColumns            = []string{"id", "label", "description", "collection", "keycard_token_id", "image_url", "animation_url", "keycard_group", "syndicate", "created_at"}
	blueprintKeycardColumnsWithoutDefault = []string{"label", "description", "collection", "keycard_token_id", "image_url", "keycard_group"}
	blueprintKeycardColumnsWithDefault    = []string{"id", "animation_url", "syndicate", "created_at"}
	blueprintKeycardPrimaryKeyColumns     = []string{"id"}
	blueprintKeycardGeneratedColumns      = []string{}
)

type (
	// BlueprintKeycardSlice is an alias for a slice of pointers to BlueprintKeycard.
	// This should almost always be used instead of []BlueprintKeycard.
	BlueprintKeycardSlice []*BlueprintKeycard
	// BlueprintKeycardHook is the signature for custom BlueprintKeycard hook methods
	BlueprintKeycardHook func(boil.Executor, *BlueprintKeycard) error

	blueprintKeycardQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blueprintKeycardType                 = reflect.TypeOf(&BlueprintKeycard{})
	blueprintKeycardMapping              = queries.MakeStructMapping(blueprintKeycardType)
	blueprintKeycardPrimaryKeyMapping, _ = queries.BindMapping(blueprintKeycardType, blueprintKeycardMapping, blueprintKeycardPrimaryKeyColumns)
	blueprintKeycardInsertCacheMut       sync.RWMutex
	blueprintKeycardInsertCache          = make(map[string]insertCache)
	blueprintKeycardUpdateCacheMut       sync.RWMutex
	blueprintKeycardUpdateCache          = make(map[string]updateCache)
	blueprintKeycardUpsertCacheMut       sync.RWMutex
	blueprintKeycardUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var blueprintKeycardAfterSelectHooks []BlueprintKeycardHook

var blueprintKeycardBeforeInsertHooks []BlueprintKeycardHook
var blueprintKeycardAfterInsertHooks []BlueprintKeycardHook

var blueprintKeycardBeforeUpdateHooks []BlueprintKeycardHook
var blueprintKeycardAfterUpdateHooks []BlueprintKeycardHook

var blueprintKeycardBeforeDeleteHooks []BlueprintKeycardHook
var blueprintKeycardAfterDeleteHooks []BlueprintKeycardHook

var blueprintKeycardBeforeUpsertHooks []BlueprintKeycardHook
var blueprintKeycardAfterUpsertHooks []BlueprintKeycardHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BlueprintKeycard) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintKeycardAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BlueprintKeycard) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintKeycardBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BlueprintKeycard) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintKeycardAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BlueprintKeycard) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintKeycardBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BlueprintKeycard) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintKeycardAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BlueprintKeycard) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintKeycardBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BlueprintKeycard) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintKeycardAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BlueprintKeycard) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintKeycardBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BlueprintKeycard) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintKeycardAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBlueprintKeycardHook registers your hook function for all future operations.
func AddBlueprintKeycardHook(hookPoint boil.HookPoint, blueprintKeycardHook BlueprintKeycardHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		blueprintKeycardAfterSelectHooks = append(blueprintKeycardAfterSelectHooks, blueprintKeycardHook)
	case boil.BeforeInsertHook:
		blueprintKeycardBeforeInsertHooks = append(blueprintKeycardBeforeInsertHooks, blueprintKeycardHook)
	case boil.AfterInsertHook:
		blueprintKeycardAfterInsertHooks = append(blueprintKeycardAfterInsertHooks, blueprintKeycardHook)
	case boil.BeforeUpdateHook:
		blueprintKeycardBeforeUpdateHooks = append(blueprintKeycardBeforeUpdateHooks, blueprintKeycardHook)
	case boil.AfterUpdateHook:
		blueprintKeycardAfterUpdateHooks = append(blueprintKeycardAfterUpdateHooks, blueprintKeycardHook)
	case boil.BeforeDeleteHook:
		blueprintKeycardBeforeDeleteHooks = append(blueprintKeycardBeforeDeleteHooks, blueprintKeycardHook)
	case boil.AfterDeleteHook:
		blueprintKeycardAfterDeleteHooks = append(blueprintKeycardAfterDeleteHooks, blueprintKeycardHook)
	case boil.BeforeUpsertHook:
		blueprintKeycardBeforeUpsertHooks = append(blueprintKeycardBeforeUpsertHooks, blueprintKeycardHook)
	case boil.AfterUpsertHook:
		blueprintKeycardAfterUpsertHooks = append(blueprintKeycardAfterUpsertHooks, blueprintKeycardHook)
	}
}

// One returns a single blueprintKeycard record from the query.
func (q blueprintKeycardQuery) One(exec boil.Executor) (*BlueprintKeycard, error) {
	o := &BlueprintKeycard{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for blueprint_keycards")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BlueprintKeycard records from the query.
func (q blueprintKeycardQuery) All(exec boil.Executor) (BlueprintKeycardSlice, error) {
	var o []*BlueprintKeycard

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BlueprintKeycard slice")
	}

	if len(blueprintKeycardAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BlueprintKeycard records in the query.
func (q blueprintKeycardQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count blueprint_keycards rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q blueprintKeycardQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if blueprint_keycards exists")
	}

	return count > 0, nil
}

// FailedPlayerKeycardsSyncs retrieves all the failed_player_keycards_sync's FailedPlayerKeycardsSyncs with an executor.
func (o *BlueprintKeycard) FailedPlayerKeycardsSyncs(mods ...qm.QueryMod) failedPlayerKeycardsSyncQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"failed_player_keycards_sync\".\"blueprint_keycard_id\"=?", o.ID),
	)

	query := FailedPlayerKeycardsSyncs(queryMods...)
	queries.SetFrom(query.Query, "\"failed_player_keycards_sync\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"failed_player_keycards_sync\".*"})
	}

	return query
}

// PlayerKeycards retrieves all the player_keycard's PlayerKeycards with an executor.
func (o *BlueprintKeycard) PlayerKeycards(mods ...qm.QueryMod) playerKeycardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"player_keycards\".\"blueprint_keycard_id\"=?", o.ID),
	)

	query := PlayerKeycards(queryMods...)
	queries.SetFrom(query.Query, "\"player_keycards\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"player_keycards\".*"})
	}

	return query
}

// LoadFailedPlayerKeycardsSyncs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blueprintKeycardL) LoadFailedPlayerKeycardsSyncs(e boil.Executor, singular bool, maybeBlueprintKeycard interface{}, mods queries.Applicator) error {
	var slice []*BlueprintKeycard
	var object *BlueprintKeycard

	if singular {
		object = maybeBlueprintKeycard.(*BlueprintKeycard)
	} else {
		slice = *maybeBlueprintKeycard.(*[]*BlueprintKeycard)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintKeycardR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintKeycardR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`failed_player_keycards_sync`),
		qm.WhereIn(`failed_player_keycards_sync.blueprint_keycard_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load failed_player_keycards_sync")
	}

	var resultSlice []*FailedPlayerKeycardsSync
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice failed_player_keycards_sync")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on failed_player_keycards_sync")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for failed_player_keycards_sync")
	}

	if len(failedPlayerKeycardsSyncAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FailedPlayerKeycardsSyncs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &failedPlayerKeycardsSyncR{}
			}
			foreign.R.BlueprintKeycard = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BlueprintKeycardID {
				local.R.FailedPlayerKeycardsSyncs = append(local.R.FailedPlayerKeycardsSyncs, foreign)
				if foreign.R == nil {
					foreign.R = &failedPlayerKeycardsSyncR{}
				}
				foreign.R.BlueprintKeycard = local
				break
			}
		}
	}

	return nil
}

// LoadPlayerKeycards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blueprintKeycardL) LoadPlayerKeycards(e boil.Executor, singular bool, maybeBlueprintKeycard interface{}, mods queries.Applicator) error {
	var slice []*BlueprintKeycard
	var object *BlueprintKeycard

	if singular {
		object = maybeBlueprintKeycard.(*BlueprintKeycard)
	} else {
		slice = *maybeBlueprintKeycard.(*[]*BlueprintKeycard)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintKeycardR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintKeycardR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`player_keycards`),
		qm.WhereIn(`player_keycards.blueprint_keycard_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load player_keycards")
	}

	var resultSlice []*PlayerKeycard
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice player_keycards")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on player_keycards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for player_keycards")
	}

	if len(playerKeycardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PlayerKeycards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playerKeycardR{}
			}
			foreign.R.BlueprintKeycard = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BlueprintKeycardID {
				local.R.PlayerKeycards = append(local.R.PlayerKeycards, foreign)
				if foreign.R == nil {
					foreign.R = &playerKeycardR{}
				}
				foreign.R.BlueprintKeycard = local
				break
			}
		}
	}

	return nil
}

// AddFailedPlayerKeycardsSyncs adds the given related objects to the existing relationships
// of the blueprint_keycard, optionally inserting them as new records.
// Appends related to o.R.FailedPlayerKeycardsSyncs.
// Sets related.R.BlueprintKeycard appropriately.
func (o *BlueprintKeycard) AddFailedPlayerKeycardsSyncs(exec boil.Executor, insert bool, related ...*FailedPlayerKeycardsSync) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BlueprintKeycardID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"failed_player_keycards_sync\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_keycard_id"}),
				strmangle.WhereClause("\"", "\"", 2, failedPlayerKeycardsSyncPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BlueprintKeycardID = o.ID
		}
	}

	if o.R == nil {
		o.R = &blueprintKeycardR{
			FailedPlayerKeycardsSyncs: related,
		}
	} else {
		o.R.FailedPlayerKeycardsSyncs = append(o.R.FailedPlayerKeycardsSyncs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &failedPlayerKeycardsSyncR{
				BlueprintKeycard: o,
			}
		} else {
			rel.R.BlueprintKeycard = o
		}
	}
	return nil
}

// AddPlayerKeycards adds the given related objects to the existing relationships
// of the blueprint_keycard, optionally inserting them as new records.
// Appends related to o.R.PlayerKeycards.
// Sets related.R.BlueprintKeycard appropriately.
func (o *BlueprintKeycard) AddPlayerKeycards(exec boil.Executor, insert bool, related ...*PlayerKeycard) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BlueprintKeycardID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"player_keycards\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_keycard_id"}),
				strmangle.WhereClause("\"", "\"", 2, playerKeycardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BlueprintKeycardID = o.ID
		}
	}

	if o.R == nil {
		o.R = &blueprintKeycardR{
			PlayerKeycards: related,
		}
	} else {
		o.R.PlayerKeycards = append(o.R.PlayerKeycards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playerKeycardR{
				BlueprintKeycard: o,
			}
		} else {
			rel.R.BlueprintKeycard = o
		}
	}
	return nil
}

// BlueprintKeycards retrieves all the records using an executor.
func BlueprintKeycards(mods ...qm.QueryMod) blueprintKeycardQuery {
	mods = append(mods, qm.From("\"blueprint_keycards\""))
	return blueprintKeycardQuery{NewQuery(mods...)}
}

// FindBlueprintKeycard retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlueprintKeycard(exec boil.Executor, iD string, selectCols ...string) (*BlueprintKeycard, error) {
	blueprintKeycardObj := &BlueprintKeycard{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"blueprint_keycards\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, blueprintKeycardObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from blueprint_keycards")
	}

	if err = blueprintKeycardObj.doAfterSelectHooks(exec); err != nil {
		return blueprintKeycardObj, err
	}

	return blueprintKeycardObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlueprintKeycard) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_keycards provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintKeycardColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blueprintKeycardInsertCacheMut.RLock()
	cache, cached := blueprintKeycardInsertCache[key]
	blueprintKeycardInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blueprintKeycardAllColumns,
			blueprintKeycardColumnsWithDefault,
			blueprintKeycardColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blueprintKeycardType, blueprintKeycardMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blueprintKeycardType, blueprintKeycardMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"blueprint_keycards\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"blueprint_keycards\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into blueprint_keycards")
	}

	if !cached {
		blueprintKeycardInsertCacheMut.Lock()
		blueprintKeycardInsertCache[key] = cache
		blueprintKeycardInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BlueprintKeycard.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlueprintKeycard) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	blueprintKeycardUpdateCacheMut.RLock()
	cache, cached := blueprintKeycardUpdateCache[key]
	blueprintKeycardUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blueprintKeycardAllColumns,
			blueprintKeycardPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update blueprint_keycards, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"blueprint_keycards\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, blueprintKeycardPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blueprintKeycardType, blueprintKeycardMapping, append(wl, blueprintKeycardPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update blueprint_keycards row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for blueprint_keycards")
	}

	if !cached {
		blueprintKeycardUpdateCacheMut.Lock()
		blueprintKeycardUpdateCache[key] = cache
		blueprintKeycardUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q blueprintKeycardQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for blueprint_keycards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for blueprint_keycards")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlueprintKeycardSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintKeycardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"blueprint_keycards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, blueprintKeycardPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in blueprintKeycard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all blueprintKeycard")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlueprintKeycard) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_keycards provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintKeycardColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blueprintKeycardUpsertCacheMut.RLock()
	cache, cached := blueprintKeycardUpsertCache[key]
	blueprintKeycardUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blueprintKeycardAllColumns,
			blueprintKeycardColumnsWithDefault,
			blueprintKeycardColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			blueprintKeycardAllColumns,
			blueprintKeycardPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert blueprint_keycards, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(blueprintKeycardPrimaryKeyColumns))
			copy(conflict, blueprintKeycardPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"blueprint_keycards\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(blueprintKeycardType, blueprintKeycardMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blueprintKeycardType, blueprintKeycardMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert blueprint_keycards")
	}

	if !cached {
		blueprintKeycardUpsertCacheMut.Lock()
		blueprintKeycardUpsertCache[key] = cache
		blueprintKeycardUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BlueprintKeycard record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlueprintKeycard) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BlueprintKeycard provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blueprintKeycardPrimaryKeyMapping)
	sql := "DELETE FROM \"blueprint_keycards\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from blueprint_keycards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for blueprint_keycards")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q blueprintKeycardQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no blueprintKeycardQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprint_keycards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_keycards")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlueprintKeycardSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(blueprintKeycardBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintKeycardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"blueprint_keycards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintKeycardPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprintKeycard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_keycards")
	}

	if len(blueprintKeycardAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlueprintKeycard) Reload(exec boil.Executor) error {
	ret, err := FindBlueprintKeycard(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlueprintKeycardSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlueprintKeycardSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintKeycardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"blueprint_keycards\".* FROM \"blueprint_keycards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintKeycardPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BlueprintKeycardSlice")
	}

	*o = slice

	return nil
}

// BlueprintKeycardExists checks if the BlueprintKeycard row exists.
func BlueprintKeycardExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"blueprint_keycards\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if blueprint_keycards exists")
	}

	return exists, nil
}
