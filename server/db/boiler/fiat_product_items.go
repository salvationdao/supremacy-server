// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FiatProductItem is an object representing the database table.
type FiatProductItem struct {
	ID        string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	ProductID string    `boiler:"product_id" boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	Name      string    `boiler:"name" boil:"name" json:"name" toml:"name" yaml:"name"`
	ItemType  string    `boiler:"item_type" boil:"item_type" json:"item_type" toml:"item_type" yaml:"item_type"`
	DeletedAt null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *fiatProductItemR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L fiatProductItemL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FiatProductItemColumns = struct {
	ID        string
	ProductID string
	Name      string
	ItemType  string
	DeletedAt string
	UpdatedAt string
	CreatedAt string
}{
	ID:        "id",
	ProductID: "product_id",
	Name:      "name",
	ItemType:  "item_type",
	DeletedAt: "deleted_at",
	UpdatedAt: "updated_at",
	CreatedAt: "created_at",
}

var FiatProductItemTableColumns = struct {
	ID        string
	ProductID string
	Name      string
	ItemType  string
	DeletedAt string
	UpdatedAt string
	CreatedAt string
}{
	ID:        "fiat_product_items.id",
	ProductID: "fiat_product_items.product_id",
	Name:      "fiat_product_items.name",
	ItemType:  "fiat_product_items.item_type",
	DeletedAt: "fiat_product_items.deleted_at",
	UpdatedAt: "fiat_product_items.updated_at",
	CreatedAt: "fiat_product_items.created_at",
}

// Generated where

var FiatProductItemWhere = struct {
	ID        whereHelperstring
	ProductID whereHelperstring
	Name      whereHelperstring
	ItemType  whereHelperstring
	DeletedAt whereHelpernull_Time
	UpdatedAt whereHelpertime_Time
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"fiat_product_items\".\"id\""},
	ProductID: whereHelperstring{field: "\"fiat_product_items\".\"product_id\""},
	Name:      whereHelperstring{field: "\"fiat_product_items\".\"name\""},
	ItemType:  whereHelperstring{field: "\"fiat_product_items\".\"item_type\""},
	DeletedAt: whereHelpernull_Time{field: "\"fiat_product_items\".\"deleted_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"fiat_product_items\".\"updated_at\""},
	CreatedAt: whereHelpertime_Time{field: "\"fiat_product_items\".\"created_at\""},
}

// FiatProductItemRels is where relationship names are stored.
var FiatProductItemRels = struct {
	Product                              string
	ProductItemFiatProductItemBlueprints string
}{
	Product:                              "Product",
	ProductItemFiatProductItemBlueprints: "ProductItemFiatProductItemBlueprints",
}

// fiatProductItemR is where relationships are stored.
type fiatProductItemR struct {
	Product                              *FiatProduct                  `boiler:"Product" boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	ProductItemFiatProductItemBlueprints FiatProductItemBlueprintSlice `boiler:"ProductItemFiatProductItemBlueprints" boil:"ProductItemFiatProductItemBlueprints" json:"ProductItemFiatProductItemBlueprints" toml:"ProductItemFiatProductItemBlueprints" yaml:"ProductItemFiatProductItemBlueprints"`
}

// NewStruct creates a new relationship struct
func (*fiatProductItemR) NewStruct() *fiatProductItemR {
	return &fiatProductItemR{}
}

// fiatProductItemL is where Load methods for each relationship are stored.
type fiatProductItemL struct{}

var (
	fiatProductItemAllColumns            = []string{"id", "product_id", "name", "item_type", "deleted_at", "updated_at", "created_at"}
	fiatProductItemColumnsWithoutDefault = []string{"product_id", "name", "item_type"}
	fiatProductItemColumnsWithDefault    = []string{"id", "deleted_at", "updated_at", "created_at"}
	fiatProductItemPrimaryKeyColumns     = []string{"id"}
	fiatProductItemGeneratedColumns      = []string{}
)

type (
	// FiatProductItemSlice is an alias for a slice of pointers to FiatProductItem.
	// This should almost always be used instead of []FiatProductItem.
	FiatProductItemSlice []*FiatProductItem
	// FiatProductItemHook is the signature for custom FiatProductItem hook methods
	FiatProductItemHook func(boil.Executor, *FiatProductItem) error

	fiatProductItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	fiatProductItemType                 = reflect.TypeOf(&FiatProductItem{})
	fiatProductItemMapping              = queries.MakeStructMapping(fiatProductItemType)
	fiatProductItemPrimaryKeyMapping, _ = queries.BindMapping(fiatProductItemType, fiatProductItemMapping, fiatProductItemPrimaryKeyColumns)
	fiatProductItemInsertCacheMut       sync.RWMutex
	fiatProductItemInsertCache          = make(map[string]insertCache)
	fiatProductItemUpdateCacheMut       sync.RWMutex
	fiatProductItemUpdateCache          = make(map[string]updateCache)
	fiatProductItemUpsertCacheMut       sync.RWMutex
	fiatProductItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var fiatProductItemAfterSelectHooks []FiatProductItemHook

var fiatProductItemBeforeInsertHooks []FiatProductItemHook
var fiatProductItemAfterInsertHooks []FiatProductItemHook

var fiatProductItemBeforeUpdateHooks []FiatProductItemHook
var fiatProductItemAfterUpdateHooks []FiatProductItemHook

var fiatProductItemBeforeDeleteHooks []FiatProductItemHook
var fiatProductItemAfterDeleteHooks []FiatProductItemHook

var fiatProductItemBeforeUpsertHooks []FiatProductItemHook
var fiatProductItemAfterUpsertHooks []FiatProductItemHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FiatProductItem) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range fiatProductItemAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FiatProductItem) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range fiatProductItemBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FiatProductItem) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range fiatProductItemAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FiatProductItem) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range fiatProductItemBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FiatProductItem) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range fiatProductItemAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FiatProductItem) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range fiatProductItemBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FiatProductItem) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range fiatProductItemAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FiatProductItem) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range fiatProductItemBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FiatProductItem) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range fiatProductItemAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFiatProductItemHook registers your hook function for all future operations.
func AddFiatProductItemHook(hookPoint boil.HookPoint, fiatProductItemHook FiatProductItemHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		fiatProductItemAfterSelectHooks = append(fiatProductItemAfterSelectHooks, fiatProductItemHook)
	case boil.BeforeInsertHook:
		fiatProductItemBeforeInsertHooks = append(fiatProductItemBeforeInsertHooks, fiatProductItemHook)
	case boil.AfterInsertHook:
		fiatProductItemAfterInsertHooks = append(fiatProductItemAfterInsertHooks, fiatProductItemHook)
	case boil.BeforeUpdateHook:
		fiatProductItemBeforeUpdateHooks = append(fiatProductItemBeforeUpdateHooks, fiatProductItemHook)
	case boil.AfterUpdateHook:
		fiatProductItemAfterUpdateHooks = append(fiatProductItemAfterUpdateHooks, fiatProductItemHook)
	case boil.BeforeDeleteHook:
		fiatProductItemBeforeDeleteHooks = append(fiatProductItemBeforeDeleteHooks, fiatProductItemHook)
	case boil.AfterDeleteHook:
		fiatProductItemAfterDeleteHooks = append(fiatProductItemAfterDeleteHooks, fiatProductItemHook)
	case boil.BeforeUpsertHook:
		fiatProductItemBeforeUpsertHooks = append(fiatProductItemBeforeUpsertHooks, fiatProductItemHook)
	case boil.AfterUpsertHook:
		fiatProductItemAfterUpsertHooks = append(fiatProductItemAfterUpsertHooks, fiatProductItemHook)
	}
}

// One returns a single fiatProductItem record from the query.
func (q fiatProductItemQuery) One(exec boil.Executor) (*FiatProductItem, error) {
	o := &FiatProductItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for fiat_product_items")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FiatProductItem records from the query.
func (q fiatProductItemQuery) All(exec boil.Executor) (FiatProductItemSlice, error) {
	var o []*FiatProductItem

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to FiatProductItem slice")
	}

	if len(fiatProductItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FiatProductItem records in the query.
func (q fiatProductItemQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count fiat_product_items rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q fiatProductItemQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if fiat_product_items exists")
	}

	return count > 0, nil
}

// Product pointed to by the foreign key.
func (o *FiatProductItem) Product(mods ...qm.QueryMod) fiatProductQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := FiatProducts(queryMods...)
	queries.SetFrom(query.Query, "\"fiat_products\"")

	return query
}

// ProductItemFiatProductItemBlueprints retrieves all the fiat_product_item_blueprint's FiatProductItemBlueprints with an executor via product_item_id column.
func (o *FiatProductItem) ProductItemFiatProductItemBlueprints(mods ...qm.QueryMod) fiatProductItemBlueprintQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"fiat_product_item_blueprints\".\"product_item_id\"=?", o.ID),
	)

	query := FiatProductItemBlueprints(queryMods...)
	queries.SetFrom(query.Query, "\"fiat_product_item_blueprints\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"fiat_product_item_blueprints\".*"})
	}

	return query
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (fiatProductItemL) LoadProduct(e boil.Executor, singular bool, maybeFiatProductItem interface{}, mods queries.Applicator) error {
	var slice []*FiatProductItem
	var object *FiatProductItem

	if singular {
		object = maybeFiatProductItem.(*FiatProductItem)
	} else {
		slice = *maybeFiatProductItem.(*[]*FiatProductItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fiatProductItemR{}
		}
		args = append(args, object.ProductID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fiatProductItemR{}
			}

			for _, a := range args {
				if a == obj.ProductID {
					continue Outer
				}
			}

			args = append(args, obj.ProductID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`fiat_products`),
		qm.WhereIn(`fiat_products.id in ?`, args...),
		qmhelper.WhereIsNull(`fiat_products.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load FiatProduct")
	}

	var resultSlice []*FiatProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice FiatProduct")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for fiat_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for fiat_products")
	}

	if len(fiatProductItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &fiatProductR{}
		}
		foreign.R.ProductFiatProductItems = append(foreign.R.ProductFiatProductItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ID {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &fiatProductR{}
				}
				foreign.R.ProductFiatProductItems = append(foreign.R.ProductFiatProductItems, local)
				break
			}
		}
	}

	return nil
}

// LoadProductItemFiatProductItemBlueprints allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (fiatProductItemL) LoadProductItemFiatProductItemBlueprints(e boil.Executor, singular bool, maybeFiatProductItem interface{}, mods queries.Applicator) error {
	var slice []*FiatProductItem
	var object *FiatProductItem

	if singular {
		object = maybeFiatProductItem.(*FiatProductItem)
	} else {
		slice = *maybeFiatProductItem.(*[]*FiatProductItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fiatProductItemR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fiatProductItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`fiat_product_item_blueprints`),
		qm.WhereIn(`fiat_product_item_blueprints.product_item_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load fiat_product_item_blueprints")
	}

	var resultSlice []*FiatProductItemBlueprint
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice fiat_product_item_blueprints")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on fiat_product_item_blueprints")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for fiat_product_item_blueprints")
	}

	if len(fiatProductItemBlueprintAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductItemFiatProductItemBlueprints = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &fiatProductItemBlueprintR{}
			}
			foreign.R.ProductItem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ProductItemID) {
				local.R.ProductItemFiatProductItemBlueprints = append(local.R.ProductItemFiatProductItemBlueprints, foreign)
				if foreign.R == nil {
					foreign.R = &fiatProductItemBlueprintR{}
				}
				foreign.R.ProductItem = local
				break
			}
		}
	}

	return nil
}

// SetProduct of the fiatProductItem to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.ProductFiatProductItems.
func (o *FiatProductItem) SetProduct(exec boil.Executor, insert bool, related *FiatProduct) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"fiat_product_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, fiatProductItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ID
	if o.R == nil {
		o.R = &fiatProductItemR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &fiatProductR{
			ProductFiatProductItems: FiatProductItemSlice{o},
		}
	} else {
		related.R.ProductFiatProductItems = append(related.R.ProductFiatProductItems, o)
	}

	return nil
}

// AddProductItemFiatProductItemBlueprints adds the given related objects to the existing relationships
// of the fiat_product_item, optionally inserting them as new records.
// Appends related to o.R.ProductItemFiatProductItemBlueprints.
// Sets related.R.ProductItem appropriately.
func (o *FiatProductItem) AddProductItemFiatProductItemBlueprints(exec boil.Executor, insert bool, related ...*FiatProductItemBlueprint) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductItemID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"fiat_product_item_blueprints\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"product_item_id"}),
				strmangle.WhereClause("\"", "\"", 2, fiatProductItemBlueprintPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductItemID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &fiatProductItemR{
			ProductItemFiatProductItemBlueprints: related,
		}
	} else {
		o.R.ProductItemFiatProductItemBlueprints = append(o.R.ProductItemFiatProductItemBlueprints, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &fiatProductItemBlueprintR{
				ProductItem: o,
			}
		} else {
			rel.R.ProductItem = o
		}
	}
	return nil
}

// SetProductItemFiatProductItemBlueprints removes all previously related items of the
// fiat_product_item replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductItem's ProductItemFiatProductItemBlueprints accordingly.
// Replaces o.R.ProductItemFiatProductItemBlueprints with related.
// Sets related.R.ProductItem's ProductItemFiatProductItemBlueprints accordingly.
func (o *FiatProductItem) SetProductItemFiatProductItemBlueprints(exec boil.Executor, insert bool, related ...*FiatProductItemBlueprint) error {
	query := "update \"fiat_product_item_blueprints\" set \"product_item_id\" = null where \"product_item_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProductItemFiatProductItemBlueprints {
			queries.SetScanner(&rel.ProductItemID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ProductItem = nil
		}

		o.R.ProductItemFiatProductItemBlueprints = nil
	}
	return o.AddProductItemFiatProductItemBlueprints(exec, insert, related...)
}

// RemoveProductItemFiatProductItemBlueprints relationships from objects passed in.
// Removes related items from R.ProductItemFiatProductItemBlueprints (uses pointer comparison, removal does not keep order)
// Sets related.R.ProductItem.
func (o *FiatProductItem) RemoveProductItemFiatProductItemBlueprints(exec boil.Executor, related ...*FiatProductItemBlueprint) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductItemID, nil)
		if rel.R != nil {
			rel.R.ProductItem = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("product_item_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductItemFiatProductItemBlueprints {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductItemFiatProductItemBlueprints)
			if ln > 1 && i < ln-1 {
				o.R.ProductItemFiatProductItemBlueprints[i] = o.R.ProductItemFiatProductItemBlueprints[ln-1]
			}
			o.R.ProductItemFiatProductItemBlueprints = o.R.ProductItemFiatProductItemBlueprints[:ln-1]
			break
		}
	}

	return nil
}

// FiatProductItems retrieves all the records using an executor.
func FiatProductItems(mods ...qm.QueryMod) fiatProductItemQuery {
	mods = append(mods, qm.From("\"fiat_product_items\""), qmhelper.WhereIsNull("\"fiat_product_items\".\"deleted_at\""))
	return fiatProductItemQuery{NewQuery(mods...)}
}

// FindFiatProductItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFiatProductItem(exec boil.Executor, iD string, selectCols ...string) (*FiatProductItem, error) {
	fiatProductItemObj := &FiatProductItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"fiat_product_items\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, fiatProductItemObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from fiat_product_items")
	}

	if err = fiatProductItemObj.doAfterSelectHooks(exec); err != nil {
		return fiatProductItemObj, err
	}

	return fiatProductItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FiatProductItem) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no fiat_product_items provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fiatProductItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	fiatProductItemInsertCacheMut.RLock()
	cache, cached := fiatProductItemInsertCache[key]
	fiatProductItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			fiatProductItemAllColumns,
			fiatProductItemColumnsWithDefault,
			fiatProductItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(fiatProductItemType, fiatProductItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(fiatProductItemType, fiatProductItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"fiat_product_items\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"fiat_product_items\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into fiat_product_items")
	}

	if !cached {
		fiatProductItemInsertCacheMut.Lock()
		fiatProductItemInsertCache[key] = cache
		fiatProductItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the FiatProductItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FiatProductItem) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	fiatProductItemUpdateCacheMut.RLock()
	cache, cached := fiatProductItemUpdateCache[key]
	fiatProductItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			fiatProductItemAllColumns,
			fiatProductItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update fiat_product_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"fiat_product_items\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, fiatProductItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(fiatProductItemType, fiatProductItemMapping, append(wl, fiatProductItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update fiat_product_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for fiat_product_items")
	}

	if !cached {
		fiatProductItemUpdateCacheMut.Lock()
		fiatProductItemUpdateCache[key] = cache
		fiatProductItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q fiatProductItemQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for fiat_product_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for fiat_product_items")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FiatProductItemSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fiatProductItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"fiat_product_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, fiatProductItemPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in fiatProductItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all fiatProductItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FiatProductItem) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no fiat_product_items provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fiatProductItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	fiatProductItemUpsertCacheMut.RLock()
	cache, cached := fiatProductItemUpsertCache[key]
	fiatProductItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			fiatProductItemAllColumns,
			fiatProductItemColumnsWithDefault,
			fiatProductItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			fiatProductItemAllColumns,
			fiatProductItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert fiat_product_items, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(fiatProductItemPrimaryKeyColumns))
			copy(conflict, fiatProductItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"fiat_product_items\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(fiatProductItemType, fiatProductItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(fiatProductItemType, fiatProductItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert fiat_product_items")
	}

	if !cached {
		fiatProductItemUpsertCacheMut.Lock()
		fiatProductItemUpsertCache[key] = cache
		fiatProductItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single FiatProductItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FiatProductItem) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no FiatProductItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), fiatProductItemPrimaryKeyMapping)
		sql = "DELETE FROM \"fiat_product_items\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"fiat_product_items\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(fiatProductItemType, fiatProductItemMapping, append(wl, fiatProductItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from fiat_product_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for fiat_product_items")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q fiatProductItemQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no fiatProductItemQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from fiat_product_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for fiat_product_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FiatProductItemSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(fiatProductItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fiatProductItemPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"fiat_product_items\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, fiatProductItemPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fiatProductItemPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"fiat_product_items\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, fiatProductItemPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from fiatProductItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for fiat_product_items")
	}

	if len(fiatProductItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FiatProductItem) Reload(exec boil.Executor) error {
	ret, err := FindFiatProductItem(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FiatProductItemSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FiatProductItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fiatProductItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"fiat_product_items\".* FROM \"fiat_product_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, fiatProductItemPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in FiatProductItemSlice")
	}

	*o = slice

	return nil
}

// FiatProductItemExists checks if the FiatProductItem row exists.
func FiatProductItemExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"fiat_product_items\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if fiat_product_items exists")
	}

	return exists, nil
}
