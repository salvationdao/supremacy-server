// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MechRepairLog is an object representing the database table.
type MechRepairLog struct {
	ID               string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	MechID           string      `boiler:"mech_id" boil:"mech_id" json:"mech_id" toml:"mech_id" yaml:"mech_id"`
	Type             string      `boiler:"type" boil:"type" json:"type" toml:"type" yaml:"type"`
	InvolvedPlayerID null.String `boiler:"involved_player_id" boil:"involved_player_id" json:"involved_player_id,omitempty" toml:"involved_player_id" yaml:"involved_player_id,omitempty"`
	CreatedAt        time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *mechRepairLogR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L mechRepairLogL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MechRepairLogColumns = struct {
	ID               string
	MechID           string
	Type             string
	InvolvedPlayerID string
	CreatedAt        string
}{
	ID:               "id",
	MechID:           "mech_id",
	Type:             "type",
	InvolvedPlayerID: "involved_player_id",
	CreatedAt:        "created_at",
}

var MechRepairLogTableColumns = struct {
	ID               string
	MechID           string
	Type             string
	InvolvedPlayerID string
	CreatedAt        string
}{
	ID:               "mech_repair_logs.id",
	MechID:           "mech_repair_logs.mech_id",
	Type:             "mech_repair_logs.type",
	InvolvedPlayerID: "mech_repair_logs.involved_player_id",
	CreatedAt:        "mech_repair_logs.created_at",
}

// Generated where

var MechRepairLogWhere = struct {
	ID               whereHelperstring
	MechID           whereHelperstring
	Type             whereHelperstring
	InvolvedPlayerID whereHelpernull_String
	CreatedAt        whereHelpertime_Time
}{
	ID:               whereHelperstring{field: "\"mech_repair_logs\".\"id\""},
	MechID:           whereHelperstring{field: "\"mech_repair_logs\".\"mech_id\""},
	Type:             whereHelperstring{field: "\"mech_repair_logs\".\"type\""},
	InvolvedPlayerID: whereHelpernull_String{field: "\"mech_repair_logs\".\"involved_player_id\""},
	CreatedAt:        whereHelpertime_Time{field: "\"mech_repair_logs\".\"created_at\""},
}

// MechRepairLogRels is where relationship names are stored.
var MechRepairLogRels = struct {
	InvolvedPlayer string
	Mech           string
}{
	InvolvedPlayer: "InvolvedPlayer",
	Mech:           "Mech",
}

// mechRepairLogR is where relationships are stored.
type mechRepairLogR struct {
	InvolvedPlayer *Player `boiler:"InvolvedPlayer" boil:"InvolvedPlayer" json:"InvolvedPlayer" toml:"InvolvedPlayer" yaml:"InvolvedPlayer"`
	Mech           *Mech   `boiler:"Mech" boil:"Mech" json:"Mech" toml:"Mech" yaml:"Mech"`
}

// NewStruct creates a new relationship struct
func (*mechRepairLogR) NewStruct() *mechRepairLogR {
	return &mechRepairLogR{}
}

// mechRepairLogL is where Load methods for each relationship are stored.
type mechRepairLogL struct{}

var (
	mechRepairLogAllColumns            = []string{"id", "mech_id", "type", "involved_player_id", "created_at"}
	mechRepairLogColumnsWithoutDefault = []string{"mech_id", "type"}
	mechRepairLogColumnsWithDefault    = []string{"id", "involved_player_id", "created_at"}
	mechRepairLogPrimaryKeyColumns     = []string{"id"}
	mechRepairLogGeneratedColumns      = []string{}
)

type (
	// MechRepairLogSlice is an alias for a slice of pointers to MechRepairLog.
	// This should almost always be used instead of []MechRepairLog.
	MechRepairLogSlice []*MechRepairLog
	// MechRepairLogHook is the signature for custom MechRepairLog hook methods
	MechRepairLogHook func(boil.Executor, *MechRepairLog) error

	mechRepairLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mechRepairLogType                 = reflect.TypeOf(&MechRepairLog{})
	mechRepairLogMapping              = queries.MakeStructMapping(mechRepairLogType)
	mechRepairLogPrimaryKeyMapping, _ = queries.BindMapping(mechRepairLogType, mechRepairLogMapping, mechRepairLogPrimaryKeyColumns)
	mechRepairLogInsertCacheMut       sync.RWMutex
	mechRepairLogInsertCache          = make(map[string]insertCache)
	mechRepairLogUpdateCacheMut       sync.RWMutex
	mechRepairLogUpdateCache          = make(map[string]updateCache)
	mechRepairLogUpsertCacheMut       sync.RWMutex
	mechRepairLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mechRepairLogAfterSelectHooks []MechRepairLogHook

var mechRepairLogBeforeInsertHooks []MechRepairLogHook
var mechRepairLogAfterInsertHooks []MechRepairLogHook

var mechRepairLogBeforeUpdateHooks []MechRepairLogHook
var mechRepairLogAfterUpdateHooks []MechRepairLogHook

var mechRepairLogBeforeDeleteHooks []MechRepairLogHook
var mechRepairLogAfterDeleteHooks []MechRepairLogHook

var mechRepairLogBeforeUpsertHooks []MechRepairLogHook
var mechRepairLogAfterUpsertHooks []MechRepairLogHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MechRepairLog) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range mechRepairLogAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MechRepairLog) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechRepairLogBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MechRepairLog) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechRepairLogAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MechRepairLog) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechRepairLogBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MechRepairLog) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechRepairLogAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MechRepairLog) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechRepairLogBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MechRepairLog) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechRepairLogAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MechRepairLog) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechRepairLogBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MechRepairLog) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechRepairLogAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMechRepairLogHook registers your hook function for all future operations.
func AddMechRepairLogHook(hookPoint boil.HookPoint, mechRepairLogHook MechRepairLogHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mechRepairLogAfterSelectHooks = append(mechRepairLogAfterSelectHooks, mechRepairLogHook)
	case boil.BeforeInsertHook:
		mechRepairLogBeforeInsertHooks = append(mechRepairLogBeforeInsertHooks, mechRepairLogHook)
	case boil.AfterInsertHook:
		mechRepairLogAfterInsertHooks = append(mechRepairLogAfterInsertHooks, mechRepairLogHook)
	case boil.BeforeUpdateHook:
		mechRepairLogBeforeUpdateHooks = append(mechRepairLogBeforeUpdateHooks, mechRepairLogHook)
	case boil.AfterUpdateHook:
		mechRepairLogAfterUpdateHooks = append(mechRepairLogAfterUpdateHooks, mechRepairLogHook)
	case boil.BeforeDeleteHook:
		mechRepairLogBeforeDeleteHooks = append(mechRepairLogBeforeDeleteHooks, mechRepairLogHook)
	case boil.AfterDeleteHook:
		mechRepairLogAfterDeleteHooks = append(mechRepairLogAfterDeleteHooks, mechRepairLogHook)
	case boil.BeforeUpsertHook:
		mechRepairLogBeforeUpsertHooks = append(mechRepairLogBeforeUpsertHooks, mechRepairLogHook)
	case boil.AfterUpsertHook:
		mechRepairLogAfterUpsertHooks = append(mechRepairLogAfterUpsertHooks, mechRepairLogHook)
	}
}

// One returns a single mechRepairLog record from the query.
func (q mechRepairLogQuery) One(exec boil.Executor) (*MechRepairLog, error) {
	o := &MechRepairLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for mech_repair_logs")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MechRepairLog records from the query.
func (q mechRepairLogQuery) All(exec boil.Executor) (MechRepairLogSlice, error) {
	var o []*MechRepairLog

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to MechRepairLog slice")
	}

	if len(mechRepairLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MechRepairLog records in the query.
func (q mechRepairLogQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count mech_repair_logs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mechRepairLogQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if mech_repair_logs exists")
	}

	return count > 0, nil
}

// InvolvedPlayer pointed to by the foreign key.
func (o *MechRepairLog) InvolvedPlayer(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.InvolvedPlayerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// Mech pointed to by the foreign key.
func (o *MechRepairLog) Mech(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MechID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// LoadInvolvedPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechRepairLogL) LoadInvolvedPlayer(e boil.Executor, singular bool, maybeMechRepairLog interface{}, mods queries.Applicator) error {
	var slice []*MechRepairLog
	var object *MechRepairLog

	if singular {
		object = maybeMechRepairLog.(*MechRepairLog)
	} else {
		slice = *maybeMechRepairLog.(*[]*MechRepairLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechRepairLogR{}
		}
		if !queries.IsNil(object.InvolvedPlayerID) {
			args = append(args, object.InvolvedPlayerID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechRepairLogR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.InvolvedPlayerID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.InvolvedPlayerID) {
				args = append(args, obj.InvolvedPlayerID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(mechRepairLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InvolvedPlayer = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.InvolvedPlayerMechRepairLogs = append(foreign.R.InvolvedPlayerMechRepairLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.InvolvedPlayerID, foreign.ID) {
				local.R.InvolvedPlayer = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.InvolvedPlayerMechRepairLogs = append(foreign.R.InvolvedPlayerMechRepairLogs, local)
				break
			}
		}
	}

	return nil
}

// LoadMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechRepairLogL) LoadMech(e boil.Executor, singular bool, maybeMechRepairLog interface{}, mods queries.Applicator) error {
	var slice []*MechRepairLog
	var object *MechRepairLog

	if singular {
		object = maybeMechRepairLog.(*MechRepairLog)
	} else {
		slice = *maybeMechRepairLog.(*[]*MechRepairLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechRepairLogR{}
		}
		args = append(args, object.MechID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechRepairLogR{}
			}

			for _, a := range args {
				if a == obj.MechID {
					continue Outer
				}
			}

			args = append(args, obj.MechID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(mechRepairLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Mech = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.MechRepairLogs = append(foreign.R.MechRepairLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MechID == foreign.ID {
				local.R.Mech = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.MechRepairLogs = append(foreign.R.MechRepairLogs, local)
				break
			}
		}
	}

	return nil
}

// SetInvolvedPlayer of the mechRepairLog to the related item.
// Sets o.R.InvolvedPlayer to related.
// Adds o to related.R.InvolvedPlayerMechRepairLogs.
func (o *MechRepairLog) SetInvolvedPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mech_repair_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"involved_player_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechRepairLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.InvolvedPlayerID, related.ID)
	if o.R == nil {
		o.R = &mechRepairLogR{
			InvolvedPlayer: related,
		}
	} else {
		o.R.InvolvedPlayer = related
	}

	if related.R == nil {
		related.R = &playerR{
			InvolvedPlayerMechRepairLogs: MechRepairLogSlice{o},
		}
	} else {
		related.R.InvolvedPlayerMechRepairLogs = append(related.R.InvolvedPlayerMechRepairLogs, o)
	}

	return nil
}

// RemoveInvolvedPlayer relationship.
// Sets o.R.InvolvedPlayer to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *MechRepairLog) RemoveInvolvedPlayer(exec boil.Executor, related *Player) error {
	var err error

	queries.SetScanner(&o.InvolvedPlayerID, nil)
	if _, err = o.Update(exec, boil.Whitelist("involved_player_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.InvolvedPlayer = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.InvolvedPlayerMechRepairLogs {
		if queries.Equal(o.InvolvedPlayerID, ri.InvolvedPlayerID) {
			continue
		}

		ln := len(related.R.InvolvedPlayerMechRepairLogs)
		if ln > 1 && i < ln-1 {
			related.R.InvolvedPlayerMechRepairLogs[i] = related.R.InvolvedPlayerMechRepairLogs[ln-1]
		}
		related.R.InvolvedPlayerMechRepairLogs = related.R.InvolvedPlayerMechRepairLogs[:ln-1]
		break
	}
	return nil
}

// SetMech of the mechRepairLog to the related item.
// Sets o.R.Mech to related.
// Adds o to related.R.MechRepairLogs.
func (o *MechRepairLog) SetMech(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mech_repair_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechRepairLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MechID = related.ID
	if o.R == nil {
		o.R = &mechRepairLogR{
			Mech: related,
		}
	} else {
		o.R.Mech = related
	}

	if related.R == nil {
		related.R = &mechR{
			MechRepairLogs: MechRepairLogSlice{o},
		}
	} else {
		related.R.MechRepairLogs = append(related.R.MechRepairLogs, o)
	}

	return nil
}

// MechRepairLogs retrieves all the records using an executor.
func MechRepairLogs(mods ...qm.QueryMod) mechRepairLogQuery {
	mods = append(mods, qm.From("\"mech_repair_logs\""))
	return mechRepairLogQuery{NewQuery(mods...)}
}

// FindMechRepairLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMechRepairLog(exec boil.Executor, iD string, selectCols ...string) (*MechRepairLog, error) {
	mechRepairLogObj := &MechRepairLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mech_repair_logs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, mechRepairLogObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from mech_repair_logs")
	}

	if err = mechRepairLogObj.doAfterSelectHooks(exec); err != nil {
		return mechRepairLogObj, err
	}

	return mechRepairLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MechRepairLog) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mech_repair_logs provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechRepairLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mechRepairLogInsertCacheMut.RLock()
	cache, cached := mechRepairLogInsertCache[key]
	mechRepairLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mechRepairLogAllColumns,
			mechRepairLogColumnsWithDefault,
			mechRepairLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mechRepairLogType, mechRepairLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mechRepairLogType, mechRepairLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mech_repair_logs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mech_repair_logs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into mech_repair_logs")
	}

	if !cached {
		mechRepairLogInsertCacheMut.Lock()
		mechRepairLogInsertCache[key] = cache
		mechRepairLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the MechRepairLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MechRepairLog) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mechRepairLogUpdateCacheMut.RLock()
	cache, cached := mechRepairLogUpdateCache[key]
	mechRepairLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mechRepairLogAllColumns,
			mechRepairLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update mech_repair_logs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mech_repair_logs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mechRepairLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mechRepairLogType, mechRepairLogMapping, append(wl, mechRepairLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update mech_repair_logs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for mech_repair_logs")
	}

	if !cached {
		mechRepairLogUpdateCacheMut.Lock()
		mechRepairLogUpdateCache[key] = cache
		mechRepairLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mechRepairLogQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for mech_repair_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for mech_repair_logs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MechRepairLogSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechRepairLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mech_repair_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mechRepairLogPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in mechRepairLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all mechRepairLog")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MechRepairLog) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mech_repair_logs provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechRepairLogColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mechRepairLogUpsertCacheMut.RLock()
	cache, cached := mechRepairLogUpsertCache[key]
	mechRepairLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mechRepairLogAllColumns,
			mechRepairLogColumnsWithDefault,
			mechRepairLogColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mechRepairLogAllColumns,
			mechRepairLogPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert mech_repair_logs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mechRepairLogPrimaryKeyColumns))
			copy(conflict, mechRepairLogPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mech_repair_logs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mechRepairLogType, mechRepairLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mechRepairLogType, mechRepairLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert mech_repair_logs")
	}

	if !cached {
		mechRepairLogUpsertCacheMut.Lock()
		mechRepairLogUpsertCache[key] = cache
		mechRepairLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single MechRepairLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MechRepairLog) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no MechRepairLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mechRepairLogPrimaryKeyMapping)
	sql := "DELETE FROM \"mech_repair_logs\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from mech_repair_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for mech_repair_logs")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mechRepairLogQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no mechRepairLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mech_repair_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mech_repair_logs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MechRepairLogSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mechRepairLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechRepairLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"mech_repair_logs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechRepairLogPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mechRepairLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mech_repair_logs")
	}

	if len(mechRepairLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MechRepairLog) Reload(exec boil.Executor) error {
	ret, err := FindMechRepairLog(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MechRepairLogSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MechRepairLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechRepairLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mech_repair_logs\".* FROM \"mech_repair_logs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechRepairLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in MechRepairLogSlice")
	}

	*o = slice

	return nil
}

// MechRepairLogExists checks if the MechRepairLog row exists.
func MechRepairLogExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mech_repair_logs\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if mech_repair_logs exists")
	}

	return exists, nil
}
