// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BlueprintQuest is an object representing the database table.
type BlueprintQuest struct {
	ID             string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	QuestEventType string    `boiler:"quest_event_type" boil:"quest_event_type" json:"quest_event_type" toml:"quest_event_type" yaml:"quest_event_type"`
	Key            string    `boiler:"key" boil:"key" json:"key" toml:"key" yaml:"key"`
	Name           string    `boiler:"name" boil:"name" json:"name" toml:"name" yaml:"name"`
	Description    string    `boiler:"description" boil:"description" json:"description" toml:"description" yaml:"description"`
	RequestAmount  int       `boiler:"request_amount" boil:"request_amount" json:"request_amount" toml:"request_amount" yaml:"request_amount"`
	CreatedAt      time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt      null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *blueprintQuestR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L blueprintQuestL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlueprintQuestColumns = struct {
	ID             string
	QuestEventType string
	Key            string
	Name           string
	Description    string
	RequestAmount  string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ID:             "id",
	QuestEventType: "quest_event_type",
	Key:            "key",
	Name:           "name",
	Description:    "description",
	RequestAmount:  "request_amount",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
}

var BlueprintQuestTableColumns = struct {
	ID             string
	QuestEventType string
	Key            string
	Name           string
	Description    string
	RequestAmount  string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ID:             "blueprint_quests.id",
	QuestEventType: "blueprint_quests.quest_event_type",
	Key:            "blueprint_quests.key",
	Name:           "blueprint_quests.name",
	Description:    "blueprint_quests.description",
	RequestAmount:  "blueprint_quests.request_amount",
	CreatedAt:      "blueprint_quests.created_at",
	UpdatedAt:      "blueprint_quests.updated_at",
	DeletedAt:      "blueprint_quests.deleted_at",
}

// Generated where

var BlueprintQuestWhere = struct {
	ID             whereHelperstring
	QuestEventType whereHelperstring
	Key            whereHelperstring
	Name           whereHelperstring
	Description    whereHelperstring
	RequestAmount  whereHelperint
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	DeletedAt      whereHelpernull_Time
}{
	ID:             whereHelperstring{field: "\"blueprint_quests\".\"id\""},
	QuestEventType: whereHelperstring{field: "\"blueprint_quests\".\"quest_event_type\""},
	Key:            whereHelperstring{field: "\"blueprint_quests\".\"key\""},
	Name:           whereHelperstring{field: "\"blueprint_quests\".\"name\""},
	Description:    whereHelperstring{field: "\"blueprint_quests\".\"description\""},
	RequestAmount:  whereHelperint{field: "\"blueprint_quests\".\"request_amount\""},
	CreatedAt:      whereHelpertime_Time{field: "\"blueprint_quests\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"blueprint_quests\".\"updated_at\""},
	DeletedAt:      whereHelpernull_Time{field: "\"blueprint_quests\".\"deleted_at\""},
}

// BlueprintQuestRels is where relationship names are stored.
var BlueprintQuestRels = struct {
	BlueprintQuests string
}{
	BlueprintQuests: "BlueprintQuests",
}

// blueprintQuestR is where relationships are stored.
type blueprintQuestR struct {
	BlueprintQuests QuestSlice `boiler:"BlueprintQuests" boil:"BlueprintQuests" json:"BlueprintQuests" toml:"BlueprintQuests" yaml:"BlueprintQuests"`
}

// NewStruct creates a new relationship struct
func (*blueprintQuestR) NewStruct() *blueprintQuestR {
	return &blueprintQuestR{}
}

// blueprintQuestL is where Load methods for each relationship are stored.
type blueprintQuestL struct{}

var (
	blueprintQuestAllColumns            = []string{"id", "quest_event_type", "key", "name", "description", "request_amount", "created_at", "updated_at", "deleted_at"}
	blueprintQuestColumnsWithoutDefault = []string{"quest_event_type", "key", "name", "description", "request_amount"}
	blueprintQuestColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at"}
	blueprintQuestPrimaryKeyColumns     = []string{"id"}
	blueprintQuestGeneratedColumns      = []string{}
)

type (
	// BlueprintQuestSlice is an alias for a slice of pointers to BlueprintQuest.
	// This should almost always be used instead of []BlueprintQuest.
	BlueprintQuestSlice []*BlueprintQuest
	// BlueprintQuestHook is the signature for custom BlueprintQuest hook methods
	BlueprintQuestHook func(boil.Executor, *BlueprintQuest) error

	blueprintQuestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blueprintQuestType                 = reflect.TypeOf(&BlueprintQuest{})
	blueprintQuestMapping              = queries.MakeStructMapping(blueprintQuestType)
	blueprintQuestPrimaryKeyMapping, _ = queries.BindMapping(blueprintQuestType, blueprintQuestMapping, blueprintQuestPrimaryKeyColumns)
	blueprintQuestInsertCacheMut       sync.RWMutex
	blueprintQuestInsertCache          = make(map[string]insertCache)
	blueprintQuestUpdateCacheMut       sync.RWMutex
	blueprintQuestUpdateCache          = make(map[string]updateCache)
	blueprintQuestUpsertCacheMut       sync.RWMutex
	blueprintQuestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var blueprintQuestAfterSelectHooks []BlueprintQuestHook

var blueprintQuestBeforeInsertHooks []BlueprintQuestHook
var blueprintQuestAfterInsertHooks []BlueprintQuestHook

var blueprintQuestBeforeUpdateHooks []BlueprintQuestHook
var blueprintQuestAfterUpdateHooks []BlueprintQuestHook

var blueprintQuestBeforeDeleteHooks []BlueprintQuestHook
var blueprintQuestAfterDeleteHooks []BlueprintQuestHook

var blueprintQuestBeforeUpsertHooks []BlueprintQuestHook
var blueprintQuestAfterUpsertHooks []BlueprintQuestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BlueprintQuest) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintQuestAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BlueprintQuest) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintQuestBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BlueprintQuest) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintQuestAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BlueprintQuest) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintQuestBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BlueprintQuest) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintQuestAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BlueprintQuest) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintQuestBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BlueprintQuest) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintQuestAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BlueprintQuest) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintQuestBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BlueprintQuest) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintQuestAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBlueprintQuestHook registers your hook function for all future operations.
func AddBlueprintQuestHook(hookPoint boil.HookPoint, blueprintQuestHook BlueprintQuestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		blueprintQuestAfterSelectHooks = append(blueprintQuestAfterSelectHooks, blueprintQuestHook)
	case boil.BeforeInsertHook:
		blueprintQuestBeforeInsertHooks = append(blueprintQuestBeforeInsertHooks, blueprintQuestHook)
	case boil.AfterInsertHook:
		blueprintQuestAfterInsertHooks = append(blueprintQuestAfterInsertHooks, blueprintQuestHook)
	case boil.BeforeUpdateHook:
		blueprintQuestBeforeUpdateHooks = append(blueprintQuestBeforeUpdateHooks, blueprintQuestHook)
	case boil.AfterUpdateHook:
		blueprintQuestAfterUpdateHooks = append(blueprintQuestAfterUpdateHooks, blueprintQuestHook)
	case boil.BeforeDeleteHook:
		blueprintQuestBeforeDeleteHooks = append(blueprintQuestBeforeDeleteHooks, blueprintQuestHook)
	case boil.AfterDeleteHook:
		blueprintQuestAfterDeleteHooks = append(blueprintQuestAfterDeleteHooks, blueprintQuestHook)
	case boil.BeforeUpsertHook:
		blueprintQuestBeforeUpsertHooks = append(blueprintQuestBeforeUpsertHooks, blueprintQuestHook)
	case boil.AfterUpsertHook:
		blueprintQuestAfterUpsertHooks = append(blueprintQuestAfterUpsertHooks, blueprintQuestHook)
	}
}

// One returns a single blueprintQuest record from the query.
func (q blueprintQuestQuery) One(exec boil.Executor) (*BlueprintQuest, error) {
	o := &BlueprintQuest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for blueprint_quests")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BlueprintQuest records from the query.
func (q blueprintQuestQuery) All(exec boil.Executor) (BlueprintQuestSlice, error) {
	var o []*BlueprintQuest

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BlueprintQuest slice")
	}

	if len(blueprintQuestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BlueprintQuest records in the query.
func (q blueprintQuestQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count blueprint_quests rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q blueprintQuestQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if blueprint_quests exists")
	}

	return count > 0, nil
}

// BlueprintQuests retrieves all the quest's Quests with an executor via blueprint_id column.
func (o *BlueprintQuest) BlueprintQuests(mods ...qm.QueryMod) questQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"quests\".\"blueprint_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"quests\".\"deleted_at\""),
	)

	query := Quests(queryMods...)
	queries.SetFrom(query.Query, "\"quests\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"quests\".*"})
	}

	return query
}

// LoadBlueprintQuests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blueprintQuestL) LoadBlueprintQuests(e boil.Executor, singular bool, maybeBlueprintQuest interface{}, mods queries.Applicator) error {
	var slice []*BlueprintQuest
	var object *BlueprintQuest

	if singular {
		object = maybeBlueprintQuest.(*BlueprintQuest)
	} else {
		slice = *maybeBlueprintQuest.(*[]*BlueprintQuest)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintQuestR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintQuestR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`quests`),
		qm.WhereIn(`quests.blueprint_id in ?`, args...),
		qmhelper.WhereIsNull(`quests.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load quests")
	}

	var resultSlice []*Quest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice quests")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on quests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for quests")
	}

	if len(questAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlueprintQuests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &questR{}
			}
			foreign.R.Blueprint = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BlueprintID {
				local.R.BlueprintQuests = append(local.R.BlueprintQuests, foreign)
				if foreign.R == nil {
					foreign.R = &questR{}
				}
				foreign.R.Blueprint = local
				break
			}
		}
	}

	return nil
}

// AddBlueprintQuests adds the given related objects to the existing relationships
// of the blueprint_quest, optionally inserting them as new records.
// Appends related to o.R.BlueprintQuests.
// Sets related.R.Blueprint appropriately.
func (o *BlueprintQuest) AddBlueprintQuests(exec boil.Executor, insert bool, related ...*Quest) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BlueprintID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"quests\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_id"}),
				strmangle.WhereClause("\"", "\"", 2, questPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BlueprintID = o.ID
		}
	}

	if o.R == nil {
		o.R = &blueprintQuestR{
			BlueprintQuests: related,
		}
	} else {
		o.R.BlueprintQuests = append(o.R.BlueprintQuests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &questR{
				Blueprint: o,
			}
		} else {
			rel.R.Blueprint = o
		}
	}
	return nil
}

// BlueprintQuests retrieves all the records using an executor.
func BlueprintQuests(mods ...qm.QueryMod) blueprintQuestQuery {
	mods = append(mods, qm.From("\"blueprint_quests\""), qmhelper.WhereIsNull("\"blueprint_quests\".\"deleted_at\""))
	return blueprintQuestQuery{NewQuery(mods...)}
}

// FindBlueprintQuest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlueprintQuest(exec boil.Executor, iD string, selectCols ...string) (*BlueprintQuest, error) {
	blueprintQuestObj := &BlueprintQuest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"blueprint_quests\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, blueprintQuestObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from blueprint_quests")
	}

	if err = blueprintQuestObj.doAfterSelectHooks(exec); err != nil {
		return blueprintQuestObj, err
	}

	return blueprintQuestObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlueprintQuest) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_quests provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintQuestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blueprintQuestInsertCacheMut.RLock()
	cache, cached := blueprintQuestInsertCache[key]
	blueprintQuestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blueprintQuestAllColumns,
			blueprintQuestColumnsWithDefault,
			blueprintQuestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blueprintQuestType, blueprintQuestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blueprintQuestType, blueprintQuestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"blueprint_quests\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"blueprint_quests\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into blueprint_quests")
	}

	if !cached {
		blueprintQuestInsertCacheMut.Lock()
		blueprintQuestInsertCache[key] = cache
		blueprintQuestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BlueprintQuest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlueprintQuest) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	blueprintQuestUpdateCacheMut.RLock()
	cache, cached := blueprintQuestUpdateCache[key]
	blueprintQuestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blueprintQuestAllColumns,
			blueprintQuestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update blueprint_quests, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"blueprint_quests\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, blueprintQuestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blueprintQuestType, blueprintQuestMapping, append(wl, blueprintQuestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update blueprint_quests row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for blueprint_quests")
	}

	if !cached {
		blueprintQuestUpdateCacheMut.Lock()
		blueprintQuestUpdateCache[key] = cache
		blueprintQuestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q blueprintQuestQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for blueprint_quests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for blueprint_quests")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlueprintQuestSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintQuestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"blueprint_quests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, blueprintQuestPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in blueprintQuest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all blueprintQuest")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlueprintQuest) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_quests provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintQuestColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blueprintQuestUpsertCacheMut.RLock()
	cache, cached := blueprintQuestUpsertCache[key]
	blueprintQuestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blueprintQuestAllColumns,
			blueprintQuestColumnsWithDefault,
			blueprintQuestColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			blueprintQuestAllColumns,
			blueprintQuestPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert blueprint_quests, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(blueprintQuestPrimaryKeyColumns))
			copy(conflict, blueprintQuestPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"blueprint_quests\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(blueprintQuestType, blueprintQuestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blueprintQuestType, blueprintQuestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert blueprint_quests")
	}

	if !cached {
		blueprintQuestUpsertCacheMut.Lock()
		blueprintQuestUpsertCache[key] = cache
		blueprintQuestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BlueprintQuest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlueprintQuest) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BlueprintQuest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blueprintQuestPrimaryKeyMapping)
		sql = "DELETE FROM \"blueprint_quests\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"blueprint_quests\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(blueprintQuestType, blueprintQuestMapping, append(wl, blueprintQuestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from blueprint_quests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for blueprint_quests")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q blueprintQuestQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no blueprintQuestQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprint_quests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_quests")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlueprintQuestSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(blueprintQuestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintQuestPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"blueprint_quests\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintQuestPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintQuestPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"blueprint_quests\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, blueprintQuestPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprintQuest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_quests")
	}

	if len(blueprintQuestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlueprintQuest) Reload(exec boil.Executor) error {
	ret, err := FindBlueprintQuest(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlueprintQuestSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlueprintQuestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintQuestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"blueprint_quests\".* FROM \"blueprint_quests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintQuestPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BlueprintQuestSlice")
	}

	*o = slice

	return nil
}

// BlueprintQuestExists checks if the BlueprintQuest row exists.
func BlueprintQuestExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"blueprint_quests\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if blueprint_quests exists")
	}

	return exists, nil
}
