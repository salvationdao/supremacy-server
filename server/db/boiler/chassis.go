// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Chassis is an object representing the database table.
type Chassis struct {
	ID                    string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BrandID               string      `boiler:"brand_id" boil:"brand_id" json:"brand_id" toml:"brand_id" yaml:"brand_id"`
	Label                 string      `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	Skin                  string      `boiler:"skin" boil:"skin" json:"skin" toml:"skin" yaml:"skin"`
	Slug                  string      `boiler:"slug" boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	ShieldRechargeRate    int         `boiler:"shield_recharge_rate" boil:"shield_recharge_rate" json:"shield_recharge_rate" toml:"shield_recharge_rate" yaml:"shield_recharge_rate"`
	WeaponHardpoints      int         `boiler:"weapon_hardpoints" boil:"weapon_hardpoints" json:"weapon_hardpoints" toml:"weapon_hardpoints" yaml:"weapon_hardpoints"`
	UtilitySlots          int         `boiler:"utility_slots" boil:"utility_slots" json:"utility_slots" toml:"utility_slots" yaml:"utility_slots"`
	Speed                 int         `boiler:"speed" boil:"speed" json:"speed" toml:"speed" yaml:"speed"`
	MaxHitpoints          int         `boiler:"max_hitpoints" boil:"max_hitpoints" json:"max_hitpoints" toml:"max_hitpoints" yaml:"max_hitpoints"`
	MaxShield             int         `boiler:"max_shield" boil:"max_shield" json:"max_shield" toml:"max_shield" yaml:"max_shield"`
	DeletedAt             null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt             time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt             time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	BlueprintID           string      `boiler:"blueprint_id" boil:"blueprint_id" json:"blueprint_id" toml:"blueprint_id" yaml:"blueprint_id"`
	IsDefault             bool        `boiler:"is_default" boil:"is_default" json:"is_default" toml:"is_default" yaml:"is_default"`
	IsInsured             bool        `boiler:"is_insured" boil:"is_insured" json:"is_insured" toml:"is_insured" yaml:"is_insured"`
	Name                  string      `boiler:"name" boil:"name" json:"name" toml:"name" yaml:"name"`
	GenesisTokenID        null.Int64  `boiler:"genesis_token_id" boil:"genesis_token_id" json:"genesis_token_id,omitempty" toml:"genesis_token_id" yaml:"genesis_token_id,omitempty"`
	LimitedReleaseTokenID null.Int64  `boiler:"limited_release_token_id" boil:"limited_release_token_id" json:"limited_release_token_id,omitempty" toml:"limited_release_token_id" yaml:"limited_release_token_id,omitempty"`
	OwnerID               string      `boiler:"owner_id" boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	PowerCoreSize         string      `boiler:"power_core_size" boil:"power_core_size" json:"power_core_size" toml:"power_core_size" yaml:"power_core_size"`
	Tier                  string      `boiler:"tier" boil:"tier" json:"tier" toml:"tier" yaml:"tier"`
	ChassisSkinID         null.String `boiler:"chassis_skin_id" boil:"chassis_skin_id" json:"chassis_skin_id,omitempty" toml:"chassis_skin_id" yaml:"chassis_skin_id,omitempty"`
	PowerCoreID           null.String `boiler:"power_core_id" boil:"power_core_id" json:"power_core_id,omitempty" toml:"power_core_id" yaml:"power_core_id,omitempty"`
	IntroAnimationID      null.String `boiler:"intro_animation_id" boil:"intro_animation_id" json:"intro_animation_id,omitempty" toml:"intro_animation_id" yaml:"intro_animation_id,omitempty"`
	OutroAnimationID      null.String `boiler:"outro_animation_id" boil:"outro_animation_id" json:"outro_animation_id,omitempty" toml:"outro_animation_id" yaml:"outro_animation_id,omitempty"`

	R *chassisR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L chassisL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChassisColumns = struct {
	ID                    string
	BrandID               string
	Label                 string
	Skin                  string
	Slug                  string
	ShieldRechargeRate    string
	WeaponHardpoints      string
	UtilitySlots          string
	Speed                 string
	MaxHitpoints          string
	MaxShield             string
	DeletedAt             string
	UpdatedAt             string
	CreatedAt             string
	BlueprintID           string
	IsDefault             string
	IsInsured             string
	Name                  string
	GenesisTokenID        string
	LimitedReleaseTokenID string
	OwnerID               string
	PowerCoreSize         string
	Tier                  string
	ChassisSkinID         string
	PowerCoreID           string
	IntroAnimationID      string
	OutroAnimationID      string
}{
	ID:                    "id",
	BrandID:               "brand_id",
	Label:                 "label",
	Skin:                  "skin",
	Slug:                  "slug",
	ShieldRechargeRate:    "shield_recharge_rate",
	WeaponHardpoints:      "weapon_hardpoints",
	UtilitySlots:          "utility_slots",
	Speed:                 "speed",
	MaxHitpoints:          "max_hitpoints",
	MaxShield:             "max_shield",
	DeletedAt:             "deleted_at",
	UpdatedAt:             "updated_at",
	CreatedAt:             "created_at",
	BlueprintID:           "blueprint_id",
	IsDefault:             "is_default",
	IsInsured:             "is_insured",
	Name:                  "name",
	GenesisTokenID:        "genesis_token_id",
	LimitedReleaseTokenID: "limited_release_token_id",
	OwnerID:               "owner_id",
	PowerCoreSize:         "power_core_size",
	Tier:                  "tier",
	ChassisSkinID:         "chassis_skin_id",
	PowerCoreID:           "power_core_id",
	IntroAnimationID:      "intro_animation_id",
	OutroAnimationID:      "outro_animation_id",
}

var ChassisTableColumns = struct {
	ID                    string
	BrandID               string
	Label                 string
	Skin                  string
	Slug                  string
	ShieldRechargeRate    string
	WeaponHardpoints      string
	UtilitySlots          string
	Speed                 string
	MaxHitpoints          string
	MaxShield             string
	DeletedAt             string
	UpdatedAt             string
	CreatedAt             string
	BlueprintID           string
	IsDefault             string
	IsInsured             string
	Name                  string
	GenesisTokenID        string
	LimitedReleaseTokenID string
	OwnerID               string
	PowerCoreSize         string
	Tier                  string
	ChassisSkinID         string
	PowerCoreID           string
	IntroAnimationID      string
	OutroAnimationID      string
}{
	ID:                    "chassis.id",
	BrandID:               "chassis.brand_id",
	Label:                 "chassis.label",
	Skin:                  "chassis.skin",
	Slug:                  "chassis.slug",
	ShieldRechargeRate:    "chassis.shield_recharge_rate",
	WeaponHardpoints:      "chassis.weapon_hardpoints",
	UtilitySlots:          "chassis.utility_slots",
	Speed:                 "chassis.speed",
	MaxHitpoints:          "chassis.max_hitpoints",
	MaxShield:             "chassis.max_shield",
	DeletedAt:             "chassis.deleted_at",
	UpdatedAt:             "chassis.updated_at",
	CreatedAt:             "chassis.created_at",
	BlueprintID:           "chassis.blueprint_id",
	IsDefault:             "chassis.is_default",
	IsInsured:             "chassis.is_insured",
	Name:                  "chassis.name",
	GenesisTokenID:        "chassis.genesis_token_id",
	LimitedReleaseTokenID: "chassis.limited_release_token_id",
	OwnerID:               "chassis.owner_id",
	PowerCoreSize:         "chassis.power_core_size",
	Tier:                  "chassis.tier",
	ChassisSkinID:         "chassis.chassis_skin_id",
	PowerCoreID:           "chassis.power_core_id",
	IntroAnimationID:      "chassis.intro_animation_id",
	OutroAnimationID:      "chassis.outro_animation_id",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ChassisWhere = struct {
	ID                    whereHelperstring
	BrandID               whereHelperstring
	Label                 whereHelperstring
	Skin                  whereHelperstring
	Slug                  whereHelperstring
	ShieldRechargeRate    whereHelperint
	WeaponHardpoints      whereHelperint
	UtilitySlots          whereHelperint
	Speed                 whereHelperint
	MaxHitpoints          whereHelperint
	MaxShield             whereHelperint
	DeletedAt             whereHelpernull_Time
	UpdatedAt             whereHelpertime_Time
	CreatedAt             whereHelpertime_Time
	BlueprintID           whereHelperstring
	IsDefault             whereHelperbool
	IsInsured             whereHelperbool
	Name                  whereHelperstring
	GenesisTokenID        whereHelpernull_Int64
	LimitedReleaseTokenID whereHelpernull_Int64
	OwnerID               whereHelperstring
	PowerCoreSize         whereHelperstring
	Tier                  whereHelperstring
	ChassisSkinID         whereHelpernull_String
	PowerCoreID           whereHelpernull_String
	IntroAnimationID      whereHelpernull_String
	OutroAnimationID      whereHelpernull_String
}{
	ID:                    whereHelperstring{field: "\"chassis\".\"id\""},
	BrandID:               whereHelperstring{field: "\"chassis\".\"brand_id\""},
	Label:                 whereHelperstring{field: "\"chassis\".\"label\""},
	Skin:                  whereHelperstring{field: "\"chassis\".\"skin\""},
	Slug:                  whereHelperstring{field: "\"chassis\".\"slug\""},
	ShieldRechargeRate:    whereHelperint{field: "\"chassis\".\"shield_recharge_rate\""},
	WeaponHardpoints:      whereHelperint{field: "\"chassis\".\"weapon_hardpoints\""},
	UtilitySlots:          whereHelperint{field: "\"chassis\".\"utility_slots\""},
	Speed:                 whereHelperint{field: "\"chassis\".\"speed\""},
	MaxHitpoints:          whereHelperint{field: "\"chassis\".\"max_hitpoints\""},
	MaxShield:             whereHelperint{field: "\"chassis\".\"max_shield\""},
	DeletedAt:             whereHelpernull_Time{field: "\"chassis\".\"deleted_at\""},
	UpdatedAt:             whereHelpertime_Time{field: "\"chassis\".\"updated_at\""},
	CreatedAt:             whereHelpertime_Time{field: "\"chassis\".\"created_at\""},
	BlueprintID:           whereHelperstring{field: "\"chassis\".\"blueprint_id\""},
	IsDefault:             whereHelperbool{field: "\"chassis\".\"is_default\""},
	IsInsured:             whereHelperbool{field: "\"chassis\".\"is_insured\""},
	Name:                  whereHelperstring{field: "\"chassis\".\"name\""},
	GenesisTokenID:        whereHelpernull_Int64{field: "\"chassis\".\"genesis_token_id\""},
	LimitedReleaseTokenID: whereHelpernull_Int64{field: "\"chassis\".\"limited_release_token_id\""},
	OwnerID:               whereHelperstring{field: "\"chassis\".\"owner_id\""},
	PowerCoreSize:         whereHelperstring{field: "\"chassis\".\"power_core_size\""},
	Tier:                  whereHelperstring{field: "\"chassis\".\"tier\""},
	ChassisSkinID:         whereHelpernull_String{field: "\"chassis\".\"chassis_skin_id\""},
	PowerCoreID:           whereHelpernull_String{field: "\"chassis\".\"power_core_id\""},
	IntroAnimationID:      whereHelpernull_String{field: "\"chassis\".\"intro_animation_id\""},
	OutroAnimationID:      whereHelpernull_String{field: "\"chassis\".\"outro_animation_id\""},
}

// ChassisRels is where relationship names are stored.
var ChassisRels = struct {
	Blueprint                   string
	Brand                       string
	ChassisSkin                 string
	IntroAnimation              string
	OutroAnimation              string
	Owner                       string
	PowerCore                   string
	Mech                        string
	EquippedOnChassisAnimations string
	ChassisModules              string
	EquippedOnChassisSkins      string
	ChassisWeapons              string
	EquippedOnPowerCores        string
	EquippedOnWeaponSkins       string
	EquippedOnWeapons           string
}{
	Blueprint:                   "Blueprint",
	Brand:                       "Brand",
	ChassisSkin:                 "ChassisSkin",
	IntroAnimation:              "IntroAnimation",
	OutroAnimation:              "OutroAnimation",
	Owner:                       "Owner",
	PowerCore:                   "PowerCore",
	Mech:                        "Mech",
	EquippedOnChassisAnimations: "EquippedOnChassisAnimations",
	ChassisModules:              "ChassisModules",
	EquippedOnChassisSkins:      "EquippedOnChassisSkins",
	ChassisWeapons:              "ChassisWeapons",
	EquippedOnPowerCores:        "EquippedOnPowerCores",
	EquippedOnWeaponSkins:       "EquippedOnWeaponSkins",
	EquippedOnWeapons:           "EquippedOnWeapons",
}

// chassisR is where relationships are stored.
type chassisR struct {
	Blueprint                   *BlueprintMech        `boiler:"Blueprint" boil:"Blueprint" json:"Blueprint" toml:"Blueprint" yaml:"Blueprint"`
	Brand                       *Brand                `boiler:"Brand" boil:"Brand" json:"Brand" toml:"Brand" yaml:"Brand"`
	ChassisSkin                 *ChassisSkin          `boiler:"ChassisSkin" boil:"ChassisSkin" json:"ChassisSkin" toml:"ChassisSkin" yaml:"ChassisSkin"`
	IntroAnimation              *ChassisAnimation     `boiler:"IntroAnimation" boil:"IntroAnimation" json:"IntroAnimation" toml:"IntroAnimation" yaml:"IntroAnimation"`
	OutroAnimation              *ChassisAnimation     `boiler:"OutroAnimation" boil:"OutroAnimation" json:"OutroAnimation" toml:"OutroAnimation" yaml:"OutroAnimation"`
	Owner                       *Player               `boiler:"Owner" boil:"Owner" json:"Owner" toml:"Owner" yaml:"Owner"`
	PowerCore                   *PowerCore            `boiler:"PowerCore" boil:"PowerCore" json:"PowerCore" toml:"PowerCore" yaml:"PowerCore"`
	Mech                        *Mech                 `boiler:"Mech" boil:"Mech" json:"Mech" toml:"Mech" yaml:"Mech"`
	EquippedOnChassisAnimations ChassisAnimationSlice `boiler:"EquippedOnChassisAnimations" boil:"EquippedOnChassisAnimations" json:"EquippedOnChassisAnimations" toml:"EquippedOnChassisAnimations" yaml:"EquippedOnChassisAnimations"`
	ChassisModules              ChassisModuleSlice    `boiler:"ChassisModules" boil:"ChassisModules" json:"ChassisModules" toml:"ChassisModules" yaml:"ChassisModules"`
	EquippedOnChassisSkins      ChassisSkinSlice      `boiler:"EquippedOnChassisSkins" boil:"EquippedOnChassisSkins" json:"EquippedOnChassisSkins" toml:"EquippedOnChassisSkins" yaml:"EquippedOnChassisSkins"`
	ChassisWeapons              ChassisWeaponSlice    `boiler:"ChassisWeapons" boil:"ChassisWeapons" json:"ChassisWeapons" toml:"ChassisWeapons" yaml:"ChassisWeapons"`
	EquippedOnPowerCores        PowerCoreSlice        `boiler:"EquippedOnPowerCores" boil:"EquippedOnPowerCores" json:"EquippedOnPowerCores" toml:"EquippedOnPowerCores" yaml:"EquippedOnPowerCores"`
	EquippedOnWeaponSkins       WeaponSkinSlice       `boiler:"EquippedOnWeaponSkins" boil:"EquippedOnWeaponSkins" json:"EquippedOnWeaponSkins" toml:"EquippedOnWeaponSkins" yaml:"EquippedOnWeaponSkins"`
	EquippedOnWeapons           WeaponSlice           `boiler:"EquippedOnWeapons" boil:"EquippedOnWeapons" json:"EquippedOnWeapons" toml:"EquippedOnWeapons" yaml:"EquippedOnWeapons"`
}

// NewStruct creates a new relationship struct
func (*chassisR) NewStruct() *chassisR {
	return &chassisR{}
}

// chassisL is where Load methods for each relationship are stored.
type chassisL struct{}

var (
	chassisAllColumns            = []string{"id", "brand_id", "label", "skin", "slug", "shield_recharge_rate", "weapon_hardpoints", "utility_slots", "speed", "max_hitpoints", "max_shield", "deleted_at", "updated_at", "created_at", "blueprint_id", "is_default", "is_insured", "name", "genesis_token_id", "limited_release_token_id", "owner_id", "power_core_size", "tier", "chassis_skin_id", "power_core_id", "intro_animation_id", "outro_animation_id"}
	chassisColumnsWithoutDefault = []string{"brand_id", "label", "skin", "slug", "shield_recharge_rate", "weapon_hardpoints", "utility_slots", "speed", "max_hitpoints", "max_shield", "blueprint_id", "owner_id"}
	chassisColumnsWithDefault    = []string{"id", "deleted_at", "updated_at", "created_at", "is_default", "is_insured", "name", "genesis_token_id", "limited_release_token_id", "power_core_size", "tier", "chassis_skin_id", "power_core_id", "intro_animation_id", "outro_animation_id"}
	chassisPrimaryKeyColumns     = []string{"id"}
	chassisGeneratedColumns      = []string{}
)

type (
	// ChassisSlice is an alias for a slice of pointers to Chassis.
	// This should almost always be used instead of []Chassis.
	ChassisSlice []*Chassis
	// ChassisHook is the signature for custom Chassis hook methods
	ChassisHook func(boil.Executor, *Chassis) error

	chassisQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chassisType                 = reflect.TypeOf(&Chassis{})
	chassisMapping              = queries.MakeStructMapping(chassisType)
	chassisPrimaryKeyMapping, _ = queries.BindMapping(chassisType, chassisMapping, chassisPrimaryKeyColumns)
	chassisInsertCacheMut       sync.RWMutex
	chassisInsertCache          = make(map[string]insertCache)
	chassisUpdateCacheMut       sync.RWMutex
	chassisUpdateCache          = make(map[string]updateCache)
	chassisUpsertCacheMut       sync.RWMutex
	chassisUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var chassisAfterSelectHooks []ChassisHook

var chassisBeforeInsertHooks []ChassisHook
var chassisAfterInsertHooks []ChassisHook

var chassisBeforeUpdateHooks []ChassisHook
var chassisAfterUpdateHooks []ChassisHook

var chassisBeforeDeleteHooks []ChassisHook
var chassisAfterDeleteHooks []ChassisHook

var chassisBeforeUpsertHooks []ChassisHook
var chassisAfterUpsertHooks []ChassisHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Chassis) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range chassisAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Chassis) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range chassisBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Chassis) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range chassisAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Chassis) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range chassisBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Chassis) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range chassisAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Chassis) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range chassisBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Chassis) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range chassisAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Chassis) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range chassisBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Chassis) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range chassisAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChassisHook registers your hook function for all future operations.
func AddChassisHook(hookPoint boil.HookPoint, chassisHook ChassisHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		chassisAfterSelectHooks = append(chassisAfterSelectHooks, chassisHook)
	case boil.BeforeInsertHook:
		chassisBeforeInsertHooks = append(chassisBeforeInsertHooks, chassisHook)
	case boil.AfterInsertHook:
		chassisAfterInsertHooks = append(chassisAfterInsertHooks, chassisHook)
	case boil.BeforeUpdateHook:
		chassisBeforeUpdateHooks = append(chassisBeforeUpdateHooks, chassisHook)
	case boil.AfterUpdateHook:
		chassisAfterUpdateHooks = append(chassisAfterUpdateHooks, chassisHook)
	case boil.BeforeDeleteHook:
		chassisBeforeDeleteHooks = append(chassisBeforeDeleteHooks, chassisHook)
	case boil.AfterDeleteHook:
		chassisAfterDeleteHooks = append(chassisAfterDeleteHooks, chassisHook)
	case boil.BeforeUpsertHook:
		chassisBeforeUpsertHooks = append(chassisBeforeUpsertHooks, chassisHook)
	case boil.AfterUpsertHook:
		chassisAfterUpsertHooks = append(chassisAfterUpsertHooks, chassisHook)
	}
}

// One returns a single chassis record from the query.
func (q chassisQuery) One(exec boil.Executor) (*Chassis, error) {
	o := &Chassis{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for chassis")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Chassis records from the query.
func (q chassisQuery) All(exec boil.Executor) (ChassisSlice, error) {
	var o []*Chassis

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Chassis slice")
	}

	if len(chassisAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Chassis records in the query.
func (q chassisQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count chassis rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q chassisQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if chassis exists")
	}

	return count > 0, nil
}

// Blueprint pointed to by the foreign key.
func (o *Chassis) Blueprint(mods ...qm.QueryMod) blueprintMechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BlueprintID),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintMechs(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_mechs\"")

	return query
}

// Brand pointed to by the foreign key.
func (o *Chassis) Brand(mods ...qm.QueryMod) brandQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BrandID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Brands(queryMods...)
	queries.SetFrom(query.Query, "\"brands\"")

	return query
}

// ChassisSkin pointed to by the foreign key.
func (o *Chassis) ChassisSkin(mods ...qm.QueryMod) chassisSkinQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ChassisSkinID),
	}

	queryMods = append(queryMods, mods...)

	query := ChassisSkins(queryMods...)
	queries.SetFrom(query.Query, "\"chassis_skin\"")

	return query
}

// IntroAnimation pointed to by the foreign key.
func (o *Chassis) IntroAnimation(mods ...qm.QueryMod) chassisAnimationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IntroAnimationID),
	}

	queryMods = append(queryMods, mods...)

	query := ChassisAnimations(queryMods...)
	queries.SetFrom(query.Query, "\"chassis_animation\"")

	return query
}

// OutroAnimation pointed to by the foreign key.
func (o *Chassis) OutroAnimation(mods ...qm.QueryMod) chassisAnimationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OutroAnimationID),
	}

	queryMods = append(queryMods, mods...)

	query := ChassisAnimations(queryMods...)
	queries.SetFrom(query.Query, "\"chassis_animation\"")

	return query
}

// Owner pointed to by the foreign key.
func (o *Chassis) Owner(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OwnerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// PowerCore pointed to by the foreign key.
func (o *Chassis) PowerCore(mods ...qm.QueryMod) powerCoreQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PowerCoreID),
	}

	queryMods = append(queryMods, mods...)

	query := PowerCores(queryMods...)
	queries.SetFrom(query.Query, "\"power_cores\"")

	return query
}

// Mech pointed to by the foreign key.
func (o *Chassis) Mech(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"chassis_id\" = ?", o.ID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// EquippedOnChassisAnimations retrieves all the chassis_animation's ChassisAnimations with an executor via equipped_on column.
func (o *Chassis) EquippedOnChassisAnimations(mods ...qm.QueryMod) chassisAnimationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chassis_animation\".\"equipped_on\"=?", o.ID),
	)

	query := ChassisAnimations(queryMods...)
	queries.SetFrom(query.Query, "\"chassis_animation\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"chassis_animation\".*"})
	}

	return query
}

// ChassisModules retrieves all the chassis_module's ChassisModules with an executor.
func (o *Chassis) ChassisModules(mods ...qm.QueryMod) chassisModuleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chassis_modules\".\"chassis_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"chassis_modules\".\"deleted_at\""),
	)

	query := ChassisModules(queryMods...)
	queries.SetFrom(query.Query, "\"chassis_modules\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"chassis_modules\".*"})
	}

	return query
}

// EquippedOnChassisSkins retrieves all the chassis_skin's ChassisSkins with an executor via equipped_on column.
func (o *Chassis) EquippedOnChassisSkins(mods ...qm.QueryMod) chassisSkinQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chassis_skin\".\"equipped_on\"=?", o.ID),
	)

	query := ChassisSkins(queryMods...)
	queries.SetFrom(query.Query, "\"chassis_skin\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"chassis_skin\".*"})
	}

	return query
}

// ChassisWeapons retrieves all the chassis_weapon's ChassisWeapons with an executor.
func (o *Chassis) ChassisWeapons(mods ...qm.QueryMod) chassisWeaponQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chassis_weapons\".\"chassis_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"chassis_weapons\".\"deleted_at\""),
	)

	query := ChassisWeapons(queryMods...)
	queries.SetFrom(query.Query, "\"chassis_weapons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"chassis_weapons\".*"})
	}

	return query
}

// EquippedOnPowerCores retrieves all the power_core's PowerCores with an executor via equipped_on column.
func (o *Chassis) EquippedOnPowerCores(mods ...qm.QueryMod) powerCoreQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"power_cores\".\"equipped_on\"=?", o.ID),
	)

	query := PowerCores(queryMods...)
	queries.SetFrom(query.Query, "\"power_cores\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"power_cores\".*"})
	}

	return query
}

// EquippedOnWeaponSkins retrieves all the weapon_skin's WeaponSkins with an executor via equipped_on column.
func (o *Chassis) EquippedOnWeaponSkins(mods ...qm.QueryMod) weaponSkinQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"weapon_skin\".\"equipped_on\"=?", o.ID),
	)

	query := WeaponSkins(queryMods...)
	queries.SetFrom(query.Query, "\"weapon_skin\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"weapon_skin\".*"})
	}

	return query
}

// EquippedOnWeapons retrieves all the weapon's Weapons with an executor via equipped_on column.
func (o *Chassis) EquippedOnWeapons(mods ...qm.QueryMod) weaponQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"weapons\".\"equipped_on\"=?", o.ID),
		qmhelper.WhereIsNull("\"weapons\".\"deleted_at\""),
	)

	query := Weapons(queryMods...)
	queries.SetFrom(query.Query, "\"weapons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"weapons\".*"})
	}

	return query
}

// LoadBlueprint allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chassisL) LoadBlueprint(e boil.Executor, singular bool, maybeChassis interface{}, mods queries.Applicator) error {
	var slice []*Chassis
	var object *Chassis

	if singular {
		object = maybeChassis.(*Chassis)
	} else {
		slice = *maybeChassis.(*[]*Chassis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chassisR{}
		}
		args = append(args, object.BlueprintID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chassisR{}
			}

			for _, a := range args {
				if a == obj.BlueprintID {
					continue Outer
				}
			}

			args = append(args, obj.BlueprintID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_mechs`),
		qm.WhereIn(`blueprint_mechs.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintMech")
	}

	var resultSlice []*BlueprintMech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintMech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_mechs")
	}

	if len(chassisAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Blueprint = foreign
		if foreign.R == nil {
			foreign.R = &blueprintMechR{}
		}
		foreign.R.BlueprintChasses = append(foreign.R.BlueprintChasses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlueprintID == foreign.ID {
				local.R.Blueprint = foreign
				if foreign.R == nil {
					foreign.R = &blueprintMechR{}
				}
				foreign.R.BlueprintChasses = append(foreign.R.BlueprintChasses, local)
				break
			}
		}
	}

	return nil
}

// LoadBrand allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chassisL) LoadBrand(e boil.Executor, singular bool, maybeChassis interface{}, mods queries.Applicator) error {
	var slice []*Chassis
	var object *Chassis

	if singular {
		object = maybeChassis.(*Chassis)
	} else {
		slice = *maybeChassis.(*[]*Chassis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chassisR{}
		}
		args = append(args, object.BrandID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chassisR{}
			}

			for _, a := range args {
				if a == obj.BrandID {
					continue Outer
				}
			}

			args = append(args, obj.BrandID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`brands`),
		qm.WhereIn(`brands.id in ?`, args...),
		qmhelper.WhereIsNull(`brands.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Brand")
	}

	var resultSlice []*Brand
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Brand")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for brands")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for brands")
	}

	if len(chassisAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Brand = foreign
		if foreign.R == nil {
			foreign.R = &brandR{}
		}
		foreign.R.Chasses = append(foreign.R.Chasses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BrandID == foreign.ID {
				local.R.Brand = foreign
				if foreign.R == nil {
					foreign.R = &brandR{}
				}
				foreign.R.Chasses = append(foreign.R.Chasses, local)
				break
			}
		}
	}

	return nil
}

// LoadChassisSkin allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chassisL) LoadChassisSkin(e boil.Executor, singular bool, maybeChassis interface{}, mods queries.Applicator) error {
	var slice []*Chassis
	var object *Chassis

	if singular {
		object = maybeChassis.(*Chassis)
	} else {
		slice = *maybeChassis.(*[]*Chassis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chassisR{}
		}
		if !queries.IsNil(object.ChassisSkinID) {
			args = append(args, object.ChassisSkinID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chassisR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ChassisSkinID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ChassisSkinID) {
				args = append(args, obj.ChassisSkinID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chassis_skin`),
		qm.WhereIn(`chassis_skin.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ChassisSkin")
	}

	var resultSlice []*ChassisSkin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ChassisSkin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for chassis_skin")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chassis_skin")
	}

	if len(chassisAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChassisSkin = foreign
		if foreign.R == nil {
			foreign.R = &chassisSkinR{}
		}
		foreign.R.Chasses = append(foreign.R.Chasses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ChassisSkinID, foreign.ID) {
				local.R.ChassisSkin = foreign
				if foreign.R == nil {
					foreign.R = &chassisSkinR{}
				}
				foreign.R.Chasses = append(foreign.R.Chasses, local)
				break
			}
		}
	}

	return nil
}

// LoadIntroAnimation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chassisL) LoadIntroAnimation(e boil.Executor, singular bool, maybeChassis interface{}, mods queries.Applicator) error {
	var slice []*Chassis
	var object *Chassis

	if singular {
		object = maybeChassis.(*Chassis)
	} else {
		slice = *maybeChassis.(*[]*Chassis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chassisR{}
		}
		if !queries.IsNil(object.IntroAnimationID) {
			args = append(args, object.IntroAnimationID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chassisR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.IntroAnimationID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.IntroAnimationID) {
				args = append(args, obj.IntroAnimationID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chassis_animation`),
		qm.WhereIn(`chassis_animation.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ChassisAnimation")
	}

	var resultSlice []*ChassisAnimation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ChassisAnimation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for chassis_animation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chassis_animation")
	}

	if len(chassisAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IntroAnimation = foreign
		if foreign.R == nil {
			foreign.R = &chassisAnimationR{}
		}
		foreign.R.IntroAnimationChasses = append(foreign.R.IntroAnimationChasses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.IntroAnimationID, foreign.ID) {
				local.R.IntroAnimation = foreign
				if foreign.R == nil {
					foreign.R = &chassisAnimationR{}
				}
				foreign.R.IntroAnimationChasses = append(foreign.R.IntroAnimationChasses, local)
				break
			}
		}
	}

	return nil
}

// LoadOutroAnimation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chassisL) LoadOutroAnimation(e boil.Executor, singular bool, maybeChassis interface{}, mods queries.Applicator) error {
	var slice []*Chassis
	var object *Chassis

	if singular {
		object = maybeChassis.(*Chassis)
	} else {
		slice = *maybeChassis.(*[]*Chassis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chassisR{}
		}
		if !queries.IsNil(object.OutroAnimationID) {
			args = append(args, object.OutroAnimationID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chassisR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OutroAnimationID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OutroAnimationID) {
				args = append(args, obj.OutroAnimationID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chassis_animation`),
		qm.WhereIn(`chassis_animation.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ChassisAnimation")
	}

	var resultSlice []*ChassisAnimation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ChassisAnimation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for chassis_animation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chassis_animation")
	}

	if len(chassisAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OutroAnimation = foreign
		if foreign.R == nil {
			foreign.R = &chassisAnimationR{}
		}
		foreign.R.OutroAnimationChasses = append(foreign.R.OutroAnimationChasses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OutroAnimationID, foreign.ID) {
				local.R.OutroAnimation = foreign
				if foreign.R == nil {
					foreign.R = &chassisAnimationR{}
				}
				foreign.R.OutroAnimationChasses = append(foreign.R.OutroAnimationChasses, local)
				break
			}
		}
	}

	return nil
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chassisL) LoadOwner(e boil.Executor, singular bool, maybeChassis interface{}, mods queries.Applicator) error {
	var slice []*Chassis
	var object *Chassis

	if singular {
		object = maybeChassis.(*Chassis)
	} else {
		slice = *maybeChassis.(*[]*Chassis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chassisR{}
		}
		args = append(args, object.OwnerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chassisR{}
			}

			for _, a := range args {
				if a == obj.OwnerID {
					continue Outer
				}
			}

			args = append(args, obj.OwnerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(chassisAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Owner = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.OwnerChasses = append(foreign.R.OwnerChasses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerID == foreign.ID {
				local.R.Owner = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.OwnerChasses = append(foreign.R.OwnerChasses, local)
				break
			}
		}
	}

	return nil
}

// LoadPowerCore allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chassisL) LoadPowerCore(e boil.Executor, singular bool, maybeChassis interface{}, mods queries.Applicator) error {
	var slice []*Chassis
	var object *Chassis

	if singular {
		object = maybeChassis.(*Chassis)
	} else {
		slice = *maybeChassis.(*[]*Chassis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chassisR{}
		}
		if !queries.IsNil(object.PowerCoreID) {
			args = append(args, object.PowerCoreID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chassisR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PowerCoreID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PowerCoreID) {
				args = append(args, obj.PowerCoreID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`power_cores`),
		qm.WhereIn(`power_cores.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PowerCore")
	}

	var resultSlice []*PowerCore
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PowerCore")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for power_cores")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for power_cores")
	}

	if len(chassisAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PowerCore = foreign
		if foreign.R == nil {
			foreign.R = &powerCoreR{}
		}
		foreign.R.Chasses = append(foreign.R.Chasses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PowerCoreID, foreign.ID) {
				local.R.PowerCore = foreign
				if foreign.R == nil {
					foreign.R = &powerCoreR{}
				}
				foreign.R.Chasses = append(foreign.R.Chasses, local)
				break
			}
		}
	}

	return nil
}

// LoadMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (chassisL) LoadMech(e boil.Executor, singular bool, maybeChassis interface{}, mods queries.Applicator) error {
	var slice []*Chassis
	var object *Chassis

	if singular {
		object = maybeChassis.(*Chassis)
	} else {
		slice = *maybeChassis.(*[]*Chassis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chassisR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chassisR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.chassis_id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(chassisAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Mech = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.Chassis = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.ChassisID {
				local.R.Mech = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.Chassis = local
				break
			}
		}
	}

	return nil
}

// LoadEquippedOnChassisAnimations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chassisL) LoadEquippedOnChassisAnimations(e boil.Executor, singular bool, maybeChassis interface{}, mods queries.Applicator) error {
	var slice []*Chassis
	var object *Chassis

	if singular {
		object = maybeChassis.(*Chassis)
	} else {
		slice = *maybeChassis.(*[]*Chassis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chassisR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chassisR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chassis_animation`),
		qm.WhereIn(`chassis_animation.equipped_on in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chassis_animation")
	}

	var resultSlice []*ChassisAnimation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chassis_animation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chassis_animation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chassis_animation")
	}

	if len(chassisAnimationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EquippedOnChassisAnimations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chassisAnimationR{}
			}
			foreign.R.EquippedOnChassis = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.EquippedOn) {
				local.R.EquippedOnChassisAnimations = append(local.R.EquippedOnChassisAnimations, foreign)
				if foreign.R == nil {
					foreign.R = &chassisAnimationR{}
				}
				foreign.R.EquippedOnChassis = local
				break
			}
		}
	}

	return nil
}

// LoadChassisModules allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chassisL) LoadChassisModules(e boil.Executor, singular bool, maybeChassis interface{}, mods queries.Applicator) error {
	var slice []*Chassis
	var object *Chassis

	if singular {
		object = maybeChassis.(*Chassis)
	} else {
		slice = *maybeChassis.(*[]*Chassis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chassisR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chassisR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chassis_modules`),
		qm.WhereIn(`chassis_modules.chassis_id in ?`, args...),
		qmhelper.WhereIsNull(`chassis_modules.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chassis_modules")
	}

	var resultSlice []*ChassisModule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chassis_modules")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chassis_modules")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chassis_modules")
	}

	if len(chassisModuleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChassisModules = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chassisModuleR{}
			}
			foreign.R.Chassis = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChassisID {
				local.R.ChassisModules = append(local.R.ChassisModules, foreign)
				if foreign.R == nil {
					foreign.R = &chassisModuleR{}
				}
				foreign.R.Chassis = local
				break
			}
		}
	}

	return nil
}

// LoadEquippedOnChassisSkins allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chassisL) LoadEquippedOnChassisSkins(e boil.Executor, singular bool, maybeChassis interface{}, mods queries.Applicator) error {
	var slice []*Chassis
	var object *Chassis

	if singular {
		object = maybeChassis.(*Chassis)
	} else {
		slice = *maybeChassis.(*[]*Chassis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chassisR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chassisR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chassis_skin`),
		qm.WhereIn(`chassis_skin.equipped_on in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chassis_skin")
	}

	var resultSlice []*ChassisSkin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chassis_skin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chassis_skin")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chassis_skin")
	}

	if len(chassisSkinAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EquippedOnChassisSkins = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chassisSkinR{}
			}
			foreign.R.EquippedOnChassis = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.EquippedOn) {
				local.R.EquippedOnChassisSkins = append(local.R.EquippedOnChassisSkins, foreign)
				if foreign.R == nil {
					foreign.R = &chassisSkinR{}
				}
				foreign.R.EquippedOnChassis = local
				break
			}
		}
	}

	return nil
}

// LoadChassisWeapons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chassisL) LoadChassisWeapons(e boil.Executor, singular bool, maybeChassis interface{}, mods queries.Applicator) error {
	var slice []*Chassis
	var object *Chassis

	if singular {
		object = maybeChassis.(*Chassis)
	} else {
		slice = *maybeChassis.(*[]*Chassis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chassisR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chassisR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chassis_weapons`),
		qm.WhereIn(`chassis_weapons.chassis_id in ?`, args...),
		qmhelper.WhereIsNull(`chassis_weapons.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chassis_weapons")
	}

	var resultSlice []*ChassisWeapon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chassis_weapons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chassis_weapons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chassis_weapons")
	}

	if len(chassisWeaponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChassisWeapons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chassisWeaponR{}
			}
			foreign.R.Chassis = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChassisID {
				local.R.ChassisWeapons = append(local.R.ChassisWeapons, foreign)
				if foreign.R == nil {
					foreign.R = &chassisWeaponR{}
				}
				foreign.R.Chassis = local
				break
			}
		}
	}

	return nil
}

// LoadEquippedOnPowerCores allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chassisL) LoadEquippedOnPowerCores(e boil.Executor, singular bool, maybeChassis interface{}, mods queries.Applicator) error {
	var slice []*Chassis
	var object *Chassis

	if singular {
		object = maybeChassis.(*Chassis)
	} else {
		slice = *maybeChassis.(*[]*Chassis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chassisR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chassisR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`power_cores`),
		qm.WhereIn(`power_cores.equipped_on in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load power_cores")
	}

	var resultSlice []*PowerCore
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice power_cores")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on power_cores")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for power_cores")
	}

	if len(powerCoreAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EquippedOnPowerCores = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &powerCoreR{}
			}
			foreign.R.EquippedOnChassis = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.EquippedOn) {
				local.R.EquippedOnPowerCores = append(local.R.EquippedOnPowerCores, foreign)
				if foreign.R == nil {
					foreign.R = &powerCoreR{}
				}
				foreign.R.EquippedOnChassis = local
				break
			}
		}
	}

	return nil
}

// LoadEquippedOnWeaponSkins allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chassisL) LoadEquippedOnWeaponSkins(e boil.Executor, singular bool, maybeChassis interface{}, mods queries.Applicator) error {
	var slice []*Chassis
	var object *Chassis

	if singular {
		object = maybeChassis.(*Chassis)
	} else {
		slice = *maybeChassis.(*[]*Chassis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chassisR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chassisR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`weapon_skin`),
		qm.WhereIn(`weapon_skin.equipped_on in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load weapon_skin")
	}

	var resultSlice []*WeaponSkin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice weapon_skin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on weapon_skin")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for weapon_skin")
	}

	if len(weaponSkinAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EquippedOnWeaponSkins = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &weaponSkinR{}
			}
			foreign.R.EquippedOnChassis = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.EquippedOn) {
				local.R.EquippedOnWeaponSkins = append(local.R.EquippedOnWeaponSkins, foreign)
				if foreign.R == nil {
					foreign.R = &weaponSkinR{}
				}
				foreign.R.EquippedOnChassis = local
				break
			}
		}
	}

	return nil
}

// LoadEquippedOnWeapons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chassisL) LoadEquippedOnWeapons(e boil.Executor, singular bool, maybeChassis interface{}, mods queries.Applicator) error {
	var slice []*Chassis
	var object *Chassis

	if singular {
		object = maybeChassis.(*Chassis)
	} else {
		slice = *maybeChassis.(*[]*Chassis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chassisR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chassisR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`weapons`),
		qm.WhereIn(`weapons.equipped_on in ?`, args...),
		qmhelper.WhereIsNull(`weapons.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load weapons")
	}

	var resultSlice []*Weapon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice weapons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on weapons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for weapons")
	}

	if len(weaponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EquippedOnWeapons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &weaponR{}
			}
			foreign.R.EquippedOnChassis = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.EquippedOn) {
				local.R.EquippedOnWeapons = append(local.R.EquippedOnWeapons, foreign)
				if foreign.R == nil {
					foreign.R = &weaponR{}
				}
				foreign.R.EquippedOnChassis = local
				break
			}
		}
	}

	return nil
}

// SetBlueprint of the chassis to the related item.
// Sets o.R.Blueprint to related.
// Adds o to related.R.BlueprintChasses.
func (o *Chassis) SetBlueprint(exec boil.Executor, insert bool, related *BlueprintMech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chassis\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_id"}),
		strmangle.WhereClause("\"", "\"", 2, chassisPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlueprintID = related.ID
	if o.R == nil {
		o.R = &chassisR{
			Blueprint: related,
		}
	} else {
		o.R.Blueprint = related
	}

	if related.R == nil {
		related.R = &blueprintMechR{
			BlueprintChasses: ChassisSlice{o},
		}
	} else {
		related.R.BlueprintChasses = append(related.R.BlueprintChasses, o)
	}

	return nil
}

// SetBrand of the chassis to the related item.
// Sets o.R.Brand to related.
// Adds o to related.R.Chasses.
func (o *Chassis) SetBrand(exec boil.Executor, insert bool, related *Brand) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chassis\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"brand_id"}),
		strmangle.WhereClause("\"", "\"", 2, chassisPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BrandID = related.ID
	if o.R == nil {
		o.R = &chassisR{
			Brand: related,
		}
	} else {
		o.R.Brand = related
	}

	if related.R == nil {
		related.R = &brandR{
			Chasses: ChassisSlice{o},
		}
	} else {
		related.R.Chasses = append(related.R.Chasses, o)
	}

	return nil
}

// SetChassisSkin of the chassis to the related item.
// Sets o.R.ChassisSkin to related.
// Adds o to related.R.Chasses.
func (o *Chassis) SetChassisSkin(exec boil.Executor, insert bool, related *ChassisSkin) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chassis\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"chassis_skin_id"}),
		strmangle.WhereClause("\"", "\"", 2, chassisPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ChassisSkinID, related.ID)
	if o.R == nil {
		o.R = &chassisR{
			ChassisSkin: related,
		}
	} else {
		o.R.ChassisSkin = related
	}

	if related.R == nil {
		related.R = &chassisSkinR{
			Chasses: ChassisSlice{o},
		}
	} else {
		related.R.Chasses = append(related.R.Chasses, o)
	}

	return nil
}

// RemoveChassisSkin relationship.
// Sets o.R.ChassisSkin to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Chassis) RemoveChassisSkin(exec boil.Executor, related *ChassisSkin) error {
	var err error

	queries.SetScanner(&o.ChassisSkinID, nil)
	if _, err = o.Update(exec, boil.Whitelist("chassis_skin_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ChassisSkin = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Chasses {
		if queries.Equal(o.ChassisSkinID, ri.ChassisSkinID) {
			continue
		}

		ln := len(related.R.Chasses)
		if ln > 1 && i < ln-1 {
			related.R.Chasses[i] = related.R.Chasses[ln-1]
		}
		related.R.Chasses = related.R.Chasses[:ln-1]
		break
	}
	return nil
}

// SetIntroAnimation of the chassis to the related item.
// Sets o.R.IntroAnimation to related.
// Adds o to related.R.IntroAnimationChasses.
func (o *Chassis) SetIntroAnimation(exec boil.Executor, insert bool, related *ChassisAnimation) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chassis\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"intro_animation_id"}),
		strmangle.WhereClause("\"", "\"", 2, chassisPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.IntroAnimationID, related.ID)
	if o.R == nil {
		o.R = &chassisR{
			IntroAnimation: related,
		}
	} else {
		o.R.IntroAnimation = related
	}

	if related.R == nil {
		related.R = &chassisAnimationR{
			IntroAnimationChasses: ChassisSlice{o},
		}
	} else {
		related.R.IntroAnimationChasses = append(related.R.IntroAnimationChasses, o)
	}

	return nil
}

// RemoveIntroAnimation relationship.
// Sets o.R.IntroAnimation to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Chassis) RemoveIntroAnimation(exec boil.Executor, related *ChassisAnimation) error {
	var err error

	queries.SetScanner(&o.IntroAnimationID, nil)
	if _, err = o.Update(exec, boil.Whitelist("intro_animation_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.IntroAnimation = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.IntroAnimationChasses {
		if queries.Equal(o.IntroAnimationID, ri.IntroAnimationID) {
			continue
		}

		ln := len(related.R.IntroAnimationChasses)
		if ln > 1 && i < ln-1 {
			related.R.IntroAnimationChasses[i] = related.R.IntroAnimationChasses[ln-1]
		}
		related.R.IntroAnimationChasses = related.R.IntroAnimationChasses[:ln-1]
		break
	}
	return nil
}

// SetOutroAnimation of the chassis to the related item.
// Sets o.R.OutroAnimation to related.
// Adds o to related.R.OutroAnimationChasses.
func (o *Chassis) SetOutroAnimation(exec boil.Executor, insert bool, related *ChassisAnimation) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chassis\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"outro_animation_id"}),
		strmangle.WhereClause("\"", "\"", 2, chassisPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OutroAnimationID, related.ID)
	if o.R == nil {
		o.R = &chassisR{
			OutroAnimation: related,
		}
	} else {
		o.R.OutroAnimation = related
	}

	if related.R == nil {
		related.R = &chassisAnimationR{
			OutroAnimationChasses: ChassisSlice{o},
		}
	} else {
		related.R.OutroAnimationChasses = append(related.R.OutroAnimationChasses, o)
	}

	return nil
}

// RemoveOutroAnimation relationship.
// Sets o.R.OutroAnimation to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Chassis) RemoveOutroAnimation(exec boil.Executor, related *ChassisAnimation) error {
	var err error

	queries.SetScanner(&o.OutroAnimationID, nil)
	if _, err = o.Update(exec, boil.Whitelist("outro_animation_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OutroAnimation = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OutroAnimationChasses {
		if queries.Equal(o.OutroAnimationID, ri.OutroAnimationID) {
			continue
		}

		ln := len(related.R.OutroAnimationChasses)
		if ln > 1 && i < ln-1 {
			related.R.OutroAnimationChasses[i] = related.R.OutroAnimationChasses[ln-1]
		}
		related.R.OutroAnimationChasses = related.R.OutroAnimationChasses[:ln-1]
		break
	}
	return nil
}

// SetOwner of the chassis to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerChasses.
func (o *Chassis) SetOwner(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chassis\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
		strmangle.WhereClause("\"", "\"", 2, chassisPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerID = related.ID
	if o.R == nil {
		o.R = &chassisR{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &playerR{
			OwnerChasses: ChassisSlice{o},
		}
	} else {
		related.R.OwnerChasses = append(related.R.OwnerChasses, o)
	}

	return nil
}

// SetPowerCore of the chassis to the related item.
// Sets o.R.PowerCore to related.
// Adds o to related.R.Chasses.
func (o *Chassis) SetPowerCore(exec boil.Executor, insert bool, related *PowerCore) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chassis\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"power_core_id"}),
		strmangle.WhereClause("\"", "\"", 2, chassisPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PowerCoreID, related.ID)
	if o.R == nil {
		o.R = &chassisR{
			PowerCore: related,
		}
	} else {
		o.R.PowerCore = related
	}

	if related.R == nil {
		related.R = &powerCoreR{
			Chasses: ChassisSlice{o},
		}
	} else {
		related.R.Chasses = append(related.R.Chasses, o)
	}

	return nil
}

// RemovePowerCore relationship.
// Sets o.R.PowerCore to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Chassis) RemovePowerCore(exec boil.Executor, related *PowerCore) error {
	var err error

	queries.SetScanner(&o.PowerCoreID, nil)
	if _, err = o.Update(exec, boil.Whitelist("power_core_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PowerCore = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Chasses {
		if queries.Equal(o.PowerCoreID, ri.PowerCoreID) {
			continue
		}

		ln := len(related.R.Chasses)
		if ln > 1 && i < ln-1 {
			related.R.Chasses[i] = related.R.Chasses[ln-1]
		}
		related.R.Chasses = related.R.Chasses[:ln-1]
		break
	}
	return nil
}

// SetMech of the chassis to the related item.
// Sets o.R.Mech to related.
// Adds o to related.R.Chassis.
func (o *Chassis) SetMech(exec boil.Executor, insert bool, related *Mech) error {
	var err error

	if insert {
		related.ChassisID = o.ID

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"mechs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"chassis_id"}),
			strmangle.WhereClause("\"", "\"", 2, mechPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ChassisID = o.ID

	}

	if o.R == nil {
		o.R = &chassisR{
			Mech: related,
		}
	} else {
		o.R.Mech = related
	}

	if related.R == nil {
		related.R = &mechR{
			Chassis: o,
		}
	} else {
		related.R.Chassis = o
	}
	return nil
}

// AddEquippedOnChassisAnimations adds the given related objects to the existing relationships
// of the chassis, optionally inserting them as new records.
// Appends related to o.R.EquippedOnChassisAnimations.
// Sets related.R.EquippedOnChassis appropriately.
func (o *Chassis) AddEquippedOnChassisAnimations(exec boil.Executor, insert bool, related ...*ChassisAnimation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EquippedOn, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chassis_animation\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"equipped_on"}),
				strmangle.WhereClause("\"", "\"", 2, chassisAnimationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EquippedOn, o.ID)
		}
	}

	if o.R == nil {
		o.R = &chassisR{
			EquippedOnChassisAnimations: related,
		}
	} else {
		o.R.EquippedOnChassisAnimations = append(o.R.EquippedOnChassisAnimations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chassisAnimationR{
				EquippedOnChassis: o,
			}
		} else {
			rel.R.EquippedOnChassis = o
		}
	}
	return nil
}

// SetEquippedOnChassisAnimations removes all previously related items of the
// chassis replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.EquippedOnChassis's EquippedOnChassisAnimations accordingly.
// Replaces o.R.EquippedOnChassisAnimations with related.
// Sets related.R.EquippedOnChassis's EquippedOnChassisAnimations accordingly.
func (o *Chassis) SetEquippedOnChassisAnimations(exec boil.Executor, insert bool, related ...*ChassisAnimation) error {
	query := "update \"chassis_animation\" set \"equipped_on\" = null where \"equipped_on\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.EquippedOnChassisAnimations {
			queries.SetScanner(&rel.EquippedOn, nil)
			if rel.R == nil {
				continue
			}

			rel.R.EquippedOnChassis = nil
		}

		o.R.EquippedOnChassisAnimations = nil
	}
	return o.AddEquippedOnChassisAnimations(exec, insert, related...)
}

// RemoveEquippedOnChassisAnimations relationships from objects passed in.
// Removes related items from R.EquippedOnChassisAnimations (uses pointer comparison, removal does not keep order)
// Sets related.R.EquippedOnChassis.
func (o *Chassis) RemoveEquippedOnChassisAnimations(exec boil.Executor, related ...*ChassisAnimation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EquippedOn, nil)
		if rel.R != nil {
			rel.R.EquippedOnChassis = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("equipped_on")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.EquippedOnChassisAnimations {
			if rel != ri {
				continue
			}

			ln := len(o.R.EquippedOnChassisAnimations)
			if ln > 1 && i < ln-1 {
				o.R.EquippedOnChassisAnimations[i] = o.R.EquippedOnChassisAnimations[ln-1]
			}
			o.R.EquippedOnChassisAnimations = o.R.EquippedOnChassisAnimations[:ln-1]
			break
		}
	}

	return nil
}

// AddChassisModules adds the given related objects to the existing relationships
// of the chassis, optionally inserting them as new records.
// Appends related to o.R.ChassisModules.
// Sets related.R.Chassis appropriately.
func (o *Chassis) AddChassisModules(exec boil.Executor, insert bool, related ...*ChassisModule) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChassisID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chassis_modules\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"chassis_id"}),
				strmangle.WhereClause("\"", "\"", 2, chassisModulePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChassisID = o.ID
		}
	}

	if o.R == nil {
		o.R = &chassisR{
			ChassisModules: related,
		}
	} else {
		o.R.ChassisModules = append(o.R.ChassisModules, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chassisModuleR{
				Chassis: o,
			}
		} else {
			rel.R.Chassis = o
		}
	}
	return nil
}

// AddEquippedOnChassisSkins adds the given related objects to the existing relationships
// of the chassis, optionally inserting them as new records.
// Appends related to o.R.EquippedOnChassisSkins.
// Sets related.R.EquippedOnChassis appropriately.
func (o *Chassis) AddEquippedOnChassisSkins(exec boil.Executor, insert bool, related ...*ChassisSkin) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EquippedOn, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chassis_skin\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"equipped_on"}),
				strmangle.WhereClause("\"", "\"", 2, chassisSkinPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EquippedOn, o.ID)
		}
	}

	if o.R == nil {
		o.R = &chassisR{
			EquippedOnChassisSkins: related,
		}
	} else {
		o.R.EquippedOnChassisSkins = append(o.R.EquippedOnChassisSkins, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chassisSkinR{
				EquippedOnChassis: o,
			}
		} else {
			rel.R.EquippedOnChassis = o
		}
	}
	return nil
}

// SetEquippedOnChassisSkins removes all previously related items of the
// chassis replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.EquippedOnChassis's EquippedOnChassisSkins accordingly.
// Replaces o.R.EquippedOnChassisSkins with related.
// Sets related.R.EquippedOnChassis's EquippedOnChassisSkins accordingly.
func (o *Chassis) SetEquippedOnChassisSkins(exec boil.Executor, insert bool, related ...*ChassisSkin) error {
	query := "update \"chassis_skin\" set \"equipped_on\" = null where \"equipped_on\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.EquippedOnChassisSkins {
			queries.SetScanner(&rel.EquippedOn, nil)
			if rel.R == nil {
				continue
			}

			rel.R.EquippedOnChassis = nil
		}

		o.R.EquippedOnChassisSkins = nil
	}
	return o.AddEquippedOnChassisSkins(exec, insert, related...)
}

// RemoveEquippedOnChassisSkins relationships from objects passed in.
// Removes related items from R.EquippedOnChassisSkins (uses pointer comparison, removal does not keep order)
// Sets related.R.EquippedOnChassis.
func (o *Chassis) RemoveEquippedOnChassisSkins(exec boil.Executor, related ...*ChassisSkin) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EquippedOn, nil)
		if rel.R != nil {
			rel.R.EquippedOnChassis = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("equipped_on")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.EquippedOnChassisSkins {
			if rel != ri {
				continue
			}

			ln := len(o.R.EquippedOnChassisSkins)
			if ln > 1 && i < ln-1 {
				o.R.EquippedOnChassisSkins[i] = o.R.EquippedOnChassisSkins[ln-1]
			}
			o.R.EquippedOnChassisSkins = o.R.EquippedOnChassisSkins[:ln-1]
			break
		}
	}

	return nil
}

// AddChassisWeapons adds the given related objects to the existing relationships
// of the chassis, optionally inserting them as new records.
// Appends related to o.R.ChassisWeapons.
// Sets related.R.Chassis appropriately.
func (o *Chassis) AddChassisWeapons(exec boil.Executor, insert bool, related ...*ChassisWeapon) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChassisID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chassis_weapons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"chassis_id"}),
				strmangle.WhereClause("\"", "\"", 2, chassisWeaponPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChassisID = o.ID
		}
	}

	if o.R == nil {
		o.R = &chassisR{
			ChassisWeapons: related,
		}
	} else {
		o.R.ChassisWeapons = append(o.R.ChassisWeapons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chassisWeaponR{
				Chassis: o,
			}
		} else {
			rel.R.Chassis = o
		}
	}
	return nil
}

// AddEquippedOnPowerCores adds the given related objects to the existing relationships
// of the chassis, optionally inserting them as new records.
// Appends related to o.R.EquippedOnPowerCores.
// Sets related.R.EquippedOnChassis appropriately.
func (o *Chassis) AddEquippedOnPowerCores(exec boil.Executor, insert bool, related ...*PowerCore) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EquippedOn, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"power_cores\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"equipped_on"}),
				strmangle.WhereClause("\"", "\"", 2, powerCorePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EquippedOn, o.ID)
		}
	}

	if o.R == nil {
		o.R = &chassisR{
			EquippedOnPowerCores: related,
		}
	} else {
		o.R.EquippedOnPowerCores = append(o.R.EquippedOnPowerCores, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &powerCoreR{
				EquippedOnChassis: o,
			}
		} else {
			rel.R.EquippedOnChassis = o
		}
	}
	return nil
}

// SetEquippedOnPowerCores removes all previously related items of the
// chassis replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.EquippedOnChassis's EquippedOnPowerCores accordingly.
// Replaces o.R.EquippedOnPowerCores with related.
// Sets related.R.EquippedOnChassis's EquippedOnPowerCores accordingly.
func (o *Chassis) SetEquippedOnPowerCores(exec boil.Executor, insert bool, related ...*PowerCore) error {
	query := "update \"power_cores\" set \"equipped_on\" = null where \"equipped_on\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.EquippedOnPowerCores {
			queries.SetScanner(&rel.EquippedOn, nil)
			if rel.R == nil {
				continue
			}

			rel.R.EquippedOnChassis = nil
		}

		o.R.EquippedOnPowerCores = nil
	}
	return o.AddEquippedOnPowerCores(exec, insert, related...)
}

// RemoveEquippedOnPowerCores relationships from objects passed in.
// Removes related items from R.EquippedOnPowerCores (uses pointer comparison, removal does not keep order)
// Sets related.R.EquippedOnChassis.
func (o *Chassis) RemoveEquippedOnPowerCores(exec boil.Executor, related ...*PowerCore) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EquippedOn, nil)
		if rel.R != nil {
			rel.R.EquippedOnChassis = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("equipped_on")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.EquippedOnPowerCores {
			if rel != ri {
				continue
			}

			ln := len(o.R.EquippedOnPowerCores)
			if ln > 1 && i < ln-1 {
				o.R.EquippedOnPowerCores[i] = o.R.EquippedOnPowerCores[ln-1]
			}
			o.R.EquippedOnPowerCores = o.R.EquippedOnPowerCores[:ln-1]
			break
		}
	}

	return nil
}

// AddEquippedOnWeaponSkins adds the given related objects to the existing relationships
// of the chassis, optionally inserting them as new records.
// Appends related to o.R.EquippedOnWeaponSkins.
// Sets related.R.EquippedOnChassis appropriately.
func (o *Chassis) AddEquippedOnWeaponSkins(exec boil.Executor, insert bool, related ...*WeaponSkin) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EquippedOn, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"weapon_skin\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"equipped_on"}),
				strmangle.WhereClause("\"", "\"", 2, weaponSkinPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EquippedOn, o.ID)
		}
	}

	if o.R == nil {
		o.R = &chassisR{
			EquippedOnWeaponSkins: related,
		}
	} else {
		o.R.EquippedOnWeaponSkins = append(o.R.EquippedOnWeaponSkins, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &weaponSkinR{
				EquippedOnChassis: o,
			}
		} else {
			rel.R.EquippedOnChassis = o
		}
	}
	return nil
}

// SetEquippedOnWeaponSkins removes all previously related items of the
// chassis replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.EquippedOnChassis's EquippedOnWeaponSkins accordingly.
// Replaces o.R.EquippedOnWeaponSkins with related.
// Sets related.R.EquippedOnChassis's EquippedOnWeaponSkins accordingly.
func (o *Chassis) SetEquippedOnWeaponSkins(exec boil.Executor, insert bool, related ...*WeaponSkin) error {
	query := "update \"weapon_skin\" set \"equipped_on\" = null where \"equipped_on\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.EquippedOnWeaponSkins {
			queries.SetScanner(&rel.EquippedOn, nil)
			if rel.R == nil {
				continue
			}

			rel.R.EquippedOnChassis = nil
		}

		o.R.EquippedOnWeaponSkins = nil
	}
	return o.AddEquippedOnWeaponSkins(exec, insert, related...)
}

// RemoveEquippedOnWeaponSkins relationships from objects passed in.
// Removes related items from R.EquippedOnWeaponSkins (uses pointer comparison, removal does not keep order)
// Sets related.R.EquippedOnChassis.
func (o *Chassis) RemoveEquippedOnWeaponSkins(exec boil.Executor, related ...*WeaponSkin) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EquippedOn, nil)
		if rel.R != nil {
			rel.R.EquippedOnChassis = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("equipped_on")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.EquippedOnWeaponSkins {
			if rel != ri {
				continue
			}

			ln := len(o.R.EquippedOnWeaponSkins)
			if ln > 1 && i < ln-1 {
				o.R.EquippedOnWeaponSkins[i] = o.R.EquippedOnWeaponSkins[ln-1]
			}
			o.R.EquippedOnWeaponSkins = o.R.EquippedOnWeaponSkins[:ln-1]
			break
		}
	}

	return nil
}

// AddEquippedOnWeapons adds the given related objects to the existing relationships
// of the chassis, optionally inserting them as new records.
// Appends related to o.R.EquippedOnWeapons.
// Sets related.R.EquippedOnChassis appropriately.
func (o *Chassis) AddEquippedOnWeapons(exec boil.Executor, insert bool, related ...*Weapon) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EquippedOn, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"weapons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"equipped_on"}),
				strmangle.WhereClause("\"", "\"", 2, weaponPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EquippedOn, o.ID)
		}
	}

	if o.R == nil {
		o.R = &chassisR{
			EquippedOnWeapons: related,
		}
	} else {
		o.R.EquippedOnWeapons = append(o.R.EquippedOnWeapons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &weaponR{
				EquippedOnChassis: o,
			}
		} else {
			rel.R.EquippedOnChassis = o
		}
	}
	return nil
}

// SetEquippedOnWeapons removes all previously related items of the
// chassis replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.EquippedOnChassis's EquippedOnWeapons accordingly.
// Replaces o.R.EquippedOnWeapons with related.
// Sets related.R.EquippedOnChassis's EquippedOnWeapons accordingly.
func (o *Chassis) SetEquippedOnWeapons(exec boil.Executor, insert bool, related ...*Weapon) error {
	query := "update \"weapons\" set \"equipped_on\" = null where \"equipped_on\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.EquippedOnWeapons {
			queries.SetScanner(&rel.EquippedOn, nil)
			if rel.R == nil {
				continue
			}

			rel.R.EquippedOnChassis = nil
		}

		o.R.EquippedOnWeapons = nil
	}
	return o.AddEquippedOnWeapons(exec, insert, related...)
}

// RemoveEquippedOnWeapons relationships from objects passed in.
// Removes related items from R.EquippedOnWeapons (uses pointer comparison, removal does not keep order)
// Sets related.R.EquippedOnChassis.
func (o *Chassis) RemoveEquippedOnWeapons(exec boil.Executor, related ...*Weapon) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EquippedOn, nil)
		if rel.R != nil {
			rel.R.EquippedOnChassis = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("equipped_on")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.EquippedOnWeapons {
			if rel != ri {
				continue
			}

			ln := len(o.R.EquippedOnWeapons)
			if ln > 1 && i < ln-1 {
				o.R.EquippedOnWeapons[i] = o.R.EquippedOnWeapons[ln-1]
			}
			o.R.EquippedOnWeapons = o.R.EquippedOnWeapons[:ln-1]
			break
		}
	}

	return nil
}

// Chasses retrieves all the records using an executor.
func Chasses(mods ...qm.QueryMod) chassisQuery {
	mods = append(mods, qm.From("\"chassis\""), qmhelper.WhereIsNull("\"chassis\".\"deleted_at\""))
	return chassisQuery{NewQuery(mods...)}
}

// FindChassis retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChassis(exec boil.Executor, iD string, selectCols ...string) (*Chassis, error) {
	chassisObj := &Chassis{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"chassis\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, chassisObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from chassis")
	}

	if err = chassisObj.doAfterSelectHooks(exec); err != nil {
		return chassisObj, err
	}

	return chassisObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Chassis) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no chassis provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chassisColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	chassisInsertCacheMut.RLock()
	cache, cached := chassisInsertCache[key]
	chassisInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			chassisAllColumns,
			chassisColumnsWithDefault,
			chassisColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(chassisType, chassisMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chassisType, chassisMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"chassis\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"chassis\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into chassis")
	}

	if !cached {
		chassisInsertCacheMut.Lock()
		chassisInsertCache[key] = cache
		chassisInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Chassis.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Chassis) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	chassisUpdateCacheMut.RLock()
	cache, cached := chassisUpdateCache[key]
	chassisUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			chassisAllColumns,
			chassisPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update chassis, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"chassis\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, chassisPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chassisType, chassisMapping, append(wl, chassisPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update chassis row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for chassis")
	}

	if !cached {
		chassisUpdateCacheMut.Lock()
		chassisUpdateCache[key] = cache
		chassisUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q chassisQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for chassis")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for chassis")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChassisSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chassisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"chassis\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, chassisPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in chassis slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all chassis")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Chassis) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no chassis provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chassisColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chassisUpsertCacheMut.RLock()
	cache, cached := chassisUpsertCache[key]
	chassisUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			chassisAllColumns,
			chassisColumnsWithDefault,
			chassisColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			chassisAllColumns,
			chassisPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert chassis, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(chassisPrimaryKeyColumns))
			copy(conflict, chassisPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"chassis\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(chassisType, chassisMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chassisType, chassisMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert chassis")
	}

	if !cached {
		chassisUpsertCacheMut.Lock()
		chassisUpsertCache[key] = cache
		chassisUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Chassis record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Chassis) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Chassis provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chassisPrimaryKeyMapping)
		sql = "DELETE FROM \"chassis\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"chassis\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(chassisType, chassisMapping, append(wl, chassisPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from chassis")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for chassis")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q chassisQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no chassisQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from chassis")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for chassis")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChassisSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(chassisBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chassisPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"chassis\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chassisPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chassisPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"chassis\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, chassisPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from chassis slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for chassis")
	}

	if len(chassisAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Chassis) Reload(exec boil.Executor) error {
	ret, err := FindChassis(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChassisSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChassisSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chassisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"chassis\".* FROM \"chassis\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chassisPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in ChassisSlice")
	}

	*o = slice

	return nil
}

// ChassisExists checks if the Chassis row exists.
func ChassisExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"chassis\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if chassis exists")
	}

	return exists, nil
}
