// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Chassis is an object representing the database table.
type Chassis struct {
	ID                 string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BrandID            string    `boiler:"brand_id" boil:"brand_id" json:"brandID" toml:"brandID" yaml:"brandID"`
	Label              string    `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	Model              string    `boiler:"model" boil:"model" json:"model" toml:"model" yaml:"model"`
	Skin               string    `boiler:"skin" boil:"skin" json:"skin" toml:"skin" yaml:"skin"`
	Slug               string    `boiler:"slug" boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	ShieldRechargeRate int       `boiler:"shield_recharge_rate" boil:"shield_recharge_rate" json:"shieldRechargeRate" toml:"shieldRechargeRate" yaml:"shieldRechargeRate"`
	HealthRemaining    int       `boiler:"health_remaining" boil:"health_remaining" json:"healthRemaining" toml:"healthRemaining" yaml:"healthRemaining"`
	WeaponHardpoints   int       `boiler:"weapon_hardpoints" boil:"weapon_hardpoints" json:"weaponHardpoints" toml:"weaponHardpoints" yaml:"weaponHardpoints"`
	TurretHardpoints   int       `boiler:"turret_hardpoints" boil:"turret_hardpoints" json:"turretHardpoints" toml:"turretHardpoints" yaml:"turretHardpoints"`
	UtilitySlots       int       `boiler:"utility_slots" boil:"utility_slots" json:"utilitySlots" toml:"utilitySlots" yaml:"utilitySlots"`
	Speed              int       `boiler:"speed" boil:"speed" json:"speed" toml:"speed" yaml:"speed"`
	MaxHitpoints       int       `boiler:"max_hitpoints" boil:"max_hitpoints" json:"maxHitpoints" toml:"maxHitpoints" yaml:"maxHitpoints"`
	MaxShield          int       `boiler:"max_shield" boil:"max_shield" json:"maxShield" toml:"maxShield" yaml:"maxShield"`
	DeletedAt          null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deletedAt,omitempty" toml:"deletedAt" yaml:"deletedAt,omitempty"`
	UpdatedAt          time.Time `boiler:"updated_at" boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	CreatedAt          time.Time `boiler:"created_at" boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`

	R *chassisR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L chassisL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChassisColumns = struct {
	ID                 string
	BrandID            string
	Label              string
	Model              string
	Skin               string
	Slug               string
	ShieldRechargeRate string
	HealthRemaining    string
	WeaponHardpoints   string
	TurretHardpoints   string
	UtilitySlots       string
	Speed              string
	MaxHitpoints       string
	MaxShield          string
	DeletedAt          string
	UpdatedAt          string
	CreatedAt          string
}{
	ID:                 "id",
	BrandID:            "brand_id",
	Label:              "label",
	Model:              "model",
	Skin:               "skin",
	Slug:               "slug",
	ShieldRechargeRate: "shield_recharge_rate",
	HealthRemaining:    "health_remaining",
	WeaponHardpoints:   "weapon_hardpoints",
	TurretHardpoints:   "turret_hardpoints",
	UtilitySlots:       "utility_slots",
	Speed:              "speed",
	MaxHitpoints:       "max_hitpoints",
	MaxShield:          "max_shield",
	DeletedAt:          "deleted_at",
	UpdatedAt:          "updated_at",
	CreatedAt:          "created_at",
}

var ChassisTableColumns = struct {
	ID                 string
	BrandID            string
	Label              string
	Model              string
	Skin               string
	Slug               string
	ShieldRechargeRate string
	HealthRemaining    string
	WeaponHardpoints   string
	TurretHardpoints   string
	UtilitySlots       string
	Speed              string
	MaxHitpoints       string
	MaxShield          string
	DeletedAt          string
	UpdatedAt          string
	CreatedAt          string
}{
	ID:                 "chassis.id",
	BrandID:            "chassis.brand_id",
	Label:              "chassis.label",
	Model:              "chassis.model",
	Skin:               "chassis.skin",
	Slug:               "chassis.slug",
	ShieldRechargeRate: "chassis.shield_recharge_rate",
	HealthRemaining:    "chassis.health_remaining",
	WeaponHardpoints:   "chassis.weapon_hardpoints",
	TurretHardpoints:   "chassis.turret_hardpoints",
	UtilitySlots:       "chassis.utility_slots",
	Speed:              "chassis.speed",
	MaxHitpoints:       "chassis.max_hitpoints",
	MaxShield:          "chassis.max_shield",
	DeletedAt:          "chassis.deleted_at",
	UpdatedAt:          "chassis.updated_at",
	CreatedAt:          "chassis.created_at",
}

// Generated where

var ChassisWhere = struct {
	ID                 whereHelperstring
	BrandID            whereHelperstring
	Label              whereHelperstring
	Model              whereHelperstring
	Skin               whereHelperstring
	Slug               whereHelperstring
	ShieldRechargeRate whereHelperint
	HealthRemaining    whereHelperint
	WeaponHardpoints   whereHelperint
	TurretHardpoints   whereHelperint
	UtilitySlots       whereHelperint
	Speed              whereHelperint
	MaxHitpoints       whereHelperint
	MaxShield          whereHelperint
	DeletedAt          whereHelpernull_Time
	UpdatedAt          whereHelpertime_Time
	CreatedAt          whereHelpertime_Time
}{
	ID:                 whereHelperstring{field: "\"chassis\".\"id\""},
	BrandID:            whereHelperstring{field: "\"chassis\".\"brand_id\""},
	Label:              whereHelperstring{field: "\"chassis\".\"label\""},
	Model:              whereHelperstring{field: "\"chassis\".\"model\""},
	Skin:               whereHelperstring{field: "\"chassis\".\"skin\""},
	Slug:               whereHelperstring{field: "\"chassis\".\"slug\""},
	ShieldRechargeRate: whereHelperint{field: "\"chassis\".\"shield_recharge_rate\""},
	HealthRemaining:    whereHelperint{field: "\"chassis\".\"health_remaining\""},
	WeaponHardpoints:   whereHelperint{field: "\"chassis\".\"weapon_hardpoints\""},
	TurretHardpoints:   whereHelperint{field: "\"chassis\".\"turret_hardpoints\""},
	UtilitySlots:       whereHelperint{field: "\"chassis\".\"utility_slots\""},
	Speed:              whereHelperint{field: "\"chassis\".\"speed\""},
	MaxHitpoints:       whereHelperint{field: "\"chassis\".\"max_hitpoints\""},
	MaxShield:          whereHelperint{field: "\"chassis\".\"max_shield\""},
	DeletedAt:          whereHelpernull_Time{field: "\"chassis\".\"deleted_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"chassis\".\"updated_at\""},
	CreatedAt:          whereHelpertime_Time{field: "\"chassis\".\"created_at\""},
}

// ChassisRels is where relationship names are stored.
var ChassisRels = struct {
	Brand          string
	Mech           string
	ChassisModules string
	ChassisWeapons string
}{
	Brand:          "Brand",
	Mech:           "Mech",
	ChassisModules: "ChassisModules",
	ChassisWeapons: "ChassisWeapons",
}

// chassisR is where relationships are stored.
type chassisR struct {
	Brand          *Brand             `boiler:"Brand" boil:"Brand" json:"Brand" toml:"Brand" yaml:"Brand"`
	Mech           *Mech              `boiler:"Mech" boil:"Mech" json:"Mech" toml:"Mech" yaml:"Mech"`
	ChassisModules ChassisModuleSlice `boiler:"ChassisModules" boil:"ChassisModules" json:"ChassisModules" toml:"ChassisModules" yaml:"ChassisModules"`
	ChassisWeapons ChassisWeaponSlice `boiler:"ChassisWeapons" boil:"ChassisWeapons" json:"ChassisWeapons" toml:"ChassisWeapons" yaml:"ChassisWeapons"`
}

// NewStruct creates a new relationship struct
func (*chassisR) NewStruct() *chassisR {
	return &chassisR{}
}

// chassisL is where Load methods for each relationship are stored.
type chassisL struct{}

var (
	chassisAllColumns            = []string{"id", "brand_id", "label", "model", "skin", "slug", "shield_recharge_rate", "health_remaining", "weapon_hardpoints", "turret_hardpoints", "utility_slots", "speed", "max_hitpoints", "max_shield", "deleted_at", "updated_at", "created_at"}
	chassisColumnsWithoutDefault = []string{"brand_id", "label", "model", "skin", "slug", "shield_recharge_rate", "health_remaining", "weapon_hardpoints", "turret_hardpoints", "utility_slots", "speed", "max_hitpoints", "max_shield"}
	chassisColumnsWithDefault    = []string{"id", "deleted_at", "updated_at", "created_at"}
	chassisPrimaryKeyColumns     = []string{"id"}
	chassisGeneratedColumns      = []string{}
)

type (
	// ChassisSlice is an alias for a slice of pointers to Chassis.
	// This should almost always be used instead of []Chassis.
	ChassisSlice []*Chassis
	// ChassisHook is the signature for custom Chassis hook methods
	ChassisHook func(boil.Executor, *Chassis) error

	chassisQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chassisType                 = reflect.TypeOf(&Chassis{})
	chassisMapping              = queries.MakeStructMapping(chassisType)
	chassisPrimaryKeyMapping, _ = queries.BindMapping(chassisType, chassisMapping, chassisPrimaryKeyColumns)
	chassisInsertCacheMut       sync.RWMutex
	chassisInsertCache          = make(map[string]insertCache)
	chassisUpdateCacheMut       sync.RWMutex
	chassisUpdateCache          = make(map[string]updateCache)
	chassisUpsertCacheMut       sync.RWMutex
	chassisUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var chassisAfterSelectHooks []ChassisHook

var chassisBeforeInsertHooks []ChassisHook
var chassisAfterInsertHooks []ChassisHook

var chassisBeforeUpdateHooks []ChassisHook
var chassisAfterUpdateHooks []ChassisHook

var chassisBeforeDeleteHooks []ChassisHook
var chassisAfterDeleteHooks []ChassisHook

var chassisBeforeUpsertHooks []ChassisHook
var chassisAfterUpsertHooks []ChassisHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Chassis) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range chassisAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Chassis) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range chassisBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Chassis) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range chassisAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Chassis) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range chassisBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Chassis) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range chassisAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Chassis) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range chassisBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Chassis) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range chassisAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Chassis) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range chassisBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Chassis) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range chassisAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChassisHook registers your hook function for all future operations.
func AddChassisHook(hookPoint boil.HookPoint, chassisHook ChassisHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		chassisAfterSelectHooks = append(chassisAfterSelectHooks, chassisHook)
	case boil.BeforeInsertHook:
		chassisBeforeInsertHooks = append(chassisBeforeInsertHooks, chassisHook)
	case boil.AfterInsertHook:
		chassisAfterInsertHooks = append(chassisAfterInsertHooks, chassisHook)
	case boil.BeforeUpdateHook:
		chassisBeforeUpdateHooks = append(chassisBeforeUpdateHooks, chassisHook)
	case boil.AfterUpdateHook:
		chassisAfterUpdateHooks = append(chassisAfterUpdateHooks, chassisHook)
	case boil.BeforeDeleteHook:
		chassisBeforeDeleteHooks = append(chassisBeforeDeleteHooks, chassisHook)
	case boil.AfterDeleteHook:
		chassisAfterDeleteHooks = append(chassisAfterDeleteHooks, chassisHook)
	case boil.BeforeUpsertHook:
		chassisBeforeUpsertHooks = append(chassisBeforeUpsertHooks, chassisHook)
	case boil.AfterUpsertHook:
		chassisAfterUpsertHooks = append(chassisAfterUpsertHooks, chassisHook)
	}
}

// One returns a single chassis record from the query.
func (q chassisQuery) One(exec boil.Executor) (*Chassis, error) {
	o := &Chassis{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for chassis")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Chassis records from the query.
func (q chassisQuery) All(exec boil.Executor) (ChassisSlice, error) {
	var o []*Chassis

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Chassis slice")
	}

	if len(chassisAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Chassis records in the query.
func (q chassisQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count chassis rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q chassisQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if chassis exists")
	}

	return count > 0, nil
}

// Brand pointed to by the foreign key.
func (o *Chassis) Brand(mods ...qm.QueryMod) brandQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BrandID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Brands(queryMods...)
	queries.SetFrom(query.Query, "\"brands\"")

	return query
}

// Mech pointed to by the foreign key.
func (o *Chassis) Mech(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"chassis_id\" = ?", o.ID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// ChassisModules retrieves all the chassis_module's ChassisModules with an executor.
func (o *Chassis) ChassisModules(mods ...qm.QueryMod) chassisModuleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chassis_modules\".\"chassis_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"chassis_modules\".\"deleted_at\""),
	)

	query := ChassisModules(queryMods...)
	queries.SetFrom(query.Query, "\"chassis_modules\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"chassis_modules\".*"})
	}

	return query
}

// ChassisWeapons retrieves all the chassis_weapon's ChassisWeapons with an executor.
func (o *Chassis) ChassisWeapons(mods ...qm.QueryMod) chassisWeaponQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chassis_weapons\".\"chassis_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"chassis_weapons\".\"deleted_at\""),
	)

	query := ChassisWeapons(queryMods...)
	queries.SetFrom(query.Query, "\"chassis_weapons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"chassis_weapons\".*"})
	}

	return query
}

// LoadBrand allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chassisL) LoadBrand(e boil.Executor, singular bool, maybeChassis interface{}, mods queries.Applicator) error {
	var slice []*Chassis
	var object *Chassis

	if singular {
		object = maybeChassis.(*Chassis)
	} else {
		slice = *maybeChassis.(*[]*Chassis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chassisR{}
		}
		args = append(args, object.BrandID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chassisR{}
			}

			for _, a := range args {
				if a == obj.BrandID {
					continue Outer
				}
			}

			args = append(args, obj.BrandID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`brands`),
		qm.WhereIn(`brands.id in ?`, args...),
		qmhelper.WhereIsNull(`brands.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Brand")
	}

	var resultSlice []*Brand
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Brand")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for brands")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for brands")
	}

	if len(chassisAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Brand = foreign
		if foreign.R == nil {
			foreign.R = &brandR{}
		}
		foreign.R.Chasses = append(foreign.R.Chasses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BrandID == foreign.ID {
				local.R.Brand = foreign
				if foreign.R == nil {
					foreign.R = &brandR{}
				}
				foreign.R.Chasses = append(foreign.R.Chasses, local)
				break
			}
		}
	}

	return nil
}

// LoadMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (chassisL) LoadMech(e boil.Executor, singular bool, maybeChassis interface{}, mods queries.Applicator) error {
	var slice []*Chassis
	var object *Chassis

	if singular {
		object = maybeChassis.(*Chassis)
	} else {
		slice = *maybeChassis.(*[]*Chassis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chassisR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chassisR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.chassis_id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(chassisAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Mech = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.Chassis = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.ChassisID {
				local.R.Mech = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.Chassis = local
				break
			}
		}
	}

	return nil
}

// LoadChassisModules allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chassisL) LoadChassisModules(e boil.Executor, singular bool, maybeChassis interface{}, mods queries.Applicator) error {
	var slice []*Chassis
	var object *Chassis

	if singular {
		object = maybeChassis.(*Chassis)
	} else {
		slice = *maybeChassis.(*[]*Chassis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chassisR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chassisR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chassis_modules`),
		qm.WhereIn(`chassis_modules.chassis_id in ?`, args...),
		qmhelper.WhereIsNull(`chassis_modules.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chassis_modules")
	}

	var resultSlice []*ChassisModule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chassis_modules")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chassis_modules")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chassis_modules")
	}

	if len(chassisModuleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChassisModules = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chassisModuleR{}
			}
			foreign.R.Chassis = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChassisID {
				local.R.ChassisModules = append(local.R.ChassisModules, foreign)
				if foreign.R == nil {
					foreign.R = &chassisModuleR{}
				}
				foreign.R.Chassis = local
				break
			}
		}
	}

	return nil
}

// LoadChassisWeapons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chassisL) LoadChassisWeapons(e boil.Executor, singular bool, maybeChassis interface{}, mods queries.Applicator) error {
	var slice []*Chassis
	var object *Chassis

	if singular {
		object = maybeChassis.(*Chassis)
	} else {
		slice = *maybeChassis.(*[]*Chassis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chassisR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chassisR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chassis_weapons`),
		qm.WhereIn(`chassis_weapons.chassis_id in ?`, args...),
		qmhelper.WhereIsNull(`chassis_weapons.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chassis_weapons")
	}

	var resultSlice []*ChassisWeapon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chassis_weapons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chassis_weapons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chassis_weapons")
	}

	if len(chassisWeaponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChassisWeapons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chassisWeaponR{}
			}
			foreign.R.Chassis = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChassisID {
				local.R.ChassisWeapons = append(local.R.ChassisWeapons, foreign)
				if foreign.R == nil {
					foreign.R = &chassisWeaponR{}
				}
				foreign.R.Chassis = local
				break
			}
		}
	}

	return nil
}

// SetBrand of the chassis to the related item.
// Sets o.R.Brand to related.
// Adds o to related.R.Chasses.
func (o *Chassis) SetBrand(exec boil.Executor, insert bool, related *Brand) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chassis\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"brand_id"}),
		strmangle.WhereClause("\"", "\"", 2, chassisPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BrandID = related.ID
	if o.R == nil {
		o.R = &chassisR{
			Brand: related,
		}
	} else {
		o.R.Brand = related
	}

	if related.R == nil {
		related.R = &brandR{
			Chasses: ChassisSlice{o},
		}
	} else {
		related.R.Chasses = append(related.R.Chasses, o)
	}

	return nil
}

// SetMech of the chassis to the related item.
// Sets o.R.Mech to related.
// Adds o to related.R.Chassis.
func (o *Chassis) SetMech(exec boil.Executor, insert bool, related *Mech) error {
	var err error

	if insert {
		related.ChassisID = o.ID

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"mechs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"chassis_id"}),
			strmangle.WhereClause("\"", "\"", 2, mechPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ChassisID = o.ID

	}

	if o.R == nil {
		o.R = &chassisR{
			Mech: related,
		}
	} else {
		o.R.Mech = related
	}

	if related.R == nil {
		related.R = &mechR{
			Chassis: o,
		}
	} else {
		related.R.Chassis = o
	}
	return nil
}

// AddChassisModules adds the given related objects to the existing relationships
// of the chassis, optionally inserting them as new records.
// Appends related to o.R.ChassisModules.
// Sets related.R.Chassis appropriately.
func (o *Chassis) AddChassisModules(exec boil.Executor, insert bool, related ...*ChassisModule) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChassisID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chassis_modules\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"chassis_id"}),
				strmangle.WhereClause("\"", "\"", 2, chassisModulePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChassisID = o.ID
		}
	}

	if o.R == nil {
		o.R = &chassisR{
			ChassisModules: related,
		}
	} else {
		o.R.ChassisModules = append(o.R.ChassisModules, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chassisModuleR{
				Chassis: o,
			}
		} else {
			rel.R.Chassis = o
		}
	}
	return nil
}

// AddChassisWeapons adds the given related objects to the existing relationships
// of the chassis, optionally inserting them as new records.
// Appends related to o.R.ChassisWeapons.
// Sets related.R.Chassis appropriately.
func (o *Chassis) AddChassisWeapons(exec boil.Executor, insert bool, related ...*ChassisWeapon) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChassisID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chassis_weapons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"chassis_id"}),
				strmangle.WhereClause("\"", "\"", 2, chassisWeaponPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChassisID = o.ID
		}
	}

	if o.R == nil {
		o.R = &chassisR{
			ChassisWeapons: related,
		}
	} else {
		o.R.ChassisWeapons = append(o.R.ChassisWeapons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chassisWeaponR{
				Chassis: o,
			}
		} else {
			rel.R.Chassis = o
		}
	}
	return nil
}

// Chasses retrieves all the records using an executor.
func Chasses(mods ...qm.QueryMod) chassisQuery {
	mods = append(mods, qm.From("\"chassis\""), qmhelper.WhereIsNull("\"chassis\".\"deleted_at\""))
	return chassisQuery{NewQuery(mods...)}
}

// FindChassis retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChassis(exec boil.Executor, iD string, selectCols ...string) (*Chassis, error) {
	chassisObj := &Chassis{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"chassis\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, chassisObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from chassis")
	}

	if err = chassisObj.doAfterSelectHooks(exec); err != nil {
		return chassisObj, err
	}

	return chassisObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Chassis) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no chassis provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chassisColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	chassisInsertCacheMut.RLock()
	cache, cached := chassisInsertCache[key]
	chassisInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			chassisAllColumns,
			chassisColumnsWithDefault,
			chassisColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(chassisType, chassisMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chassisType, chassisMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"chassis\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"chassis\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into chassis")
	}

	if !cached {
		chassisInsertCacheMut.Lock()
		chassisInsertCache[key] = cache
		chassisInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Chassis.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Chassis) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	chassisUpdateCacheMut.RLock()
	cache, cached := chassisUpdateCache[key]
	chassisUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			chassisAllColumns,
			chassisPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update chassis, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"chassis\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, chassisPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chassisType, chassisMapping, append(wl, chassisPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update chassis row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for chassis")
	}

	if !cached {
		chassisUpdateCacheMut.Lock()
		chassisUpdateCache[key] = cache
		chassisUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q chassisQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for chassis")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for chassis")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChassisSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chassisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"chassis\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, chassisPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in chassis slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all chassis")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Chassis) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no chassis provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chassisColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chassisUpsertCacheMut.RLock()
	cache, cached := chassisUpsertCache[key]
	chassisUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			chassisAllColumns,
			chassisColumnsWithDefault,
			chassisColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			chassisAllColumns,
			chassisPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert chassis, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(chassisPrimaryKeyColumns))
			copy(conflict, chassisPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"chassis\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(chassisType, chassisMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chassisType, chassisMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert chassis")
	}

	if !cached {
		chassisUpsertCacheMut.Lock()
		chassisUpsertCache[key] = cache
		chassisUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Chassis record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Chassis) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Chassis provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chassisPrimaryKeyMapping)
		sql = "DELETE FROM \"chassis\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"chassis\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(chassisType, chassisMapping, append(wl, chassisPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from chassis")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for chassis")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q chassisQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no chassisQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from chassis")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for chassis")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChassisSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(chassisBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chassisPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"chassis\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chassisPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chassisPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"chassis\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, chassisPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from chassis slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for chassis")
	}

	if len(chassisAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Chassis) Reload(exec boil.Executor) error {
	ret, err := FindChassis(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChassisSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChassisSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chassisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"chassis\".* FROM \"chassis\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chassisPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in ChassisSlice")
	}

	*o = slice

	return nil
}

// ChassisExists checks if the Chassis row exists.
func ChassisExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"chassis\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if chassis exists")
	}

	return exists, nil
}
