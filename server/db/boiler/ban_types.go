// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BanType is an object representing the database table.
type BanType struct {
	ID                string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Description       string    `boiler:"description" boil:"description" json:"description" toml:"description" yaml:"description"`
	Key               string    `boiler:"key" boil:"key" json:"key" toml:"key" yaml:"key"`
	BanForHours       int       `boiler:"ban_for_hours" boil:"ban_for_hours" json:"ban_for_hours" toml:"ban_for_hours" yaml:"ban_for_hours"`
	BanSelectLocation bool      `boiler:"ban_select_location" boil:"ban_select_location" json:"ban_select_location" toml:"ban_select_location" yaml:"ban_select_location"`
	CreatedAt         time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt         time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt         null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *banTypeR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L banTypeL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BanTypeColumns = struct {
	ID                string
	Description       string
	Key               string
	BanForHours       string
	BanSelectLocation string
	CreatedAt         string
	UpdatedAt         string
	DeletedAt         string
}{
	ID:                "id",
	Description:       "description",
	Key:               "key",
	BanForHours:       "ban_for_hours",
	BanSelectLocation: "ban_select_location",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
	DeletedAt:         "deleted_at",
}

var BanTypeTableColumns = struct {
	ID                string
	Description       string
	Key               string
	BanForHours       string
	BanSelectLocation string
	CreatedAt         string
	UpdatedAt         string
	DeletedAt         string
}{
	ID:                "ban_types.id",
	Description:       "ban_types.description",
	Key:               "ban_types.key",
	BanForHours:       "ban_types.ban_for_hours",
	BanSelectLocation: "ban_types.ban_select_location",
	CreatedAt:         "ban_types.created_at",
	UpdatedAt:         "ban_types.updated_at",
	DeletedAt:         "ban_types.deleted_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var BanTypeWhere = struct {
	ID                whereHelperstring
	Description       whereHelperstring
	Key               whereHelperstring
	BanForHours       whereHelperint
	BanSelectLocation whereHelperbool
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpertime_Time
	DeletedAt         whereHelpernull_Time
}{
	ID:                whereHelperstring{field: "\"ban_types\".\"id\""},
	Description:       whereHelperstring{field: "\"ban_types\".\"description\""},
	Key:               whereHelperstring{field: "\"ban_types\".\"key\""},
	BanForHours:       whereHelperint{field: "\"ban_types\".\"ban_for_hours\""},
	BanSelectLocation: whereHelperbool{field: "\"ban_types\".\"ban_select_location\""},
	CreatedAt:         whereHelpertime_Time{field: "\"ban_types\".\"created_at\""},
	UpdatedAt:         whereHelpertime_Time{field: "\"ban_types\".\"updated_at\""},
	DeletedAt:         whereHelpernull_Time{field: "\"ban_types\".\"deleted_at\""},
}

// BanTypeRels is where relationship names are stored.
var BanTypeRels = struct {
	BanVotes      string
	BannedPlayers string
}{
	BanVotes:      "BanVotes",
	BannedPlayers: "BannedPlayers",
}

// banTypeR is where relationships are stored.
type banTypeR struct {
	BanVotes      BanVoteSlice      `boiler:"BanVotes" boil:"BanVotes" json:"BanVotes" toml:"BanVotes" yaml:"BanVotes"`
	BannedPlayers BannedPlayerSlice `boiler:"BannedPlayers" boil:"BannedPlayers" json:"BannedPlayers" toml:"BannedPlayers" yaml:"BannedPlayers"`
}

// NewStruct creates a new relationship struct
func (*banTypeR) NewStruct() *banTypeR {
	return &banTypeR{}
}

// banTypeL is where Load methods for each relationship are stored.
type banTypeL struct{}

var (
	banTypeAllColumns            = []string{"id", "description", "key", "ban_for_hours", "ban_select_location", "created_at", "updated_at", "deleted_at"}
	banTypeColumnsWithoutDefault = []string{"description", "key"}
	banTypeColumnsWithDefault    = []string{"id", "ban_for_hours", "ban_select_location", "created_at", "updated_at", "deleted_at"}
	banTypePrimaryKeyColumns     = []string{"id"}
	banTypeGeneratedColumns      = []string{}
)

type (
	// BanTypeSlice is an alias for a slice of pointers to BanType.
	// This should almost always be used instead of []BanType.
	BanTypeSlice []*BanType
	// BanTypeHook is the signature for custom BanType hook methods
	BanTypeHook func(boil.Executor, *BanType) error

	banTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	banTypeType                 = reflect.TypeOf(&BanType{})
	banTypeMapping              = queries.MakeStructMapping(banTypeType)
	banTypePrimaryKeyMapping, _ = queries.BindMapping(banTypeType, banTypeMapping, banTypePrimaryKeyColumns)
	banTypeInsertCacheMut       sync.RWMutex
	banTypeInsertCache          = make(map[string]insertCache)
	banTypeUpdateCacheMut       sync.RWMutex
	banTypeUpdateCache          = make(map[string]updateCache)
	banTypeUpsertCacheMut       sync.RWMutex
	banTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var banTypeAfterSelectHooks []BanTypeHook

var banTypeBeforeInsertHooks []BanTypeHook
var banTypeAfterInsertHooks []BanTypeHook

var banTypeBeforeUpdateHooks []BanTypeHook
var banTypeAfterUpdateHooks []BanTypeHook

var banTypeBeforeDeleteHooks []BanTypeHook
var banTypeAfterDeleteHooks []BanTypeHook

var banTypeBeforeUpsertHooks []BanTypeHook
var banTypeAfterUpsertHooks []BanTypeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BanType) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range banTypeAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BanType) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range banTypeBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BanType) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range banTypeAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BanType) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range banTypeBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BanType) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range banTypeAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BanType) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range banTypeBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BanType) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range banTypeAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BanType) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range banTypeBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BanType) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range banTypeAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBanTypeHook registers your hook function for all future operations.
func AddBanTypeHook(hookPoint boil.HookPoint, banTypeHook BanTypeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		banTypeAfterSelectHooks = append(banTypeAfterSelectHooks, banTypeHook)
	case boil.BeforeInsertHook:
		banTypeBeforeInsertHooks = append(banTypeBeforeInsertHooks, banTypeHook)
	case boil.AfterInsertHook:
		banTypeAfterInsertHooks = append(banTypeAfterInsertHooks, banTypeHook)
	case boil.BeforeUpdateHook:
		banTypeBeforeUpdateHooks = append(banTypeBeforeUpdateHooks, banTypeHook)
	case boil.AfterUpdateHook:
		banTypeAfterUpdateHooks = append(banTypeAfterUpdateHooks, banTypeHook)
	case boil.BeforeDeleteHook:
		banTypeBeforeDeleteHooks = append(banTypeBeforeDeleteHooks, banTypeHook)
	case boil.AfterDeleteHook:
		banTypeAfterDeleteHooks = append(banTypeAfterDeleteHooks, banTypeHook)
	case boil.BeforeUpsertHook:
		banTypeBeforeUpsertHooks = append(banTypeBeforeUpsertHooks, banTypeHook)
	case boil.AfterUpsertHook:
		banTypeAfterUpsertHooks = append(banTypeAfterUpsertHooks, banTypeHook)
	}
}

// One returns a single banType record from the query.
func (q banTypeQuery) One(exec boil.Executor) (*BanType, error) {
	o := &BanType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for ban_types")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BanType records from the query.
func (q banTypeQuery) All(exec boil.Executor) (BanTypeSlice, error) {
	var o []*BanType

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BanType slice")
	}

	if len(banTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BanType records in the query.
func (q banTypeQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count ban_types rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q banTypeQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if ban_types exists")
	}

	return count > 0, nil
}

// BanVotes retrieves all the ban_vote's BanVotes with an executor.
func (o *BanType) BanVotes(mods ...qm.QueryMod) banVoteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"ban_votes\".\"ban_type_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"ban_votes\".\"deleted_at\""),
	)

	query := BanVotes(queryMods...)
	queries.SetFrom(query.Query, "\"ban_votes\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"ban_votes\".*"})
	}

	return query
}

// BannedPlayers retrieves all the banned_player's BannedPlayers with an executor.
func (o *BanType) BannedPlayers(mods ...qm.QueryMod) bannedPlayerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"banned_players\".\"ban_type_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"banned_players\".\"deleted_at\""),
	)

	query := BannedPlayers(queryMods...)
	queries.SetFrom(query.Query, "\"banned_players\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"banned_players\".*"})
	}

	return query
}

// LoadBanVotes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (banTypeL) LoadBanVotes(e boil.Executor, singular bool, maybeBanType interface{}, mods queries.Applicator) error {
	var slice []*BanType
	var object *BanType

	if singular {
		object = maybeBanType.(*BanType)
	} else {
		slice = *maybeBanType.(*[]*BanType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &banTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &banTypeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`ban_votes`),
		qm.WhereIn(`ban_votes.ban_type_id in ?`, args...),
		qmhelper.WhereIsNull(`ban_votes.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ban_votes")
	}

	var resultSlice []*BanVote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ban_votes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ban_votes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ban_votes")
	}

	if len(banVoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BanVotes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &banVoteR{}
			}
			foreign.R.BanType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BanTypeID {
				local.R.BanVotes = append(local.R.BanVotes, foreign)
				if foreign.R == nil {
					foreign.R = &banVoteR{}
				}
				foreign.R.BanType = local
				break
			}
		}
	}

	return nil
}

// LoadBannedPlayers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (banTypeL) LoadBannedPlayers(e boil.Executor, singular bool, maybeBanType interface{}, mods queries.Applicator) error {
	var slice []*BanType
	var object *BanType

	if singular {
		object = maybeBanType.(*BanType)
	} else {
		slice = *maybeBanType.(*[]*BanType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &banTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &banTypeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`banned_players`),
		qm.WhereIn(`banned_players.ban_type_id in ?`, args...),
		qmhelper.WhereIsNull(`banned_players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load banned_players")
	}

	var resultSlice []*BannedPlayer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice banned_players")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on banned_players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for banned_players")
	}

	if len(bannedPlayerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BannedPlayers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bannedPlayerR{}
			}
			foreign.R.BanType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BanTypeID {
				local.R.BannedPlayers = append(local.R.BannedPlayers, foreign)
				if foreign.R == nil {
					foreign.R = &bannedPlayerR{}
				}
				foreign.R.BanType = local
				break
			}
		}
	}

	return nil
}

// AddBanVotes adds the given related objects to the existing relationships
// of the ban_type, optionally inserting them as new records.
// Appends related to o.R.BanVotes.
// Sets related.R.BanType appropriately.
func (o *BanType) AddBanVotes(exec boil.Executor, insert bool, related ...*BanVote) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BanTypeID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"ban_votes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"ban_type_id"}),
				strmangle.WhereClause("\"", "\"", 2, banVotePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BanTypeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &banTypeR{
			BanVotes: related,
		}
	} else {
		o.R.BanVotes = append(o.R.BanVotes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &banVoteR{
				BanType: o,
			}
		} else {
			rel.R.BanType = o
		}
	}
	return nil
}

// AddBannedPlayers adds the given related objects to the existing relationships
// of the ban_type, optionally inserting them as new records.
// Appends related to o.R.BannedPlayers.
// Sets related.R.BanType appropriately.
func (o *BanType) AddBannedPlayers(exec boil.Executor, insert bool, related ...*BannedPlayer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BanTypeID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"banned_players\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"ban_type_id"}),
				strmangle.WhereClause("\"", "\"", 2, bannedPlayerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BanTypeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &banTypeR{
			BannedPlayers: related,
		}
	} else {
		o.R.BannedPlayers = append(o.R.BannedPlayers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bannedPlayerR{
				BanType: o,
			}
		} else {
			rel.R.BanType = o
		}
	}
	return nil
}

// BanTypes retrieves all the records using an executor.
func BanTypes(mods ...qm.QueryMod) banTypeQuery {
	mods = append(mods, qm.From("\"ban_types\""), qmhelper.WhereIsNull("\"ban_types\".\"deleted_at\""))
	return banTypeQuery{NewQuery(mods...)}
}

// FindBanType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBanType(exec boil.Executor, iD string, selectCols ...string) (*BanType, error) {
	banTypeObj := &BanType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ban_types\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, banTypeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from ban_types")
	}

	if err = banTypeObj.doAfterSelectHooks(exec); err != nil {
		return banTypeObj, err
	}

	return banTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BanType) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no ban_types provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(banTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	banTypeInsertCacheMut.RLock()
	cache, cached := banTypeInsertCache[key]
	banTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			banTypeAllColumns,
			banTypeColumnsWithDefault,
			banTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(banTypeType, banTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(banTypeType, banTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ban_types\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ban_types\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into ban_types")
	}

	if !cached {
		banTypeInsertCacheMut.Lock()
		banTypeInsertCache[key] = cache
		banTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BanType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BanType) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	banTypeUpdateCacheMut.RLock()
	cache, cached := banTypeUpdateCache[key]
	banTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			banTypeAllColumns,
			banTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update ban_types, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ban_types\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, banTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(banTypeType, banTypeMapping, append(wl, banTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update ban_types row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for ban_types")
	}

	if !cached {
		banTypeUpdateCacheMut.Lock()
		banTypeUpdateCache[key] = cache
		banTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q banTypeQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for ban_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for ban_types")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BanTypeSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), banTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ban_types\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, banTypePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in banType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all banType")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BanType) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no ban_types provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(banTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	banTypeUpsertCacheMut.RLock()
	cache, cached := banTypeUpsertCache[key]
	banTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			banTypeAllColumns,
			banTypeColumnsWithDefault,
			banTypeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			banTypeAllColumns,
			banTypePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert ban_types, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(banTypePrimaryKeyColumns))
			copy(conflict, banTypePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"ban_types\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(banTypeType, banTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(banTypeType, banTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert ban_types")
	}

	if !cached {
		banTypeUpsertCacheMut.Lock()
		banTypeUpsertCache[key] = cache
		banTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BanType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BanType) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BanType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), banTypePrimaryKeyMapping)
		sql = "DELETE FROM \"ban_types\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"ban_types\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(banTypeType, banTypeMapping, append(wl, banTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from ban_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for ban_types")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q banTypeQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no banTypeQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from ban_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for ban_types")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BanTypeSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(banTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), banTypePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"ban_types\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, banTypePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), banTypePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"ban_types\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, banTypePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from banType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for ban_types")
	}

	if len(banTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BanType) Reload(exec boil.Executor) error {
	ret, err := FindBanType(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BanTypeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BanTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), banTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ban_types\".* FROM \"ban_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, banTypePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BanTypeSlice")
	}

	*o = slice

	return nil
}

// BanTypeExists checks if the BanType row exists.
func BanTypeExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ban_types\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if ban_types exists")
	}

	return exists, nil
}
