// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SyndicateDirector is an object representing the database table.
type SyndicateDirector struct {
	SyndicateID string    `boiler:"syndicate_id" boil:"syndicate_id" json:"syndicate_id" toml:"syndicate_id" yaml:"syndicate_id"`
	PlayerID    string    `boiler:"player_id" boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	CreatedAt   time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *syndicateDirectorR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L syndicateDirectorL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SyndicateDirectorColumns = struct {
	SyndicateID string
	PlayerID    string
	CreatedAt   string
}{
	SyndicateID: "syndicate_id",
	PlayerID:    "player_id",
	CreatedAt:   "created_at",
}

var SyndicateDirectorTableColumns = struct {
	SyndicateID string
	PlayerID    string
	CreatedAt   string
}{
	SyndicateID: "syndicate_directors.syndicate_id",
	PlayerID:    "syndicate_directors.player_id",
	CreatedAt:   "syndicate_directors.created_at",
}

// Generated where

var SyndicateDirectorWhere = struct {
	SyndicateID whereHelperstring
	PlayerID    whereHelperstring
	CreatedAt   whereHelpertime_Time
}{
	SyndicateID: whereHelperstring{field: "\"syndicate_directors\".\"syndicate_id\""},
	PlayerID:    whereHelperstring{field: "\"syndicate_directors\".\"player_id\""},
	CreatedAt:   whereHelpertime_Time{field: "\"syndicate_directors\".\"created_at\""},
}

// SyndicateDirectorRels is where relationship names are stored.
var SyndicateDirectorRels = struct {
	Player    string
	Syndicate string
}{
	Player:    "Player",
	Syndicate: "Syndicate",
}

// syndicateDirectorR is where relationships are stored.
type syndicateDirectorR struct {
	Player    *Player    `boiler:"Player" boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
	Syndicate *Syndicate `boiler:"Syndicate" boil:"Syndicate" json:"Syndicate" toml:"Syndicate" yaml:"Syndicate"`
}

// NewStruct creates a new relationship struct
func (*syndicateDirectorR) NewStruct() *syndicateDirectorR {
	return &syndicateDirectorR{}
}

// syndicateDirectorL is where Load methods for each relationship are stored.
type syndicateDirectorL struct{}

var (
	syndicateDirectorAllColumns            = []string{"syndicate_id", "player_id", "created_at"}
	syndicateDirectorColumnsWithoutDefault = []string{"syndicate_id", "player_id"}
	syndicateDirectorColumnsWithDefault    = []string{"created_at"}
	syndicateDirectorPrimaryKeyColumns     = []string{"syndicate_id", "player_id"}
	syndicateDirectorGeneratedColumns      = []string{}
)

type (
	// SyndicateDirectorSlice is an alias for a slice of pointers to SyndicateDirector.
	// This should almost always be used instead of []SyndicateDirector.
	SyndicateDirectorSlice []*SyndicateDirector
	// SyndicateDirectorHook is the signature for custom SyndicateDirector hook methods
	SyndicateDirectorHook func(boil.Executor, *SyndicateDirector) error

	syndicateDirectorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	syndicateDirectorType                 = reflect.TypeOf(&SyndicateDirector{})
	syndicateDirectorMapping              = queries.MakeStructMapping(syndicateDirectorType)
	syndicateDirectorPrimaryKeyMapping, _ = queries.BindMapping(syndicateDirectorType, syndicateDirectorMapping, syndicateDirectorPrimaryKeyColumns)
	syndicateDirectorInsertCacheMut       sync.RWMutex
	syndicateDirectorInsertCache          = make(map[string]insertCache)
	syndicateDirectorUpdateCacheMut       sync.RWMutex
	syndicateDirectorUpdateCache          = make(map[string]updateCache)
	syndicateDirectorUpsertCacheMut       sync.RWMutex
	syndicateDirectorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var syndicateDirectorAfterSelectHooks []SyndicateDirectorHook

var syndicateDirectorBeforeInsertHooks []SyndicateDirectorHook
var syndicateDirectorAfterInsertHooks []SyndicateDirectorHook

var syndicateDirectorBeforeUpdateHooks []SyndicateDirectorHook
var syndicateDirectorAfterUpdateHooks []SyndicateDirectorHook

var syndicateDirectorBeforeDeleteHooks []SyndicateDirectorHook
var syndicateDirectorAfterDeleteHooks []SyndicateDirectorHook

var syndicateDirectorBeforeUpsertHooks []SyndicateDirectorHook
var syndicateDirectorAfterUpsertHooks []SyndicateDirectorHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SyndicateDirector) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateDirectorAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SyndicateDirector) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateDirectorBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SyndicateDirector) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateDirectorAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SyndicateDirector) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateDirectorBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SyndicateDirector) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateDirectorAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SyndicateDirector) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateDirectorBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SyndicateDirector) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateDirectorAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SyndicateDirector) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateDirectorBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SyndicateDirector) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateDirectorAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSyndicateDirectorHook registers your hook function for all future operations.
func AddSyndicateDirectorHook(hookPoint boil.HookPoint, syndicateDirectorHook SyndicateDirectorHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		syndicateDirectorAfterSelectHooks = append(syndicateDirectorAfterSelectHooks, syndicateDirectorHook)
	case boil.BeforeInsertHook:
		syndicateDirectorBeforeInsertHooks = append(syndicateDirectorBeforeInsertHooks, syndicateDirectorHook)
	case boil.AfterInsertHook:
		syndicateDirectorAfterInsertHooks = append(syndicateDirectorAfterInsertHooks, syndicateDirectorHook)
	case boil.BeforeUpdateHook:
		syndicateDirectorBeforeUpdateHooks = append(syndicateDirectorBeforeUpdateHooks, syndicateDirectorHook)
	case boil.AfterUpdateHook:
		syndicateDirectorAfterUpdateHooks = append(syndicateDirectorAfterUpdateHooks, syndicateDirectorHook)
	case boil.BeforeDeleteHook:
		syndicateDirectorBeforeDeleteHooks = append(syndicateDirectorBeforeDeleteHooks, syndicateDirectorHook)
	case boil.AfterDeleteHook:
		syndicateDirectorAfterDeleteHooks = append(syndicateDirectorAfterDeleteHooks, syndicateDirectorHook)
	case boil.BeforeUpsertHook:
		syndicateDirectorBeforeUpsertHooks = append(syndicateDirectorBeforeUpsertHooks, syndicateDirectorHook)
	case boil.AfterUpsertHook:
		syndicateDirectorAfterUpsertHooks = append(syndicateDirectorAfterUpsertHooks, syndicateDirectorHook)
	}
}

// One returns a single syndicateDirector record from the query.
func (q syndicateDirectorQuery) One(exec boil.Executor) (*SyndicateDirector, error) {
	o := &SyndicateDirector{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for syndicate_directors")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SyndicateDirector records from the query.
func (q syndicateDirectorQuery) All(exec boil.Executor) (SyndicateDirectorSlice, error) {
	var o []*SyndicateDirector

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to SyndicateDirector slice")
	}

	if len(syndicateDirectorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SyndicateDirector records in the query.
func (q syndicateDirectorQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count syndicate_directors rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q syndicateDirectorQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if syndicate_directors exists")
	}

	return count > 0, nil
}

// Player pointed to by the foreign key.
func (o *SyndicateDirector) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// Syndicate pointed to by the foreign key.
func (o *SyndicateDirector) Syndicate(mods ...qm.QueryMod) syndicateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SyndicateID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Syndicates(queryMods...)
	queries.SetFrom(query.Query, "\"syndicates\"")

	return query
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateDirectorL) LoadPlayer(e boil.Executor, singular bool, maybeSyndicateDirector interface{}, mods queries.Applicator) error {
	var slice []*SyndicateDirector
	var object *SyndicateDirector

	if singular {
		object = maybeSyndicateDirector.(*SyndicateDirector)
	} else {
		slice = *maybeSyndicateDirector.(*[]*SyndicateDirector)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateDirectorR{}
		}
		args = append(args, object.PlayerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateDirectorR{}
			}

			for _, a := range args {
				if a == obj.PlayerID {
					continue Outer
				}
			}

			args = append(args, obj.PlayerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(syndicateDirectorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.SyndicateDirectors = append(foreign.R.SyndicateDirectors, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.ID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.SyndicateDirectors = append(foreign.R.SyndicateDirectors, local)
				break
			}
		}
	}

	return nil
}

// LoadSyndicate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateDirectorL) LoadSyndicate(e boil.Executor, singular bool, maybeSyndicateDirector interface{}, mods queries.Applicator) error {
	var slice []*SyndicateDirector
	var object *SyndicateDirector

	if singular {
		object = maybeSyndicateDirector.(*SyndicateDirector)
	} else {
		slice = *maybeSyndicateDirector.(*[]*SyndicateDirector)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateDirectorR{}
		}
		args = append(args, object.SyndicateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateDirectorR{}
			}

			for _, a := range args {
				if a == obj.SyndicateID {
					continue Outer
				}
			}

			args = append(args, obj.SyndicateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicates`),
		qm.WhereIn(`syndicates.id in ?`, args...),
		qmhelper.WhereIsNull(`syndicates.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Syndicate")
	}

	var resultSlice []*Syndicate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Syndicate")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for syndicates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicates")
	}

	if len(syndicateDirectorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Syndicate = foreign
		if foreign.R == nil {
			foreign.R = &syndicateR{}
		}
		foreign.R.SyndicateDirectors = append(foreign.R.SyndicateDirectors, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SyndicateID == foreign.ID {
				local.R.Syndicate = foreign
				if foreign.R == nil {
					foreign.R = &syndicateR{}
				}
				foreign.R.SyndicateDirectors = append(foreign.R.SyndicateDirectors, local)
				break
			}
		}
	}

	return nil
}

// SetPlayer of the syndicateDirector to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.SyndicateDirectors.
func (o *SyndicateDirector) SetPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicate_directors\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicateDirectorPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.SyndicateID, o.PlayerID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.ID
	if o.R == nil {
		o.R = &syndicateDirectorR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			SyndicateDirectors: SyndicateDirectorSlice{o},
		}
	} else {
		related.R.SyndicateDirectors = append(related.R.SyndicateDirectors, o)
	}

	return nil
}

// SetSyndicate of the syndicateDirector to the related item.
// Sets o.R.Syndicate to related.
// Adds o to related.R.SyndicateDirectors.
func (o *SyndicateDirector) SetSyndicate(exec boil.Executor, insert bool, related *Syndicate) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicate_directors\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"syndicate_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicateDirectorPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.SyndicateID, o.PlayerID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SyndicateID = related.ID
	if o.R == nil {
		o.R = &syndicateDirectorR{
			Syndicate: related,
		}
	} else {
		o.R.Syndicate = related
	}

	if related.R == nil {
		related.R = &syndicateR{
			SyndicateDirectors: SyndicateDirectorSlice{o},
		}
	} else {
		related.R.SyndicateDirectors = append(related.R.SyndicateDirectors, o)
	}

	return nil
}

// SyndicateDirectors retrieves all the records using an executor.
func SyndicateDirectors(mods ...qm.QueryMod) syndicateDirectorQuery {
	mods = append(mods, qm.From("\"syndicate_directors\""))
	return syndicateDirectorQuery{NewQuery(mods...)}
}

// FindSyndicateDirector retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSyndicateDirector(exec boil.Executor, syndicateID string, playerID string, selectCols ...string) (*SyndicateDirector, error) {
	syndicateDirectorObj := &SyndicateDirector{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"syndicate_directors\" where \"syndicate_id\"=$1 AND \"player_id\"=$2", sel,
	)

	q := queries.Raw(query, syndicateID, playerID)

	err := q.Bind(nil, exec, syndicateDirectorObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from syndicate_directors")
	}

	if err = syndicateDirectorObj.doAfterSelectHooks(exec); err != nil {
		return syndicateDirectorObj, err
	}

	return syndicateDirectorObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SyndicateDirector) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no syndicate_directors provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syndicateDirectorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	syndicateDirectorInsertCacheMut.RLock()
	cache, cached := syndicateDirectorInsertCache[key]
	syndicateDirectorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			syndicateDirectorAllColumns,
			syndicateDirectorColumnsWithDefault,
			syndicateDirectorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(syndicateDirectorType, syndicateDirectorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(syndicateDirectorType, syndicateDirectorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"syndicate_directors\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"syndicate_directors\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into syndicate_directors")
	}

	if !cached {
		syndicateDirectorInsertCacheMut.Lock()
		syndicateDirectorInsertCache[key] = cache
		syndicateDirectorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the SyndicateDirector.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SyndicateDirector) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	syndicateDirectorUpdateCacheMut.RLock()
	cache, cached := syndicateDirectorUpdateCache[key]
	syndicateDirectorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			syndicateDirectorAllColumns,
			syndicateDirectorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update syndicate_directors, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"syndicate_directors\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, syndicateDirectorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(syndicateDirectorType, syndicateDirectorMapping, append(wl, syndicateDirectorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update syndicate_directors row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for syndicate_directors")
	}

	if !cached {
		syndicateDirectorUpdateCacheMut.Lock()
		syndicateDirectorUpdateCache[key] = cache
		syndicateDirectorUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q syndicateDirectorQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for syndicate_directors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for syndicate_directors")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SyndicateDirectorSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateDirectorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"syndicate_directors\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, syndicateDirectorPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in syndicateDirector slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all syndicateDirector")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SyndicateDirector) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no syndicate_directors provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syndicateDirectorColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	syndicateDirectorUpsertCacheMut.RLock()
	cache, cached := syndicateDirectorUpsertCache[key]
	syndicateDirectorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			syndicateDirectorAllColumns,
			syndicateDirectorColumnsWithDefault,
			syndicateDirectorColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			syndicateDirectorAllColumns,
			syndicateDirectorPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert syndicate_directors, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(syndicateDirectorPrimaryKeyColumns))
			copy(conflict, syndicateDirectorPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"syndicate_directors\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(syndicateDirectorType, syndicateDirectorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(syndicateDirectorType, syndicateDirectorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert syndicate_directors")
	}

	if !cached {
		syndicateDirectorUpsertCacheMut.Lock()
		syndicateDirectorUpsertCache[key] = cache
		syndicateDirectorUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single SyndicateDirector record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SyndicateDirector) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no SyndicateDirector provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), syndicateDirectorPrimaryKeyMapping)
	sql := "DELETE FROM \"syndicate_directors\" WHERE \"syndicate_id\"=$1 AND \"player_id\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from syndicate_directors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for syndicate_directors")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q syndicateDirectorQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no syndicateDirectorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from syndicate_directors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for syndicate_directors")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SyndicateDirectorSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(syndicateDirectorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateDirectorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"syndicate_directors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syndicateDirectorPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from syndicateDirector slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for syndicate_directors")
	}

	if len(syndicateDirectorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SyndicateDirector) Reload(exec boil.Executor) error {
	ret, err := FindSyndicateDirector(exec, o.SyndicateID, o.PlayerID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SyndicateDirectorSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SyndicateDirectorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateDirectorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"syndicate_directors\".* FROM \"syndicate_directors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syndicateDirectorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in SyndicateDirectorSlice")
	}

	*o = slice

	return nil
}

// SyndicateDirectorExists checks if the SyndicateDirector row exists.
func SyndicateDirectorExists(exec boil.Executor, syndicateID string, playerID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"syndicate_directors\" where \"syndicate_id\"=$1 AND \"player_id\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, syndicateID, playerID)
	}
	row := exec.QueryRow(sql, syndicateID, playerID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if syndicate_directors exists")
	}

	return exists, nil
}
