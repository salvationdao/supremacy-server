// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VoiceStream is an object representing the database table.
type VoiceStream struct {
	ID                 string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	OwnerID            string    `boiler:"owner_id" boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	FactionID          string    `boiler:"faction_id" boil:"faction_id" json:"faction_id" toml:"faction_id" yaml:"faction_id"`
	ListenStreamURL    string    `boiler:"listen_stream_url" boil:"listen_stream_url" json:"listen_stream_url" toml:"listen_stream_url" yaml:"listen_stream_url"`
	SendStreamURL      string    `boiler:"send_stream_url" boil:"send_stream_url" json:"send_stream_url" toml:"send_stream_url" yaml:"send_stream_url"`
	IsActive           bool      `boiler:"is_active" boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`
	IsFactionCommander bool      `boiler:"is_faction_commander" boil:"is_faction_commander" json:"is_faction_commander" toml:"is_faction_commander" yaml:"is_faction_commander"`
	SessionExpireAt    time.Time `boiler:"session_expire_at" boil:"session_expire_at" json:"session_expire_at" toml:"session_expire_at" yaml:"session_expire_at"`
	CreatedAt          time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *voiceStreamR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L voiceStreamL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VoiceStreamColumns = struct {
	ID                 string
	OwnerID            string
	FactionID          string
	ListenStreamURL    string
	SendStreamURL      string
	IsActive           string
	IsFactionCommander string
	SessionExpireAt    string
	CreatedAt          string
}{
	ID:                 "id",
	OwnerID:            "owner_id",
	FactionID:          "faction_id",
	ListenStreamURL:    "listen_stream_url",
	SendStreamURL:      "send_stream_url",
	IsActive:           "is_active",
	IsFactionCommander: "is_faction_commander",
	SessionExpireAt:    "session_expire_at",
	CreatedAt:          "created_at",
}

var VoiceStreamTableColumns = struct {
	ID                 string
	OwnerID            string
	FactionID          string
	ListenStreamURL    string
	SendStreamURL      string
	IsActive           string
	IsFactionCommander string
	SessionExpireAt    string
	CreatedAt          string
}{
	ID:                 "voice_streams.id",
	OwnerID:            "voice_streams.owner_id",
	FactionID:          "voice_streams.faction_id",
	ListenStreamURL:    "voice_streams.listen_stream_url",
	SendStreamURL:      "voice_streams.send_stream_url",
	IsActive:           "voice_streams.is_active",
	IsFactionCommander: "voice_streams.is_faction_commander",
	SessionExpireAt:    "voice_streams.session_expire_at",
	CreatedAt:          "voice_streams.created_at",
}

// Generated where

var VoiceStreamWhere = struct {
	ID                 whereHelperstring
	OwnerID            whereHelperstring
	FactionID          whereHelperstring
	ListenStreamURL    whereHelperstring
	SendStreamURL      whereHelperstring
	IsActive           whereHelperbool
	IsFactionCommander whereHelperbool
	SessionExpireAt    whereHelpertime_Time
	CreatedAt          whereHelpertime_Time
}{
	ID:                 whereHelperstring{field: "\"voice_streams\".\"id\""},
	OwnerID:            whereHelperstring{field: "\"voice_streams\".\"owner_id\""},
	FactionID:          whereHelperstring{field: "\"voice_streams\".\"faction_id\""},
	ListenStreamURL:    whereHelperstring{field: "\"voice_streams\".\"listen_stream_url\""},
	SendStreamURL:      whereHelperstring{field: "\"voice_streams\".\"send_stream_url\""},
	IsActive:           whereHelperbool{field: "\"voice_streams\".\"is_active\""},
	IsFactionCommander: whereHelperbool{field: "\"voice_streams\".\"is_faction_commander\""},
	SessionExpireAt:    whereHelpertime_Time{field: "\"voice_streams\".\"session_expire_at\""},
	CreatedAt:          whereHelpertime_Time{field: "\"voice_streams\".\"created_at\""},
}

// VoiceStreamRels is where relationship names are stored.
var VoiceStreamRels = struct {
	Faction string
	Owner   string
}{
	Faction: "Faction",
	Owner:   "Owner",
}

// voiceStreamR is where relationships are stored.
type voiceStreamR struct {
	Faction *Faction `boiler:"Faction" boil:"Faction" json:"Faction" toml:"Faction" yaml:"Faction"`
	Owner   *Player  `boiler:"Owner" boil:"Owner" json:"Owner" toml:"Owner" yaml:"Owner"`
}

// NewStruct creates a new relationship struct
func (*voiceStreamR) NewStruct() *voiceStreamR {
	return &voiceStreamR{}
}

// voiceStreamL is where Load methods for each relationship are stored.
type voiceStreamL struct{}

var (
	voiceStreamAllColumns            = []string{"id", "owner_id", "faction_id", "listen_stream_url", "send_stream_url", "is_active", "is_faction_commander", "session_expire_at", "created_at"}
	voiceStreamColumnsWithoutDefault = []string{"owner_id", "faction_id", "listen_stream_url", "send_stream_url", "is_faction_commander", "session_expire_at"}
	voiceStreamColumnsWithDefault    = []string{"id", "is_active", "created_at"}
	voiceStreamPrimaryKeyColumns     = []string{"id"}
	voiceStreamGeneratedColumns      = []string{}
)

type (
	// VoiceStreamSlice is an alias for a slice of pointers to VoiceStream.
	// This should almost always be used instead of []VoiceStream.
	VoiceStreamSlice []*VoiceStream
	// VoiceStreamHook is the signature for custom VoiceStream hook methods
	VoiceStreamHook func(boil.Executor, *VoiceStream) error

	voiceStreamQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	voiceStreamType                 = reflect.TypeOf(&VoiceStream{})
	voiceStreamMapping              = queries.MakeStructMapping(voiceStreamType)
	voiceStreamPrimaryKeyMapping, _ = queries.BindMapping(voiceStreamType, voiceStreamMapping, voiceStreamPrimaryKeyColumns)
	voiceStreamInsertCacheMut       sync.RWMutex
	voiceStreamInsertCache          = make(map[string]insertCache)
	voiceStreamUpdateCacheMut       sync.RWMutex
	voiceStreamUpdateCache          = make(map[string]updateCache)
	voiceStreamUpsertCacheMut       sync.RWMutex
	voiceStreamUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var voiceStreamAfterSelectHooks []VoiceStreamHook

var voiceStreamBeforeInsertHooks []VoiceStreamHook
var voiceStreamAfterInsertHooks []VoiceStreamHook

var voiceStreamBeforeUpdateHooks []VoiceStreamHook
var voiceStreamAfterUpdateHooks []VoiceStreamHook

var voiceStreamBeforeDeleteHooks []VoiceStreamHook
var voiceStreamAfterDeleteHooks []VoiceStreamHook

var voiceStreamBeforeUpsertHooks []VoiceStreamHook
var voiceStreamAfterUpsertHooks []VoiceStreamHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VoiceStream) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range voiceStreamAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VoiceStream) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range voiceStreamBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VoiceStream) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range voiceStreamAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VoiceStream) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range voiceStreamBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VoiceStream) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range voiceStreamAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VoiceStream) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range voiceStreamBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VoiceStream) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range voiceStreamAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VoiceStream) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range voiceStreamBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VoiceStream) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range voiceStreamAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVoiceStreamHook registers your hook function for all future operations.
func AddVoiceStreamHook(hookPoint boil.HookPoint, voiceStreamHook VoiceStreamHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		voiceStreamAfterSelectHooks = append(voiceStreamAfterSelectHooks, voiceStreamHook)
	case boil.BeforeInsertHook:
		voiceStreamBeforeInsertHooks = append(voiceStreamBeforeInsertHooks, voiceStreamHook)
	case boil.AfterInsertHook:
		voiceStreamAfterInsertHooks = append(voiceStreamAfterInsertHooks, voiceStreamHook)
	case boil.BeforeUpdateHook:
		voiceStreamBeforeUpdateHooks = append(voiceStreamBeforeUpdateHooks, voiceStreamHook)
	case boil.AfterUpdateHook:
		voiceStreamAfterUpdateHooks = append(voiceStreamAfterUpdateHooks, voiceStreamHook)
	case boil.BeforeDeleteHook:
		voiceStreamBeforeDeleteHooks = append(voiceStreamBeforeDeleteHooks, voiceStreamHook)
	case boil.AfterDeleteHook:
		voiceStreamAfterDeleteHooks = append(voiceStreamAfterDeleteHooks, voiceStreamHook)
	case boil.BeforeUpsertHook:
		voiceStreamBeforeUpsertHooks = append(voiceStreamBeforeUpsertHooks, voiceStreamHook)
	case boil.AfterUpsertHook:
		voiceStreamAfterUpsertHooks = append(voiceStreamAfterUpsertHooks, voiceStreamHook)
	}
}

// One returns a single voiceStream record from the query.
func (q voiceStreamQuery) One(exec boil.Executor) (*VoiceStream, error) {
	o := &VoiceStream{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for voice_streams")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VoiceStream records from the query.
func (q voiceStreamQuery) All(exec boil.Executor) (VoiceStreamSlice, error) {
	var o []*VoiceStream

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to VoiceStream slice")
	}

	if len(voiceStreamAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VoiceStream records in the query.
func (q voiceStreamQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count voice_streams rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q voiceStreamQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if voice_streams exists")
	}

	return count > 0, nil
}

// Faction pointed to by the foreign key.
func (o *VoiceStream) Faction(mods ...qm.QueryMod) factionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FactionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Factions(queryMods...)
	queries.SetFrom(query.Query, "\"factions\"")

	return query
}

// Owner pointed to by the foreign key.
func (o *VoiceStream) Owner(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OwnerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// LoadFaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (voiceStreamL) LoadFaction(e boil.Executor, singular bool, maybeVoiceStream interface{}, mods queries.Applicator) error {
	var slice []*VoiceStream
	var object *VoiceStream

	if singular {
		object = maybeVoiceStream.(*VoiceStream)
	} else {
		slice = *maybeVoiceStream.(*[]*VoiceStream)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &voiceStreamR{}
		}
		args = append(args, object.FactionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &voiceStreamR{}
			}

			for _, a := range args {
				if a == obj.FactionID {
					continue Outer
				}
			}

			args = append(args, obj.FactionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`factions`),
		qm.WhereIn(`factions.id in ?`, args...),
		qmhelper.WhereIsNull(`factions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Faction")
	}

	var resultSlice []*Faction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Faction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for factions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for factions")
	}

	if len(voiceStreamAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Faction = foreign
		if foreign.R == nil {
			foreign.R = &factionR{}
		}
		foreign.R.VoiceStreams = append(foreign.R.VoiceStreams, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FactionID == foreign.ID {
				local.R.Faction = foreign
				if foreign.R == nil {
					foreign.R = &factionR{}
				}
				foreign.R.VoiceStreams = append(foreign.R.VoiceStreams, local)
				break
			}
		}
	}

	return nil
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (voiceStreamL) LoadOwner(e boil.Executor, singular bool, maybeVoiceStream interface{}, mods queries.Applicator) error {
	var slice []*VoiceStream
	var object *VoiceStream

	if singular {
		object = maybeVoiceStream.(*VoiceStream)
	} else {
		slice = *maybeVoiceStream.(*[]*VoiceStream)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &voiceStreamR{}
		}
		args = append(args, object.OwnerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &voiceStreamR{}
			}

			for _, a := range args {
				if a == obj.OwnerID {
					continue Outer
				}
			}

			args = append(args, obj.OwnerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(voiceStreamAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Owner = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.OwnerVoiceStreams = append(foreign.R.OwnerVoiceStreams, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerID == foreign.ID {
				local.R.Owner = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.OwnerVoiceStreams = append(foreign.R.OwnerVoiceStreams, local)
				break
			}
		}
	}

	return nil
}

// SetFaction of the voiceStream to the related item.
// Sets o.R.Faction to related.
// Adds o to related.R.VoiceStreams.
func (o *VoiceStream) SetFaction(exec boil.Executor, insert bool, related *Faction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"voice_streams\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"faction_id"}),
		strmangle.WhereClause("\"", "\"", 2, voiceStreamPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FactionID = related.ID
	if o.R == nil {
		o.R = &voiceStreamR{
			Faction: related,
		}
	} else {
		o.R.Faction = related
	}

	if related.R == nil {
		related.R = &factionR{
			VoiceStreams: VoiceStreamSlice{o},
		}
	} else {
		related.R.VoiceStreams = append(related.R.VoiceStreams, o)
	}

	return nil
}

// SetOwner of the voiceStream to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerVoiceStreams.
func (o *VoiceStream) SetOwner(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"voice_streams\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
		strmangle.WhereClause("\"", "\"", 2, voiceStreamPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerID = related.ID
	if o.R == nil {
		o.R = &voiceStreamR{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &playerR{
			OwnerVoiceStreams: VoiceStreamSlice{o},
		}
	} else {
		related.R.OwnerVoiceStreams = append(related.R.OwnerVoiceStreams, o)
	}

	return nil
}

// VoiceStreams retrieves all the records using an executor.
func VoiceStreams(mods ...qm.QueryMod) voiceStreamQuery {
	mods = append(mods, qm.From("\"voice_streams\""))
	return voiceStreamQuery{NewQuery(mods...)}
}

// FindVoiceStream retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVoiceStream(exec boil.Executor, iD string, selectCols ...string) (*VoiceStream, error) {
	voiceStreamObj := &VoiceStream{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"voice_streams\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, voiceStreamObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from voice_streams")
	}

	if err = voiceStreamObj.doAfterSelectHooks(exec); err != nil {
		return voiceStreamObj, err
	}

	return voiceStreamObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VoiceStream) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no voice_streams provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(voiceStreamColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	voiceStreamInsertCacheMut.RLock()
	cache, cached := voiceStreamInsertCache[key]
	voiceStreamInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			voiceStreamAllColumns,
			voiceStreamColumnsWithDefault,
			voiceStreamColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(voiceStreamType, voiceStreamMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(voiceStreamType, voiceStreamMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"voice_streams\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"voice_streams\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into voice_streams")
	}

	if !cached {
		voiceStreamInsertCacheMut.Lock()
		voiceStreamInsertCache[key] = cache
		voiceStreamInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the VoiceStream.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VoiceStream) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	voiceStreamUpdateCacheMut.RLock()
	cache, cached := voiceStreamUpdateCache[key]
	voiceStreamUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			voiceStreamAllColumns,
			voiceStreamPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update voice_streams, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"voice_streams\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, voiceStreamPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(voiceStreamType, voiceStreamMapping, append(wl, voiceStreamPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update voice_streams row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for voice_streams")
	}

	if !cached {
		voiceStreamUpdateCacheMut.Lock()
		voiceStreamUpdateCache[key] = cache
		voiceStreamUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q voiceStreamQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for voice_streams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for voice_streams")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VoiceStreamSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voiceStreamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"voice_streams\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, voiceStreamPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in voiceStream slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all voiceStream")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VoiceStream) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no voice_streams provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(voiceStreamColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	voiceStreamUpsertCacheMut.RLock()
	cache, cached := voiceStreamUpsertCache[key]
	voiceStreamUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			voiceStreamAllColumns,
			voiceStreamColumnsWithDefault,
			voiceStreamColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			voiceStreamAllColumns,
			voiceStreamPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert voice_streams, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(voiceStreamPrimaryKeyColumns))
			copy(conflict, voiceStreamPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"voice_streams\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(voiceStreamType, voiceStreamMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(voiceStreamType, voiceStreamMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert voice_streams")
	}

	if !cached {
		voiceStreamUpsertCacheMut.Lock()
		voiceStreamUpsertCache[key] = cache
		voiceStreamUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single VoiceStream record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VoiceStream) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no VoiceStream provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), voiceStreamPrimaryKeyMapping)
	sql := "DELETE FROM \"voice_streams\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from voice_streams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for voice_streams")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q voiceStreamQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no voiceStreamQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from voice_streams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for voice_streams")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VoiceStreamSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(voiceStreamBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voiceStreamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"voice_streams\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, voiceStreamPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from voiceStream slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for voice_streams")
	}

	if len(voiceStreamAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VoiceStream) Reload(exec boil.Executor) error {
	ret, err := FindVoiceStream(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VoiceStreamSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VoiceStreamSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voiceStreamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"voice_streams\".* FROM \"voice_streams\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, voiceStreamPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in VoiceStreamSlice")
	}

	*o = slice

	return nil
}

// VoiceStreamExists checks if the VoiceStream row exists.
func VoiceStreamExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"voice_streams\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if voice_streams exists")
	}

	return exists, nil
}
