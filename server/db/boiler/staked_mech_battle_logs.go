// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// StakedMechBattleLog is an object representing the database table.
type StakedMechBattleLog struct {
	ID           string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BattleID     string    `boiler:"battle_id" boil:"battle_id" json:"battle_id" toml:"battle_id" yaml:"battle_id"`
	StakedMechID string    `boiler:"staked_mech_id" boil:"staked_mech_id" json:"staked_mech_id" toml:"staked_mech_id" yaml:"staked_mech_id"`
	OwnerID      string    `boiler:"owner_id" boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	FactionID    string    `boiler:"faction_id" boil:"faction_id" json:"faction_id" toml:"faction_id" yaml:"faction_id"`
	CreatedAt    time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt    null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *stakedMechBattleLogR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L stakedMechBattleLogL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StakedMechBattleLogColumns = struct {
	ID           string
	BattleID     string
	StakedMechID string
	OwnerID      string
	FactionID    string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
}{
	ID:           "id",
	BattleID:     "battle_id",
	StakedMechID: "staked_mech_id",
	OwnerID:      "owner_id",
	FactionID:    "faction_id",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	DeletedAt:    "deleted_at",
}

var StakedMechBattleLogTableColumns = struct {
	ID           string
	BattleID     string
	StakedMechID string
	OwnerID      string
	FactionID    string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
}{
	ID:           "staked_mech_battle_logs.id",
	BattleID:     "staked_mech_battle_logs.battle_id",
	StakedMechID: "staked_mech_battle_logs.staked_mech_id",
	OwnerID:      "staked_mech_battle_logs.owner_id",
	FactionID:    "staked_mech_battle_logs.faction_id",
	CreatedAt:    "staked_mech_battle_logs.created_at",
	UpdatedAt:    "staked_mech_battle_logs.updated_at",
	DeletedAt:    "staked_mech_battle_logs.deleted_at",
}

// Generated where

var StakedMechBattleLogWhere = struct {
	ID           whereHelperstring
	BattleID     whereHelperstring
	StakedMechID whereHelperstring
	OwnerID      whereHelperstring
	FactionID    whereHelperstring
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	DeletedAt    whereHelpernull_Time
}{
	ID:           whereHelperstring{field: "\"staked_mech_battle_logs\".\"id\""},
	BattleID:     whereHelperstring{field: "\"staked_mech_battle_logs\".\"battle_id\""},
	StakedMechID: whereHelperstring{field: "\"staked_mech_battle_logs\".\"staked_mech_id\""},
	OwnerID:      whereHelperstring{field: "\"staked_mech_battle_logs\".\"owner_id\""},
	FactionID:    whereHelperstring{field: "\"staked_mech_battle_logs\".\"faction_id\""},
	CreatedAt:    whereHelpertime_Time{field: "\"staked_mech_battle_logs\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"staked_mech_battle_logs\".\"updated_at\""},
	DeletedAt:    whereHelpernull_Time{field: "\"staked_mech_battle_logs\".\"deleted_at\""},
}

// StakedMechBattleLogRels is where relationship names are stored.
var StakedMechBattleLogRels = struct {
	Battle     string
	Faction    string
	Owner      string
	StakedMech string
}{
	Battle:     "Battle",
	Faction:    "Faction",
	Owner:      "Owner",
	StakedMech: "StakedMech",
}

// stakedMechBattleLogR is where relationships are stored.
type stakedMechBattleLogR struct {
	Battle     *Battle  `boiler:"Battle" boil:"Battle" json:"Battle" toml:"Battle" yaml:"Battle"`
	Faction    *Faction `boiler:"Faction" boil:"Faction" json:"Faction" toml:"Faction" yaml:"Faction"`
	Owner      *Player  `boiler:"Owner" boil:"Owner" json:"Owner" toml:"Owner" yaml:"Owner"`
	StakedMech *Mech    `boiler:"StakedMech" boil:"StakedMech" json:"StakedMech" toml:"StakedMech" yaml:"StakedMech"`
}

// NewStruct creates a new relationship struct
func (*stakedMechBattleLogR) NewStruct() *stakedMechBattleLogR {
	return &stakedMechBattleLogR{}
}

// stakedMechBattleLogL is where Load methods for each relationship are stored.
type stakedMechBattleLogL struct{}

var (
	stakedMechBattleLogAllColumns            = []string{"id", "battle_id", "staked_mech_id", "owner_id", "faction_id", "created_at", "updated_at", "deleted_at"}
	stakedMechBattleLogColumnsWithoutDefault = []string{"battle_id", "staked_mech_id", "owner_id", "faction_id"}
	stakedMechBattleLogColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at"}
	stakedMechBattleLogPrimaryKeyColumns     = []string{"id"}
	stakedMechBattleLogGeneratedColumns      = []string{}
)

type (
	// StakedMechBattleLogSlice is an alias for a slice of pointers to StakedMechBattleLog.
	// This should almost always be used instead of []StakedMechBattleLog.
	StakedMechBattleLogSlice []*StakedMechBattleLog
	// StakedMechBattleLogHook is the signature for custom StakedMechBattleLog hook methods
	StakedMechBattleLogHook func(boil.Executor, *StakedMechBattleLog) error

	stakedMechBattleLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	stakedMechBattleLogType                 = reflect.TypeOf(&StakedMechBattleLog{})
	stakedMechBattleLogMapping              = queries.MakeStructMapping(stakedMechBattleLogType)
	stakedMechBattleLogPrimaryKeyMapping, _ = queries.BindMapping(stakedMechBattleLogType, stakedMechBattleLogMapping, stakedMechBattleLogPrimaryKeyColumns)
	stakedMechBattleLogInsertCacheMut       sync.RWMutex
	stakedMechBattleLogInsertCache          = make(map[string]insertCache)
	stakedMechBattleLogUpdateCacheMut       sync.RWMutex
	stakedMechBattleLogUpdateCache          = make(map[string]updateCache)
	stakedMechBattleLogUpsertCacheMut       sync.RWMutex
	stakedMechBattleLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var stakedMechBattleLogAfterSelectHooks []StakedMechBattleLogHook

var stakedMechBattleLogBeforeInsertHooks []StakedMechBattleLogHook
var stakedMechBattleLogAfterInsertHooks []StakedMechBattleLogHook

var stakedMechBattleLogBeforeUpdateHooks []StakedMechBattleLogHook
var stakedMechBattleLogAfterUpdateHooks []StakedMechBattleLogHook

var stakedMechBattleLogBeforeDeleteHooks []StakedMechBattleLogHook
var stakedMechBattleLogAfterDeleteHooks []StakedMechBattleLogHook

var stakedMechBattleLogBeforeUpsertHooks []StakedMechBattleLogHook
var stakedMechBattleLogAfterUpsertHooks []StakedMechBattleLogHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StakedMechBattleLog) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range stakedMechBattleLogAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StakedMechBattleLog) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range stakedMechBattleLogBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StakedMechBattleLog) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range stakedMechBattleLogAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StakedMechBattleLog) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range stakedMechBattleLogBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StakedMechBattleLog) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range stakedMechBattleLogAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StakedMechBattleLog) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range stakedMechBattleLogBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StakedMechBattleLog) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range stakedMechBattleLogAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StakedMechBattleLog) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range stakedMechBattleLogBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StakedMechBattleLog) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range stakedMechBattleLogAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStakedMechBattleLogHook registers your hook function for all future operations.
func AddStakedMechBattleLogHook(hookPoint boil.HookPoint, stakedMechBattleLogHook StakedMechBattleLogHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		stakedMechBattleLogAfterSelectHooks = append(stakedMechBattleLogAfterSelectHooks, stakedMechBattleLogHook)
	case boil.BeforeInsertHook:
		stakedMechBattleLogBeforeInsertHooks = append(stakedMechBattleLogBeforeInsertHooks, stakedMechBattleLogHook)
	case boil.AfterInsertHook:
		stakedMechBattleLogAfterInsertHooks = append(stakedMechBattleLogAfterInsertHooks, stakedMechBattleLogHook)
	case boil.BeforeUpdateHook:
		stakedMechBattleLogBeforeUpdateHooks = append(stakedMechBattleLogBeforeUpdateHooks, stakedMechBattleLogHook)
	case boil.AfterUpdateHook:
		stakedMechBattleLogAfterUpdateHooks = append(stakedMechBattleLogAfterUpdateHooks, stakedMechBattleLogHook)
	case boil.BeforeDeleteHook:
		stakedMechBattleLogBeforeDeleteHooks = append(stakedMechBattleLogBeforeDeleteHooks, stakedMechBattleLogHook)
	case boil.AfterDeleteHook:
		stakedMechBattleLogAfterDeleteHooks = append(stakedMechBattleLogAfterDeleteHooks, stakedMechBattleLogHook)
	case boil.BeforeUpsertHook:
		stakedMechBattleLogBeforeUpsertHooks = append(stakedMechBattleLogBeforeUpsertHooks, stakedMechBattleLogHook)
	case boil.AfterUpsertHook:
		stakedMechBattleLogAfterUpsertHooks = append(stakedMechBattleLogAfterUpsertHooks, stakedMechBattleLogHook)
	}
}

// One returns a single stakedMechBattleLog record from the query.
func (q stakedMechBattleLogQuery) One(exec boil.Executor) (*StakedMechBattleLog, error) {
	o := &StakedMechBattleLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for staked_mech_battle_logs")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StakedMechBattleLog records from the query.
func (q stakedMechBattleLogQuery) All(exec boil.Executor) (StakedMechBattleLogSlice, error) {
	var o []*StakedMechBattleLog

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to StakedMechBattleLog slice")
	}

	if len(stakedMechBattleLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StakedMechBattleLog records in the query.
func (q stakedMechBattleLogQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count staked_mech_battle_logs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q stakedMechBattleLogQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if staked_mech_battle_logs exists")
	}

	return count > 0, nil
}

// Battle pointed to by the foreign key.
func (o *StakedMechBattleLog) Battle(mods ...qm.QueryMod) battleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BattleID),
	}

	queryMods = append(queryMods, mods...)

	query := Battles(queryMods...)
	queries.SetFrom(query.Query, "\"battles\"")

	return query
}

// Faction pointed to by the foreign key.
func (o *StakedMechBattleLog) Faction(mods ...qm.QueryMod) factionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FactionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Factions(queryMods...)
	queries.SetFrom(query.Query, "\"factions\"")

	return query
}

// Owner pointed to by the foreign key.
func (o *StakedMechBattleLog) Owner(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OwnerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// StakedMech pointed to by the foreign key.
func (o *StakedMechBattleLog) StakedMech(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.StakedMechID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// LoadBattle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stakedMechBattleLogL) LoadBattle(e boil.Executor, singular bool, maybeStakedMechBattleLog interface{}, mods queries.Applicator) error {
	var slice []*StakedMechBattleLog
	var object *StakedMechBattleLog

	if singular {
		object = maybeStakedMechBattleLog.(*StakedMechBattleLog)
	} else {
		slice = *maybeStakedMechBattleLog.(*[]*StakedMechBattleLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stakedMechBattleLogR{}
		}
		args = append(args, object.BattleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stakedMechBattleLogR{}
			}

			for _, a := range args {
				if a == obj.BattleID {
					continue Outer
				}
			}

			args = append(args, obj.BattleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battles`),
		qm.WhereIn(`battles.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Battle")
	}

	var resultSlice []*Battle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Battle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battles")
	}

	if len(stakedMechBattleLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Battle = foreign
		if foreign.R == nil {
			foreign.R = &battleR{}
		}
		foreign.R.StakedMechBattleLogs = append(foreign.R.StakedMechBattleLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BattleID == foreign.ID {
				local.R.Battle = foreign
				if foreign.R == nil {
					foreign.R = &battleR{}
				}
				foreign.R.StakedMechBattleLogs = append(foreign.R.StakedMechBattleLogs, local)
				break
			}
		}
	}

	return nil
}

// LoadFaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stakedMechBattleLogL) LoadFaction(e boil.Executor, singular bool, maybeStakedMechBattleLog interface{}, mods queries.Applicator) error {
	var slice []*StakedMechBattleLog
	var object *StakedMechBattleLog

	if singular {
		object = maybeStakedMechBattleLog.(*StakedMechBattleLog)
	} else {
		slice = *maybeStakedMechBattleLog.(*[]*StakedMechBattleLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stakedMechBattleLogR{}
		}
		args = append(args, object.FactionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stakedMechBattleLogR{}
			}

			for _, a := range args {
				if a == obj.FactionID {
					continue Outer
				}
			}

			args = append(args, obj.FactionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`factions`),
		qm.WhereIn(`factions.id in ?`, args...),
		qmhelper.WhereIsNull(`factions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Faction")
	}

	var resultSlice []*Faction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Faction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for factions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for factions")
	}

	if len(stakedMechBattleLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Faction = foreign
		if foreign.R == nil {
			foreign.R = &factionR{}
		}
		foreign.R.StakedMechBattleLogs = append(foreign.R.StakedMechBattleLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FactionID == foreign.ID {
				local.R.Faction = foreign
				if foreign.R == nil {
					foreign.R = &factionR{}
				}
				foreign.R.StakedMechBattleLogs = append(foreign.R.StakedMechBattleLogs, local)
				break
			}
		}
	}

	return nil
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stakedMechBattleLogL) LoadOwner(e boil.Executor, singular bool, maybeStakedMechBattleLog interface{}, mods queries.Applicator) error {
	var slice []*StakedMechBattleLog
	var object *StakedMechBattleLog

	if singular {
		object = maybeStakedMechBattleLog.(*StakedMechBattleLog)
	} else {
		slice = *maybeStakedMechBattleLog.(*[]*StakedMechBattleLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stakedMechBattleLogR{}
		}
		args = append(args, object.OwnerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stakedMechBattleLogR{}
			}

			for _, a := range args {
				if a == obj.OwnerID {
					continue Outer
				}
			}

			args = append(args, obj.OwnerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(stakedMechBattleLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Owner = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.OwnerStakedMechBattleLogs = append(foreign.R.OwnerStakedMechBattleLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerID == foreign.ID {
				local.R.Owner = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.OwnerStakedMechBattleLogs = append(foreign.R.OwnerStakedMechBattleLogs, local)
				break
			}
		}
	}

	return nil
}

// LoadStakedMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (stakedMechBattleLogL) LoadStakedMech(e boil.Executor, singular bool, maybeStakedMechBattleLog interface{}, mods queries.Applicator) error {
	var slice []*StakedMechBattleLog
	var object *StakedMechBattleLog

	if singular {
		object = maybeStakedMechBattleLog.(*StakedMechBattleLog)
	} else {
		slice = *maybeStakedMechBattleLog.(*[]*StakedMechBattleLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &stakedMechBattleLogR{}
		}
		args = append(args, object.StakedMechID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stakedMechBattleLogR{}
			}

			for _, a := range args {
				if a == obj.StakedMechID {
					continue Outer
				}
			}

			args = append(args, obj.StakedMechID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(stakedMechBattleLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.StakedMech = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.StakedMechStakedMechBattleLogs = append(foreign.R.StakedMechStakedMechBattleLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StakedMechID == foreign.ID {
				local.R.StakedMech = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.StakedMechStakedMechBattleLogs = append(foreign.R.StakedMechStakedMechBattleLogs, local)
				break
			}
		}
	}

	return nil
}

// SetBattle of the stakedMechBattleLog to the related item.
// Sets o.R.Battle to related.
// Adds o to related.R.StakedMechBattleLogs.
func (o *StakedMechBattleLog) SetBattle(exec boil.Executor, insert bool, related *Battle) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"staked_mech_battle_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
		strmangle.WhereClause("\"", "\"", 2, stakedMechBattleLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BattleID = related.ID
	if o.R == nil {
		o.R = &stakedMechBattleLogR{
			Battle: related,
		}
	} else {
		o.R.Battle = related
	}

	if related.R == nil {
		related.R = &battleR{
			StakedMechBattleLogs: StakedMechBattleLogSlice{o},
		}
	} else {
		related.R.StakedMechBattleLogs = append(related.R.StakedMechBattleLogs, o)
	}

	return nil
}

// SetFaction of the stakedMechBattleLog to the related item.
// Sets o.R.Faction to related.
// Adds o to related.R.StakedMechBattleLogs.
func (o *StakedMechBattleLog) SetFaction(exec boil.Executor, insert bool, related *Faction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"staked_mech_battle_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"faction_id"}),
		strmangle.WhereClause("\"", "\"", 2, stakedMechBattleLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FactionID = related.ID
	if o.R == nil {
		o.R = &stakedMechBattleLogR{
			Faction: related,
		}
	} else {
		o.R.Faction = related
	}

	if related.R == nil {
		related.R = &factionR{
			StakedMechBattleLogs: StakedMechBattleLogSlice{o},
		}
	} else {
		related.R.StakedMechBattleLogs = append(related.R.StakedMechBattleLogs, o)
	}

	return nil
}

// SetOwner of the stakedMechBattleLog to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerStakedMechBattleLogs.
func (o *StakedMechBattleLog) SetOwner(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"staked_mech_battle_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
		strmangle.WhereClause("\"", "\"", 2, stakedMechBattleLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerID = related.ID
	if o.R == nil {
		o.R = &stakedMechBattleLogR{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &playerR{
			OwnerStakedMechBattleLogs: StakedMechBattleLogSlice{o},
		}
	} else {
		related.R.OwnerStakedMechBattleLogs = append(related.R.OwnerStakedMechBattleLogs, o)
	}

	return nil
}

// SetStakedMech of the stakedMechBattleLog to the related item.
// Sets o.R.StakedMech to related.
// Adds o to related.R.StakedMechStakedMechBattleLogs.
func (o *StakedMechBattleLog) SetStakedMech(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"staked_mech_battle_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"staked_mech_id"}),
		strmangle.WhereClause("\"", "\"", 2, stakedMechBattleLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StakedMechID = related.ID
	if o.R == nil {
		o.R = &stakedMechBattleLogR{
			StakedMech: related,
		}
	} else {
		o.R.StakedMech = related
	}

	if related.R == nil {
		related.R = &mechR{
			StakedMechStakedMechBattleLogs: StakedMechBattleLogSlice{o},
		}
	} else {
		related.R.StakedMechStakedMechBattleLogs = append(related.R.StakedMechStakedMechBattleLogs, o)
	}

	return nil
}

// StakedMechBattleLogs retrieves all the records using an executor.
func StakedMechBattleLogs(mods ...qm.QueryMod) stakedMechBattleLogQuery {
	mods = append(mods, qm.From("\"staked_mech_battle_logs\""), qmhelper.WhereIsNull("\"staked_mech_battle_logs\".\"deleted_at\""))
	return stakedMechBattleLogQuery{NewQuery(mods...)}
}

// FindStakedMechBattleLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStakedMechBattleLog(exec boil.Executor, iD string, selectCols ...string) (*StakedMechBattleLog, error) {
	stakedMechBattleLogObj := &StakedMechBattleLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"staked_mech_battle_logs\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, stakedMechBattleLogObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from staked_mech_battle_logs")
	}

	if err = stakedMechBattleLogObj.doAfterSelectHooks(exec); err != nil {
		return stakedMechBattleLogObj, err
	}

	return stakedMechBattleLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StakedMechBattleLog) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no staked_mech_battle_logs provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stakedMechBattleLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	stakedMechBattleLogInsertCacheMut.RLock()
	cache, cached := stakedMechBattleLogInsertCache[key]
	stakedMechBattleLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			stakedMechBattleLogAllColumns,
			stakedMechBattleLogColumnsWithDefault,
			stakedMechBattleLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(stakedMechBattleLogType, stakedMechBattleLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(stakedMechBattleLogType, stakedMechBattleLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"staked_mech_battle_logs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"staked_mech_battle_logs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into staked_mech_battle_logs")
	}

	if !cached {
		stakedMechBattleLogInsertCacheMut.Lock()
		stakedMechBattleLogInsertCache[key] = cache
		stakedMechBattleLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the StakedMechBattleLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StakedMechBattleLog) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	stakedMechBattleLogUpdateCacheMut.RLock()
	cache, cached := stakedMechBattleLogUpdateCache[key]
	stakedMechBattleLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			stakedMechBattleLogAllColumns,
			stakedMechBattleLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update staked_mech_battle_logs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"staked_mech_battle_logs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, stakedMechBattleLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(stakedMechBattleLogType, stakedMechBattleLogMapping, append(wl, stakedMechBattleLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update staked_mech_battle_logs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for staked_mech_battle_logs")
	}

	if !cached {
		stakedMechBattleLogUpdateCacheMut.Lock()
		stakedMechBattleLogUpdateCache[key] = cache
		stakedMechBattleLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q stakedMechBattleLogQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for staked_mech_battle_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for staked_mech_battle_logs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StakedMechBattleLogSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stakedMechBattleLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"staked_mech_battle_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, stakedMechBattleLogPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in stakedMechBattleLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all stakedMechBattleLog")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StakedMechBattleLog) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no staked_mech_battle_logs provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(stakedMechBattleLogColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	stakedMechBattleLogUpsertCacheMut.RLock()
	cache, cached := stakedMechBattleLogUpsertCache[key]
	stakedMechBattleLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			stakedMechBattleLogAllColumns,
			stakedMechBattleLogColumnsWithDefault,
			stakedMechBattleLogColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			stakedMechBattleLogAllColumns,
			stakedMechBattleLogPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert staked_mech_battle_logs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(stakedMechBattleLogPrimaryKeyColumns))
			copy(conflict, stakedMechBattleLogPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"staked_mech_battle_logs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(stakedMechBattleLogType, stakedMechBattleLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(stakedMechBattleLogType, stakedMechBattleLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert staked_mech_battle_logs")
	}

	if !cached {
		stakedMechBattleLogUpsertCacheMut.Lock()
		stakedMechBattleLogUpsertCache[key] = cache
		stakedMechBattleLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single StakedMechBattleLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StakedMechBattleLog) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no StakedMechBattleLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), stakedMechBattleLogPrimaryKeyMapping)
		sql = "DELETE FROM \"staked_mech_battle_logs\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"staked_mech_battle_logs\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(stakedMechBattleLogType, stakedMechBattleLogMapping, append(wl, stakedMechBattleLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from staked_mech_battle_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for staked_mech_battle_logs")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q stakedMechBattleLogQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no stakedMechBattleLogQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from staked_mech_battle_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for staked_mech_battle_logs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StakedMechBattleLogSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(stakedMechBattleLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stakedMechBattleLogPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"staked_mech_battle_logs\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stakedMechBattleLogPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stakedMechBattleLogPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"staked_mech_battle_logs\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, stakedMechBattleLogPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from stakedMechBattleLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for staked_mech_battle_logs")
	}

	if len(stakedMechBattleLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StakedMechBattleLog) Reload(exec boil.Executor) error {
	ret, err := FindStakedMechBattleLog(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StakedMechBattleLogSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StakedMechBattleLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stakedMechBattleLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"staked_mech_battle_logs\".* FROM \"staked_mech_battle_logs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stakedMechBattleLogPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in StakedMechBattleLogSlice")
	}

	*o = slice

	return nil
}

// StakedMechBattleLogExists checks if the StakedMechBattleLog row exists.
func StakedMechBattleLogExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"staked_mech_battle_logs\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if staked_mech_battle_logs exists")
	}

	return exists, nil
}
