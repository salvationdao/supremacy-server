// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MechModel is an object representing the database table.
type MechModel struct {
	ID                   string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Label                string      `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	CreatedAt            time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DefaultChassisSkinID null.String `boiler:"default_chassis_skin_id" boil:"default_chassis_skin_id" json:"default_chassis_skin_id,omitempty" toml:"default_chassis_skin_id" yaml:"default_chassis_skin_id,omitempty"`

	R *mechModelR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L mechModelL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MechModelColumns = struct {
	ID                   string
	Label                string
	CreatedAt            string
	DefaultChassisSkinID string
}{
	ID:                   "id",
	Label:                "label",
	CreatedAt:            "created_at",
	DefaultChassisSkinID: "default_chassis_skin_id",
}

var MechModelTableColumns = struct {
	ID                   string
	Label                string
	CreatedAt            string
	DefaultChassisSkinID string
}{
	ID:                   "mech_model.id",
	Label:                "mech_model.label",
	CreatedAt:            "mech_model.created_at",
	DefaultChassisSkinID: "mech_model.default_chassis_skin_id",
}

// Generated where

var MechModelWhere = struct {
	ID                   whereHelperstring
	Label                whereHelperstring
	CreatedAt            whereHelpertime_Time
	DefaultChassisSkinID whereHelpernull_String
}{
	ID:                   whereHelperstring{field: "\"mech_model\".\"id\""},
	Label:                whereHelperstring{field: "\"mech_model\".\"label\""},
	CreatedAt:            whereHelpertime_Time{field: "\"mech_model\".\"created_at\""},
	DefaultChassisSkinID: whereHelpernull_String{field: "\"mech_model\".\"default_chassis_skin_id\""},
}

// MechModelRels is where relationship names are stored.
var MechModelRels = struct {
	DefaultChassisSkin                  string
	ChassisModelBlueprintMechAnimations string
	ChassisModelBlueprintMechSkins      string
	ModelBlueprintMechs                 string
	ChassisModelMechAnimations          string
	ChassisModelMechSkins               string
	ModelMechs                          string
}{
	DefaultChassisSkin:                  "DefaultChassisSkin",
	ChassisModelBlueprintMechAnimations: "ChassisModelBlueprintMechAnimations",
	ChassisModelBlueprintMechSkins:      "ChassisModelBlueprintMechSkins",
	ModelBlueprintMechs:                 "ModelBlueprintMechs",
	ChassisModelMechAnimations:          "ChassisModelMechAnimations",
	ChassisModelMechSkins:               "ChassisModelMechSkins",
	ModelMechs:                          "ModelMechs",
}

// mechModelR is where relationships are stored.
type mechModelR struct {
	DefaultChassisSkin                  *BlueprintMechSkin          `boiler:"DefaultChassisSkin" boil:"DefaultChassisSkin" json:"DefaultChassisSkin" toml:"DefaultChassisSkin" yaml:"DefaultChassisSkin"`
	ChassisModelBlueprintMechAnimations BlueprintMechAnimationSlice `boiler:"ChassisModelBlueprintMechAnimations" boil:"ChassisModelBlueprintMechAnimations" json:"ChassisModelBlueprintMechAnimations" toml:"ChassisModelBlueprintMechAnimations" yaml:"ChassisModelBlueprintMechAnimations"`
	ChassisModelBlueprintMechSkins      BlueprintMechSkinSlice      `boiler:"ChassisModelBlueprintMechSkins" boil:"ChassisModelBlueprintMechSkins" json:"ChassisModelBlueprintMechSkins" toml:"ChassisModelBlueprintMechSkins" yaml:"ChassisModelBlueprintMechSkins"`
	ModelBlueprintMechs                 BlueprintMechSlice          `boiler:"ModelBlueprintMechs" boil:"ModelBlueprintMechs" json:"ModelBlueprintMechs" toml:"ModelBlueprintMechs" yaml:"ModelBlueprintMechs"`
	ChassisModelMechAnimations          MechAnimationSlice          `boiler:"ChassisModelMechAnimations" boil:"ChassisModelMechAnimations" json:"ChassisModelMechAnimations" toml:"ChassisModelMechAnimations" yaml:"ChassisModelMechAnimations"`
	ChassisModelMechSkins               MechSkinSlice               `boiler:"ChassisModelMechSkins" boil:"ChassisModelMechSkins" json:"ChassisModelMechSkins" toml:"ChassisModelMechSkins" yaml:"ChassisModelMechSkins"`
	ModelMechs                          MechSlice                   `boiler:"ModelMechs" boil:"ModelMechs" json:"ModelMechs" toml:"ModelMechs" yaml:"ModelMechs"`
}

// NewStruct creates a new relationship struct
func (*mechModelR) NewStruct() *mechModelR {
	return &mechModelR{}
}

// mechModelL is where Load methods for each relationship are stored.
type mechModelL struct{}

var (
	mechModelAllColumns            = []string{"id", "label", "created_at", "default_chassis_skin_id"}
	mechModelColumnsWithoutDefault = []string{"label"}
	mechModelColumnsWithDefault    = []string{"id", "created_at", "default_chassis_skin_id"}
	mechModelPrimaryKeyColumns     = []string{"id"}
	mechModelGeneratedColumns      = []string{}
)

type (
	// MechModelSlice is an alias for a slice of pointers to MechModel.
	// This should almost always be used instead of []MechModel.
	MechModelSlice []*MechModel
	// MechModelHook is the signature for custom MechModel hook methods
	MechModelHook func(boil.Executor, *MechModel) error

	mechModelQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mechModelType                 = reflect.TypeOf(&MechModel{})
	mechModelMapping              = queries.MakeStructMapping(mechModelType)
	mechModelPrimaryKeyMapping, _ = queries.BindMapping(mechModelType, mechModelMapping, mechModelPrimaryKeyColumns)
	mechModelInsertCacheMut       sync.RWMutex
	mechModelInsertCache          = make(map[string]insertCache)
	mechModelUpdateCacheMut       sync.RWMutex
	mechModelUpdateCache          = make(map[string]updateCache)
	mechModelUpsertCacheMut       sync.RWMutex
	mechModelUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mechModelAfterSelectHooks []MechModelHook

var mechModelBeforeInsertHooks []MechModelHook
var mechModelAfterInsertHooks []MechModelHook

var mechModelBeforeUpdateHooks []MechModelHook
var mechModelAfterUpdateHooks []MechModelHook

var mechModelBeforeDeleteHooks []MechModelHook
var mechModelAfterDeleteHooks []MechModelHook

var mechModelBeforeUpsertHooks []MechModelHook
var mechModelAfterUpsertHooks []MechModelHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MechModel) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range mechModelAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MechModel) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechModelBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MechModel) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechModelAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MechModel) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechModelBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MechModel) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechModelAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MechModel) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechModelBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MechModel) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechModelAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MechModel) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechModelBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MechModel) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechModelAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMechModelHook registers your hook function for all future operations.
func AddMechModelHook(hookPoint boil.HookPoint, mechModelHook MechModelHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mechModelAfterSelectHooks = append(mechModelAfterSelectHooks, mechModelHook)
	case boil.BeforeInsertHook:
		mechModelBeforeInsertHooks = append(mechModelBeforeInsertHooks, mechModelHook)
	case boil.AfterInsertHook:
		mechModelAfterInsertHooks = append(mechModelAfterInsertHooks, mechModelHook)
	case boil.BeforeUpdateHook:
		mechModelBeforeUpdateHooks = append(mechModelBeforeUpdateHooks, mechModelHook)
	case boil.AfterUpdateHook:
		mechModelAfterUpdateHooks = append(mechModelAfterUpdateHooks, mechModelHook)
	case boil.BeforeDeleteHook:
		mechModelBeforeDeleteHooks = append(mechModelBeforeDeleteHooks, mechModelHook)
	case boil.AfterDeleteHook:
		mechModelAfterDeleteHooks = append(mechModelAfterDeleteHooks, mechModelHook)
	case boil.BeforeUpsertHook:
		mechModelBeforeUpsertHooks = append(mechModelBeforeUpsertHooks, mechModelHook)
	case boil.AfterUpsertHook:
		mechModelAfterUpsertHooks = append(mechModelAfterUpsertHooks, mechModelHook)
	}
}

// One returns a single mechModel record from the query.
func (q mechModelQuery) One(exec boil.Executor) (*MechModel, error) {
	o := &MechModel{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for mech_model")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MechModel records from the query.
func (q mechModelQuery) All(exec boil.Executor) (MechModelSlice, error) {
	var o []*MechModel

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to MechModel slice")
	}

	if len(mechModelAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MechModel records in the query.
func (q mechModelQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count mech_model rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mechModelQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if mech_model exists")
	}

	return count > 0, nil
}

// DefaultChassisSkin pointed to by the foreign key.
func (o *MechModel) DefaultChassisSkin(mods ...qm.QueryMod) blueprintMechSkinQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DefaultChassisSkinID),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintMechSkins(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_mech_skin\"")

	return query
}

// ChassisModelBlueprintMechAnimations retrieves all the blueprint_mech_animation's BlueprintMechAnimations with an executor via chassis_model column.
func (o *MechModel) ChassisModelBlueprintMechAnimations(mods ...qm.QueryMod) blueprintMechAnimationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"blueprint_mech_animation\".\"chassis_model\"=?", o.ID),
	)

	query := BlueprintMechAnimations(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_mech_animation\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"blueprint_mech_animation\".*"})
	}

	return query
}

// ChassisModelBlueprintMechSkins retrieves all the blueprint_mech_skin's BlueprintMechSkins with an executor via chassis_model column.
func (o *MechModel) ChassisModelBlueprintMechSkins(mods ...qm.QueryMod) blueprintMechSkinQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"blueprint_mech_skin\".\"chassis_model\"=?", o.ID),
	)

	query := BlueprintMechSkins(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_mech_skin\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"blueprint_mech_skin\".*"})
	}

	return query
}

// ModelBlueprintMechs retrieves all the blueprint_mech's BlueprintMechs with an executor via model_id column.
func (o *MechModel) ModelBlueprintMechs(mods ...qm.QueryMod) blueprintMechQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"blueprint_mechs\".\"model_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"blueprint_mechs\".\"deleted_at\""),
	)

	query := BlueprintMechs(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_mechs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"blueprint_mechs\".*"})
	}

	return query
}

// ChassisModelMechAnimations retrieves all the mech_animation's MechAnimations with an executor via chassis_model column.
func (o *MechModel) ChassisModelMechAnimations(mods ...qm.QueryMod) mechAnimationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mech_animation\".\"chassis_model\"=?", o.ID),
	)

	query := MechAnimations(queryMods...)
	queries.SetFrom(query.Query, "\"mech_animation\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mech_animation\".*"})
	}

	return query
}

// ChassisModelMechSkins retrieves all the mech_skin's MechSkins with an executor via chassis_model column.
func (o *MechModel) ChassisModelMechSkins(mods ...qm.QueryMod) mechSkinQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mech_skin\".\"chassis_model\"=?", o.ID),
	)

	query := MechSkins(queryMods...)
	queries.SetFrom(query.Query, "\"mech_skin\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mech_skin\".*"})
	}

	return query
}

// ModelMechs retrieves all the mech's Mechs with an executor via model_id column.
func (o *MechModel) ModelMechs(mods ...qm.QueryMod) mechQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mechs\".\"model_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"mechs\".\"deleted_at\""),
	)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mechs\".*"})
	}

	return query
}

// LoadDefaultChassisSkin allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechModelL) LoadDefaultChassisSkin(e boil.Executor, singular bool, maybeMechModel interface{}, mods queries.Applicator) error {
	var slice []*MechModel
	var object *MechModel

	if singular {
		object = maybeMechModel.(*MechModel)
	} else {
		slice = *maybeMechModel.(*[]*MechModel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechModelR{}
		}
		if !queries.IsNil(object.DefaultChassisSkinID) {
			args = append(args, object.DefaultChassisSkinID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechModelR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DefaultChassisSkinID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DefaultChassisSkinID) {
				args = append(args, obj.DefaultChassisSkinID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_mech_skin`),
		qm.WhereIn(`blueprint_mech_skin.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintMechSkin")
	}

	var resultSlice []*BlueprintMechSkin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintMechSkin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_mech_skin")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_mech_skin")
	}

	if len(mechModelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DefaultChassisSkin = foreign
		if foreign.R == nil {
			foreign.R = &blueprintMechSkinR{}
		}
		foreign.R.DefaultChassisSkinMechModels = append(foreign.R.DefaultChassisSkinMechModels, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DefaultChassisSkinID, foreign.ID) {
				local.R.DefaultChassisSkin = foreign
				if foreign.R == nil {
					foreign.R = &blueprintMechSkinR{}
				}
				foreign.R.DefaultChassisSkinMechModels = append(foreign.R.DefaultChassisSkinMechModels, local)
				break
			}
		}
	}

	return nil
}

// LoadChassisModelBlueprintMechAnimations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechModelL) LoadChassisModelBlueprintMechAnimations(e boil.Executor, singular bool, maybeMechModel interface{}, mods queries.Applicator) error {
	var slice []*MechModel
	var object *MechModel

	if singular {
		object = maybeMechModel.(*MechModel)
	} else {
		slice = *maybeMechModel.(*[]*MechModel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechModelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechModelR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_mech_animation`),
		qm.WhereIn(`blueprint_mech_animation.chassis_model in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blueprint_mech_animation")
	}

	var resultSlice []*BlueprintMechAnimation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blueprint_mech_animation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blueprint_mech_animation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_mech_animation")
	}

	if len(blueprintMechAnimationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChassisModelBlueprintMechAnimations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blueprintMechAnimationR{}
			}
			foreign.R.ChassisModelMechModel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChassisModel {
				local.R.ChassisModelBlueprintMechAnimations = append(local.R.ChassisModelBlueprintMechAnimations, foreign)
				if foreign.R == nil {
					foreign.R = &blueprintMechAnimationR{}
				}
				foreign.R.ChassisModelMechModel = local
				break
			}
		}
	}

	return nil
}

// LoadChassisModelBlueprintMechSkins allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechModelL) LoadChassisModelBlueprintMechSkins(e boil.Executor, singular bool, maybeMechModel interface{}, mods queries.Applicator) error {
	var slice []*MechModel
	var object *MechModel

	if singular {
		object = maybeMechModel.(*MechModel)
	} else {
		slice = *maybeMechModel.(*[]*MechModel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechModelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechModelR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_mech_skin`),
		qm.WhereIn(`blueprint_mech_skin.chassis_model in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blueprint_mech_skin")
	}

	var resultSlice []*BlueprintMechSkin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blueprint_mech_skin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blueprint_mech_skin")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_mech_skin")
	}

	if len(blueprintMechSkinAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChassisModelBlueprintMechSkins = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blueprintMechSkinR{}
			}
			foreign.R.ChassisModelMechModel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChassisModel {
				local.R.ChassisModelBlueprintMechSkins = append(local.R.ChassisModelBlueprintMechSkins, foreign)
				if foreign.R == nil {
					foreign.R = &blueprintMechSkinR{}
				}
				foreign.R.ChassisModelMechModel = local
				break
			}
		}
	}

	return nil
}

// LoadModelBlueprintMechs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechModelL) LoadModelBlueprintMechs(e boil.Executor, singular bool, maybeMechModel interface{}, mods queries.Applicator) error {
	var slice []*MechModel
	var object *MechModel

	if singular {
		object = maybeMechModel.(*MechModel)
	} else {
		slice = *maybeMechModel.(*[]*MechModel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechModelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechModelR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_mechs`),
		qm.WhereIn(`blueprint_mechs.model_id in ?`, args...),
		qmhelper.WhereIsNull(`blueprint_mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blueprint_mechs")
	}

	var resultSlice []*BlueprintMech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blueprint_mechs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blueprint_mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_mechs")
	}

	if len(blueprintMechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ModelBlueprintMechs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blueprintMechR{}
			}
			foreign.R.Model = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ModelID {
				local.R.ModelBlueprintMechs = append(local.R.ModelBlueprintMechs, foreign)
				if foreign.R == nil {
					foreign.R = &blueprintMechR{}
				}
				foreign.R.Model = local
				break
			}
		}
	}

	return nil
}

// LoadChassisModelMechAnimations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechModelL) LoadChassisModelMechAnimations(e boil.Executor, singular bool, maybeMechModel interface{}, mods queries.Applicator) error {
	var slice []*MechModel
	var object *MechModel

	if singular {
		object = maybeMechModel.(*MechModel)
	} else {
		slice = *maybeMechModel.(*[]*MechModel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechModelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechModelR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_animation`),
		qm.WhereIn(`mech_animation.chassis_model in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mech_animation")
	}

	var resultSlice []*MechAnimation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mech_animation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mech_animation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_animation")
	}

	if len(mechAnimationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChassisModelMechAnimations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mechAnimationR{}
			}
			foreign.R.ChassisModelMechModel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChassisModel {
				local.R.ChassisModelMechAnimations = append(local.R.ChassisModelMechAnimations, foreign)
				if foreign.R == nil {
					foreign.R = &mechAnimationR{}
				}
				foreign.R.ChassisModelMechModel = local
				break
			}
		}
	}

	return nil
}

// LoadChassisModelMechSkins allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechModelL) LoadChassisModelMechSkins(e boil.Executor, singular bool, maybeMechModel interface{}, mods queries.Applicator) error {
	var slice []*MechModel
	var object *MechModel

	if singular {
		object = maybeMechModel.(*MechModel)
	} else {
		slice = *maybeMechModel.(*[]*MechModel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechModelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechModelR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_skin`),
		qm.WhereIn(`mech_skin.chassis_model in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mech_skin")
	}

	var resultSlice []*MechSkin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mech_skin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mech_skin")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_skin")
	}

	if len(mechSkinAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChassisModelMechSkins = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mechSkinR{}
			}
			foreign.R.ChassisModelMechModel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChassisModel {
				local.R.ChassisModelMechSkins = append(local.R.ChassisModelMechSkins, foreign)
				if foreign.R == nil {
					foreign.R = &mechSkinR{}
				}
				foreign.R.ChassisModelMechModel = local
				break
			}
		}
	}

	return nil
}

// LoadModelMechs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechModelL) LoadModelMechs(e boil.Executor, singular bool, maybeMechModel interface{}, mods queries.Applicator) error {
	var slice []*MechModel
	var object *MechModel

	if singular {
		object = maybeMechModel.(*MechModel)
	} else {
		slice = *maybeMechModel.(*[]*MechModel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechModelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechModelR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.model_id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mechs")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mechs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ModelMechs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mechR{}
			}
			foreign.R.Model = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ModelID {
				local.R.ModelMechs = append(local.R.ModelMechs, foreign)
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.Model = local
				break
			}
		}
	}

	return nil
}

// SetDefaultChassisSkin of the mechModel to the related item.
// Sets o.R.DefaultChassisSkin to related.
// Adds o to related.R.DefaultChassisSkinMechModels.
func (o *MechModel) SetDefaultChassisSkin(exec boil.Executor, insert bool, related *BlueprintMechSkin) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mech_model\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"default_chassis_skin_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechModelPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DefaultChassisSkinID, related.ID)
	if o.R == nil {
		o.R = &mechModelR{
			DefaultChassisSkin: related,
		}
	} else {
		o.R.DefaultChassisSkin = related
	}

	if related.R == nil {
		related.R = &blueprintMechSkinR{
			DefaultChassisSkinMechModels: MechModelSlice{o},
		}
	} else {
		related.R.DefaultChassisSkinMechModels = append(related.R.DefaultChassisSkinMechModels, o)
	}

	return nil
}

// RemoveDefaultChassisSkin relationship.
// Sets o.R.DefaultChassisSkin to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *MechModel) RemoveDefaultChassisSkin(exec boil.Executor, related *BlueprintMechSkin) error {
	var err error

	queries.SetScanner(&o.DefaultChassisSkinID, nil)
	if _, err = o.Update(exec, boil.Whitelist("default_chassis_skin_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.DefaultChassisSkin = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.DefaultChassisSkinMechModels {
		if queries.Equal(o.DefaultChassisSkinID, ri.DefaultChassisSkinID) {
			continue
		}

		ln := len(related.R.DefaultChassisSkinMechModels)
		if ln > 1 && i < ln-1 {
			related.R.DefaultChassisSkinMechModels[i] = related.R.DefaultChassisSkinMechModels[ln-1]
		}
		related.R.DefaultChassisSkinMechModels = related.R.DefaultChassisSkinMechModels[:ln-1]
		break
	}
	return nil
}

// AddChassisModelBlueprintMechAnimations adds the given related objects to the existing relationships
// of the mech_model, optionally inserting them as new records.
// Appends related to o.R.ChassisModelBlueprintMechAnimations.
// Sets related.R.ChassisModelMechModel appropriately.
func (o *MechModel) AddChassisModelBlueprintMechAnimations(exec boil.Executor, insert bool, related ...*BlueprintMechAnimation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChassisModel = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"blueprint_mech_animation\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"chassis_model"}),
				strmangle.WhereClause("\"", "\"", 2, blueprintMechAnimationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChassisModel = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechModelR{
			ChassisModelBlueprintMechAnimations: related,
		}
	} else {
		o.R.ChassisModelBlueprintMechAnimations = append(o.R.ChassisModelBlueprintMechAnimations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blueprintMechAnimationR{
				ChassisModelMechModel: o,
			}
		} else {
			rel.R.ChassisModelMechModel = o
		}
	}
	return nil
}

// AddChassisModelBlueprintMechSkins adds the given related objects to the existing relationships
// of the mech_model, optionally inserting them as new records.
// Appends related to o.R.ChassisModelBlueprintMechSkins.
// Sets related.R.ChassisModelMechModel appropriately.
func (o *MechModel) AddChassisModelBlueprintMechSkins(exec boil.Executor, insert bool, related ...*BlueprintMechSkin) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChassisModel = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"blueprint_mech_skin\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"chassis_model"}),
				strmangle.WhereClause("\"", "\"", 2, blueprintMechSkinPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChassisModel = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechModelR{
			ChassisModelBlueprintMechSkins: related,
		}
	} else {
		o.R.ChassisModelBlueprintMechSkins = append(o.R.ChassisModelBlueprintMechSkins, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blueprintMechSkinR{
				ChassisModelMechModel: o,
			}
		} else {
			rel.R.ChassisModelMechModel = o
		}
	}
	return nil
}

// AddModelBlueprintMechs adds the given related objects to the existing relationships
// of the mech_model, optionally inserting them as new records.
// Appends related to o.R.ModelBlueprintMechs.
// Sets related.R.Model appropriately.
func (o *MechModel) AddModelBlueprintMechs(exec boil.Executor, insert bool, related ...*BlueprintMech) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ModelID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"blueprint_mechs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"model_id"}),
				strmangle.WhereClause("\"", "\"", 2, blueprintMechPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ModelID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechModelR{
			ModelBlueprintMechs: related,
		}
	} else {
		o.R.ModelBlueprintMechs = append(o.R.ModelBlueprintMechs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blueprintMechR{
				Model: o,
			}
		} else {
			rel.R.Model = o
		}
	}
	return nil
}

// AddChassisModelMechAnimations adds the given related objects to the existing relationships
// of the mech_model, optionally inserting them as new records.
// Appends related to o.R.ChassisModelMechAnimations.
// Sets related.R.ChassisModelMechModel appropriately.
func (o *MechModel) AddChassisModelMechAnimations(exec boil.Executor, insert bool, related ...*MechAnimation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChassisModel = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mech_animation\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"chassis_model"}),
				strmangle.WhereClause("\"", "\"", 2, mechAnimationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChassisModel = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechModelR{
			ChassisModelMechAnimations: related,
		}
	} else {
		o.R.ChassisModelMechAnimations = append(o.R.ChassisModelMechAnimations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mechAnimationR{
				ChassisModelMechModel: o,
			}
		} else {
			rel.R.ChassisModelMechModel = o
		}
	}
	return nil
}

// AddChassisModelMechSkins adds the given related objects to the existing relationships
// of the mech_model, optionally inserting them as new records.
// Appends related to o.R.ChassisModelMechSkins.
// Sets related.R.ChassisModelMechModel appropriately.
func (o *MechModel) AddChassisModelMechSkins(exec boil.Executor, insert bool, related ...*MechSkin) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChassisModel = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mech_skin\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"chassis_model"}),
				strmangle.WhereClause("\"", "\"", 2, mechSkinPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChassisModel = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechModelR{
			ChassisModelMechSkins: related,
		}
	} else {
		o.R.ChassisModelMechSkins = append(o.R.ChassisModelMechSkins, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mechSkinR{
				ChassisModelMechModel: o,
			}
		} else {
			rel.R.ChassisModelMechModel = o
		}
	}
	return nil
}

// AddModelMechs adds the given related objects to the existing relationships
// of the mech_model, optionally inserting them as new records.
// Appends related to o.R.ModelMechs.
// Sets related.R.Model appropriately.
func (o *MechModel) AddModelMechs(exec boil.Executor, insert bool, related ...*Mech) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ModelID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mechs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"model_id"}),
				strmangle.WhereClause("\"", "\"", 2, mechPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ModelID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechModelR{
			ModelMechs: related,
		}
	} else {
		o.R.ModelMechs = append(o.R.ModelMechs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mechR{
				Model: o,
			}
		} else {
			rel.R.Model = o
		}
	}
	return nil
}

// MechModels retrieves all the records using an executor.
func MechModels(mods ...qm.QueryMod) mechModelQuery {
	mods = append(mods, qm.From("\"mech_model\""))
	return mechModelQuery{NewQuery(mods...)}
}

// FindMechModel retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMechModel(exec boil.Executor, iD string, selectCols ...string) (*MechModel, error) {
	mechModelObj := &MechModel{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mech_model\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, mechModelObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from mech_model")
	}

	if err = mechModelObj.doAfterSelectHooks(exec); err != nil {
		return mechModelObj, err
	}

	return mechModelObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MechModel) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mech_model provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechModelColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mechModelInsertCacheMut.RLock()
	cache, cached := mechModelInsertCache[key]
	mechModelInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mechModelAllColumns,
			mechModelColumnsWithDefault,
			mechModelColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mechModelType, mechModelMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mechModelType, mechModelMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mech_model\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mech_model\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into mech_model")
	}

	if !cached {
		mechModelInsertCacheMut.Lock()
		mechModelInsertCache[key] = cache
		mechModelInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the MechModel.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MechModel) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mechModelUpdateCacheMut.RLock()
	cache, cached := mechModelUpdateCache[key]
	mechModelUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mechModelAllColumns,
			mechModelPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update mech_model, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mech_model\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mechModelPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mechModelType, mechModelMapping, append(wl, mechModelPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update mech_model row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for mech_model")
	}

	if !cached {
		mechModelUpdateCacheMut.Lock()
		mechModelUpdateCache[key] = cache
		mechModelUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mechModelQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for mech_model")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for mech_model")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MechModelSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechModelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mech_model\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mechModelPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in mechModel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all mechModel")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MechModel) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mech_model provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechModelColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mechModelUpsertCacheMut.RLock()
	cache, cached := mechModelUpsertCache[key]
	mechModelUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mechModelAllColumns,
			mechModelColumnsWithDefault,
			mechModelColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mechModelAllColumns,
			mechModelPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert mech_model, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mechModelPrimaryKeyColumns))
			copy(conflict, mechModelPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mech_model\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mechModelType, mechModelMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mechModelType, mechModelMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert mech_model")
	}

	if !cached {
		mechModelUpsertCacheMut.Lock()
		mechModelUpsertCache[key] = cache
		mechModelUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single MechModel record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MechModel) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no MechModel provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mechModelPrimaryKeyMapping)
	sql := "DELETE FROM \"mech_model\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from mech_model")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for mech_model")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mechModelQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no mechModelQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mech_model")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mech_model")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MechModelSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mechModelBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechModelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"mech_model\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechModelPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mechModel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mech_model")
	}

	if len(mechModelAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MechModel) Reload(exec boil.Executor) error {
	ret, err := FindMechModel(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MechModelSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MechModelSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechModelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mech_model\".* FROM \"mech_model\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechModelPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in MechModelSlice")
	}

	*o = slice

	return nil
}

// MechModelExists checks if the MechModel row exists.
func MechModelExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mech_model\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if mech_model exists")
	}

	return exists, nil
}
