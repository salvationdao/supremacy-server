// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProfileAvatar is an object representing the database table.
type ProfileAvatar struct {
	ID        string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	AvatarURL string    `boiler:"avatar_url" boil:"avatar_url" json:"avatar_url" toml:"avatar_url" yaml:"avatar_url"`
	Tier      string    `boiler:"tier" boil:"tier" json:"tier" toml:"tier" yaml:"tier"`
	UpdatedAt time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	CreatedAt time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *profileAvatarR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L profileAvatarL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProfileAvatarColumns = struct {
	ID        string
	AvatarURL string
	Tier      string
	UpdatedAt string
	DeletedAt string
	CreatedAt string
}{
	ID:        "id",
	AvatarURL: "avatar_url",
	Tier:      "tier",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
	CreatedAt: "created_at",
}

var ProfileAvatarTableColumns = struct {
	ID        string
	AvatarURL string
	Tier      string
	UpdatedAt string
	DeletedAt string
	CreatedAt string
}{
	ID:        "profile_avatars.id",
	AvatarURL: "profile_avatars.avatar_url",
	Tier:      "profile_avatars.tier",
	UpdatedAt: "profile_avatars.updated_at",
	DeletedAt: "profile_avatars.deleted_at",
	CreatedAt: "profile_avatars.created_at",
}

// Generated where

var ProfileAvatarWhere = struct {
	ID        whereHelperstring
	AvatarURL whereHelperstring
	Tier      whereHelperstring
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"profile_avatars\".\"id\""},
	AvatarURL: whereHelperstring{field: "\"profile_avatars\".\"avatar_url\""},
	Tier:      whereHelperstring{field: "\"profile_avatars\".\"tier\""},
	UpdatedAt: whereHelpertime_Time{field: "\"profile_avatars\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"profile_avatars\".\"deleted_at\""},
	CreatedAt: whereHelpertime_Time{field: "\"profile_avatars\".\"created_at\""},
}

// ProfileAvatarRels is where relationship names are stored.
var ProfileAvatarRels = struct {
	BlueprintMechSkins    string
	Players               string
	PlayersProfileAvatars string
}{
	BlueprintMechSkins:    "BlueprintMechSkins",
	Players:               "Players",
	PlayersProfileAvatars: "PlayersProfileAvatars",
}

// profileAvatarR is where relationships are stored.
type profileAvatarR struct {
	BlueprintMechSkins    BlueprintMechSkinSlice    `boiler:"BlueprintMechSkins" boil:"BlueprintMechSkins" json:"BlueprintMechSkins" toml:"BlueprintMechSkins" yaml:"BlueprintMechSkins"`
	Players               PlayerSlice               `boiler:"Players" boil:"Players" json:"Players" toml:"Players" yaml:"Players"`
	PlayersProfileAvatars PlayersProfileAvatarSlice `boiler:"PlayersProfileAvatars" boil:"PlayersProfileAvatars" json:"PlayersProfileAvatars" toml:"PlayersProfileAvatars" yaml:"PlayersProfileAvatars"`
}

// NewStruct creates a new relationship struct
func (*profileAvatarR) NewStruct() *profileAvatarR {
	return &profileAvatarR{}
}

// profileAvatarL is where Load methods for each relationship are stored.
type profileAvatarL struct{}

var (
	profileAvatarAllColumns            = []string{"id", "avatar_url", "tier", "updated_at", "deleted_at", "created_at"}
	profileAvatarColumnsWithoutDefault = []string{"avatar_url", "tier"}
	profileAvatarColumnsWithDefault    = []string{"id", "updated_at", "deleted_at", "created_at"}
	profileAvatarPrimaryKeyColumns     = []string{"id"}
	profileAvatarGeneratedColumns      = []string{}
)

type (
	// ProfileAvatarSlice is an alias for a slice of pointers to ProfileAvatar.
	// This should almost always be used instead of []ProfileAvatar.
	ProfileAvatarSlice []*ProfileAvatar
	// ProfileAvatarHook is the signature for custom ProfileAvatar hook methods
	ProfileAvatarHook func(boil.Executor, *ProfileAvatar) error

	profileAvatarQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	profileAvatarType                 = reflect.TypeOf(&ProfileAvatar{})
	profileAvatarMapping              = queries.MakeStructMapping(profileAvatarType)
	profileAvatarPrimaryKeyMapping, _ = queries.BindMapping(profileAvatarType, profileAvatarMapping, profileAvatarPrimaryKeyColumns)
	profileAvatarInsertCacheMut       sync.RWMutex
	profileAvatarInsertCache          = make(map[string]insertCache)
	profileAvatarUpdateCacheMut       sync.RWMutex
	profileAvatarUpdateCache          = make(map[string]updateCache)
	profileAvatarUpsertCacheMut       sync.RWMutex
	profileAvatarUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var profileAvatarAfterSelectHooks []ProfileAvatarHook

var profileAvatarBeforeInsertHooks []ProfileAvatarHook
var profileAvatarAfterInsertHooks []ProfileAvatarHook

var profileAvatarBeforeUpdateHooks []ProfileAvatarHook
var profileAvatarAfterUpdateHooks []ProfileAvatarHook

var profileAvatarBeforeDeleteHooks []ProfileAvatarHook
var profileAvatarAfterDeleteHooks []ProfileAvatarHook

var profileAvatarBeforeUpsertHooks []ProfileAvatarHook
var profileAvatarAfterUpsertHooks []ProfileAvatarHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProfileAvatar) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range profileAvatarAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProfileAvatar) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range profileAvatarBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProfileAvatar) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range profileAvatarAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProfileAvatar) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range profileAvatarBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProfileAvatar) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range profileAvatarAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProfileAvatar) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range profileAvatarBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProfileAvatar) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range profileAvatarAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProfileAvatar) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range profileAvatarBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProfileAvatar) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range profileAvatarAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProfileAvatarHook registers your hook function for all future operations.
func AddProfileAvatarHook(hookPoint boil.HookPoint, profileAvatarHook ProfileAvatarHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		profileAvatarAfterSelectHooks = append(profileAvatarAfterSelectHooks, profileAvatarHook)
	case boil.BeforeInsertHook:
		profileAvatarBeforeInsertHooks = append(profileAvatarBeforeInsertHooks, profileAvatarHook)
	case boil.AfterInsertHook:
		profileAvatarAfterInsertHooks = append(profileAvatarAfterInsertHooks, profileAvatarHook)
	case boil.BeforeUpdateHook:
		profileAvatarBeforeUpdateHooks = append(profileAvatarBeforeUpdateHooks, profileAvatarHook)
	case boil.AfterUpdateHook:
		profileAvatarAfterUpdateHooks = append(profileAvatarAfterUpdateHooks, profileAvatarHook)
	case boil.BeforeDeleteHook:
		profileAvatarBeforeDeleteHooks = append(profileAvatarBeforeDeleteHooks, profileAvatarHook)
	case boil.AfterDeleteHook:
		profileAvatarAfterDeleteHooks = append(profileAvatarAfterDeleteHooks, profileAvatarHook)
	case boil.BeforeUpsertHook:
		profileAvatarBeforeUpsertHooks = append(profileAvatarBeforeUpsertHooks, profileAvatarHook)
	case boil.AfterUpsertHook:
		profileAvatarAfterUpsertHooks = append(profileAvatarAfterUpsertHooks, profileAvatarHook)
	}
}

// One returns a single profileAvatar record from the query.
func (q profileAvatarQuery) One(exec boil.Executor) (*ProfileAvatar, error) {
	o := &ProfileAvatar{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for profile_avatars")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProfileAvatar records from the query.
func (q profileAvatarQuery) All(exec boil.Executor) (ProfileAvatarSlice, error) {
	var o []*ProfileAvatar

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to ProfileAvatar slice")
	}

	if len(profileAvatarAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProfileAvatar records in the query.
func (q profileAvatarQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count profile_avatars rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q profileAvatarQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if profile_avatars exists")
	}

	return count > 0, nil
}

// BlueprintMechSkins retrieves all the blueprint_mech_skin's BlueprintMechSkins with an executor.
func (o *ProfileAvatar) BlueprintMechSkins(mods ...qm.QueryMod) blueprintMechSkinQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"blueprint_mech_skin\".\"profile_avatar_id\"=?", o.ID),
	)

	query := BlueprintMechSkins(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_mech_skin\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"blueprint_mech_skin\".*"})
	}

	return query
}

// Players retrieves all the player's Players with an executor.
func (o *ProfileAvatar) Players(mods ...qm.QueryMod) playerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"players\".\"profile_avatar_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"players\".\"deleted_at\""),
	)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"players\".*"})
	}

	return query
}

// PlayersProfileAvatars retrieves all the players_profile_avatar's PlayersProfileAvatars with an executor.
func (o *ProfileAvatar) PlayersProfileAvatars(mods ...qm.QueryMod) playersProfileAvatarQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"players_profile_avatars\".\"profile_avatar_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"players_profile_avatars\".\"deleted_at\""),
	)

	query := PlayersProfileAvatars(queryMods...)
	queries.SetFrom(query.Query, "\"players_profile_avatars\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"players_profile_avatars\".*"})
	}

	return query
}

// LoadBlueprintMechSkins allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (profileAvatarL) LoadBlueprintMechSkins(e boil.Executor, singular bool, maybeProfileAvatar interface{}, mods queries.Applicator) error {
	var slice []*ProfileAvatar
	var object *ProfileAvatar

	if singular {
		object = maybeProfileAvatar.(*ProfileAvatar)
	} else {
		slice = *maybeProfileAvatar.(*[]*ProfileAvatar)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &profileAvatarR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileAvatarR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_mech_skin`),
		qm.WhereIn(`blueprint_mech_skin.profile_avatar_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blueprint_mech_skin")
	}

	var resultSlice []*BlueprintMechSkin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blueprint_mech_skin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blueprint_mech_skin")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_mech_skin")
	}

	if len(blueprintMechSkinAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlueprintMechSkins = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blueprintMechSkinR{}
			}
			foreign.R.ProfileAvatar = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ProfileAvatarID) {
				local.R.BlueprintMechSkins = append(local.R.BlueprintMechSkins, foreign)
				if foreign.R == nil {
					foreign.R = &blueprintMechSkinR{}
				}
				foreign.R.ProfileAvatar = local
				break
			}
		}
	}

	return nil
}

// LoadPlayers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (profileAvatarL) LoadPlayers(e boil.Executor, singular bool, maybeProfileAvatar interface{}, mods queries.Applicator) error {
	var slice []*ProfileAvatar
	var object *ProfileAvatar

	if singular {
		object = maybeProfileAvatar.(*ProfileAvatar)
	} else {
		slice = *maybeProfileAvatar.(*[]*ProfileAvatar)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &profileAvatarR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileAvatarR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.profile_avatar_id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load players")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice players")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(playerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Players = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playerR{}
			}
			foreign.R.ProfileAvatar = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ProfileAvatarID) {
				local.R.Players = append(local.R.Players, foreign)
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.ProfileAvatar = local
				break
			}
		}
	}

	return nil
}

// LoadPlayersProfileAvatars allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (profileAvatarL) LoadPlayersProfileAvatars(e boil.Executor, singular bool, maybeProfileAvatar interface{}, mods queries.Applicator) error {
	var slice []*ProfileAvatar
	var object *ProfileAvatar

	if singular {
		object = maybeProfileAvatar.(*ProfileAvatar)
	} else {
		slice = *maybeProfileAvatar.(*[]*ProfileAvatar)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &profileAvatarR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileAvatarR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players_profile_avatars`),
		qm.WhereIn(`players_profile_avatars.profile_avatar_id in ?`, args...),
		qmhelper.WhereIsNull(`players_profile_avatars.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load players_profile_avatars")
	}

	var resultSlice []*PlayersProfileAvatar
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice players_profile_avatars")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on players_profile_avatars")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players_profile_avatars")
	}

	if len(playersProfileAvatarAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PlayersProfileAvatars = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playersProfileAvatarR{}
			}
			foreign.R.ProfileAvatar = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProfileAvatarID {
				local.R.PlayersProfileAvatars = append(local.R.PlayersProfileAvatars, foreign)
				if foreign.R == nil {
					foreign.R = &playersProfileAvatarR{}
				}
				foreign.R.ProfileAvatar = local
				break
			}
		}
	}

	return nil
}

// AddBlueprintMechSkins adds the given related objects to the existing relationships
// of the profile_avatar, optionally inserting them as new records.
// Appends related to o.R.BlueprintMechSkins.
// Sets related.R.ProfileAvatar appropriately.
func (o *ProfileAvatar) AddBlueprintMechSkins(exec boil.Executor, insert bool, related ...*BlueprintMechSkin) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProfileAvatarID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"blueprint_mech_skin\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"profile_avatar_id"}),
				strmangle.WhereClause("\"", "\"", 2, blueprintMechSkinPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProfileAvatarID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &profileAvatarR{
			BlueprintMechSkins: related,
		}
	} else {
		o.R.BlueprintMechSkins = append(o.R.BlueprintMechSkins, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blueprintMechSkinR{
				ProfileAvatar: o,
			}
		} else {
			rel.R.ProfileAvatar = o
		}
	}
	return nil
}

// SetBlueprintMechSkins removes all previously related items of the
// profile_avatar replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProfileAvatar's BlueprintMechSkins accordingly.
// Replaces o.R.BlueprintMechSkins with related.
// Sets related.R.ProfileAvatar's BlueprintMechSkins accordingly.
func (o *ProfileAvatar) SetBlueprintMechSkins(exec boil.Executor, insert bool, related ...*BlueprintMechSkin) error {
	query := "update \"blueprint_mech_skin\" set \"profile_avatar_id\" = null where \"profile_avatar_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BlueprintMechSkins {
			queries.SetScanner(&rel.ProfileAvatarID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ProfileAvatar = nil
		}

		o.R.BlueprintMechSkins = nil
	}
	return o.AddBlueprintMechSkins(exec, insert, related...)
}

// RemoveBlueprintMechSkins relationships from objects passed in.
// Removes related items from R.BlueprintMechSkins (uses pointer comparison, removal does not keep order)
// Sets related.R.ProfileAvatar.
func (o *ProfileAvatar) RemoveBlueprintMechSkins(exec boil.Executor, related ...*BlueprintMechSkin) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProfileAvatarID, nil)
		if rel.R != nil {
			rel.R.ProfileAvatar = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("profile_avatar_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BlueprintMechSkins {
			if rel != ri {
				continue
			}

			ln := len(o.R.BlueprintMechSkins)
			if ln > 1 && i < ln-1 {
				o.R.BlueprintMechSkins[i] = o.R.BlueprintMechSkins[ln-1]
			}
			o.R.BlueprintMechSkins = o.R.BlueprintMechSkins[:ln-1]
			break
		}
	}

	return nil
}

// AddPlayers adds the given related objects to the existing relationships
// of the profile_avatar, optionally inserting them as new records.
// Appends related to o.R.Players.
// Sets related.R.ProfileAvatar appropriately.
func (o *ProfileAvatar) AddPlayers(exec boil.Executor, insert bool, related ...*Player) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProfileAvatarID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"players\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"profile_avatar_id"}),
				strmangle.WhereClause("\"", "\"", 2, playerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProfileAvatarID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &profileAvatarR{
			Players: related,
		}
	} else {
		o.R.Players = append(o.R.Players, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playerR{
				ProfileAvatar: o,
			}
		} else {
			rel.R.ProfileAvatar = o
		}
	}
	return nil
}

// SetPlayers removes all previously related items of the
// profile_avatar replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProfileAvatar's Players accordingly.
// Replaces o.R.Players with related.
// Sets related.R.ProfileAvatar's Players accordingly.
func (o *ProfileAvatar) SetPlayers(exec boil.Executor, insert bool, related ...*Player) error {
	query := "update \"players\" set \"profile_avatar_id\" = null where \"profile_avatar_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Players {
			queries.SetScanner(&rel.ProfileAvatarID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ProfileAvatar = nil
		}

		o.R.Players = nil
	}
	return o.AddPlayers(exec, insert, related...)
}

// RemovePlayers relationships from objects passed in.
// Removes related items from R.Players (uses pointer comparison, removal does not keep order)
// Sets related.R.ProfileAvatar.
func (o *ProfileAvatar) RemovePlayers(exec boil.Executor, related ...*Player) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProfileAvatarID, nil)
		if rel.R != nil {
			rel.R.ProfileAvatar = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("profile_avatar_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Players {
			if rel != ri {
				continue
			}

			ln := len(o.R.Players)
			if ln > 1 && i < ln-1 {
				o.R.Players[i] = o.R.Players[ln-1]
			}
			o.R.Players = o.R.Players[:ln-1]
			break
		}
	}

	return nil
}

// AddPlayersProfileAvatars adds the given related objects to the existing relationships
// of the profile_avatar, optionally inserting them as new records.
// Appends related to o.R.PlayersProfileAvatars.
// Sets related.R.ProfileAvatar appropriately.
func (o *ProfileAvatar) AddPlayersProfileAvatars(exec boil.Executor, insert bool, related ...*PlayersProfileAvatar) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProfileAvatarID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"players_profile_avatars\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"profile_avatar_id"}),
				strmangle.WhereClause("\"", "\"", 2, playersProfileAvatarPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProfileAvatarID = o.ID
		}
	}

	if o.R == nil {
		o.R = &profileAvatarR{
			PlayersProfileAvatars: related,
		}
	} else {
		o.R.PlayersProfileAvatars = append(o.R.PlayersProfileAvatars, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playersProfileAvatarR{
				ProfileAvatar: o,
			}
		} else {
			rel.R.ProfileAvatar = o
		}
	}
	return nil
}

// ProfileAvatars retrieves all the records using an executor.
func ProfileAvatars(mods ...qm.QueryMod) profileAvatarQuery {
	mods = append(mods, qm.From("\"profile_avatars\""), qmhelper.WhereIsNull("\"profile_avatars\".\"deleted_at\""))
	return profileAvatarQuery{NewQuery(mods...)}
}

// FindProfileAvatar retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProfileAvatar(exec boil.Executor, iD string, selectCols ...string) (*ProfileAvatar, error) {
	profileAvatarObj := &ProfileAvatar{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"profile_avatars\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, profileAvatarObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from profile_avatars")
	}

	if err = profileAvatarObj.doAfterSelectHooks(exec); err != nil {
		return profileAvatarObj, err
	}

	return profileAvatarObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProfileAvatar) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no profile_avatars provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(profileAvatarColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	profileAvatarInsertCacheMut.RLock()
	cache, cached := profileAvatarInsertCache[key]
	profileAvatarInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			profileAvatarAllColumns,
			profileAvatarColumnsWithDefault,
			profileAvatarColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(profileAvatarType, profileAvatarMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(profileAvatarType, profileAvatarMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"profile_avatars\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"profile_avatars\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into profile_avatars")
	}

	if !cached {
		profileAvatarInsertCacheMut.Lock()
		profileAvatarInsertCache[key] = cache
		profileAvatarInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the ProfileAvatar.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProfileAvatar) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	profileAvatarUpdateCacheMut.RLock()
	cache, cached := profileAvatarUpdateCache[key]
	profileAvatarUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			profileAvatarAllColumns,
			profileAvatarPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update profile_avatars, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"profile_avatars\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, profileAvatarPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(profileAvatarType, profileAvatarMapping, append(wl, profileAvatarPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update profile_avatars row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for profile_avatars")
	}

	if !cached {
		profileAvatarUpdateCacheMut.Lock()
		profileAvatarUpdateCache[key] = cache
		profileAvatarUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q profileAvatarQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for profile_avatars")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for profile_avatars")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProfileAvatarSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), profileAvatarPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"profile_avatars\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, profileAvatarPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in profileAvatar slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all profileAvatar")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProfileAvatar) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no profile_avatars provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(profileAvatarColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	profileAvatarUpsertCacheMut.RLock()
	cache, cached := profileAvatarUpsertCache[key]
	profileAvatarUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			profileAvatarAllColumns,
			profileAvatarColumnsWithDefault,
			profileAvatarColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			profileAvatarAllColumns,
			profileAvatarPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert profile_avatars, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(profileAvatarPrimaryKeyColumns))
			copy(conflict, profileAvatarPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"profile_avatars\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(profileAvatarType, profileAvatarMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(profileAvatarType, profileAvatarMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert profile_avatars")
	}

	if !cached {
		profileAvatarUpsertCacheMut.Lock()
		profileAvatarUpsertCache[key] = cache
		profileAvatarUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single ProfileAvatar record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProfileAvatar) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no ProfileAvatar provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), profileAvatarPrimaryKeyMapping)
		sql = "DELETE FROM \"profile_avatars\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"profile_avatars\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(profileAvatarType, profileAvatarMapping, append(wl, profileAvatarPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from profile_avatars")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for profile_avatars")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q profileAvatarQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no profileAvatarQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from profile_avatars")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for profile_avatars")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProfileAvatarSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(profileAvatarBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), profileAvatarPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"profile_avatars\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, profileAvatarPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), profileAvatarPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"profile_avatars\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, profileAvatarPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from profileAvatar slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for profile_avatars")
	}

	if len(profileAvatarAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProfileAvatar) Reload(exec boil.Executor) error {
	ret, err := FindProfileAvatar(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProfileAvatarSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProfileAvatarSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), profileAvatarPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"profile_avatars\".* FROM \"profile_avatars\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, profileAvatarPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in ProfileAvatarSlice")
	}

	*o = slice

	return nil
}

// ProfileAvatarExists checks if the ProfileAvatar row exists.
func ProfileAvatarExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"profile_avatars\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if profile_avatars exists")
	}

	return exists, nil
}
