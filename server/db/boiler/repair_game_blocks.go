// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RepairGameBlock is an object representing the database table.
type RepairGameBlock struct {
	ID                   string          `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Type                 string          `boiler:"type" boil:"type" json:"type" toml:"type" yaml:"type"`
	MinSpeedMultiplier   decimal.Decimal `boiler:"min_speed_multiplier" boil:"min_speed_multiplier" json:"min_speed_multiplier" toml:"min_speed_multiplier" yaml:"min_speed_multiplier"`
	MaxSpeedMultiplier   decimal.Decimal `boiler:"max_speed_multiplier" boil:"max_speed_multiplier" json:"max_speed_multiplier" toml:"max_speed_multiplier" yaml:"max_speed_multiplier"`
	ExtraSpeedMultiplier decimal.Decimal `boiler:"extra_speed_multiplier" boil:"extra_speed_multiplier" json:"extra_speed_multiplier" toml:"extra_speed_multiplier" yaml:"extra_speed_multiplier"`
	Probability          decimal.Decimal `boiler:"probability" boil:"probability" json:"probability" toml:"probability" yaml:"probability"`
	CreatedAt            time.Time       `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt            time.Time       `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt            null.Time       `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *repairGameBlockR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L repairGameBlockL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RepairGameBlockColumns = struct {
	ID                   string
	Type                 string
	MinSpeedMultiplier   string
	MaxSpeedMultiplier   string
	ExtraSpeedMultiplier string
	Probability          string
	CreatedAt            string
	UpdatedAt            string
	DeletedAt            string
}{
	ID:                   "id",
	Type:                 "type",
	MinSpeedMultiplier:   "min_speed_multiplier",
	MaxSpeedMultiplier:   "max_speed_multiplier",
	ExtraSpeedMultiplier: "extra_speed_multiplier",
	Probability:          "probability",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
	DeletedAt:            "deleted_at",
}

var RepairGameBlockTableColumns = struct {
	ID                   string
	Type                 string
	MinSpeedMultiplier   string
	MaxSpeedMultiplier   string
	ExtraSpeedMultiplier string
	Probability          string
	CreatedAt            string
	UpdatedAt            string
	DeletedAt            string
}{
	ID:                   "repair_game_blocks.id",
	Type:                 "repair_game_blocks.type",
	MinSpeedMultiplier:   "repair_game_blocks.min_speed_multiplier",
	MaxSpeedMultiplier:   "repair_game_blocks.max_speed_multiplier",
	ExtraSpeedMultiplier: "repair_game_blocks.extra_speed_multiplier",
	Probability:          "repair_game_blocks.probability",
	CreatedAt:            "repair_game_blocks.created_at",
	UpdatedAt:            "repair_game_blocks.updated_at",
	DeletedAt:            "repair_game_blocks.deleted_at",
}

// Generated where

var RepairGameBlockWhere = struct {
	ID                   whereHelperstring
	Type                 whereHelperstring
	MinSpeedMultiplier   whereHelperdecimal_Decimal
	MaxSpeedMultiplier   whereHelperdecimal_Decimal
	ExtraSpeedMultiplier whereHelperdecimal_Decimal
	Probability          whereHelperdecimal_Decimal
	CreatedAt            whereHelpertime_Time
	UpdatedAt            whereHelpertime_Time
	DeletedAt            whereHelpernull_Time
}{
	ID:                   whereHelperstring{field: "\"repair_game_blocks\".\"id\""},
	Type:                 whereHelperstring{field: "\"repair_game_blocks\".\"type\""},
	MinSpeedMultiplier:   whereHelperdecimal_Decimal{field: "\"repair_game_blocks\".\"min_speed_multiplier\""},
	MaxSpeedMultiplier:   whereHelperdecimal_Decimal{field: "\"repair_game_blocks\".\"max_speed_multiplier\""},
	ExtraSpeedMultiplier: whereHelperdecimal_Decimal{field: "\"repair_game_blocks\".\"extra_speed_multiplier\""},
	Probability:          whereHelperdecimal_Decimal{field: "\"repair_game_blocks\".\"probability\""},
	CreatedAt:            whereHelpertime_Time{field: "\"repair_game_blocks\".\"created_at\""},
	UpdatedAt:            whereHelpertime_Time{field: "\"repair_game_blocks\".\"updated_at\""},
	DeletedAt:            whereHelpernull_Time{field: "\"repair_game_blocks\".\"deleted_at\""},
}

// RepairGameBlockRels is where relationship names are stored.
var RepairGameBlockRels = struct {
}{}

// repairGameBlockR is where relationships are stored.
type repairGameBlockR struct {
}

// NewStruct creates a new relationship struct
func (*repairGameBlockR) NewStruct() *repairGameBlockR {
	return &repairGameBlockR{}
}

// repairGameBlockL is where Load methods for each relationship are stored.
type repairGameBlockL struct{}

var (
	repairGameBlockAllColumns            = []string{"id", "type", "min_speed_multiplier", "max_speed_multiplier", "extra_speed_multiplier", "probability", "created_at", "updated_at", "deleted_at"}
	repairGameBlockColumnsWithoutDefault = []string{}
	repairGameBlockColumnsWithDefault    = []string{"id", "type", "min_speed_multiplier", "max_speed_multiplier", "extra_speed_multiplier", "probability", "created_at", "updated_at", "deleted_at"}
	repairGameBlockPrimaryKeyColumns     = []string{"id"}
	repairGameBlockGeneratedColumns      = []string{}
)

type (
	// RepairGameBlockSlice is an alias for a slice of pointers to RepairGameBlock.
	// This should almost always be used instead of []RepairGameBlock.
	RepairGameBlockSlice []*RepairGameBlock
	// RepairGameBlockHook is the signature for custom RepairGameBlock hook methods
	RepairGameBlockHook func(boil.Executor, *RepairGameBlock) error

	repairGameBlockQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	repairGameBlockType                 = reflect.TypeOf(&RepairGameBlock{})
	repairGameBlockMapping              = queries.MakeStructMapping(repairGameBlockType)
	repairGameBlockPrimaryKeyMapping, _ = queries.BindMapping(repairGameBlockType, repairGameBlockMapping, repairGameBlockPrimaryKeyColumns)
	repairGameBlockInsertCacheMut       sync.RWMutex
	repairGameBlockInsertCache          = make(map[string]insertCache)
	repairGameBlockUpdateCacheMut       sync.RWMutex
	repairGameBlockUpdateCache          = make(map[string]updateCache)
	repairGameBlockUpsertCacheMut       sync.RWMutex
	repairGameBlockUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var repairGameBlockAfterSelectHooks []RepairGameBlockHook

var repairGameBlockBeforeInsertHooks []RepairGameBlockHook
var repairGameBlockAfterInsertHooks []RepairGameBlockHook

var repairGameBlockBeforeUpdateHooks []RepairGameBlockHook
var repairGameBlockAfterUpdateHooks []RepairGameBlockHook

var repairGameBlockBeforeDeleteHooks []RepairGameBlockHook
var repairGameBlockAfterDeleteHooks []RepairGameBlockHook

var repairGameBlockBeforeUpsertHooks []RepairGameBlockHook
var repairGameBlockAfterUpsertHooks []RepairGameBlockHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RepairGameBlock) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range repairGameBlockAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RepairGameBlock) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range repairGameBlockBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RepairGameBlock) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range repairGameBlockAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RepairGameBlock) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range repairGameBlockBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RepairGameBlock) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range repairGameBlockAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RepairGameBlock) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range repairGameBlockBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RepairGameBlock) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range repairGameBlockAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RepairGameBlock) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range repairGameBlockBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RepairGameBlock) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range repairGameBlockAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRepairGameBlockHook registers your hook function for all future operations.
func AddRepairGameBlockHook(hookPoint boil.HookPoint, repairGameBlockHook RepairGameBlockHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		repairGameBlockAfterSelectHooks = append(repairGameBlockAfterSelectHooks, repairGameBlockHook)
	case boil.BeforeInsertHook:
		repairGameBlockBeforeInsertHooks = append(repairGameBlockBeforeInsertHooks, repairGameBlockHook)
	case boil.AfterInsertHook:
		repairGameBlockAfterInsertHooks = append(repairGameBlockAfterInsertHooks, repairGameBlockHook)
	case boil.BeforeUpdateHook:
		repairGameBlockBeforeUpdateHooks = append(repairGameBlockBeforeUpdateHooks, repairGameBlockHook)
	case boil.AfterUpdateHook:
		repairGameBlockAfterUpdateHooks = append(repairGameBlockAfterUpdateHooks, repairGameBlockHook)
	case boil.BeforeDeleteHook:
		repairGameBlockBeforeDeleteHooks = append(repairGameBlockBeforeDeleteHooks, repairGameBlockHook)
	case boil.AfterDeleteHook:
		repairGameBlockAfterDeleteHooks = append(repairGameBlockAfterDeleteHooks, repairGameBlockHook)
	case boil.BeforeUpsertHook:
		repairGameBlockBeforeUpsertHooks = append(repairGameBlockBeforeUpsertHooks, repairGameBlockHook)
	case boil.AfterUpsertHook:
		repairGameBlockAfterUpsertHooks = append(repairGameBlockAfterUpsertHooks, repairGameBlockHook)
	}
}

// One returns a single repairGameBlock record from the query.
func (q repairGameBlockQuery) One(exec boil.Executor) (*RepairGameBlock, error) {
	o := &RepairGameBlock{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for repair_game_blocks")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RepairGameBlock records from the query.
func (q repairGameBlockQuery) All(exec boil.Executor) (RepairGameBlockSlice, error) {
	var o []*RepairGameBlock

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to RepairGameBlock slice")
	}

	if len(repairGameBlockAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RepairGameBlock records in the query.
func (q repairGameBlockQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count repair_game_blocks rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q repairGameBlockQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if repair_game_blocks exists")
	}

	return count > 0, nil
}

// RepairGameBlocks retrieves all the records using an executor.
func RepairGameBlocks(mods ...qm.QueryMod) repairGameBlockQuery {
	mods = append(mods, qm.From("\"repair_game_blocks\""), qmhelper.WhereIsNull("\"repair_game_blocks\".\"deleted_at\""))
	return repairGameBlockQuery{NewQuery(mods...)}
}

// FindRepairGameBlock retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRepairGameBlock(exec boil.Executor, iD string, selectCols ...string) (*RepairGameBlock, error) {
	repairGameBlockObj := &RepairGameBlock{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"repair_game_blocks\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, repairGameBlockObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from repair_game_blocks")
	}

	if err = repairGameBlockObj.doAfterSelectHooks(exec); err != nil {
		return repairGameBlockObj, err
	}

	return repairGameBlockObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RepairGameBlock) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no repair_game_blocks provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(repairGameBlockColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	repairGameBlockInsertCacheMut.RLock()
	cache, cached := repairGameBlockInsertCache[key]
	repairGameBlockInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			repairGameBlockAllColumns,
			repairGameBlockColumnsWithDefault,
			repairGameBlockColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(repairGameBlockType, repairGameBlockMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(repairGameBlockType, repairGameBlockMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"repair_game_blocks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"repair_game_blocks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into repair_game_blocks")
	}

	if !cached {
		repairGameBlockInsertCacheMut.Lock()
		repairGameBlockInsertCache[key] = cache
		repairGameBlockInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the RepairGameBlock.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RepairGameBlock) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	repairGameBlockUpdateCacheMut.RLock()
	cache, cached := repairGameBlockUpdateCache[key]
	repairGameBlockUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			repairGameBlockAllColumns,
			repairGameBlockPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update repair_game_blocks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"repair_game_blocks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, repairGameBlockPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(repairGameBlockType, repairGameBlockMapping, append(wl, repairGameBlockPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update repair_game_blocks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for repair_game_blocks")
	}

	if !cached {
		repairGameBlockUpdateCacheMut.Lock()
		repairGameBlockUpdateCache[key] = cache
		repairGameBlockUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q repairGameBlockQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for repair_game_blocks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for repair_game_blocks")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RepairGameBlockSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repairGameBlockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"repair_game_blocks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, repairGameBlockPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in repairGameBlock slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all repairGameBlock")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RepairGameBlock) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no repair_game_blocks provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(repairGameBlockColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	repairGameBlockUpsertCacheMut.RLock()
	cache, cached := repairGameBlockUpsertCache[key]
	repairGameBlockUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			repairGameBlockAllColumns,
			repairGameBlockColumnsWithDefault,
			repairGameBlockColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			repairGameBlockAllColumns,
			repairGameBlockPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert repair_game_blocks, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(repairGameBlockPrimaryKeyColumns))
			copy(conflict, repairGameBlockPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"repair_game_blocks\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(repairGameBlockType, repairGameBlockMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(repairGameBlockType, repairGameBlockMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert repair_game_blocks")
	}

	if !cached {
		repairGameBlockUpsertCacheMut.Lock()
		repairGameBlockUpsertCache[key] = cache
		repairGameBlockUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single RepairGameBlock record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RepairGameBlock) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no RepairGameBlock provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), repairGameBlockPrimaryKeyMapping)
		sql = "DELETE FROM \"repair_game_blocks\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"repair_game_blocks\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(repairGameBlockType, repairGameBlockMapping, append(wl, repairGameBlockPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from repair_game_blocks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for repair_game_blocks")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q repairGameBlockQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no repairGameBlockQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from repair_game_blocks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for repair_game_blocks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RepairGameBlockSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(repairGameBlockBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repairGameBlockPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"repair_game_blocks\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, repairGameBlockPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repairGameBlockPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"repair_game_blocks\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, repairGameBlockPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from repairGameBlock slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for repair_game_blocks")
	}

	if len(repairGameBlockAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RepairGameBlock) Reload(exec boil.Executor) error {
	ret, err := FindRepairGameBlock(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RepairGameBlockSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RepairGameBlockSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repairGameBlockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"repair_game_blocks\".* FROM \"repair_game_blocks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, repairGameBlockPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in RepairGameBlockSlice")
	}

	*o = slice

	return nil
}

// RepairGameBlockExists checks if the RepairGameBlock row exists.
func RepairGameBlockExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"repair_game_blocks\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if repair_game_blocks exists")
	}

	return exists, nil
}
