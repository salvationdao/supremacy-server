// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BattleQueueFeesOld is an object representing the database table.
type BattleQueueFeesOld struct {
	ID                string          `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	MechID            string          `boiler:"mech_id" boil:"mech_id" json:"mech_id" toml:"mech_id" yaml:"mech_id"`
	PaidByID          string          `boiler:"paid_by_id" boil:"paid_by_id" json:"paid_by_id" toml:"paid_by_id" yaml:"paid_by_id"`
	Amount            decimal.Decimal `boiler:"amount" boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	PaidTXID          null.String     `boiler:"paid_tx_id" boil:"paid_tx_id" json:"paid_tx_id,omitempty" toml:"paid_tx_id" yaml:"paid_tx_id,omitempty"`
	PayoutTXID        null.String     `boiler:"payout_tx_id" boil:"payout_tx_id" json:"payout_tx_id,omitempty" toml:"payout_tx_id" yaml:"payout_tx_id,omitempty"`
	TaxTXID           null.String     `boiler:"tax_tx_id" boil:"tax_tx_id" json:"tax_tx_id,omitempty" toml:"tax_tx_id" yaml:"tax_tx_id,omitempty"`
	ChallengeFundTXID null.String     `boiler:"challenge_fund_tx_id" boil:"challenge_fund_tx_id" json:"challenge_fund_tx_id,omitempty" toml:"challenge_fund_tx_id" yaml:"challenge_fund_tx_id,omitempty"`
	CreatedAt         time.Time       `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt         time.Time       `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt         null.Time       `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	BonusSupsTXID     null.String     `boiler:"bonus_sups_tx_id" boil:"bonus_sups_tx_id" json:"bonus_sups_tx_id,omitempty" toml:"bonus_sups_tx_id" yaml:"bonus_sups_tx_id,omitempty"`

	R *battleQueueFeesOldR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L battleQueueFeesOldL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattleQueueFeesOldColumns = struct {
	ID                string
	MechID            string
	PaidByID          string
	Amount            string
	PaidTXID          string
	PayoutTXID        string
	TaxTXID           string
	ChallengeFundTXID string
	CreatedAt         string
	UpdatedAt         string
	DeletedAt         string
	BonusSupsTXID     string
}{
	ID:                "id",
	MechID:            "mech_id",
	PaidByID:          "paid_by_id",
	Amount:            "amount",
	PaidTXID:          "paid_tx_id",
	PayoutTXID:        "payout_tx_id",
	TaxTXID:           "tax_tx_id",
	ChallengeFundTXID: "challenge_fund_tx_id",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
	DeletedAt:         "deleted_at",
	BonusSupsTXID:     "bonus_sups_tx_id",
}

var BattleQueueFeesOldTableColumns = struct {
	ID                string
	MechID            string
	PaidByID          string
	Amount            string
	PaidTXID          string
	PayoutTXID        string
	TaxTXID           string
	ChallengeFundTXID string
	CreatedAt         string
	UpdatedAt         string
	DeletedAt         string
	BonusSupsTXID     string
}{
	ID:                "battle_queue_fees_old.id",
	MechID:            "battle_queue_fees_old.mech_id",
	PaidByID:          "battle_queue_fees_old.paid_by_id",
	Amount:            "battle_queue_fees_old.amount",
	PaidTXID:          "battle_queue_fees_old.paid_tx_id",
	PayoutTXID:        "battle_queue_fees_old.payout_tx_id",
	TaxTXID:           "battle_queue_fees_old.tax_tx_id",
	ChallengeFundTXID: "battle_queue_fees_old.challenge_fund_tx_id",
	CreatedAt:         "battle_queue_fees_old.created_at",
	UpdatedAt:         "battle_queue_fees_old.updated_at",
	DeletedAt:         "battle_queue_fees_old.deleted_at",
	BonusSupsTXID:     "battle_queue_fees_old.bonus_sups_tx_id",
}

// Generated where

var BattleQueueFeesOldWhere = struct {
	ID                whereHelperstring
	MechID            whereHelperstring
	PaidByID          whereHelperstring
	Amount            whereHelperdecimal_Decimal
	PaidTXID          whereHelpernull_String
	PayoutTXID        whereHelpernull_String
	TaxTXID           whereHelpernull_String
	ChallengeFundTXID whereHelpernull_String
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpertime_Time
	DeletedAt         whereHelpernull_Time
	BonusSupsTXID     whereHelpernull_String
}{
	ID:                whereHelperstring{field: "\"battle_queue_fees_old\".\"id\""},
	MechID:            whereHelperstring{field: "\"battle_queue_fees_old\".\"mech_id\""},
	PaidByID:          whereHelperstring{field: "\"battle_queue_fees_old\".\"paid_by_id\""},
	Amount:            whereHelperdecimal_Decimal{field: "\"battle_queue_fees_old\".\"amount\""},
	PaidTXID:          whereHelpernull_String{field: "\"battle_queue_fees_old\".\"paid_tx_id\""},
	PayoutTXID:        whereHelpernull_String{field: "\"battle_queue_fees_old\".\"payout_tx_id\""},
	TaxTXID:           whereHelpernull_String{field: "\"battle_queue_fees_old\".\"tax_tx_id\""},
	ChallengeFundTXID: whereHelpernull_String{field: "\"battle_queue_fees_old\".\"challenge_fund_tx_id\""},
	CreatedAt:         whereHelpertime_Time{field: "\"battle_queue_fees_old\".\"created_at\""},
	UpdatedAt:         whereHelpertime_Time{field: "\"battle_queue_fees_old\".\"updated_at\""},
	DeletedAt:         whereHelpernull_Time{field: "\"battle_queue_fees_old\".\"deleted_at\""},
	BonusSupsTXID:     whereHelpernull_String{field: "\"battle_queue_fees_old\".\"bonus_sups_tx_id\""},
}

// BattleQueueFeesOldRels is where relationship names are stored.
var BattleQueueFeesOldRels = struct {
	Mech               string
	PaidBy             string
	FeeBattleQueueOlds string
}{
	Mech:               "Mech",
	PaidBy:             "PaidBy",
	FeeBattleQueueOlds: "FeeBattleQueueOlds",
}

// battleQueueFeesOldR is where relationships are stored.
type battleQueueFeesOldR struct {
	Mech               *Mech               `boiler:"Mech" boil:"Mech" json:"Mech" toml:"Mech" yaml:"Mech"`
	PaidBy             *Player             `boiler:"PaidBy" boil:"PaidBy" json:"PaidBy" toml:"PaidBy" yaml:"PaidBy"`
	FeeBattleQueueOlds BattleQueueOldSlice `boiler:"FeeBattleQueueOlds" boil:"FeeBattleQueueOlds" json:"FeeBattleQueueOlds" toml:"FeeBattleQueueOlds" yaml:"FeeBattleQueueOlds"`
}

// NewStruct creates a new relationship struct
func (*battleQueueFeesOldR) NewStruct() *battleQueueFeesOldR {
	return &battleQueueFeesOldR{}
}

// battleQueueFeesOldL is where Load methods for each relationship are stored.
type battleQueueFeesOldL struct{}

var (
	battleQueueFeesOldAllColumns            = []string{"id", "mech_id", "paid_by_id", "amount", "paid_tx_id", "payout_tx_id", "tax_tx_id", "challenge_fund_tx_id", "created_at", "updated_at", "deleted_at", "bonus_sups_tx_id"}
	battleQueueFeesOldColumnsWithoutDefault = []string{"mech_id", "paid_by_id", "amount"}
	battleQueueFeesOldColumnsWithDefault    = []string{"id", "paid_tx_id", "payout_tx_id", "tax_tx_id", "challenge_fund_tx_id", "created_at", "updated_at", "deleted_at", "bonus_sups_tx_id"}
	battleQueueFeesOldPrimaryKeyColumns     = []string{"id"}
	battleQueueFeesOldGeneratedColumns      = []string{}
)

type (
	// BattleQueueFeesOldSlice is an alias for a slice of pointers to BattleQueueFeesOld.
	// This should almost always be used instead of []BattleQueueFeesOld.
	BattleQueueFeesOldSlice []*BattleQueueFeesOld
	// BattleQueueFeesOldHook is the signature for custom BattleQueueFeesOld hook methods
	BattleQueueFeesOldHook func(boil.Executor, *BattleQueueFeesOld) error

	battleQueueFeesOldQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battleQueueFeesOldType                 = reflect.TypeOf(&BattleQueueFeesOld{})
	battleQueueFeesOldMapping              = queries.MakeStructMapping(battleQueueFeesOldType)
	battleQueueFeesOldPrimaryKeyMapping, _ = queries.BindMapping(battleQueueFeesOldType, battleQueueFeesOldMapping, battleQueueFeesOldPrimaryKeyColumns)
	battleQueueFeesOldInsertCacheMut       sync.RWMutex
	battleQueueFeesOldInsertCache          = make(map[string]insertCache)
	battleQueueFeesOldUpdateCacheMut       sync.RWMutex
	battleQueueFeesOldUpdateCache          = make(map[string]updateCache)
	battleQueueFeesOldUpsertCacheMut       sync.RWMutex
	battleQueueFeesOldUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battleQueueFeesOldAfterSelectHooks []BattleQueueFeesOldHook

var battleQueueFeesOldBeforeInsertHooks []BattleQueueFeesOldHook
var battleQueueFeesOldAfterInsertHooks []BattleQueueFeesOldHook

var battleQueueFeesOldBeforeUpdateHooks []BattleQueueFeesOldHook
var battleQueueFeesOldAfterUpdateHooks []BattleQueueFeesOldHook

var battleQueueFeesOldBeforeDeleteHooks []BattleQueueFeesOldHook
var battleQueueFeesOldAfterDeleteHooks []BattleQueueFeesOldHook

var battleQueueFeesOldBeforeUpsertHooks []BattleQueueFeesOldHook
var battleQueueFeesOldAfterUpsertHooks []BattleQueueFeesOldHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BattleQueueFeesOld) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueFeesOldAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BattleQueueFeesOld) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueFeesOldBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BattleQueueFeesOld) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueFeesOldAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BattleQueueFeesOld) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueFeesOldBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BattleQueueFeesOld) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueFeesOldAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BattleQueueFeesOld) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueFeesOldBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BattleQueueFeesOld) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueFeesOldAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BattleQueueFeesOld) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueFeesOldBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BattleQueueFeesOld) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueFeesOldAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattleQueueFeesOldHook registers your hook function for all future operations.
func AddBattleQueueFeesOldHook(hookPoint boil.HookPoint, battleQueueFeesOldHook BattleQueueFeesOldHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		battleQueueFeesOldAfterSelectHooks = append(battleQueueFeesOldAfterSelectHooks, battleQueueFeesOldHook)
	case boil.BeforeInsertHook:
		battleQueueFeesOldBeforeInsertHooks = append(battleQueueFeesOldBeforeInsertHooks, battleQueueFeesOldHook)
	case boil.AfterInsertHook:
		battleQueueFeesOldAfterInsertHooks = append(battleQueueFeesOldAfterInsertHooks, battleQueueFeesOldHook)
	case boil.BeforeUpdateHook:
		battleQueueFeesOldBeforeUpdateHooks = append(battleQueueFeesOldBeforeUpdateHooks, battleQueueFeesOldHook)
	case boil.AfterUpdateHook:
		battleQueueFeesOldAfterUpdateHooks = append(battleQueueFeesOldAfterUpdateHooks, battleQueueFeesOldHook)
	case boil.BeforeDeleteHook:
		battleQueueFeesOldBeforeDeleteHooks = append(battleQueueFeesOldBeforeDeleteHooks, battleQueueFeesOldHook)
	case boil.AfterDeleteHook:
		battleQueueFeesOldAfterDeleteHooks = append(battleQueueFeesOldAfterDeleteHooks, battleQueueFeesOldHook)
	case boil.BeforeUpsertHook:
		battleQueueFeesOldBeforeUpsertHooks = append(battleQueueFeesOldBeforeUpsertHooks, battleQueueFeesOldHook)
	case boil.AfterUpsertHook:
		battleQueueFeesOldAfterUpsertHooks = append(battleQueueFeesOldAfterUpsertHooks, battleQueueFeesOldHook)
	}
}

// One returns a single battleQueueFeesOld record from the query.
func (q battleQueueFeesOldQuery) One(exec boil.Executor) (*BattleQueueFeesOld, error) {
	o := &BattleQueueFeesOld{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for battle_queue_fees_old")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BattleQueueFeesOld records from the query.
func (q battleQueueFeesOldQuery) All(exec boil.Executor) (BattleQueueFeesOldSlice, error) {
	var o []*BattleQueueFeesOld

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BattleQueueFeesOld slice")
	}

	if len(battleQueueFeesOldAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BattleQueueFeesOld records in the query.
func (q battleQueueFeesOldQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count battle_queue_fees_old rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battleQueueFeesOldQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if battle_queue_fees_old exists")
	}

	return count > 0, nil
}

// Mech pointed to by the foreign key.
func (o *BattleQueueFeesOld) Mech(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MechID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// PaidBy pointed to by the foreign key.
func (o *BattleQueueFeesOld) PaidBy(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PaidByID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// FeeBattleQueueOlds retrieves all the battle_queue_old's BattleQueueOlds with an executor via fee_id column.
func (o *BattleQueueFeesOld) FeeBattleQueueOlds(mods ...qm.QueryMod) battleQueueOldQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_queue_old\".\"fee_id\"=?", o.ID),
	)

	query := BattleQueueOlds(queryMods...)
	queries.SetFrom(query.Query, "\"battle_queue_old\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_queue_old\".*"})
	}

	return query
}

// LoadMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleQueueFeesOldL) LoadMech(e boil.Executor, singular bool, maybeBattleQueueFeesOld interface{}, mods queries.Applicator) error {
	var slice []*BattleQueueFeesOld
	var object *BattleQueueFeesOld

	if singular {
		object = maybeBattleQueueFeesOld.(*BattleQueueFeesOld)
	} else {
		slice = *maybeBattleQueueFeesOld.(*[]*BattleQueueFeesOld)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleQueueFeesOldR{}
		}
		args = append(args, object.MechID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleQueueFeesOldR{}
			}

			for _, a := range args {
				if a == obj.MechID {
					continue Outer
				}
			}

			args = append(args, obj.MechID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(battleQueueFeesOldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Mech = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.BattleQueueFeesOlds = append(foreign.R.BattleQueueFeesOlds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MechID == foreign.ID {
				local.R.Mech = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.BattleQueueFeesOlds = append(foreign.R.BattleQueueFeesOlds, local)
				break
			}
		}
	}

	return nil
}

// LoadPaidBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleQueueFeesOldL) LoadPaidBy(e boil.Executor, singular bool, maybeBattleQueueFeesOld interface{}, mods queries.Applicator) error {
	var slice []*BattleQueueFeesOld
	var object *BattleQueueFeesOld

	if singular {
		object = maybeBattleQueueFeesOld.(*BattleQueueFeesOld)
	} else {
		slice = *maybeBattleQueueFeesOld.(*[]*BattleQueueFeesOld)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleQueueFeesOldR{}
		}
		args = append(args, object.PaidByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleQueueFeesOldR{}
			}

			for _, a := range args {
				if a == obj.PaidByID {
					continue Outer
				}
			}

			args = append(args, obj.PaidByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(battleQueueFeesOldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PaidBy = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.PaidByBattleQueueFeesOlds = append(foreign.R.PaidByBattleQueueFeesOlds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PaidByID == foreign.ID {
				local.R.PaidBy = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.PaidByBattleQueueFeesOlds = append(foreign.R.PaidByBattleQueueFeesOlds, local)
				break
			}
		}
	}

	return nil
}

// LoadFeeBattleQueueOlds allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleQueueFeesOldL) LoadFeeBattleQueueOlds(e boil.Executor, singular bool, maybeBattleQueueFeesOld interface{}, mods queries.Applicator) error {
	var slice []*BattleQueueFeesOld
	var object *BattleQueueFeesOld

	if singular {
		object = maybeBattleQueueFeesOld.(*BattleQueueFeesOld)
	} else {
		slice = *maybeBattleQueueFeesOld.(*[]*BattleQueueFeesOld)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleQueueFeesOldR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleQueueFeesOldR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_queue_old`),
		qm.WhereIn(`battle_queue_old.fee_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_queue_old")
	}

	var resultSlice []*BattleQueueOld
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_queue_old")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_queue_old")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_queue_old")
	}

	if len(battleQueueOldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FeeBattleQueueOlds = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleQueueOldR{}
			}
			foreign.R.Fee = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.FeeID) {
				local.R.FeeBattleQueueOlds = append(local.R.FeeBattleQueueOlds, foreign)
				if foreign.R == nil {
					foreign.R = &battleQueueOldR{}
				}
				foreign.R.Fee = local
				break
			}
		}
	}

	return nil
}

// SetMech of the battleQueueFeesOld to the related item.
// Sets o.R.Mech to related.
// Adds o to related.R.BattleQueueFeesOlds.
func (o *BattleQueueFeesOld) SetMech(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_queue_fees_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleQueueFeesOldPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MechID = related.ID
	if o.R == nil {
		o.R = &battleQueueFeesOldR{
			Mech: related,
		}
	} else {
		o.R.Mech = related
	}

	if related.R == nil {
		related.R = &mechR{
			BattleQueueFeesOlds: BattleQueueFeesOldSlice{o},
		}
	} else {
		related.R.BattleQueueFeesOlds = append(related.R.BattleQueueFeesOlds, o)
	}

	return nil
}

// SetPaidBy of the battleQueueFeesOld to the related item.
// Sets o.R.PaidBy to related.
// Adds o to related.R.PaidByBattleQueueFeesOlds.
func (o *BattleQueueFeesOld) SetPaidBy(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_queue_fees_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"paid_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleQueueFeesOldPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PaidByID = related.ID
	if o.R == nil {
		o.R = &battleQueueFeesOldR{
			PaidBy: related,
		}
	} else {
		o.R.PaidBy = related
	}

	if related.R == nil {
		related.R = &playerR{
			PaidByBattleQueueFeesOlds: BattleQueueFeesOldSlice{o},
		}
	} else {
		related.R.PaidByBattleQueueFeesOlds = append(related.R.PaidByBattleQueueFeesOlds, o)
	}

	return nil
}

// AddFeeBattleQueueOlds adds the given related objects to the existing relationships
// of the battle_queue_fees_old, optionally inserting them as new records.
// Appends related to o.R.FeeBattleQueueOlds.
// Sets related.R.Fee appropriately.
func (o *BattleQueueFeesOld) AddFeeBattleQueueOlds(exec boil.Executor, insert bool, related ...*BattleQueueOld) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.FeeID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_queue_old\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"fee_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleQueueOldPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.MechID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.FeeID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &battleQueueFeesOldR{
			FeeBattleQueueOlds: related,
		}
	} else {
		o.R.FeeBattleQueueOlds = append(o.R.FeeBattleQueueOlds, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleQueueOldR{
				Fee: o,
			}
		} else {
			rel.R.Fee = o
		}
	}
	return nil
}

// SetFeeBattleQueueOlds removes all previously related items of the
// battle_queue_fees_old replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Fee's FeeBattleQueueOlds accordingly.
// Replaces o.R.FeeBattleQueueOlds with related.
// Sets related.R.Fee's FeeBattleQueueOlds accordingly.
func (o *BattleQueueFeesOld) SetFeeBattleQueueOlds(exec boil.Executor, insert bool, related ...*BattleQueueOld) error {
	query := "update \"battle_queue_old\" set \"fee_id\" = null where \"fee_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.FeeBattleQueueOlds {
			queries.SetScanner(&rel.FeeID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Fee = nil
		}

		o.R.FeeBattleQueueOlds = nil
	}
	return o.AddFeeBattleQueueOlds(exec, insert, related...)
}

// RemoveFeeBattleQueueOlds relationships from objects passed in.
// Removes related items from R.FeeBattleQueueOlds (uses pointer comparison, removal does not keep order)
// Sets related.R.Fee.
func (o *BattleQueueFeesOld) RemoveFeeBattleQueueOlds(exec boil.Executor, related ...*BattleQueueOld) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.FeeID, nil)
		if rel.R != nil {
			rel.R.Fee = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("fee_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.FeeBattleQueueOlds {
			if rel != ri {
				continue
			}

			ln := len(o.R.FeeBattleQueueOlds)
			if ln > 1 && i < ln-1 {
				o.R.FeeBattleQueueOlds[i] = o.R.FeeBattleQueueOlds[ln-1]
			}
			o.R.FeeBattleQueueOlds = o.R.FeeBattleQueueOlds[:ln-1]
			break
		}
	}

	return nil
}

// BattleQueueFeesOlds retrieves all the records using an executor.
func BattleQueueFeesOlds(mods ...qm.QueryMod) battleQueueFeesOldQuery {
	mods = append(mods, qm.From("\"battle_queue_fees_old\""), qmhelper.WhereIsNull("\"battle_queue_fees_old\".\"deleted_at\""))
	return battleQueueFeesOldQuery{NewQuery(mods...)}
}

// FindBattleQueueFeesOld retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattleQueueFeesOld(exec boil.Executor, iD string, selectCols ...string) (*BattleQueueFeesOld, error) {
	battleQueueFeesOldObj := &BattleQueueFeesOld{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battle_queue_fees_old\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, battleQueueFeesOldObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from battle_queue_fees_old")
	}

	if err = battleQueueFeesOldObj.doAfterSelectHooks(exec); err != nil {
		return battleQueueFeesOldObj, err
	}

	return battleQueueFeesOldObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BattleQueueFeesOld) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_queue_fees_old provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleQueueFeesOldColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battleQueueFeesOldInsertCacheMut.RLock()
	cache, cached := battleQueueFeesOldInsertCache[key]
	battleQueueFeesOldInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battleQueueFeesOldAllColumns,
			battleQueueFeesOldColumnsWithDefault,
			battleQueueFeesOldColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battleQueueFeesOldType, battleQueueFeesOldMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battleQueueFeesOldType, battleQueueFeesOldMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battle_queue_fees_old\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battle_queue_fees_old\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into battle_queue_fees_old")
	}

	if !cached {
		battleQueueFeesOldInsertCacheMut.Lock()
		battleQueueFeesOldInsertCache[key] = cache
		battleQueueFeesOldInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BattleQueueFeesOld.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BattleQueueFeesOld) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battleQueueFeesOldUpdateCacheMut.RLock()
	cache, cached := battleQueueFeesOldUpdateCache[key]
	battleQueueFeesOldUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battleQueueFeesOldAllColumns,
			battleQueueFeesOldPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update battle_queue_fees_old, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battle_queue_fees_old\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battleQueueFeesOldPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battleQueueFeesOldType, battleQueueFeesOldMapping, append(wl, battleQueueFeesOldPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update battle_queue_fees_old row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for battle_queue_fees_old")
	}

	if !cached {
		battleQueueFeesOldUpdateCacheMut.Lock()
		battleQueueFeesOldUpdateCache[key] = cache
		battleQueueFeesOldUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battleQueueFeesOldQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for battle_queue_fees_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for battle_queue_fees_old")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattleQueueFeesOldSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleQueueFeesOldPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battle_queue_fees_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battleQueueFeesOldPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in battleQueueFeesOld slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all battleQueueFeesOld")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BattleQueueFeesOld) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_queue_fees_old provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleQueueFeesOldColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battleQueueFeesOldUpsertCacheMut.RLock()
	cache, cached := battleQueueFeesOldUpsertCache[key]
	battleQueueFeesOldUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battleQueueFeesOldAllColumns,
			battleQueueFeesOldColumnsWithDefault,
			battleQueueFeesOldColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			battleQueueFeesOldAllColumns,
			battleQueueFeesOldPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert battle_queue_fees_old, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battleQueueFeesOldPrimaryKeyColumns))
			copy(conflict, battleQueueFeesOldPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battle_queue_fees_old\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battleQueueFeesOldType, battleQueueFeesOldMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battleQueueFeesOldType, battleQueueFeesOldMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert battle_queue_fees_old")
	}

	if !cached {
		battleQueueFeesOldUpsertCacheMut.Lock()
		battleQueueFeesOldUpsertCache[key] = cache
		battleQueueFeesOldUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BattleQueueFeesOld record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BattleQueueFeesOld) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BattleQueueFeesOld provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battleQueueFeesOldPrimaryKeyMapping)
		sql = "DELETE FROM \"battle_queue_fees_old\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"battle_queue_fees_old\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(battleQueueFeesOldType, battleQueueFeesOldMapping, append(wl, battleQueueFeesOldPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from battle_queue_fees_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for battle_queue_fees_old")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battleQueueFeesOldQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no battleQueueFeesOldQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battle_queue_fees_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_queue_fees_old")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattleQueueFeesOldSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(battleQueueFeesOldBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleQueueFeesOldPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"battle_queue_fees_old\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleQueueFeesOldPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleQueueFeesOldPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"battle_queue_fees_old\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, battleQueueFeesOldPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battleQueueFeesOld slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_queue_fees_old")
	}

	if len(battleQueueFeesOldAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BattleQueueFeesOld) Reload(exec boil.Executor) error {
	ret, err := FindBattleQueueFeesOld(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattleQueueFeesOldSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattleQueueFeesOldSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleQueueFeesOldPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battle_queue_fees_old\".* FROM \"battle_queue_fees_old\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleQueueFeesOldPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BattleQueueFeesOldSlice")
	}

	*o = slice

	return nil
}

// BattleQueueFeesOldExists checks if the BattleQueueFeesOld row exists.
func BattleQueueFeesOldExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battle_queue_fees_old\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if battle_queue_fees_old exists")
	}

	return exists, nil
}
