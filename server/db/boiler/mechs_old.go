// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MechsOld is an object representing the database table.
type MechsOld struct {
	ID               string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	OwnerID          string      `boiler:"owner_id" boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	TemplateID       string      `boiler:"template_id" boil:"template_id" json:"template_id" toml:"template_id" yaml:"template_id"`
	ChassisID        string      `boiler:"chassis_id" boil:"chassis_id" json:"chassis_id" toml:"chassis_id" yaml:"chassis_id"`
	ExternalTokenID  int         `boiler:"external_token_id" boil:"external_token_id" json:"external_token_id" toml:"external_token_id" yaml:"external_token_id"`
	Tier             string      `boiler:"tier" boil:"tier" json:"tier" toml:"tier" yaml:"tier"`
	IsDefault        bool        `boiler:"is_default" boil:"is_default" json:"is_default" toml:"is_default" yaml:"is_default"`
	ImageURL         string      `boiler:"image_url" boil:"image_url" json:"image_url" toml:"image_url" yaml:"image_url"`
	AnimationURL     string      `boiler:"animation_url" boil:"animation_url" json:"animation_url" toml:"animation_url" yaml:"animation_url"`
	CardAnimationURL string      `boiler:"card_animation_url" boil:"card_animation_url" json:"card_animation_url" toml:"card_animation_url" yaml:"card_animation_url"`
	AvatarURL        string      `boiler:"avatar_url" boil:"avatar_url" json:"avatar_url" toml:"avatar_url" yaml:"avatar_url"`
	Hash             string      `boiler:"hash" boil:"hash" json:"hash" toml:"hash" yaml:"hash"`
	Name             string      `boiler:"name" boil:"name" json:"name" toml:"name" yaml:"name"`
	Label            string      `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	Slug             string      `boiler:"slug" boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	AssetType        string      `boiler:"asset_type" boil:"asset_type" json:"asset_type" toml:"asset_type" yaml:"asset_type"`
	DeletedAt        null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt        time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt        time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	LargeImageURL    string      `boiler:"large_image_url" boil:"large_image_url" json:"large_image_url" toml:"large_image_url" yaml:"large_image_url"`
	CollectionSlug   null.String `boiler:"collection_slug" boil:"collection_slug" json:"collection_slug,omitempty" toml:"collection_slug" yaml:"collection_slug,omitempty"`
	IsInsured        bool        `boiler:"is_insured" boil:"is_insured" json:"is_insured" toml:"is_insured" yaml:"is_insured"`

	R *mechsOldR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L mechsOldL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MechsOldColumns = struct {
	ID               string
	OwnerID          string
	TemplateID       string
	ChassisID        string
	ExternalTokenID  string
	Tier             string
	IsDefault        string
	ImageURL         string
	AnimationURL     string
	CardAnimationURL string
	AvatarURL        string
	Hash             string
	Name             string
	Label            string
	Slug             string
	AssetType        string
	DeletedAt        string
	UpdatedAt        string
	CreatedAt        string
	LargeImageURL    string
	CollectionSlug   string
	IsInsured        string
}{
	ID:               "id",
	OwnerID:          "owner_id",
	TemplateID:       "template_id",
	ChassisID:        "chassis_id",
	ExternalTokenID:  "external_token_id",
	Tier:             "tier",
	IsDefault:        "is_default",
	ImageURL:         "image_url",
	AnimationURL:     "animation_url",
	CardAnimationURL: "card_animation_url",
	AvatarURL:        "avatar_url",
	Hash:             "hash",
	Name:             "name",
	Label:            "label",
	Slug:             "slug",
	AssetType:        "asset_type",
	DeletedAt:        "deleted_at",
	UpdatedAt:        "updated_at",
	CreatedAt:        "created_at",
	LargeImageURL:    "large_image_url",
	CollectionSlug:   "collection_slug",
	IsInsured:        "is_insured",
}

var MechsOldTableColumns = struct {
	ID               string
	OwnerID          string
	TemplateID       string
	ChassisID        string
	ExternalTokenID  string
	Tier             string
	IsDefault        string
	ImageURL         string
	AnimationURL     string
	CardAnimationURL string
	AvatarURL        string
	Hash             string
	Name             string
	Label            string
	Slug             string
	AssetType        string
	DeletedAt        string
	UpdatedAt        string
	CreatedAt        string
	LargeImageURL    string
	CollectionSlug   string
	IsInsured        string
}{
	ID:               "mechs_old.id",
	OwnerID:          "mechs_old.owner_id",
	TemplateID:       "mechs_old.template_id",
	ChassisID:        "mechs_old.chassis_id",
	ExternalTokenID:  "mechs_old.external_token_id",
	Tier:             "mechs_old.tier",
	IsDefault:        "mechs_old.is_default",
	ImageURL:         "mechs_old.image_url",
	AnimationURL:     "mechs_old.animation_url",
	CardAnimationURL: "mechs_old.card_animation_url",
	AvatarURL:        "mechs_old.avatar_url",
	Hash:             "mechs_old.hash",
	Name:             "mechs_old.name",
	Label:            "mechs_old.label",
	Slug:             "mechs_old.slug",
	AssetType:        "mechs_old.asset_type",
	DeletedAt:        "mechs_old.deleted_at",
	UpdatedAt:        "mechs_old.updated_at",
	CreatedAt:        "mechs_old.created_at",
	LargeImageURL:    "mechs_old.large_image_url",
	CollectionSlug:   "mechs_old.collection_slug",
	IsInsured:        "mechs_old.is_insured",
}

// Generated where

var MechsOldWhere = struct {
	ID               whereHelperstring
	OwnerID          whereHelperstring
	TemplateID       whereHelperstring
	ChassisID        whereHelperstring
	ExternalTokenID  whereHelperint
	Tier             whereHelperstring
	IsDefault        whereHelperbool
	ImageURL         whereHelperstring
	AnimationURL     whereHelperstring
	CardAnimationURL whereHelperstring
	AvatarURL        whereHelperstring
	Hash             whereHelperstring
	Name             whereHelperstring
	Label            whereHelperstring
	Slug             whereHelperstring
	AssetType        whereHelperstring
	DeletedAt        whereHelpernull_Time
	UpdatedAt        whereHelpertime_Time
	CreatedAt        whereHelpertime_Time
	LargeImageURL    whereHelperstring
	CollectionSlug   whereHelpernull_String
	IsInsured        whereHelperbool
}{
	ID:               whereHelperstring{field: "\"mechs_old\".\"id\""},
	OwnerID:          whereHelperstring{field: "\"mechs_old\".\"owner_id\""},
	TemplateID:       whereHelperstring{field: "\"mechs_old\".\"template_id\""},
	ChassisID:        whereHelperstring{field: "\"mechs_old\".\"chassis_id\""},
	ExternalTokenID:  whereHelperint{field: "\"mechs_old\".\"external_token_id\""},
	Tier:             whereHelperstring{field: "\"mechs_old\".\"tier\""},
	IsDefault:        whereHelperbool{field: "\"mechs_old\".\"is_default\""},
	ImageURL:         whereHelperstring{field: "\"mechs_old\".\"image_url\""},
	AnimationURL:     whereHelperstring{field: "\"mechs_old\".\"animation_url\""},
	CardAnimationURL: whereHelperstring{field: "\"mechs_old\".\"card_animation_url\""},
	AvatarURL:        whereHelperstring{field: "\"mechs_old\".\"avatar_url\""},
	Hash:             whereHelperstring{field: "\"mechs_old\".\"hash\""},
	Name:             whereHelperstring{field: "\"mechs_old\".\"name\""},
	Label:            whereHelperstring{field: "\"mechs_old\".\"label\""},
	Slug:             whereHelperstring{field: "\"mechs_old\".\"slug\""},
	AssetType:        whereHelperstring{field: "\"mechs_old\".\"asset_type\""},
	DeletedAt:        whereHelpernull_Time{field: "\"mechs_old\".\"deleted_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"mechs_old\".\"updated_at\""},
	CreatedAt:        whereHelpertime_Time{field: "\"mechs_old\".\"created_at\""},
	LargeImageURL:    whereHelperstring{field: "\"mechs_old\".\"large_image_url\""},
	CollectionSlug:   whereHelpernull_String{field: "\"mechs_old\".\"collection_slug\""},
	IsInsured:        whereHelperbool{field: "\"mechs_old\".\"is_insured\""},
}

// MechsOldRels is where relationship names are stored.
var MechsOldRels = struct {
	Chassis  string
	Owner    string
	Template string
}{
	Chassis:  "Chassis",
	Owner:    "Owner",
	Template: "Template",
}

// mechsOldR is where relationships are stored.
type mechsOldR struct {
	Chassis  *Mech         `boiler:"Chassis" boil:"Chassis" json:"Chassis" toml:"Chassis" yaml:"Chassis"`
	Owner    *Player       `boiler:"Owner" boil:"Owner" json:"Owner" toml:"Owner" yaml:"Owner"`
	Template *TemplatesOld `boiler:"Template" boil:"Template" json:"Template" toml:"Template" yaml:"Template"`
}

// NewStruct creates a new relationship struct
func (*mechsOldR) NewStruct() *mechsOldR {
	return &mechsOldR{}
}

// mechsOldL is where Load methods for each relationship are stored.
type mechsOldL struct{}

var (
	mechsOldAllColumns            = []string{"id", "owner_id", "template_id", "chassis_id", "external_token_id", "tier", "is_default", "image_url", "animation_url", "card_animation_url", "avatar_url", "hash", "name", "label", "slug", "asset_type", "deleted_at", "updated_at", "created_at", "large_image_url", "collection_slug", "is_insured"}
	mechsOldColumnsWithoutDefault = []string{"owner_id", "template_id", "chassis_id", "external_token_id", "tier", "image_url", "animation_url", "card_animation_url", "avatar_url", "hash", "name", "label", "slug", "asset_type", "large_image_url"}
	mechsOldColumnsWithDefault    = []string{"id", "is_default", "deleted_at", "updated_at", "created_at", "collection_slug", "is_insured"}
	mechsOldPrimaryKeyColumns     = []string{"id"}
	mechsOldGeneratedColumns      = []string{}
)

type (
	// MechsOldSlice is an alias for a slice of pointers to MechsOld.
	// This should almost always be used instead of []MechsOld.
	MechsOldSlice []*MechsOld
	// MechsOldHook is the signature for custom MechsOld hook methods
	MechsOldHook func(boil.Executor, *MechsOld) error

	mechsOldQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mechsOldType                 = reflect.TypeOf(&MechsOld{})
	mechsOldMapping              = queries.MakeStructMapping(mechsOldType)
	mechsOldPrimaryKeyMapping, _ = queries.BindMapping(mechsOldType, mechsOldMapping, mechsOldPrimaryKeyColumns)
	mechsOldInsertCacheMut       sync.RWMutex
	mechsOldInsertCache          = make(map[string]insertCache)
	mechsOldUpdateCacheMut       sync.RWMutex
	mechsOldUpdateCache          = make(map[string]updateCache)
	mechsOldUpsertCacheMut       sync.RWMutex
	mechsOldUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mechsOldAfterSelectHooks []MechsOldHook

var mechsOldBeforeInsertHooks []MechsOldHook
var mechsOldAfterInsertHooks []MechsOldHook

var mechsOldBeforeUpdateHooks []MechsOldHook
var mechsOldAfterUpdateHooks []MechsOldHook

var mechsOldBeforeDeleteHooks []MechsOldHook
var mechsOldAfterDeleteHooks []MechsOldHook

var mechsOldBeforeUpsertHooks []MechsOldHook
var mechsOldAfterUpsertHooks []MechsOldHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MechsOld) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range mechsOldAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MechsOld) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechsOldBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MechsOld) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechsOldAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MechsOld) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechsOldBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MechsOld) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechsOldAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MechsOld) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechsOldBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MechsOld) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechsOldAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MechsOld) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechsOldBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MechsOld) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechsOldAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMechsOldHook registers your hook function for all future operations.
func AddMechsOldHook(hookPoint boil.HookPoint, mechsOldHook MechsOldHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mechsOldAfterSelectHooks = append(mechsOldAfterSelectHooks, mechsOldHook)
	case boil.BeforeInsertHook:
		mechsOldBeforeInsertHooks = append(mechsOldBeforeInsertHooks, mechsOldHook)
	case boil.AfterInsertHook:
		mechsOldAfterInsertHooks = append(mechsOldAfterInsertHooks, mechsOldHook)
	case boil.BeforeUpdateHook:
		mechsOldBeforeUpdateHooks = append(mechsOldBeforeUpdateHooks, mechsOldHook)
	case boil.AfterUpdateHook:
		mechsOldAfterUpdateHooks = append(mechsOldAfterUpdateHooks, mechsOldHook)
	case boil.BeforeDeleteHook:
		mechsOldBeforeDeleteHooks = append(mechsOldBeforeDeleteHooks, mechsOldHook)
	case boil.AfterDeleteHook:
		mechsOldAfterDeleteHooks = append(mechsOldAfterDeleteHooks, mechsOldHook)
	case boil.BeforeUpsertHook:
		mechsOldBeforeUpsertHooks = append(mechsOldBeforeUpsertHooks, mechsOldHook)
	case boil.AfterUpsertHook:
		mechsOldAfterUpsertHooks = append(mechsOldAfterUpsertHooks, mechsOldHook)
	}
}

// One returns a single mechsOld record from the query.
func (q mechsOldQuery) One(exec boil.Executor) (*MechsOld, error) {
	o := &MechsOld{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for mechs_old")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MechsOld records from the query.
func (q mechsOldQuery) All(exec boil.Executor) (MechsOldSlice, error) {
	var o []*MechsOld

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to MechsOld slice")
	}

	if len(mechsOldAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MechsOld records in the query.
func (q mechsOldQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count mechs_old rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mechsOldQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if mechs_old exists")
	}

	return count > 0, nil
}

// Chassis pointed to by the foreign key.
func (o *MechsOld) Chassis(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ChassisID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// Owner pointed to by the foreign key.
func (o *MechsOld) Owner(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OwnerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// Template pointed to by the foreign key.
func (o *MechsOld) Template(mods ...qm.QueryMod) templatesOldQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TemplateID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := TemplatesOlds(queryMods...)
	queries.SetFrom(query.Query, "\"templates_old\"")

	return query
}

// LoadChassis allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechsOldL) LoadChassis(e boil.Executor, singular bool, maybeMechsOld interface{}, mods queries.Applicator) error {
	var slice []*MechsOld
	var object *MechsOld

	if singular {
		object = maybeMechsOld.(*MechsOld)
	} else {
		slice = *maybeMechsOld.(*[]*MechsOld)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechsOldR{}
		}
		args = append(args, object.ChassisID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechsOldR{}
			}

			for _, a := range args {
				if a == obj.ChassisID {
					continue Outer
				}
			}

			args = append(args, obj.ChassisID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(mechsOldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Chassis = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.ChassisMechsOld = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChassisID == foreign.ID {
				local.R.Chassis = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.ChassisMechsOld = local
				break
			}
		}
	}

	return nil
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechsOldL) LoadOwner(e boil.Executor, singular bool, maybeMechsOld interface{}, mods queries.Applicator) error {
	var slice []*MechsOld
	var object *MechsOld

	if singular {
		object = maybeMechsOld.(*MechsOld)
	} else {
		slice = *maybeMechsOld.(*[]*MechsOld)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechsOldR{}
		}
		args = append(args, object.OwnerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechsOldR{}
			}

			for _, a := range args {
				if a == obj.OwnerID {
					continue Outer
				}
			}

			args = append(args, obj.OwnerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(mechsOldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Owner = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.OwnerMechsOlds = append(foreign.R.OwnerMechsOlds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerID == foreign.ID {
				local.R.Owner = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.OwnerMechsOlds = append(foreign.R.OwnerMechsOlds, local)
				break
			}
		}
	}

	return nil
}

// LoadTemplate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechsOldL) LoadTemplate(e boil.Executor, singular bool, maybeMechsOld interface{}, mods queries.Applicator) error {
	var slice []*MechsOld
	var object *MechsOld

	if singular {
		object = maybeMechsOld.(*MechsOld)
	} else {
		slice = *maybeMechsOld.(*[]*MechsOld)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechsOldR{}
		}
		args = append(args, object.TemplateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechsOldR{}
			}

			for _, a := range args {
				if a == obj.TemplateID {
					continue Outer
				}
			}

			args = append(args, obj.TemplateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`templates_old`),
		qm.WhereIn(`templates_old.id in ?`, args...),
		qmhelper.WhereIsNull(`templates_old.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TemplatesOld")
	}

	var resultSlice []*TemplatesOld
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TemplatesOld")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for templates_old")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for templates_old")
	}

	if len(mechsOldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Template = foreign
		if foreign.R == nil {
			foreign.R = &templatesOldR{}
		}
		foreign.R.TemplateMechsOlds = append(foreign.R.TemplateMechsOlds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TemplateID == foreign.ID {
				local.R.Template = foreign
				if foreign.R == nil {
					foreign.R = &templatesOldR{}
				}
				foreign.R.TemplateMechsOlds = append(foreign.R.TemplateMechsOlds, local)
				break
			}
		}
	}

	return nil
}

// SetChassis of the mechsOld to the related item.
// Sets o.R.Chassis to related.
// Adds o to related.R.ChassisMechsOld.
func (o *MechsOld) SetChassis(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mechs_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"chassis_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechsOldPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChassisID = related.ID
	if o.R == nil {
		o.R = &mechsOldR{
			Chassis: related,
		}
	} else {
		o.R.Chassis = related
	}

	if related.R == nil {
		related.R = &mechR{
			ChassisMechsOld: o,
		}
	} else {
		related.R.ChassisMechsOld = o
	}

	return nil
}

// SetOwner of the mechsOld to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerMechsOlds.
func (o *MechsOld) SetOwner(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mechs_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechsOldPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerID = related.ID
	if o.R == nil {
		o.R = &mechsOldR{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &playerR{
			OwnerMechsOlds: MechsOldSlice{o},
		}
	} else {
		related.R.OwnerMechsOlds = append(related.R.OwnerMechsOlds, o)
	}

	return nil
}

// SetTemplate of the mechsOld to the related item.
// Sets o.R.Template to related.
// Adds o to related.R.TemplateMechsOlds.
func (o *MechsOld) SetTemplate(exec boil.Executor, insert bool, related *TemplatesOld) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mechs_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"template_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechsOldPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TemplateID = related.ID
	if o.R == nil {
		o.R = &mechsOldR{
			Template: related,
		}
	} else {
		o.R.Template = related
	}

	if related.R == nil {
		related.R = &templatesOldR{
			TemplateMechsOlds: MechsOldSlice{o},
		}
	} else {
		related.R.TemplateMechsOlds = append(related.R.TemplateMechsOlds, o)
	}

	return nil
}

// MechsOlds retrieves all the records using an executor.
func MechsOlds(mods ...qm.QueryMod) mechsOldQuery {
	mods = append(mods, qm.From("\"mechs_old\""), qmhelper.WhereIsNull("\"mechs_old\".\"deleted_at\""))
	return mechsOldQuery{NewQuery(mods...)}
}

// FindMechsOld retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMechsOld(exec boil.Executor, iD string, selectCols ...string) (*MechsOld, error) {
	mechsOldObj := &MechsOld{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mechs_old\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, mechsOldObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from mechs_old")
	}

	if err = mechsOldObj.doAfterSelectHooks(exec); err != nil {
		return mechsOldObj, err
	}

	return mechsOldObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MechsOld) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mechs_old provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechsOldColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mechsOldInsertCacheMut.RLock()
	cache, cached := mechsOldInsertCache[key]
	mechsOldInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mechsOldAllColumns,
			mechsOldColumnsWithDefault,
			mechsOldColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mechsOldType, mechsOldMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mechsOldType, mechsOldMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mechs_old\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mechs_old\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into mechs_old")
	}

	if !cached {
		mechsOldInsertCacheMut.Lock()
		mechsOldInsertCache[key] = cache
		mechsOldInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the MechsOld.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MechsOld) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mechsOldUpdateCacheMut.RLock()
	cache, cached := mechsOldUpdateCache[key]
	mechsOldUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mechsOldAllColumns,
			mechsOldPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update mechs_old, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mechs_old\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mechsOldPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mechsOldType, mechsOldMapping, append(wl, mechsOldPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update mechs_old row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for mechs_old")
	}

	if !cached {
		mechsOldUpdateCacheMut.Lock()
		mechsOldUpdateCache[key] = cache
		mechsOldUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mechsOldQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for mechs_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for mechs_old")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MechsOldSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechsOldPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mechs_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mechsOldPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in mechsOld slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all mechsOld")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MechsOld) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mechs_old provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechsOldColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mechsOldUpsertCacheMut.RLock()
	cache, cached := mechsOldUpsertCache[key]
	mechsOldUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mechsOldAllColumns,
			mechsOldColumnsWithDefault,
			mechsOldColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mechsOldAllColumns,
			mechsOldPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert mechs_old, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mechsOldPrimaryKeyColumns))
			copy(conflict, mechsOldPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mechs_old\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mechsOldType, mechsOldMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mechsOldType, mechsOldMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert mechs_old")
	}

	if !cached {
		mechsOldUpsertCacheMut.Lock()
		mechsOldUpsertCache[key] = cache
		mechsOldUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single MechsOld record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MechsOld) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no MechsOld provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mechsOldPrimaryKeyMapping)
		sql = "DELETE FROM \"mechs_old\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"mechs_old\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(mechsOldType, mechsOldMapping, append(wl, mechsOldPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from mechs_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for mechs_old")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mechsOldQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no mechsOldQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mechs_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mechs_old")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MechsOldSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mechsOldBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechsOldPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"mechs_old\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechsOldPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechsOldPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"mechs_old\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, mechsOldPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mechsOld slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mechs_old")
	}

	if len(mechsOldAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MechsOld) Reload(exec boil.Executor) error {
	ret, err := FindMechsOld(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MechsOldSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MechsOldSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechsOldPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mechs_old\".* FROM \"mechs_old\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechsOldPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in MechsOldSlice")
	}

	*o = slice

	return nil
}

// MechsOldExists checks if the MechsOld row exists.
func MechsOldExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mechs_old\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if mechs_old exists")
	}

	return exists, nil
}
