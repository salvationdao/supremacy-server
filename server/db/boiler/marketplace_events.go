// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MarketplaceEvent is an object representing the database table.
type MarketplaceEvent struct {
	ID                       string              `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	EventType                string              `boiler:"event_type" boil:"event_type" json:"event_type" toml:"event_type" yaml:"event_type"`
	Amount                   decimal.NullDecimal `boiler:"amount" boil:"amount" json:"amount,omitempty" toml:"amount" yaml:"amount,omitempty"`
	RelatedSaleItemID        null.String         `boiler:"related_sale_item_id" boil:"related_sale_item_id" json:"related_sale_item_id,omitempty" toml:"related_sale_item_id" yaml:"related_sale_item_id,omitempty"`
	RelatedSaleItemKeycardID null.String         `boiler:"related_sale_item_keycard_id" boil:"related_sale_item_keycard_id" json:"related_sale_item_keycard_id,omitempty" toml:"related_sale_item_keycard_id" yaml:"related_sale_item_keycard_id,omitempty"`
	CreatedAt                time.Time           `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *marketplaceEventR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L marketplaceEventL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MarketplaceEventColumns = struct {
	ID                       string
	EventType                string
	Amount                   string
	RelatedSaleItemID        string
	RelatedSaleItemKeycardID string
	CreatedAt                string
}{
	ID:                       "id",
	EventType:                "event_type",
	Amount:                   "amount",
	RelatedSaleItemID:        "related_sale_item_id",
	RelatedSaleItemKeycardID: "related_sale_item_keycard_id",
	CreatedAt:                "created_at",
}

var MarketplaceEventTableColumns = struct {
	ID                       string
	EventType                string
	Amount                   string
	RelatedSaleItemID        string
	RelatedSaleItemKeycardID string
	CreatedAt                string
}{
	ID:                       "marketplace_events.id",
	EventType:                "marketplace_events.event_type",
	Amount:                   "marketplace_events.amount",
	RelatedSaleItemID:        "marketplace_events.related_sale_item_id",
	RelatedSaleItemKeycardID: "marketplace_events.related_sale_item_keycard_id",
	CreatedAt:                "marketplace_events.created_at",
}

// Generated where

var MarketplaceEventWhere = struct {
	ID                       whereHelperstring
	EventType                whereHelperstring
	Amount                   whereHelperdecimal_NullDecimal
	RelatedSaleItemID        whereHelpernull_String
	RelatedSaleItemKeycardID whereHelpernull_String
	CreatedAt                whereHelpertime_Time
}{
	ID:                       whereHelperstring{field: "\"marketplace_events\".\"id\""},
	EventType:                whereHelperstring{field: "\"marketplace_events\".\"event_type\""},
	Amount:                   whereHelperdecimal_NullDecimal{field: "\"marketplace_events\".\"amount\""},
	RelatedSaleItemID:        whereHelpernull_String{field: "\"marketplace_events\".\"related_sale_item_id\""},
	RelatedSaleItemKeycardID: whereHelpernull_String{field: "\"marketplace_events\".\"related_sale_item_keycard_id\""},
	CreatedAt:                whereHelpertime_Time{field: "\"marketplace_events\".\"created_at\""},
}

// MarketplaceEventRels is where relationship names are stored.
var MarketplaceEventRels = struct {
	RelatedSaleItem        string
	RelatedSaleItemKeycard string
}{
	RelatedSaleItem:        "RelatedSaleItem",
	RelatedSaleItemKeycard: "RelatedSaleItemKeycard",
}

// marketplaceEventR is where relationships are stored.
type marketplaceEventR struct {
	RelatedSaleItem        *ItemSale        `boiler:"RelatedSaleItem" boil:"RelatedSaleItem" json:"RelatedSaleItem" toml:"RelatedSaleItem" yaml:"RelatedSaleItem"`
	RelatedSaleItemKeycard *ItemKeycardSale `boiler:"RelatedSaleItemKeycard" boil:"RelatedSaleItemKeycard" json:"RelatedSaleItemKeycard" toml:"RelatedSaleItemKeycard" yaml:"RelatedSaleItemKeycard"`
}

// NewStruct creates a new relationship struct
func (*marketplaceEventR) NewStruct() *marketplaceEventR {
	return &marketplaceEventR{}
}

// marketplaceEventL is where Load methods for each relationship are stored.
type marketplaceEventL struct{}

var (
	marketplaceEventAllColumns            = []string{"id", "event_type", "amount", "related_sale_item_id", "related_sale_item_keycard_id", "created_at"}
	marketplaceEventColumnsWithoutDefault = []string{"event_type"}
	marketplaceEventColumnsWithDefault    = []string{"id", "amount", "related_sale_item_id", "related_sale_item_keycard_id", "created_at"}
	marketplaceEventPrimaryKeyColumns     = []string{"id"}
	marketplaceEventGeneratedColumns      = []string{}
)

type (
	// MarketplaceEventSlice is an alias for a slice of pointers to MarketplaceEvent.
	// This should almost always be used instead of []MarketplaceEvent.
	MarketplaceEventSlice []*MarketplaceEvent
	// MarketplaceEventHook is the signature for custom MarketplaceEvent hook methods
	MarketplaceEventHook func(boil.Executor, *MarketplaceEvent) error

	marketplaceEventQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	marketplaceEventType                 = reflect.TypeOf(&MarketplaceEvent{})
	marketplaceEventMapping              = queries.MakeStructMapping(marketplaceEventType)
	marketplaceEventPrimaryKeyMapping, _ = queries.BindMapping(marketplaceEventType, marketplaceEventMapping, marketplaceEventPrimaryKeyColumns)
	marketplaceEventInsertCacheMut       sync.RWMutex
	marketplaceEventInsertCache          = make(map[string]insertCache)
	marketplaceEventUpdateCacheMut       sync.RWMutex
	marketplaceEventUpdateCache          = make(map[string]updateCache)
	marketplaceEventUpsertCacheMut       sync.RWMutex
	marketplaceEventUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var marketplaceEventAfterSelectHooks []MarketplaceEventHook

var marketplaceEventBeforeInsertHooks []MarketplaceEventHook
var marketplaceEventAfterInsertHooks []MarketplaceEventHook

var marketplaceEventBeforeUpdateHooks []MarketplaceEventHook
var marketplaceEventAfterUpdateHooks []MarketplaceEventHook

var marketplaceEventBeforeDeleteHooks []MarketplaceEventHook
var marketplaceEventAfterDeleteHooks []MarketplaceEventHook

var marketplaceEventBeforeUpsertHooks []MarketplaceEventHook
var marketplaceEventAfterUpsertHooks []MarketplaceEventHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MarketplaceEvent) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range marketplaceEventAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MarketplaceEvent) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range marketplaceEventBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MarketplaceEvent) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range marketplaceEventAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MarketplaceEvent) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range marketplaceEventBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MarketplaceEvent) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range marketplaceEventAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MarketplaceEvent) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range marketplaceEventBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MarketplaceEvent) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range marketplaceEventAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MarketplaceEvent) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range marketplaceEventBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MarketplaceEvent) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range marketplaceEventAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMarketplaceEventHook registers your hook function for all future operations.
func AddMarketplaceEventHook(hookPoint boil.HookPoint, marketplaceEventHook MarketplaceEventHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		marketplaceEventAfterSelectHooks = append(marketplaceEventAfterSelectHooks, marketplaceEventHook)
	case boil.BeforeInsertHook:
		marketplaceEventBeforeInsertHooks = append(marketplaceEventBeforeInsertHooks, marketplaceEventHook)
	case boil.AfterInsertHook:
		marketplaceEventAfterInsertHooks = append(marketplaceEventAfterInsertHooks, marketplaceEventHook)
	case boil.BeforeUpdateHook:
		marketplaceEventBeforeUpdateHooks = append(marketplaceEventBeforeUpdateHooks, marketplaceEventHook)
	case boil.AfterUpdateHook:
		marketplaceEventAfterUpdateHooks = append(marketplaceEventAfterUpdateHooks, marketplaceEventHook)
	case boil.BeforeDeleteHook:
		marketplaceEventBeforeDeleteHooks = append(marketplaceEventBeforeDeleteHooks, marketplaceEventHook)
	case boil.AfterDeleteHook:
		marketplaceEventAfterDeleteHooks = append(marketplaceEventAfterDeleteHooks, marketplaceEventHook)
	case boil.BeforeUpsertHook:
		marketplaceEventBeforeUpsertHooks = append(marketplaceEventBeforeUpsertHooks, marketplaceEventHook)
	case boil.AfterUpsertHook:
		marketplaceEventAfterUpsertHooks = append(marketplaceEventAfterUpsertHooks, marketplaceEventHook)
	}
}

// One returns a single marketplaceEvent record from the query.
func (q marketplaceEventQuery) One(exec boil.Executor) (*MarketplaceEvent, error) {
	o := &MarketplaceEvent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for marketplace_events")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MarketplaceEvent records from the query.
func (q marketplaceEventQuery) All(exec boil.Executor) (MarketplaceEventSlice, error) {
	var o []*MarketplaceEvent

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to MarketplaceEvent slice")
	}

	if len(marketplaceEventAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MarketplaceEvent records in the query.
func (q marketplaceEventQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count marketplace_events rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q marketplaceEventQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if marketplace_events exists")
	}

	return count > 0, nil
}

// RelatedSaleItem pointed to by the foreign key.
func (o *MarketplaceEvent) RelatedSaleItem(mods ...qm.QueryMod) itemSaleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RelatedSaleItemID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := ItemSales(queryMods...)
	queries.SetFrom(query.Query, "\"item_sales\"")

	return query
}

// RelatedSaleItemKeycard pointed to by the foreign key.
func (o *MarketplaceEvent) RelatedSaleItemKeycard(mods ...qm.QueryMod) itemKeycardSaleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RelatedSaleItemKeycardID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := ItemKeycardSales(queryMods...)
	queries.SetFrom(query.Query, "\"item_keycard_sales\"")

	return query
}

// LoadRelatedSaleItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (marketplaceEventL) LoadRelatedSaleItem(e boil.Executor, singular bool, maybeMarketplaceEvent interface{}, mods queries.Applicator) error {
	var slice []*MarketplaceEvent
	var object *MarketplaceEvent

	if singular {
		object = maybeMarketplaceEvent.(*MarketplaceEvent)
	} else {
		slice = *maybeMarketplaceEvent.(*[]*MarketplaceEvent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &marketplaceEventR{}
		}
		if !queries.IsNil(object.RelatedSaleItemID) {
			args = append(args, object.RelatedSaleItemID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &marketplaceEventR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RelatedSaleItemID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RelatedSaleItemID) {
				args = append(args, obj.RelatedSaleItemID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`item_sales`),
		qm.WhereIn(`item_sales.id in ?`, args...),
		qmhelper.WhereIsNull(`item_sales.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ItemSale")
	}

	var resultSlice []*ItemSale
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ItemSale")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for item_sales")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for item_sales")
	}

	if len(marketplaceEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RelatedSaleItem = foreign
		if foreign.R == nil {
			foreign.R = &itemSaleR{}
		}
		foreign.R.RelatedSaleItemMarketplaceEvents = append(foreign.R.RelatedSaleItemMarketplaceEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RelatedSaleItemID, foreign.ID) {
				local.R.RelatedSaleItem = foreign
				if foreign.R == nil {
					foreign.R = &itemSaleR{}
				}
				foreign.R.RelatedSaleItemMarketplaceEvents = append(foreign.R.RelatedSaleItemMarketplaceEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadRelatedSaleItemKeycard allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (marketplaceEventL) LoadRelatedSaleItemKeycard(e boil.Executor, singular bool, maybeMarketplaceEvent interface{}, mods queries.Applicator) error {
	var slice []*MarketplaceEvent
	var object *MarketplaceEvent

	if singular {
		object = maybeMarketplaceEvent.(*MarketplaceEvent)
	} else {
		slice = *maybeMarketplaceEvent.(*[]*MarketplaceEvent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &marketplaceEventR{}
		}
		if !queries.IsNil(object.RelatedSaleItemKeycardID) {
			args = append(args, object.RelatedSaleItemKeycardID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &marketplaceEventR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RelatedSaleItemKeycardID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RelatedSaleItemKeycardID) {
				args = append(args, obj.RelatedSaleItemKeycardID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`item_keycard_sales`),
		qm.WhereIn(`item_keycard_sales.id in ?`, args...),
		qmhelper.WhereIsNull(`item_keycard_sales.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ItemKeycardSale")
	}

	var resultSlice []*ItemKeycardSale
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ItemKeycardSale")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for item_keycard_sales")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for item_keycard_sales")
	}

	if len(marketplaceEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RelatedSaleItemKeycard = foreign
		if foreign.R == nil {
			foreign.R = &itemKeycardSaleR{}
		}
		foreign.R.RelatedSaleItemKeycardMarketplaceEvents = append(foreign.R.RelatedSaleItemKeycardMarketplaceEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RelatedSaleItemKeycardID, foreign.ID) {
				local.R.RelatedSaleItemKeycard = foreign
				if foreign.R == nil {
					foreign.R = &itemKeycardSaleR{}
				}
				foreign.R.RelatedSaleItemKeycardMarketplaceEvents = append(foreign.R.RelatedSaleItemKeycardMarketplaceEvents, local)
				break
			}
		}
	}

	return nil
}

// SetRelatedSaleItem of the marketplaceEvent to the related item.
// Sets o.R.RelatedSaleItem to related.
// Adds o to related.R.RelatedSaleItemMarketplaceEvents.
func (o *MarketplaceEvent) SetRelatedSaleItem(exec boil.Executor, insert bool, related *ItemSale) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"marketplace_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"related_sale_item_id"}),
		strmangle.WhereClause("\"", "\"", 2, marketplaceEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RelatedSaleItemID, related.ID)
	if o.R == nil {
		o.R = &marketplaceEventR{
			RelatedSaleItem: related,
		}
	} else {
		o.R.RelatedSaleItem = related
	}

	if related.R == nil {
		related.R = &itemSaleR{
			RelatedSaleItemMarketplaceEvents: MarketplaceEventSlice{o},
		}
	} else {
		related.R.RelatedSaleItemMarketplaceEvents = append(related.R.RelatedSaleItemMarketplaceEvents, o)
	}

	return nil
}

// RemoveRelatedSaleItem relationship.
// Sets o.R.RelatedSaleItem to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *MarketplaceEvent) RemoveRelatedSaleItem(exec boil.Executor, related *ItemSale) error {
	var err error

	queries.SetScanner(&o.RelatedSaleItemID, nil)
	if _, err = o.Update(exec, boil.Whitelist("related_sale_item_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.RelatedSaleItem = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RelatedSaleItemMarketplaceEvents {
		if queries.Equal(o.RelatedSaleItemID, ri.RelatedSaleItemID) {
			continue
		}

		ln := len(related.R.RelatedSaleItemMarketplaceEvents)
		if ln > 1 && i < ln-1 {
			related.R.RelatedSaleItemMarketplaceEvents[i] = related.R.RelatedSaleItemMarketplaceEvents[ln-1]
		}
		related.R.RelatedSaleItemMarketplaceEvents = related.R.RelatedSaleItemMarketplaceEvents[:ln-1]
		break
	}
	return nil
}

// SetRelatedSaleItemKeycard of the marketplaceEvent to the related item.
// Sets o.R.RelatedSaleItemKeycard to related.
// Adds o to related.R.RelatedSaleItemKeycardMarketplaceEvents.
func (o *MarketplaceEvent) SetRelatedSaleItemKeycard(exec boil.Executor, insert bool, related *ItemKeycardSale) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"marketplace_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"related_sale_item_keycard_id"}),
		strmangle.WhereClause("\"", "\"", 2, marketplaceEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RelatedSaleItemKeycardID, related.ID)
	if o.R == nil {
		o.R = &marketplaceEventR{
			RelatedSaleItemKeycard: related,
		}
	} else {
		o.R.RelatedSaleItemKeycard = related
	}

	if related.R == nil {
		related.R = &itemKeycardSaleR{
			RelatedSaleItemKeycardMarketplaceEvents: MarketplaceEventSlice{o},
		}
	} else {
		related.R.RelatedSaleItemKeycardMarketplaceEvents = append(related.R.RelatedSaleItemKeycardMarketplaceEvents, o)
	}

	return nil
}

// RemoveRelatedSaleItemKeycard relationship.
// Sets o.R.RelatedSaleItemKeycard to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *MarketplaceEvent) RemoveRelatedSaleItemKeycard(exec boil.Executor, related *ItemKeycardSale) error {
	var err error

	queries.SetScanner(&o.RelatedSaleItemKeycardID, nil)
	if _, err = o.Update(exec, boil.Whitelist("related_sale_item_keycard_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.RelatedSaleItemKeycard = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RelatedSaleItemKeycardMarketplaceEvents {
		if queries.Equal(o.RelatedSaleItemKeycardID, ri.RelatedSaleItemKeycardID) {
			continue
		}

		ln := len(related.R.RelatedSaleItemKeycardMarketplaceEvents)
		if ln > 1 && i < ln-1 {
			related.R.RelatedSaleItemKeycardMarketplaceEvents[i] = related.R.RelatedSaleItemKeycardMarketplaceEvents[ln-1]
		}
		related.R.RelatedSaleItemKeycardMarketplaceEvents = related.R.RelatedSaleItemKeycardMarketplaceEvents[:ln-1]
		break
	}
	return nil
}

// MarketplaceEvents retrieves all the records using an executor.
func MarketplaceEvents(mods ...qm.QueryMod) marketplaceEventQuery {
	mods = append(mods, qm.From("\"marketplace_events\""))
	return marketplaceEventQuery{NewQuery(mods...)}
}

// FindMarketplaceEvent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMarketplaceEvent(exec boil.Executor, iD string, selectCols ...string) (*MarketplaceEvent, error) {
	marketplaceEventObj := &MarketplaceEvent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"marketplace_events\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, marketplaceEventObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from marketplace_events")
	}

	if err = marketplaceEventObj.doAfterSelectHooks(exec); err != nil {
		return marketplaceEventObj, err
	}

	return marketplaceEventObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MarketplaceEvent) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no marketplace_events provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(marketplaceEventColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	marketplaceEventInsertCacheMut.RLock()
	cache, cached := marketplaceEventInsertCache[key]
	marketplaceEventInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			marketplaceEventAllColumns,
			marketplaceEventColumnsWithDefault,
			marketplaceEventColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(marketplaceEventType, marketplaceEventMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(marketplaceEventType, marketplaceEventMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"marketplace_events\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"marketplace_events\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into marketplace_events")
	}

	if !cached {
		marketplaceEventInsertCacheMut.Lock()
		marketplaceEventInsertCache[key] = cache
		marketplaceEventInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the MarketplaceEvent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MarketplaceEvent) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	marketplaceEventUpdateCacheMut.RLock()
	cache, cached := marketplaceEventUpdateCache[key]
	marketplaceEventUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			marketplaceEventAllColumns,
			marketplaceEventPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update marketplace_events, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"marketplace_events\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, marketplaceEventPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(marketplaceEventType, marketplaceEventMapping, append(wl, marketplaceEventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update marketplace_events row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for marketplace_events")
	}

	if !cached {
		marketplaceEventUpdateCacheMut.Lock()
		marketplaceEventUpdateCache[key] = cache
		marketplaceEventUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q marketplaceEventQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for marketplace_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for marketplace_events")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MarketplaceEventSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), marketplaceEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"marketplace_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, marketplaceEventPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in marketplaceEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all marketplaceEvent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MarketplaceEvent) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no marketplace_events provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(marketplaceEventColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	marketplaceEventUpsertCacheMut.RLock()
	cache, cached := marketplaceEventUpsertCache[key]
	marketplaceEventUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			marketplaceEventAllColumns,
			marketplaceEventColumnsWithDefault,
			marketplaceEventColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			marketplaceEventAllColumns,
			marketplaceEventPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert marketplace_events, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(marketplaceEventPrimaryKeyColumns))
			copy(conflict, marketplaceEventPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"marketplace_events\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(marketplaceEventType, marketplaceEventMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(marketplaceEventType, marketplaceEventMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert marketplace_events")
	}

	if !cached {
		marketplaceEventUpsertCacheMut.Lock()
		marketplaceEventUpsertCache[key] = cache
		marketplaceEventUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single MarketplaceEvent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MarketplaceEvent) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no MarketplaceEvent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), marketplaceEventPrimaryKeyMapping)
	sql := "DELETE FROM \"marketplace_events\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from marketplace_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for marketplace_events")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q marketplaceEventQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no marketplaceEventQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from marketplace_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for marketplace_events")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MarketplaceEventSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(marketplaceEventBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), marketplaceEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"marketplace_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, marketplaceEventPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from marketplaceEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for marketplace_events")
	}

	if len(marketplaceEventAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MarketplaceEvent) Reload(exec boil.Executor) error {
	ret, err := FindMarketplaceEvent(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MarketplaceEventSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MarketplaceEventSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), marketplaceEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"marketplace_events\".* FROM \"marketplace_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, marketplaceEventPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in MarketplaceEventSlice")
	}

	*o = slice

	return nil
}

// MarketplaceEventExists checks if the MarketplaceEvent row exists.
func MarketplaceEventExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"marketplace_events\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if marketplace_events exists")
	}

	return exists, nil
}
