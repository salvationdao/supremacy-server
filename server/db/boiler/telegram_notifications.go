// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TelegramNotification is an object representing the database table.
type TelegramNotification struct {
	ID         string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt  time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Shortcode  string    `boiler:"shortcode" boil:"shortcode" json:"shortcode" toml:"shortcode" yaml:"shortcode"`
	Registered bool      `boiler:"registered" boil:"registered" json:"registered" toml:"registered" yaml:"registered"`
	TelegramID null.Int  `boiler:"telegram_id" boil:"telegram_id" json:"telegram_id,omitempty" toml:"telegram_id" yaml:"telegram_id,omitempty"`

	R *telegramNotificationR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L telegramNotificationL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TelegramNotificationColumns = struct {
	ID         string
	CreatedAt  string
	Shortcode  string
	Registered string
	TelegramID string
}{
	ID:         "id",
	CreatedAt:  "created_at",
	Shortcode:  "shortcode",
	Registered: "registered",
	TelegramID: "telegram_id",
}

var TelegramNotificationTableColumns = struct {
	ID         string
	CreatedAt  string
	Shortcode  string
	Registered string
	TelegramID string
}{
	ID:         "telegram_notifications.id",
	CreatedAt:  "telegram_notifications.created_at",
	Shortcode:  "telegram_notifications.shortcode",
	Registered: "telegram_notifications.registered",
	TelegramID: "telegram_notifications.telegram_id",
}

// Generated where

var TelegramNotificationWhere = struct {
	ID         whereHelperstring
	CreatedAt  whereHelpertime_Time
	Shortcode  whereHelperstring
	Registered whereHelperbool
	TelegramID whereHelpernull_Int
}{
	ID:         whereHelperstring{field: "\"telegram_notifications\".\"id\""},
	CreatedAt:  whereHelpertime_Time{field: "\"telegram_notifications\".\"created_at\""},
	Shortcode:  whereHelperstring{field: "\"telegram_notifications\".\"shortcode\""},
	Registered: whereHelperbool{field: "\"telegram_notifications\".\"registered\""},
	TelegramID: whereHelpernull_Int{field: "\"telegram_notifications\".\"telegram_id\""},
}

// TelegramNotificationRels is where relationship names are stored.
var TelegramNotificationRels = struct {
	BattleQueueNotifications string
}{
	BattleQueueNotifications: "BattleQueueNotifications",
}

// telegramNotificationR is where relationships are stored.
type telegramNotificationR struct {
	BattleQueueNotifications BattleQueueNotificationSlice `boiler:"BattleQueueNotifications" boil:"BattleQueueNotifications" json:"BattleQueueNotifications" toml:"BattleQueueNotifications" yaml:"BattleQueueNotifications"`
}

// NewStruct creates a new relationship struct
func (*telegramNotificationR) NewStruct() *telegramNotificationR {
	return &telegramNotificationR{}
}

// telegramNotificationL is where Load methods for each relationship are stored.
type telegramNotificationL struct{}

var (
	telegramNotificationAllColumns            = []string{"id", "created_at", "shortcode", "registered", "telegram_id"}
	telegramNotificationColumnsWithoutDefault = []string{"shortcode"}
	telegramNotificationColumnsWithDefault    = []string{"id", "created_at", "registered", "telegram_id"}
	telegramNotificationPrimaryKeyColumns     = []string{"id"}
	telegramNotificationGeneratedColumns      = []string{}
)

type (
	// TelegramNotificationSlice is an alias for a slice of pointers to TelegramNotification.
	// This should almost always be used instead of []TelegramNotification.
	TelegramNotificationSlice []*TelegramNotification
	// TelegramNotificationHook is the signature for custom TelegramNotification hook methods
	TelegramNotificationHook func(boil.Executor, *TelegramNotification) error

	telegramNotificationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	telegramNotificationType                 = reflect.TypeOf(&TelegramNotification{})
	telegramNotificationMapping              = queries.MakeStructMapping(telegramNotificationType)
	telegramNotificationPrimaryKeyMapping, _ = queries.BindMapping(telegramNotificationType, telegramNotificationMapping, telegramNotificationPrimaryKeyColumns)
	telegramNotificationInsertCacheMut       sync.RWMutex
	telegramNotificationInsertCache          = make(map[string]insertCache)
	telegramNotificationUpdateCacheMut       sync.RWMutex
	telegramNotificationUpdateCache          = make(map[string]updateCache)
	telegramNotificationUpsertCacheMut       sync.RWMutex
	telegramNotificationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var telegramNotificationAfterSelectHooks []TelegramNotificationHook

var telegramNotificationBeforeInsertHooks []TelegramNotificationHook
var telegramNotificationAfterInsertHooks []TelegramNotificationHook

var telegramNotificationBeforeUpdateHooks []TelegramNotificationHook
var telegramNotificationAfterUpdateHooks []TelegramNotificationHook

var telegramNotificationBeforeDeleteHooks []TelegramNotificationHook
var telegramNotificationAfterDeleteHooks []TelegramNotificationHook

var telegramNotificationBeforeUpsertHooks []TelegramNotificationHook
var telegramNotificationAfterUpsertHooks []TelegramNotificationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TelegramNotification) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range telegramNotificationAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TelegramNotification) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range telegramNotificationBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TelegramNotification) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range telegramNotificationAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TelegramNotification) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range telegramNotificationBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TelegramNotification) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range telegramNotificationAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TelegramNotification) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range telegramNotificationBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TelegramNotification) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range telegramNotificationAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TelegramNotification) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range telegramNotificationBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TelegramNotification) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range telegramNotificationAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTelegramNotificationHook registers your hook function for all future operations.
func AddTelegramNotificationHook(hookPoint boil.HookPoint, telegramNotificationHook TelegramNotificationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		telegramNotificationAfterSelectHooks = append(telegramNotificationAfterSelectHooks, telegramNotificationHook)
	case boil.BeforeInsertHook:
		telegramNotificationBeforeInsertHooks = append(telegramNotificationBeforeInsertHooks, telegramNotificationHook)
	case boil.AfterInsertHook:
		telegramNotificationAfterInsertHooks = append(telegramNotificationAfterInsertHooks, telegramNotificationHook)
	case boil.BeforeUpdateHook:
		telegramNotificationBeforeUpdateHooks = append(telegramNotificationBeforeUpdateHooks, telegramNotificationHook)
	case boil.AfterUpdateHook:
		telegramNotificationAfterUpdateHooks = append(telegramNotificationAfterUpdateHooks, telegramNotificationHook)
	case boil.BeforeDeleteHook:
		telegramNotificationBeforeDeleteHooks = append(telegramNotificationBeforeDeleteHooks, telegramNotificationHook)
	case boil.AfterDeleteHook:
		telegramNotificationAfterDeleteHooks = append(telegramNotificationAfterDeleteHooks, telegramNotificationHook)
	case boil.BeforeUpsertHook:
		telegramNotificationBeforeUpsertHooks = append(telegramNotificationBeforeUpsertHooks, telegramNotificationHook)
	case boil.AfterUpsertHook:
		telegramNotificationAfterUpsertHooks = append(telegramNotificationAfterUpsertHooks, telegramNotificationHook)
	}
}

// One returns a single telegramNotification record from the query.
func (q telegramNotificationQuery) One(exec boil.Executor) (*TelegramNotification, error) {
	o := &TelegramNotification{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for telegram_notifications")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TelegramNotification records from the query.
func (q telegramNotificationQuery) All(exec boil.Executor) (TelegramNotificationSlice, error) {
	var o []*TelegramNotification

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to TelegramNotification slice")
	}

	if len(telegramNotificationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TelegramNotification records in the query.
func (q telegramNotificationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count telegram_notifications rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q telegramNotificationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if telegram_notifications exists")
	}

	return count > 0, nil
}

// BattleQueueNotifications retrieves all the battle_queue_notification's BattleQueueNotifications with an executor.
func (o *TelegramNotification) BattleQueueNotifications(mods ...qm.QueryMod) battleQueueNotificationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_queue_notifications\".\"telegram_notification_id\"=?", o.ID),
	)

	query := BattleQueueNotifications(queryMods...)
	queries.SetFrom(query.Query, "\"battle_queue_notifications\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_queue_notifications\".*"})
	}

	return query
}

// LoadBattleQueueNotifications allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (telegramNotificationL) LoadBattleQueueNotifications(e boil.Executor, singular bool, maybeTelegramNotification interface{}, mods queries.Applicator) error {
	var slice []*TelegramNotification
	var object *TelegramNotification

	if singular {
		object = maybeTelegramNotification.(*TelegramNotification)
	} else {
		slice = *maybeTelegramNotification.(*[]*TelegramNotification)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &telegramNotificationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &telegramNotificationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_queue_notifications`),
		qm.WhereIn(`battle_queue_notifications.telegram_notification_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_queue_notifications")
	}

	var resultSlice []*BattleQueueNotification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_queue_notifications")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_queue_notifications")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_queue_notifications")
	}

	if len(battleQueueNotificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleQueueNotifications = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleQueueNotificationR{}
			}
			foreign.R.TelegramNotification = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TelegramNotificationID) {
				local.R.BattleQueueNotifications = append(local.R.BattleQueueNotifications, foreign)
				if foreign.R == nil {
					foreign.R = &battleQueueNotificationR{}
				}
				foreign.R.TelegramNotification = local
				break
			}
		}
	}

	return nil
}

// AddBattleQueueNotifications adds the given related objects to the existing relationships
// of the telegram_notification, optionally inserting them as new records.
// Appends related to o.R.BattleQueueNotifications.
// Sets related.R.TelegramNotification appropriately.
func (o *TelegramNotification) AddBattleQueueNotifications(exec boil.Executor, insert bool, related ...*BattleQueueNotification) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TelegramNotificationID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_queue_notifications\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"telegram_notification_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleQueueNotificationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TelegramNotificationID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &telegramNotificationR{
			BattleQueueNotifications: related,
		}
	} else {
		o.R.BattleQueueNotifications = append(o.R.BattleQueueNotifications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleQueueNotificationR{
				TelegramNotification: o,
			}
		} else {
			rel.R.TelegramNotification = o
		}
	}
	return nil
}

// SetBattleQueueNotifications removes all previously related items of the
// telegram_notification replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TelegramNotification's BattleQueueNotifications accordingly.
// Replaces o.R.BattleQueueNotifications with related.
// Sets related.R.TelegramNotification's BattleQueueNotifications accordingly.
func (o *TelegramNotification) SetBattleQueueNotifications(exec boil.Executor, insert bool, related ...*BattleQueueNotification) error {
	query := "update \"battle_queue_notifications\" set \"telegram_notification_id\" = null where \"telegram_notification_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BattleQueueNotifications {
			queries.SetScanner(&rel.TelegramNotificationID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.TelegramNotification = nil
		}

		o.R.BattleQueueNotifications = nil
	}
	return o.AddBattleQueueNotifications(exec, insert, related...)
}

// RemoveBattleQueueNotifications relationships from objects passed in.
// Removes related items from R.BattleQueueNotifications (uses pointer comparison, removal does not keep order)
// Sets related.R.TelegramNotification.
func (o *TelegramNotification) RemoveBattleQueueNotifications(exec boil.Executor, related ...*BattleQueueNotification) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TelegramNotificationID, nil)
		if rel.R != nil {
			rel.R.TelegramNotification = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("telegram_notification_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BattleQueueNotifications {
			if rel != ri {
				continue
			}

			ln := len(o.R.BattleQueueNotifications)
			if ln > 1 && i < ln-1 {
				o.R.BattleQueueNotifications[i] = o.R.BattleQueueNotifications[ln-1]
			}
			o.R.BattleQueueNotifications = o.R.BattleQueueNotifications[:ln-1]
			break
		}
	}

	return nil
}

// TelegramNotifications retrieves all the records using an executor.
func TelegramNotifications(mods ...qm.QueryMod) telegramNotificationQuery {
	mods = append(mods, qm.From("\"telegram_notifications\""))
	return telegramNotificationQuery{NewQuery(mods...)}
}

// FindTelegramNotification retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTelegramNotification(exec boil.Executor, iD string, selectCols ...string) (*TelegramNotification, error) {
	telegramNotificationObj := &TelegramNotification{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"telegram_notifications\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, telegramNotificationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from telegram_notifications")
	}

	if err = telegramNotificationObj.doAfterSelectHooks(exec); err != nil {
		return telegramNotificationObj, err
	}

	return telegramNotificationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TelegramNotification) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no telegram_notifications provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(telegramNotificationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	telegramNotificationInsertCacheMut.RLock()
	cache, cached := telegramNotificationInsertCache[key]
	telegramNotificationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			telegramNotificationAllColumns,
			telegramNotificationColumnsWithDefault,
			telegramNotificationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(telegramNotificationType, telegramNotificationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(telegramNotificationType, telegramNotificationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"telegram_notifications\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"telegram_notifications\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into telegram_notifications")
	}

	if !cached {
		telegramNotificationInsertCacheMut.Lock()
		telegramNotificationInsertCache[key] = cache
		telegramNotificationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the TelegramNotification.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TelegramNotification) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	telegramNotificationUpdateCacheMut.RLock()
	cache, cached := telegramNotificationUpdateCache[key]
	telegramNotificationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			telegramNotificationAllColumns,
			telegramNotificationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update telegram_notifications, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"telegram_notifications\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, telegramNotificationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(telegramNotificationType, telegramNotificationMapping, append(wl, telegramNotificationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update telegram_notifications row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for telegram_notifications")
	}

	if !cached {
		telegramNotificationUpdateCacheMut.Lock()
		telegramNotificationUpdateCache[key] = cache
		telegramNotificationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q telegramNotificationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for telegram_notifications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for telegram_notifications")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TelegramNotificationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), telegramNotificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"telegram_notifications\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, telegramNotificationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in telegramNotification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all telegramNotification")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TelegramNotification) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no telegram_notifications provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(telegramNotificationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	telegramNotificationUpsertCacheMut.RLock()
	cache, cached := telegramNotificationUpsertCache[key]
	telegramNotificationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			telegramNotificationAllColumns,
			telegramNotificationColumnsWithDefault,
			telegramNotificationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			telegramNotificationAllColumns,
			telegramNotificationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert telegram_notifications, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(telegramNotificationPrimaryKeyColumns))
			copy(conflict, telegramNotificationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"telegram_notifications\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(telegramNotificationType, telegramNotificationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(telegramNotificationType, telegramNotificationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert telegram_notifications")
	}

	if !cached {
		telegramNotificationUpsertCacheMut.Lock()
		telegramNotificationUpsertCache[key] = cache
		telegramNotificationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single TelegramNotification record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TelegramNotification) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no TelegramNotification provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), telegramNotificationPrimaryKeyMapping)
	sql := "DELETE FROM \"telegram_notifications\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from telegram_notifications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for telegram_notifications")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q telegramNotificationQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no telegramNotificationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from telegram_notifications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for telegram_notifications")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TelegramNotificationSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(telegramNotificationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), telegramNotificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"telegram_notifications\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, telegramNotificationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from telegramNotification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for telegram_notifications")
	}

	if len(telegramNotificationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TelegramNotification) Reload(exec boil.Executor) error {
	ret, err := FindTelegramNotification(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TelegramNotificationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TelegramNotificationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), telegramNotificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"telegram_notifications\".* FROM \"telegram_notifications\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, telegramNotificationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in TelegramNotificationSlice")
	}

	*o = slice

	return nil
}

// TelegramNotificationExists checks if the TelegramNotification row exists.
func TelegramNotificationExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"telegram_notifications\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if telegram_notifications exists")
	}

	return exists, nil
}
