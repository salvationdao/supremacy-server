// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MysteryCrateBlueprint is an object representing the database table.
type MysteryCrateBlueprint struct {
	ID             string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	MysteryCrateID string    `boiler:"mystery_crate_id" boil:"mystery_crate_id" json:"mystery_crate_id" toml:"mystery_crate_id" yaml:"mystery_crate_id"`
	BlueprintType  string    `boiler:"blueprint_type" boil:"blueprint_type" json:"blueprint_type" toml:"blueprint_type" yaml:"blueprint_type"`
	BlueprintID    string    `boiler:"blueprint_id" boil:"blueprint_id" json:"blueprint_id" toml:"blueprint_id" yaml:"blueprint_id"`
	DeletedAt      null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt      time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt      time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *mysteryCrateBlueprintR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L mysteryCrateBlueprintL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MysteryCrateBlueprintColumns = struct {
	ID             string
	MysteryCrateID string
	BlueprintType  string
	BlueprintID    string
	DeletedAt      string
	UpdatedAt      string
	CreatedAt      string
}{
	ID:             "id",
	MysteryCrateID: "mystery_crate_id",
	BlueprintType:  "blueprint_type",
	BlueprintID:    "blueprint_id",
	DeletedAt:      "deleted_at",
	UpdatedAt:      "updated_at",
	CreatedAt:      "created_at",
}

var MysteryCrateBlueprintTableColumns = struct {
	ID             string
	MysteryCrateID string
	BlueprintType  string
	BlueprintID    string
	DeletedAt      string
	UpdatedAt      string
	CreatedAt      string
}{
	ID:             "mystery_crate_blueprints.id",
	MysteryCrateID: "mystery_crate_blueprints.mystery_crate_id",
	BlueprintType:  "mystery_crate_blueprints.blueprint_type",
	BlueprintID:    "mystery_crate_blueprints.blueprint_id",
	DeletedAt:      "mystery_crate_blueprints.deleted_at",
	UpdatedAt:      "mystery_crate_blueprints.updated_at",
	CreatedAt:      "mystery_crate_blueprints.created_at",
}

// Generated where

var MysteryCrateBlueprintWhere = struct {
	ID             whereHelperstring
	MysteryCrateID whereHelperstring
	BlueprintType  whereHelperstring
	BlueprintID    whereHelperstring
	DeletedAt      whereHelpernull_Time
	UpdatedAt      whereHelpertime_Time
	CreatedAt      whereHelpertime_Time
}{
	ID:             whereHelperstring{field: "\"mystery_crate_blueprints\".\"id\""},
	MysteryCrateID: whereHelperstring{field: "\"mystery_crate_blueprints\".\"mystery_crate_id\""},
	BlueprintType:  whereHelperstring{field: "\"mystery_crate_blueprints\".\"blueprint_type\""},
	BlueprintID:    whereHelperstring{field: "\"mystery_crate_blueprints\".\"blueprint_id\""},
	DeletedAt:      whereHelpernull_Time{field: "\"mystery_crate_blueprints\".\"deleted_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"mystery_crate_blueprints\".\"updated_at\""},
	CreatedAt:      whereHelpertime_Time{field: "\"mystery_crate_blueprints\".\"created_at\""},
}

// MysteryCrateBlueprintRels is where relationship names are stored.
var MysteryCrateBlueprintRels = struct {
	MysteryCrate string
}{
	MysteryCrate: "MysteryCrate",
}

// mysteryCrateBlueprintR is where relationships are stored.
type mysteryCrateBlueprintR struct {
	MysteryCrate *MysteryCrate `boiler:"MysteryCrate" boil:"MysteryCrate" json:"MysteryCrate" toml:"MysteryCrate" yaml:"MysteryCrate"`
}

// NewStruct creates a new relationship struct
func (*mysteryCrateBlueprintR) NewStruct() *mysteryCrateBlueprintR {
	return &mysteryCrateBlueprintR{}
}

// mysteryCrateBlueprintL is where Load methods for each relationship are stored.
type mysteryCrateBlueprintL struct{}

var (
	mysteryCrateBlueprintAllColumns            = []string{"id", "mystery_crate_id", "blueprint_type", "blueprint_id", "deleted_at", "updated_at", "created_at"}
	mysteryCrateBlueprintColumnsWithoutDefault = []string{"mystery_crate_id", "blueprint_type", "blueprint_id"}
	mysteryCrateBlueprintColumnsWithDefault    = []string{"id", "deleted_at", "updated_at", "created_at"}
	mysteryCrateBlueprintPrimaryKeyColumns     = []string{"id"}
	mysteryCrateBlueprintGeneratedColumns      = []string{}
)

type (
	// MysteryCrateBlueprintSlice is an alias for a slice of pointers to MysteryCrateBlueprint.
	// This should almost always be used instead of []MysteryCrateBlueprint.
	MysteryCrateBlueprintSlice []*MysteryCrateBlueprint
	// MysteryCrateBlueprintHook is the signature for custom MysteryCrateBlueprint hook methods
	MysteryCrateBlueprintHook func(boil.Executor, *MysteryCrateBlueprint) error

	mysteryCrateBlueprintQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mysteryCrateBlueprintType                 = reflect.TypeOf(&MysteryCrateBlueprint{})
	mysteryCrateBlueprintMapping              = queries.MakeStructMapping(mysteryCrateBlueprintType)
	mysteryCrateBlueprintPrimaryKeyMapping, _ = queries.BindMapping(mysteryCrateBlueprintType, mysteryCrateBlueprintMapping, mysteryCrateBlueprintPrimaryKeyColumns)
	mysteryCrateBlueprintInsertCacheMut       sync.RWMutex
	mysteryCrateBlueprintInsertCache          = make(map[string]insertCache)
	mysteryCrateBlueprintUpdateCacheMut       sync.RWMutex
	mysteryCrateBlueprintUpdateCache          = make(map[string]updateCache)
	mysteryCrateBlueprintUpsertCacheMut       sync.RWMutex
	mysteryCrateBlueprintUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mysteryCrateBlueprintAfterSelectHooks []MysteryCrateBlueprintHook

var mysteryCrateBlueprintBeforeInsertHooks []MysteryCrateBlueprintHook
var mysteryCrateBlueprintAfterInsertHooks []MysteryCrateBlueprintHook

var mysteryCrateBlueprintBeforeUpdateHooks []MysteryCrateBlueprintHook
var mysteryCrateBlueprintAfterUpdateHooks []MysteryCrateBlueprintHook

var mysteryCrateBlueprintBeforeDeleteHooks []MysteryCrateBlueprintHook
var mysteryCrateBlueprintAfterDeleteHooks []MysteryCrateBlueprintHook

var mysteryCrateBlueprintBeforeUpsertHooks []MysteryCrateBlueprintHook
var mysteryCrateBlueprintAfterUpsertHooks []MysteryCrateBlueprintHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MysteryCrateBlueprint) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range mysteryCrateBlueprintAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MysteryCrateBlueprint) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mysteryCrateBlueprintBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MysteryCrateBlueprint) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mysteryCrateBlueprintAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MysteryCrateBlueprint) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mysteryCrateBlueprintBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MysteryCrateBlueprint) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mysteryCrateBlueprintAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MysteryCrateBlueprint) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mysteryCrateBlueprintBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MysteryCrateBlueprint) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mysteryCrateBlueprintAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MysteryCrateBlueprint) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mysteryCrateBlueprintBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MysteryCrateBlueprint) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mysteryCrateBlueprintAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMysteryCrateBlueprintHook registers your hook function for all future operations.
func AddMysteryCrateBlueprintHook(hookPoint boil.HookPoint, mysteryCrateBlueprintHook MysteryCrateBlueprintHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mysteryCrateBlueprintAfterSelectHooks = append(mysteryCrateBlueprintAfterSelectHooks, mysteryCrateBlueprintHook)
	case boil.BeforeInsertHook:
		mysteryCrateBlueprintBeforeInsertHooks = append(mysteryCrateBlueprintBeforeInsertHooks, mysteryCrateBlueprintHook)
	case boil.AfterInsertHook:
		mysteryCrateBlueprintAfterInsertHooks = append(mysteryCrateBlueprintAfterInsertHooks, mysteryCrateBlueprintHook)
	case boil.BeforeUpdateHook:
		mysteryCrateBlueprintBeforeUpdateHooks = append(mysteryCrateBlueprintBeforeUpdateHooks, mysteryCrateBlueprintHook)
	case boil.AfterUpdateHook:
		mysteryCrateBlueprintAfterUpdateHooks = append(mysteryCrateBlueprintAfterUpdateHooks, mysteryCrateBlueprintHook)
	case boil.BeforeDeleteHook:
		mysteryCrateBlueprintBeforeDeleteHooks = append(mysteryCrateBlueprintBeforeDeleteHooks, mysteryCrateBlueprintHook)
	case boil.AfterDeleteHook:
		mysteryCrateBlueprintAfterDeleteHooks = append(mysteryCrateBlueprintAfterDeleteHooks, mysteryCrateBlueprintHook)
	case boil.BeforeUpsertHook:
		mysteryCrateBlueprintBeforeUpsertHooks = append(mysteryCrateBlueprintBeforeUpsertHooks, mysteryCrateBlueprintHook)
	case boil.AfterUpsertHook:
		mysteryCrateBlueprintAfterUpsertHooks = append(mysteryCrateBlueprintAfterUpsertHooks, mysteryCrateBlueprintHook)
	}
}

// One returns a single mysteryCrateBlueprint record from the query.
func (q mysteryCrateBlueprintQuery) One(exec boil.Executor) (*MysteryCrateBlueprint, error) {
	o := &MysteryCrateBlueprint{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for mystery_crate_blueprints")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MysteryCrateBlueprint records from the query.
func (q mysteryCrateBlueprintQuery) All(exec boil.Executor) (MysteryCrateBlueprintSlice, error) {
	var o []*MysteryCrateBlueprint

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to MysteryCrateBlueprint slice")
	}

	if len(mysteryCrateBlueprintAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MysteryCrateBlueprint records in the query.
func (q mysteryCrateBlueprintQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count mystery_crate_blueprints rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mysteryCrateBlueprintQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if mystery_crate_blueprints exists")
	}

	return count > 0, nil
}

// MysteryCrate pointed to by the foreign key.
func (o *MysteryCrateBlueprint) MysteryCrate(mods ...qm.QueryMod) mysteryCrateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MysteryCrateID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := MysteryCrates(queryMods...)
	queries.SetFrom(query.Query, "\"mystery_crate\"")

	return query
}

// LoadMysteryCrate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mysteryCrateBlueprintL) LoadMysteryCrate(e boil.Executor, singular bool, maybeMysteryCrateBlueprint interface{}, mods queries.Applicator) error {
	var slice []*MysteryCrateBlueprint
	var object *MysteryCrateBlueprint

	if singular {
		object = maybeMysteryCrateBlueprint.(*MysteryCrateBlueprint)
	} else {
		slice = *maybeMysteryCrateBlueprint.(*[]*MysteryCrateBlueprint)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mysteryCrateBlueprintR{}
		}
		args = append(args, object.MysteryCrateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mysteryCrateBlueprintR{}
			}

			for _, a := range args {
				if a == obj.MysteryCrateID {
					continue Outer
				}
			}

			args = append(args, obj.MysteryCrateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mystery_crate`),
		qm.WhereIn(`mystery_crate.id in ?`, args...),
		qmhelper.WhereIsNull(`mystery_crate.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MysteryCrate")
	}

	var resultSlice []*MysteryCrate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MysteryCrate")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mystery_crate")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mystery_crate")
	}

	if len(mysteryCrateBlueprintAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MysteryCrate = foreign
		if foreign.R == nil {
			foreign.R = &mysteryCrateR{}
		}
		foreign.R.MysteryCrateBlueprints = append(foreign.R.MysteryCrateBlueprints, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MysteryCrateID == foreign.ID {
				local.R.MysteryCrate = foreign
				if foreign.R == nil {
					foreign.R = &mysteryCrateR{}
				}
				foreign.R.MysteryCrateBlueprints = append(foreign.R.MysteryCrateBlueprints, local)
				break
			}
		}
	}

	return nil
}

// SetMysteryCrate of the mysteryCrateBlueprint to the related item.
// Sets o.R.MysteryCrate to related.
// Adds o to related.R.MysteryCrateBlueprints.
func (o *MysteryCrateBlueprint) SetMysteryCrate(exec boil.Executor, insert bool, related *MysteryCrate) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mystery_crate_blueprints\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mystery_crate_id"}),
		strmangle.WhereClause("\"", "\"", 2, mysteryCrateBlueprintPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MysteryCrateID = related.ID
	if o.R == nil {
		o.R = &mysteryCrateBlueprintR{
			MysteryCrate: related,
		}
	} else {
		o.R.MysteryCrate = related
	}

	if related.R == nil {
		related.R = &mysteryCrateR{
			MysteryCrateBlueprints: MysteryCrateBlueprintSlice{o},
		}
	} else {
		related.R.MysteryCrateBlueprints = append(related.R.MysteryCrateBlueprints, o)
	}

	return nil
}

// MysteryCrateBlueprints retrieves all the records using an executor.
func MysteryCrateBlueprints(mods ...qm.QueryMod) mysteryCrateBlueprintQuery {
	mods = append(mods, qm.From("\"mystery_crate_blueprints\""), qmhelper.WhereIsNull("\"mystery_crate_blueprints\".\"deleted_at\""))
	return mysteryCrateBlueprintQuery{NewQuery(mods...)}
}

// FindMysteryCrateBlueprint retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMysteryCrateBlueprint(exec boil.Executor, iD string, selectCols ...string) (*MysteryCrateBlueprint, error) {
	mysteryCrateBlueprintObj := &MysteryCrateBlueprint{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mystery_crate_blueprints\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, mysteryCrateBlueprintObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from mystery_crate_blueprints")
	}

	if err = mysteryCrateBlueprintObj.doAfterSelectHooks(exec); err != nil {
		return mysteryCrateBlueprintObj, err
	}

	return mysteryCrateBlueprintObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MysteryCrateBlueprint) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mystery_crate_blueprints provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mysteryCrateBlueprintColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mysteryCrateBlueprintInsertCacheMut.RLock()
	cache, cached := mysteryCrateBlueprintInsertCache[key]
	mysteryCrateBlueprintInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mysteryCrateBlueprintAllColumns,
			mysteryCrateBlueprintColumnsWithDefault,
			mysteryCrateBlueprintColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mysteryCrateBlueprintType, mysteryCrateBlueprintMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mysteryCrateBlueprintType, mysteryCrateBlueprintMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mystery_crate_blueprints\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mystery_crate_blueprints\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into mystery_crate_blueprints")
	}

	if !cached {
		mysteryCrateBlueprintInsertCacheMut.Lock()
		mysteryCrateBlueprintInsertCache[key] = cache
		mysteryCrateBlueprintInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the MysteryCrateBlueprint.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MysteryCrateBlueprint) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mysteryCrateBlueprintUpdateCacheMut.RLock()
	cache, cached := mysteryCrateBlueprintUpdateCache[key]
	mysteryCrateBlueprintUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mysteryCrateBlueprintAllColumns,
			mysteryCrateBlueprintPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update mystery_crate_blueprints, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mystery_crate_blueprints\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mysteryCrateBlueprintPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mysteryCrateBlueprintType, mysteryCrateBlueprintMapping, append(wl, mysteryCrateBlueprintPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update mystery_crate_blueprints row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for mystery_crate_blueprints")
	}

	if !cached {
		mysteryCrateBlueprintUpdateCacheMut.Lock()
		mysteryCrateBlueprintUpdateCache[key] = cache
		mysteryCrateBlueprintUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mysteryCrateBlueprintQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for mystery_crate_blueprints")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for mystery_crate_blueprints")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MysteryCrateBlueprintSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mysteryCrateBlueprintPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mystery_crate_blueprints\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mysteryCrateBlueprintPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in mysteryCrateBlueprint slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all mysteryCrateBlueprint")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MysteryCrateBlueprint) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mystery_crate_blueprints provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mysteryCrateBlueprintColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mysteryCrateBlueprintUpsertCacheMut.RLock()
	cache, cached := mysteryCrateBlueprintUpsertCache[key]
	mysteryCrateBlueprintUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mysteryCrateBlueprintAllColumns,
			mysteryCrateBlueprintColumnsWithDefault,
			mysteryCrateBlueprintColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mysteryCrateBlueprintAllColumns,
			mysteryCrateBlueprintPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert mystery_crate_blueprints, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mysteryCrateBlueprintPrimaryKeyColumns))
			copy(conflict, mysteryCrateBlueprintPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mystery_crate_blueprints\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mysteryCrateBlueprintType, mysteryCrateBlueprintMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mysteryCrateBlueprintType, mysteryCrateBlueprintMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert mystery_crate_blueprints")
	}

	if !cached {
		mysteryCrateBlueprintUpsertCacheMut.Lock()
		mysteryCrateBlueprintUpsertCache[key] = cache
		mysteryCrateBlueprintUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single MysteryCrateBlueprint record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MysteryCrateBlueprint) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no MysteryCrateBlueprint provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mysteryCrateBlueprintPrimaryKeyMapping)
		sql = "DELETE FROM \"mystery_crate_blueprints\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"mystery_crate_blueprints\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(mysteryCrateBlueprintType, mysteryCrateBlueprintMapping, append(wl, mysteryCrateBlueprintPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from mystery_crate_blueprints")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for mystery_crate_blueprints")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mysteryCrateBlueprintQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no mysteryCrateBlueprintQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mystery_crate_blueprints")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mystery_crate_blueprints")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MysteryCrateBlueprintSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mysteryCrateBlueprintBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mysteryCrateBlueprintPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"mystery_crate_blueprints\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mysteryCrateBlueprintPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mysteryCrateBlueprintPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"mystery_crate_blueprints\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, mysteryCrateBlueprintPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mysteryCrateBlueprint slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mystery_crate_blueprints")
	}

	if len(mysteryCrateBlueprintAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MysteryCrateBlueprint) Reload(exec boil.Executor) error {
	ret, err := FindMysteryCrateBlueprint(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MysteryCrateBlueprintSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MysteryCrateBlueprintSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mysteryCrateBlueprintPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mystery_crate_blueprints\".* FROM \"mystery_crate_blueprints\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mysteryCrateBlueprintPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in MysteryCrateBlueprintSlice")
	}

	*o = slice

	return nil
}

// MysteryCrateBlueprintExists checks if the MysteryCrateBlueprint row exists.
func MysteryCrateBlueprintExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mystery_crate_blueprints\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if mystery_crate_blueprints exists")
	}

	return exists, nil
}
