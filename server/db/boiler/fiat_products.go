// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FiatProduct is an object representing the database table.
type FiatProduct struct {
	ID          string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	ProductType string    `boiler:"product_type" boil:"product_type" json:"product_type" toml:"product_type" yaml:"product_type"`
	FactionID   string    `boiler:"faction_id" boil:"faction_id" json:"faction_id" toml:"faction_id" yaml:"faction_id"`
	Name        string    `boiler:"name" boil:"name" json:"name" toml:"name" yaml:"name"`
	Description string    `boiler:"description" boil:"description" json:"description" toml:"description" yaml:"description"`
	AmountSold  int       `boiler:"amount_sold" boil:"amount_sold" json:"amount_sold" toml:"amount_sold" yaml:"amount_sold"`
	DeletedAt   null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt   time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt   time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *fiatProductR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L fiatProductL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FiatProductColumns = struct {
	ID          string
	ProductType string
	FactionID   string
	Name        string
	Description string
	AmountSold  string
	DeletedAt   string
	UpdatedAt   string
	CreatedAt   string
}{
	ID:          "id",
	ProductType: "product_type",
	FactionID:   "faction_id",
	Name:        "name",
	Description: "description",
	AmountSold:  "amount_sold",
	DeletedAt:   "deleted_at",
	UpdatedAt:   "updated_at",
	CreatedAt:   "created_at",
}

var FiatProductTableColumns = struct {
	ID          string
	ProductType string
	FactionID   string
	Name        string
	Description string
	AmountSold  string
	DeletedAt   string
	UpdatedAt   string
	CreatedAt   string
}{
	ID:          "fiat_products.id",
	ProductType: "fiat_products.product_type",
	FactionID:   "fiat_products.faction_id",
	Name:        "fiat_products.name",
	Description: "fiat_products.description",
	AmountSold:  "fiat_products.amount_sold",
	DeletedAt:   "fiat_products.deleted_at",
	UpdatedAt:   "fiat_products.updated_at",
	CreatedAt:   "fiat_products.created_at",
}

// Generated where

var FiatProductWhere = struct {
	ID          whereHelperstring
	ProductType whereHelperstring
	FactionID   whereHelperstring
	Name        whereHelperstring
	Description whereHelperstring
	AmountSold  whereHelperint
	DeletedAt   whereHelpernull_Time
	UpdatedAt   whereHelpertime_Time
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperstring{field: "\"fiat_products\".\"id\""},
	ProductType: whereHelperstring{field: "\"fiat_products\".\"product_type\""},
	FactionID:   whereHelperstring{field: "\"fiat_products\".\"faction_id\""},
	Name:        whereHelperstring{field: "\"fiat_products\".\"name\""},
	Description: whereHelperstring{field: "\"fiat_products\".\"description\""},
	AmountSold:  whereHelperint{field: "\"fiat_products\".\"amount_sold\""},
	DeletedAt:   whereHelpernull_Time{field: "\"fiat_products\".\"deleted_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"fiat_products\".\"updated_at\""},
	CreatedAt:   whereHelpertime_Time{field: "\"fiat_products\".\"created_at\""},
}

// FiatProductRels is where relationship names are stored.
var FiatProductRels = struct {
	StorefrontMysteryCrate   string
	ProductFiatProductItems  string
	FiatProductPricings      string
	OrderItems               string
	ProductShoppingCartItems string
}{
	StorefrontMysteryCrate:   "StorefrontMysteryCrate",
	ProductFiatProductItems:  "ProductFiatProductItems",
	FiatProductPricings:      "FiatProductPricings",
	OrderItems:               "OrderItems",
	ProductShoppingCartItems: "ProductShoppingCartItems",
}

// fiatProductR is where relationships are stored.
type fiatProductR struct {
	StorefrontMysteryCrate   *StorefrontMysteryCrate `boiler:"StorefrontMysteryCrate" boil:"StorefrontMysteryCrate" json:"StorefrontMysteryCrate" toml:"StorefrontMysteryCrate" yaml:"StorefrontMysteryCrate"`
	ProductFiatProductItems  FiatProductItemSlice    `boiler:"ProductFiatProductItems" boil:"ProductFiatProductItems" json:"ProductFiatProductItems" toml:"ProductFiatProductItems" yaml:"ProductFiatProductItems"`
	FiatProductPricings      FiatProductPricingSlice `boiler:"FiatProductPricings" boil:"FiatProductPricings" json:"FiatProductPricings" toml:"FiatProductPricings" yaml:"FiatProductPricings"`
	OrderItems               OrderItemSlice          `boiler:"OrderItems" boil:"OrderItems" json:"OrderItems" toml:"OrderItems" yaml:"OrderItems"`
	ProductShoppingCartItems ShoppingCartItemSlice   `boiler:"ProductShoppingCartItems" boil:"ProductShoppingCartItems" json:"ProductShoppingCartItems" toml:"ProductShoppingCartItems" yaml:"ProductShoppingCartItems"`
}

// NewStruct creates a new relationship struct
func (*fiatProductR) NewStruct() *fiatProductR {
	return &fiatProductR{}
}

// fiatProductL is where Load methods for each relationship are stored.
type fiatProductL struct{}

var (
	fiatProductAllColumns            = []string{"id", "product_type", "faction_id", "name", "description", "amount_sold", "deleted_at", "updated_at", "created_at"}
	fiatProductColumnsWithoutDefault = []string{"product_type", "faction_id", "name", "description"}
	fiatProductColumnsWithDefault    = []string{"id", "amount_sold", "deleted_at", "updated_at", "created_at"}
	fiatProductPrimaryKeyColumns     = []string{"id"}
	fiatProductGeneratedColumns      = []string{}
)

type (
	// FiatProductSlice is an alias for a slice of pointers to FiatProduct.
	// This should almost always be used instead of []FiatProduct.
	FiatProductSlice []*FiatProduct
	// FiatProductHook is the signature for custom FiatProduct hook methods
	FiatProductHook func(boil.Executor, *FiatProduct) error

	fiatProductQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	fiatProductType                 = reflect.TypeOf(&FiatProduct{})
	fiatProductMapping              = queries.MakeStructMapping(fiatProductType)
	fiatProductPrimaryKeyMapping, _ = queries.BindMapping(fiatProductType, fiatProductMapping, fiatProductPrimaryKeyColumns)
	fiatProductInsertCacheMut       sync.RWMutex
	fiatProductInsertCache          = make(map[string]insertCache)
	fiatProductUpdateCacheMut       sync.RWMutex
	fiatProductUpdateCache          = make(map[string]updateCache)
	fiatProductUpsertCacheMut       sync.RWMutex
	fiatProductUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var fiatProductAfterSelectHooks []FiatProductHook

var fiatProductBeforeInsertHooks []FiatProductHook
var fiatProductAfterInsertHooks []FiatProductHook

var fiatProductBeforeUpdateHooks []FiatProductHook
var fiatProductAfterUpdateHooks []FiatProductHook

var fiatProductBeforeDeleteHooks []FiatProductHook
var fiatProductAfterDeleteHooks []FiatProductHook

var fiatProductBeforeUpsertHooks []FiatProductHook
var fiatProductAfterUpsertHooks []FiatProductHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FiatProduct) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range fiatProductAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FiatProduct) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range fiatProductBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FiatProduct) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range fiatProductAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FiatProduct) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range fiatProductBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FiatProduct) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range fiatProductAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FiatProduct) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range fiatProductBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FiatProduct) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range fiatProductAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FiatProduct) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range fiatProductBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FiatProduct) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range fiatProductAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFiatProductHook registers your hook function for all future operations.
func AddFiatProductHook(hookPoint boil.HookPoint, fiatProductHook FiatProductHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		fiatProductAfterSelectHooks = append(fiatProductAfterSelectHooks, fiatProductHook)
	case boil.BeforeInsertHook:
		fiatProductBeforeInsertHooks = append(fiatProductBeforeInsertHooks, fiatProductHook)
	case boil.AfterInsertHook:
		fiatProductAfterInsertHooks = append(fiatProductAfterInsertHooks, fiatProductHook)
	case boil.BeforeUpdateHook:
		fiatProductBeforeUpdateHooks = append(fiatProductBeforeUpdateHooks, fiatProductHook)
	case boil.AfterUpdateHook:
		fiatProductAfterUpdateHooks = append(fiatProductAfterUpdateHooks, fiatProductHook)
	case boil.BeforeDeleteHook:
		fiatProductBeforeDeleteHooks = append(fiatProductBeforeDeleteHooks, fiatProductHook)
	case boil.AfterDeleteHook:
		fiatProductAfterDeleteHooks = append(fiatProductAfterDeleteHooks, fiatProductHook)
	case boil.BeforeUpsertHook:
		fiatProductBeforeUpsertHooks = append(fiatProductBeforeUpsertHooks, fiatProductHook)
	case boil.AfterUpsertHook:
		fiatProductAfterUpsertHooks = append(fiatProductAfterUpsertHooks, fiatProductHook)
	}
}

// One returns a single fiatProduct record from the query.
func (q fiatProductQuery) One(exec boil.Executor) (*FiatProduct, error) {
	o := &FiatProduct{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for fiat_products")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FiatProduct records from the query.
func (q fiatProductQuery) All(exec boil.Executor) (FiatProductSlice, error) {
	var o []*FiatProduct

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to FiatProduct slice")
	}

	if len(fiatProductAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FiatProduct records in the query.
func (q fiatProductQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count fiat_products rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q fiatProductQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if fiat_products exists")
	}

	return count > 0, nil
}

// StorefrontMysteryCrate pointed to by the foreign key.
func (o *FiatProduct) StorefrontMysteryCrate(mods ...qm.QueryMod) storefrontMysteryCrateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"fiat_product_id\" = ?", o.ID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := StorefrontMysteryCrates(queryMods...)
	queries.SetFrom(query.Query, "\"storefront_mystery_crates\"")

	return query
}

// ProductFiatProductItems retrieves all the fiat_product_item's FiatProductItems with an executor via product_id column.
func (o *FiatProduct) ProductFiatProductItems(mods ...qm.QueryMod) fiatProductItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"fiat_product_items\".\"product_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"fiat_product_items\".\"deleted_at\""),
	)

	query := FiatProductItems(queryMods...)
	queries.SetFrom(query.Query, "\"fiat_product_items\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"fiat_product_items\".*"})
	}

	return query
}

// FiatProductPricings retrieves all the fiat_product_pricing's FiatProductPricings with an executor.
func (o *FiatProduct) FiatProductPricings(mods ...qm.QueryMod) fiatProductPricingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"fiat_product_pricings\".\"fiat_product_id\"=?", o.ID),
	)

	query := FiatProductPricings(queryMods...)
	queries.SetFrom(query.Query, "\"fiat_product_pricings\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"fiat_product_pricings\".*"})
	}

	return query
}

// OrderItems retrieves all the order_item's OrderItems with an executor.
func (o *FiatProduct) OrderItems(mods ...qm.QueryMod) orderItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"order_items\".\"fiat_product_id\"=?", o.ID),
	)

	query := OrderItems(queryMods...)
	queries.SetFrom(query.Query, "\"order_items\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"order_items\".*"})
	}

	return query
}

// ProductShoppingCartItems retrieves all the shopping_cart_item's ShoppingCartItems with an executor via product_id column.
func (o *FiatProduct) ProductShoppingCartItems(mods ...qm.QueryMod) shoppingCartItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shopping_cart_items\".\"product_id\"=?", o.ID),
	)

	query := ShoppingCartItems(queryMods...)
	queries.SetFrom(query.Query, "\"shopping_cart_items\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"shopping_cart_items\".*"})
	}

	return query
}

// LoadStorefrontMysteryCrate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (fiatProductL) LoadStorefrontMysteryCrate(e boil.Executor, singular bool, maybeFiatProduct interface{}, mods queries.Applicator) error {
	var slice []*FiatProduct
	var object *FiatProduct

	if singular {
		object = maybeFiatProduct.(*FiatProduct)
	} else {
		slice = *maybeFiatProduct.(*[]*FiatProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fiatProductR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fiatProductR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`storefront_mystery_crates`),
		qm.WhereIn(`storefront_mystery_crates.fiat_product_id in ?`, args...),
		qmhelper.WhereIsNull(`storefront_mystery_crates.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load StorefrontMysteryCrate")
	}

	var resultSlice []*StorefrontMysteryCrate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice StorefrontMysteryCrate")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for storefront_mystery_crates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for storefront_mystery_crates")
	}

	if len(fiatProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.StorefrontMysteryCrate = foreign
		if foreign.R == nil {
			foreign.R = &storefrontMysteryCrateR{}
		}
		foreign.R.FiatProduct = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.FiatProductID {
				local.R.StorefrontMysteryCrate = foreign
				if foreign.R == nil {
					foreign.R = &storefrontMysteryCrateR{}
				}
				foreign.R.FiatProduct = local
				break
			}
		}
	}

	return nil
}

// LoadProductFiatProductItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (fiatProductL) LoadProductFiatProductItems(e boil.Executor, singular bool, maybeFiatProduct interface{}, mods queries.Applicator) error {
	var slice []*FiatProduct
	var object *FiatProduct

	if singular {
		object = maybeFiatProduct.(*FiatProduct)
	} else {
		slice = *maybeFiatProduct.(*[]*FiatProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fiatProductR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fiatProductR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`fiat_product_items`),
		qm.WhereIn(`fiat_product_items.product_id in ?`, args...),
		qmhelper.WhereIsNull(`fiat_product_items.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load fiat_product_items")
	}

	var resultSlice []*FiatProductItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice fiat_product_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on fiat_product_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for fiat_product_items")
	}

	if len(fiatProductItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductFiatProductItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &fiatProductItemR{}
			}
			foreign.R.Product = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProductID {
				local.R.ProductFiatProductItems = append(local.R.ProductFiatProductItems, foreign)
				if foreign.R == nil {
					foreign.R = &fiatProductItemR{}
				}
				foreign.R.Product = local
				break
			}
		}
	}

	return nil
}

// LoadFiatProductPricings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (fiatProductL) LoadFiatProductPricings(e boil.Executor, singular bool, maybeFiatProduct interface{}, mods queries.Applicator) error {
	var slice []*FiatProduct
	var object *FiatProduct

	if singular {
		object = maybeFiatProduct.(*FiatProduct)
	} else {
		slice = *maybeFiatProduct.(*[]*FiatProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fiatProductR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fiatProductR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`fiat_product_pricings`),
		qm.WhereIn(`fiat_product_pricings.fiat_product_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load fiat_product_pricings")
	}

	var resultSlice []*FiatProductPricing
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice fiat_product_pricings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on fiat_product_pricings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for fiat_product_pricings")
	}

	if len(fiatProductPricingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FiatProductPricings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &fiatProductPricingR{}
			}
			foreign.R.FiatProduct = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FiatProductID {
				local.R.FiatProductPricings = append(local.R.FiatProductPricings, foreign)
				if foreign.R == nil {
					foreign.R = &fiatProductPricingR{}
				}
				foreign.R.FiatProduct = local
				break
			}
		}
	}

	return nil
}

// LoadOrderItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (fiatProductL) LoadOrderItems(e boil.Executor, singular bool, maybeFiatProduct interface{}, mods queries.Applicator) error {
	var slice []*FiatProduct
	var object *FiatProduct

	if singular {
		object = maybeFiatProduct.(*FiatProduct)
	} else {
		slice = *maybeFiatProduct.(*[]*FiatProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fiatProductR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fiatProductR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`order_items`),
		qm.WhereIn(`order_items.fiat_product_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_items")
	}

	var resultSlice []*OrderItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on order_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_items")
	}

	if len(orderItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderItemR{}
			}
			foreign.R.FiatProduct = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FiatProductID {
				local.R.OrderItems = append(local.R.OrderItems, foreign)
				if foreign.R == nil {
					foreign.R = &orderItemR{}
				}
				foreign.R.FiatProduct = local
				break
			}
		}
	}

	return nil
}

// LoadProductShoppingCartItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (fiatProductL) LoadProductShoppingCartItems(e boil.Executor, singular bool, maybeFiatProduct interface{}, mods queries.Applicator) error {
	var slice []*FiatProduct
	var object *FiatProduct

	if singular {
		object = maybeFiatProduct.(*FiatProduct)
	} else {
		slice = *maybeFiatProduct.(*[]*FiatProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fiatProductR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fiatProductR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shopping_cart_items`),
		qm.WhereIn(`shopping_cart_items.product_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shopping_cart_items")
	}

	var resultSlice []*ShoppingCartItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shopping_cart_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shopping_cart_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shopping_cart_items")
	}

	if len(shoppingCartItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductShoppingCartItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shoppingCartItemR{}
			}
			foreign.R.Product = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProductID {
				local.R.ProductShoppingCartItems = append(local.R.ProductShoppingCartItems, foreign)
				if foreign.R == nil {
					foreign.R = &shoppingCartItemR{}
				}
				foreign.R.Product = local
				break
			}
		}
	}

	return nil
}

// SetStorefrontMysteryCrate of the fiatProduct to the related item.
// Sets o.R.StorefrontMysteryCrate to related.
// Adds o to related.R.FiatProduct.
func (o *FiatProduct) SetStorefrontMysteryCrate(exec boil.Executor, insert bool, related *StorefrontMysteryCrate) error {
	var err error

	if insert {
		related.FiatProductID = o.ID

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"storefront_mystery_crates\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"fiat_product_id"}),
			strmangle.WhereClause("\"", "\"", 2, storefrontMysteryCratePrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.FiatProductID = o.ID

	}

	if o.R == nil {
		o.R = &fiatProductR{
			StorefrontMysteryCrate: related,
		}
	} else {
		o.R.StorefrontMysteryCrate = related
	}

	if related.R == nil {
		related.R = &storefrontMysteryCrateR{
			FiatProduct: o,
		}
	} else {
		related.R.FiatProduct = o
	}
	return nil
}

// AddProductFiatProductItems adds the given related objects to the existing relationships
// of the fiat_product, optionally inserting them as new records.
// Appends related to o.R.ProductFiatProductItems.
// Sets related.R.Product appropriately.
func (o *FiatProduct) AddProductFiatProductItems(exec boil.Executor, insert bool, related ...*FiatProductItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"fiat_product_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
				strmangle.WhereClause("\"", "\"", 2, fiatProductItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductID = o.ID
		}
	}

	if o.R == nil {
		o.R = &fiatProductR{
			ProductFiatProductItems: related,
		}
	} else {
		o.R.ProductFiatProductItems = append(o.R.ProductFiatProductItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &fiatProductItemR{
				Product: o,
			}
		} else {
			rel.R.Product = o
		}
	}
	return nil
}

// AddFiatProductPricings adds the given related objects to the existing relationships
// of the fiat_product, optionally inserting them as new records.
// Appends related to o.R.FiatProductPricings.
// Sets related.R.FiatProduct appropriately.
func (o *FiatProduct) AddFiatProductPricings(exec boil.Executor, insert bool, related ...*FiatProductPricing) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FiatProductID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"fiat_product_pricings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"fiat_product_id"}),
				strmangle.WhereClause("\"", "\"", 2, fiatProductPricingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.FiatProductID, rel.CurrencyCode}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FiatProductID = o.ID
		}
	}

	if o.R == nil {
		o.R = &fiatProductR{
			FiatProductPricings: related,
		}
	} else {
		o.R.FiatProductPricings = append(o.R.FiatProductPricings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &fiatProductPricingR{
				FiatProduct: o,
			}
		} else {
			rel.R.FiatProduct = o
		}
	}
	return nil
}

// AddOrderItems adds the given related objects to the existing relationships
// of the fiat_product, optionally inserting them as new records.
// Appends related to o.R.OrderItems.
// Sets related.R.FiatProduct appropriately.
func (o *FiatProduct) AddOrderItems(exec boil.Executor, insert bool, related ...*OrderItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FiatProductID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"order_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"fiat_product_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FiatProductID = o.ID
		}
	}

	if o.R == nil {
		o.R = &fiatProductR{
			OrderItems: related,
		}
	} else {
		o.R.OrderItems = append(o.R.OrderItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderItemR{
				FiatProduct: o,
			}
		} else {
			rel.R.FiatProduct = o
		}
	}
	return nil
}

// AddProductShoppingCartItems adds the given related objects to the existing relationships
// of the fiat_product, optionally inserting them as new records.
// Appends related to o.R.ProductShoppingCartItems.
// Sets related.R.Product appropriately.
func (o *FiatProduct) AddProductShoppingCartItems(exec boil.Executor, insert bool, related ...*ShoppingCartItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shopping_cart_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
				strmangle.WhereClause("\"", "\"", 2, shoppingCartItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductID = o.ID
		}
	}

	if o.R == nil {
		o.R = &fiatProductR{
			ProductShoppingCartItems: related,
		}
	} else {
		o.R.ProductShoppingCartItems = append(o.R.ProductShoppingCartItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shoppingCartItemR{
				Product: o,
			}
		} else {
			rel.R.Product = o
		}
	}
	return nil
}

// FiatProducts retrieves all the records using an executor.
func FiatProducts(mods ...qm.QueryMod) fiatProductQuery {
	mods = append(mods, qm.From("\"fiat_products\""), qmhelper.WhereIsNull("\"fiat_products\".\"deleted_at\""))
	return fiatProductQuery{NewQuery(mods...)}
}

// FindFiatProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFiatProduct(exec boil.Executor, iD string, selectCols ...string) (*FiatProduct, error) {
	fiatProductObj := &FiatProduct{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"fiat_products\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, fiatProductObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from fiat_products")
	}

	if err = fiatProductObj.doAfterSelectHooks(exec); err != nil {
		return fiatProductObj, err
	}

	return fiatProductObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FiatProduct) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no fiat_products provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fiatProductColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	fiatProductInsertCacheMut.RLock()
	cache, cached := fiatProductInsertCache[key]
	fiatProductInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			fiatProductAllColumns,
			fiatProductColumnsWithDefault,
			fiatProductColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(fiatProductType, fiatProductMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(fiatProductType, fiatProductMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"fiat_products\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"fiat_products\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into fiat_products")
	}

	if !cached {
		fiatProductInsertCacheMut.Lock()
		fiatProductInsertCache[key] = cache
		fiatProductInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the FiatProduct.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FiatProduct) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	fiatProductUpdateCacheMut.RLock()
	cache, cached := fiatProductUpdateCache[key]
	fiatProductUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			fiatProductAllColumns,
			fiatProductPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update fiat_products, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"fiat_products\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, fiatProductPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(fiatProductType, fiatProductMapping, append(wl, fiatProductPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update fiat_products row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for fiat_products")
	}

	if !cached {
		fiatProductUpdateCacheMut.Lock()
		fiatProductUpdateCache[key] = cache
		fiatProductUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q fiatProductQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for fiat_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for fiat_products")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FiatProductSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fiatProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"fiat_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, fiatProductPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in fiatProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all fiatProduct")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FiatProduct) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no fiat_products provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fiatProductColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	fiatProductUpsertCacheMut.RLock()
	cache, cached := fiatProductUpsertCache[key]
	fiatProductUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			fiatProductAllColumns,
			fiatProductColumnsWithDefault,
			fiatProductColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			fiatProductAllColumns,
			fiatProductPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert fiat_products, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(fiatProductPrimaryKeyColumns))
			copy(conflict, fiatProductPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"fiat_products\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(fiatProductType, fiatProductMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(fiatProductType, fiatProductMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert fiat_products")
	}

	if !cached {
		fiatProductUpsertCacheMut.Lock()
		fiatProductUpsertCache[key] = cache
		fiatProductUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single FiatProduct record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FiatProduct) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no FiatProduct provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), fiatProductPrimaryKeyMapping)
		sql = "DELETE FROM \"fiat_products\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"fiat_products\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(fiatProductType, fiatProductMapping, append(wl, fiatProductPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from fiat_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for fiat_products")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q fiatProductQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no fiatProductQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from fiat_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for fiat_products")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FiatProductSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(fiatProductBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fiatProductPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"fiat_products\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, fiatProductPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fiatProductPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"fiat_products\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, fiatProductPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from fiatProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for fiat_products")
	}

	if len(fiatProductAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FiatProduct) Reload(exec boil.Executor) error {
	ret, err := FindFiatProduct(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FiatProductSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FiatProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fiatProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"fiat_products\".* FROM \"fiat_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, fiatProductPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in FiatProductSlice")
	}

	*o = slice

	return nil
}

// FiatProductExists checks if the FiatProduct row exists.
func FiatProductExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"fiat_products\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if fiat_products exists")
	}

	return exists, nil
}
