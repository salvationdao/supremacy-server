// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BlueprintEnergyCore is an object representing the database table.
type BlueprintEnergyCore struct {
	ID           string          `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Collection   string          `boiler:"collection" boil:"collection" json:"collection" toml:"collection" yaml:"collection"`
	Label        string          `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	Size         string          `boiler:"size" boil:"size" json:"size" toml:"size" yaml:"size"`
	Capacity     decimal.Decimal `boiler:"capacity" boil:"capacity" json:"capacity" toml:"capacity" yaml:"capacity"`
	MaxDrawRate  decimal.Decimal `boiler:"max_draw_rate" boil:"max_draw_rate" json:"max_draw_rate" toml:"max_draw_rate" yaml:"max_draw_rate"`
	RechargeRate decimal.Decimal `boiler:"recharge_rate" boil:"recharge_rate" json:"recharge_rate" toml:"recharge_rate" yaml:"recharge_rate"`
	Armour       decimal.Decimal `boiler:"armour" boil:"armour" json:"armour" toml:"armour" yaml:"armour"`
	MaxHitpoints decimal.Decimal `boiler:"max_hitpoints" boil:"max_hitpoints" json:"max_hitpoints" toml:"max_hitpoints" yaml:"max_hitpoints"`
	Tier         null.String     `boiler:"tier" boil:"tier" json:"tier,omitempty" toml:"tier" yaml:"tier,omitempty"`
	CreatedAt    time.Time       `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *blueprintEnergyCoreR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L blueprintEnergyCoreL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlueprintEnergyCoreColumns = struct {
	ID           string
	Collection   string
	Label        string
	Size         string
	Capacity     string
	MaxDrawRate  string
	RechargeRate string
	Armour       string
	MaxHitpoints string
	Tier         string
	CreatedAt    string
}{
	ID:           "id",
	Collection:   "collection",
	Label:        "label",
	Size:         "size",
	Capacity:     "capacity",
	MaxDrawRate:  "max_draw_rate",
	RechargeRate: "recharge_rate",
	Armour:       "armour",
	MaxHitpoints: "max_hitpoints",
	Tier:         "tier",
	CreatedAt:    "created_at",
}

var BlueprintEnergyCoreTableColumns = struct {
	ID           string
	Collection   string
	Label        string
	Size         string
	Capacity     string
	MaxDrawRate  string
	RechargeRate string
	Armour       string
	MaxHitpoints string
	Tier         string
	CreatedAt    string
}{
	ID:           "blueprint_energy_cores.id",
	Collection:   "blueprint_energy_cores.collection",
	Label:        "blueprint_energy_cores.label",
	Size:         "blueprint_energy_cores.size",
	Capacity:     "blueprint_energy_cores.capacity",
	MaxDrawRate:  "blueprint_energy_cores.max_draw_rate",
	RechargeRate: "blueprint_energy_cores.recharge_rate",
	Armour:       "blueprint_energy_cores.armour",
	MaxHitpoints: "blueprint_energy_cores.max_hitpoints",
	Tier:         "blueprint_energy_cores.tier",
	CreatedAt:    "blueprint_energy_cores.created_at",
}

// Generated where

var BlueprintEnergyCoreWhere = struct {
	ID           whereHelperstring
	Collection   whereHelperstring
	Label        whereHelperstring
	Size         whereHelperstring
	Capacity     whereHelperdecimal_Decimal
	MaxDrawRate  whereHelperdecimal_Decimal
	RechargeRate whereHelperdecimal_Decimal
	Armour       whereHelperdecimal_Decimal
	MaxHitpoints whereHelperdecimal_Decimal
	Tier         whereHelpernull_String
	CreatedAt    whereHelpertime_Time
}{
	ID:           whereHelperstring{field: "\"blueprint_energy_cores\".\"id\""},
	Collection:   whereHelperstring{field: "\"blueprint_energy_cores\".\"collection\""},
	Label:        whereHelperstring{field: "\"blueprint_energy_cores\".\"label\""},
	Size:         whereHelperstring{field: "\"blueprint_energy_cores\".\"size\""},
	Capacity:     whereHelperdecimal_Decimal{field: "\"blueprint_energy_cores\".\"capacity\""},
	MaxDrawRate:  whereHelperdecimal_Decimal{field: "\"blueprint_energy_cores\".\"max_draw_rate\""},
	RechargeRate: whereHelperdecimal_Decimal{field: "\"blueprint_energy_cores\".\"recharge_rate\""},
	Armour:       whereHelperdecimal_Decimal{field: "\"blueprint_energy_cores\".\"armour\""},
	MaxHitpoints: whereHelperdecimal_Decimal{field: "\"blueprint_energy_cores\".\"max_hitpoints\""},
	Tier:         whereHelpernull_String{field: "\"blueprint_energy_cores\".\"tier\""},
	CreatedAt:    whereHelpertime_Time{field: "\"blueprint_energy_cores\".\"created_at\""},
}

// BlueprintEnergyCoreRels is where relationship names are stored.
var BlueprintEnergyCoreRels = struct {
	EnergyCoreBlueprintMechs string
}{
	EnergyCoreBlueprintMechs: "EnergyCoreBlueprintMechs",
}

// blueprintEnergyCoreR is where relationships are stored.
type blueprintEnergyCoreR struct {
	EnergyCoreBlueprintMechs BlueprintMechSlice `boiler:"EnergyCoreBlueprintMechs" boil:"EnergyCoreBlueprintMechs" json:"EnergyCoreBlueprintMechs" toml:"EnergyCoreBlueprintMechs" yaml:"EnergyCoreBlueprintMechs"`
}

// NewStruct creates a new relationship struct
func (*blueprintEnergyCoreR) NewStruct() *blueprintEnergyCoreR {
	return &blueprintEnergyCoreR{}
}

// blueprintEnergyCoreL is where Load methods for each relationship are stored.
type blueprintEnergyCoreL struct{}

var (
	blueprintEnergyCoreAllColumns            = []string{"id", "collection", "label", "size", "capacity", "max_draw_rate", "recharge_rate", "armour", "max_hitpoints", "tier", "created_at"}
	blueprintEnergyCoreColumnsWithoutDefault = []string{"label"}
	blueprintEnergyCoreColumnsWithDefault    = []string{"id", "collection", "size", "capacity", "max_draw_rate", "recharge_rate", "armour", "max_hitpoints", "tier", "created_at"}
	blueprintEnergyCorePrimaryKeyColumns     = []string{"id"}
	blueprintEnergyCoreGeneratedColumns      = []string{}
)

type (
	// BlueprintEnergyCoreSlice is an alias for a slice of pointers to BlueprintEnergyCore.
	// This should almost always be used instead of []BlueprintEnergyCore.
	BlueprintEnergyCoreSlice []*BlueprintEnergyCore
	// BlueprintEnergyCoreHook is the signature for custom BlueprintEnergyCore hook methods
	BlueprintEnergyCoreHook func(boil.Executor, *BlueprintEnergyCore) error

	blueprintEnergyCoreQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blueprintEnergyCoreType                 = reflect.TypeOf(&BlueprintEnergyCore{})
	blueprintEnergyCoreMapping              = queries.MakeStructMapping(blueprintEnergyCoreType)
	blueprintEnergyCorePrimaryKeyMapping, _ = queries.BindMapping(blueprintEnergyCoreType, blueprintEnergyCoreMapping, blueprintEnergyCorePrimaryKeyColumns)
	blueprintEnergyCoreInsertCacheMut       sync.RWMutex
	blueprintEnergyCoreInsertCache          = make(map[string]insertCache)
	blueprintEnergyCoreUpdateCacheMut       sync.RWMutex
	blueprintEnergyCoreUpdateCache          = make(map[string]updateCache)
	blueprintEnergyCoreUpsertCacheMut       sync.RWMutex
	blueprintEnergyCoreUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var blueprintEnergyCoreAfterSelectHooks []BlueprintEnergyCoreHook

var blueprintEnergyCoreBeforeInsertHooks []BlueprintEnergyCoreHook
var blueprintEnergyCoreAfterInsertHooks []BlueprintEnergyCoreHook

var blueprintEnergyCoreBeforeUpdateHooks []BlueprintEnergyCoreHook
var blueprintEnergyCoreAfterUpdateHooks []BlueprintEnergyCoreHook

var blueprintEnergyCoreBeforeDeleteHooks []BlueprintEnergyCoreHook
var blueprintEnergyCoreAfterDeleteHooks []BlueprintEnergyCoreHook

var blueprintEnergyCoreBeforeUpsertHooks []BlueprintEnergyCoreHook
var blueprintEnergyCoreAfterUpsertHooks []BlueprintEnergyCoreHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BlueprintEnergyCore) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintEnergyCoreAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BlueprintEnergyCore) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintEnergyCoreBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BlueprintEnergyCore) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintEnergyCoreAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BlueprintEnergyCore) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintEnergyCoreBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BlueprintEnergyCore) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintEnergyCoreAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BlueprintEnergyCore) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintEnergyCoreBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BlueprintEnergyCore) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintEnergyCoreAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BlueprintEnergyCore) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintEnergyCoreBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BlueprintEnergyCore) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintEnergyCoreAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBlueprintEnergyCoreHook registers your hook function for all future operations.
func AddBlueprintEnergyCoreHook(hookPoint boil.HookPoint, blueprintEnergyCoreHook BlueprintEnergyCoreHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		blueprintEnergyCoreAfterSelectHooks = append(blueprintEnergyCoreAfterSelectHooks, blueprintEnergyCoreHook)
	case boil.BeforeInsertHook:
		blueprintEnergyCoreBeforeInsertHooks = append(blueprintEnergyCoreBeforeInsertHooks, blueprintEnergyCoreHook)
	case boil.AfterInsertHook:
		blueprintEnergyCoreAfterInsertHooks = append(blueprintEnergyCoreAfterInsertHooks, blueprintEnergyCoreHook)
	case boil.BeforeUpdateHook:
		blueprintEnergyCoreBeforeUpdateHooks = append(blueprintEnergyCoreBeforeUpdateHooks, blueprintEnergyCoreHook)
	case boil.AfterUpdateHook:
		blueprintEnergyCoreAfterUpdateHooks = append(blueprintEnergyCoreAfterUpdateHooks, blueprintEnergyCoreHook)
	case boil.BeforeDeleteHook:
		blueprintEnergyCoreBeforeDeleteHooks = append(blueprintEnergyCoreBeforeDeleteHooks, blueprintEnergyCoreHook)
	case boil.AfterDeleteHook:
		blueprintEnergyCoreAfterDeleteHooks = append(blueprintEnergyCoreAfterDeleteHooks, blueprintEnergyCoreHook)
	case boil.BeforeUpsertHook:
		blueprintEnergyCoreBeforeUpsertHooks = append(blueprintEnergyCoreBeforeUpsertHooks, blueprintEnergyCoreHook)
	case boil.AfterUpsertHook:
		blueprintEnergyCoreAfterUpsertHooks = append(blueprintEnergyCoreAfterUpsertHooks, blueprintEnergyCoreHook)
	}
}

// One returns a single blueprintEnergyCore record from the query.
func (q blueprintEnergyCoreQuery) One(exec boil.Executor) (*BlueprintEnergyCore, error) {
	o := &BlueprintEnergyCore{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for blueprint_energy_cores")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BlueprintEnergyCore records from the query.
func (q blueprintEnergyCoreQuery) All(exec boil.Executor) (BlueprintEnergyCoreSlice, error) {
	var o []*BlueprintEnergyCore

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BlueprintEnergyCore slice")
	}

	if len(blueprintEnergyCoreAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BlueprintEnergyCore records in the query.
func (q blueprintEnergyCoreQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count blueprint_energy_cores rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q blueprintEnergyCoreQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if blueprint_energy_cores exists")
	}

	return count > 0, nil
}

// EnergyCoreBlueprintMechs retrieves all the blueprint_mech's BlueprintMechs with an executor via energy_core_id column.
func (o *BlueprintEnergyCore) EnergyCoreBlueprintMechs(mods ...qm.QueryMod) blueprintMechQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"blueprint_mechs\".\"energy_core_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"blueprint_mechs\".\"deleted_at\""),
	)

	query := BlueprintMechs(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_mechs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"blueprint_mechs\".*"})
	}

	return query
}

// LoadEnergyCoreBlueprintMechs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blueprintEnergyCoreL) LoadEnergyCoreBlueprintMechs(e boil.Executor, singular bool, maybeBlueprintEnergyCore interface{}, mods queries.Applicator) error {
	var slice []*BlueprintEnergyCore
	var object *BlueprintEnergyCore

	if singular {
		object = maybeBlueprintEnergyCore.(*BlueprintEnergyCore)
	} else {
		slice = *maybeBlueprintEnergyCore.(*[]*BlueprintEnergyCore)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintEnergyCoreR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintEnergyCoreR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_mechs`),
		qm.WhereIn(`blueprint_mechs.energy_core_id in ?`, args...),
		qmhelper.WhereIsNull(`blueprint_mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blueprint_mechs")
	}

	var resultSlice []*BlueprintMech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blueprint_mechs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blueprint_mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_mechs")
	}

	if len(blueprintMechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EnergyCoreBlueprintMechs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blueprintMechR{}
			}
			foreign.R.EnergyCore = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.EnergyCoreID) {
				local.R.EnergyCoreBlueprintMechs = append(local.R.EnergyCoreBlueprintMechs, foreign)
				if foreign.R == nil {
					foreign.R = &blueprintMechR{}
				}
				foreign.R.EnergyCore = local
				break
			}
		}
	}

	return nil
}

// AddEnergyCoreBlueprintMechs adds the given related objects to the existing relationships
// of the blueprint_energy_core, optionally inserting them as new records.
// Appends related to o.R.EnergyCoreBlueprintMechs.
// Sets related.R.EnergyCore appropriately.
func (o *BlueprintEnergyCore) AddEnergyCoreBlueprintMechs(exec boil.Executor, insert bool, related ...*BlueprintMech) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EnergyCoreID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"blueprint_mechs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"energy_core_id"}),
				strmangle.WhereClause("\"", "\"", 2, blueprintMechPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EnergyCoreID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &blueprintEnergyCoreR{
			EnergyCoreBlueprintMechs: related,
		}
	} else {
		o.R.EnergyCoreBlueprintMechs = append(o.R.EnergyCoreBlueprintMechs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blueprintMechR{
				EnergyCore: o,
			}
		} else {
			rel.R.EnergyCore = o
		}
	}
	return nil
}

// SetEnergyCoreBlueprintMechs removes all previously related items of the
// blueprint_energy_core replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.EnergyCore's EnergyCoreBlueprintMechs accordingly.
// Replaces o.R.EnergyCoreBlueprintMechs with related.
// Sets related.R.EnergyCore's EnergyCoreBlueprintMechs accordingly.
func (o *BlueprintEnergyCore) SetEnergyCoreBlueprintMechs(exec boil.Executor, insert bool, related ...*BlueprintMech) error {
	query := "update \"blueprint_mechs\" set \"energy_core_id\" = null where \"energy_core_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.EnergyCoreBlueprintMechs {
			queries.SetScanner(&rel.EnergyCoreID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.EnergyCore = nil
		}

		o.R.EnergyCoreBlueprintMechs = nil
	}
	return o.AddEnergyCoreBlueprintMechs(exec, insert, related...)
}

// RemoveEnergyCoreBlueprintMechs relationships from objects passed in.
// Removes related items from R.EnergyCoreBlueprintMechs (uses pointer comparison, removal does not keep order)
// Sets related.R.EnergyCore.
func (o *BlueprintEnergyCore) RemoveEnergyCoreBlueprintMechs(exec boil.Executor, related ...*BlueprintMech) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EnergyCoreID, nil)
		if rel.R != nil {
			rel.R.EnergyCore = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("energy_core_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.EnergyCoreBlueprintMechs {
			if rel != ri {
				continue
			}

			ln := len(o.R.EnergyCoreBlueprintMechs)
			if ln > 1 && i < ln-1 {
				o.R.EnergyCoreBlueprintMechs[i] = o.R.EnergyCoreBlueprintMechs[ln-1]
			}
			o.R.EnergyCoreBlueprintMechs = o.R.EnergyCoreBlueprintMechs[:ln-1]
			break
		}
	}

	return nil
}

// BlueprintEnergyCores retrieves all the records using an executor.
func BlueprintEnergyCores(mods ...qm.QueryMod) blueprintEnergyCoreQuery {
	mods = append(mods, qm.From("\"blueprint_energy_cores\""))
	return blueprintEnergyCoreQuery{NewQuery(mods...)}
}

// FindBlueprintEnergyCore retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlueprintEnergyCore(exec boil.Executor, iD string, selectCols ...string) (*BlueprintEnergyCore, error) {
	blueprintEnergyCoreObj := &BlueprintEnergyCore{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"blueprint_energy_cores\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, blueprintEnergyCoreObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from blueprint_energy_cores")
	}

	if err = blueprintEnergyCoreObj.doAfterSelectHooks(exec); err != nil {
		return blueprintEnergyCoreObj, err
	}

	return blueprintEnergyCoreObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlueprintEnergyCore) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_energy_cores provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintEnergyCoreColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blueprintEnergyCoreInsertCacheMut.RLock()
	cache, cached := blueprintEnergyCoreInsertCache[key]
	blueprintEnergyCoreInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blueprintEnergyCoreAllColumns,
			blueprintEnergyCoreColumnsWithDefault,
			blueprintEnergyCoreColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blueprintEnergyCoreType, blueprintEnergyCoreMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blueprintEnergyCoreType, blueprintEnergyCoreMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"blueprint_energy_cores\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"blueprint_energy_cores\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into blueprint_energy_cores")
	}

	if !cached {
		blueprintEnergyCoreInsertCacheMut.Lock()
		blueprintEnergyCoreInsertCache[key] = cache
		blueprintEnergyCoreInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BlueprintEnergyCore.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlueprintEnergyCore) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	blueprintEnergyCoreUpdateCacheMut.RLock()
	cache, cached := blueprintEnergyCoreUpdateCache[key]
	blueprintEnergyCoreUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blueprintEnergyCoreAllColumns,
			blueprintEnergyCorePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update blueprint_energy_cores, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"blueprint_energy_cores\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, blueprintEnergyCorePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blueprintEnergyCoreType, blueprintEnergyCoreMapping, append(wl, blueprintEnergyCorePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update blueprint_energy_cores row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for blueprint_energy_cores")
	}

	if !cached {
		blueprintEnergyCoreUpdateCacheMut.Lock()
		blueprintEnergyCoreUpdateCache[key] = cache
		blueprintEnergyCoreUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q blueprintEnergyCoreQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for blueprint_energy_cores")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for blueprint_energy_cores")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlueprintEnergyCoreSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintEnergyCorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"blueprint_energy_cores\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, blueprintEnergyCorePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in blueprintEnergyCore slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all blueprintEnergyCore")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlueprintEnergyCore) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_energy_cores provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintEnergyCoreColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blueprintEnergyCoreUpsertCacheMut.RLock()
	cache, cached := blueprintEnergyCoreUpsertCache[key]
	blueprintEnergyCoreUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blueprintEnergyCoreAllColumns,
			blueprintEnergyCoreColumnsWithDefault,
			blueprintEnergyCoreColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			blueprintEnergyCoreAllColumns,
			blueprintEnergyCorePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert blueprint_energy_cores, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(blueprintEnergyCorePrimaryKeyColumns))
			copy(conflict, blueprintEnergyCorePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"blueprint_energy_cores\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(blueprintEnergyCoreType, blueprintEnergyCoreMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blueprintEnergyCoreType, blueprintEnergyCoreMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert blueprint_energy_cores")
	}

	if !cached {
		blueprintEnergyCoreUpsertCacheMut.Lock()
		blueprintEnergyCoreUpsertCache[key] = cache
		blueprintEnergyCoreUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BlueprintEnergyCore record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlueprintEnergyCore) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BlueprintEnergyCore provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blueprintEnergyCorePrimaryKeyMapping)
	sql := "DELETE FROM \"blueprint_energy_cores\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from blueprint_energy_cores")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for blueprint_energy_cores")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q blueprintEnergyCoreQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no blueprintEnergyCoreQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprint_energy_cores")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_energy_cores")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlueprintEnergyCoreSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(blueprintEnergyCoreBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintEnergyCorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"blueprint_energy_cores\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintEnergyCorePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprintEnergyCore slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_energy_cores")
	}

	if len(blueprintEnergyCoreAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlueprintEnergyCore) Reload(exec boil.Executor) error {
	ret, err := FindBlueprintEnergyCore(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlueprintEnergyCoreSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlueprintEnergyCoreSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintEnergyCorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"blueprint_energy_cores\".* FROM \"blueprint_energy_cores\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintEnergyCorePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BlueprintEnergyCoreSlice")
	}

	*o = slice

	return nil
}

// BlueprintEnergyCoreExists checks if the BlueprintEnergyCore row exists.
func BlueprintEnergyCoreExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"blueprint_energy_cores\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if blueprint_energy_cores exists")
	}

	return exists, nil
}
