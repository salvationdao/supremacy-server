// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ModActionAudit is an object representing the database table.
type ModActionAudit struct {
	ID          string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	ActionType  string      `boiler:"action_type" boil:"action_type" json:"action_type" toml:"action_type" yaml:"action_type"`
	ModID       string      `boiler:"mod_id" boil:"mod_id" json:"mod_id" toml:"mod_id" yaml:"mod_id"`
	Reason      string      `boiler:"reason" boil:"reason" json:"reason" toml:"reason" yaml:"reason"`
	PlayerBanID null.String `boiler:"player_ban_id" boil:"player_ban_id" json:"player_ban_id,omitempty" toml:"player_ban_id" yaml:"player_ban_id,omitempty"`
	CreatedAt   time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *modActionAuditR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L modActionAuditL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ModActionAuditColumns = struct {
	ID          string
	ActionType  string
	ModID       string
	Reason      string
	PlayerBanID string
	CreatedAt   string
}{
	ID:          "id",
	ActionType:  "action_type",
	ModID:       "mod_id",
	Reason:      "reason",
	PlayerBanID: "player_ban_id",
	CreatedAt:   "created_at",
}

var ModActionAuditTableColumns = struct {
	ID          string
	ActionType  string
	ModID       string
	Reason      string
	PlayerBanID string
	CreatedAt   string
}{
	ID:          "mod_action_audit.id",
	ActionType:  "mod_action_audit.action_type",
	ModID:       "mod_action_audit.mod_id",
	Reason:      "mod_action_audit.reason",
	PlayerBanID: "mod_action_audit.player_ban_id",
	CreatedAt:   "mod_action_audit.created_at",
}

// Generated where

var ModActionAuditWhere = struct {
	ID          whereHelperstring
	ActionType  whereHelperstring
	ModID       whereHelperstring
	Reason      whereHelperstring
	PlayerBanID whereHelpernull_String
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperstring{field: "\"mod_action_audit\".\"id\""},
	ActionType:  whereHelperstring{field: "\"mod_action_audit\".\"action_type\""},
	ModID:       whereHelperstring{field: "\"mod_action_audit\".\"mod_id\""},
	Reason:      whereHelperstring{field: "\"mod_action_audit\".\"reason\""},
	PlayerBanID: whereHelpernull_String{field: "\"mod_action_audit\".\"player_ban_id\""},
	CreatedAt:   whereHelpertime_Time{field: "\"mod_action_audit\".\"created_at\""},
}

// ModActionAuditRels is where relationship names are stored.
var ModActionAuditRels = struct {
	Mod       string
	PlayerBan string
}{
	Mod:       "Mod",
	PlayerBan: "PlayerBan",
}

// modActionAuditR is where relationships are stored.
type modActionAuditR struct {
	Mod       *Player    `boiler:"Mod" boil:"Mod" json:"Mod" toml:"Mod" yaml:"Mod"`
	PlayerBan *PlayerBan `boiler:"PlayerBan" boil:"PlayerBan" json:"PlayerBan" toml:"PlayerBan" yaml:"PlayerBan"`
}

// NewStruct creates a new relationship struct
func (*modActionAuditR) NewStruct() *modActionAuditR {
	return &modActionAuditR{}
}

// modActionAuditL is where Load methods for each relationship are stored.
type modActionAuditL struct{}

var (
	modActionAuditAllColumns            = []string{"id", "action_type", "mod_id", "reason", "player_ban_id", "created_at"}
	modActionAuditColumnsWithoutDefault = []string{"action_type", "mod_id", "reason"}
	modActionAuditColumnsWithDefault    = []string{"id", "player_ban_id", "created_at"}
	modActionAuditPrimaryKeyColumns     = []string{"id"}
	modActionAuditGeneratedColumns      = []string{}
)

type (
	// ModActionAuditSlice is an alias for a slice of pointers to ModActionAudit.
	// This should almost always be used instead of []ModActionAudit.
	ModActionAuditSlice []*ModActionAudit
	// ModActionAuditHook is the signature for custom ModActionAudit hook methods
	ModActionAuditHook func(boil.Executor, *ModActionAudit) error

	modActionAuditQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	modActionAuditType                 = reflect.TypeOf(&ModActionAudit{})
	modActionAuditMapping              = queries.MakeStructMapping(modActionAuditType)
	modActionAuditPrimaryKeyMapping, _ = queries.BindMapping(modActionAuditType, modActionAuditMapping, modActionAuditPrimaryKeyColumns)
	modActionAuditInsertCacheMut       sync.RWMutex
	modActionAuditInsertCache          = make(map[string]insertCache)
	modActionAuditUpdateCacheMut       sync.RWMutex
	modActionAuditUpdateCache          = make(map[string]updateCache)
	modActionAuditUpsertCacheMut       sync.RWMutex
	modActionAuditUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var modActionAuditAfterSelectHooks []ModActionAuditHook

var modActionAuditBeforeInsertHooks []ModActionAuditHook
var modActionAuditAfterInsertHooks []ModActionAuditHook

var modActionAuditBeforeUpdateHooks []ModActionAuditHook
var modActionAuditAfterUpdateHooks []ModActionAuditHook

var modActionAuditBeforeDeleteHooks []ModActionAuditHook
var modActionAuditAfterDeleteHooks []ModActionAuditHook

var modActionAuditBeforeUpsertHooks []ModActionAuditHook
var modActionAuditAfterUpsertHooks []ModActionAuditHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ModActionAudit) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range modActionAuditAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ModActionAudit) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range modActionAuditBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ModActionAudit) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range modActionAuditAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ModActionAudit) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range modActionAuditBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ModActionAudit) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range modActionAuditAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ModActionAudit) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range modActionAuditBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ModActionAudit) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range modActionAuditAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ModActionAudit) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range modActionAuditBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ModActionAudit) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range modActionAuditAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddModActionAuditHook registers your hook function for all future operations.
func AddModActionAuditHook(hookPoint boil.HookPoint, modActionAuditHook ModActionAuditHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		modActionAuditAfterSelectHooks = append(modActionAuditAfterSelectHooks, modActionAuditHook)
	case boil.BeforeInsertHook:
		modActionAuditBeforeInsertHooks = append(modActionAuditBeforeInsertHooks, modActionAuditHook)
	case boil.AfterInsertHook:
		modActionAuditAfterInsertHooks = append(modActionAuditAfterInsertHooks, modActionAuditHook)
	case boil.BeforeUpdateHook:
		modActionAuditBeforeUpdateHooks = append(modActionAuditBeforeUpdateHooks, modActionAuditHook)
	case boil.AfterUpdateHook:
		modActionAuditAfterUpdateHooks = append(modActionAuditAfterUpdateHooks, modActionAuditHook)
	case boil.BeforeDeleteHook:
		modActionAuditBeforeDeleteHooks = append(modActionAuditBeforeDeleteHooks, modActionAuditHook)
	case boil.AfterDeleteHook:
		modActionAuditAfterDeleteHooks = append(modActionAuditAfterDeleteHooks, modActionAuditHook)
	case boil.BeforeUpsertHook:
		modActionAuditBeforeUpsertHooks = append(modActionAuditBeforeUpsertHooks, modActionAuditHook)
	case boil.AfterUpsertHook:
		modActionAuditAfterUpsertHooks = append(modActionAuditAfterUpsertHooks, modActionAuditHook)
	}
}

// One returns a single modActionAudit record from the query.
func (q modActionAuditQuery) One(exec boil.Executor) (*ModActionAudit, error) {
	o := &ModActionAudit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for mod_action_audit")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ModActionAudit records from the query.
func (q modActionAuditQuery) All(exec boil.Executor) (ModActionAuditSlice, error) {
	var o []*ModActionAudit

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to ModActionAudit slice")
	}

	if len(modActionAuditAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ModActionAudit records in the query.
func (q modActionAuditQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count mod_action_audit rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q modActionAuditQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if mod_action_audit exists")
	}

	return count > 0, nil
}

// Mod pointed to by the foreign key.
func (o *ModActionAudit) Mod(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ModID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// PlayerBan pointed to by the foreign key.
func (o *ModActionAudit) PlayerBan(mods ...qm.QueryMod) playerBanQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerBanID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := PlayerBans(queryMods...)
	queries.SetFrom(query.Query, "\"player_bans\"")

	return query
}

// LoadMod allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (modActionAuditL) LoadMod(e boil.Executor, singular bool, maybeModActionAudit interface{}, mods queries.Applicator) error {
	var slice []*ModActionAudit
	var object *ModActionAudit

	if singular {
		object = maybeModActionAudit.(*ModActionAudit)
	} else {
		slice = *maybeModActionAudit.(*[]*ModActionAudit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &modActionAuditR{}
		}
		args = append(args, object.ModID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &modActionAuditR{}
			}

			for _, a := range args {
				if a == obj.ModID {
					continue Outer
				}
			}

			args = append(args, obj.ModID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(modActionAuditAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Mod = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.ModModActionAudits = append(foreign.R.ModModActionAudits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ModID == foreign.ID {
				local.R.Mod = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.ModModActionAudits = append(foreign.R.ModModActionAudits, local)
				break
			}
		}
	}

	return nil
}

// LoadPlayerBan allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (modActionAuditL) LoadPlayerBan(e boil.Executor, singular bool, maybeModActionAudit interface{}, mods queries.Applicator) error {
	var slice []*ModActionAudit
	var object *ModActionAudit

	if singular {
		object = maybeModActionAudit.(*ModActionAudit)
	} else {
		slice = *maybeModActionAudit.(*[]*ModActionAudit)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &modActionAuditR{}
		}
		if !queries.IsNil(object.PlayerBanID) {
			args = append(args, object.PlayerBanID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &modActionAuditR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PlayerBanID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PlayerBanID) {
				args = append(args, obj.PlayerBanID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`player_bans`),
		qm.WhereIn(`player_bans.id in ?`, args...),
		qmhelper.WhereIsNull(`player_bans.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PlayerBan")
	}

	var resultSlice []*PlayerBan
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PlayerBan")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for player_bans")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for player_bans")
	}

	if len(modActionAuditAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PlayerBan = foreign
		if foreign.R == nil {
			foreign.R = &playerBanR{}
		}
		foreign.R.ModActionAudits = append(foreign.R.ModActionAudits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PlayerBanID, foreign.ID) {
				local.R.PlayerBan = foreign
				if foreign.R == nil {
					foreign.R = &playerBanR{}
				}
				foreign.R.ModActionAudits = append(foreign.R.ModActionAudits, local)
				break
			}
		}
	}

	return nil
}

// SetMod of the modActionAudit to the related item.
// Sets o.R.Mod to related.
// Adds o to related.R.ModModActionAudits.
func (o *ModActionAudit) SetMod(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mod_action_audit\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mod_id"}),
		strmangle.WhereClause("\"", "\"", 2, modActionAuditPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ModID = related.ID
	if o.R == nil {
		o.R = &modActionAuditR{
			Mod: related,
		}
	} else {
		o.R.Mod = related
	}

	if related.R == nil {
		related.R = &playerR{
			ModModActionAudits: ModActionAuditSlice{o},
		}
	} else {
		related.R.ModModActionAudits = append(related.R.ModModActionAudits, o)
	}

	return nil
}

// SetPlayerBan of the modActionAudit to the related item.
// Sets o.R.PlayerBan to related.
// Adds o to related.R.ModActionAudits.
func (o *ModActionAudit) SetPlayerBan(exec boil.Executor, insert bool, related *PlayerBan) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mod_action_audit\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_ban_id"}),
		strmangle.WhereClause("\"", "\"", 2, modActionAuditPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PlayerBanID, related.ID)
	if o.R == nil {
		o.R = &modActionAuditR{
			PlayerBan: related,
		}
	} else {
		o.R.PlayerBan = related
	}

	if related.R == nil {
		related.R = &playerBanR{
			ModActionAudits: ModActionAuditSlice{o},
		}
	} else {
		related.R.ModActionAudits = append(related.R.ModActionAudits, o)
	}

	return nil
}

// RemovePlayerBan relationship.
// Sets o.R.PlayerBan to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *ModActionAudit) RemovePlayerBan(exec boil.Executor, related *PlayerBan) error {
	var err error

	queries.SetScanner(&o.PlayerBanID, nil)
	if _, err = o.Update(exec, boil.Whitelist("player_ban_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PlayerBan = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ModActionAudits {
		if queries.Equal(o.PlayerBanID, ri.PlayerBanID) {
			continue
		}

		ln := len(related.R.ModActionAudits)
		if ln > 1 && i < ln-1 {
			related.R.ModActionAudits[i] = related.R.ModActionAudits[ln-1]
		}
		related.R.ModActionAudits = related.R.ModActionAudits[:ln-1]
		break
	}
	return nil
}

// ModActionAudits retrieves all the records using an executor.
func ModActionAudits(mods ...qm.QueryMod) modActionAuditQuery {
	mods = append(mods, qm.From("\"mod_action_audit\""))
	return modActionAuditQuery{NewQuery(mods...)}
}

// FindModActionAudit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindModActionAudit(exec boil.Executor, iD string, selectCols ...string) (*ModActionAudit, error) {
	modActionAuditObj := &ModActionAudit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mod_action_audit\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, modActionAuditObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from mod_action_audit")
	}

	if err = modActionAuditObj.doAfterSelectHooks(exec); err != nil {
		return modActionAuditObj, err
	}

	return modActionAuditObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ModActionAudit) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mod_action_audit provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(modActionAuditColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	modActionAuditInsertCacheMut.RLock()
	cache, cached := modActionAuditInsertCache[key]
	modActionAuditInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			modActionAuditAllColumns,
			modActionAuditColumnsWithDefault,
			modActionAuditColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(modActionAuditType, modActionAuditMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(modActionAuditType, modActionAuditMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mod_action_audit\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mod_action_audit\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into mod_action_audit")
	}

	if !cached {
		modActionAuditInsertCacheMut.Lock()
		modActionAuditInsertCache[key] = cache
		modActionAuditInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the ModActionAudit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ModActionAudit) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	modActionAuditUpdateCacheMut.RLock()
	cache, cached := modActionAuditUpdateCache[key]
	modActionAuditUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			modActionAuditAllColumns,
			modActionAuditPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update mod_action_audit, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mod_action_audit\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, modActionAuditPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(modActionAuditType, modActionAuditMapping, append(wl, modActionAuditPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update mod_action_audit row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for mod_action_audit")
	}

	if !cached {
		modActionAuditUpdateCacheMut.Lock()
		modActionAuditUpdateCache[key] = cache
		modActionAuditUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q modActionAuditQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for mod_action_audit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for mod_action_audit")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ModActionAuditSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), modActionAuditPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mod_action_audit\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, modActionAuditPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in modActionAudit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all modActionAudit")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ModActionAudit) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mod_action_audit provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(modActionAuditColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	modActionAuditUpsertCacheMut.RLock()
	cache, cached := modActionAuditUpsertCache[key]
	modActionAuditUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			modActionAuditAllColumns,
			modActionAuditColumnsWithDefault,
			modActionAuditColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			modActionAuditAllColumns,
			modActionAuditPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert mod_action_audit, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(modActionAuditPrimaryKeyColumns))
			copy(conflict, modActionAuditPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mod_action_audit\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(modActionAuditType, modActionAuditMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(modActionAuditType, modActionAuditMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert mod_action_audit")
	}

	if !cached {
		modActionAuditUpsertCacheMut.Lock()
		modActionAuditUpsertCache[key] = cache
		modActionAuditUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single ModActionAudit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ModActionAudit) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no ModActionAudit provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), modActionAuditPrimaryKeyMapping)
	sql := "DELETE FROM \"mod_action_audit\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from mod_action_audit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for mod_action_audit")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q modActionAuditQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no modActionAuditQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mod_action_audit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mod_action_audit")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ModActionAuditSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(modActionAuditBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), modActionAuditPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"mod_action_audit\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, modActionAuditPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from modActionAudit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mod_action_audit")
	}

	if len(modActionAuditAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ModActionAudit) Reload(exec boil.Executor) error {
	ret, err := FindModActionAudit(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ModActionAuditSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ModActionAuditSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), modActionAuditPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mod_action_audit\".* FROM \"mod_action_audit\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, modActionAuditPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in ModActionAuditSlice")
	}

	*o = slice

	return nil
}

// ModActionAuditExists checks if the ModActionAudit row exists.
func ModActionAuditExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mod_action_audit\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if mod_action_audit exists")
	}

	return exists, nil
}
