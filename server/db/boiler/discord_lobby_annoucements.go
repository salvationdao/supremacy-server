// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DiscordLobbyAnnoucement is an object representing the database table.
type DiscordLobbyAnnoucement struct {
	ID            string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	MessageID     string    `boiler:"message_id" boil:"message_id" json:"message_id" toml:"message_id" yaml:"message_id"`
	BattleLobbyID string    `boiler:"battle_lobby_id" boil:"battle_lobby_id" json:"battle_lobby_id" toml:"battle_lobby_id" yaml:"battle_lobby_id"`
	CreatedAt     time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *discordLobbyAnnoucementR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L discordLobbyAnnoucementL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DiscordLobbyAnnoucementColumns = struct {
	ID            string
	MessageID     string
	BattleLobbyID string
	CreatedAt     string
}{
	ID:            "id",
	MessageID:     "message_id",
	BattleLobbyID: "battle_lobby_id",
	CreatedAt:     "created_at",
}

var DiscordLobbyAnnoucementTableColumns = struct {
	ID            string
	MessageID     string
	BattleLobbyID string
	CreatedAt     string
}{
	ID:            "discord_lobby_annoucements.id",
	MessageID:     "discord_lobby_annoucements.message_id",
	BattleLobbyID: "discord_lobby_annoucements.battle_lobby_id",
	CreatedAt:     "discord_lobby_annoucements.created_at",
}

// Generated where

var DiscordLobbyAnnoucementWhere = struct {
	ID            whereHelperstring
	MessageID     whereHelperstring
	BattleLobbyID whereHelperstring
	CreatedAt     whereHelpertime_Time
}{
	ID:            whereHelperstring{field: "\"discord_lobby_annoucements\".\"id\""},
	MessageID:     whereHelperstring{field: "\"discord_lobby_annoucements\".\"message_id\""},
	BattleLobbyID: whereHelperstring{field: "\"discord_lobby_annoucements\".\"battle_lobby_id\""},
	CreatedAt:     whereHelpertime_Time{field: "\"discord_lobby_annoucements\".\"created_at\""},
}

// DiscordLobbyAnnoucementRels is where relationship names are stored.
var DiscordLobbyAnnoucementRels = struct {
	BattleLobby           string
	DiscordLobbyFollowers string
}{
	BattleLobby:           "BattleLobby",
	DiscordLobbyFollowers: "DiscordLobbyFollowers",
}

// discordLobbyAnnoucementR is where relationships are stored.
type discordLobbyAnnoucementR struct {
	BattleLobby           *BattleLobby              `boiler:"BattleLobby" boil:"BattleLobby" json:"BattleLobby" toml:"BattleLobby" yaml:"BattleLobby"`
	DiscordLobbyFollowers DiscordLobbyFollowerSlice `boiler:"DiscordLobbyFollowers" boil:"DiscordLobbyFollowers" json:"DiscordLobbyFollowers" toml:"DiscordLobbyFollowers" yaml:"DiscordLobbyFollowers"`
}

// NewStruct creates a new relationship struct
func (*discordLobbyAnnoucementR) NewStruct() *discordLobbyAnnoucementR {
	return &discordLobbyAnnoucementR{}
}

// discordLobbyAnnoucementL is where Load methods for each relationship are stored.
type discordLobbyAnnoucementL struct{}

var (
	discordLobbyAnnoucementAllColumns            = []string{"id", "message_id", "battle_lobby_id", "created_at"}
	discordLobbyAnnoucementColumnsWithoutDefault = []string{"message_id", "battle_lobby_id"}
	discordLobbyAnnoucementColumnsWithDefault    = []string{"id", "created_at"}
	discordLobbyAnnoucementPrimaryKeyColumns     = []string{"id"}
	discordLobbyAnnoucementGeneratedColumns      = []string{}
)

type (
	// DiscordLobbyAnnoucementSlice is an alias for a slice of pointers to DiscordLobbyAnnoucement.
	// This should almost always be used instead of []DiscordLobbyAnnoucement.
	DiscordLobbyAnnoucementSlice []*DiscordLobbyAnnoucement
	// DiscordLobbyAnnoucementHook is the signature for custom DiscordLobbyAnnoucement hook methods
	DiscordLobbyAnnoucementHook func(boil.Executor, *DiscordLobbyAnnoucement) error

	discordLobbyAnnoucementQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	discordLobbyAnnoucementType                 = reflect.TypeOf(&DiscordLobbyAnnoucement{})
	discordLobbyAnnoucementMapping              = queries.MakeStructMapping(discordLobbyAnnoucementType)
	discordLobbyAnnoucementPrimaryKeyMapping, _ = queries.BindMapping(discordLobbyAnnoucementType, discordLobbyAnnoucementMapping, discordLobbyAnnoucementPrimaryKeyColumns)
	discordLobbyAnnoucementInsertCacheMut       sync.RWMutex
	discordLobbyAnnoucementInsertCache          = make(map[string]insertCache)
	discordLobbyAnnoucementUpdateCacheMut       sync.RWMutex
	discordLobbyAnnoucementUpdateCache          = make(map[string]updateCache)
	discordLobbyAnnoucementUpsertCacheMut       sync.RWMutex
	discordLobbyAnnoucementUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var discordLobbyAnnoucementAfterSelectHooks []DiscordLobbyAnnoucementHook

var discordLobbyAnnoucementBeforeInsertHooks []DiscordLobbyAnnoucementHook
var discordLobbyAnnoucementAfterInsertHooks []DiscordLobbyAnnoucementHook

var discordLobbyAnnoucementBeforeUpdateHooks []DiscordLobbyAnnoucementHook
var discordLobbyAnnoucementAfterUpdateHooks []DiscordLobbyAnnoucementHook

var discordLobbyAnnoucementBeforeDeleteHooks []DiscordLobbyAnnoucementHook
var discordLobbyAnnoucementAfterDeleteHooks []DiscordLobbyAnnoucementHook

var discordLobbyAnnoucementBeforeUpsertHooks []DiscordLobbyAnnoucementHook
var discordLobbyAnnoucementAfterUpsertHooks []DiscordLobbyAnnoucementHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DiscordLobbyAnnoucement) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range discordLobbyAnnoucementAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DiscordLobbyAnnoucement) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range discordLobbyAnnoucementBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DiscordLobbyAnnoucement) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range discordLobbyAnnoucementAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DiscordLobbyAnnoucement) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range discordLobbyAnnoucementBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DiscordLobbyAnnoucement) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range discordLobbyAnnoucementAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DiscordLobbyAnnoucement) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range discordLobbyAnnoucementBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DiscordLobbyAnnoucement) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range discordLobbyAnnoucementAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DiscordLobbyAnnoucement) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range discordLobbyAnnoucementBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DiscordLobbyAnnoucement) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range discordLobbyAnnoucementAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDiscordLobbyAnnoucementHook registers your hook function for all future operations.
func AddDiscordLobbyAnnoucementHook(hookPoint boil.HookPoint, discordLobbyAnnoucementHook DiscordLobbyAnnoucementHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		discordLobbyAnnoucementAfterSelectHooks = append(discordLobbyAnnoucementAfterSelectHooks, discordLobbyAnnoucementHook)
	case boil.BeforeInsertHook:
		discordLobbyAnnoucementBeforeInsertHooks = append(discordLobbyAnnoucementBeforeInsertHooks, discordLobbyAnnoucementHook)
	case boil.AfterInsertHook:
		discordLobbyAnnoucementAfterInsertHooks = append(discordLobbyAnnoucementAfterInsertHooks, discordLobbyAnnoucementHook)
	case boil.BeforeUpdateHook:
		discordLobbyAnnoucementBeforeUpdateHooks = append(discordLobbyAnnoucementBeforeUpdateHooks, discordLobbyAnnoucementHook)
	case boil.AfterUpdateHook:
		discordLobbyAnnoucementAfterUpdateHooks = append(discordLobbyAnnoucementAfterUpdateHooks, discordLobbyAnnoucementHook)
	case boil.BeforeDeleteHook:
		discordLobbyAnnoucementBeforeDeleteHooks = append(discordLobbyAnnoucementBeforeDeleteHooks, discordLobbyAnnoucementHook)
	case boil.AfterDeleteHook:
		discordLobbyAnnoucementAfterDeleteHooks = append(discordLobbyAnnoucementAfterDeleteHooks, discordLobbyAnnoucementHook)
	case boil.BeforeUpsertHook:
		discordLobbyAnnoucementBeforeUpsertHooks = append(discordLobbyAnnoucementBeforeUpsertHooks, discordLobbyAnnoucementHook)
	case boil.AfterUpsertHook:
		discordLobbyAnnoucementAfterUpsertHooks = append(discordLobbyAnnoucementAfterUpsertHooks, discordLobbyAnnoucementHook)
	}
}

// One returns a single discordLobbyAnnoucement record from the query.
func (q discordLobbyAnnoucementQuery) One(exec boil.Executor) (*DiscordLobbyAnnoucement, error) {
	o := &DiscordLobbyAnnoucement{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for discord_lobby_annoucements")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DiscordLobbyAnnoucement records from the query.
func (q discordLobbyAnnoucementQuery) All(exec boil.Executor) (DiscordLobbyAnnoucementSlice, error) {
	var o []*DiscordLobbyAnnoucement

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to DiscordLobbyAnnoucement slice")
	}

	if len(discordLobbyAnnoucementAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DiscordLobbyAnnoucement records in the query.
func (q discordLobbyAnnoucementQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count discord_lobby_annoucements rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q discordLobbyAnnoucementQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if discord_lobby_annoucements exists")
	}

	return count > 0, nil
}

// BattleLobby pointed to by the foreign key.
func (o *DiscordLobbyAnnoucement) BattleLobby(mods ...qm.QueryMod) battleLobbyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BattleLobbyID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := BattleLobbies(queryMods...)
	queries.SetFrom(query.Query, "\"battle_lobbies\"")

	return query
}

// DiscordLobbyFollowers retrieves all the discord_lobby_follower's DiscordLobbyFollowers with an executor.
func (o *DiscordLobbyAnnoucement) DiscordLobbyFollowers(mods ...qm.QueryMod) discordLobbyFollowerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"discord_lobby_followers\".\"discord_lobby_annoucements_id\"=?", o.ID),
	)

	query := DiscordLobbyFollowers(queryMods...)
	queries.SetFrom(query.Query, "\"discord_lobby_followers\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"discord_lobby_followers\".*"})
	}

	return query
}

// LoadBattleLobby allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (discordLobbyAnnoucementL) LoadBattleLobby(e boil.Executor, singular bool, maybeDiscordLobbyAnnoucement interface{}, mods queries.Applicator) error {
	var slice []*DiscordLobbyAnnoucement
	var object *DiscordLobbyAnnoucement

	if singular {
		object = maybeDiscordLobbyAnnoucement.(*DiscordLobbyAnnoucement)
	} else {
		slice = *maybeDiscordLobbyAnnoucement.(*[]*DiscordLobbyAnnoucement)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &discordLobbyAnnoucementR{}
		}
		args = append(args, object.BattleLobbyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &discordLobbyAnnoucementR{}
			}

			for _, a := range args {
				if a == obj.BattleLobbyID {
					continue Outer
				}
			}

			args = append(args, obj.BattleLobbyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_lobbies`),
		qm.WhereIn(`battle_lobbies.id in ?`, args...),
		qmhelper.WhereIsNull(`battle_lobbies.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BattleLobby")
	}

	var resultSlice []*BattleLobby
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BattleLobby")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battle_lobbies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_lobbies")
	}

	if len(discordLobbyAnnoucementAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BattleLobby = foreign
		if foreign.R == nil {
			foreign.R = &battleLobbyR{}
		}
		foreign.R.DiscordLobbyAnnoucements = append(foreign.R.DiscordLobbyAnnoucements, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BattleLobbyID == foreign.ID {
				local.R.BattleLobby = foreign
				if foreign.R == nil {
					foreign.R = &battleLobbyR{}
				}
				foreign.R.DiscordLobbyAnnoucements = append(foreign.R.DiscordLobbyAnnoucements, local)
				break
			}
		}
	}

	return nil
}

// LoadDiscordLobbyFollowers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (discordLobbyAnnoucementL) LoadDiscordLobbyFollowers(e boil.Executor, singular bool, maybeDiscordLobbyAnnoucement interface{}, mods queries.Applicator) error {
	var slice []*DiscordLobbyAnnoucement
	var object *DiscordLobbyAnnoucement

	if singular {
		object = maybeDiscordLobbyAnnoucement.(*DiscordLobbyAnnoucement)
	} else {
		slice = *maybeDiscordLobbyAnnoucement.(*[]*DiscordLobbyAnnoucement)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &discordLobbyAnnoucementR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &discordLobbyAnnoucementR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`discord_lobby_followers`),
		qm.WhereIn(`discord_lobby_followers.discord_lobby_annoucements_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load discord_lobby_followers")
	}

	var resultSlice []*DiscordLobbyFollower
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice discord_lobby_followers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on discord_lobby_followers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for discord_lobby_followers")
	}

	if len(discordLobbyFollowerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DiscordLobbyFollowers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &discordLobbyFollowerR{}
			}
			foreign.R.DiscordLobbyAnnoucement = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DiscordLobbyAnnoucementsID {
				local.R.DiscordLobbyFollowers = append(local.R.DiscordLobbyFollowers, foreign)
				if foreign.R == nil {
					foreign.R = &discordLobbyFollowerR{}
				}
				foreign.R.DiscordLobbyAnnoucement = local
				break
			}
		}
	}

	return nil
}

// SetBattleLobby of the discordLobbyAnnoucement to the related item.
// Sets o.R.BattleLobby to related.
// Adds o to related.R.DiscordLobbyAnnoucements.
func (o *DiscordLobbyAnnoucement) SetBattleLobby(exec boil.Executor, insert bool, related *BattleLobby) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"discord_lobby_annoucements\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"battle_lobby_id"}),
		strmangle.WhereClause("\"", "\"", 2, discordLobbyAnnoucementPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BattleLobbyID = related.ID
	if o.R == nil {
		o.R = &discordLobbyAnnoucementR{
			BattleLobby: related,
		}
	} else {
		o.R.BattleLobby = related
	}

	if related.R == nil {
		related.R = &battleLobbyR{
			DiscordLobbyAnnoucements: DiscordLobbyAnnoucementSlice{o},
		}
	} else {
		related.R.DiscordLobbyAnnoucements = append(related.R.DiscordLobbyAnnoucements, o)
	}

	return nil
}

// AddDiscordLobbyFollowers adds the given related objects to the existing relationships
// of the discord_lobby_annoucement, optionally inserting them as new records.
// Appends related to o.R.DiscordLobbyFollowers.
// Sets related.R.DiscordLobbyAnnoucement appropriately.
func (o *DiscordLobbyAnnoucement) AddDiscordLobbyFollowers(exec boil.Executor, insert bool, related ...*DiscordLobbyFollower) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DiscordLobbyAnnoucementsID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"discord_lobby_followers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"discord_lobby_annoucements_id"}),
				strmangle.WhereClause("\"", "\"", 2, discordLobbyFollowerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DiscordLobbyAnnoucementsID = o.ID
		}
	}

	if o.R == nil {
		o.R = &discordLobbyAnnoucementR{
			DiscordLobbyFollowers: related,
		}
	} else {
		o.R.DiscordLobbyFollowers = append(o.R.DiscordLobbyFollowers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &discordLobbyFollowerR{
				DiscordLobbyAnnoucement: o,
			}
		} else {
			rel.R.DiscordLobbyAnnoucement = o
		}
	}
	return nil
}

// DiscordLobbyAnnoucements retrieves all the records using an executor.
func DiscordLobbyAnnoucements(mods ...qm.QueryMod) discordLobbyAnnoucementQuery {
	mods = append(mods, qm.From("\"discord_lobby_annoucements\""))
	return discordLobbyAnnoucementQuery{NewQuery(mods...)}
}

// FindDiscordLobbyAnnoucement retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDiscordLobbyAnnoucement(exec boil.Executor, iD string, selectCols ...string) (*DiscordLobbyAnnoucement, error) {
	discordLobbyAnnoucementObj := &DiscordLobbyAnnoucement{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"discord_lobby_annoucements\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, discordLobbyAnnoucementObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from discord_lobby_annoucements")
	}

	if err = discordLobbyAnnoucementObj.doAfterSelectHooks(exec); err != nil {
		return discordLobbyAnnoucementObj, err
	}

	return discordLobbyAnnoucementObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DiscordLobbyAnnoucement) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no discord_lobby_annoucements provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(discordLobbyAnnoucementColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	discordLobbyAnnoucementInsertCacheMut.RLock()
	cache, cached := discordLobbyAnnoucementInsertCache[key]
	discordLobbyAnnoucementInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			discordLobbyAnnoucementAllColumns,
			discordLobbyAnnoucementColumnsWithDefault,
			discordLobbyAnnoucementColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(discordLobbyAnnoucementType, discordLobbyAnnoucementMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(discordLobbyAnnoucementType, discordLobbyAnnoucementMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"discord_lobby_annoucements\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"discord_lobby_annoucements\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into discord_lobby_annoucements")
	}

	if !cached {
		discordLobbyAnnoucementInsertCacheMut.Lock()
		discordLobbyAnnoucementInsertCache[key] = cache
		discordLobbyAnnoucementInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the DiscordLobbyAnnoucement.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DiscordLobbyAnnoucement) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	discordLobbyAnnoucementUpdateCacheMut.RLock()
	cache, cached := discordLobbyAnnoucementUpdateCache[key]
	discordLobbyAnnoucementUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			discordLobbyAnnoucementAllColumns,
			discordLobbyAnnoucementPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update discord_lobby_annoucements, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"discord_lobby_annoucements\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, discordLobbyAnnoucementPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(discordLobbyAnnoucementType, discordLobbyAnnoucementMapping, append(wl, discordLobbyAnnoucementPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update discord_lobby_annoucements row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for discord_lobby_annoucements")
	}

	if !cached {
		discordLobbyAnnoucementUpdateCacheMut.Lock()
		discordLobbyAnnoucementUpdateCache[key] = cache
		discordLobbyAnnoucementUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q discordLobbyAnnoucementQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for discord_lobby_annoucements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for discord_lobby_annoucements")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DiscordLobbyAnnoucementSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), discordLobbyAnnoucementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"discord_lobby_annoucements\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, discordLobbyAnnoucementPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in discordLobbyAnnoucement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all discordLobbyAnnoucement")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DiscordLobbyAnnoucement) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no discord_lobby_annoucements provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(discordLobbyAnnoucementColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	discordLobbyAnnoucementUpsertCacheMut.RLock()
	cache, cached := discordLobbyAnnoucementUpsertCache[key]
	discordLobbyAnnoucementUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			discordLobbyAnnoucementAllColumns,
			discordLobbyAnnoucementColumnsWithDefault,
			discordLobbyAnnoucementColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			discordLobbyAnnoucementAllColumns,
			discordLobbyAnnoucementPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert discord_lobby_annoucements, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(discordLobbyAnnoucementPrimaryKeyColumns))
			copy(conflict, discordLobbyAnnoucementPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"discord_lobby_annoucements\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(discordLobbyAnnoucementType, discordLobbyAnnoucementMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(discordLobbyAnnoucementType, discordLobbyAnnoucementMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert discord_lobby_annoucements")
	}

	if !cached {
		discordLobbyAnnoucementUpsertCacheMut.Lock()
		discordLobbyAnnoucementUpsertCache[key] = cache
		discordLobbyAnnoucementUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single DiscordLobbyAnnoucement record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DiscordLobbyAnnoucement) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no DiscordLobbyAnnoucement provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), discordLobbyAnnoucementPrimaryKeyMapping)
	sql := "DELETE FROM \"discord_lobby_annoucements\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from discord_lobby_annoucements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for discord_lobby_annoucements")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q discordLobbyAnnoucementQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no discordLobbyAnnoucementQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from discord_lobby_annoucements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for discord_lobby_annoucements")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DiscordLobbyAnnoucementSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(discordLobbyAnnoucementBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), discordLobbyAnnoucementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"discord_lobby_annoucements\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, discordLobbyAnnoucementPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from discordLobbyAnnoucement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for discord_lobby_annoucements")
	}

	if len(discordLobbyAnnoucementAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DiscordLobbyAnnoucement) Reload(exec boil.Executor) error {
	ret, err := FindDiscordLobbyAnnoucement(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DiscordLobbyAnnoucementSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DiscordLobbyAnnoucementSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), discordLobbyAnnoucementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"discord_lobby_annoucements\".* FROM \"discord_lobby_annoucements\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, discordLobbyAnnoucementPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in DiscordLobbyAnnoucementSlice")
	}

	*o = slice

	return nil
}

// DiscordLobbyAnnoucementExists checks if the DiscordLobbyAnnoucement row exists.
func DiscordLobbyAnnoucementExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"discord_lobby_annoucements\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if discord_lobby_annoucements exists")
	}

	return exists, nil
}
