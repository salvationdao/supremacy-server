// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MechAbilityTriggerLog is an object representing the database table.
type MechAbilityTriggerLog struct {
	ID            string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	TriggeredByID string    `boiler:"triggered_by_id" boil:"triggered_by_id" json:"triggered_by_id" toml:"triggered_by_id" yaml:"triggered_by_id"`
	MechID        string    `boiler:"mech_id" boil:"mech_id" json:"mech_id" toml:"mech_id" yaml:"mech_id"`
	GameAbilityID string    `boiler:"game_ability_id" boil:"game_ability_id" json:"game_ability_id" toml:"game_ability_id" yaml:"game_ability_id"`
	CreatedAt     time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt     null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	BattleNumber  int       `boiler:"battle_number" boil:"battle_number" json:"battle_number" toml:"battle_number" yaml:"battle_number"`

	R *mechAbilityTriggerLogR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L mechAbilityTriggerLogL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MechAbilityTriggerLogColumns = struct {
	ID            string
	TriggeredByID string
	MechID        string
	GameAbilityID string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
	BattleNumber  string
}{
	ID:            "id",
	TriggeredByID: "triggered_by_id",
	MechID:        "mech_id",
	GameAbilityID: "game_ability_id",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	DeletedAt:     "deleted_at",
	BattleNumber:  "battle_number",
}

var MechAbilityTriggerLogTableColumns = struct {
	ID            string
	TriggeredByID string
	MechID        string
	GameAbilityID string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
	BattleNumber  string
}{
	ID:            "mech_ability_trigger_logs.id",
	TriggeredByID: "mech_ability_trigger_logs.triggered_by_id",
	MechID:        "mech_ability_trigger_logs.mech_id",
	GameAbilityID: "mech_ability_trigger_logs.game_ability_id",
	CreatedAt:     "mech_ability_trigger_logs.created_at",
	UpdatedAt:     "mech_ability_trigger_logs.updated_at",
	DeletedAt:     "mech_ability_trigger_logs.deleted_at",
	BattleNumber:  "mech_ability_trigger_logs.battle_number",
}

// Generated where

var MechAbilityTriggerLogWhere = struct {
	ID            whereHelperstring
	TriggeredByID whereHelperstring
	MechID        whereHelperstring
	GameAbilityID whereHelperstring
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	DeletedAt     whereHelpernull_Time
	BattleNumber  whereHelperint
}{
	ID:            whereHelperstring{field: "\"mech_ability_trigger_logs\".\"id\""},
	TriggeredByID: whereHelperstring{field: "\"mech_ability_trigger_logs\".\"triggered_by_id\""},
	MechID:        whereHelperstring{field: "\"mech_ability_trigger_logs\".\"mech_id\""},
	GameAbilityID: whereHelperstring{field: "\"mech_ability_trigger_logs\".\"game_ability_id\""},
	CreatedAt:     whereHelpertime_Time{field: "\"mech_ability_trigger_logs\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"mech_ability_trigger_logs\".\"updated_at\""},
	DeletedAt:     whereHelpernull_Time{field: "\"mech_ability_trigger_logs\".\"deleted_at\""},
	BattleNumber:  whereHelperint{field: "\"mech_ability_trigger_logs\".\"battle_number\""},
}

// MechAbilityTriggerLogRels is where relationship names are stored.
var MechAbilityTriggerLogRels = struct {
	GameAbility string
	Mech        string
	TriggeredBy string
}{
	GameAbility: "GameAbility",
	Mech:        "Mech",
	TriggeredBy: "TriggeredBy",
}

// mechAbilityTriggerLogR is where relationships are stored.
type mechAbilityTriggerLogR struct {
	GameAbility *GameAbility `boiler:"GameAbility" boil:"GameAbility" json:"GameAbility" toml:"GameAbility" yaml:"GameAbility"`
	Mech        *Mech        `boiler:"Mech" boil:"Mech" json:"Mech" toml:"Mech" yaml:"Mech"`
	TriggeredBy *Player      `boiler:"TriggeredBy" boil:"TriggeredBy" json:"TriggeredBy" toml:"TriggeredBy" yaml:"TriggeredBy"`
}

// NewStruct creates a new relationship struct
func (*mechAbilityTriggerLogR) NewStruct() *mechAbilityTriggerLogR {
	return &mechAbilityTriggerLogR{}
}

// mechAbilityTriggerLogL is where Load methods for each relationship are stored.
type mechAbilityTriggerLogL struct{}

var (
	mechAbilityTriggerLogAllColumns            = []string{"id", "triggered_by_id", "mech_id", "game_ability_id", "created_at", "updated_at", "deleted_at", "battle_number"}
	mechAbilityTriggerLogColumnsWithoutDefault = []string{"triggered_by_id", "mech_id", "game_ability_id"}
	mechAbilityTriggerLogColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at", "battle_number"}
	mechAbilityTriggerLogPrimaryKeyColumns     = []string{"id"}
	mechAbilityTriggerLogGeneratedColumns      = []string{}
)

type (
	// MechAbilityTriggerLogSlice is an alias for a slice of pointers to MechAbilityTriggerLog.
	// This should almost always be used instead of []MechAbilityTriggerLog.
	MechAbilityTriggerLogSlice []*MechAbilityTriggerLog
	// MechAbilityTriggerLogHook is the signature for custom MechAbilityTriggerLog hook methods
	MechAbilityTriggerLogHook func(boil.Executor, *MechAbilityTriggerLog) error

	mechAbilityTriggerLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mechAbilityTriggerLogType                 = reflect.TypeOf(&MechAbilityTriggerLog{})
	mechAbilityTriggerLogMapping              = queries.MakeStructMapping(mechAbilityTriggerLogType)
	mechAbilityTriggerLogPrimaryKeyMapping, _ = queries.BindMapping(mechAbilityTriggerLogType, mechAbilityTriggerLogMapping, mechAbilityTriggerLogPrimaryKeyColumns)
	mechAbilityTriggerLogInsertCacheMut       sync.RWMutex
	mechAbilityTriggerLogInsertCache          = make(map[string]insertCache)
	mechAbilityTriggerLogUpdateCacheMut       sync.RWMutex
	mechAbilityTriggerLogUpdateCache          = make(map[string]updateCache)
	mechAbilityTriggerLogUpsertCacheMut       sync.RWMutex
	mechAbilityTriggerLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mechAbilityTriggerLogAfterSelectHooks []MechAbilityTriggerLogHook

var mechAbilityTriggerLogBeforeInsertHooks []MechAbilityTriggerLogHook
var mechAbilityTriggerLogAfterInsertHooks []MechAbilityTriggerLogHook

var mechAbilityTriggerLogBeforeUpdateHooks []MechAbilityTriggerLogHook
var mechAbilityTriggerLogAfterUpdateHooks []MechAbilityTriggerLogHook

var mechAbilityTriggerLogBeforeDeleteHooks []MechAbilityTriggerLogHook
var mechAbilityTriggerLogAfterDeleteHooks []MechAbilityTriggerLogHook

var mechAbilityTriggerLogBeforeUpsertHooks []MechAbilityTriggerLogHook
var mechAbilityTriggerLogAfterUpsertHooks []MechAbilityTriggerLogHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MechAbilityTriggerLog) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAbilityTriggerLogAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MechAbilityTriggerLog) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAbilityTriggerLogBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MechAbilityTriggerLog) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAbilityTriggerLogAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MechAbilityTriggerLog) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAbilityTriggerLogBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MechAbilityTriggerLog) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAbilityTriggerLogAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MechAbilityTriggerLog) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAbilityTriggerLogBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MechAbilityTriggerLog) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAbilityTriggerLogAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MechAbilityTriggerLog) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAbilityTriggerLogBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MechAbilityTriggerLog) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAbilityTriggerLogAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMechAbilityTriggerLogHook registers your hook function for all future operations.
func AddMechAbilityTriggerLogHook(hookPoint boil.HookPoint, mechAbilityTriggerLogHook MechAbilityTriggerLogHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mechAbilityTriggerLogAfterSelectHooks = append(mechAbilityTriggerLogAfterSelectHooks, mechAbilityTriggerLogHook)
	case boil.BeforeInsertHook:
		mechAbilityTriggerLogBeforeInsertHooks = append(mechAbilityTriggerLogBeforeInsertHooks, mechAbilityTriggerLogHook)
	case boil.AfterInsertHook:
		mechAbilityTriggerLogAfterInsertHooks = append(mechAbilityTriggerLogAfterInsertHooks, mechAbilityTriggerLogHook)
	case boil.BeforeUpdateHook:
		mechAbilityTriggerLogBeforeUpdateHooks = append(mechAbilityTriggerLogBeforeUpdateHooks, mechAbilityTriggerLogHook)
	case boil.AfterUpdateHook:
		mechAbilityTriggerLogAfterUpdateHooks = append(mechAbilityTriggerLogAfterUpdateHooks, mechAbilityTriggerLogHook)
	case boil.BeforeDeleteHook:
		mechAbilityTriggerLogBeforeDeleteHooks = append(mechAbilityTriggerLogBeforeDeleteHooks, mechAbilityTriggerLogHook)
	case boil.AfterDeleteHook:
		mechAbilityTriggerLogAfterDeleteHooks = append(mechAbilityTriggerLogAfterDeleteHooks, mechAbilityTriggerLogHook)
	case boil.BeforeUpsertHook:
		mechAbilityTriggerLogBeforeUpsertHooks = append(mechAbilityTriggerLogBeforeUpsertHooks, mechAbilityTriggerLogHook)
	case boil.AfterUpsertHook:
		mechAbilityTriggerLogAfterUpsertHooks = append(mechAbilityTriggerLogAfterUpsertHooks, mechAbilityTriggerLogHook)
	}
}

// One returns a single mechAbilityTriggerLog record from the query.
func (q mechAbilityTriggerLogQuery) One(exec boil.Executor) (*MechAbilityTriggerLog, error) {
	o := &MechAbilityTriggerLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for mech_ability_trigger_logs")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MechAbilityTriggerLog records from the query.
func (q mechAbilityTriggerLogQuery) All(exec boil.Executor) (MechAbilityTriggerLogSlice, error) {
	var o []*MechAbilityTriggerLog

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to MechAbilityTriggerLog slice")
	}

	if len(mechAbilityTriggerLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MechAbilityTriggerLog records in the query.
func (q mechAbilityTriggerLogQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count mech_ability_trigger_logs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mechAbilityTriggerLogQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if mech_ability_trigger_logs exists")
	}

	return count > 0, nil
}

// GameAbility pointed to by the foreign key.
func (o *MechAbilityTriggerLog) GameAbility(mods ...qm.QueryMod) gameAbilityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GameAbilityID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := GameAbilities(queryMods...)
	queries.SetFrom(query.Query, "\"game_abilities\"")

	return query
}

// Mech pointed to by the foreign key.
func (o *MechAbilityTriggerLog) Mech(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MechID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// TriggeredBy pointed to by the foreign key.
func (o *MechAbilityTriggerLog) TriggeredBy(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TriggeredByID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// LoadGameAbility allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechAbilityTriggerLogL) LoadGameAbility(e boil.Executor, singular bool, maybeMechAbilityTriggerLog interface{}, mods queries.Applicator) error {
	var slice []*MechAbilityTriggerLog
	var object *MechAbilityTriggerLog

	if singular {
		object = maybeMechAbilityTriggerLog.(*MechAbilityTriggerLog)
	} else {
		slice = *maybeMechAbilityTriggerLog.(*[]*MechAbilityTriggerLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechAbilityTriggerLogR{}
		}
		args = append(args, object.GameAbilityID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechAbilityTriggerLogR{}
			}

			for _, a := range args {
				if a == obj.GameAbilityID {
					continue Outer
				}
			}

			args = append(args, obj.GameAbilityID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`game_abilities`),
		qm.WhereIn(`game_abilities.id in ?`, args...),
		qmhelper.WhereIsNull(`game_abilities.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GameAbility")
	}

	var resultSlice []*GameAbility
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GameAbility")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for game_abilities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_abilities")
	}

	if len(mechAbilityTriggerLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GameAbility = foreign
		if foreign.R == nil {
			foreign.R = &gameAbilityR{}
		}
		foreign.R.MechAbilityTriggerLogs = append(foreign.R.MechAbilityTriggerLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GameAbilityID == foreign.ID {
				local.R.GameAbility = foreign
				if foreign.R == nil {
					foreign.R = &gameAbilityR{}
				}
				foreign.R.MechAbilityTriggerLogs = append(foreign.R.MechAbilityTriggerLogs, local)
				break
			}
		}
	}

	return nil
}

// LoadMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechAbilityTriggerLogL) LoadMech(e boil.Executor, singular bool, maybeMechAbilityTriggerLog interface{}, mods queries.Applicator) error {
	var slice []*MechAbilityTriggerLog
	var object *MechAbilityTriggerLog

	if singular {
		object = maybeMechAbilityTriggerLog.(*MechAbilityTriggerLog)
	} else {
		slice = *maybeMechAbilityTriggerLog.(*[]*MechAbilityTriggerLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechAbilityTriggerLogR{}
		}
		args = append(args, object.MechID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechAbilityTriggerLogR{}
			}

			for _, a := range args {
				if a == obj.MechID {
					continue Outer
				}
			}

			args = append(args, obj.MechID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(mechAbilityTriggerLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Mech = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.MechAbilityTriggerLogs = append(foreign.R.MechAbilityTriggerLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MechID == foreign.ID {
				local.R.Mech = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.MechAbilityTriggerLogs = append(foreign.R.MechAbilityTriggerLogs, local)
				break
			}
		}
	}

	return nil
}

// LoadTriggeredBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechAbilityTriggerLogL) LoadTriggeredBy(e boil.Executor, singular bool, maybeMechAbilityTriggerLog interface{}, mods queries.Applicator) error {
	var slice []*MechAbilityTriggerLog
	var object *MechAbilityTriggerLog

	if singular {
		object = maybeMechAbilityTriggerLog.(*MechAbilityTriggerLog)
	} else {
		slice = *maybeMechAbilityTriggerLog.(*[]*MechAbilityTriggerLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechAbilityTriggerLogR{}
		}
		args = append(args, object.TriggeredByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechAbilityTriggerLogR{}
			}

			for _, a := range args {
				if a == obj.TriggeredByID {
					continue Outer
				}
			}

			args = append(args, obj.TriggeredByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(mechAbilityTriggerLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TriggeredBy = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.TriggeredByMechAbilityTriggerLogs = append(foreign.R.TriggeredByMechAbilityTriggerLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TriggeredByID == foreign.ID {
				local.R.TriggeredBy = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.TriggeredByMechAbilityTriggerLogs = append(foreign.R.TriggeredByMechAbilityTriggerLogs, local)
				break
			}
		}
	}

	return nil
}

// SetGameAbility of the mechAbilityTriggerLog to the related item.
// Sets o.R.GameAbility to related.
// Adds o to related.R.MechAbilityTriggerLogs.
func (o *MechAbilityTriggerLog) SetGameAbility(exec boil.Executor, insert bool, related *GameAbility) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mech_ability_trigger_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"game_ability_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechAbilityTriggerLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GameAbilityID = related.ID
	if o.R == nil {
		o.R = &mechAbilityTriggerLogR{
			GameAbility: related,
		}
	} else {
		o.R.GameAbility = related
	}

	if related.R == nil {
		related.R = &gameAbilityR{
			MechAbilityTriggerLogs: MechAbilityTriggerLogSlice{o},
		}
	} else {
		related.R.MechAbilityTriggerLogs = append(related.R.MechAbilityTriggerLogs, o)
	}

	return nil
}

// SetMech of the mechAbilityTriggerLog to the related item.
// Sets o.R.Mech to related.
// Adds o to related.R.MechAbilityTriggerLogs.
func (o *MechAbilityTriggerLog) SetMech(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mech_ability_trigger_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechAbilityTriggerLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MechID = related.ID
	if o.R == nil {
		o.R = &mechAbilityTriggerLogR{
			Mech: related,
		}
	} else {
		o.R.Mech = related
	}

	if related.R == nil {
		related.R = &mechR{
			MechAbilityTriggerLogs: MechAbilityTriggerLogSlice{o},
		}
	} else {
		related.R.MechAbilityTriggerLogs = append(related.R.MechAbilityTriggerLogs, o)
	}

	return nil
}

// SetTriggeredBy of the mechAbilityTriggerLog to the related item.
// Sets o.R.TriggeredBy to related.
// Adds o to related.R.TriggeredByMechAbilityTriggerLogs.
func (o *MechAbilityTriggerLog) SetTriggeredBy(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mech_ability_trigger_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"triggered_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechAbilityTriggerLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TriggeredByID = related.ID
	if o.R == nil {
		o.R = &mechAbilityTriggerLogR{
			TriggeredBy: related,
		}
	} else {
		o.R.TriggeredBy = related
	}

	if related.R == nil {
		related.R = &playerR{
			TriggeredByMechAbilityTriggerLogs: MechAbilityTriggerLogSlice{o},
		}
	} else {
		related.R.TriggeredByMechAbilityTriggerLogs = append(related.R.TriggeredByMechAbilityTriggerLogs, o)
	}

	return nil
}

// MechAbilityTriggerLogs retrieves all the records using an executor.
func MechAbilityTriggerLogs(mods ...qm.QueryMod) mechAbilityTriggerLogQuery {
	mods = append(mods, qm.From("\"mech_ability_trigger_logs\""), qmhelper.WhereIsNull("\"mech_ability_trigger_logs\".\"deleted_at\""))
	return mechAbilityTriggerLogQuery{NewQuery(mods...)}
}

// FindMechAbilityTriggerLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMechAbilityTriggerLog(exec boil.Executor, iD string, selectCols ...string) (*MechAbilityTriggerLog, error) {
	mechAbilityTriggerLogObj := &MechAbilityTriggerLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mech_ability_trigger_logs\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, mechAbilityTriggerLogObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from mech_ability_trigger_logs")
	}

	if err = mechAbilityTriggerLogObj.doAfterSelectHooks(exec); err != nil {
		return mechAbilityTriggerLogObj, err
	}

	return mechAbilityTriggerLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MechAbilityTriggerLog) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mech_ability_trigger_logs provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechAbilityTriggerLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mechAbilityTriggerLogInsertCacheMut.RLock()
	cache, cached := mechAbilityTriggerLogInsertCache[key]
	mechAbilityTriggerLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mechAbilityTriggerLogAllColumns,
			mechAbilityTriggerLogColumnsWithDefault,
			mechAbilityTriggerLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mechAbilityTriggerLogType, mechAbilityTriggerLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mechAbilityTriggerLogType, mechAbilityTriggerLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mech_ability_trigger_logs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mech_ability_trigger_logs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into mech_ability_trigger_logs")
	}

	if !cached {
		mechAbilityTriggerLogInsertCacheMut.Lock()
		mechAbilityTriggerLogInsertCache[key] = cache
		mechAbilityTriggerLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the MechAbilityTriggerLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MechAbilityTriggerLog) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mechAbilityTriggerLogUpdateCacheMut.RLock()
	cache, cached := mechAbilityTriggerLogUpdateCache[key]
	mechAbilityTriggerLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mechAbilityTriggerLogAllColumns,
			mechAbilityTriggerLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update mech_ability_trigger_logs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mech_ability_trigger_logs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mechAbilityTriggerLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mechAbilityTriggerLogType, mechAbilityTriggerLogMapping, append(wl, mechAbilityTriggerLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update mech_ability_trigger_logs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for mech_ability_trigger_logs")
	}

	if !cached {
		mechAbilityTriggerLogUpdateCacheMut.Lock()
		mechAbilityTriggerLogUpdateCache[key] = cache
		mechAbilityTriggerLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mechAbilityTriggerLogQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for mech_ability_trigger_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for mech_ability_trigger_logs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MechAbilityTriggerLogSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechAbilityTriggerLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mech_ability_trigger_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mechAbilityTriggerLogPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in mechAbilityTriggerLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all mechAbilityTriggerLog")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MechAbilityTriggerLog) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mech_ability_trigger_logs provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechAbilityTriggerLogColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mechAbilityTriggerLogUpsertCacheMut.RLock()
	cache, cached := mechAbilityTriggerLogUpsertCache[key]
	mechAbilityTriggerLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mechAbilityTriggerLogAllColumns,
			mechAbilityTriggerLogColumnsWithDefault,
			mechAbilityTriggerLogColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mechAbilityTriggerLogAllColumns,
			mechAbilityTriggerLogPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert mech_ability_trigger_logs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mechAbilityTriggerLogPrimaryKeyColumns))
			copy(conflict, mechAbilityTriggerLogPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mech_ability_trigger_logs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mechAbilityTriggerLogType, mechAbilityTriggerLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mechAbilityTriggerLogType, mechAbilityTriggerLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert mech_ability_trigger_logs")
	}

	if !cached {
		mechAbilityTriggerLogUpsertCacheMut.Lock()
		mechAbilityTriggerLogUpsertCache[key] = cache
		mechAbilityTriggerLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single MechAbilityTriggerLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MechAbilityTriggerLog) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no MechAbilityTriggerLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mechAbilityTriggerLogPrimaryKeyMapping)
		sql = "DELETE FROM \"mech_ability_trigger_logs\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"mech_ability_trigger_logs\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(mechAbilityTriggerLogType, mechAbilityTriggerLogMapping, append(wl, mechAbilityTriggerLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from mech_ability_trigger_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for mech_ability_trigger_logs")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mechAbilityTriggerLogQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no mechAbilityTriggerLogQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mech_ability_trigger_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mech_ability_trigger_logs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MechAbilityTriggerLogSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mechAbilityTriggerLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechAbilityTriggerLogPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"mech_ability_trigger_logs\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechAbilityTriggerLogPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechAbilityTriggerLogPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"mech_ability_trigger_logs\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, mechAbilityTriggerLogPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mechAbilityTriggerLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mech_ability_trigger_logs")
	}

	if len(mechAbilityTriggerLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MechAbilityTriggerLog) Reload(exec boil.Executor) error {
	ret, err := FindMechAbilityTriggerLog(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MechAbilityTriggerLogSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MechAbilityTriggerLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechAbilityTriggerLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mech_ability_trigger_logs\".* FROM \"mech_ability_trigger_logs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechAbilityTriggerLogPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in MechAbilityTriggerLogSlice")
	}

	*o = slice

	return nil
}

// MechAbilityTriggerLogExists checks if the MechAbilityTriggerLog row exists.
func MechAbilityTriggerLogExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mech_ability_trigger_logs\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if mech_ability_trigger_logs exists")
	}

	return exists, nil
}
