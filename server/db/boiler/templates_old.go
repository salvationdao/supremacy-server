// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TemplatesOld is an object representing the database table.
type TemplatesOld struct {
	ID                 string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BlueprintChassisID string      `boiler:"blueprint_chassis_id" boil:"blueprint_chassis_id" json:"blueprint_chassis_id" toml:"blueprint_chassis_id" yaml:"blueprint_chassis_id"`
	FactionID          string      `boiler:"faction_id" boil:"faction_id" json:"faction_id" toml:"faction_id" yaml:"faction_id"`
	Tier               string      `boiler:"tier" boil:"tier" json:"tier" toml:"tier" yaml:"tier"`
	Label              string      `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	Slug               string      `boiler:"slug" boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	IsDefault          bool        `boiler:"is_default" boil:"is_default" json:"is_default" toml:"is_default" yaml:"is_default"`
	ImageURL           string      `boiler:"image_url" boil:"image_url" json:"image_url" toml:"image_url" yaml:"image_url"`
	AnimationURL       string      `boiler:"animation_url" boil:"animation_url" json:"animation_url" toml:"animation_url" yaml:"animation_url"`
	CardAnimationURL   string      `boiler:"card_animation_url" boil:"card_animation_url" json:"card_animation_url" toml:"card_animation_url" yaml:"card_animation_url"`
	AvatarURL          string      `boiler:"avatar_url" boil:"avatar_url" json:"avatar_url" toml:"avatar_url" yaml:"avatar_url"`
	AssetType          string      `boiler:"asset_type" boil:"asset_type" json:"asset_type" toml:"asset_type" yaml:"asset_type"`
	DeletedAt          null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt          time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt          time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	LargeImageURL      string      `boiler:"large_image_url" boil:"large_image_url" json:"large_image_url" toml:"large_image_url" yaml:"large_image_url"`
	CollectionSlug     null.String `boiler:"collection_slug" boil:"collection_slug" json:"collection_slug,omitempty" toml:"collection_slug" yaml:"collection_slug,omitempty"`

	R *templatesOldR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L templatesOldL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TemplatesOldColumns = struct {
	ID                 string
	BlueprintChassisID string
	FactionID          string
	Tier               string
	Label              string
	Slug               string
	IsDefault          string
	ImageURL           string
	AnimationURL       string
	CardAnimationURL   string
	AvatarURL          string
	AssetType          string
	DeletedAt          string
	UpdatedAt          string
	CreatedAt          string
	LargeImageURL      string
	CollectionSlug     string
}{
	ID:                 "id",
	BlueprintChassisID: "blueprint_chassis_id",
	FactionID:          "faction_id",
	Tier:               "tier",
	Label:              "label",
	Slug:               "slug",
	IsDefault:          "is_default",
	ImageURL:           "image_url",
	AnimationURL:       "animation_url",
	CardAnimationURL:   "card_animation_url",
	AvatarURL:          "avatar_url",
	AssetType:          "asset_type",
	DeletedAt:          "deleted_at",
	UpdatedAt:          "updated_at",
	CreatedAt:          "created_at",
	LargeImageURL:      "large_image_url",
	CollectionSlug:     "collection_slug",
}

var TemplatesOldTableColumns = struct {
	ID                 string
	BlueprintChassisID string
	FactionID          string
	Tier               string
	Label              string
	Slug               string
	IsDefault          string
	ImageURL           string
	AnimationURL       string
	CardAnimationURL   string
	AvatarURL          string
	AssetType          string
	DeletedAt          string
	UpdatedAt          string
	CreatedAt          string
	LargeImageURL      string
	CollectionSlug     string
}{
	ID:                 "templates_old.id",
	BlueprintChassisID: "templates_old.blueprint_chassis_id",
	FactionID:          "templates_old.faction_id",
	Tier:               "templates_old.tier",
	Label:              "templates_old.label",
	Slug:               "templates_old.slug",
	IsDefault:          "templates_old.is_default",
	ImageURL:           "templates_old.image_url",
	AnimationURL:       "templates_old.animation_url",
	CardAnimationURL:   "templates_old.card_animation_url",
	AvatarURL:          "templates_old.avatar_url",
	AssetType:          "templates_old.asset_type",
	DeletedAt:          "templates_old.deleted_at",
	UpdatedAt:          "templates_old.updated_at",
	CreatedAt:          "templates_old.created_at",
	LargeImageURL:      "templates_old.large_image_url",
	CollectionSlug:     "templates_old.collection_slug",
}

// Generated where

var TemplatesOldWhere = struct {
	ID                 whereHelperstring
	BlueprintChassisID whereHelperstring
	FactionID          whereHelperstring
	Tier               whereHelperstring
	Label              whereHelperstring
	Slug               whereHelperstring
	IsDefault          whereHelperbool
	ImageURL           whereHelperstring
	AnimationURL       whereHelperstring
	CardAnimationURL   whereHelperstring
	AvatarURL          whereHelperstring
	AssetType          whereHelperstring
	DeletedAt          whereHelpernull_Time
	UpdatedAt          whereHelpertime_Time
	CreatedAt          whereHelpertime_Time
	LargeImageURL      whereHelperstring
	CollectionSlug     whereHelpernull_String
}{
	ID:                 whereHelperstring{field: "\"templates_old\".\"id\""},
	BlueprintChassisID: whereHelperstring{field: "\"templates_old\".\"blueprint_chassis_id\""},
	FactionID:          whereHelperstring{field: "\"templates_old\".\"faction_id\""},
	Tier:               whereHelperstring{field: "\"templates_old\".\"tier\""},
	Label:              whereHelperstring{field: "\"templates_old\".\"label\""},
	Slug:               whereHelperstring{field: "\"templates_old\".\"slug\""},
	IsDefault:          whereHelperbool{field: "\"templates_old\".\"is_default\""},
	ImageURL:           whereHelperstring{field: "\"templates_old\".\"image_url\""},
	AnimationURL:       whereHelperstring{field: "\"templates_old\".\"animation_url\""},
	CardAnimationURL:   whereHelperstring{field: "\"templates_old\".\"card_animation_url\""},
	AvatarURL:          whereHelperstring{field: "\"templates_old\".\"avatar_url\""},
	AssetType:          whereHelperstring{field: "\"templates_old\".\"asset_type\""},
	DeletedAt:          whereHelpernull_Time{field: "\"templates_old\".\"deleted_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"templates_old\".\"updated_at\""},
	CreatedAt:          whereHelpertime_Time{field: "\"templates_old\".\"created_at\""},
	LargeImageURL:      whereHelperstring{field: "\"templates_old\".\"large_image_url\""},
	CollectionSlug:     whereHelpernull_String{field: "\"templates_old\".\"collection_slug\""},
}

// TemplatesOldRels is where relationship names are stored.
var TemplatesOldRels = struct {
	BlueprintChassis string
	Faction          string
}{
	BlueprintChassis: "BlueprintChassis",
	Faction:          "Faction",
}

// templatesOldR is where relationships are stored.
type templatesOldR struct {
	BlueprintChassis *BlueprintMech `boiler:"BlueprintChassis" boil:"BlueprintChassis" json:"BlueprintChassis" toml:"BlueprintChassis" yaml:"BlueprintChassis"`
	Faction          *Faction       `boiler:"Faction" boil:"Faction" json:"Faction" toml:"Faction" yaml:"Faction"`
}

// NewStruct creates a new relationship struct
func (*templatesOldR) NewStruct() *templatesOldR {
	return &templatesOldR{}
}

// templatesOldL is where Load methods for each relationship are stored.
type templatesOldL struct{}

var (
	templatesOldAllColumns            = []string{"id", "blueprint_chassis_id", "faction_id", "tier", "label", "slug", "is_default", "image_url", "animation_url", "card_animation_url", "avatar_url", "asset_type", "deleted_at", "updated_at", "created_at", "large_image_url", "collection_slug"}
	templatesOldColumnsWithoutDefault = []string{"id", "blueprint_chassis_id", "faction_id", "tier", "label", "slug", "image_url", "animation_url", "card_animation_url", "avatar_url", "asset_type", "large_image_url"}
	templatesOldColumnsWithDefault    = []string{"is_default", "deleted_at", "updated_at", "created_at", "collection_slug"}
	templatesOldPrimaryKeyColumns     = []string{"id"}
	templatesOldGeneratedColumns      = []string{}
)

type (
	// TemplatesOldSlice is an alias for a slice of pointers to TemplatesOld.
	// This should almost always be used instead of []TemplatesOld.
	TemplatesOldSlice []*TemplatesOld
	// TemplatesOldHook is the signature for custom TemplatesOld hook methods
	TemplatesOldHook func(boil.Executor, *TemplatesOld) error

	templatesOldQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	templatesOldType                 = reflect.TypeOf(&TemplatesOld{})
	templatesOldMapping              = queries.MakeStructMapping(templatesOldType)
	templatesOldPrimaryKeyMapping, _ = queries.BindMapping(templatesOldType, templatesOldMapping, templatesOldPrimaryKeyColumns)
	templatesOldInsertCacheMut       sync.RWMutex
	templatesOldInsertCache          = make(map[string]insertCache)
	templatesOldUpdateCacheMut       sync.RWMutex
	templatesOldUpdateCache          = make(map[string]updateCache)
	templatesOldUpsertCacheMut       sync.RWMutex
	templatesOldUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var templatesOldAfterSelectHooks []TemplatesOldHook

var templatesOldBeforeInsertHooks []TemplatesOldHook
var templatesOldAfterInsertHooks []TemplatesOldHook

var templatesOldBeforeUpdateHooks []TemplatesOldHook
var templatesOldAfterUpdateHooks []TemplatesOldHook

var templatesOldBeforeDeleteHooks []TemplatesOldHook
var templatesOldAfterDeleteHooks []TemplatesOldHook

var templatesOldBeforeUpsertHooks []TemplatesOldHook
var templatesOldAfterUpsertHooks []TemplatesOldHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TemplatesOld) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range templatesOldAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TemplatesOld) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range templatesOldBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TemplatesOld) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range templatesOldAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TemplatesOld) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range templatesOldBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TemplatesOld) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range templatesOldAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TemplatesOld) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range templatesOldBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TemplatesOld) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range templatesOldAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TemplatesOld) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range templatesOldBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TemplatesOld) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range templatesOldAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTemplatesOldHook registers your hook function for all future operations.
func AddTemplatesOldHook(hookPoint boil.HookPoint, templatesOldHook TemplatesOldHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		templatesOldAfterSelectHooks = append(templatesOldAfterSelectHooks, templatesOldHook)
	case boil.BeforeInsertHook:
		templatesOldBeforeInsertHooks = append(templatesOldBeforeInsertHooks, templatesOldHook)
	case boil.AfterInsertHook:
		templatesOldAfterInsertHooks = append(templatesOldAfterInsertHooks, templatesOldHook)
	case boil.BeforeUpdateHook:
		templatesOldBeforeUpdateHooks = append(templatesOldBeforeUpdateHooks, templatesOldHook)
	case boil.AfterUpdateHook:
		templatesOldAfterUpdateHooks = append(templatesOldAfterUpdateHooks, templatesOldHook)
	case boil.BeforeDeleteHook:
		templatesOldBeforeDeleteHooks = append(templatesOldBeforeDeleteHooks, templatesOldHook)
	case boil.AfterDeleteHook:
		templatesOldAfterDeleteHooks = append(templatesOldAfterDeleteHooks, templatesOldHook)
	case boil.BeforeUpsertHook:
		templatesOldBeforeUpsertHooks = append(templatesOldBeforeUpsertHooks, templatesOldHook)
	case boil.AfterUpsertHook:
		templatesOldAfterUpsertHooks = append(templatesOldAfterUpsertHooks, templatesOldHook)
	}
}

// One returns a single templatesOld record from the query.
func (q templatesOldQuery) One(exec boil.Executor) (*TemplatesOld, error) {
	o := &TemplatesOld{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for templates_old")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TemplatesOld records from the query.
func (q templatesOldQuery) All(exec boil.Executor) (TemplatesOldSlice, error) {
	var o []*TemplatesOld

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to TemplatesOld slice")
	}

	if len(templatesOldAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TemplatesOld records in the query.
func (q templatesOldQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count templates_old rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q templatesOldQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if templates_old exists")
	}

	return count > 0, nil
}

// BlueprintChassis pointed to by the foreign key.
func (o *TemplatesOld) BlueprintChassis(mods ...qm.QueryMod) blueprintMechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BlueprintChassisID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintMechs(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_mechs\"")

	return query
}

// Faction pointed to by the foreign key.
func (o *TemplatesOld) Faction(mods ...qm.QueryMod) factionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FactionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Factions(queryMods...)
	queries.SetFrom(query.Query, "\"factions\"")

	return query
}

// LoadBlueprintChassis allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (templatesOldL) LoadBlueprintChassis(e boil.Executor, singular bool, maybeTemplatesOld interface{}, mods queries.Applicator) error {
	var slice []*TemplatesOld
	var object *TemplatesOld

	if singular {
		object = maybeTemplatesOld.(*TemplatesOld)
	} else {
		slice = *maybeTemplatesOld.(*[]*TemplatesOld)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &templatesOldR{}
		}
		args = append(args, object.BlueprintChassisID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &templatesOldR{}
			}

			for _, a := range args {
				if a == obj.BlueprintChassisID {
					continue Outer
				}
			}

			args = append(args, obj.BlueprintChassisID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_mechs`),
		qm.WhereIn(`blueprint_mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`blueprint_mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintMech")
	}

	var resultSlice []*BlueprintMech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintMech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_mechs")
	}

	if len(templatesOldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BlueprintChassis = foreign
		if foreign.R == nil {
			foreign.R = &blueprintMechR{}
		}
		foreign.R.BlueprintChassisTemplatesOld = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlueprintChassisID == foreign.ID {
				local.R.BlueprintChassis = foreign
				if foreign.R == nil {
					foreign.R = &blueprintMechR{}
				}
				foreign.R.BlueprintChassisTemplatesOld = local
				break
			}
		}
	}

	return nil
}

// LoadFaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (templatesOldL) LoadFaction(e boil.Executor, singular bool, maybeTemplatesOld interface{}, mods queries.Applicator) error {
	var slice []*TemplatesOld
	var object *TemplatesOld

	if singular {
		object = maybeTemplatesOld.(*TemplatesOld)
	} else {
		slice = *maybeTemplatesOld.(*[]*TemplatesOld)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &templatesOldR{}
		}
		args = append(args, object.FactionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &templatesOldR{}
			}

			for _, a := range args {
				if a == obj.FactionID {
					continue Outer
				}
			}

			args = append(args, obj.FactionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`factions`),
		qm.WhereIn(`factions.id in ?`, args...),
		qmhelper.WhereIsNull(`factions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Faction")
	}

	var resultSlice []*Faction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Faction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for factions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for factions")
	}

	if len(templatesOldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Faction = foreign
		if foreign.R == nil {
			foreign.R = &factionR{}
		}
		foreign.R.TemplatesOlds = append(foreign.R.TemplatesOlds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FactionID == foreign.ID {
				local.R.Faction = foreign
				if foreign.R == nil {
					foreign.R = &factionR{}
				}
				foreign.R.TemplatesOlds = append(foreign.R.TemplatesOlds, local)
				break
			}
		}
	}

	return nil
}

// SetBlueprintChassis of the templatesOld to the related item.
// Sets o.R.BlueprintChassis to related.
// Adds o to related.R.BlueprintChassisTemplatesOld.
func (o *TemplatesOld) SetBlueprintChassis(exec boil.Executor, insert bool, related *BlueprintMech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"templates_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_chassis_id"}),
		strmangle.WhereClause("\"", "\"", 2, templatesOldPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlueprintChassisID = related.ID
	if o.R == nil {
		o.R = &templatesOldR{
			BlueprintChassis: related,
		}
	} else {
		o.R.BlueprintChassis = related
	}

	if related.R == nil {
		related.R = &blueprintMechR{
			BlueprintChassisTemplatesOld: o,
		}
	} else {
		related.R.BlueprintChassisTemplatesOld = o
	}

	return nil
}

// SetFaction of the templatesOld to the related item.
// Sets o.R.Faction to related.
// Adds o to related.R.TemplatesOlds.
func (o *TemplatesOld) SetFaction(exec boil.Executor, insert bool, related *Faction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"templates_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"faction_id"}),
		strmangle.WhereClause("\"", "\"", 2, templatesOldPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FactionID = related.ID
	if o.R == nil {
		o.R = &templatesOldR{
			Faction: related,
		}
	} else {
		o.R.Faction = related
	}

	if related.R == nil {
		related.R = &factionR{
			TemplatesOlds: TemplatesOldSlice{o},
		}
	} else {
		related.R.TemplatesOlds = append(related.R.TemplatesOlds, o)
	}

	return nil
}

// TemplatesOlds retrieves all the records using an executor.
func TemplatesOlds(mods ...qm.QueryMod) templatesOldQuery {
	mods = append(mods, qm.From("\"templates_old\""), qmhelper.WhereIsNull("\"templates_old\".\"deleted_at\""))
	return templatesOldQuery{NewQuery(mods...)}
}

// FindTemplatesOld retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTemplatesOld(exec boil.Executor, iD string, selectCols ...string) (*TemplatesOld, error) {
	templatesOldObj := &TemplatesOld{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"templates_old\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, templatesOldObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from templates_old")
	}

	if err = templatesOldObj.doAfterSelectHooks(exec); err != nil {
		return templatesOldObj, err
	}

	return templatesOldObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TemplatesOld) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no templates_old provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(templatesOldColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	templatesOldInsertCacheMut.RLock()
	cache, cached := templatesOldInsertCache[key]
	templatesOldInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			templatesOldAllColumns,
			templatesOldColumnsWithDefault,
			templatesOldColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(templatesOldType, templatesOldMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(templatesOldType, templatesOldMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"templates_old\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"templates_old\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into templates_old")
	}

	if !cached {
		templatesOldInsertCacheMut.Lock()
		templatesOldInsertCache[key] = cache
		templatesOldInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the TemplatesOld.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TemplatesOld) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	templatesOldUpdateCacheMut.RLock()
	cache, cached := templatesOldUpdateCache[key]
	templatesOldUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			templatesOldAllColumns,
			templatesOldPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update templates_old, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"templates_old\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, templatesOldPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(templatesOldType, templatesOldMapping, append(wl, templatesOldPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update templates_old row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for templates_old")
	}

	if !cached {
		templatesOldUpdateCacheMut.Lock()
		templatesOldUpdateCache[key] = cache
		templatesOldUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q templatesOldQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for templates_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for templates_old")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TemplatesOldSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), templatesOldPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"templates_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, templatesOldPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in templatesOld slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all templatesOld")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TemplatesOld) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no templates_old provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(templatesOldColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	templatesOldUpsertCacheMut.RLock()
	cache, cached := templatesOldUpsertCache[key]
	templatesOldUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			templatesOldAllColumns,
			templatesOldColumnsWithDefault,
			templatesOldColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			templatesOldAllColumns,
			templatesOldPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert templates_old, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(templatesOldPrimaryKeyColumns))
			copy(conflict, templatesOldPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"templates_old\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(templatesOldType, templatesOldMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(templatesOldType, templatesOldMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert templates_old")
	}

	if !cached {
		templatesOldUpsertCacheMut.Lock()
		templatesOldUpsertCache[key] = cache
		templatesOldUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single TemplatesOld record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TemplatesOld) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no TemplatesOld provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), templatesOldPrimaryKeyMapping)
		sql = "DELETE FROM \"templates_old\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"templates_old\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(templatesOldType, templatesOldMapping, append(wl, templatesOldPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from templates_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for templates_old")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q templatesOldQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no templatesOldQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from templates_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for templates_old")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TemplatesOldSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(templatesOldBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), templatesOldPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"templates_old\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, templatesOldPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), templatesOldPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"templates_old\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, templatesOldPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from templatesOld slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for templates_old")
	}

	if len(templatesOldAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TemplatesOld) Reload(exec boil.Executor) error {
	ret, err := FindTemplatesOld(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TemplatesOldSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TemplatesOldSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), templatesOldPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"templates_old\".* FROM \"templates_old\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, templatesOldPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in TemplatesOldSlice")
	}

	*o = slice

	return nil
}

// TemplatesOldExists checks if the TemplatesOld row exists.
func TemplatesOldExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"templates_old\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if templates_old exists")
	}

	return exists, nil
}
