// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Syndicate is an object representing the database table.
type Syndicate struct {
	ID                           string          `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Type                         string          `boiler:"type" boil:"type" json:"type" toml:"type" yaml:"type"`
	FactionID                    string          `boiler:"faction_id" boil:"faction_id" json:"faction_id" toml:"faction_id" yaml:"faction_id"`
	FoundedByID                  string          `boiler:"founded_by_id" boil:"founded_by_id" json:"founded_by_id" toml:"founded_by_id" yaml:"founded_by_id"`
	CeoPlayerID                  null.String     `boiler:"ceo_player_id" boil:"ceo_player_id" json:"ceo_player_id,omitempty" toml:"ceo_player_id" yaml:"ceo_player_id,omitempty"`
	AdminID                      null.String     `boiler:"admin_id" boil:"admin_id" json:"admin_id,omitempty" toml:"admin_id" yaml:"admin_id,omitempty"`
	SeatCount                    int             `boiler:"seat_count" boil:"seat_count" json:"seat_count" toml:"seat_count" yaml:"seat_count"`
	Name                         string          `boiler:"name" boil:"name" json:"name" toml:"name" yaml:"name"`
	Symbol                       string          `boiler:"symbol" boil:"symbol" json:"symbol" toml:"symbol" yaml:"symbol"`
	LogoID                       null.String     `boiler:"logo_id" boil:"logo_id" json:"logo_id,omitempty" toml:"logo_id" yaml:"logo_id,omitempty"`
	JoinFee                      decimal.Decimal `boiler:"join_fee" boil:"join_fee" json:"join_fee" toml:"join_fee" yaml:"join_fee"`
	MonthlyDues                  decimal.Decimal `boiler:"monthly_dues" boil:"monthly_dues" json:"monthly_dues" toml:"monthly_dues" yaml:"monthly_dues"`
	DeployingMemberCutPercentage decimal.Decimal `boiler:"deploying_member_cut_percentage" boil:"deploying_member_cut_percentage" json:"deploying_member_cut_percentage" toml:"deploying_member_cut_percentage" yaml:"deploying_member_cut_percentage"`
	MemberAssistCutPercentage    decimal.Decimal `boiler:"member_assist_cut_percentage" boil:"member_assist_cut_percentage" json:"member_assist_cut_percentage" toml:"member_assist_cut_percentage" yaml:"member_assist_cut_percentage"`
	MechOwnerCutPercentage       decimal.Decimal `boiler:"mech_owner_cut_percentage" boil:"mech_owner_cut_percentage" json:"mech_owner_cut_percentage" toml:"mech_owner_cut_percentage" yaml:"mech_owner_cut_percentage"`
	SyndicateCutPercentage       decimal.Decimal `boiler:"syndicate_cut_percentage" boil:"syndicate_cut_percentage" json:"syndicate_cut_percentage" toml:"syndicate_cut_percentage" yaml:"syndicate_cut_percentage"`
	CreatedAt                    time.Time       `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                    time.Time       `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt                    null.Time       `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *syndicateR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L syndicateL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SyndicateColumns = struct {
	ID                           string
	Type                         string
	FactionID                    string
	FoundedByID                  string
	CeoPlayerID                  string
	AdminID                      string
	SeatCount                    string
	Name                         string
	Symbol                       string
	LogoID                       string
	JoinFee                      string
	MonthlyDues                  string
	DeployingMemberCutPercentage string
	MemberAssistCutPercentage    string
	MechOwnerCutPercentage       string
	SyndicateCutPercentage       string
	CreatedAt                    string
	UpdatedAt                    string
	DeletedAt                    string
}{
	ID:                           "id",
	Type:                         "type",
	FactionID:                    "faction_id",
	FoundedByID:                  "founded_by_id",
	CeoPlayerID:                  "ceo_player_id",
	AdminID:                      "admin_id",
	SeatCount:                    "seat_count",
	Name:                         "name",
	Symbol:                       "symbol",
	LogoID:                       "logo_id",
	JoinFee:                      "join_fee",
	MonthlyDues:                  "monthly_dues",
	DeployingMemberCutPercentage: "deploying_member_cut_percentage",
	MemberAssistCutPercentage:    "member_assist_cut_percentage",
	MechOwnerCutPercentage:       "mech_owner_cut_percentage",
	SyndicateCutPercentage:       "syndicate_cut_percentage",
	CreatedAt:                    "created_at",
	UpdatedAt:                    "updated_at",
	DeletedAt:                    "deleted_at",
}

var SyndicateTableColumns = struct {
	ID                           string
	Type                         string
	FactionID                    string
	FoundedByID                  string
	CeoPlayerID                  string
	AdminID                      string
	SeatCount                    string
	Name                         string
	Symbol                       string
	LogoID                       string
	JoinFee                      string
	MonthlyDues                  string
	DeployingMemberCutPercentage string
	MemberAssistCutPercentage    string
	MechOwnerCutPercentage       string
	SyndicateCutPercentage       string
	CreatedAt                    string
	UpdatedAt                    string
	DeletedAt                    string
}{
	ID:                           "syndicates.id",
	Type:                         "syndicates.type",
	FactionID:                    "syndicates.faction_id",
	FoundedByID:                  "syndicates.founded_by_id",
	CeoPlayerID:                  "syndicates.ceo_player_id",
	AdminID:                      "syndicates.admin_id",
	SeatCount:                    "syndicates.seat_count",
	Name:                         "syndicates.name",
	Symbol:                       "syndicates.symbol",
	LogoID:                       "syndicates.logo_id",
	JoinFee:                      "syndicates.join_fee",
	MonthlyDues:                  "syndicates.monthly_dues",
	DeployingMemberCutPercentage: "syndicates.deploying_member_cut_percentage",
	MemberAssistCutPercentage:    "syndicates.member_assist_cut_percentage",
	MechOwnerCutPercentage:       "syndicates.mech_owner_cut_percentage",
	SyndicateCutPercentage:       "syndicates.syndicate_cut_percentage",
	CreatedAt:                    "syndicates.created_at",
	UpdatedAt:                    "syndicates.updated_at",
	DeletedAt:                    "syndicates.deleted_at",
}

// Generated where

var SyndicateWhere = struct {
	ID                           whereHelperstring
	Type                         whereHelperstring
	FactionID                    whereHelperstring
	FoundedByID                  whereHelperstring
	CeoPlayerID                  whereHelpernull_String
	AdminID                      whereHelpernull_String
	SeatCount                    whereHelperint
	Name                         whereHelperstring
	Symbol                       whereHelperstring
	LogoID                       whereHelpernull_String
	JoinFee                      whereHelperdecimal_Decimal
	MonthlyDues                  whereHelperdecimal_Decimal
	DeployingMemberCutPercentage whereHelperdecimal_Decimal
	MemberAssistCutPercentage    whereHelperdecimal_Decimal
	MechOwnerCutPercentage       whereHelperdecimal_Decimal
	SyndicateCutPercentage       whereHelperdecimal_Decimal
	CreatedAt                    whereHelpertime_Time
	UpdatedAt                    whereHelpertime_Time
	DeletedAt                    whereHelpernull_Time
}{
	ID:                           whereHelperstring{field: "\"syndicates\".\"id\""},
	Type:                         whereHelperstring{field: "\"syndicates\".\"type\""},
	FactionID:                    whereHelperstring{field: "\"syndicates\".\"faction_id\""},
	FoundedByID:                  whereHelperstring{field: "\"syndicates\".\"founded_by_id\""},
	CeoPlayerID:                  whereHelpernull_String{field: "\"syndicates\".\"ceo_player_id\""},
	AdminID:                      whereHelpernull_String{field: "\"syndicates\".\"admin_id\""},
	SeatCount:                    whereHelperint{field: "\"syndicates\".\"seat_count\""},
	Name:                         whereHelperstring{field: "\"syndicates\".\"name\""},
	Symbol:                       whereHelperstring{field: "\"syndicates\".\"symbol\""},
	LogoID:                       whereHelpernull_String{field: "\"syndicates\".\"logo_id\""},
	JoinFee:                      whereHelperdecimal_Decimal{field: "\"syndicates\".\"join_fee\""},
	MonthlyDues:                  whereHelperdecimal_Decimal{field: "\"syndicates\".\"monthly_dues\""},
	DeployingMemberCutPercentage: whereHelperdecimal_Decimal{field: "\"syndicates\".\"deploying_member_cut_percentage\""},
	MemberAssistCutPercentage:    whereHelperdecimal_Decimal{field: "\"syndicates\".\"member_assist_cut_percentage\""},
	MechOwnerCutPercentage:       whereHelperdecimal_Decimal{field: "\"syndicates\".\"mech_owner_cut_percentage\""},
	SyndicateCutPercentage:       whereHelperdecimal_Decimal{field: "\"syndicates\".\"syndicate_cut_percentage\""},
	CreatedAt:                    whereHelpertime_Time{field: "\"syndicates\".\"created_at\""},
	UpdatedAt:                    whereHelpertime_Time{field: "\"syndicates\".\"updated_at\""},
	DeletedAt:                    whereHelpernull_Time{field: "\"syndicates\".\"deleted_at\""},
}

// SyndicateRels is where relationship names are stored.
var SyndicateRels = struct {
	Admin                       string
	CeoPlayer                   string
	Faction                     string
	FoundedBy                   string
	Logo                        string
	Players                     string
	SyndicateCommittees         string
	SyndicateDirectors          string
	SyndicateElectionCandidates string
	SyndicateElections          string
	SyndicateMotions            string
	SyndicateRules              string
}{
	Admin:                       "Admin",
	CeoPlayer:                   "CeoPlayer",
	Faction:                     "Faction",
	FoundedBy:                   "FoundedBy",
	Logo:                        "Logo",
	Players:                     "Players",
	SyndicateCommittees:         "SyndicateCommittees",
	SyndicateDirectors:          "SyndicateDirectors",
	SyndicateElectionCandidates: "SyndicateElectionCandidates",
	SyndicateElections:          "SyndicateElections",
	SyndicateMotions:            "SyndicateMotions",
	SyndicateRules:              "SyndicateRules",
}

// syndicateR is where relationships are stored.
type syndicateR struct {
	Admin                       *Player                         `boiler:"Admin" boil:"Admin" json:"Admin" toml:"Admin" yaml:"Admin"`
	CeoPlayer                   *Player                         `boiler:"CeoPlayer" boil:"CeoPlayer" json:"CeoPlayer" toml:"CeoPlayer" yaml:"CeoPlayer"`
	Faction                     *Faction                        `boiler:"Faction" boil:"Faction" json:"Faction" toml:"Faction" yaml:"Faction"`
	FoundedBy                   *Player                         `boiler:"FoundedBy" boil:"FoundedBy" json:"FoundedBy" toml:"FoundedBy" yaml:"FoundedBy"`
	Logo                        *Blob                           `boiler:"Logo" boil:"Logo" json:"Logo" toml:"Logo" yaml:"Logo"`
	Players                     PlayerSlice                     `boiler:"Players" boil:"Players" json:"Players" toml:"Players" yaml:"Players"`
	SyndicateCommittees         SyndicateCommitteeSlice         `boiler:"SyndicateCommittees" boil:"SyndicateCommittees" json:"SyndicateCommittees" toml:"SyndicateCommittees" yaml:"SyndicateCommittees"`
	SyndicateDirectors          SyndicateDirectorSlice          `boiler:"SyndicateDirectors" boil:"SyndicateDirectors" json:"SyndicateDirectors" toml:"SyndicateDirectors" yaml:"SyndicateDirectors"`
	SyndicateElectionCandidates SyndicateElectionCandidateSlice `boiler:"SyndicateElectionCandidates" boil:"SyndicateElectionCandidates" json:"SyndicateElectionCandidates" toml:"SyndicateElectionCandidates" yaml:"SyndicateElectionCandidates"`
	SyndicateElections          SyndicateElectionSlice          `boiler:"SyndicateElections" boil:"SyndicateElections" json:"SyndicateElections" toml:"SyndicateElections" yaml:"SyndicateElections"`
	SyndicateMotions            SyndicateMotionSlice            `boiler:"SyndicateMotions" boil:"SyndicateMotions" json:"SyndicateMotions" toml:"SyndicateMotions" yaml:"SyndicateMotions"`
	SyndicateRules              SyndicateRuleSlice              `boiler:"SyndicateRules" boil:"SyndicateRules" json:"SyndicateRules" toml:"SyndicateRules" yaml:"SyndicateRules"`
}

// NewStruct creates a new relationship struct
func (*syndicateR) NewStruct() *syndicateR {
	return &syndicateR{}
}

// syndicateL is where Load methods for each relationship are stored.
type syndicateL struct{}

var (
	syndicateAllColumns            = []string{"id", "type", "faction_id", "founded_by_id", "ceo_player_id", "admin_id", "seat_count", "name", "symbol", "logo_id", "join_fee", "monthly_dues", "deploying_member_cut_percentage", "member_assist_cut_percentage", "mech_owner_cut_percentage", "syndicate_cut_percentage", "created_at", "updated_at", "deleted_at"}
	syndicateColumnsWithoutDefault = []string{"type", "faction_id", "founded_by_id", "name", "symbol"}
	syndicateColumnsWithDefault    = []string{"id", "ceo_player_id", "admin_id", "seat_count", "logo_id", "join_fee", "monthly_dues", "deploying_member_cut_percentage", "member_assist_cut_percentage", "mech_owner_cut_percentage", "syndicate_cut_percentage", "created_at", "updated_at", "deleted_at"}
	syndicatePrimaryKeyColumns     = []string{"id"}
	syndicateGeneratedColumns      = []string{}
)

type (
	// SyndicateSlice is an alias for a slice of pointers to Syndicate.
	// This should almost always be used instead of []Syndicate.
	SyndicateSlice []*Syndicate
	// SyndicateHook is the signature for custom Syndicate hook methods
	SyndicateHook func(boil.Executor, *Syndicate) error

	syndicateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	syndicateType                 = reflect.TypeOf(&Syndicate{})
	syndicateMapping              = queries.MakeStructMapping(syndicateType)
	syndicatePrimaryKeyMapping, _ = queries.BindMapping(syndicateType, syndicateMapping, syndicatePrimaryKeyColumns)
	syndicateInsertCacheMut       sync.RWMutex
	syndicateInsertCache          = make(map[string]insertCache)
	syndicateUpdateCacheMut       sync.RWMutex
	syndicateUpdateCache          = make(map[string]updateCache)
	syndicateUpsertCacheMut       sync.RWMutex
	syndicateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var syndicateAfterSelectHooks []SyndicateHook

var syndicateBeforeInsertHooks []SyndicateHook
var syndicateAfterInsertHooks []SyndicateHook

var syndicateBeforeUpdateHooks []SyndicateHook
var syndicateAfterUpdateHooks []SyndicateHook

var syndicateBeforeDeleteHooks []SyndicateHook
var syndicateAfterDeleteHooks []SyndicateHook

var syndicateBeforeUpsertHooks []SyndicateHook
var syndicateAfterUpsertHooks []SyndicateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Syndicate) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Syndicate) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Syndicate) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Syndicate) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Syndicate) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Syndicate) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Syndicate) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Syndicate) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Syndicate) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSyndicateHook registers your hook function for all future operations.
func AddSyndicateHook(hookPoint boil.HookPoint, syndicateHook SyndicateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		syndicateAfterSelectHooks = append(syndicateAfterSelectHooks, syndicateHook)
	case boil.BeforeInsertHook:
		syndicateBeforeInsertHooks = append(syndicateBeforeInsertHooks, syndicateHook)
	case boil.AfterInsertHook:
		syndicateAfterInsertHooks = append(syndicateAfterInsertHooks, syndicateHook)
	case boil.BeforeUpdateHook:
		syndicateBeforeUpdateHooks = append(syndicateBeforeUpdateHooks, syndicateHook)
	case boil.AfterUpdateHook:
		syndicateAfterUpdateHooks = append(syndicateAfterUpdateHooks, syndicateHook)
	case boil.BeforeDeleteHook:
		syndicateBeforeDeleteHooks = append(syndicateBeforeDeleteHooks, syndicateHook)
	case boil.AfterDeleteHook:
		syndicateAfterDeleteHooks = append(syndicateAfterDeleteHooks, syndicateHook)
	case boil.BeforeUpsertHook:
		syndicateBeforeUpsertHooks = append(syndicateBeforeUpsertHooks, syndicateHook)
	case boil.AfterUpsertHook:
		syndicateAfterUpsertHooks = append(syndicateAfterUpsertHooks, syndicateHook)
	}
}

// One returns a single syndicate record from the query.
func (q syndicateQuery) One(exec boil.Executor) (*Syndicate, error) {
	o := &Syndicate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for syndicates")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Syndicate records from the query.
func (q syndicateQuery) All(exec boil.Executor) (SyndicateSlice, error) {
	var o []*Syndicate

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Syndicate slice")
	}

	if len(syndicateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Syndicate records in the query.
func (q syndicateQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count syndicates rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q syndicateQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if syndicates exists")
	}

	return count > 0, nil
}

// Admin pointed to by the foreign key.
func (o *Syndicate) Admin(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AdminID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// CeoPlayer pointed to by the foreign key.
func (o *Syndicate) CeoPlayer(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CeoPlayerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// Faction pointed to by the foreign key.
func (o *Syndicate) Faction(mods ...qm.QueryMod) factionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FactionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Factions(queryMods...)
	queries.SetFrom(query.Query, "\"factions\"")

	return query
}

// FoundedBy pointed to by the foreign key.
func (o *Syndicate) FoundedBy(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FoundedByID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// Logo pointed to by the foreign key.
func (o *Syndicate) Logo(mods ...qm.QueryMod) blobQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LogoID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Blobs(queryMods...)
	queries.SetFrom(query.Query, "\"blobs\"")

	return query
}

// Players retrieves all the player's Players with an executor.
func (o *Syndicate) Players(mods ...qm.QueryMod) playerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"players\".\"syndicate_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"players\".\"deleted_at\""),
	)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"players\".*"})
	}

	return query
}

// SyndicateCommittees retrieves all the syndicate_committee's SyndicateCommittees with an executor.
func (o *Syndicate) SyndicateCommittees(mods ...qm.QueryMod) syndicateCommitteeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"syndicate_committees\".\"syndicate_id\"=?", o.ID),
	)

	query := SyndicateCommittees(queryMods...)
	queries.SetFrom(query.Query, "\"syndicate_committees\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"syndicate_committees\".*"})
	}

	return query
}

// SyndicateDirectors retrieves all the syndicate_director's SyndicateDirectors with an executor.
func (o *Syndicate) SyndicateDirectors(mods ...qm.QueryMod) syndicateDirectorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"syndicate_directors\".\"syndicate_id\"=?", o.ID),
	)

	query := SyndicateDirectors(queryMods...)
	queries.SetFrom(query.Query, "\"syndicate_directors\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"syndicate_directors\".*"})
	}

	return query
}

// SyndicateElectionCandidates retrieves all the syndicate_election_candidate's SyndicateElectionCandidates with an executor.
func (o *Syndicate) SyndicateElectionCandidates(mods ...qm.QueryMod) syndicateElectionCandidateQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"syndicate_election_candidates\".\"syndicate_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"syndicate_election_candidates\".\"deleted_at\""),
	)

	query := SyndicateElectionCandidates(queryMods...)
	queries.SetFrom(query.Query, "\"syndicate_election_candidates\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"syndicate_election_candidates\".*"})
	}

	return query
}

// SyndicateElections retrieves all the syndicate_election's SyndicateElections with an executor.
func (o *Syndicate) SyndicateElections(mods ...qm.QueryMod) syndicateElectionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"syndicate_elections\".\"syndicate_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"syndicate_elections\".\"deleted_at\""),
	)

	query := SyndicateElections(queryMods...)
	queries.SetFrom(query.Query, "\"syndicate_elections\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"syndicate_elections\".*"})
	}

	return query
}

// SyndicateMotions retrieves all the syndicate_motion's SyndicateMotions with an executor.
func (o *Syndicate) SyndicateMotions(mods ...qm.QueryMod) syndicateMotionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"syndicate_motions\".\"syndicate_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"syndicate_motions\".\"deleted_at\""),
	)

	query := SyndicateMotions(queryMods...)
	queries.SetFrom(query.Query, "\"syndicate_motions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"syndicate_motions\".*"})
	}

	return query
}

// SyndicateRules retrieves all the syndicate_rule's SyndicateRules with an executor.
func (o *Syndicate) SyndicateRules(mods ...qm.QueryMod) syndicateRuleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"syndicate_rules\".\"syndicate_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"syndicate_rules\".\"deleted_at\""),
	)

	query := SyndicateRules(queryMods...)
	queries.SetFrom(query.Query, "\"syndicate_rules\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"syndicate_rules\".*"})
	}

	return query
}

// LoadAdmin allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateL) LoadAdmin(e boil.Executor, singular bool, maybeSyndicate interface{}, mods queries.Applicator) error {
	var slice []*Syndicate
	var object *Syndicate

	if singular {
		object = maybeSyndicate.(*Syndicate)
	} else {
		slice = *maybeSyndicate.(*[]*Syndicate)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateR{}
		}
		if !queries.IsNil(object.AdminID) {
			args = append(args, object.AdminID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AdminID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AdminID) {
				args = append(args, obj.AdminID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(syndicateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Admin = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.AdminSyndicates = append(foreign.R.AdminSyndicates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AdminID, foreign.ID) {
				local.R.Admin = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.AdminSyndicates = append(foreign.R.AdminSyndicates, local)
				break
			}
		}
	}

	return nil
}

// LoadCeoPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateL) LoadCeoPlayer(e boil.Executor, singular bool, maybeSyndicate interface{}, mods queries.Applicator) error {
	var slice []*Syndicate
	var object *Syndicate

	if singular {
		object = maybeSyndicate.(*Syndicate)
	} else {
		slice = *maybeSyndicate.(*[]*Syndicate)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateR{}
		}
		if !queries.IsNil(object.CeoPlayerID) {
			args = append(args, object.CeoPlayerID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CeoPlayerID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CeoPlayerID) {
				args = append(args, obj.CeoPlayerID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(syndicateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CeoPlayer = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.CeoPlayerSyndicates = append(foreign.R.CeoPlayerSyndicates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CeoPlayerID, foreign.ID) {
				local.R.CeoPlayer = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.CeoPlayerSyndicates = append(foreign.R.CeoPlayerSyndicates, local)
				break
			}
		}
	}

	return nil
}

// LoadFaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateL) LoadFaction(e boil.Executor, singular bool, maybeSyndicate interface{}, mods queries.Applicator) error {
	var slice []*Syndicate
	var object *Syndicate

	if singular {
		object = maybeSyndicate.(*Syndicate)
	} else {
		slice = *maybeSyndicate.(*[]*Syndicate)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateR{}
		}
		args = append(args, object.FactionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateR{}
			}

			for _, a := range args {
				if a == obj.FactionID {
					continue Outer
				}
			}

			args = append(args, obj.FactionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`factions`),
		qm.WhereIn(`factions.id in ?`, args...),
		qmhelper.WhereIsNull(`factions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Faction")
	}

	var resultSlice []*Faction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Faction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for factions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for factions")
	}

	if len(syndicateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Faction = foreign
		if foreign.R == nil {
			foreign.R = &factionR{}
		}
		foreign.R.Syndicates = append(foreign.R.Syndicates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FactionID == foreign.ID {
				local.R.Faction = foreign
				if foreign.R == nil {
					foreign.R = &factionR{}
				}
				foreign.R.Syndicates = append(foreign.R.Syndicates, local)
				break
			}
		}
	}

	return nil
}

// LoadFoundedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateL) LoadFoundedBy(e boil.Executor, singular bool, maybeSyndicate interface{}, mods queries.Applicator) error {
	var slice []*Syndicate
	var object *Syndicate

	if singular {
		object = maybeSyndicate.(*Syndicate)
	} else {
		slice = *maybeSyndicate.(*[]*Syndicate)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateR{}
		}
		args = append(args, object.FoundedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateR{}
			}

			for _, a := range args {
				if a == obj.FoundedByID {
					continue Outer
				}
			}

			args = append(args, obj.FoundedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(syndicateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FoundedBy = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.FoundedBySyndicates = append(foreign.R.FoundedBySyndicates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FoundedByID == foreign.ID {
				local.R.FoundedBy = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.FoundedBySyndicates = append(foreign.R.FoundedBySyndicates, local)
				break
			}
		}
	}

	return nil
}

// LoadLogo allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateL) LoadLogo(e boil.Executor, singular bool, maybeSyndicate interface{}, mods queries.Applicator) error {
	var slice []*Syndicate
	var object *Syndicate

	if singular {
		object = maybeSyndicate.(*Syndicate)
	} else {
		slice = *maybeSyndicate.(*[]*Syndicate)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateR{}
		}
		if !queries.IsNil(object.LogoID) {
			args = append(args, object.LogoID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.LogoID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.LogoID) {
				args = append(args, obj.LogoID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blobs`),
		qm.WhereIn(`blobs.id in ?`, args...),
		qmhelper.WhereIsNull(`blobs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Blob")
	}

	var resultSlice []*Blob
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Blob")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blobs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blobs")
	}

	if len(syndicateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Logo = foreign
		if foreign.R == nil {
			foreign.R = &blobR{}
		}
		foreign.R.LogoSyndicates = append(foreign.R.LogoSyndicates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.LogoID, foreign.ID) {
				local.R.Logo = foreign
				if foreign.R == nil {
					foreign.R = &blobR{}
				}
				foreign.R.LogoSyndicates = append(foreign.R.LogoSyndicates, local)
				break
			}
		}
	}

	return nil
}

// LoadPlayers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (syndicateL) LoadPlayers(e boil.Executor, singular bool, maybeSyndicate interface{}, mods queries.Applicator) error {
	var slice []*Syndicate
	var object *Syndicate

	if singular {
		object = maybeSyndicate.(*Syndicate)
	} else {
		slice = *maybeSyndicate.(*[]*Syndicate)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.syndicate_id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load players")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice players")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(playerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Players = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playerR{}
			}
			foreign.R.Syndicate = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SyndicateID) {
				local.R.Players = append(local.R.Players, foreign)
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.Syndicate = local
				break
			}
		}
	}

	return nil
}

// LoadSyndicateCommittees allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (syndicateL) LoadSyndicateCommittees(e boil.Executor, singular bool, maybeSyndicate interface{}, mods queries.Applicator) error {
	var slice []*Syndicate
	var object *Syndicate

	if singular {
		object = maybeSyndicate.(*Syndicate)
	} else {
		slice = *maybeSyndicate.(*[]*Syndicate)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicate_committees`),
		qm.WhereIn(`syndicate_committees.syndicate_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load syndicate_committees")
	}

	var resultSlice []*SyndicateCommittee
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice syndicate_committees")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on syndicate_committees")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicate_committees")
	}

	if len(syndicateCommitteeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SyndicateCommittees = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &syndicateCommitteeR{}
			}
			foreign.R.Syndicate = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SyndicateID {
				local.R.SyndicateCommittees = append(local.R.SyndicateCommittees, foreign)
				if foreign.R == nil {
					foreign.R = &syndicateCommitteeR{}
				}
				foreign.R.Syndicate = local
				break
			}
		}
	}

	return nil
}

// LoadSyndicateDirectors allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (syndicateL) LoadSyndicateDirectors(e boil.Executor, singular bool, maybeSyndicate interface{}, mods queries.Applicator) error {
	var slice []*Syndicate
	var object *Syndicate

	if singular {
		object = maybeSyndicate.(*Syndicate)
	} else {
		slice = *maybeSyndicate.(*[]*Syndicate)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicate_directors`),
		qm.WhereIn(`syndicate_directors.syndicate_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load syndicate_directors")
	}

	var resultSlice []*SyndicateDirector
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice syndicate_directors")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on syndicate_directors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicate_directors")
	}

	if len(syndicateDirectorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SyndicateDirectors = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &syndicateDirectorR{}
			}
			foreign.R.Syndicate = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SyndicateID {
				local.R.SyndicateDirectors = append(local.R.SyndicateDirectors, foreign)
				if foreign.R == nil {
					foreign.R = &syndicateDirectorR{}
				}
				foreign.R.Syndicate = local
				break
			}
		}
	}

	return nil
}

// LoadSyndicateElectionCandidates allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (syndicateL) LoadSyndicateElectionCandidates(e boil.Executor, singular bool, maybeSyndicate interface{}, mods queries.Applicator) error {
	var slice []*Syndicate
	var object *Syndicate

	if singular {
		object = maybeSyndicate.(*Syndicate)
	} else {
		slice = *maybeSyndicate.(*[]*Syndicate)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicate_election_candidates`),
		qm.WhereIn(`syndicate_election_candidates.syndicate_id in ?`, args...),
		qmhelper.WhereIsNull(`syndicate_election_candidates.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load syndicate_election_candidates")
	}

	var resultSlice []*SyndicateElectionCandidate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice syndicate_election_candidates")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on syndicate_election_candidates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicate_election_candidates")
	}

	if len(syndicateElectionCandidateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SyndicateElectionCandidates = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &syndicateElectionCandidateR{}
			}
			foreign.R.Syndicate = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SyndicateID {
				local.R.SyndicateElectionCandidates = append(local.R.SyndicateElectionCandidates, foreign)
				if foreign.R == nil {
					foreign.R = &syndicateElectionCandidateR{}
				}
				foreign.R.Syndicate = local
				break
			}
		}
	}

	return nil
}

// LoadSyndicateElections allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (syndicateL) LoadSyndicateElections(e boil.Executor, singular bool, maybeSyndicate interface{}, mods queries.Applicator) error {
	var slice []*Syndicate
	var object *Syndicate

	if singular {
		object = maybeSyndicate.(*Syndicate)
	} else {
		slice = *maybeSyndicate.(*[]*Syndicate)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicate_elections`),
		qm.WhereIn(`syndicate_elections.syndicate_id in ?`, args...),
		qmhelper.WhereIsNull(`syndicate_elections.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load syndicate_elections")
	}

	var resultSlice []*SyndicateElection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice syndicate_elections")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on syndicate_elections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicate_elections")
	}

	if len(syndicateElectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SyndicateElections = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &syndicateElectionR{}
			}
			foreign.R.Syndicate = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SyndicateID {
				local.R.SyndicateElections = append(local.R.SyndicateElections, foreign)
				if foreign.R == nil {
					foreign.R = &syndicateElectionR{}
				}
				foreign.R.Syndicate = local
				break
			}
		}
	}

	return nil
}

// LoadSyndicateMotions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (syndicateL) LoadSyndicateMotions(e boil.Executor, singular bool, maybeSyndicate interface{}, mods queries.Applicator) error {
	var slice []*Syndicate
	var object *Syndicate

	if singular {
		object = maybeSyndicate.(*Syndicate)
	} else {
		slice = *maybeSyndicate.(*[]*Syndicate)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicate_motions`),
		qm.WhereIn(`syndicate_motions.syndicate_id in ?`, args...),
		qmhelper.WhereIsNull(`syndicate_motions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load syndicate_motions")
	}

	var resultSlice []*SyndicateMotion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice syndicate_motions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on syndicate_motions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicate_motions")
	}

	if len(syndicateMotionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SyndicateMotions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &syndicateMotionR{}
			}
			foreign.R.Syndicate = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SyndicateID {
				local.R.SyndicateMotions = append(local.R.SyndicateMotions, foreign)
				if foreign.R == nil {
					foreign.R = &syndicateMotionR{}
				}
				foreign.R.Syndicate = local
				break
			}
		}
	}

	return nil
}

// LoadSyndicateRules allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (syndicateL) LoadSyndicateRules(e boil.Executor, singular bool, maybeSyndicate interface{}, mods queries.Applicator) error {
	var slice []*Syndicate
	var object *Syndicate

	if singular {
		object = maybeSyndicate.(*Syndicate)
	} else {
		slice = *maybeSyndicate.(*[]*Syndicate)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicate_rules`),
		qm.WhereIn(`syndicate_rules.syndicate_id in ?`, args...),
		qmhelper.WhereIsNull(`syndicate_rules.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load syndicate_rules")
	}

	var resultSlice []*SyndicateRule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice syndicate_rules")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on syndicate_rules")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicate_rules")
	}

	if len(syndicateRuleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SyndicateRules = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &syndicateRuleR{}
			}
			foreign.R.Syndicate = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SyndicateID {
				local.R.SyndicateRules = append(local.R.SyndicateRules, foreign)
				if foreign.R == nil {
					foreign.R = &syndicateRuleR{}
				}
				foreign.R.Syndicate = local
				break
			}
		}
	}

	return nil
}

// SetAdmin of the syndicate to the related item.
// Sets o.R.Admin to related.
// Adds o to related.R.AdminSyndicates.
func (o *Syndicate) SetAdmin(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"admin_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicatePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AdminID, related.ID)
	if o.R == nil {
		o.R = &syndicateR{
			Admin: related,
		}
	} else {
		o.R.Admin = related
	}

	if related.R == nil {
		related.R = &playerR{
			AdminSyndicates: SyndicateSlice{o},
		}
	} else {
		related.R.AdminSyndicates = append(related.R.AdminSyndicates, o)
	}

	return nil
}

// RemoveAdmin relationship.
// Sets o.R.Admin to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Syndicate) RemoveAdmin(exec boil.Executor, related *Player) error {
	var err error

	queries.SetScanner(&o.AdminID, nil)
	if _, err = o.Update(exec, boil.Whitelist("admin_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Admin = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AdminSyndicates {
		if queries.Equal(o.AdminID, ri.AdminID) {
			continue
		}

		ln := len(related.R.AdminSyndicates)
		if ln > 1 && i < ln-1 {
			related.R.AdminSyndicates[i] = related.R.AdminSyndicates[ln-1]
		}
		related.R.AdminSyndicates = related.R.AdminSyndicates[:ln-1]
		break
	}
	return nil
}

// SetCeoPlayer of the syndicate to the related item.
// Sets o.R.CeoPlayer to related.
// Adds o to related.R.CeoPlayerSyndicates.
func (o *Syndicate) SetCeoPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"ceo_player_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicatePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CeoPlayerID, related.ID)
	if o.R == nil {
		o.R = &syndicateR{
			CeoPlayer: related,
		}
	} else {
		o.R.CeoPlayer = related
	}

	if related.R == nil {
		related.R = &playerR{
			CeoPlayerSyndicates: SyndicateSlice{o},
		}
	} else {
		related.R.CeoPlayerSyndicates = append(related.R.CeoPlayerSyndicates, o)
	}

	return nil
}

// RemoveCeoPlayer relationship.
// Sets o.R.CeoPlayer to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Syndicate) RemoveCeoPlayer(exec boil.Executor, related *Player) error {
	var err error

	queries.SetScanner(&o.CeoPlayerID, nil)
	if _, err = o.Update(exec, boil.Whitelist("ceo_player_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CeoPlayer = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CeoPlayerSyndicates {
		if queries.Equal(o.CeoPlayerID, ri.CeoPlayerID) {
			continue
		}

		ln := len(related.R.CeoPlayerSyndicates)
		if ln > 1 && i < ln-1 {
			related.R.CeoPlayerSyndicates[i] = related.R.CeoPlayerSyndicates[ln-1]
		}
		related.R.CeoPlayerSyndicates = related.R.CeoPlayerSyndicates[:ln-1]
		break
	}
	return nil
}

// SetFaction of the syndicate to the related item.
// Sets o.R.Faction to related.
// Adds o to related.R.Syndicates.
func (o *Syndicate) SetFaction(exec boil.Executor, insert bool, related *Faction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"faction_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicatePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FactionID = related.ID
	if o.R == nil {
		o.R = &syndicateR{
			Faction: related,
		}
	} else {
		o.R.Faction = related
	}

	if related.R == nil {
		related.R = &factionR{
			Syndicates: SyndicateSlice{o},
		}
	} else {
		related.R.Syndicates = append(related.R.Syndicates, o)
	}

	return nil
}

// SetFoundedBy of the syndicate to the related item.
// Sets o.R.FoundedBy to related.
// Adds o to related.R.FoundedBySyndicates.
func (o *Syndicate) SetFoundedBy(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"founded_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicatePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FoundedByID = related.ID
	if o.R == nil {
		o.R = &syndicateR{
			FoundedBy: related,
		}
	} else {
		o.R.FoundedBy = related
	}

	if related.R == nil {
		related.R = &playerR{
			FoundedBySyndicates: SyndicateSlice{o},
		}
	} else {
		related.R.FoundedBySyndicates = append(related.R.FoundedBySyndicates, o)
	}

	return nil
}

// SetLogo of the syndicate to the related item.
// Sets o.R.Logo to related.
// Adds o to related.R.LogoSyndicates.
func (o *Syndicate) SetLogo(exec boil.Executor, insert bool, related *Blob) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"logo_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicatePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.LogoID, related.ID)
	if o.R == nil {
		o.R = &syndicateR{
			Logo: related,
		}
	} else {
		o.R.Logo = related
	}

	if related.R == nil {
		related.R = &blobR{
			LogoSyndicates: SyndicateSlice{o},
		}
	} else {
		related.R.LogoSyndicates = append(related.R.LogoSyndicates, o)
	}

	return nil
}

// RemoveLogo relationship.
// Sets o.R.Logo to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Syndicate) RemoveLogo(exec boil.Executor, related *Blob) error {
	var err error

	queries.SetScanner(&o.LogoID, nil)
	if _, err = o.Update(exec, boil.Whitelist("logo_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Logo = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.LogoSyndicates {
		if queries.Equal(o.LogoID, ri.LogoID) {
			continue
		}

		ln := len(related.R.LogoSyndicates)
		if ln > 1 && i < ln-1 {
			related.R.LogoSyndicates[i] = related.R.LogoSyndicates[ln-1]
		}
		related.R.LogoSyndicates = related.R.LogoSyndicates[:ln-1]
		break
	}
	return nil
}

// AddPlayers adds the given related objects to the existing relationships
// of the syndicate, optionally inserting them as new records.
// Appends related to o.R.Players.
// Sets related.R.Syndicate appropriately.
func (o *Syndicate) AddPlayers(exec boil.Executor, insert bool, related ...*Player) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SyndicateID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"players\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"syndicate_id"}),
				strmangle.WhereClause("\"", "\"", 2, playerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SyndicateID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &syndicateR{
			Players: related,
		}
	} else {
		o.R.Players = append(o.R.Players, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playerR{
				Syndicate: o,
			}
		} else {
			rel.R.Syndicate = o
		}
	}
	return nil
}

// SetPlayers removes all previously related items of the
// syndicate replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Syndicate's Players accordingly.
// Replaces o.R.Players with related.
// Sets related.R.Syndicate's Players accordingly.
func (o *Syndicate) SetPlayers(exec boil.Executor, insert bool, related ...*Player) error {
	query := "update \"players\" set \"syndicate_id\" = null where \"syndicate_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Players {
			queries.SetScanner(&rel.SyndicateID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Syndicate = nil
		}

		o.R.Players = nil
	}
	return o.AddPlayers(exec, insert, related...)
}

// RemovePlayers relationships from objects passed in.
// Removes related items from R.Players (uses pointer comparison, removal does not keep order)
// Sets related.R.Syndicate.
func (o *Syndicate) RemovePlayers(exec boil.Executor, related ...*Player) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SyndicateID, nil)
		if rel.R != nil {
			rel.R.Syndicate = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("syndicate_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Players {
			if rel != ri {
				continue
			}

			ln := len(o.R.Players)
			if ln > 1 && i < ln-1 {
				o.R.Players[i] = o.R.Players[ln-1]
			}
			o.R.Players = o.R.Players[:ln-1]
			break
		}
	}

	return nil
}

// AddSyndicateCommittees adds the given related objects to the existing relationships
// of the syndicate, optionally inserting them as new records.
// Appends related to o.R.SyndicateCommittees.
// Sets related.R.Syndicate appropriately.
func (o *Syndicate) AddSyndicateCommittees(exec boil.Executor, insert bool, related ...*SyndicateCommittee) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SyndicateID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"syndicate_committees\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"syndicate_id"}),
				strmangle.WhereClause("\"", "\"", 2, syndicateCommitteePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SyndicateID = o.ID
		}
	}

	if o.R == nil {
		o.R = &syndicateR{
			SyndicateCommittees: related,
		}
	} else {
		o.R.SyndicateCommittees = append(o.R.SyndicateCommittees, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &syndicateCommitteeR{
				Syndicate: o,
			}
		} else {
			rel.R.Syndicate = o
		}
	}
	return nil
}

// AddSyndicateDirectors adds the given related objects to the existing relationships
// of the syndicate, optionally inserting them as new records.
// Appends related to o.R.SyndicateDirectors.
// Sets related.R.Syndicate appropriately.
func (o *Syndicate) AddSyndicateDirectors(exec boil.Executor, insert bool, related ...*SyndicateDirector) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SyndicateID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"syndicate_directors\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"syndicate_id"}),
				strmangle.WhereClause("\"", "\"", 2, syndicateDirectorPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.SyndicateID, rel.PlayerID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SyndicateID = o.ID
		}
	}

	if o.R == nil {
		o.R = &syndicateR{
			SyndicateDirectors: related,
		}
	} else {
		o.R.SyndicateDirectors = append(o.R.SyndicateDirectors, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &syndicateDirectorR{
				Syndicate: o,
			}
		} else {
			rel.R.Syndicate = o
		}
	}
	return nil
}

// AddSyndicateElectionCandidates adds the given related objects to the existing relationships
// of the syndicate, optionally inserting them as new records.
// Appends related to o.R.SyndicateElectionCandidates.
// Sets related.R.Syndicate appropriately.
func (o *Syndicate) AddSyndicateElectionCandidates(exec boil.Executor, insert bool, related ...*SyndicateElectionCandidate) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SyndicateID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"syndicate_election_candidates\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"syndicate_id"}),
				strmangle.WhereClause("\"", "\"", 2, syndicateElectionCandidatePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.SyndicateElectionID, rel.CandidateID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SyndicateID = o.ID
		}
	}

	if o.R == nil {
		o.R = &syndicateR{
			SyndicateElectionCandidates: related,
		}
	} else {
		o.R.SyndicateElectionCandidates = append(o.R.SyndicateElectionCandidates, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &syndicateElectionCandidateR{
				Syndicate: o,
			}
		} else {
			rel.R.Syndicate = o
		}
	}
	return nil
}

// AddSyndicateElections adds the given related objects to the existing relationships
// of the syndicate, optionally inserting them as new records.
// Appends related to o.R.SyndicateElections.
// Sets related.R.Syndicate appropriately.
func (o *Syndicate) AddSyndicateElections(exec boil.Executor, insert bool, related ...*SyndicateElection) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SyndicateID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"syndicate_elections\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"syndicate_id"}),
				strmangle.WhereClause("\"", "\"", 2, syndicateElectionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SyndicateID = o.ID
		}
	}

	if o.R == nil {
		o.R = &syndicateR{
			SyndicateElections: related,
		}
	} else {
		o.R.SyndicateElections = append(o.R.SyndicateElections, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &syndicateElectionR{
				Syndicate: o,
			}
		} else {
			rel.R.Syndicate = o
		}
	}
	return nil
}

// AddSyndicateMotions adds the given related objects to the existing relationships
// of the syndicate, optionally inserting them as new records.
// Appends related to o.R.SyndicateMotions.
// Sets related.R.Syndicate appropriately.
func (o *Syndicate) AddSyndicateMotions(exec boil.Executor, insert bool, related ...*SyndicateMotion) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SyndicateID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"syndicate_motions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"syndicate_id"}),
				strmangle.WhereClause("\"", "\"", 2, syndicateMotionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SyndicateID = o.ID
		}
	}

	if o.R == nil {
		o.R = &syndicateR{
			SyndicateMotions: related,
		}
	} else {
		o.R.SyndicateMotions = append(o.R.SyndicateMotions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &syndicateMotionR{
				Syndicate: o,
			}
		} else {
			rel.R.Syndicate = o
		}
	}
	return nil
}

// AddSyndicateRules adds the given related objects to the existing relationships
// of the syndicate, optionally inserting them as new records.
// Appends related to o.R.SyndicateRules.
// Sets related.R.Syndicate appropriately.
func (o *Syndicate) AddSyndicateRules(exec boil.Executor, insert bool, related ...*SyndicateRule) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SyndicateID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"syndicate_rules\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"syndicate_id"}),
				strmangle.WhereClause("\"", "\"", 2, syndicateRulePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SyndicateID = o.ID
		}
	}

	if o.R == nil {
		o.R = &syndicateR{
			SyndicateRules: related,
		}
	} else {
		o.R.SyndicateRules = append(o.R.SyndicateRules, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &syndicateRuleR{
				Syndicate: o,
			}
		} else {
			rel.R.Syndicate = o
		}
	}
	return nil
}

// Syndicates retrieves all the records using an executor.
func Syndicates(mods ...qm.QueryMod) syndicateQuery {
	mods = append(mods, qm.From("\"syndicates\""), qmhelper.WhereIsNull("\"syndicates\".\"deleted_at\""))
	return syndicateQuery{NewQuery(mods...)}
}

// FindSyndicate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSyndicate(exec boil.Executor, iD string, selectCols ...string) (*Syndicate, error) {
	syndicateObj := &Syndicate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"syndicates\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, syndicateObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from syndicates")
	}

	if err = syndicateObj.doAfterSelectHooks(exec); err != nil {
		return syndicateObj, err
	}

	return syndicateObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Syndicate) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no syndicates provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syndicateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	syndicateInsertCacheMut.RLock()
	cache, cached := syndicateInsertCache[key]
	syndicateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			syndicateAllColumns,
			syndicateColumnsWithDefault,
			syndicateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(syndicateType, syndicateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(syndicateType, syndicateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"syndicates\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"syndicates\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into syndicates")
	}

	if !cached {
		syndicateInsertCacheMut.Lock()
		syndicateInsertCache[key] = cache
		syndicateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Syndicate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Syndicate) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	syndicateUpdateCacheMut.RLock()
	cache, cached := syndicateUpdateCache[key]
	syndicateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			syndicateAllColumns,
			syndicatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update syndicates, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"syndicates\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, syndicatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(syndicateType, syndicateMapping, append(wl, syndicatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update syndicates row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for syndicates")
	}

	if !cached {
		syndicateUpdateCacheMut.Lock()
		syndicateUpdateCache[key] = cache
		syndicateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q syndicateQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for syndicates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for syndicates")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SyndicateSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"syndicates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, syndicatePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in syndicate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all syndicate")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Syndicate) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no syndicates provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syndicateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	syndicateUpsertCacheMut.RLock()
	cache, cached := syndicateUpsertCache[key]
	syndicateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			syndicateAllColumns,
			syndicateColumnsWithDefault,
			syndicateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			syndicateAllColumns,
			syndicatePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert syndicates, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(syndicatePrimaryKeyColumns))
			copy(conflict, syndicatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"syndicates\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(syndicateType, syndicateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(syndicateType, syndicateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert syndicates")
	}

	if !cached {
		syndicateUpsertCacheMut.Lock()
		syndicateUpsertCache[key] = cache
		syndicateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Syndicate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Syndicate) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Syndicate provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), syndicatePrimaryKeyMapping)
		sql = "DELETE FROM \"syndicates\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"syndicates\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(syndicateType, syndicateMapping, append(wl, syndicatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from syndicates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for syndicates")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q syndicateQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no syndicateQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from syndicates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for syndicates")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SyndicateSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(syndicateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicatePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"syndicates\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syndicatePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicatePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"syndicates\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, syndicatePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from syndicate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for syndicates")
	}

	if len(syndicateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Syndicate) Reload(exec boil.Executor) error {
	ret, err := FindSyndicate(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SyndicateSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SyndicateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"syndicates\".* FROM \"syndicates\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syndicatePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in SyndicateSlice")
	}

	*o = slice

	return nil
}

// SyndicateExists checks if the Syndicate row exists.
func SyndicateExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"syndicates\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if syndicates exists")
	}

	return exists, nil
}
