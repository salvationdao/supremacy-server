// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BlueprintMechsOld is an object representing the database table.
type BlueprintMechsOld struct {
	ID               string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Label            string      `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	Slug             string      `boiler:"slug" boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	WeaponHardpoints int         `boiler:"weapon_hardpoints" boil:"weapon_hardpoints" json:"weapon_hardpoints" toml:"weapon_hardpoints" yaml:"weapon_hardpoints"`
	UtilitySlots     int         `boiler:"utility_slots" boil:"utility_slots" json:"utility_slots" toml:"utility_slots" yaml:"utility_slots"`
	Speed            int         `boiler:"speed" boil:"speed" json:"speed" toml:"speed" yaml:"speed"`
	MaxHitpoints     int         `boiler:"max_hitpoints" boil:"max_hitpoints" json:"max_hitpoints" toml:"max_hitpoints" yaml:"max_hitpoints"`
	DeletedAt        null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt        time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt        time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ModelID          string      `boiler:"model_id" boil:"model_id" json:"model_id" toml:"model_id" yaml:"model_id"`
	Collection       string      `boiler:"collection" boil:"collection" json:"collection" toml:"collection" yaml:"collection"`
	PowerCoreSize    string      `boiler:"power_core_size" boil:"power_core_size" json:"power_core_size" toml:"power_core_size" yaml:"power_core_size"`
	Tier             string      `boiler:"tier" boil:"tier" json:"tier" toml:"tier" yaml:"tier"`
	AvailabilityID   null.String `boiler:"availability_id" boil:"availability_id" json:"availability_id,omitempty" toml:"availability_id" yaml:"availability_id,omitempty"`

	R *blueprintMechsOldR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L blueprintMechsOldL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlueprintMechsOldColumns = struct {
	ID               string
	Label            string
	Slug             string
	WeaponHardpoints string
	UtilitySlots     string
	Speed            string
	MaxHitpoints     string
	DeletedAt        string
	UpdatedAt        string
	CreatedAt        string
	ModelID          string
	Collection       string
	PowerCoreSize    string
	Tier             string
	AvailabilityID   string
}{
	ID:               "id",
	Label:            "label",
	Slug:             "slug",
	WeaponHardpoints: "weapon_hardpoints",
	UtilitySlots:     "utility_slots",
	Speed:            "speed",
	MaxHitpoints:     "max_hitpoints",
	DeletedAt:        "deleted_at",
	UpdatedAt:        "updated_at",
	CreatedAt:        "created_at",
	ModelID:          "model_id",
	Collection:       "collection",
	PowerCoreSize:    "power_core_size",
	Tier:             "tier",
	AvailabilityID:   "availability_id",
}

var BlueprintMechsOldTableColumns = struct {
	ID               string
	Label            string
	Slug             string
	WeaponHardpoints string
	UtilitySlots     string
	Speed            string
	MaxHitpoints     string
	DeletedAt        string
	UpdatedAt        string
	CreatedAt        string
	ModelID          string
	Collection       string
	PowerCoreSize    string
	Tier             string
	AvailabilityID   string
}{
	ID:               "blueprint_mechs_old.id",
	Label:            "blueprint_mechs_old.label",
	Slug:             "blueprint_mechs_old.slug",
	WeaponHardpoints: "blueprint_mechs_old.weapon_hardpoints",
	UtilitySlots:     "blueprint_mechs_old.utility_slots",
	Speed:            "blueprint_mechs_old.speed",
	MaxHitpoints:     "blueprint_mechs_old.max_hitpoints",
	DeletedAt:        "blueprint_mechs_old.deleted_at",
	UpdatedAt:        "blueprint_mechs_old.updated_at",
	CreatedAt:        "blueprint_mechs_old.created_at",
	ModelID:          "blueprint_mechs_old.model_id",
	Collection:       "blueprint_mechs_old.collection",
	PowerCoreSize:    "blueprint_mechs_old.power_core_size",
	Tier:             "blueprint_mechs_old.tier",
	AvailabilityID:   "blueprint_mechs_old.availability_id",
}

// Generated where

var BlueprintMechsOldWhere = struct {
	ID               whereHelperstring
	Label            whereHelperstring
	Slug             whereHelperstring
	WeaponHardpoints whereHelperint
	UtilitySlots     whereHelperint
	Speed            whereHelperint
	MaxHitpoints     whereHelperint
	DeletedAt        whereHelpernull_Time
	UpdatedAt        whereHelpertime_Time
	CreatedAt        whereHelpertime_Time
	ModelID          whereHelperstring
	Collection       whereHelperstring
	PowerCoreSize    whereHelperstring
	Tier             whereHelperstring
	AvailabilityID   whereHelpernull_String
}{
	ID:               whereHelperstring{field: "\"blueprint_mechs_old\".\"id\""},
	Label:            whereHelperstring{field: "\"blueprint_mechs_old\".\"label\""},
	Slug:             whereHelperstring{field: "\"blueprint_mechs_old\".\"slug\""},
	WeaponHardpoints: whereHelperint{field: "\"blueprint_mechs_old\".\"weapon_hardpoints\""},
	UtilitySlots:     whereHelperint{field: "\"blueprint_mechs_old\".\"utility_slots\""},
	Speed:            whereHelperint{field: "\"blueprint_mechs_old\".\"speed\""},
	MaxHitpoints:     whereHelperint{field: "\"blueprint_mechs_old\".\"max_hitpoints\""},
	DeletedAt:        whereHelpernull_Time{field: "\"blueprint_mechs_old\".\"deleted_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"blueprint_mechs_old\".\"updated_at\""},
	CreatedAt:        whereHelpertime_Time{field: "\"blueprint_mechs_old\".\"created_at\""},
	ModelID:          whereHelperstring{field: "\"blueprint_mechs_old\".\"model_id\""},
	Collection:       whereHelperstring{field: "\"blueprint_mechs_old\".\"collection\""},
	PowerCoreSize:    whereHelperstring{field: "\"blueprint_mechs_old\".\"power_core_size\""},
	Tier:             whereHelperstring{field: "\"blueprint_mechs_old\".\"tier\""},
	AvailabilityID:   whereHelpernull_String{field: "\"blueprint_mechs_old\".\"availability_id\""},
}

// BlueprintMechsOldRels is where relationship names are stored.
var BlueprintMechsOldRels = struct {
	Availability string
	Model        string
}{
	Availability: "Availability",
	Model:        "Model",
}

// blueprintMechsOldR is where relationships are stored.
type blueprintMechsOldR struct {
	Availability *Availability  `boiler:"Availability" boil:"Availability" json:"Availability" toml:"Availability" yaml:"Availability"`
	Model        *BlueprintMech `boiler:"Model" boil:"Model" json:"Model" toml:"Model" yaml:"Model"`
}

// NewStruct creates a new relationship struct
func (*blueprintMechsOldR) NewStruct() *blueprintMechsOldR {
	return &blueprintMechsOldR{}
}

// blueprintMechsOldL is where Load methods for each relationship are stored.
type blueprintMechsOldL struct{}

var (
	blueprintMechsOldAllColumns            = []string{"id", "label", "slug", "weapon_hardpoints", "utility_slots", "speed", "max_hitpoints", "deleted_at", "updated_at", "created_at", "model_id", "collection", "power_core_size", "tier", "availability_id"}
	blueprintMechsOldColumnsWithoutDefault = []string{"label", "slug", "weapon_hardpoints", "utility_slots", "speed", "max_hitpoints", "model_id"}
	blueprintMechsOldColumnsWithDefault    = []string{"id", "deleted_at", "updated_at", "created_at", "collection", "power_core_size", "tier", "availability_id"}
	blueprintMechsOldPrimaryKeyColumns     = []string{"id"}
	blueprintMechsOldGeneratedColumns      = []string{}
)

type (
	// BlueprintMechsOldSlice is an alias for a slice of pointers to BlueprintMechsOld.
	// This should almost always be used instead of []BlueprintMechsOld.
	BlueprintMechsOldSlice []*BlueprintMechsOld
	// BlueprintMechsOldHook is the signature for custom BlueprintMechsOld hook methods
	BlueprintMechsOldHook func(boil.Executor, *BlueprintMechsOld) error

	blueprintMechsOldQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blueprintMechsOldType                 = reflect.TypeOf(&BlueprintMechsOld{})
	blueprintMechsOldMapping              = queries.MakeStructMapping(blueprintMechsOldType)
	blueprintMechsOldPrimaryKeyMapping, _ = queries.BindMapping(blueprintMechsOldType, blueprintMechsOldMapping, blueprintMechsOldPrimaryKeyColumns)
	blueprintMechsOldInsertCacheMut       sync.RWMutex
	blueprintMechsOldInsertCache          = make(map[string]insertCache)
	blueprintMechsOldUpdateCacheMut       sync.RWMutex
	blueprintMechsOldUpdateCache          = make(map[string]updateCache)
	blueprintMechsOldUpsertCacheMut       sync.RWMutex
	blueprintMechsOldUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var blueprintMechsOldAfterSelectHooks []BlueprintMechsOldHook

var blueprintMechsOldBeforeInsertHooks []BlueprintMechsOldHook
var blueprintMechsOldAfterInsertHooks []BlueprintMechsOldHook

var blueprintMechsOldBeforeUpdateHooks []BlueprintMechsOldHook
var blueprintMechsOldAfterUpdateHooks []BlueprintMechsOldHook

var blueprintMechsOldBeforeDeleteHooks []BlueprintMechsOldHook
var blueprintMechsOldAfterDeleteHooks []BlueprintMechsOldHook

var blueprintMechsOldBeforeUpsertHooks []BlueprintMechsOldHook
var blueprintMechsOldAfterUpsertHooks []BlueprintMechsOldHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BlueprintMechsOld) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechsOldAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BlueprintMechsOld) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechsOldBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BlueprintMechsOld) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechsOldAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BlueprintMechsOld) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechsOldBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BlueprintMechsOld) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechsOldAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BlueprintMechsOld) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechsOldBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BlueprintMechsOld) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechsOldAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BlueprintMechsOld) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechsOldBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BlueprintMechsOld) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechsOldAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBlueprintMechsOldHook registers your hook function for all future operations.
func AddBlueprintMechsOldHook(hookPoint boil.HookPoint, blueprintMechsOldHook BlueprintMechsOldHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		blueprintMechsOldAfterSelectHooks = append(blueprintMechsOldAfterSelectHooks, blueprintMechsOldHook)
	case boil.BeforeInsertHook:
		blueprintMechsOldBeforeInsertHooks = append(blueprintMechsOldBeforeInsertHooks, blueprintMechsOldHook)
	case boil.AfterInsertHook:
		blueprintMechsOldAfterInsertHooks = append(blueprintMechsOldAfterInsertHooks, blueprintMechsOldHook)
	case boil.BeforeUpdateHook:
		blueprintMechsOldBeforeUpdateHooks = append(blueprintMechsOldBeforeUpdateHooks, blueprintMechsOldHook)
	case boil.AfterUpdateHook:
		blueprintMechsOldAfterUpdateHooks = append(blueprintMechsOldAfterUpdateHooks, blueprintMechsOldHook)
	case boil.BeforeDeleteHook:
		blueprintMechsOldBeforeDeleteHooks = append(blueprintMechsOldBeforeDeleteHooks, blueprintMechsOldHook)
	case boil.AfterDeleteHook:
		blueprintMechsOldAfterDeleteHooks = append(blueprintMechsOldAfterDeleteHooks, blueprintMechsOldHook)
	case boil.BeforeUpsertHook:
		blueprintMechsOldBeforeUpsertHooks = append(blueprintMechsOldBeforeUpsertHooks, blueprintMechsOldHook)
	case boil.AfterUpsertHook:
		blueprintMechsOldAfterUpsertHooks = append(blueprintMechsOldAfterUpsertHooks, blueprintMechsOldHook)
	}
}

// One returns a single blueprintMechsOld record from the query.
func (q blueprintMechsOldQuery) One(exec boil.Executor) (*BlueprintMechsOld, error) {
	o := &BlueprintMechsOld{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for blueprint_mechs_old")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BlueprintMechsOld records from the query.
func (q blueprintMechsOldQuery) All(exec boil.Executor) (BlueprintMechsOldSlice, error) {
	var o []*BlueprintMechsOld

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BlueprintMechsOld slice")
	}

	if len(blueprintMechsOldAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BlueprintMechsOld records in the query.
func (q blueprintMechsOldQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count blueprint_mechs_old rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q blueprintMechsOldQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if blueprint_mechs_old exists")
	}

	return count > 0, nil
}

// Availability pointed to by the foreign key.
func (o *BlueprintMechsOld) Availability(mods ...qm.QueryMod) availabilityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AvailabilityID),
	}

	queryMods = append(queryMods, mods...)

	query := Availabilities(queryMods...)
	queries.SetFrom(query.Query, "\"availabilities\"")

	return query
}

// Model pointed to by the foreign key.
func (o *BlueprintMechsOld) Model(mods ...qm.QueryMod) blueprintMechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ModelID),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintMechs(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_mechs\"")

	return query
}

// LoadAvailability allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blueprintMechsOldL) LoadAvailability(e boil.Executor, singular bool, maybeBlueprintMechsOld interface{}, mods queries.Applicator) error {
	var slice []*BlueprintMechsOld
	var object *BlueprintMechsOld

	if singular {
		object = maybeBlueprintMechsOld.(*BlueprintMechsOld)
	} else {
		slice = *maybeBlueprintMechsOld.(*[]*BlueprintMechsOld)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintMechsOldR{}
		}
		if !queries.IsNil(object.AvailabilityID) {
			args = append(args, object.AvailabilityID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintMechsOldR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AvailabilityID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AvailabilityID) {
				args = append(args, obj.AvailabilityID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`availabilities`),
		qm.WhereIn(`availabilities.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Availability")
	}

	var resultSlice []*Availability
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Availability")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for availabilities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for availabilities")
	}

	if len(blueprintMechsOldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Availability = foreign
		if foreign.R == nil {
			foreign.R = &availabilityR{}
		}
		foreign.R.BlueprintMechsOlds = append(foreign.R.BlueprintMechsOlds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AvailabilityID, foreign.ID) {
				local.R.Availability = foreign
				if foreign.R == nil {
					foreign.R = &availabilityR{}
				}
				foreign.R.BlueprintMechsOlds = append(foreign.R.BlueprintMechsOlds, local)
				break
			}
		}
	}

	return nil
}

// LoadModel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blueprintMechsOldL) LoadModel(e boil.Executor, singular bool, maybeBlueprintMechsOld interface{}, mods queries.Applicator) error {
	var slice []*BlueprintMechsOld
	var object *BlueprintMechsOld

	if singular {
		object = maybeBlueprintMechsOld.(*BlueprintMechsOld)
	} else {
		slice = *maybeBlueprintMechsOld.(*[]*BlueprintMechsOld)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintMechsOldR{}
		}
		args = append(args, object.ModelID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintMechsOldR{}
			}

			for _, a := range args {
				if a == obj.ModelID {
					continue Outer
				}
			}

			args = append(args, obj.ModelID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_mechs`),
		qm.WhereIn(`blueprint_mechs.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintMech")
	}

	var resultSlice []*BlueprintMech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintMech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_mechs")
	}

	if len(blueprintMechsOldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Model = foreign
		if foreign.R == nil {
			foreign.R = &blueprintMechR{}
		}
		foreign.R.ModelBlueprintMechsOlds = append(foreign.R.ModelBlueprintMechsOlds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ModelID == foreign.ID {
				local.R.Model = foreign
				if foreign.R == nil {
					foreign.R = &blueprintMechR{}
				}
				foreign.R.ModelBlueprintMechsOlds = append(foreign.R.ModelBlueprintMechsOlds, local)
				break
			}
		}
	}

	return nil
}

// SetAvailability of the blueprintMechsOld to the related item.
// Sets o.R.Availability to related.
// Adds o to related.R.BlueprintMechsOlds.
func (o *BlueprintMechsOld) SetAvailability(exec boil.Executor, insert bool, related *Availability) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"blueprint_mechs_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"availability_id"}),
		strmangle.WhereClause("\"", "\"", 2, blueprintMechsOldPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AvailabilityID, related.ID)
	if o.R == nil {
		o.R = &blueprintMechsOldR{
			Availability: related,
		}
	} else {
		o.R.Availability = related
	}

	if related.R == nil {
		related.R = &availabilityR{
			BlueprintMechsOlds: BlueprintMechsOldSlice{o},
		}
	} else {
		related.R.BlueprintMechsOlds = append(related.R.BlueprintMechsOlds, o)
	}

	return nil
}

// RemoveAvailability relationship.
// Sets o.R.Availability to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BlueprintMechsOld) RemoveAvailability(exec boil.Executor, related *Availability) error {
	var err error

	queries.SetScanner(&o.AvailabilityID, nil)
	if _, err = o.Update(exec, boil.Whitelist("availability_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Availability = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BlueprintMechsOlds {
		if queries.Equal(o.AvailabilityID, ri.AvailabilityID) {
			continue
		}

		ln := len(related.R.BlueprintMechsOlds)
		if ln > 1 && i < ln-1 {
			related.R.BlueprintMechsOlds[i] = related.R.BlueprintMechsOlds[ln-1]
		}
		related.R.BlueprintMechsOlds = related.R.BlueprintMechsOlds[:ln-1]
		break
	}
	return nil
}

// SetModel of the blueprintMechsOld to the related item.
// Sets o.R.Model to related.
// Adds o to related.R.ModelBlueprintMechsOlds.
func (o *BlueprintMechsOld) SetModel(exec boil.Executor, insert bool, related *BlueprintMech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"blueprint_mechs_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"model_id"}),
		strmangle.WhereClause("\"", "\"", 2, blueprintMechsOldPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ModelID = related.ID
	if o.R == nil {
		o.R = &blueprintMechsOldR{
			Model: related,
		}
	} else {
		o.R.Model = related
	}

	if related.R == nil {
		related.R = &blueprintMechR{
			ModelBlueprintMechsOlds: BlueprintMechsOldSlice{o},
		}
	} else {
		related.R.ModelBlueprintMechsOlds = append(related.R.ModelBlueprintMechsOlds, o)
	}

	return nil
}

// BlueprintMechsOlds retrieves all the records using an executor.
func BlueprintMechsOlds(mods ...qm.QueryMod) blueprintMechsOldQuery {
	mods = append(mods, qm.From("\"blueprint_mechs_old\""), qmhelper.WhereIsNull("\"blueprint_mechs_old\".\"deleted_at\""))
	return blueprintMechsOldQuery{NewQuery(mods...)}
}

// FindBlueprintMechsOld retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlueprintMechsOld(exec boil.Executor, iD string, selectCols ...string) (*BlueprintMechsOld, error) {
	blueprintMechsOldObj := &BlueprintMechsOld{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"blueprint_mechs_old\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, blueprintMechsOldObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from blueprint_mechs_old")
	}

	if err = blueprintMechsOldObj.doAfterSelectHooks(exec); err != nil {
		return blueprintMechsOldObj, err
	}

	return blueprintMechsOldObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlueprintMechsOld) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_mechs_old provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintMechsOldColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blueprintMechsOldInsertCacheMut.RLock()
	cache, cached := blueprintMechsOldInsertCache[key]
	blueprintMechsOldInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blueprintMechsOldAllColumns,
			blueprintMechsOldColumnsWithDefault,
			blueprintMechsOldColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blueprintMechsOldType, blueprintMechsOldMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blueprintMechsOldType, blueprintMechsOldMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"blueprint_mechs_old\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"blueprint_mechs_old\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into blueprint_mechs_old")
	}

	if !cached {
		blueprintMechsOldInsertCacheMut.Lock()
		blueprintMechsOldInsertCache[key] = cache
		blueprintMechsOldInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BlueprintMechsOld.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlueprintMechsOld) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	blueprintMechsOldUpdateCacheMut.RLock()
	cache, cached := blueprintMechsOldUpdateCache[key]
	blueprintMechsOldUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blueprintMechsOldAllColumns,
			blueprintMechsOldPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update blueprint_mechs_old, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"blueprint_mechs_old\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, blueprintMechsOldPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blueprintMechsOldType, blueprintMechsOldMapping, append(wl, blueprintMechsOldPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update blueprint_mechs_old row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for blueprint_mechs_old")
	}

	if !cached {
		blueprintMechsOldUpdateCacheMut.Lock()
		blueprintMechsOldUpdateCache[key] = cache
		blueprintMechsOldUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q blueprintMechsOldQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for blueprint_mechs_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for blueprint_mechs_old")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlueprintMechsOldSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintMechsOldPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"blueprint_mechs_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, blueprintMechsOldPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in blueprintMechsOld slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all blueprintMechsOld")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlueprintMechsOld) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_mechs_old provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintMechsOldColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blueprintMechsOldUpsertCacheMut.RLock()
	cache, cached := blueprintMechsOldUpsertCache[key]
	blueprintMechsOldUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blueprintMechsOldAllColumns,
			blueprintMechsOldColumnsWithDefault,
			blueprintMechsOldColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			blueprintMechsOldAllColumns,
			blueprintMechsOldPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert blueprint_mechs_old, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(blueprintMechsOldPrimaryKeyColumns))
			copy(conflict, blueprintMechsOldPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"blueprint_mechs_old\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(blueprintMechsOldType, blueprintMechsOldMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blueprintMechsOldType, blueprintMechsOldMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert blueprint_mechs_old")
	}

	if !cached {
		blueprintMechsOldUpsertCacheMut.Lock()
		blueprintMechsOldUpsertCache[key] = cache
		blueprintMechsOldUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BlueprintMechsOld record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlueprintMechsOld) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BlueprintMechsOld provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blueprintMechsOldPrimaryKeyMapping)
		sql = "DELETE FROM \"blueprint_mechs_old\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"blueprint_mechs_old\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(blueprintMechsOldType, blueprintMechsOldMapping, append(wl, blueprintMechsOldPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from blueprint_mechs_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for blueprint_mechs_old")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q blueprintMechsOldQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no blueprintMechsOldQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprint_mechs_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_mechs_old")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlueprintMechsOldSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(blueprintMechsOldBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintMechsOldPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"blueprint_mechs_old\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintMechsOldPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintMechsOldPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"blueprint_mechs_old\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, blueprintMechsOldPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprintMechsOld slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_mechs_old")
	}

	if len(blueprintMechsOldAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlueprintMechsOld) Reload(exec boil.Executor) error {
	ret, err := FindBlueprintMechsOld(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlueprintMechsOldSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlueprintMechsOldSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintMechsOldPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"blueprint_mechs_old\".* FROM \"blueprint_mechs_old\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintMechsOldPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BlueprintMechsOldSlice")
	}

	*o = slice

	return nil
}

// BlueprintMechsOldExists checks if the BlueprintMechsOld row exists.
func BlueprintMechsOldExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"blueprint_mechs_old\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if blueprint_mechs_old exists")
	}

	return exists, nil
}
