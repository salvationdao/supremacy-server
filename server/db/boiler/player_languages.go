// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PlayerLanguage is an object representing the database table.
type PlayerLanguage struct {
	ID             string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	PlayerID       string    `boiler:"player_id" boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	LanguageID     string    `boiler:"language_id" boil:"language_id" json:"language_id" toml:"language_id" yaml:"language_id"`
	FactionID      string    `boiler:"faction_id" boil:"faction_id" json:"faction_id" toml:"faction_id" yaml:"faction_id"`
	TextIdentified string    `boiler:"text_identified" boil:"text_identified" json:"text_identified" toml:"text_identified" yaml:"text_identified"`
	CreatedAt      time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *playerLanguageR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L playerLanguageL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlayerLanguageColumns = struct {
	ID             string
	PlayerID       string
	LanguageID     string
	FactionID      string
	TextIdentified string
	CreatedAt      string
}{
	ID:             "id",
	PlayerID:       "player_id",
	LanguageID:     "language_id",
	FactionID:      "faction_id",
	TextIdentified: "text_identified",
	CreatedAt:      "created_at",
}

var PlayerLanguageTableColumns = struct {
	ID             string
	PlayerID       string
	LanguageID     string
	FactionID      string
	TextIdentified string
	CreatedAt      string
}{
	ID:             "player_languages.id",
	PlayerID:       "player_languages.player_id",
	LanguageID:     "player_languages.language_id",
	FactionID:      "player_languages.faction_id",
	TextIdentified: "player_languages.text_identified",
	CreatedAt:      "player_languages.created_at",
}

// Generated where

var PlayerLanguageWhere = struct {
	ID             whereHelperstring
	PlayerID       whereHelperstring
	LanguageID     whereHelperstring
	FactionID      whereHelperstring
	TextIdentified whereHelperstring
	CreatedAt      whereHelpertime_Time
}{
	ID:             whereHelperstring{field: "\"player_languages\".\"id\""},
	PlayerID:       whereHelperstring{field: "\"player_languages\".\"player_id\""},
	LanguageID:     whereHelperstring{field: "\"player_languages\".\"language_id\""},
	FactionID:      whereHelperstring{field: "\"player_languages\".\"faction_id\""},
	TextIdentified: whereHelperstring{field: "\"player_languages\".\"text_identified\""},
	CreatedAt:      whereHelpertime_Time{field: "\"player_languages\".\"created_at\""},
}

// PlayerLanguageRels is where relationship names are stored.
var PlayerLanguageRels = struct {
	Faction  string
	Language string
	Player   string
}{
	Faction:  "Faction",
	Language: "Language",
	Player:   "Player",
}

// playerLanguageR is where relationships are stored.
type playerLanguageR struct {
	Faction  *Faction  `boiler:"Faction" boil:"Faction" json:"Faction" toml:"Faction" yaml:"Faction"`
	Language *Language `boiler:"Language" boil:"Language" json:"Language" toml:"Language" yaml:"Language"`
	Player   *Player   `boiler:"Player" boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
}

// NewStruct creates a new relationship struct
func (*playerLanguageR) NewStruct() *playerLanguageR {
	return &playerLanguageR{}
}

// playerLanguageL is where Load methods for each relationship are stored.
type playerLanguageL struct{}

var (
	playerLanguageAllColumns            = []string{"id", "player_id", "language_id", "faction_id", "text_identified", "created_at"}
	playerLanguageColumnsWithoutDefault = []string{"player_id", "language_id", "faction_id", "text_identified"}
	playerLanguageColumnsWithDefault    = []string{"id", "created_at"}
	playerLanguagePrimaryKeyColumns     = []string{"id"}
	playerLanguageGeneratedColumns      = []string{}
)

type (
	// PlayerLanguageSlice is an alias for a slice of pointers to PlayerLanguage.
	// This should almost always be used instead of []PlayerLanguage.
	PlayerLanguageSlice []*PlayerLanguage
	// PlayerLanguageHook is the signature for custom PlayerLanguage hook methods
	PlayerLanguageHook func(boil.Executor, *PlayerLanguage) error

	playerLanguageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playerLanguageType                 = reflect.TypeOf(&PlayerLanguage{})
	playerLanguageMapping              = queries.MakeStructMapping(playerLanguageType)
	playerLanguagePrimaryKeyMapping, _ = queries.BindMapping(playerLanguageType, playerLanguageMapping, playerLanguagePrimaryKeyColumns)
	playerLanguageInsertCacheMut       sync.RWMutex
	playerLanguageInsertCache          = make(map[string]insertCache)
	playerLanguageUpdateCacheMut       sync.RWMutex
	playerLanguageUpdateCache          = make(map[string]updateCache)
	playerLanguageUpsertCacheMut       sync.RWMutex
	playerLanguageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var playerLanguageAfterSelectHooks []PlayerLanguageHook

var playerLanguageBeforeInsertHooks []PlayerLanguageHook
var playerLanguageAfterInsertHooks []PlayerLanguageHook

var playerLanguageBeforeUpdateHooks []PlayerLanguageHook
var playerLanguageAfterUpdateHooks []PlayerLanguageHook

var playerLanguageBeforeDeleteHooks []PlayerLanguageHook
var playerLanguageAfterDeleteHooks []PlayerLanguageHook

var playerLanguageBeforeUpsertHooks []PlayerLanguageHook
var playerLanguageAfterUpsertHooks []PlayerLanguageHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PlayerLanguage) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range playerLanguageAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PlayerLanguage) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerLanguageBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PlayerLanguage) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerLanguageAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PlayerLanguage) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range playerLanguageBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PlayerLanguage) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range playerLanguageAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PlayerLanguage) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range playerLanguageBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PlayerLanguage) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range playerLanguageAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PlayerLanguage) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerLanguageBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PlayerLanguage) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerLanguageAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlayerLanguageHook registers your hook function for all future operations.
func AddPlayerLanguageHook(hookPoint boil.HookPoint, playerLanguageHook PlayerLanguageHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		playerLanguageAfterSelectHooks = append(playerLanguageAfterSelectHooks, playerLanguageHook)
	case boil.BeforeInsertHook:
		playerLanguageBeforeInsertHooks = append(playerLanguageBeforeInsertHooks, playerLanguageHook)
	case boil.AfterInsertHook:
		playerLanguageAfterInsertHooks = append(playerLanguageAfterInsertHooks, playerLanguageHook)
	case boil.BeforeUpdateHook:
		playerLanguageBeforeUpdateHooks = append(playerLanguageBeforeUpdateHooks, playerLanguageHook)
	case boil.AfterUpdateHook:
		playerLanguageAfterUpdateHooks = append(playerLanguageAfterUpdateHooks, playerLanguageHook)
	case boil.BeforeDeleteHook:
		playerLanguageBeforeDeleteHooks = append(playerLanguageBeforeDeleteHooks, playerLanguageHook)
	case boil.AfterDeleteHook:
		playerLanguageAfterDeleteHooks = append(playerLanguageAfterDeleteHooks, playerLanguageHook)
	case boil.BeforeUpsertHook:
		playerLanguageBeforeUpsertHooks = append(playerLanguageBeforeUpsertHooks, playerLanguageHook)
	case boil.AfterUpsertHook:
		playerLanguageAfterUpsertHooks = append(playerLanguageAfterUpsertHooks, playerLanguageHook)
	}
}

// One returns a single playerLanguage record from the query.
func (q playerLanguageQuery) One(exec boil.Executor) (*PlayerLanguage, error) {
	o := &PlayerLanguage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for player_languages")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PlayerLanguage records from the query.
func (q playerLanguageQuery) All(exec boil.Executor) (PlayerLanguageSlice, error) {
	var o []*PlayerLanguage

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to PlayerLanguage slice")
	}

	if len(playerLanguageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PlayerLanguage records in the query.
func (q playerLanguageQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count player_languages rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q playerLanguageQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if player_languages exists")
	}

	return count > 0, nil
}

// Faction pointed to by the foreign key.
func (o *PlayerLanguage) Faction(mods ...qm.QueryMod) factionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FactionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Factions(queryMods...)
	queries.SetFrom(query.Query, "\"factions\"")

	return query
}

// Language pointed to by the foreign key.
func (o *PlayerLanguage) Language(mods ...qm.QueryMod) languageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LanguageID),
	}

	queryMods = append(queryMods, mods...)

	query := Languages(queryMods...)
	queries.SetFrom(query.Query, "\"languages\"")

	return query
}

// Player pointed to by the foreign key.
func (o *PlayerLanguage) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// LoadFaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerLanguageL) LoadFaction(e boil.Executor, singular bool, maybePlayerLanguage interface{}, mods queries.Applicator) error {
	var slice []*PlayerLanguage
	var object *PlayerLanguage

	if singular {
		object = maybePlayerLanguage.(*PlayerLanguage)
	} else {
		slice = *maybePlayerLanguage.(*[]*PlayerLanguage)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerLanguageR{}
		}
		args = append(args, object.FactionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerLanguageR{}
			}

			for _, a := range args {
				if a == obj.FactionID {
					continue Outer
				}
			}

			args = append(args, obj.FactionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`factions`),
		qm.WhereIn(`factions.id in ?`, args...),
		qmhelper.WhereIsNull(`factions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Faction")
	}

	var resultSlice []*Faction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Faction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for factions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for factions")
	}

	if len(playerLanguageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Faction = foreign
		if foreign.R == nil {
			foreign.R = &factionR{}
		}
		foreign.R.PlayerLanguages = append(foreign.R.PlayerLanguages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FactionID == foreign.ID {
				local.R.Faction = foreign
				if foreign.R == nil {
					foreign.R = &factionR{}
				}
				foreign.R.PlayerLanguages = append(foreign.R.PlayerLanguages, local)
				break
			}
		}
	}

	return nil
}

// LoadLanguage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerLanguageL) LoadLanguage(e boil.Executor, singular bool, maybePlayerLanguage interface{}, mods queries.Applicator) error {
	var slice []*PlayerLanguage
	var object *PlayerLanguage

	if singular {
		object = maybePlayerLanguage.(*PlayerLanguage)
	} else {
		slice = *maybePlayerLanguage.(*[]*PlayerLanguage)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerLanguageR{}
		}
		args = append(args, object.LanguageID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerLanguageR{}
			}

			for _, a := range args {
				if a == obj.LanguageID {
					continue Outer
				}
			}

			args = append(args, obj.LanguageID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`languages`),
		qm.WhereIn(`languages.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Language")
	}

	var resultSlice []*Language
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Language")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for languages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for languages")
	}

	if len(playerLanguageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Language = foreign
		if foreign.R == nil {
			foreign.R = &languageR{}
		}
		foreign.R.PlayerLanguages = append(foreign.R.PlayerLanguages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LanguageID == foreign.ID {
				local.R.Language = foreign
				if foreign.R == nil {
					foreign.R = &languageR{}
				}
				foreign.R.PlayerLanguages = append(foreign.R.PlayerLanguages, local)
				break
			}
		}
	}

	return nil
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerLanguageL) LoadPlayer(e boil.Executor, singular bool, maybePlayerLanguage interface{}, mods queries.Applicator) error {
	var slice []*PlayerLanguage
	var object *PlayerLanguage

	if singular {
		object = maybePlayerLanguage.(*PlayerLanguage)
	} else {
		slice = *maybePlayerLanguage.(*[]*PlayerLanguage)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerLanguageR{}
		}
		args = append(args, object.PlayerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerLanguageR{}
			}

			for _, a := range args {
				if a == obj.PlayerID {
					continue Outer
				}
			}

			args = append(args, obj.PlayerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(playerLanguageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.PlayerLanguages = append(foreign.R.PlayerLanguages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.ID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.PlayerLanguages = append(foreign.R.PlayerLanguages, local)
				break
			}
		}
	}

	return nil
}

// SetFaction of the playerLanguage to the related item.
// Sets o.R.Faction to related.
// Adds o to related.R.PlayerLanguages.
func (o *PlayerLanguage) SetFaction(exec boil.Executor, insert bool, related *Faction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"player_languages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"faction_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerLanguagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FactionID = related.ID
	if o.R == nil {
		o.R = &playerLanguageR{
			Faction: related,
		}
	} else {
		o.R.Faction = related
	}

	if related.R == nil {
		related.R = &factionR{
			PlayerLanguages: PlayerLanguageSlice{o},
		}
	} else {
		related.R.PlayerLanguages = append(related.R.PlayerLanguages, o)
	}

	return nil
}

// SetLanguage of the playerLanguage to the related item.
// Sets o.R.Language to related.
// Adds o to related.R.PlayerLanguages.
func (o *PlayerLanguage) SetLanguage(exec boil.Executor, insert bool, related *Language) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"player_languages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"language_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerLanguagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LanguageID = related.ID
	if o.R == nil {
		o.R = &playerLanguageR{
			Language: related,
		}
	} else {
		o.R.Language = related
	}

	if related.R == nil {
		related.R = &languageR{
			PlayerLanguages: PlayerLanguageSlice{o},
		}
	} else {
		related.R.PlayerLanguages = append(related.R.PlayerLanguages, o)
	}

	return nil
}

// SetPlayer of the playerLanguage to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.PlayerLanguages.
func (o *PlayerLanguage) SetPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"player_languages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerLanguagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.ID
	if o.R == nil {
		o.R = &playerLanguageR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			PlayerLanguages: PlayerLanguageSlice{o},
		}
	} else {
		related.R.PlayerLanguages = append(related.R.PlayerLanguages, o)
	}

	return nil
}

// PlayerLanguages retrieves all the records using an executor.
func PlayerLanguages(mods ...qm.QueryMod) playerLanguageQuery {
	mods = append(mods, qm.From("\"player_languages\""))
	return playerLanguageQuery{NewQuery(mods...)}
}

// FindPlayerLanguage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlayerLanguage(exec boil.Executor, iD string, selectCols ...string) (*PlayerLanguage, error) {
	playerLanguageObj := &PlayerLanguage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"player_languages\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, playerLanguageObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from player_languages")
	}

	if err = playerLanguageObj.doAfterSelectHooks(exec); err != nil {
		return playerLanguageObj, err
	}

	return playerLanguageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PlayerLanguage) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no player_languages provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerLanguageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	playerLanguageInsertCacheMut.RLock()
	cache, cached := playerLanguageInsertCache[key]
	playerLanguageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			playerLanguageAllColumns,
			playerLanguageColumnsWithDefault,
			playerLanguageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(playerLanguageType, playerLanguageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(playerLanguageType, playerLanguageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"player_languages\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"player_languages\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into player_languages")
	}

	if !cached {
		playerLanguageInsertCacheMut.Lock()
		playerLanguageInsertCache[key] = cache
		playerLanguageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the PlayerLanguage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PlayerLanguage) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	playerLanguageUpdateCacheMut.RLock()
	cache, cached := playerLanguageUpdateCache[key]
	playerLanguageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			playerLanguageAllColumns,
			playerLanguagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update player_languages, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"player_languages\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, playerLanguagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(playerLanguageType, playerLanguageMapping, append(wl, playerLanguagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update player_languages row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for player_languages")
	}

	if !cached {
		playerLanguageUpdateCacheMut.Lock()
		playerLanguageUpdateCache[key] = cache
		playerLanguageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q playerLanguageQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for player_languages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for player_languages")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlayerLanguageSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerLanguagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"player_languages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, playerLanguagePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in playerLanguage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all playerLanguage")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PlayerLanguage) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no player_languages provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerLanguageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	playerLanguageUpsertCacheMut.RLock()
	cache, cached := playerLanguageUpsertCache[key]
	playerLanguageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			playerLanguageAllColumns,
			playerLanguageColumnsWithDefault,
			playerLanguageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			playerLanguageAllColumns,
			playerLanguagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert player_languages, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(playerLanguagePrimaryKeyColumns))
			copy(conflict, playerLanguagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"player_languages\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(playerLanguageType, playerLanguageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(playerLanguageType, playerLanguageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert player_languages")
	}

	if !cached {
		playerLanguageUpsertCacheMut.Lock()
		playerLanguageUpsertCache[key] = cache
		playerLanguageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single PlayerLanguage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PlayerLanguage) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no PlayerLanguage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), playerLanguagePrimaryKeyMapping)
	sql := "DELETE FROM \"player_languages\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from player_languages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for player_languages")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q playerLanguageQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no playerLanguageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from player_languages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for player_languages")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlayerLanguageSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(playerLanguageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerLanguagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"player_languages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerLanguagePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from playerLanguage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for player_languages")
	}

	if len(playerLanguageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PlayerLanguage) Reload(exec boil.Executor) error {
	ret, err := FindPlayerLanguage(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlayerLanguageSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlayerLanguageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerLanguagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"player_languages\".* FROM \"player_languages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerLanguagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in PlayerLanguageSlice")
	}

	*o = slice

	return nil
}

// PlayerLanguageExists checks if the PlayerLanguage row exists.
func PlayerLanguageExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"player_languages\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if player_languages exists")
	}

	return exists, nil
}
