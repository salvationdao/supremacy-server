// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BanVote is an object representing the database table.
type BanVote struct {
	ID                     string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BanTypeID              string    `boiler:"ban_type_id" boil:"ban_type_id" json:"ban_type_id" toml:"ban_type_id" yaml:"ban_type_id"`
	Reason                 string    `boiler:"reason" boil:"reason" json:"reason" toml:"reason" yaml:"reason"`
	FactionID              string    `boiler:"faction_id" boil:"faction_id" json:"faction_id" toml:"faction_id" yaml:"faction_id"`
	IssuedByID             string    `boiler:"issued_by_id" boil:"issued_by_id" json:"issued_by_id" toml:"issued_by_id" yaml:"issued_by_id"`
	IssuedByUsername       string    `boiler:"issued_by_username" boil:"issued_by_username" json:"issued_by_username" toml:"issued_by_username" yaml:"issued_by_username"`
	ReportedPlayerID       string    `boiler:"reported_player_id" boil:"reported_player_id" json:"reported_player_id" toml:"reported_player_id" yaml:"reported_player_id"`
	ReportedPlayerUsername string    `boiler:"reported_player_username" boil:"reported_player_username" json:"reported_player_username" toml:"reported_player_username" yaml:"reported_player_username"`
	Status                 string    `boiler:"status" boil:"status" json:"status" toml:"status" yaml:"status"`
	StartedAt              null.Time `boiler:"started_at" boil:"started_at" json:"started_at,omitempty" toml:"started_at" yaml:"started_at,omitempty"`
	EndedAt                null.Time `boiler:"ended_at" boil:"ended_at" json:"ended_at,omitempty" toml:"ended_at" yaml:"ended_at,omitempty"`
	CreatedAt              time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt              time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt              null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *banVoteR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L banVoteL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BanVoteColumns = struct {
	ID                     string
	BanTypeID              string
	Reason                 string
	FactionID              string
	IssuedByID             string
	IssuedByUsername       string
	ReportedPlayerID       string
	ReportedPlayerUsername string
	Status                 string
	StartedAt              string
	EndedAt                string
	CreatedAt              string
	UpdatedAt              string
	DeletedAt              string
}{
	ID:                     "id",
	BanTypeID:              "ban_type_id",
	Reason:                 "reason",
	FactionID:              "faction_id",
	IssuedByID:             "issued_by_id",
	IssuedByUsername:       "issued_by_username",
	ReportedPlayerID:       "reported_player_id",
	ReportedPlayerUsername: "reported_player_username",
	Status:                 "status",
	StartedAt:              "started_at",
	EndedAt:                "ended_at",
	CreatedAt:              "created_at",
	UpdatedAt:              "updated_at",
	DeletedAt:              "deleted_at",
}

var BanVoteTableColumns = struct {
	ID                     string
	BanTypeID              string
	Reason                 string
	FactionID              string
	IssuedByID             string
	IssuedByUsername       string
	ReportedPlayerID       string
	ReportedPlayerUsername string
	Status                 string
	StartedAt              string
	EndedAt                string
	CreatedAt              string
	UpdatedAt              string
	DeletedAt              string
}{
	ID:                     "ban_votes.id",
	BanTypeID:              "ban_votes.ban_type_id",
	Reason:                 "ban_votes.reason",
	FactionID:              "ban_votes.faction_id",
	IssuedByID:             "ban_votes.issued_by_id",
	IssuedByUsername:       "ban_votes.issued_by_username",
	ReportedPlayerID:       "ban_votes.reported_player_id",
	ReportedPlayerUsername: "ban_votes.reported_player_username",
	Status:                 "ban_votes.status",
	StartedAt:              "ban_votes.started_at",
	EndedAt:                "ban_votes.ended_at",
	CreatedAt:              "ban_votes.created_at",
	UpdatedAt:              "ban_votes.updated_at",
	DeletedAt:              "ban_votes.deleted_at",
}

// Generated where

var BanVoteWhere = struct {
	ID                     whereHelperstring
	BanTypeID              whereHelperstring
	Reason                 whereHelperstring
	FactionID              whereHelperstring
	IssuedByID             whereHelperstring
	IssuedByUsername       whereHelperstring
	ReportedPlayerID       whereHelperstring
	ReportedPlayerUsername whereHelperstring
	Status                 whereHelperstring
	StartedAt              whereHelpernull_Time
	EndedAt                whereHelpernull_Time
	CreatedAt              whereHelpertime_Time
	UpdatedAt              whereHelpertime_Time
	DeletedAt              whereHelpernull_Time
}{
	ID:                     whereHelperstring{field: "\"ban_votes\".\"id\""},
	BanTypeID:              whereHelperstring{field: "\"ban_votes\".\"ban_type_id\""},
	Reason:                 whereHelperstring{field: "\"ban_votes\".\"reason\""},
	FactionID:              whereHelperstring{field: "\"ban_votes\".\"faction_id\""},
	IssuedByID:             whereHelperstring{field: "\"ban_votes\".\"issued_by_id\""},
	IssuedByUsername:       whereHelperstring{field: "\"ban_votes\".\"issued_by_username\""},
	ReportedPlayerID:       whereHelperstring{field: "\"ban_votes\".\"reported_player_id\""},
	ReportedPlayerUsername: whereHelperstring{field: "\"ban_votes\".\"reported_player_username\""},
	Status:                 whereHelperstring{field: "\"ban_votes\".\"status\""},
	StartedAt:              whereHelpernull_Time{field: "\"ban_votes\".\"started_at\""},
	EndedAt:                whereHelpernull_Time{field: "\"ban_votes\".\"ended_at\""},
	CreatedAt:              whereHelpertime_Time{field: "\"ban_votes\".\"created_at\""},
	UpdatedAt:              whereHelpertime_Time{field: "\"ban_votes\".\"updated_at\""},
	DeletedAt:              whereHelpernull_Time{field: "\"ban_votes\".\"deleted_at\""},
}

// BanVoteRels is where relationship names are stored.
var BanVoteRels = struct {
	BanType                     string
	Faction                     string
	IssuedBy                    string
	ReportedPlayer              string
	RelatedBanVoteBannedPlayers string
	PlayersBanVotes             string
}{
	BanType:                     "BanType",
	Faction:                     "Faction",
	IssuedBy:                    "IssuedBy",
	ReportedPlayer:              "ReportedPlayer",
	RelatedBanVoteBannedPlayers: "RelatedBanVoteBannedPlayers",
	PlayersBanVotes:             "PlayersBanVotes",
}

// banVoteR is where relationships are stored.
type banVoteR struct {
	BanType                     *BanType            `boiler:"BanType" boil:"BanType" json:"BanType" toml:"BanType" yaml:"BanType"`
	Faction                     *Faction            `boiler:"Faction" boil:"Faction" json:"Faction" toml:"Faction" yaml:"Faction"`
	IssuedBy                    *Player             `boiler:"IssuedBy" boil:"IssuedBy" json:"IssuedBy" toml:"IssuedBy" yaml:"IssuedBy"`
	ReportedPlayer              *Player             `boiler:"ReportedPlayer" boil:"ReportedPlayer" json:"ReportedPlayer" toml:"ReportedPlayer" yaml:"ReportedPlayer"`
	RelatedBanVoteBannedPlayers BannedPlayerSlice   `boiler:"RelatedBanVoteBannedPlayers" boil:"RelatedBanVoteBannedPlayers" json:"RelatedBanVoteBannedPlayers" toml:"RelatedBanVoteBannedPlayers" yaml:"RelatedBanVoteBannedPlayers"`
	PlayersBanVotes             PlayersBanVoteSlice `boiler:"PlayersBanVotes" boil:"PlayersBanVotes" json:"PlayersBanVotes" toml:"PlayersBanVotes" yaml:"PlayersBanVotes"`
}

// NewStruct creates a new relationship struct
func (*banVoteR) NewStruct() *banVoteR {
	return &banVoteR{}
}

// banVoteL is where Load methods for each relationship are stored.
type banVoteL struct{}

var (
	banVoteAllColumns            = []string{"id", "ban_type_id", "reason", "faction_id", "issued_by_id", "issued_by_username", "reported_player_id", "reported_player_username", "status", "started_at", "ended_at", "created_at", "updated_at", "deleted_at"}
	banVoteColumnsWithoutDefault = []string{"ban_type_id", "reason", "faction_id", "issued_by_id", "issued_by_username", "reported_player_id", "reported_player_username", "status"}
	banVoteColumnsWithDefault    = []string{"id", "started_at", "ended_at", "created_at", "updated_at", "deleted_at"}
	banVotePrimaryKeyColumns     = []string{"id"}
	banVoteGeneratedColumns      = []string{}
)

type (
	// BanVoteSlice is an alias for a slice of pointers to BanVote.
	// This should almost always be used instead of []BanVote.
	BanVoteSlice []*BanVote
	// BanVoteHook is the signature for custom BanVote hook methods
	BanVoteHook func(boil.Executor, *BanVote) error

	banVoteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	banVoteType                 = reflect.TypeOf(&BanVote{})
	banVoteMapping              = queries.MakeStructMapping(banVoteType)
	banVotePrimaryKeyMapping, _ = queries.BindMapping(banVoteType, banVoteMapping, banVotePrimaryKeyColumns)
	banVoteInsertCacheMut       sync.RWMutex
	banVoteInsertCache          = make(map[string]insertCache)
	banVoteUpdateCacheMut       sync.RWMutex
	banVoteUpdateCache          = make(map[string]updateCache)
	banVoteUpsertCacheMut       sync.RWMutex
	banVoteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var banVoteAfterSelectHooks []BanVoteHook

var banVoteBeforeInsertHooks []BanVoteHook
var banVoteAfterInsertHooks []BanVoteHook

var banVoteBeforeUpdateHooks []BanVoteHook
var banVoteAfterUpdateHooks []BanVoteHook

var banVoteBeforeDeleteHooks []BanVoteHook
var banVoteAfterDeleteHooks []BanVoteHook

var banVoteBeforeUpsertHooks []BanVoteHook
var banVoteAfterUpsertHooks []BanVoteHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BanVote) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range banVoteAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BanVote) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range banVoteBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BanVote) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range banVoteAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BanVote) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range banVoteBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BanVote) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range banVoteAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BanVote) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range banVoteBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BanVote) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range banVoteAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BanVote) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range banVoteBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BanVote) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range banVoteAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBanVoteHook registers your hook function for all future operations.
func AddBanVoteHook(hookPoint boil.HookPoint, banVoteHook BanVoteHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		banVoteAfterSelectHooks = append(banVoteAfterSelectHooks, banVoteHook)
	case boil.BeforeInsertHook:
		banVoteBeforeInsertHooks = append(banVoteBeforeInsertHooks, banVoteHook)
	case boil.AfterInsertHook:
		banVoteAfterInsertHooks = append(banVoteAfterInsertHooks, banVoteHook)
	case boil.BeforeUpdateHook:
		banVoteBeforeUpdateHooks = append(banVoteBeforeUpdateHooks, banVoteHook)
	case boil.AfterUpdateHook:
		banVoteAfterUpdateHooks = append(banVoteAfterUpdateHooks, banVoteHook)
	case boil.BeforeDeleteHook:
		banVoteBeforeDeleteHooks = append(banVoteBeforeDeleteHooks, banVoteHook)
	case boil.AfterDeleteHook:
		banVoteAfterDeleteHooks = append(banVoteAfterDeleteHooks, banVoteHook)
	case boil.BeforeUpsertHook:
		banVoteBeforeUpsertHooks = append(banVoteBeforeUpsertHooks, banVoteHook)
	case boil.AfterUpsertHook:
		banVoteAfterUpsertHooks = append(banVoteAfterUpsertHooks, banVoteHook)
	}
}

// One returns a single banVote record from the query.
func (q banVoteQuery) One(exec boil.Executor) (*BanVote, error) {
	o := &BanVote{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for ban_votes")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BanVote records from the query.
func (q banVoteQuery) All(exec boil.Executor) (BanVoteSlice, error) {
	var o []*BanVote

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BanVote slice")
	}

	if len(banVoteAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BanVote records in the query.
func (q banVoteQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count ban_votes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q banVoteQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if ban_votes exists")
	}

	return count > 0, nil
}

// BanType pointed to by the foreign key.
func (o *BanVote) BanType(mods ...qm.QueryMod) banTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BanTypeID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := BanTypes(queryMods...)
	queries.SetFrom(query.Query, "\"ban_types\"")

	return query
}

// Faction pointed to by the foreign key.
func (o *BanVote) Faction(mods ...qm.QueryMod) factionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FactionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Factions(queryMods...)
	queries.SetFrom(query.Query, "\"factions\"")

	return query
}

// IssuedBy pointed to by the foreign key.
func (o *BanVote) IssuedBy(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IssuedByID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// ReportedPlayer pointed to by the foreign key.
func (o *BanVote) ReportedPlayer(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ReportedPlayerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// RelatedBanVoteBannedPlayers retrieves all the banned_player's BannedPlayers with an executor via related_ban_vote_id column.
func (o *BanVote) RelatedBanVoteBannedPlayers(mods ...qm.QueryMod) bannedPlayerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"banned_players\".\"related_ban_vote_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"banned_players\".\"deleted_at\""),
	)

	query := BannedPlayers(queryMods...)
	queries.SetFrom(query.Query, "\"banned_players\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"banned_players\".*"})
	}

	return query
}

// PlayersBanVotes retrieves all the players_ban_vote's PlayersBanVotes with an executor.
func (o *BanVote) PlayersBanVotes(mods ...qm.QueryMod) playersBanVoteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"players_ban_votes\".\"ban_vote_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"players_ban_votes\".\"deleted_at\""),
	)

	query := PlayersBanVotes(queryMods...)
	queries.SetFrom(query.Query, "\"players_ban_votes\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"players_ban_votes\".*"})
	}

	return query
}

// LoadBanType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (banVoteL) LoadBanType(e boil.Executor, singular bool, maybeBanVote interface{}, mods queries.Applicator) error {
	var slice []*BanVote
	var object *BanVote

	if singular {
		object = maybeBanVote.(*BanVote)
	} else {
		slice = *maybeBanVote.(*[]*BanVote)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &banVoteR{}
		}
		args = append(args, object.BanTypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &banVoteR{}
			}

			for _, a := range args {
				if a == obj.BanTypeID {
					continue Outer
				}
			}

			args = append(args, obj.BanTypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`ban_types`),
		qm.WhereIn(`ban_types.id in ?`, args...),
		qmhelper.WhereIsNull(`ban_types.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BanType")
	}

	var resultSlice []*BanType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BanType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for ban_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ban_types")
	}

	if len(banVoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BanType = foreign
		if foreign.R == nil {
			foreign.R = &banTypeR{}
		}
		foreign.R.BanVotes = append(foreign.R.BanVotes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BanTypeID == foreign.ID {
				local.R.BanType = foreign
				if foreign.R == nil {
					foreign.R = &banTypeR{}
				}
				foreign.R.BanVotes = append(foreign.R.BanVotes, local)
				break
			}
		}
	}

	return nil
}

// LoadFaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (banVoteL) LoadFaction(e boil.Executor, singular bool, maybeBanVote interface{}, mods queries.Applicator) error {
	var slice []*BanVote
	var object *BanVote

	if singular {
		object = maybeBanVote.(*BanVote)
	} else {
		slice = *maybeBanVote.(*[]*BanVote)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &banVoteR{}
		}
		args = append(args, object.FactionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &banVoteR{}
			}

			for _, a := range args {
				if a == obj.FactionID {
					continue Outer
				}
			}

			args = append(args, obj.FactionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`factions`),
		qm.WhereIn(`factions.id in ?`, args...),
		qmhelper.WhereIsNull(`factions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Faction")
	}

	var resultSlice []*Faction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Faction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for factions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for factions")
	}

	if len(banVoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Faction = foreign
		if foreign.R == nil {
			foreign.R = &factionR{}
		}
		foreign.R.BanVotes = append(foreign.R.BanVotes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FactionID == foreign.ID {
				local.R.Faction = foreign
				if foreign.R == nil {
					foreign.R = &factionR{}
				}
				foreign.R.BanVotes = append(foreign.R.BanVotes, local)
				break
			}
		}
	}

	return nil
}

// LoadIssuedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (banVoteL) LoadIssuedBy(e boil.Executor, singular bool, maybeBanVote interface{}, mods queries.Applicator) error {
	var slice []*BanVote
	var object *BanVote

	if singular {
		object = maybeBanVote.(*BanVote)
	} else {
		slice = *maybeBanVote.(*[]*BanVote)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &banVoteR{}
		}
		args = append(args, object.IssuedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &banVoteR{}
			}

			for _, a := range args {
				if a == obj.IssuedByID {
					continue Outer
				}
			}

			args = append(args, obj.IssuedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(banVoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IssuedBy = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.IssuedByBanVotes = append(foreign.R.IssuedByBanVotes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IssuedByID == foreign.ID {
				local.R.IssuedBy = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.IssuedByBanVotes = append(foreign.R.IssuedByBanVotes, local)
				break
			}
		}
	}

	return nil
}

// LoadReportedPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (banVoteL) LoadReportedPlayer(e boil.Executor, singular bool, maybeBanVote interface{}, mods queries.Applicator) error {
	var slice []*BanVote
	var object *BanVote

	if singular {
		object = maybeBanVote.(*BanVote)
	} else {
		slice = *maybeBanVote.(*[]*BanVote)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &banVoteR{}
		}
		args = append(args, object.ReportedPlayerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &banVoteR{}
			}

			for _, a := range args {
				if a == obj.ReportedPlayerID {
					continue Outer
				}
			}

			args = append(args, obj.ReportedPlayerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(banVoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ReportedPlayer = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.ReportedPlayerBanVotes = append(foreign.R.ReportedPlayerBanVotes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ReportedPlayerID == foreign.ID {
				local.R.ReportedPlayer = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.ReportedPlayerBanVotes = append(foreign.R.ReportedPlayerBanVotes, local)
				break
			}
		}
	}

	return nil
}

// LoadRelatedBanVoteBannedPlayers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (banVoteL) LoadRelatedBanVoteBannedPlayers(e boil.Executor, singular bool, maybeBanVote interface{}, mods queries.Applicator) error {
	var slice []*BanVote
	var object *BanVote

	if singular {
		object = maybeBanVote.(*BanVote)
	} else {
		slice = *maybeBanVote.(*[]*BanVote)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &banVoteR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &banVoteR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`banned_players`),
		qm.WhereIn(`banned_players.related_ban_vote_id in ?`, args...),
		qmhelper.WhereIsNull(`banned_players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load banned_players")
	}

	var resultSlice []*BannedPlayer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice banned_players")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on banned_players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for banned_players")
	}

	if len(bannedPlayerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RelatedBanVoteBannedPlayers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bannedPlayerR{}
			}
			foreign.R.RelatedBanVote = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RelatedBanVoteID) {
				local.R.RelatedBanVoteBannedPlayers = append(local.R.RelatedBanVoteBannedPlayers, foreign)
				if foreign.R == nil {
					foreign.R = &bannedPlayerR{}
				}
				foreign.R.RelatedBanVote = local
				break
			}
		}
	}

	return nil
}

// LoadPlayersBanVotes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (banVoteL) LoadPlayersBanVotes(e boil.Executor, singular bool, maybeBanVote interface{}, mods queries.Applicator) error {
	var slice []*BanVote
	var object *BanVote

	if singular {
		object = maybeBanVote.(*BanVote)
	} else {
		slice = *maybeBanVote.(*[]*BanVote)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &banVoteR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &banVoteR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players_ban_votes`),
		qm.WhereIn(`players_ban_votes.ban_vote_id in ?`, args...),
		qmhelper.WhereIsNull(`players_ban_votes.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load players_ban_votes")
	}

	var resultSlice []*PlayersBanVote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice players_ban_votes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on players_ban_votes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players_ban_votes")
	}

	if len(playersBanVoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PlayersBanVotes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playersBanVoteR{}
			}
			foreign.R.BanVote = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BanVoteID {
				local.R.PlayersBanVotes = append(local.R.PlayersBanVotes, foreign)
				if foreign.R == nil {
					foreign.R = &playersBanVoteR{}
				}
				foreign.R.BanVote = local
				break
			}
		}
	}

	return nil
}

// SetBanType of the banVote to the related item.
// Sets o.R.BanType to related.
// Adds o to related.R.BanVotes.
func (o *BanVote) SetBanType(exec boil.Executor, insert bool, related *BanType) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ban_votes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"ban_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, banVotePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BanTypeID = related.ID
	if o.R == nil {
		o.R = &banVoteR{
			BanType: related,
		}
	} else {
		o.R.BanType = related
	}

	if related.R == nil {
		related.R = &banTypeR{
			BanVotes: BanVoteSlice{o},
		}
	} else {
		related.R.BanVotes = append(related.R.BanVotes, o)
	}

	return nil
}

// SetFaction of the banVote to the related item.
// Sets o.R.Faction to related.
// Adds o to related.R.BanVotes.
func (o *BanVote) SetFaction(exec boil.Executor, insert bool, related *Faction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ban_votes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"faction_id"}),
		strmangle.WhereClause("\"", "\"", 2, banVotePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FactionID = related.ID
	if o.R == nil {
		o.R = &banVoteR{
			Faction: related,
		}
	} else {
		o.R.Faction = related
	}

	if related.R == nil {
		related.R = &factionR{
			BanVotes: BanVoteSlice{o},
		}
	} else {
		related.R.BanVotes = append(related.R.BanVotes, o)
	}

	return nil
}

// SetIssuedBy of the banVote to the related item.
// Sets o.R.IssuedBy to related.
// Adds o to related.R.IssuedByBanVotes.
func (o *BanVote) SetIssuedBy(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ban_votes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"issued_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, banVotePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IssuedByID = related.ID
	if o.R == nil {
		o.R = &banVoteR{
			IssuedBy: related,
		}
	} else {
		o.R.IssuedBy = related
	}

	if related.R == nil {
		related.R = &playerR{
			IssuedByBanVotes: BanVoteSlice{o},
		}
	} else {
		related.R.IssuedByBanVotes = append(related.R.IssuedByBanVotes, o)
	}

	return nil
}

// SetReportedPlayer of the banVote to the related item.
// Sets o.R.ReportedPlayer to related.
// Adds o to related.R.ReportedPlayerBanVotes.
func (o *BanVote) SetReportedPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ban_votes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"reported_player_id"}),
		strmangle.WhereClause("\"", "\"", 2, banVotePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ReportedPlayerID = related.ID
	if o.R == nil {
		o.R = &banVoteR{
			ReportedPlayer: related,
		}
	} else {
		o.R.ReportedPlayer = related
	}

	if related.R == nil {
		related.R = &playerR{
			ReportedPlayerBanVotes: BanVoteSlice{o},
		}
	} else {
		related.R.ReportedPlayerBanVotes = append(related.R.ReportedPlayerBanVotes, o)
	}

	return nil
}

// AddRelatedBanVoteBannedPlayers adds the given related objects to the existing relationships
// of the ban_vote, optionally inserting them as new records.
// Appends related to o.R.RelatedBanVoteBannedPlayers.
// Sets related.R.RelatedBanVote appropriately.
func (o *BanVote) AddRelatedBanVoteBannedPlayers(exec boil.Executor, insert bool, related ...*BannedPlayer) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RelatedBanVoteID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"banned_players\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"related_ban_vote_id"}),
				strmangle.WhereClause("\"", "\"", 2, bannedPlayerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RelatedBanVoteID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &banVoteR{
			RelatedBanVoteBannedPlayers: related,
		}
	} else {
		o.R.RelatedBanVoteBannedPlayers = append(o.R.RelatedBanVoteBannedPlayers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bannedPlayerR{
				RelatedBanVote: o,
			}
		} else {
			rel.R.RelatedBanVote = o
		}
	}
	return nil
}

// SetRelatedBanVoteBannedPlayers removes all previously related items of the
// ban_vote replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RelatedBanVote's RelatedBanVoteBannedPlayers accordingly.
// Replaces o.R.RelatedBanVoteBannedPlayers with related.
// Sets related.R.RelatedBanVote's RelatedBanVoteBannedPlayers accordingly.
func (o *BanVote) SetRelatedBanVoteBannedPlayers(exec boil.Executor, insert bool, related ...*BannedPlayer) error {
	query := "update \"banned_players\" set \"related_ban_vote_id\" = null where \"related_ban_vote_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RelatedBanVoteBannedPlayers {
			queries.SetScanner(&rel.RelatedBanVoteID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.RelatedBanVote = nil
		}

		o.R.RelatedBanVoteBannedPlayers = nil
	}
	return o.AddRelatedBanVoteBannedPlayers(exec, insert, related...)
}

// RemoveRelatedBanVoteBannedPlayers relationships from objects passed in.
// Removes related items from R.RelatedBanVoteBannedPlayers (uses pointer comparison, removal does not keep order)
// Sets related.R.RelatedBanVote.
func (o *BanVote) RemoveRelatedBanVoteBannedPlayers(exec boil.Executor, related ...*BannedPlayer) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RelatedBanVoteID, nil)
		if rel.R != nil {
			rel.R.RelatedBanVote = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("related_ban_vote_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RelatedBanVoteBannedPlayers {
			if rel != ri {
				continue
			}

			ln := len(o.R.RelatedBanVoteBannedPlayers)
			if ln > 1 && i < ln-1 {
				o.R.RelatedBanVoteBannedPlayers[i] = o.R.RelatedBanVoteBannedPlayers[ln-1]
			}
			o.R.RelatedBanVoteBannedPlayers = o.R.RelatedBanVoteBannedPlayers[:ln-1]
			break
		}
	}

	return nil
}

// AddPlayersBanVotes adds the given related objects to the existing relationships
// of the ban_vote, optionally inserting them as new records.
// Appends related to o.R.PlayersBanVotes.
// Sets related.R.BanVote appropriately.
func (o *BanVote) AddPlayersBanVotes(exec boil.Executor, insert bool, related ...*PlayersBanVote) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BanVoteID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"players_ban_votes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"ban_vote_id"}),
				strmangle.WhereClause("\"", "\"", 2, playersBanVotePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BanVoteID = o.ID
		}
	}

	if o.R == nil {
		o.R = &banVoteR{
			PlayersBanVotes: related,
		}
	} else {
		o.R.PlayersBanVotes = append(o.R.PlayersBanVotes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playersBanVoteR{
				BanVote: o,
			}
		} else {
			rel.R.BanVote = o
		}
	}
	return nil
}

// BanVotes retrieves all the records using an executor.
func BanVotes(mods ...qm.QueryMod) banVoteQuery {
	mods = append(mods, qm.From("\"ban_votes\""), qmhelper.WhereIsNull("\"ban_votes\".\"deleted_at\""))
	return banVoteQuery{NewQuery(mods...)}
}

// FindBanVote retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBanVote(exec boil.Executor, iD string, selectCols ...string) (*BanVote, error) {
	banVoteObj := &BanVote{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ban_votes\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, banVoteObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from ban_votes")
	}

	if err = banVoteObj.doAfterSelectHooks(exec); err != nil {
		return banVoteObj, err
	}

	return banVoteObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BanVote) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no ban_votes provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(banVoteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	banVoteInsertCacheMut.RLock()
	cache, cached := banVoteInsertCache[key]
	banVoteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			banVoteAllColumns,
			banVoteColumnsWithDefault,
			banVoteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(banVoteType, banVoteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(banVoteType, banVoteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ban_votes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ban_votes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into ban_votes")
	}

	if !cached {
		banVoteInsertCacheMut.Lock()
		banVoteInsertCache[key] = cache
		banVoteInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BanVote.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BanVote) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	banVoteUpdateCacheMut.RLock()
	cache, cached := banVoteUpdateCache[key]
	banVoteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			banVoteAllColumns,
			banVotePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update ban_votes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ban_votes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, banVotePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(banVoteType, banVoteMapping, append(wl, banVotePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update ban_votes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for ban_votes")
	}

	if !cached {
		banVoteUpdateCacheMut.Lock()
		banVoteUpdateCache[key] = cache
		banVoteUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q banVoteQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for ban_votes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for ban_votes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BanVoteSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), banVotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ban_votes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, banVotePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in banVote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all banVote")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BanVote) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no ban_votes provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(banVoteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	banVoteUpsertCacheMut.RLock()
	cache, cached := banVoteUpsertCache[key]
	banVoteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			banVoteAllColumns,
			banVoteColumnsWithDefault,
			banVoteColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			banVoteAllColumns,
			banVotePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert ban_votes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(banVotePrimaryKeyColumns))
			copy(conflict, banVotePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"ban_votes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(banVoteType, banVoteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(banVoteType, banVoteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert ban_votes")
	}

	if !cached {
		banVoteUpsertCacheMut.Lock()
		banVoteUpsertCache[key] = cache
		banVoteUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BanVote record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BanVote) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BanVote provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), banVotePrimaryKeyMapping)
		sql = "DELETE FROM \"ban_votes\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"ban_votes\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(banVoteType, banVoteMapping, append(wl, banVotePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from ban_votes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for ban_votes")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q banVoteQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no banVoteQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from ban_votes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for ban_votes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BanVoteSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(banVoteBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), banVotePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"ban_votes\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, banVotePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), banVotePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"ban_votes\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, banVotePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from banVote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for ban_votes")
	}

	if len(banVoteAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BanVote) Reload(exec boil.Executor) error {
	ret, err := FindBanVote(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BanVoteSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BanVoteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), banVotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ban_votes\".* FROM \"ban_votes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, banVotePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BanVoteSlice")
	}

	*o = slice

	return nil
}

// BanVoteExists checks if the BanVote row exists.
func BanVoteExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ban_votes\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if ban_votes exists")
	}

	return exists, nil
}
