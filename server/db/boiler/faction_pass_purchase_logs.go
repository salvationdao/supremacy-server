// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FactionPassPurchaseLog is an object representing the database table.
type FactionPassPurchaseLog struct {
	ID                    string          `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	FactionPassID         string          `boiler:"faction_pass_id" boil:"faction_pass_id" json:"faction_pass_id" toml:"faction_pass_id" yaml:"faction_pass_id"`
	PurchasedByID         string          `boiler:"purchased_by_id" boil:"purchased_by_id" json:"purchased_by_id" toml:"purchased_by_id" yaml:"purchased_by_id"`
	PurchaseMethod        string          `boiler:"purchase_method" boil:"purchase_method" json:"purchase_method" toml:"purchase_method" yaml:"purchase_method"`
	SupsPaid              decimal.Decimal `boiler:"sups_paid" boil:"sups_paid" json:"sups_paid" toml:"sups_paid" yaml:"sups_paid"`
	SupsPurchaseTXID      null.String     `boiler:"sups_purchase_tx_id" boil:"sups_purchase_tx_id" json:"sups_purchase_tx_id,omitempty" toml:"sups_purchase_tx_id" yaml:"sups_purchase_tx_id,omitempty"`
	EthPaid               decimal.Decimal `boiler:"eth_paid" boil:"eth_paid" json:"eth_paid" toml:"eth_paid" yaml:"eth_paid"`
	UsdPaid               decimal.Decimal `boiler:"usd_paid" boil:"usd_paid" json:"usd_paid" toml:"usd_paid" yaml:"usd_paid"`
	StripePaymentIntentID null.String     `boiler:"stripe_payment_intent_id" boil:"stripe_payment_intent_id" json:"stripe_payment_intent_id,omitempty" toml:"stripe_payment_intent_id" yaml:"stripe_payment_intent_id,omitempty"`
	ExpendFactionPassDays int             `boiler:"expend_faction_pass_days" boil:"expend_faction_pass_days" json:"expend_faction_pass_days" toml:"expend_faction_pass_days" yaml:"expend_faction_pass_days"`
	PaymentStatus         string          `boiler:"payment_status" boil:"payment_status" json:"payment_status" toml:"payment_status" yaml:"payment_status"`
	CreatedAt             time.Time       `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *factionPassPurchaseLogR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L factionPassPurchaseLogL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FactionPassPurchaseLogColumns = struct {
	ID                    string
	FactionPassID         string
	PurchasedByID         string
	PurchaseMethod        string
	SupsPaid              string
	SupsPurchaseTXID      string
	EthPaid               string
	UsdPaid               string
	StripePaymentIntentID string
	ExpendFactionPassDays string
	PaymentStatus         string
	CreatedAt             string
}{
	ID:                    "id",
	FactionPassID:         "faction_pass_id",
	PurchasedByID:         "purchased_by_id",
	PurchaseMethod:        "purchase_method",
	SupsPaid:              "sups_paid",
	SupsPurchaseTXID:      "sups_purchase_tx_id",
	EthPaid:               "eth_paid",
	UsdPaid:               "usd_paid",
	StripePaymentIntentID: "stripe_payment_intent_id",
	ExpendFactionPassDays: "expend_faction_pass_days",
	PaymentStatus:         "payment_status",
	CreatedAt:             "created_at",
}

var FactionPassPurchaseLogTableColumns = struct {
	ID                    string
	FactionPassID         string
	PurchasedByID         string
	PurchaseMethod        string
	SupsPaid              string
	SupsPurchaseTXID      string
	EthPaid               string
	UsdPaid               string
	StripePaymentIntentID string
	ExpendFactionPassDays string
	PaymentStatus         string
	CreatedAt             string
}{
	ID:                    "faction_pass_purchase_logs.id",
	FactionPassID:         "faction_pass_purchase_logs.faction_pass_id",
	PurchasedByID:         "faction_pass_purchase_logs.purchased_by_id",
	PurchaseMethod:        "faction_pass_purchase_logs.purchase_method",
	SupsPaid:              "faction_pass_purchase_logs.sups_paid",
	SupsPurchaseTXID:      "faction_pass_purchase_logs.sups_purchase_tx_id",
	EthPaid:               "faction_pass_purchase_logs.eth_paid",
	UsdPaid:               "faction_pass_purchase_logs.usd_paid",
	StripePaymentIntentID: "faction_pass_purchase_logs.stripe_payment_intent_id",
	ExpendFactionPassDays: "faction_pass_purchase_logs.expend_faction_pass_days",
	PaymentStatus:         "faction_pass_purchase_logs.payment_status",
	CreatedAt:             "faction_pass_purchase_logs.created_at",
}

// Generated where

var FactionPassPurchaseLogWhere = struct {
	ID                    whereHelperstring
	FactionPassID         whereHelperstring
	PurchasedByID         whereHelperstring
	PurchaseMethod        whereHelperstring
	SupsPaid              whereHelperdecimal_Decimal
	SupsPurchaseTXID      whereHelpernull_String
	EthPaid               whereHelperdecimal_Decimal
	UsdPaid               whereHelperdecimal_Decimal
	StripePaymentIntentID whereHelpernull_String
	ExpendFactionPassDays whereHelperint
	PaymentStatus         whereHelperstring
	CreatedAt             whereHelpertime_Time
}{
	ID:                    whereHelperstring{field: "\"faction_pass_purchase_logs\".\"id\""},
	FactionPassID:         whereHelperstring{field: "\"faction_pass_purchase_logs\".\"faction_pass_id\""},
	PurchasedByID:         whereHelperstring{field: "\"faction_pass_purchase_logs\".\"purchased_by_id\""},
	PurchaseMethod:        whereHelperstring{field: "\"faction_pass_purchase_logs\".\"purchase_method\""},
	SupsPaid:              whereHelperdecimal_Decimal{field: "\"faction_pass_purchase_logs\".\"sups_paid\""},
	SupsPurchaseTXID:      whereHelpernull_String{field: "\"faction_pass_purchase_logs\".\"sups_purchase_tx_id\""},
	EthPaid:               whereHelperdecimal_Decimal{field: "\"faction_pass_purchase_logs\".\"eth_paid\""},
	UsdPaid:               whereHelperdecimal_Decimal{field: "\"faction_pass_purchase_logs\".\"usd_paid\""},
	StripePaymentIntentID: whereHelpernull_String{field: "\"faction_pass_purchase_logs\".\"stripe_payment_intent_id\""},
	ExpendFactionPassDays: whereHelperint{field: "\"faction_pass_purchase_logs\".\"expend_faction_pass_days\""},
	PaymentStatus:         whereHelperstring{field: "\"faction_pass_purchase_logs\".\"payment_status\""},
	CreatedAt:             whereHelpertime_Time{field: "\"faction_pass_purchase_logs\".\"created_at\""},
}

// FactionPassPurchaseLogRels is where relationship names are stored.
var FactionPassPurchaseLogRels = struct {
	FactionPass string
	PurchasedBy string
}{
	FactionPass: "FactionPass",
	PurchasedBy: "PurchasedBy",
}

// factionPassPurchaseLogR is where relationships are stored.
type factionPassPurchaseLogR struct {
	FactionPass *FactionPass `boiler:"FactionPass" boil:"FactionPass" json:"FactionPass" toml:"FactionPass" yaml:"FactionPass"`
	PurchasedBy *Player      `boiler:"PurchasedBy" boil:"PurchasedBy" json:"PurchasedBy" toml:"PurchasedBy" yaml:"PurchasedBy"`
}

// NewStruct creates a new relationship struct
func (*factionPassPurchaseLogR) NewStruct() *factionPassPurchaseLogR {
	return &factionPassPurchaseLogR{}
}

// factionPassPurchaseLogL is where Load methods for each relationship are stored.
type factionPassPurchaseLogL struct{}

var (
	factionPassPurchaseLogAllColumns            = []string{"id", "faction_pass_id", "purchased_by_id", "purchase_method", "sups_paid", "sups_purchase_tx_id", "eth_paid", "usd_paid", "stripe_payment_intent_id", "expend_faction_pass_days", "payment_status", "created_at"}
	factionPassPurchaseLogColumnsWithoutDefault = []string{"faction_pass_id", "purchased_by_id", "purchase_method", "expend_faction_pass_days", "payment_status"}
	factionPassPurchaseLogColumnsWithDefault    = []string{"id", "sups_paid", "sups_purchase_tx_id", "eth_paid", "usd_paid", "stripe_payment_intent_id", "created_at"}
	factionPassPurchaseLogPrimaryKeyColumns     = []string{"id"}
	factionPassPurchaseLogGeneratedColumns      = []string{}
)

type (
	// FactionPassPurchaseLogSlice is an alias for a slice of pointers to FactionPassPurchaseLog.
	// This should almost always be used instead of []FactionPassPurchaseLog.
	FactionPassPurchaseLogSlice []*FactionPassPurchaseLog
	// FactionPassPurchaseLogHook is the signature for custom FactionPassPurchaseLog hook methods
	FactionPassPurchaseLogHook func(boil.Executor, *FactionPassPurchaseLog) error

	factionPassPurchaseLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	factionPassPurchaseLogType                 = reflect.TypeOf(&FactionPassPurchaseLog{})
	factionPassPurchaseLogMapping              = queries.MakeStructMapping(factionPassPurchaseLogType)
	factionPassPurchaseLogPrimaryKeyMapping, _ = queries.BindMapping(factionPassPurchaseLogType, factionPassPurchaseLogMapping, factionPassPurchaseLogPrimaryKeyColumns)
	factionPassPurchaseLogInsertCacheMut       sync.RWMutex
	factionPassPurchaseLogInsertCache          = make(map[string]insertCache)
	factionPassPurchaseLogUpdateCacheMut       sync.RWMutex
	factionPassPurchaseLogUpdateCache          = make(map[string]updateCache)
	factionPassPurchaseLogUpsertCacheMut       sync.RWMutex
	factionPassPurchaseLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var factionPassPurchaseLogAfterSelectHooks []FactionPassPurchaseLogHook

var factionPassPurchaseLogBeforeInsertHooks []FactionPassPurchaseLogHook
var factionPassPurchaseLogAfterInsertHooks []FactionPassPurchaseLogHook

var factionPassPurchaseLogBeforeUpdateHooks []FactionPassPurchaseLogHook
var factionPassPurchaseLogAfterUpdateHooks []FactionPassPurchaseLogHook

var factionPassPurchaseLogBeforeDeleteHooks []FactionPassPurchaseLogHook
var factionPassPurchaseLogAfterDeleteHooks []FactionPassPurchaseLogHook

var factionPassPurchaseLogBeforeUpsertHooks []FactionPassPurchaseLogHook
var factionPassPurchaseLogAfterUpsertHooks []FactionPassPurchaseLogHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FactionPassPurchaseLog) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range factionPassPurchaseLogAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FactionPassPurchaseLog) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range factionPassPurchaseLogBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FactionPassPurchaseLog) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range factionPassPurchaseLogAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FactionPassPurchaseLog) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range factionPassPurchaseLogBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FactionPassPurchaseLog) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range factionPassPurchaseLogAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FactionPassPurchaseLog) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range factionPassPurchaseLogBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FactionPassPurchaseLog) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range factionPassPurchaseLogAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FactionPassPurchaseLog) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range factionPassPurchaseLogBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FactionPassPurchaseLog) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range factionPassPurchaseLogAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFactionPassPurchaseLogHook registers your hook function for all future operations.
func AddFactionPassPurchaseLogHook(hookPoint boil.HookPoint, factionPassPurchaseLogHook FactionPassPurchaseLogHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		factionPassPurchaseLogAfterSelectHooks = append(factionPassPurchaseLogAfterSelectHooks, factionPassPurchaseLogHook)
	case boil.BeforeInsertHook:
		factionPassPurchaseLogBeforeInsertHooks = append(factionPassPurchaseLogBeforeInsertHooks, factionPassPurchaseLogHook)
	case boil.AfterInsertHook:
		factionPassPurchaseLogAfterInsertHooks = append(factionPassPurchaseLogAfterInsertHooks, factionPassPurchaseLogHook)
	case boil.BeforeUpdateHook:
		factionPassPurchaseLogBeforeUpdateHooks = append(factionPassPurchaseLogBeforeUpdateHooks, factionPassPurchaseLogHook)
	case boil.AfterUpdateHook:
		factionPassPurchaseLogAfterUpdateHooks = append(factionPassPurchaseLogAfterUpdateHooks, factionPassPurchaseLogHook)
	case boil.BeforeDeleteHook:
		factionPassPurchaseLogBeforeDeleteHooks = append(factionPassPurchaseLogBeforeDeleteHooks, factionPassPurchaseLogHook)
	case boil.AfterDeleteHook:
		factionPassPurchaseLogAfterDeleteHooks = append(factionPassPurchaseLogAfterDeleteHooks, factionPassPurchaseLogHook)
	case boil.BeforeUpsertHook:
		factionPassPurchaseLogBeforeUpsertHooks = append(factionPassPurchaseLogBeforeUpsertHooks, factionPassPurchaseLogHook)
	case boil.AfterUpsertHook:
		factionPassPurchaseLogAfterUpsertHooks = append(factionPassPurchaseLogAfterUpsertHooks, factionPassPurchaseLogHook)
	}
}

// One returns a single factionPassPurchaseLog record from the query.
func (q factionPassPurchaseLogQuery) One(exec boil.Executor) (*FactionPassPurchaseLog, error) {
	o := &FactionPassPurchaseLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for faction_pass_purchase_logs")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FactionPassPurchaseLog records from the query.
func (q factionPassPurchaseLogQuery) All(exec boil.Executor) (FactionPassPurchaseLogSlice, error) {
	var o []*FactionPassPurchaseLog

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to FactionPassPurchaseLog slice")
	}

	if len(factionPassPurchaseLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FactionPassPurchaseLog records in the query.
func (q factionPassPurchaseLogQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count faction_pass_purchase_logs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q factionPassPurchaseLogQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if faction_pass_purchase_logs exists")
	}

	return count > 0, nil
}

// FactionPass pointed to by the foreign key.
func (o *FactionPassPurchaseLog) FactionPass(mods ...qm.QueryMod) factionPassQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FactionPassID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := FactionPasses(queryMods...)
	queries.SetFrom(query.Query, "\"faction_passes\"")

	return query
}

// PurchasedBy pointed to by the foreign key.
func (o *FactionPassPurchaseLog) PurchasedBy(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PurchasedByID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// LoadFactionPass allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (factionPassPurchaseLogL) LoadFactionPass(e boil.Executor, singular bool, maybeFactionPassPurchaseLog interface{}, mods queries.Applicator) error {
	var slice []*FactionPassPurchaseLog
	var object *FactionPassPurchaseLog

	if singular {
		object = maybeFactionPassPurchaseLog.(*FactionPassPurchaseLog)
	} else {
		slice = *maybeFactionPassPurchaseLog.(*[]*FactionPassPurchaseLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &factionPassPurchaseLogR{}
		}
		args = append(args, object.FactionPassID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &factionPassPurchaseLogR{}
			}

			for _, a := range args {
				if a == obj.FactionPassID {
					continue Outer
				}
			}

			args = append(args, obj.FactionPassID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`faction_passes`),
		qm.WhereIn(`faction_passes.id in ?`, args...),
		qmhelper.WhereIsNull(`faction_passes.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load FactionPass")
	}

	var resultSlice []*FactionPass
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice FactionPass")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for faction_passes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for faction_passes")
	}

	if len(factionPassPurchaseLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FactionPass = foreign
		if foreign.R == nil {
			foreign.R = &factionPassR{}
		}
		foreign.R.FactionPassPurchaseLogs = append(foreign.R.FactionPassPurchaseLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FactionPassID == foreign.ID {
				local.R.FactionPass = foreign
				if foreign.R == nil {
					foreign.R = &factionPassR{}
				}
				foreign.R.FactionPassPurchaseLogs = append(foreign.R.FactionPassPurchaseLogs, local)
				break
			}
		}
	}

	return nil
}

// LoadPurchasedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (factionPassPurchaseLogL) LoadPurchasedBy(e boil.Executor, singular bool, maybeFactionPassPurchaseLog interface{}, mods queries.Applicator) error {
	var slice []*FactionPassPurchaseLog
	var object *FactionPassPurchaseLog

	if singular {
		object = maybeFactionPassPurchaseLog.(*FactionPassPurchaseLog)
	} else {
		slice = *maybeFactionPassPurchaseLog.(*[]*FactionPassPurchaseLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &factionPassPurchaseLogR{}
		}
		args = append(args, object.PurchasedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &factionPassPurchaseLogR{}
			}

			for _, a := range args {
				if a == obj.PurchasedByID {
					continue Outer
				}
			}

			args = append(args, obj.PurchasedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(factionPassPurchaseLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PurchasedBy = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.PurchasedByFactionPassPurchaseLogs = append(foreign.R.PurchasedByFactionPassPurchaseLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PurchasedByID == foreign.ID {
				local.R.PurchasedBy = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.PurchasedByFactionPassPurchaseLogs = append(foreign.R.PurchasedByFactionPassPurchaseLogs, local)
				break
			}
		}
	}

	return nil
}

// SetFactionPass of the factionPassPurchaseLog to the related item.
// Sets o.R.FactionPass to related.
// Adds o to related.R.FactionPassPurchaseLogs.
func (o *FactionPassPurchaseLog) SetFactionPass(exec boil.Executor, insert bool, related *FactionPass) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"faction_pass_purchase_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"faction_pass_id"}),
		strmangle.WhereClause("\"", "\"", 2, factionPassPurchaseLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FactionPassID = related.ID
	if o.R == nil {
		o.R = &factionPassPurchaseLogR{
			FactionPass: related,
		}
	} else {
		o.R.FactionPass = related
	}

	if related.R == nil {
		related.R = &factionPassR{
			FactionPassPurchaseLogs: FactionPassPurchaseLogSlice{o},
		}
	} else {
		related.R.FactionPassPurchaseLogs = append(related.R.FactionPassPurchaseLogs, o)
	}

	return nil
}

// SetPurchasedBy of the factionPassPurchaseLog to the related item.
// Sets o.R.PurchasedBy to related.
// Adds o to related.R.PurchasedByFactionPassPurchaseLogs.
func (o *FactionPassPurchaseLog) SetPurchasedBy(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"faction_pass_purchase_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"purchased_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, factionPassPurchaseLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PurchasedByID = related.ID
	if o.R == nil {
		o.R = &factionPassPurchaseLogR{
			PurchasedBy: related,
		}
	} else {
		o.R.PurchasedBy = related
	}

	if related.R == nil {
		related.R = &playerR{
			PurchasedByFactionPassPurchaseLogs: FactionPassPurchaseLogSlice{o},
		}
	} else {
		related.R.PurchasedByFactionPassPurchaseLogs = append(related.R.PurchasedByFactionPassPurchaseLogs, o)
	}

	return nil
}

// FactionPassPurchaseLogs retrieves all the records using an executor.
func FactionPassPurchaseLogs(mods ...qm.QueryMod) factionPassPurchaseLogQuery {
	mods = append(mods, qm.From("\"faction_pass_purchase_logs\""))
	return factionPassPurchaseLogQuery{NewQuery(mods...)}
}

// FindFactionPassPurchaseLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFactionPassPurchaseLog(exec boil.Executor, iD string, selectCols ...string) (*FactionPassPurchaseLog, error) {
	factionPassPurchaseLogObj := &FactionPassPurchaseLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"faction_pass_purchase_logs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, factionPassPurchaseLogObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from faction_pass_purchase_logs")
	}

	if err = factionPassPurchaseLogObj.doAfterSelectHooks(exec); err != nil {
		return factionPassPurchaseLogObj, err
	}

	return factionPassPurchaseLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FactionPassPurchaseLog) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no faction_pass_purchase_logs provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(factionPassPurchaseLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	factionPassPurchaseLogInsertCacheMut.RLock()
	cache, cached := factionPassPurchaseLogInsertCache[key]
	factionPassPurchaseLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			factionPassPurchaseLogAllColumns,
			factionPassPurchaseLogColumnsWithDefault,
			factionPassPurchaseLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(factionPassPurchaseLogType, factionPassPurchaseLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(factionPassPurchaseLogType, factionPassPurchaseLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"faction_pass_purchase_logs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"faction_pass_purchase_logs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into faction_pass_purchase_logs")
	}

	if !cached {
		factionPassPurchaseLogInsertCacheMut.Lock()
		factionPassPurchaseLogInsertCache[key] = cache
		factionPassPurchaseLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the FactionPassPurchaseLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FactionPassPurchaseLog) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	factionPassPurchaseLogUpdateCacheMut.RLock()
	cache, cached := factionPassPurchaseLogUpdateCache[key]
	factionPassPurchaseLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			factionPassPurchaseLogAllColumns,
			factionPassPurchaseLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update faction_pass_purchase_logs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"faction_pass_purchase_logs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, factionPassPurchaseLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(factionPassPurchaseLogType, factionPassPurchaseLogMapping, append(wl, factionPassPurchaseLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update faction_pass_purchase_logs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for faction_pass_purchase_logs")
	}

	if !cached {
		factionPassPurchaseLogUpdateCacheMut.Lock()
		factionPassPurchaseLogUpdateCache[key] = cache
		factionPassPurchaseLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q factionPassPurchaseLogQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for faction_pass_purchase_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for faction_pass_purchase_logs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FactionPassPurchaseLogSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factionPassPurchaseLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"faction_pass_purchase_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, factionPassPurchaseLogPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in factionPassPurchaseLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all factionPassPurchaseLog")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FactionPassPurchaseLog) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no faction_pass_purchase_logs provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(factionPassPurchaseLogColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	factionPassPurchaseLogUpsertCacheMut.RLock()
	cache, cached := factionPassPurchaseLogUpsertCache[key]
	factionPassPurchaseLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			factionPassPurchaseLogAllColumns,
			factionPassPurchaseLogColumnsWithDefault,
			factionPassPurchaseLogColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			factionPassPurchaseLogAllColumns,
			factionPassPurchaseLogPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert faction_pass_purchase_logs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(factionPassPurchaseLogPrimaryKeyColumns))
			copy(conflict, factionPassPurchaseLogPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"faction_pass_purchase_logs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(factionPassPurchaseLogType, factionPassPurchaseLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(factionPassPurchaseLogType, factionPassPurchaseLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert faction_pass_purchase_logs")
	}

	if !cached {
		factionPassPurchaseLogUpsertCacheMut.Lock()
		factionPassPurchaseLogUpsertCache[key] = cache
		factionPassPurchaseLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single FactionPassPurchaseLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FactionPassPurchaseLog) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no FactionPassPurchaseLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), factionPassPurchaseLogPrimaryKeyMapping)
	sql := "DELETE FROM \"faction_pass_purchase_logs\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from faction_pass_purchase_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for faction_pass_purchase_logs")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q factionPassPurchaseLogQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no factionPassPurchaseLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from faction_pass_purchase_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for faction_pass_purchase_logs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FactionPassPurchaseLogSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(factionPassPurchaseLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factionPassPurchaseLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"faction_pass_purchase_logs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, factionPassPurchaseLogPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from factionPassPurchaseLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for faction_pass_purchase_logs")
	}

	if len(factionPassPurchaseLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FactionPassPurchaseLog) Reload(exec boil.Executor) error {
	ret, err := FindFactionPassPurchaseLog(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FactionPassPurchaseLogSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FactionPassPurchaseLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factionPassPurchaseLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"faction_pass_purchase_logs\".* FROM \"faction_pass_purchase_logs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, factionPassPurchaseLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in FactionPassPurchaseLogSlice")
	}

	*o = slice

	return nil
}

// FactionPassPurchaseLogExists checks if the FactionPassPurchaseLog row exists.
func FactionPassPurchaseLogExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"faction_pass_purchase_logs\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if faction_pass_purchase_logs exists")
	}

	return exists, nil
}
