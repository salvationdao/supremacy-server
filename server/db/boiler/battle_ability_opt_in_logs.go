// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BattleAbilityOptInLog is an object representing the database table.
type BattleAbilityOptInLog struct {
	ID                      string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BattleID                string    `boiler:"battle_id" boil:"battle_id" json:"battle_id" toml:"battle_id" yaml:"battle_id"`
	PlayerID                string    `boiler:"player_id" boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	BattleAbilityOfferingID string    `boiler:"battle_ability_offering_id" boil:"battle_ability_offering_id" json:"battle_ability_offering_id" toml:"battle_ability_offering_id" yaml:"battle_ability_offering_id"`
	FactionID               string    `boiler:"faction_id" boil:"faction_id" json:"faction_id" toml:"faction_id" yaml:"faction_id"`
	BattleAbilityID         string    `boiler:"battle_ability_id" boil:"battle_ability_id" json:"battle_ability_id" toml:"battle_ability_id" yaml:"battle_ability_id"`
	CreatedAt               time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt               time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt               null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *battleAbilityOptInLogR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L battleAbilityOptInLogL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattleAbilityOptInLogColumns = struct {
	ID                      string
	BattleID                string
	PlayerID                string
	BattleAbilityOfferingID string
	FactionID               string
	BattleAbilityID         string
	CreatedAt               string
	UpdatedAt               string
	DeletedAt               string
}{
	ID:                      "id",
	BattleID:                "battle_id",
	PlayerID:                "player_id",
	BattleAbilityOfferingID: "battle_ability_offering_id",
	FactionID:               "faction_id",
	BattleAbilityID:         "battle_ability_id",
	CreatedAt:               "created_at",
	UpdatedAt:               "updated_at",
	DeletedAt:               "deleted_at",
}

var BattleAbilityOptInLogTableColumns = struct {
	ID                      string
	BattleID                string
	PlayerID                string
	BattleAbilityOfferingID string
	FactionID               string
	BattleAbilityID         string
	CreatedAt               string
	UpdatedAt               string
	DeletedAt               string
}{
	ID:                      "battle_ability_opt_in_logs.id",
	BattleID:                "battle_ability_opt_in_logs.battle_id",
	PlayerID:                "battle_ability_opt_in_logs.player_id",
	BattleAbilityOfferingID: "battle_ability_opt_in_logs.battle_ability_offering_id",
	FactionID:               "battle_ability_opt_in_logs.faction_id",
	BattleAbilityID:         "battle_ability_opt_in_logs.battle_ability_id",
	CreatedAt:               "battle_ability_opt_in_logs.created_at",
	UpdatedAt:               "battle_ability_opt_in_logs.updated_at",
	DeletedAt:               "battle_ability_opt_in_logs.deleted_at",
}

// Generated where

var BattleAbilityOptInLogWhere = struct {
	ID                      whereHelperstring
	BattleID                whereHelperstring
	PlayerID                whereHelperstring
	BattleAbilityOfferingID whereHelperstring
	FactionID               whereHelperstring
	BattleAbilityID         whereHelperstring
	CreatedAt               whereHelpertime_Time
	UpdatedAt               whereHelpertime_Time
	DeletedAt               whereHelpernull_Time
}{
	ID:                      whereHelperstring{field: "\"battle_ability_opt_in_logs\".\"id\""},
	BattleID:                whereHelperstring{field: "\"battle_ability_opt_in_logs\".\"battle_id\""},
	PlayerID:                whereHelperstring{field: "\"battle_ability_opt_in_logs\".\"player_id\""},
	BattleAbilityOfferingID: whereHelperstring{field: "\"battle_ability_opt_in_logs\".\"battle_ability_offering_id\""},
	FactionID:               whereHelperstring{field: "\"battle_ability_opt_in_logs\".\"faction_id\""},
	BattleAbilityID:         whereHelperstring{field: "\"battle_ability_opt_in_logs\".\"battle_ability_id\""},
	CreatedAt:               whereHelpertime_Time{field: "\"battle_ability_opt_in_logs\".\"created_at\""},
	UpdatedAt:               whereHelpertime_Time{field: "\"battle_ability_opt_in_logs\".\"updated_at\""},
	DeletedAt:               whereHelpernull_Time{field: "\"battle_ability_opt_in_logs\".\"deleted_at\""},
}

// BattleAbilityOptInLogRels is where relationship names are stored.
var BattleAbilityOptInLogRels = struct {
	BattleAbility string
	Battle        string
	Faction       string
	Player        string
}{
	BattleAbility: "BattleAbility",
	Battle:        "Battle",
	Faction:       "Faction",
	Player:        "Player",
}

// battleAbilityOptInLogR is where relationships are stored.
type battleAbilityOptInLogR struct {
	BattleAbility *BattleAbility `boiler:"BattleAbility" boil:"BattleAbility" json:"BattleAbility" toml:"BattleAbility" yaml:"BattleAbility"`
	Battle        *Battle        `boiler:"Battle" boil:"Battle" json:"Battle" toml:"Battle" yaml:"Battle"`
	Faction       *Faction       `boiler:"Faction" boil:"Faction" json:"Faction" toml:"Faction" yaml:"Faction"`
	Player        *Player        `boiler:"Player" boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
}

// NewStruct creates a new relationship struct
func (*battleAbilityOptInLogR) NewStruct() *battleAbilityOptInLogR {
	return &battleAbilityOptInLogR{}
}

// battleAbilityOptInLogL is where Load methods for each relationship are stored.
type battleAbilityOptInLogL struct{}

var (
	battleAbilityOptInLogAllColumns            = []string{"id", "battle_id", "player_id", "battle_ability_offering_id", "faction_id", "battle_ability_id", "created_at", "updated_at", "deleted_at"}
	battleAbilityOptInLogColumnsWithoutDefault = []string{"battle_id", "player_id", "battle_ability_offering_id", "faction_id", "battle_ability_id"}
	battleAbilityOptInLogColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at"}
	battleAbilityOptInLogPrimaryKeyColumns     = []string{"id"}
	battleAbilityOptInLogGeneratedColumns      = []string{}
)

type (
	// BattleAbilityOptInLogSlice is an alias for a slice of pointers to BattleAbilityOptInLog.
	// This should almost always be used instead of []BattleAbilityOptInLog.
	BattleAbilityOptInLogSlice []*BattleAbilityOptInLog
	// BattleAbilityOptInLogHook is the signature for custom BattleAbilityOptInLog hook methods
	BattleAbilityOptInLogHook func(boil.Executor, *BattleAbilityOptInLog) error

	battleAbilityOptInLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battleAbilityOptInLogType                 = reflect.TypeOf(&BattleAbilityOptInLog{})
	battleAbilityOptInLogMapping              = queries.MakeStructMapping(battleAbilityOptInLogType)
	battleAbilityOptInLogPrimaryKeyMapping, _ = queries.BindMapping(battleAbilityOptInLogType, battleAbilityOptInLogMapping, battleAbilityOptInLogPrimaryKeyColumns)
	battleAbilityOptInLogInsertCacheMut       sync.RWMutex
	battleAbilityOptInLogInsertCache          = make(map[string]insertCache)
	battleAbilityOptInLogUpdateCacheMut       sync.RWMutex
	battleAbilityOptInLogUpdateCache          = make(map[string]updateCache)
	battleAbilityOptInLogUpsertCacheMut       sync.RWMutex
	battleAbilityOptInLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battleAbilityOptInLogAfterSelectHooks []BattleAbilityOptInLogHook

var battleAbilityOptInLogBeforeInsertHooks []BattleAbilityOptInLogHook
var battleAbilityOptInLogAfterInsertHooks []BattleAbilityOptInLogHook

var battleAbilityOptInLogBeforeUpdateHooks []BattleAbilityOptInLogHook
var battleAbilityOptInLogAfterUpdateHooks []BattleAbilityOptInLogHook

var battleAbilityOptInLogBeforeDeleteHooks []BattleAbilityOptInLogHook
var battleAbilityOptInLogAfterDeleteHooks []BattleAbilityOptInLogHook

var battleAbilityOptInLogBeforeUpsertHooks []BattleAbilityOptInLogHook
var battleAbilityOptInLogAfterUpsertHooks []BattleAbilityOptInLogHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BattleAbilityOptInLog) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range battleAbilityOptInLogAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BattleAbilityOptInLog) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleAbilityOptInLogBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BattleAbilityOptInLog) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleAbilityOptInLogAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BattleAbilityOptInLog) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleAbilityOptInLogBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BattleAbilityOptInLog) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleAbilityOptInLogAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BattleAbilityOptInLog) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleAbilityOptInLogBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BattleAbilityOptInLog) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleAbilityOptInLogAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BattleAbilityOptInLog) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleAbilityOptInLogBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BattleAbilityOptInLog) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleAbilityOptInLogAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattleAbilityOptInLogHook registers your hook function for all future operations.
func AddBattleAbilityOptInLogHook(hookPoint boil.HookPoint, battleAbilityOptInLogHook BattleAbilityOptInLogHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		battleAbilityOptInLogAfterSelectHooks = append(battleAbilityOptInLogAfterSelectHooks, battleAbilityOptInLogHook)
	case boil.BeforeInsertHook:
		battleAbilityOptInLogBeforeInsertHooks = append(battleAbilityOptInLogBeforeInsertHooks, battleAbilityOptInLogHook)
	case boil.AfterInsertHook:
		battleAbilityOptInLogAfterInsertHooks = append(battleAbilityOptInLogAfterInsertHooks, battleAbilityOptInLogHook)
	case boil.BeforeUpdateHook:
		battleAbilityOptInLogBeforeUpdateHooks = append(battleAbilityOptInLogBeforeUpdateHooks, battleAbilityOptInLogHook)
	case boil.AfterUpdateHook:
		battleAbilityOptInLogAfterUpdateHooks = append(battleAbilityOptInLogAfterUpdateHooks, battleAbilityOptInLogHook)
	case boil.BeforeDeleteHook:
		battleAbilityOptInLogBeforeDeleteHooks = append(battleAbilityOptInLogBeforeDeleteHooks, battleAbilityOptInLogHook)
	case boil.AfterDeleteHook:
		battleAbilityOptInLogAfterDeleteHooks = append(battleAbilityOptInLogAfterDeleteHooks, battleAbilityOptInLogHook)
	case boil.BeforeUpsertHook:
		battleAbilityOptInLogBeforeUpsertHooks = append(battleAbilityOptInLogBeforeUpsertHooks, battleAbilityOptInLogHook)
	case boil.AfterUpsertHook:
		battleAbilityOptInLogAfterUpsertHooks = append(battleAbilityOptInLogAfterUpsertHooks, battleAbilityOptInLogHook)
	}
}

// One returns a single battleAbilityOptInLog record from the query.
func (q battleAbilityOptInLogQuery) One(exec boil.Executor) (*BattleAbilityOptInLog, error) {
	o := &BattleAbilityOptInLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for battle_ability_opt_in_logs")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BattleAbilityOptInLog records from the query.
func (q battleAbilityOptInLogQuery) All(exec boil.Executor) (BattleAbilityOptInLogSlice, error) {
	var o []*BattleAbilityOptInLog

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BattleAbilityOptInLog slice")
	}

	if len(battleAbilityOptInLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BattleAbilityOptInLog records in the query.
func (q battleAbilityOptInLogQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count battle_ability_opt_in_logs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battleAbilityOptInLogQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if battle_ability_opt_in_logs exists")
	}

	return count > 0, nil
}

// BattleAbility pointed to by the foreign key.
func (o *BattleAbilityOptInLog) BattleAbility(mods ...qm.QueryMod) battleAbilityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BattleAbilityID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := BattleAbilities(queryMods...)
	queries.SetFrom(query.Query, "\"battle_abilities\"")

	return query
}

// Battle pointed to by the foreign key.
func (o *BattleAbilityOptInLog) Battle(mods ...qm.QueryMod) battleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BattleID),
	}

	queryMods = append(queryMods, mods...)

	query := Battles(queryMods...)
	queries.SetFrom(query.Query, "\"battles\"")

	return query
}

// Faction pointed to by the foreign key.
func (o *BattleAbilityOptInLog) Faction(mods ...qm.QueryMod) factionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FactionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Factions(queryMods...)
	queries.SetFrom(query.Query, "\"factions\"")

	return query
}

// Player pointed to by the foreign key.
func (o *BattleAbilityOptInLog) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// LoadBattleAbility allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleAbilityOptInLogL) LoadBattleAbility(e boil.Executor, singular bool, maybeBattleAbilityOptInLog interface{}, mods queries.Applicator) error {
	var slice []*BattleAbilityOptInLog
	var object *BattleAbilityOptInLog

	if singular {
		object = maybeBattleAbilityOptInLog.(*BattleAbilityOptInLog)
	} else {
		slice = *maybeBattleAbilityOptInLog.(*[]*BattleAbilityOptInLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleAbilityOptInLogR{}
		}
		args = append(args, object.BattleAbilityID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleAbilityOptInLogR{}
			}

			for _, a := range args {
				if a == obj.BattleAbilityID {
					continue Outer
				}
			}

			args = append(args, obj.BattleAbilityID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_abilities`),
		qm.WhereIn(`battle_abilities.id in ?`, args...),
		qmhelper.WhereIsNull(`battle_abilities.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BattleAbility")
	}

	var resultSlice []*BattleAbility
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BattleAbility")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battle_abilities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_abilities")
	}

	if len(battleAbilityOptInLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BattleAbility = foreign
		if foreign.R == nil {
			foreign.R = &battleAbilityR{}
		}
		foreign.R.BattleAbilityOptInLogs = append(foreign.R.BattleAbilityOptInLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BattleAbilityID == foreign.ID {
				local.R.BattleAbility = foreign
				if foreign.R == nil {
					foreign.R = &battleAbilityR{}
				}
				foreign.R.BattleAbilityOptInLogs = append(foreign.R.BattleAbilityOptInLogs, local)
				break
			}
		}
	}

	return nil
}

// LoadBattle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleAbilityOptInLogL) LoadBattle(e boil.Executor, singular bool, maybeBattleAbilityOptInLog interface{}, mods queries.Applicator) error {
	var slice []*BattleAbilityOptInLog
	var object *BattleAbilityOptInLog

	if singular {
		object = maybeBattleAbilityOptInLog.(*BattleAbilityOptInLog)
	} else {
		slice = *maybeBattleAbilityOptInLog.(*[]*BattleAbilityOptInLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleAbilityOptInLogR{}
		}
		args = append(args, object.BattleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleAbilityOptInLogR{}
			}

			for _, a := range args {
				if a == obj.BattleID {
					continue Outer
				}
			}

			args = append(args, obj.BattleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battles`),
		qm.WhereIn(`battles.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Battle")
	}

	var resultSlice []*Battle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Battle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battles")
	}

	if len(battleAbilityOptInLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Battle = foreign
		if foreign.R == nil {
			foreign.R = &battleR{}
		}
		foreign.R.BattleAbilityOptInLogs = append(foreign.R.BattleAbilityOptInLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BattleID == foreign.ID {
				local.R.Battle = foreign
				if foreign.R == nil {
					foreign.R = &battleR{}
				}
				foreign.R.BattleAbilityOptInLogs = append(foreign.R.BattleAbilityOptInLogs, local)
				break
			}
		}
	}

	return nil
}

// LoadFaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleAbilityOptInLogL) LoadFaction(e boil.Executor, singular bool, maybeBattleAbilityOptInLog interface{}, mods queries.Applicator) error {
	var slice []*BattleAbilityOptInLog
	var object *BattleAbilityOptInLog

	if singular {
		object = maybeBattleAbilityOptInLog.(*BattleAbilityOptInLog)
	} else {
		slice = *maybeBattleAbilityOptInLog.(*[]*BattleAbilityOptInLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleAbilityOptInLogR{}
		}
		args = append(args, object.FactionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleAbilityOptInLogR{}
			}

			for _, a := range args {
				if a == obj.FactionID {
					continue Outer
				}
			}

			args = append(args, obj.FactionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`factions`),
		qm.WhereIn(`factions.id in ?`, args...),
		qmhelper.WhereIsNull(`factions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Faction")
	}

	var resultSlice []*Faction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Faction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for factions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for factions")
	}

	if len(battleAbilityOptInLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Faction = foreign
		if foreign.R == nil {
			foreign.R = &factionR{}
		}
		foreign.R.BattleAbilityOptInLogs = append(foreign.R.BattleAbilityOptInLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FactionID == foreign.ID {
				local.R.Faction = foreign
				if foreign.R == nil {
					foreign.R = &factionR{}
				}
				foreign.R.BattleAbilityOptInLogs = append(foreign.R.BattleAbilityOptInLogs, local)
				break
			}
		}
	}

	return nil
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleAbilityOptInLogL) LoadPlayer(e boil.Executor, singular bool, maybeBattleAbilityOptInLog interface{}, mods queries.Applicator) error {
	var slice []*BattleAbilityOptInLog
	var object *BattleAbilityOptInLog

	if singular {
		object = maybeBattleAbilityOptInLog.(*BattleAbilityOptInLog)
	} else {
		slice = *maybeBattleAbilityOptInLog.(*[]*BattleAbilityOptInLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleAbilityOptInLogR{}
		}
		args = append(args, object.PlayerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleAbilityOptInLogR{}
			}

			for _, a := range args {
				if a == obj.PlayerID {
					continue Outer
				}
			}

			args = append(args, obj.PlayerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(battleAbilityOptInLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.BattleAbilityOptInLogs = append(foreign.R.BattleAbilityOptInLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.ID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.BattleAbilityOptInLogs = append(foreign.R.BattleAbilityOptInLogs, local)
				break
			}
		}
	}

	return nil
}

// SetBattleAbility of the battleAbilityOptInLog to the related item.
// Sets o.R.BattleAbility to related.
// Adds o to related.R.BattleAbilityOptInLogs.
func (o *BattleAbilityOptInLog) SetBattleAbility(exec boil.Executor, insert bool, related *BattleAbility) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_ability_opt_in_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"battle_ability_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleAbilityOptInLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BattleAbilityID = related.ID
	if o.R == nil {
		o.R = &battleAbilityOptInLogR{
			BattleAbility: related,
		}
	} else {
		o.R.BattleAbility = related
	}

	if related.R == nil {
		related.R = &battleAbilityR{
			BattleAbilityOptInLogs: BattleAbilityOptInLogSlice{o},
		}
	} else {
		related.R.BattleAbilityOptInLogs = append(related.R.BattleAbilityOptInLogs, o)
	}

	return nil
}

// SetBattle of the battleAbilityOptInLog to the related item.
// Sets o.R.Battle to related.
// Adds o to related.R.BattleAbilityOptInLogs.
func (o *BattleAbilityOptInLog) SetBattle(exec boil.Executor, insert bool, related *Battle) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_ability_opt_in_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleAbilityOptInLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BattleID = related.ID
	if o.R == nil {
		o.R = &battleAbilityOptInLogR{
			Battle: related,
		}
	} else {
		o.R.Battle = related
	}

	if related.R == nil {
		related.R = &battleR{
			BattleAbilityOptInLogs: BattleAbilityOptInLogSlice{o},
		}
	} else {
		related.R.BattleAbilityOptInLogs = append(related.R.BattleAbilityOptInLogs, o)
	}

	return nil
}

// SetFaction of the battleAbilityOptInLog to the related item.
// Sets o.R.Faction to related.
// Adds o to related.R.BattleAbilityOptInLogs.
func (o *BattleAbilityOptInLog) SetFaction(exec boil.Executor, insert bool, related *Faction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_ability_opt_in_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"faction_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleAbilityOptInLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FactionID = related.ID
	if o.R == nil {
		o.R = &battleAbilityOptInLogR{
			Faction: related,
		}
	} else {
		o.R.Faction = related
	}

	if related.R == nil {
		related.R = &factionR{
			BattleAbilityOptInLogs: BattleAbilityOptInLogSlice{o},
		}
	} else {
		related.R.BattleAbilityOptInLogs = append(related.R.BattleAbilityOptInLogs, o)
	}

	return nil
}

// SetPlayer of the battleAbilityOptInLog to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.BattleAbilityOptInLogs.
func (o *BattleAbilityOptInLog) SetPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_ability_opt_in_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleAbilityOptInLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.ID
	if o.R == nil {
		o.R = &battleAbilityOptInLogR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			BattleAbilityOptInLogs: BattleAbilityOptInLogSlice{o},
		}
	} else {
		related.R.BattleAbilityOptInLogs = append(related.R.BattleAbilityOptInLogs, o)
	}

	return nil
}

// BattleAbilityOptInLogs retrieves all the records using an executor.
func BattleAbilityOptInLogs(mods ...qm.QueryMod) battleAbilityOptInLogQuery {
	mods = append(mods, qm.From("\"battle_ability_opt_in_logs\""), qmhelper.WhereIsNull("\"battle_ability_opt_in_logs\".\"deleted_at\""))
	return battleAbilityOptInLogQuery{NewQuery(mods...)}
}

// FindBattleAbilityOptInLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattleAbilityOptInLog(exec boil.Executor, iD string, selectCols ...string) (*BattleAbilityOptInLog, error) {
	battleAbilityOptInLogObj := &BattleAbilityOptInLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battle_ability_opt_in_logs\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, battleAbilityOptInLogObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from battle_ability_opt_in_logs")
	}

	if err = battleAbilityOptInLogObj.doAfterSelectHooks(exec); err != nil {
		return battleAbilityOptInLogObj, err
	}

	return battleAbilityOptInLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BattleAbilityOptInLog) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_ability_opt_in_logs provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleAbilityOptInLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battleAbilityOptInLogInsertCacheMut.RLock()
	cache, cached := battleAbilityOptInLogInsertCache[key]
	battleAbilityOptInLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battleAbilityOptInLogAllColumns,
			battleAbilityOptInLogColumnsWithDefault,
			battleAbilityOptInLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battleAbilityOptInLogType, battleAbilityOptInLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battleAbilityOptInLogType, battleAbilityOptInLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battle_ability_opt_in_logs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battle_ability_opt_in_logs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into battle_ability_opt_in_logs")
	}

	if !cached {
		battleAbilityOptInLogInsertCacheMut.Lock()
		battleAbilityOptInLogInsertCache[key] = cache
		battleAbilityOptInLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BattleAbilityOptInLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BattleAbilityOptInLog) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battleAbilityOptInLogUpdateCacheMut.RLock()
	cache, cached := battleAbilityOptInLogUpdateCache[key]
	battleAbilityOptInLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battleAbilityOptInLogAllColumns,
			battleAbilityOptInLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update battle_ability_opt_in_logs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battle_ability_opt_in_logs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battleAbilityOptInLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battleAbilityOptInLogType, battleAbilityOptInLogMapping, append(wl, battleAbilityOptInLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update battle_ability_opt_in_logs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for battle_ability_opt_in_logs")
	}

	if !cached {
		battleAbilityOptInLogUpdateCacheMut.Lock()
		battleAbilityOptInLogUpdateCache[key] = cache
		battleAbilityOptInLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battleAbilityOptInLogQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for battle_ability_opt_in_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for battle_ability_opt_in_logs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattleAbilityOptInLogSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleAbilityOptInLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battle_ability_opt_in_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battleAbilityOptInLogPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in battleAbilityOptInLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all battleAbilityOptInLog")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BattleAbilityOptInLog) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_ability_opt_in_logs provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleAbilityOptInLogColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battleAbilityOptInLogUpsertCacheMut.RLock()
	cache, cached := battleAbilityOptInLogUpsertCache[key]
	battleAbilityOptInLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battleAbilityOptInLogAllColumns,
			battleAbilityOptInLogColumnsWithDefault,
			battleAbilityOptInLogColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			battleAbilityOptInLogAllColumns,
			battleAbilityOptInLogPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert battle_ability_opt_in_logs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battleAbilityOptInLogPrimaryKeyColumns))
			copy(conflict, battleAbilityOptInLogPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battle_ability_opt_in_logs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battleAbilityOptInLogType, battleAbilityOptInLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battleAbilityOptInLogType, battleAbilityOptInLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert battle_ability_opt_in_logs")
	}

	if !cached {
		battleAbilityOptInLogUpsertCacheMut.Lock()
		battleAbilityOptInLogUpsertCache[key] = cache
		battleAbilityOptInLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BattleAbilityOptInLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BattleAbilityOptInLog) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BattleAbilityOptInLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battleAbilityOptInLogPrimaryKeyMapping)
		sql = "DELETE FROM \"battle_ability_opt_in_logs\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"battle_ability_opt_in_logs\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(battleAbilityOptInLogType, battleAbilityOptInLogMapping, append(wl, battleAbilityOptInLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from battle_ability_opt_in_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for battle_ability_opt_in_logs")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battleAbilityOptInLogQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no battleAbilityOptInLogQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battle_ability_opt_in_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_ability_opt_in_logs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattleAbilityOptInLogSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(battleAbilityOptInLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleAbilityOptInLogPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"battle_ability_opt_in_logs\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleAbilityOptInLogPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleAbilityOptInLogPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"battle_ability_opt_in_logs\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, battleAbilityOptInLogPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battleAbilityOptInLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_ability_opt_in_logs")
	}

	if len(battleAbilityOptInLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BattleAbilityOptInLog) Reload(exec boil.Executor) error {
	ret, err := FindBattleAbilityOptInLog(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattleAbilityOptInLogSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattleAbilityOptInLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleAbilityOptInLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battle_ability_opt_in_logs\".* FROM \"battle_ability_opt_in_logs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleAbilityOptInLogPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BattleAbilityOptInLogSlice")
	}

	*o = slice

	return nil
}

// BattleAbilityOptInLogExists checks if the BattleAbilityOptInLog row exists.
func BattleAbilityOptInLogExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battle_ability_opt_in_logs\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if battle_ability_opt_in_logs exists")
	}

	return exists, nil
}
