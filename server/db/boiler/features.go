// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Feature is an object representing the database table.
type Feature struct {
	ID        string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Label     string    `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	DeletedAt null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *featureR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L featureL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FeatureColumns = struct {
	ID        string
	Label     string
	DeletedAt string
	UpdatedAt string
	CreatedAt string
}{
	ID:        "id",
	Label:     "label",
	DeletedAt: "deleted_at",
	UpdatedAt: "updated_at",
	CreatedAt: "created_at",
}

var FeatureTableColumns = struct {
	ID        string
	Label     string
	DeletedAt string
	UpdatedAt string
	CreatedAt string
}{
	ID:        "features.id",
	Label:     "features.label",
	DeletedAt: "features.deleted_at",
	UpdatedAt: "features.updated_at",
	CreatedAt: "features.created_at",
}

// Generated where

var FeatureWhere = struct {
	ID        whereHelperstring
	Label     whereHelperstring
	DeletedAt whereHelpernull_Time
	UpdatedAt whereHelpertime_Time
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"features\".\"id\""},
	Label:     whereHelperstring{field: "\"features\".\"label\""},
	DeletedAt: whereHelpernull_Time{field: "\"features\".\"deleted_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"features\".\"updated_at\""},
	CreatedAt: whereHelpertime_Time{field: "\"features\".\"created_at\""},
}

// FeatureRels is where relationship names are stored.
var FeatureRels = struct {
	PlayersFeatures string
}{
	PlayersFeatures: "PlayersFeatures",
}

// featureR is where relationships are stored.
type featureR struct {
	PlayersFeatures PlayersFeatureSlice `boiler:"PlayersFeatures" boil:"PlayersFeatures" json:"PlayersFeatures" toml:"PlayersFeatures" yaml:"PlayersFeatures"`
}

// NewStruct creates a new relationship struct
func (*featureR) NewStruct() *featureR {
	return &featureR{}
}

// featureL is where Load methods for each relationship are stored.
type featureL struct{}

var (
	featureAllColumns            = []string{"id", "label", "deleted_at", "updated_at", "created_at"}
	featureColumnsWithoutDefault = []string{"label"}
	featureColumnsWithDefault    = []string{"id", "deleted_at", "updated_at", "created_at"}
	featurePrimaryKeyColumns     = []string{"id"}
	featureGeneratedColumns      = []string{}
)

type (
	// FeatureSlice is an alias for a slice of pointers to Feature.
	// This should almost always be used instead of []Feature.
	FeatureSlice []*Feature
	// FeatureHook is the signature for custom Feature hook methods
	FeatureHook func(boil.Executor, *Feature) error

	featureQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	featureType                 = reflect.TypeOf(&Feature{})
	featureMapping              = queries.MakeStructMapping(featureType)
	featurePrimaryKeyMapping, _ = queries.BindMapping(featureType, featureMapping, featurePrimaryKeyColumns)
	featureInsertCacheMut       sync.RWMutex
	featureInsertCache          = make(map[string]insertCache)
	featureUpdateCacheMut       sync.RWMutex
	featureUpdateCache          = make(map[string]updateCache)
	featureUpsertCacheMut       sync.RWMutex
	featureUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var featureAfterSelectHooks []FeatureHook

var featureBeforeInsertHooks []FeatureHook
var featureAfterInsertHooks []FeatureHook

var featureBeforeUpdateHooks []FeatureHook
var featureAfterUpdateHooks []FeatureHook

var featureBeforeDeleteHooks []FeatureHook
var featureAfterDeleteHooks []FeatureHook

var featureBeforeUpsertHooks []FeatureHook
var featureAfterUpsertHooks []FeatureHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Feature) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range featureAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Feature) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range featureBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Feature) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range featureAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Feature) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range featureBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Feature) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range featureAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Feature) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range featureBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Feature) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range featureAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Feature) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range featureBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Feature) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range featureAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFeatureHook registers your hook function for all future operations.
func AddFeatureHook(hookPoint boil.HookPoint, featureHook FeatureHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		featureAfterSelectHooks = append(featureAfterSelectHooks, featureHook)
	case boil.BeforeInsertHook:
		featureBeforeInsertHooks = append(featureBeforeInsertHooks, featureHook)
	case boil.AfterInsertHook:
		featureAfterInsertHooks = append(featureAfterInsertHooks, featureHook)
	case boil.BeforeUpdateHook:
		featureBeforeUpdateHooks = append(featureBeforeUpdateHooks, featureHook)
	case boil.AfterUpdateHook:
		featureAfterUpdateHooks = append(featureAfterUpdateHooks, featureHook)
	case boil.BeforeDeleteHook:
		featureBeforeDeleteHooks = append(featureBeforeDeleteHooks, featureHook)
	case boil.AfterDeleteHook:
		featureAfterDeleteHooks = append(featureAfterDeleteHooks, featureHook)
	case boil.BeforeUpsertHook:
		featureBeforeUpsertHooks = append(featureBeforeUpsertHooks, featureHook)
	case boil.AfterUpsertHook:
		featureAfterUpsertHooks = append(featureAfterUpsertHooks, featureHook)
	}
}

// One returns a single feature record from the query.
func (q featureQuery) One(exec boil.Executor) (*Feature, error) {
	o := &Feature{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for features")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Feature records from the query.
func (q featureQuery) All(exec boil.Executor) (FeatureSlice, error) {
	var o []*Feature

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Feature slice")
	}

	if len(featureAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Feature records in the query.
func (q featureQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count features rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q featureQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if features exists")
	}

	return count > 0, nil
}

// PlayersFeatures retrieves all the players_feature's PlayersFeatures with an executor.
func (o *Feature) PlayersFeatures(mods ...qm.QueryMod) playersFeatureQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"players_features\".\"feature_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"players_features\".\"deleted_at\""),
	)

	query := PlayersFeatures(queryMods...)
	queries.SetFrom(query.Query, "\"players_features\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"players_features\".*"})
	}

	return query
}

// LoadPlayersFeatures allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (featureL) LoadPlayersFeatures(e boil.Executor, singular bool, maybeFeature interface{}, mods queries.Applicator) error {
	var slice []*Feature
	var object *Feature

	if singular {
		object = maybeFeature.(*Feature)
	} else {
		slice = *maybeFeature.(*[]*Feature)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &featureR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &featureR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players_features`),
		qm.WhereIn(`players_features.feature_id in ?`, args...),
		qmhelper.WhereIsNull(`players_features.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load players_features")
	}

	var resultSlice []*PlayersFeature
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice players_features")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on players_features")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players_features")
	}

	if len(playersFeatureAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PlayersFeatures = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playersFeatureR{}
			}
			foreign.R.Feature = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FeatureID {
				local.R.PlayersFeatures = append(local.R.PlayersFeatures, foreign)
				if foreign.R == nil {
					foreign.R = &playersFeatureR{}
				}
				foreign.R.Feature = local
				break
			}
		}
	}

	return nil
}

// AddPlayersFeatures adds the given related objects to the existing relationships
// of the feature, optionally inserting them as new records.
// Appends related to o.R.PlayersFeatures.
// Sets related.R.Feature appropriately.
func (o *Feature) AddPlayersFeatures(exec boil.Executor, insert bool, related ...*PlayersFeature) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FeatureID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"players_features\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"feature_id"}),
				strmangle.WhereClause("\"", "\"", 2, playersFeaturePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FeatureID = o.ID
		}
	}

	if o.R == nil {
		o.R = &featureR{
			PlayersFeatures: related,
		}
	} else {
		o.R.PlayersFeatures = append(o.R.PlayersFeatures, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playersFeatureR{
				Feature: o,
			}
		} else {
			rel.R.Feature = o
		}
	}
	return nil
}

// Features retrieves all the records using an executor.
func Features(mods ...qm.QueryMod) featureQuery {
	mods = append(mods, qm.From("\"features\""), qmhelper.WhereIsNull("\"features\".\"deleted_at\""))
	return featureQuery{NewQuery(mods...)}
}

// FindFeature retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFeature(exec boil.Executor, iD string, selectCols ...string) (*Feature, error) {
	featureObj := &Feature{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"features\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, featureObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from features")
	}

	if err = featureObj.doAfterSelectHooks(exec); err != nil {
		return featureObj, err
	}

	return featureObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Feature) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no features provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(featureColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	featureInsertCacheMut.RLock()
	cache, cached := featureInsertCache[key]
	featureInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			featureAllColumns,
			featureColumnsWithDefault,
			featureColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(featureType, featureMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(featureType, featureMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"features\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"features\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into features")
	}

	if !cached {
		featureInsertCacheMut.Lock()
		featureInsertCache[key] = cache
		featureInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Feature.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Feature) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	featureUpdateCacheMut.RLock()
	cache, cached := featureUpdateCache[key]
	featureUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			featureAllColumns,
			featurePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update features, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"features\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, featurePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(featureType, featureMapping, append(wl, featurePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update features row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for features")
	}

	if !cached {
		featureUpdateCacheMut.Lock()
		featureUpdateCache[key] = cache
		featureUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q featureQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for features")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for features")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FeatureSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), featurePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"features\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, featurePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in feature slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all feature")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Feature) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no features provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(featureColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	featureUpsertCacheMut.RLock()
	cache, cached := featureUpsertCache[key]
	featureUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			featureAllColumns,
			featureColumnsWithDefault,
			featureColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			featureAllColumns,
			featurePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert features, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(featurePrimaryKeyColumns))
			copy(conflict, featurePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"features\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(featureType, featureMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(featureType, featureMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert features")
	}

	if !cached {
		featureUpsertCacheMut.Lock()
		featureUpsertCache[key] = cache
		featureUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Feature record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Feature) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Feature provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), featurePrimaryKeyMapping)
		sql = "DELETE FROM \"features\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"features\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(featureType, featureMapping, append(wl, featurePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from features")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for features")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q featureQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no featureQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from features")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for features")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FeatureSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(featureBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), featurePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"features\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, featurePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), featurePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"features\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, featurePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from feature slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for features")
	}

	if len(featureAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Feature) Reload(exec boil.Executor) error {
	ret, err := FindFeature(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FeatureSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FeatureSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), featurePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"features\".* FROM \"features\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, featurePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in FeatureSlice")
	}

	*o = slice

	return nil
}

// FeatureExists checks if the Feature row exists.
func FeatureExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"features\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if features exists")
	}

	return exists, nil
}
