// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// QuestEvent is an object representing the database table.
type QuestEvent struct {
	ID                 string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Type               string      `boiler:"type" boil:"type" json:"type" toml:"type" yaml:"type"`
	Name               string      `boiler:"name" boil:"name" json:"name" toml:"name" yaml:"name"`
	StartedAt          time.Time   `boiler:"started_at" boil:"started_at" json:"started_at" toml:"started_at" yaml:"started_at"`
	EndAt              time.Time   `boiler:"end_at" boil:"end_at" json:"end_at" toml:"end_at" yaml:"end_at"`
	DurationType       string      `boiler:"duration_type" boil:"duration_type" json:"duration_type" toml:"duration_type" yaml:"duration_type"`
	CustomDurationDays null.Int    `boiler:"custom_duration_days" boil:"custom_duration_days" json:"custom_duration_days,omitempty" toml:"custom_duration_days" yaml:"custom_duration_days,omitempty"`
	Repeatable         bool        `boiler:"repeatable" boil:"repeatable" json:"repeatable" toml:"repeatable" yaml:"repeatable"`
	NextQuestEventID   null.String `boiler:"next_quest_event_id" boil:"next_quest_event_id" json:"next_quest_event_id,omitempty" toml:"next_quest_event_id" yaml:"next_quest_event_id,omitempty"`
	QuestEventNumber   int         `boiler:"quest_event_number" boil:"quest_event_number" json:"quest_event_number" toml:"quest_event_number" yaml:"quest_event_number"`
	CreatedAt          time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt          null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *questEventR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L questEventL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var QuestEventColumns = struct {
	ID                 string
	Type               string
	Name               string
	StartedAt          string
	EndAt              string
	DurationType       string
	CustomDurationDays string
	Repeatable         string
	NextQuestEventID   string
	QuestEventNumber   string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "id",
	Type:               "type",
	Name:               "name",
	StartedAt:          "started_at",
	EndAt:              "end_at",
	DurationType:       "duration_type",
	CustomDurationDays: "custom_duration_days",
	Repeatable:         "repeatable",
	NextQuestEventID:   "next_quest_event_id",
	QuestEventNumber:   "quest_event_number",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	DeletedAt:          "deleted_at",
}

var QuestEventTableColumns = struct {
	ID                 string
	Type               string
	Name               string
	StartedAt          string
	EndAt              string
	DurationType       string
	CustomDurationDays string
	Repeatable         string
	NextQuestEventID   string
	QuestEventNumber   string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "quest_events.id",
	Type:               "quest_events.type",
	Name:               "quest_events.name",
	StartedAt:          "quest_events.started_at",
	EndAt:              "quest_events.end_at",
	DurationType:       "quest_events.duration_type",
	CustomDurationDays: "quest_events.custom_duration_days",
	Repeatable:         "quest_events.repeatable",
	NextQuestEventID:   "quest_events.next_quest_event_id",
	QuestEventNumber:   "quest_events.quest_event_number",
	CreatedAt:          "quest_events.created_at",
	UpdatedAt:          "quest_events.updated_at",
	DeletedAt:          "quest_events.deleted_at",
}

// Generated where

var QuestEventWhere = struct {
	ID                 whereHelperstring
	Type               whereHelperstring
	Name               whereHelperstring
	StartedAt          whereHelpertime_Time
	EndAt              whereHelpertime_Time
	DurationType       whereHelperstring
	CustomDurationDays whereHelpernull_Int
	Repeatable         whereHelperbool
	NextQuestEventID   whereHelpernull_String
	QuestEventNumber   whereHelperint
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
	DeletedAt          whereHelpernull_Time
}{
	ID:                 whereHelperstring{field: "\"quest_events\".\"id\""},
	Type:               whereHelperstring{field: "\"quest_events\".\"type\""},
	Name:               whereHelperstring{field: "\"quest_events\".\"name\""},
	StartedAt:          whereHelpertime_Time{field: "\"quest_events\".\"started_at\""},
	EndAt:              whereHelpertime_Time{field: "\"quest_events\".\"end_at\""},
	DurationType:       whereHelperstring{field: "\"quest_events\".\"duration_type\""},
	CustomDurationDays: whereHelpernull_Int{field: "\"quest_events\".\"custom_duration_days\""},
	Repeatable:         whereHelperbool{field: "\"quest_events\".\"repeatable\""},
	NextQuestEventID:   whereHelpernull_String{field: "\"quest_events\".\"next_quest_event_id\""},
	QuestEventNumber:   whereHelperint{field: "\"quest_events\".\"quest_event_number\""},
	CreatedAt:          whereHelpertime_Time{field: "\"quest_events\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"quest_events\".\"updated_at\""},
	DeletedAt:          whereHelpernull_Time{field: "\"quest_events\".\"deleted_at\""},
}

// QuestEventRels is where relationship names are stored.
var QuestEventRels = struct {
	NextQuestEvent            string
	NextQuestEventQuestEvents string
	Quests                    string
}{
	NextQuestEvent:            "NextQuestEvent",
	NextQuestEventQuestEvents: "NextQuestEventQuestEvents",
	Quests:                    "Quests",
}

// questEventR is where relationships are stored.
type questEventR struct {
	NextQuestEvent            *QuestEvent     `boiler:"NextQuestEvent" boil:"NextQuestEvent" json:"NextQuestEvent" toml:"NextQuestEvent" yaml:"NextQuestEvent"`
	NextQuestEventQuestEvents QuestEventSlice `boiler:"NextQuestEventQuestEvents" boil:"NextQuestEventQuestEvents" json:"NextQuestEventQuestEvents" toml:"NextQuestEventQuestEvents" yaml:"NextQuestEventQuestEvents"`
	Quests                    QuestSlice      `boiler:"Quests" boil:"Quests" json:"Quests" toml:"Quests" yaml:"Quests"`
}

// NewStruct creates a new relationship struct
func (*questEventR) NewStruct() *questEventR {
	return &questEventR{}
}

// questEventL is where Load methods for each relationship are stored.
type questEventL struct{}

var (
	questEventAllColumns            = []string{"id", "type", "name", "started_at", "end_at", "duration_type", "custom_duration_days", "repeatable", "next_quest_event_id", "quest_event_number", "created_at", "updated_at", "deleted_at"}
	questEventColumnsWithoutDefault = []string{"type", "name", "started_at", "end_at", "duration_type"}
	questEventColumnsWithDefault    = []string{"id", "custom_duration_days", "repeatable", "next_quest_event_id", "quest_event_number", "created_at", "updated_at", "deleted_at"}
	questEventPrimaryKeyColumns     = []string{"id"}
	questEventGeneratedColumns      = []string{}
)

type (
	// QuestEventSlice is an alias for a slice of pointers to QuestEvent.
	// This should almost always be used instead of []QuestEvent.
	QuestEventSlice []*QuestEvent
	// QuestEventHook is the signature for custom QuestEvent hook methods
	QuestEventHook func(boil.Executor, *QuestEvent) error

	questEventQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	questEventType                 = reflect.TypeOf(&QuestEvent{})
	questEventMapping              = queries.MakeStructMapping(questEventType)
	questEventPrimaryKeyMapping, _ = queries.BindMapping(questEventType, questEventMapping, questEventPrimaryKeyColumns)
	questEventInsertCacheMut       sync.RWMutex
	questEventInsertCache          = make(map[string]insertCache)
	questEventUpdateCacheMut       sync.RWMutex
	questEventUpdateCache          = make(map[string]updateCache)
	questEventUpsertCacheMut       sync.RWMutex
	questEventUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var questEventAfterSelectHooks []QuestEventHook

var questEventBeforeInsertHooks []QuestEventHook
var questEventAfterInsertHooks []QuestEventHook

var questEventBeforeUpdateHooks []QuestEventHook
var questEventAfterUpdateHooks []QuestEventHook

var questEventBeforeDeleteHooks []QuestEventHook
var questEventAfterDeleteHooks []QuestEventHook

var questEventBeforeUpsertHooks []QuestEventHook
var questEventAfterUpsertHooks []QuestEventHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *QuestEvent) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range questEventAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *QuestEvent) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range questEventBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *QuestEvent) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range questEventAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *QuestEvent) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range questEventBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *QuestEvent) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range questEventAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *QuestEvent) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range questEventBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *QuestEvent) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range questEventAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *QuestEvent) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range questEventBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *QuestEvent) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range questEventAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddQuestEventHook registers your hook function for all future operations.
func AddQuestEventHook(hookPoint boil.HookPoint, questEventHook QuestEventHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		questEventAfterSelectHooks = append(questEventAfterSelectHooks, questEventHook)
	case boil.BeforeInsertHook:
		questEventBeforeInsertHooks = append(questEventBeforeInsertHooks, questEventHook)
	case boil.AfterInsertHook:
		questEventAfterInsertHooks = append(questEventAfterInsertHooks, questEventHook)
	case boil.BeforeUpdateHook:
		questEventBeforeUpdateHooks = append(questEventBeforeUpdateHooks, questEventHook)
	case boil.AfterUpdateHook:
		questEventAfterUpdateHooks = append(questEventAfterUpdateHooks, questEventHook)
	case boil.BeforeDeleteHook:
		questEventBeforeDeleteHooks = append(questEventBeforeDeleteHooks, questEventHook)
	case boil.AfterDeleteHook:
		questEventAfterDeleteHooks = append(questEventAfterDeleteHooks, questEventHook)
	case boil.BeforeUpsertHook:
		questEventBeforeUpsertHooks = append(questEventBeforeUpsertHooks, questEventHook)
	case boil.AfterUpsertHook:
		questEventAfterUpsertHooks = append(questEventAfterUpsertHooks, questEventHook)
	}
}

// One returns a single questEvent record from the query.
func (q questEventQuery) One(exec boil.Executor) (*QuestEvent, error) {
	o := &QuestEvent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for quest_events")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all QuestEvent records from the query.
func (q questEventQuery) All(exec boil.Executor) (QuestEventSlice, error) {
	var o []*QuestEvent

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to QuestEvent slice")
	}

	if len(questEventAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all QuestEvent records in the query.
func (q questEventQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count quest_events rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q questEventQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if quest_events exists")
	}

	return count > 0, nil
}

// NextQuestEvent pointed to by the foreign key.
func (o *QuestEvent) NextQuestEvent(mods ...qm.QueryMod) questEventQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.NextQuestEventID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := QuestEvents(queryMods...)
	queries.SetFrom(query.Query, "\"quest_events\"")

	return query
}

// NextQuestEventQuestEvents retrieves all the quest_event's QuestEvents with an executor via next_quest_event_id column.
func (o *QuestEvent) NextQuestEventQuestEvents(mods ...qm.QueryMod) questEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"quest_events\".\"next_quest_event_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"quest_events\".\"deleted_at\""),
	)

	query := QuestEvents(queryMods...)
	queries.SetFrom(query.Query, "\"quest_events\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"quest_events\".*"})
	}

	return query
}

// Quests retrieves all the quest's Quests with an executor.
func (o *QuestEvent) Quests(mods ...qm.QueryMod) questQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"quests\".\"quest_event_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"quests\".\"deleted_at\""),
	)

	query := Quests(queryMods...)
	queries.SetFrom(query.Query, "\"quests\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"quests\".*"})
	}

	return query
}

// LoadNextQuestEvent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (questEventL) LoadNextQuestEvent(e boil.Executor, singular bool, maybeQuestEvent interface{}, mods queries.Applicator) error {
	var slice []*QuestEvent
	var object *QuestEvent

	if singular {
		object = maybeQuestEvent.(*QuestEvent)
	} else {
		slice = *maybeQuestEvent.(*[]*QuestEvent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &questEventR{}
		}
		if !queries.IsNil(object.NextQuestEventID) {
			args = append(args, object.NextQuestEventID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &questEventR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.NextQuestEventID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.NextQuestEventID) {
				args = append(args, obj.NextQuestEventID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`quest_events`),
		qm.WhereIn(`quest_events.id in ?`, args...),
		qmhelper.WhereIsNull(`quest_events.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load QuestEvent")
	}

	var resultSlice []*QuestEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice QuestEvent")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for quest_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for quest_events")
	}

	if len(questEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.NextQuestEvent = foreign
		if foreign.R == nil {
			foreign.R = &questEventR{}
		}
		foreign.R.NextQuestEventQuestEvents = append(foreign.R.NextQuestEventQuestEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.NextQuestEventID, foreign.ID) {
				local.R.NextQuestEvent = foreign
				if foreign.R == nil {
					foreign.R = &questEventR{}
				}
				foreign.R.NextQuestEventQuestEvents = append(foreign.R.NextQuestEventQuestEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadNextQuestEventQuestEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (questEventL) LoadNextQuestEventQuestEvents(e boil.Executor, singular bool, maybeQuestEvent interface{}, mods queries.Applicator) error {
	var slice []*QuestEvent
	var object *QuestEvent

	if singular {
		object = maybeQuestEvent.(*QuestEvent)
	} else {
		slice = *maybeQuestEvent.(*[]*QuestEvent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &questEventR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &questEventR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`quest_events`),
		qm.WhereIn(`quest_events.next_quest_event_id in ?`, args...),
		qmhelper.WhereIsNull(`quest_events.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load quest_events")
	}

	var resultSlice []*QuestEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice quest_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on quest_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for quest_events")
	}

	if len(questEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.NextQuestEventQuestEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &questEventR{}
			}
			foreign.R.NextQuestEvent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.NextQuestEventID) {
				local.R.NextQuestEventQuestEvents = append(local.R.NextQuestEventQuestEvents, foreign)
				if foreign.R == nil {
					foreign.R = &questEventR{}
				}
				foreign.R.NextQuestEvent = local
				break
			}
		}
	}

	return nil
}

// LoadQuests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (questEventL) LoadQuests(e boil.Executor, singular bool, maybeQuestEvent interface{}, mods queries.Applicator) error {
	var slice []*QuestEvent
	var object *QuestEvent

	if singular {
		object = maybeQuestEvent.(*QuestEvent)
	} else {
		slice = *maybeQuestEvent.(*[]*QuestEvent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &questEventR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &questEventR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`quests`),
		qm.WhereIn(`quests.quest_event_id in ?`, args...),
		qmhelper.WhereIsNull(`quests.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load quests")
	}

	var resultSlice []*Quest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice quests")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on quests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for quests")
	}

	if len(questAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Quests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &questR{}
			}
			foreign.R.QuestEvent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.QuestEventID {
				local.R.Quests = append(local.R.Quests, foreign)
				if foreign.R == nil {
					foreign.R = &questR{}
				}
				foreign.R.QuestEvent = local
				break
			}
		}
	}

	return nil
}

// SetNextQuestEvent of the questEvent to the related item.
// Sets o.R.NextQuestEvent to related.
// Adds o to related.R.NextQuestEventQuestEvents.
func (o *QuestEvent) SetNextQuestEvent(exec boil.Executor, insert bool, related *QuestEvent) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"quest_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"next_quest_event_id"}),
		strmangle.WhereClause("\"", "\"", 2, questEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.NextQuestEventID, related.ID)
	if o.R == nil {
		o.R = &questEventR{
			NextQuestEvent: related,
		}
	} else {
		o.R.NextQuestEvent = related
	}

	if related.R == nil {
		related.R = &questEventR{
			NextQuestEventQuestEvents: QuestEventSlice{o},
		}
	} else {
		related.R.NextQuestEventQuestEvents = append(related.R.NextQuestEventQuestEvents, o)
	}

	return nil
}

// RemoveNextQuestEvent relationship.
// Sets o.R.NextQuestEvent to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *QuestEvent) RemoveNextQuestEvent(exec boil.Executor, related *QuestEvent) error {
	var err error

	queries.SetScanner(&o.NextQuestEventID, nil)
	if _, err = o.Update(exec, boil.Whitelist("next_quest_event_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.NextQuestEvent = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.NextQuestEventQuestEvents {
		if queries.Equal(o.NextQuestEventID, ri.NextQuestEventID) {
			continue
		}

		ln := len(related.R.NextQuestEventQuestEvents)
		if ln > 1 && i < ln-1 {
			related.R.NextQuestEventQuestEvents[i] = related.R.NextQuestEventQuestEvents[ln-1]
		}
		related.R.NextQuestEventQuestEvents = related.R.NextQuestEventQuestEvents[:ln-1]
		break
	}
	return nil
}

// AddNextQuestEventQuestEvents adds the given related objects to the existing relationships
// of the quest_event, optionally inserting them as new records.
// Appends related to o.R.NextQuestEventQuestEvents.
// Sets related.R.NextQuestEvent appropriately.
func (o *QuestEvent) AddNextQuestEventQuestEvents(exec boil.Executor, insert bool, related ...*QuestEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.NextQuestEventID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"quest_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"next_quest_event_id"}),
				strmangle.WhereClause("\"", "\"", 2, questEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.NextQuestEventID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &questEventR{
			NextQuestEventQuestEvents: related,
		}
	} else {
		o.R.NextQuestEventQuestEvents = append(o.R.NextQuestEventQuestEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &questEventR{
				NextQuestEvent: o,
			}
		} else {
			rel.R.NextQuestEvent = o
		}
	}
	return nil
}

// SetNextQuestEventQuestEvents removes all previously related items of the
// quest_event replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.NextQuestEvent's NextQuestEventQuestEvents accordingly.
// Replaces o.R.NextQuestEventQuestEvents with related.
// Sets related.R.NextQuestEvent's NextQuestEventQuestEvents accordingly.
func (o *QuestEvent) SetNextQuestEventQuestEvents(exec boil.Executor, insert bool, related ...*QuestEvent) error {
	query := "update \"quest_events\" set \"next_quest_event_id\" = null where \"next_quest_event_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.NextQuestEventQuestEvents {
			queries.SetScanner(&rel.NextQuestEventID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.NextQuestEvent = nil
		}

		o.R.NextQuestEventQuestEvents = nil
	}
	return o.AddNextQuestEventQuestEvents(exec, insert, related...)
}

// RemoveNextQuestEventQuestEvents relationships from objects passed in.
// Removes related items from R.NextQuestEventQuestEvents (uses pointer comparison, removal does not keep order)
// Sets related.R.NextQuestEvent.
func (o *QuestEvent) RemoveNextQuestEventQuestEvents(exec boil.Executor, related ...*QuestEvent) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.NextQuestEventID, nil)
		if rel.R != nil {
			rel.R.NextQuestEvent = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("next_quest_event_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.NextQuestEventQuestEvents {
			if rel != ri {
				continue
			}

			ln := len(o.R.NextQuestEventQuestEvents)
			if ln > 1 && i < ln-1 {
				o.R.NextQuestEventQuestEvents[i] = o.R.NextQuestEventQuestEvents[ln-1]
			}
			o.R.NextQuestEventQuestEvents = o.R.NextQuestEventQuestEvents[:ln-1]
			break
		}
	}

	return nil
}

// AddQuests adds the given related objects to the existing relationships
// of the quest_event, optionally inserting them as new records.
// Appends related to o.R.Quests.
// Sets related.R.QuestEvent appropriately.
func (o *QuestEvent) AddQuests(exec boil.Executor, insert bool, related ...*Quest) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.QuestEventID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"quests\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"quest_event_id"}),
				strmangle.WhereClause("\"", "\"", 2, questPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.QuestEventID = o.ID
		}
	}

	if o.R == nil {
		o.R = &questEventR{
			Quests: related,
		}
	} else {
		o.R.Quests = append(o.R.Quests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &questR{
				QuestEvent: o,
			}
		} else {
			rel.R.QuestEvent = o
		}
	}
	return nil
}

// QuestEvents retrieves all the records using an executor.
func QuestEvents(mods ...qm.QueryMod) questEventQuery {
	mods = append(mods, qm.From("\"quest_events\""), qmhelper.WhereIsNull("\"quest_events\".\"deleted_at\""))
	return questEventQuery{NewQuery(mods...)}
}

// FindQuestEvent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindQuestEvent(exec boil.Executor, iD string, selectCols ...string) (*QuestEvent, error) {
	questEventObj := &QuestEvent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"quest_events\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, questEventObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from quest_events")
	}

	if err = questEventObj.doAfterSelectHooks(exec); err != nil {
		return questEventObj, err
	}

	return questEventObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *QuestEvent) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no quest_events provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(questEventColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	questEventInsertCacheMut.RLock()
	cache, cached := questEventInsertCache[key]
	questEventInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			questEventAllColumns,
			questEventColumnsWithDefault,
			questEventColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(questEventType, questEventMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(questEventType, questEventMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"quest_events\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"quest_events\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into quest_events")
	}

	if !cached {
		questEventInsertCacheMut.Lock()
		questEventInsertCache[key] = cache
		questEventInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the QuestEvent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *QuestEvent) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	questEventUpdateCacheMut.RLock()
	cache, cached := questEventUpdateCache[key]
	questEventUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			questEventAllColumns,
			questEventPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update quest_events, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"quest_events\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, questEventPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(questEventType, questEventMapping, append(wl, questEventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update quest_events row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for quest_events")
	}

	if !cached {
		questEventUpdateCacheMut.Lock()
		questEventUpdateCache[key] = cache
		questEventUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q questEventQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for quest_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for quest_events")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o QuestEventSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), questEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"quest_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, questEventPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in questEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all questEvent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *QuestEvent) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no quest_events provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(questEventColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	questEventUpsertCacheMut.RLock()
	cache, cached := questEventUpsertCache[key]
	questEventUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			questEventAllColumns,
			questEventColumnsWithDefault,
			questEventColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			questEventAllColumns,
			questEventPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert quest_events, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(questEventPrimaryKeyColumns))
			copy(conflict, questEventPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"quest_events\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(questEventType, questEventMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(questEventType, questEventMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert quest_events")
	}

	if !cached {
		questEventUpsertCacheMut.Lock()
		questEventUpsertCache[key] = cache
		questEventUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single QuestEvent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *QuestEvent) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no QuestEvent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), questEventPrimaryKeyMapping)
		sql = "DELETE FROM \"quest_events\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"quest_events\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(questEventType, questEventMapping, append(wl, questEventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from quest_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for quest_events")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q questEventQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no questEventQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from quest_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for quest_events")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o QuestEventSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(questEventBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), questEventPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"quest_events\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, questEventPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), questEventPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"quest_events\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, questEventPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from questEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for quest_events")
	}

	if len(questEventAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *QuestEvent) Reload(exec boil.Executor) error {
	ret, err := FindQuestEvent(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *QuestEventSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := QuestEventSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), questEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"quest_events\".* FROM \"quest_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, questEventPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in QuestEventSlice")
	}

	*o = slice

	return nil
}

// QuestEventExists checks if the QuestEvent row exists.
func QuestEventExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"quest_events\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if quest_events exists")
	}

	return exists, nil
}
