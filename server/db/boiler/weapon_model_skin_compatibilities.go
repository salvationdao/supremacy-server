// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// WeaponModelSkinCompatibility is an object representing the database table.
type WeaponModelSkinCompatibility struct {
	BlueprintWeaponSkinID string      `boiler:"blueprint_weapon_skin_id" boil:"blueprint_weapon_skin_id" json:"blueprint_weapon_skin_id" toml:"blueprint_weapon_skin_id" yaml:"blueprint_weapon_skin_id"`
	WeaponModelID         string      `boiler:"weapon_model_id" boil:"weapon_model_id" json:"weapon_model_id" toml:"weapon_model_id" yaml:"weapon_model_id"`
	ImageURL              null.String `boiler:"image_url" boil:"image_url" json:"image_url,omitempty" toml:"image_url" yaml:"image_url,omitempty"`
	CardAnimationURL      null.String `boiler:"card_animation_url" boil:"card_animation_url" json:"card_animation_url,omitempty" toml:"card_animation_url" yaml:"card_animation_url,omitempty"`
	AvatarURL             null.String `boiler:"avatar_url" boil:"avatar_url" json:"avatar_url,omitempty" toml:"avatar_url" yaml:"avatar_url,omitempty"`
	LargeImageURL         null.String `boiler:"large_image_url" boil:"large_image_url" json:"large_image_url,omitempty" toml:"large_image_url" yaml:"large_image_url,omitempty"`
	BackgroundColor       null.String `boiler:"background_color" boil:"background_color" json:"background_color,omitempty" toml:"background_color" yaml:"background_color,omitempty"`
	AnimationURL          null.String `boiler:"animation_url" boil:"animation_url" json:"animation_url,omitempty" toml:"animation_url" yaml:"animation_url,omitempty"`
	YoutubeURL            null.String `boiler:"youtube_url" boil:"youtube_url" json:"youtube_url,omitempty" toml:"youtube_url" yaml:"youtube_url,omitempty"`
	DeletedAt             null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt             time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt             time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *weaponModelSkinCompatibilityR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L weaponModelSkinCompatibilityL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WeaponModelSkinCompatibilityColumns = struct {
	BlueprintWeaponSkinID string
	WeaponModelID         string
	ImageURL              string
	CardAnimationURL      string
	AvatarURL             string
	LargeImageURL         string
	BackgroundColor       string
	AnimationURL          string
	YoutubeURL            string
	DeletedAt             string
	UpdatedAt             string
	CreatedAt             string
}{
	BlueprintWeaponSkinID: "blueprint_weapon_skin_id",
	WeaponModelID:         "weapon_model_id",
	ImageURL:              "image_url",
	CardAnimationURL:      "card_animation_url",
	AvatarURL:             "avatar_url",
	LargeImageURL:         "large_image_url",
	BackgroundColor:       "background_color",
	AnimationURL:          "animation_url",
	YoutubeURL:            "youtube_url",
	DeletedAt:             "deleted_at",
	UpdatedAt:             "updated_at",
	CreatedAt:             "created_at",
}

var WeaponModelSkinCompatibilityTableColumns = struct {
	BlueprintWeaponSkinID string
	WeaponModelID         string
	ImageURL              string
	CardAnimationURL      string
	AvatarURL             string
	LargeImageURL         string
	BackgroundColor       string
	AnimationURL          string
	YoutubeURL            string
	DeletedAt             string
	UpdatedAt             string
	CreatedAt             string
}{
	BlueprintWeaponSkinID: "weapon_model_skin_compatibilities.blueprint_weapon_skin_id",
	WeaponModelID:         "weapon_model_skin_compatibilities.weapon_model_id",
	ImageURL:              "weapon_model_skin_compatibilities.image_url",
	CardAnimationURL:      "weapon_model_skin_compatibilities.card_animation_url",
	AvatarURL:             "weapon_model_skin_compatibilities.avatar_url",
	LargeImageURL:         "weapon_model_skin_compatibilities.large_image_url",
	BackgroundColor:       "weapon_model_skin_compatibilities.background_color",
	AnimationURL:          "weapon_model_skin_compatibilities.animation_url",
	YoutubeURL:            "weapon_model_skin_compatibilities.youtube_url",
	DeletedAt:             "weapon_model_skin_compatibilities.deleted_at",
	UpdatedAt:             "weapon_model_skin_compatibilities.updated_at",
	CreatedAt:             "weapon_model_skin_compatibilities.created_at",
}

// Generated where

var WeaponModelSkinCompatibilityWhere = struct {
	BlueprintWeaponSkinID whereHelperstring
	WeaponModelID         whereHelperstring
	ImageURL              whereHelpernull_String
	CardAnimationURL      whereHelpernull_String
	AvatarURL             whereHelpernull_String
	LargeImageURL         whereHelpernull_String
	BackgroundColor       whereHelpernull_String
	AnimationURL          whereHelpernull_String
	YoutubeURL            whereHelpernull_String
	DeletedAt             whereHelpernull_Time
	UpdatedAt             whereHelpertime_Time
	CreatedAt             whereHelpertime_Time
}{
	BlueprintWeaponSkinID: whereHelperstring{field: "\"weapon_model_skin_compatibilities\".\"blueprint_weapon_skin_id\""},
	WeaponModelID:         whereHelperstring{field: "\"weapon_model_skin_compatibilities\".\"weapon_model_id\""},
	ImageURL:              whereHelpernull_String{field: "\"weapon_model_skin_compatibilities\".\"image_url\""},
	CardAnimationURL:      whereHelpernull_String{field: "\"weapon_model_skin_compatibilities\".\"card_animation_url\""},
	AvatarURL:             whereHelpernull_String{field: "\"weapon_model_skin_compatibilities\".\"avatar_url\""},
	LargeImageURL:         whereHelpernull_String{field: "\"weapon_model_skin_compatibilities\".\"large_image_url\""},
	BackgroundColor:       whereHelpernull_String{field: "\"weapon_model_skin_compatibilities\".\"background_color\""},
	AnimationURL:          whereHelpernull_String{field: "\"weapon_model_skin_compatibilities\".\"animation_url\""},
	YoutubeURL:            whereHelpernull_String{field: "\"weapon_model_skin_compatibilities\".\"youtube_url\""},
	DeletedAt:             whereHelpernull_Time{field: "\"weapon_model_skin_compatibilities\".\"deleted_at\""},
	UpdatedAt:             whereHelpertime_Time{field: "\"weapon_model_skin_compatibilities\".\"updated_at\""},
	CreatedAt:             whereHelpertime_Time{field: "\"weapon_model_skin_compatibilities\".\"created_at\""},
}

// WeaponModelSkinCompatibilityRels is where relationship names are stored.
var WeaponModelSkinCompatibilityRels = struct {
	BlueprintWeaponSkin string
	WeaponModel         string
}{
	BlueprintWeaponSkin: "BlueprintWeaponSkin",
	WeaponModel:         "WeaponModel",
}

// weaponModelSkinCompatibilityR is where relationships are stored.
type weaponModelSkinCompatibilityR struct {
	BlueprintWeaponSkin *BlueprintWeaponSkin `boiler:"BlueprintWeaponSkin" boil:"BlueprintWeaponSkin" json:"BlueprintWeaponSkin" toml:"BlueprintWeaponSkin" yaml:"BlueprintWeaponSkin"`
	WeaponModel         *WeaponModel         `boiler:"WeaponModel" boil:"WeaponModel" json:"WeaponModel" toml:"WeaponModel" yaml:"WeaponModel"`
}

// NewStruct creates a new relationship struct
func (*weaponModelSkinCompatibilityR) NewStruct() *weaponModelSkinCompatibilityR {
	return &weaponModelSkinCompatibilityR{}
}

// weaponModelSkinCompatibilityL is where Load methods for each relationship are stored.
type weaponModelSkinCompatibilityL struct{}

var (
	weaponModelSkinCompatibilityAllColumns            = []string{"blueprint_weapon_skin_id", "weapon_model_id", "image_url", "card_animation_url", "avatar_url", "large_image_url", "background_color", "animation_url", "youtube_url", "deleted_at", "updated_at", "created_at"}
	weaponModelSkinCompatibilityColumnsWithoutDefault = []string{"blueprint_weapon_skin_id", "weapon_model_id"}
	weaponModelSkinCompatibilityColumnsWithDefault    = []string{"image_url", "card_animation_url", "avatar_url", "large_image_url", "background_color", "animation_url", "youtube_url", "deleted_at", "updated_at", "created_at"}
	weaponModelSkinCompatibilityPrimaryKeyColumns     = []string{"blueprint_weapon_skin_id", "weapon_model_id"}
	weaponModelSkinCompatibilityGeneratedColumns      = []string{}
)

type (
	// WeaponModelSkinCompatibilitySlice is an alias for a slice of pointers to WeaponModelSkinCompatibility.
	// This should almost always be used instead of []WeaponModelSkinCompatibility.
	WeaponModelSkinCompatibilitySlice []*WeaponModelSkinCompatibility
	// WeaponModelSkinCompatibilityHook is the signature for custom WeaponModelSkinCompatibility hook methods
	WeaponModelSkinCompatibilityHook func(boil.Executor, *WeaponModelSkinCompatibility) error

	weaponModelSkinCompatibilityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	weaponModelSkinCompatibilityType                 = reflect.TypeOf(&WeaponModelSkinCompatibility{})
	weaponModelSkinCompatibilityMapping              = queries.MakeStructMapping(weaponModelSkinCompatibilityType)
	weaponModelSkinCompatibilityPrimaryKeyMapping, _ = queries.BindMapping(weaponModelSkinCompatibilityType, weaponModelSkinCompatibilityMapping, weaponModelSkinCompatibilityPrimaryKeyColumns)
	weaponModelSkinCompatibilityInsertCacheMut       sync.RWMutex
	weaponModelSkinCompatibilityInsertCache          = make(map[string]insertCache)
	weaponModelSkinCompatibilityUpdateCacheMut       sync.RWMutex
	weaponModelSkinCompatibilityUpdateCache          = make(map[string]updateCache)
	weaponModelSkinCompatibilityUpsertCacheMut       sync.RWMutex
	weaponModelSkinCompatibilityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var weaponModelSkinCompatibilityAfterSelectHooks []WeaponModelSkinCompatibilityHook

var weaponModelSkinCompatibilityBeforeInsertHooks []WeaponModelSkinCompatibilityHook
var weaponModelSkinCompatibilityAfterInsertHooks []WeaponModelSkinCompatibilityHook

var weaponModelSkinCompatibilityBeforeUpdateHooks []WeaponModelSkinCompatibilityHook
var weaponModelSkinCompatibilityAfterUpdateHooks []WeaponModelSkinCompatibilityHook

var weaponModelSkinCompatibilityBeforeDeleteHooks []WeaponModelSkinCompatibilityHook
var weaponModelSkinCompatibilityAfterDeleteHooks []WeaponModelSkinCompatibilityHook

var weaponModelSkinCompatibilityBeforeUpsertHooks []WeaponModelSkinCompatibilityHook
var weaponModelSkinCompatibilityAfterUpsertHooks []WeaponModelSkinCompatibilityHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *WeaponModelSkinCompatibility) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponModelSkinCompatibilityAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *WeaponModelSkinCompatibility) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponModelSkinCompatibilityBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *WeaponModelSkinCompatibility) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponModelSkinCompatibilityAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *WeaponModelSkinCompatibility) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponModelSkinCompatibilityBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *WeaponModelSkinCompatibility) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponModelSkinCompatibilityAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *WeaponModelSkinCompatibility) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponModelSkinCompatibilityBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *WeaponModelSkinCompatibility) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponModelSkinCompatibilityAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *WeaponModelSkinCompatibility) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponModelSkinCompatibilityBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *WeaponModelSkinCompatibility) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponModelSkinCompatibilityAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWeaponModelSkinCompatibilityHook registers your hook function for all future operations.
func AddWeaponModelSkinCompatibilityHook(hookPoint boil.HookPoint, weaponModelSkinCompatibilityHook WeaponModelSkinCompatibilityHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		weaponModelSkinCompatibilityAfterSelectHooks = append(weaponModelSkinCompatibilityAfterSelectHooks, weaponModelSkinCompatibilityHook)
	case boil.BeforeInsertHook:
		weaponModelSkinCompatibilityBeforeInsertHooks = append(weaponModelSkinCompatibilityBeforeInsertHooks, weaponModelSkinCompatibilityHook)
	case boil.AfterInsertHook:
		weaponModelSkinCompatibilityAfterInsertHooks = append(weaponModelSkinCompatibilityAfterInsertHooks, weaponModelSkinCompatibilityHook)
	case boil.BeforeUpdateHook:
		weaponModelSkinCompatibilityBeforeUpdateHooks = append(weaponModelSkinCompatibilityBeforeUpdateHooks, weaponModelSkinCompatibilityHook)
	case boil.AfterUpdateHook:
		weaponModelSkinCompatibilityAfterUpdateHooks = append(weaponModelSkinCompatibilityAfterUpdateHooks, weaponModelSkinCompatibilityHook)
	case boil.BeforeDeleteHook:
		weaponModelSkinCompatibilityBeforeDeleteHooks = append(weaponModelSkinCompatibilityBeforeDeleteHooks, weaponModelSkinCompatibilityHook)
	case boil.AfterDeleteHook:
		weaponModelSkinCompatibilityAfterDeleteHooks = append(weaponModelSkinCompatibilityAfterDeleteHooks, weaponModelSkinCompatibilityHook)
	case boil.BeforeUpsertHook:
		weaponModelSkinCompatibilityBeforeUpsertHooks = append(weaponModelSkinCompatibilityBeforeUpsertHooks, weaponModelSkinCompatibilityHook)
	case boil.AfterUpsertHook:
		weaponModelSkinCompatibilityAfterUpsertHooks = append(weaponModelSkinCompatibilityAfterUpsertHooks, weaponModelSkinCompatibilityHook)
	}
}

// One returns a single weaponModelSkinCompatibility record from the query.
func (q weaponModelSkinCompatibilityQuery) One(exec boil.Executor) (*WeaponModelSkinCompatibility, error) {
	o := &WeaponModelSkinCompatibility{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for weapon_model_skin_compatibilities")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all WeaponModelSkinCompatibility records from the query.
func (q weaponModelSkinCompatibilityQuery) All(exec boil.Executor) (WeaponModelSkinCompatibilitySlice, error) {
	var o []*WeaponModelSkinCompatibility

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to WeaponModelSkinCompatibility slice")
	}

	if len(weaponModelSkinCompatibilityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all WeaponModelSkinCompatibility records in the query.
func (q weaponModelSkinCompatibilityQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count weapon_model_skin_compatibilities rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q weaponModelSkinCompatibilityQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if weapon_model_skin_compatibilities exists")
	}

	return count > 0, nil
}

// BlueprintWeaponSkin pointed to by the foreign key.
func (o *WeaponModelSkinCompatibility) BlueprintWeaponSkin(mods ...qm.QueryMod) blueprintWeaponSkinQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BlueprintWeaponSkinID),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintWeaponSkins(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_weapon_skin\"")

	return query
}

// WeaponModel pointed to by the foreign key.
func (o *WeaponModelSkinCompatibility) WeaponModel(mods ...qm.QueryMod) weaponModelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.WeaponModelID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := WeaponModels(queryMods...)
	queries.SetFrom(query.Query, "\"weapon_models\"")

	return query
}

// LoadBlueprintWeaponSkin allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (weaponModelSkinCompatibilityL) LoadBlueprintWeaponSkin(e boil.Executor, singular bool, maybeWeaponModelSkinCompatibility interface{}, mods queries.Applicator) error {
	var slice []*WeaponModelSkinCompatibility
	var object *WeaponModelSkinCompatibility

	if singular {
		object = maybeWeaponModelSkinCompatibility.(*WeaponModelSkinCompatibility)
	} else {
		slice = *maybeWeaponModelSkinCompatibility.(*[]*WeaponModelSkinCompatibility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &weaponModelSkinCompatibilityR{}
		}
		args = append(args, object.BlueprintWeaponSkinID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &weaponModelSkinCompatibilityR{}
			}

			for _, a := range args {
				if a == obj.BlueprintWeaponSkinID {
					continue Outer
				}
			}

			args = append(args, obj.BlueprintWeaponSkinID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_weapon_skin`),
		qm.WhereIn(`blueprint_weapon_skin.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintWeaponSkin")
	}

	var resultSlice []*BlueprintWeaponSkin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintWeaponSkin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_weapon_skin")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_weapon_skin")
	}

	if len(weaponModelSkinCompatibilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BlueprintWeaponSkin = foreign
		if foreign.R == nil {
			foreign.R = &blueprintWeaponSkinR{}
		}
		foreign.R.WeaponModelSkinCompatibilities = append(foreign.R.WeaponModelSkinCompatibilities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlueprintWeaponSkinID == foreign.ID {
				local.R.BlueprintWeaponSkin = foreign
				if foreign.R == nil {
					foreign.R = &blueprintWeaponSkinR{}
				}
				foreign.R.WeaponModelSkinCompatibilities = append(foreign.R.WeaponModelSkinCompatibilities, local)
				break
			}
		}
	}

	return nil
}

// LoadWeaponModel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (weaponModelSkinCompatibilityL) LoadWeaponModel(e boil.Executor, singular bool, maybeWeaponModelSkinCompatibility interface{}, mods queries.Applicator) error {
	var slice []*WeaponModelSkinCompatibility
	var object *WeaponModelSkinCompatibility

	if singular {
		object = maybeWeaponModelSkinCompatibility.(*WeaponModelSkinCompatibility)
	} else {
		slice = *maybeWeaponModelSkinCompatibility.(*[]*WeaponModelSkinCompatibility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &weaponModelSkinCompatibilityR{}
		}
		args = append(args, object.WeaponModelID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &weaponModelSkinCompatibilityR{}
			}

			for _, a := range args {
				if a == obj.WeaponModelID {
					continue Outer
				}
			}

			args = append(args, obj.WeaponModelID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`weapon_models`),
		qm.WhereIn(`weapon_models.id in ?`, args...),
		qmhelper.WhereIsNull(`weapon_models.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load WeaponModel")
	}

	var resultSlice []*WeaponModel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice WeaponModel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for weapon_models")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for weapon_models")
	}

	if len(weaponModelSkinCompatibilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.WeaponModel = foreign
		if foreign.R == nil {
			foreign.R = &weaponModelR{}
		}
		foreign.R.WeaponModelSkinCompatibilities = append(foreign.R.WeaponModelSkinCompatibilities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WeaponModelID == foreign.ID {
				local.R.WeaponModel = foreign
				if foreign.R == nil {
					foreign.R = &weaponModelR{}
				}
				foreign.R.WeaponModelSkinCompatibilities = append(foreign.R.WeaponModelSkinCompatibilities, local)
				break
			}
		}
	}

	return nil
}

// SetBlueprintWeaponSkin of the weaponModelSkinCompatibility to the related item.
// Sets o.R.BlueprintWeaponSkin to related.
// Adds o to related.R.WeaponModelSkinCompatibilities.
func (o *WeaponModelSkinCompatibility) SetBlueprintWeaponSkin(exec boil.Executor, insert bool, related *BlueprintWeaponSkin) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"weapon_model_skin_compatibilities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_weapon_skin_id"}),
		strmangle.WhereClause("\"", "\"", 2, weaponModelSkinCompatibilityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.BlueprintWeaponSkinID, o.WeaponModelID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlueprintWeaponSkinID = related.ID
	if o.R == nil {
		o.R = &weaponModelSkinCompatibilityR{
			BlueprintWeaponSkin: related,
		}
	} else {
		o.R.BlueprintWeaponSkin = related
	}

	if related.R == nil {
		related.R = &blueprintWeaponSkinR{
			WeaponModelSkinCompatibilities: WeaponModelSkinCompatibilitySlice{o},
		}
	} else {
		related.R.WeaponModelSkinCompatibilities = append(related.R.WeaponModelSkinCompatibilities, o)
	}

	return nil
}

// SetWeaponModel of the weaponModelSkinCompatibility to the related item.
// Sets o.R.WeaponModel to related.
// Adds o to related.R.WeaponModelSkinCompatibilities.
func (o *WeaponModelSkinCompatibility) SetWeaponModel(exec boil.Executor, insert bool, related *WeaponModel) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"weapon_model_skin_compatibilities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"weapon_model_id"}),
		strmangle.WhereClause("\"", "\"", 2, weaponModelSkinCompatibilityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.BlueprintWeaponSkinID, o.WeaponModelID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.WeaponModelID = related.ID
	if o.R == nil {
		o.R = &weaponModelSkinCompatibilityR{
			WeaponModel: related,
		}
	} else {
		o.R.WeaponModel = related
	}

	if related.R == nil {
		related.R = &weaponModelR{
			WeaponModelSkinCompatibilities: WeaponModelSkinCompatibilitySlice{o},
		}
	} else {
		related.R.WeaponModelSkinCompatibilities = append(related.R.WeaponModelSkinCompatibilities, o)
	}

	return nil
}

// WeaponModelSkinCompatibilities retrieves all the records using an executor.
func WeaponModelSkinCompatibilities(mods ...qm.QueryMod) weaponModelSkinCompatibilityQuery {
	mods = append(mods, qm.From("\"weapon_model_skin_compatibilities\""), qmhelper.WhereIsNull("\"weapon_model_skin_compatibilities\".\"deleted_at\""))
	return weaponModelSkinCompatibilityQuery{NewQuery(mods...)}
}

// FindWeaponModelSkinCompatibility retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWeaponModelSkinCompatibility(exec boil.Executor, blueprintWeaponSkinID string, weaponModelID string, selectCols ...string) (*WeaponModelSkinCompatibility, error) {
	weaponModelSkinCompatibilityObj := &WeaponModelSkinCompatibility{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"weapon_model_skin_compatibilities\" where \"blueprint_weapon_skin_id\"=$1 AND \"weapon_model_id\"=$2 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, blueprintWeaponSkinID, weaponModelID)

	err := q.Bind(nil, exec, weaponModelSkinCompatibilityObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from weapon_model_skin_compatibilities")
	}

	if err = weaponModelSkinCompatibilityObj.doAfterSelectHooks(exec); err != nil {
		return weaponModelSkinCompatibilityObj, err
	}

	return weaponModelSkinCompatibilityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WeaponModelSkinCompatibility) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no weapon_model_skin_compatibilities provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(weaponModelSkinCompatibilityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	weaponModelSkinCompatibilityInsertCacheMut.RLock()
	cache, cached := weaponModelSkinCompatibilityInsertCache[key]
	weaponModelSkinCompatibilityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			weaponModelSkinCompatibilityAllColumns,
			weaponModelSkinCompatibilityColumnsWithDefault,
			weaponModelSkinCompatibilityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(weaponModelSkinCompatibilityType, weaponModelSkinCompatibilityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(weaponModelSkinCompatibilityType, weaponModelSkinCompatibilityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"weapon_model_skin_compatibilities\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"weapon_model_skin_compatibilities\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into weapon_model_skin_compatibilities")
	}

	if !cached {
		weaponModelSkinCompatibilityInsertCacheMut.Lock()
		weaponModelSkinCompatibilityInsertCache[key] = cache
		weaponModelSkinCompatibilityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the WeaponModelSkinCompatibility.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WeaponModelSkinCompatibility) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	weaponModelSkinCompatibilityUpdateCacheMut.RLock()
	cache, cached := weaponModelSkinCompatibilityUpdateCache[key]
	weaponModelSkinCompatibilityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			weaponModelSkinCompatibilityAllColumns,
			weaponModelSkinCompatibilityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update weapon_model_skin_compatibilities, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"weapon_model_skin_compatibilities\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, weaponModelSkinCompatibilityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(weaponModelSkinCompatibilityType, weaponModelSkinCompatibilityMapping, append(wl, weaponModelSkinCompatibilityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update weapon_model_skin_compatibilities row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for weapon_model_skin_compatibilities")
	}

	if !cached {
		weaponModelSkinCompatibilityUpdateCacheMut.Lock()
		weaponModelSkinCompatibilityUpdateCache[key] = cache
		weaponModelSkinCompatibilityUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q weaponModelSkinCompatibilityQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for weapon_model_skin_compatibilities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for weapon_model_skin_compatibilities")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WeaponModelSkinCompatibilitySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), weaponModelSkinCompatibilityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"weapon_model_skin_compatibilities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, weaponModelSkinCompatibilityPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in weaponModelSkinCompatibility slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all weaponModelSkinCompatibility")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WeaponModelSkinCompatibility) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no weapon_model_skin_compatibilities provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(weaponModelSkinCompatibilityColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	weaponModelSkinCompatibilityUpsertCacheMut.RLock()
	cache, cached := weaponModelSkinCompatibilityUpsertCache[key]
	weaponModelSkinCompatibilityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			weaponModelSkinCompatibilityAllColumns,
			weaponModelSkinCompatibilityColumnsWithDefault,
			weaponModelSkinCompatibilityColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			weaponModelSkinCompatibilityAllColumns,
			weaponModelSkinCompatibilityPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert weapon_model_skin_compatibilities, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(weaponModelSkinCompatibilityPrimaryKeyColumns))
			copy(conflict, weaponModelSkinCompatibilityPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"weapon_model_skin_compatibilities\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(weaponModelSkinCompatibilityType, weaponModelSkinCompatibilityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(weaponModelSkinCompatibilityType, weaponModelSkinCompatibilityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert weapon_model_skin_compatibilities")
	}

	if !cached {
		weaponModelSkinCompatibilityUpsertCacheMut.Lock()
		weaponModelSkinCompatibilityUpsertCache[key] = cache
		weaponModelSkinCompatibilityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single WeaponModelSkinCompatibility record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WeaponModelSkinCompatibility) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no WeaponModelSkinCompatibility provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), weaponModelSkinCompatibilityPrimaryKeyMapping)
		sql = "DELETE FROM \"weapon_model_skin_compatibilities\" WHERE \"blueprint_weapon_skin_id\"=$1 AND \"weapon_model_id\"=$2"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"weapon_model_skin_compatibilities\" SET %s WHERE \"blueprint_weapon_skin_id\"=$2 AND \"weapon_model_id\"=$3",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(weaponModelSkinCompatibilityType, weaponModelSkinCompatibilityMapping, append(wl, weaponModelSkinCompatibilityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from weapon_model_skin_compatibilities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for weapon_model_skin_compatibilities")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q weaponModelSkinCompatibilityQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no weaponModelSkinCompatibilityQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from weapon_model_skin_compatibilities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for weapon_model_skin_compatibilities")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WeaponModelSkinCompatibilitySlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(weaponModelSkinCompatibilityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), weaponModelSkinCompatibilityPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"weapon_model_skin_compatibilities\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, weaponModelSkinCompatibilityPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), weaponModelSkinCompatibilityPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"weapon_model_skin_compatibilities\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, weaponModelSkinCompatibilityPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from weaponModelSkinCompatibility slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for weapon_model_skin_compatibilities")
	}

	if len(weaponModelSkinCompatibilityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WeaponModelSkinCompatibility) Reload(exec boil.Executor) error {
	ret, err := FindWeaponModelSkinCompatibility(exec, o.BlueprintWeaponSkinID, o.WeaponModelID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WeaponModelSkinCompatibilitySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WeaponModelSkinCompatibilitySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), weaponModelSkinCompatibilityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"weapon_model_skin_compatibilities\".* FROM \"weapon_model_skin_compatibilities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, weaponModelSkinCompatibilityPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in WeaponModelSkinCompatibilitySlice")
	}

	*o = slice

	return nil
}

// WeaponModelSkinCompatibilityExists checks if the WeaponModelSkinCompatibility row exists.
func WeaponModelSkinCompatibilityExists(exec boil.Executor, blueprintWeaponSkinID string, weaponModelID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"weapon_model_skin_compatibilities\" where \"blueprint_weapon_skin_id\"=$1 AND \"weapon_model_id\"=$2 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, blueprintWeaponSkinID, weaponModelID)
	}
	row := exec.QueryRow(sql, blueprintWeaponSkinID, weaponModelID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if weapon_model_skin_compatibilities exists")
	}

	return exists, nil
}
