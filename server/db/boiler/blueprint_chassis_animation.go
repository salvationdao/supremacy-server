// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BlueprintChassisAnimation is an object representing the database table.
type BlueprintChassisAnimation struct {
	ID             string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Collection     string    `boiler:"collection" boil:"collection" json:"collection" toml:"collection" yaml:"collection"`
	Label          string    `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	MechModel      string    `boiler:"mech_model" boil:"mech_model" json:"mech_model" toml:"mech_model" yaml:"mech_model"`
	Tier           string    `boiler:"tier" boil:"tier" json:"tier" toml:"tier" yaml:"tier"`
	IntroAnimation null.Bool `boiler:"intro_animation" boil:"intro_animation" json:"intro_animation,omitempty" toml:"intro_animation" yaml:"intro_animation,omitempty"`
	OutroAnimation null.Bool `boiler:"outro_animation" boil:"outro_animation" json:"outro_animation,omitempty" toml:"outro_animation" yaml:"outro_animation,omitempty"`
	CreatedAt      time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *blueprintChassisAnimationR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L blueprintChassisAnimationL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlueprintChassisAnimationColumns = struct {
	ID             string
	Collection     string
	Label          string
	MechModel      string
	Tier           string
	IntroAnimation string
	OutroAnimation string
	CreatedAt      string
}{
	ID:             "id",
	Collection:     "collection",
	Label:          "label",
	MechModel:      "mech_model",
	Tier:           "tier",
	IntroAnimation: "intro_animation",
	OutroAnimation: "outro_animation",
	CreatedAt:      "created_at",
}

var BlueprintChassisAnimationTableColumns = struct {
	ID             string
	Collection     string
	Label          string
	MechModel      string
	Tier           string
	IntroAnimation string
	OutroAnimation string
	CreatedAt      string
}{
	ID:             "blueprint_chassis_animation.id",
	Collection:     "blueprint_chassis_animation.collection",
	Label:          "blueprint_chassis_animation.label",
	MechModel:      "blueprint_chassis_animation.mech_model",
	Tier:           "blueprint_chassis_animation.tier",
	IntroAnimation: "blueprint_chassis_animation.intro_animation",
	OutroAnimation: "blueprint_chassis_animation.outro_animation",
	CreatedAt:      "blueprint_chassis_animation.created_at",
}

// Generated where

var BlueprintChassisAnimationWhere = struct {
	ID             whereHelperstring
	Collection     whereHelperstring
	Label          whereHelperstring
	MechModel      whereHelperstring
	Tier           whereHelperstring
	IntroAnimation whereHelpernull_Bool
	OutroAnimation whereHelpernull_Bool
	CreatedAt      whereHelpertime_Time
}{
	ID:             whereHelperstring{field: "\"blueprint_chassis_animation\".\"id\""},
	Collection:     whereHelperstring{field: "\"blueprint_chassis_animation\".\"collection\""},
	Label:          whereHelperstring{field: "\"blueprint_chassis_animation\".\"label\""},
	MechModel:      whereHelperstring{field: "\"blueprint_chassis_animation\".\"mech_model\""},
	Tier:           whereHelperstring{field: "\"blueprint_chassis_animation\".\"tier\""},
	IntroAnimation: whereHelpernull_Bool{field: "\"blueprint_chassis_animation\".\"intro_animation\""},
	OutroAnimation: whereHelpernull_Bool{field: "\"blueprint_chassis_animation\".\"outro_animation\""},
	CreatedAt:      whereHelpertime_Time{field: "\"blueprint_chassis_animation\".\"created_at\""},
}

// BlueprintChassisAnimationRels is where relationship names are stored.
var BlueprintChassisAnimationRels = struct {
	MechModelBlueprintMech     string
	BlueprintChassisAnimations string
}{
	MechModelBlueprintMech:     "MechModelBlueprintMech",
	BlueprintChassisAnimations: "BlueprintChassisAnimations",
}

// blueprintChassisAnimationR is where relationships are stored.
type blueprintChassisAnimationR struct {
	MechModelBlueprintMech     *BlueprintMech        `boiler:"MechModelBlueprintMech" boil:"MechModelBlueprintMech" json:"MechModelBlueprintMech" toml:"MechModelBlueprintMech" yaml:"MechModelBlueprintMech"`
	BlueprintChassisAnimations ChassisAnimationSlice `boiler:"BlueprintChassisAnimations" boil:"BlueprintChassisAnimations" json:"BlueprintChassisAnimations" toml:"BlueprintChassisAnimations" yaml:"BlueprintChassisAnimations"`
}

// NewStruct creates a new relationship struct
func (*blueprintChassisAnimationR) NewStruct() *blueprintChassisAnimationR {
	return &blueprintChassisAnimationR{}
}

// blueprintChassisAnimationL is where Load methods for each relationship are stored.
type blueprintChassisAnimationL struct{}

var (
	blueprintChassisAnimationAllColumns            = []string{"id", "collection", "label", "mech_model", "tier", "intro_animation", "outro_animation", "created_at"}
	blueprintChassisAnimationColumnsWithoutDefault = []string{"label", "mech_model"}
	blueprintChassisAnimationColumnsWithDefault    = []string{"id", "collection", "tier", "intro_animation", "outro_animation", "created_at"}
	blueprintChassisAnimationPrimaryKeyColumns     = []string{"id"}
	blueprintChassisAnimationGeneratedColumns      = []string{}
)

type (
	// BlueprintChassisAnimationSlice is an alias for a slice of pointers to BlueprintChassisAnimation.
	// This should almost always be used instead of []BlueprintChassisAnimation.
	BlueprintChassisAnimationSlice []*BlueprintChassisAnimation
	// BlueprintChassisAnimationHook is the signature for custom BlueprintChassisAnimation hook methods
	BlueprintChassisAnimationHook func(boil.Executor, *BlueprintChassisAnimation) error

	blueprintChassisAnimationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blueprintChassisAnimationType                 = reflect.TypeOf(&BlueprintChassisAnimation{})
	blueprintChassisAnimationMapping              = queries.MakeStructMapping(blueprintChassisAnimationType)
	blueprintChassisAnimationPrimaryKeyMapping, _ = queries.BindMapping(blueprintChassisAnimationType, blueprintChassisAnimationMapping, blueprintChassisAnimationPrimaryKeyColumns)
	blueprintChassisAnimationInsertCacheMut       sync.RWMutex
	blueprintChassisAnimationInsertCache          = make(map[string]insertCache)
	blueprintChassisAnimationUpdateCacheMut       sync.RWMutex
	blueprintChassisAnimationUpdateCache          = make(map[string]updateCache)
	blueprintChassisAnimationUpsertCacheMut       sync.RWMutex
	blueprintChassisAnimationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var blueprintChassisAnimationAfterSelectHooks []BlueprintChassisAnimationHook

var blueprintChassisAnimationBeforeInsertHooks []BlueprintChassisAnimationHook
var blueprintChassisAnimationAfterInsertHooks []BlueprintChassisAnimationHook

var blueprintChassisAnimationBeforeUpdateHooks []BlueprintChassisAnimationHook
var blueprintChassisAnimationAfterUpdateHooks []BlueprintChassisAnimationHook

var blueprintChassisAnimationBeforeDeleteHooks []BlueprintChassisAnimationHook
var blueprintChassisAnimationAfterDeleteHooks []BlueprintChassisAnimationHook

var blueprintChassisAnimationBeforeUpsertHooks []BlueprintChassisAnimationHook
var blueprintChassisAnimationAfterUpsertHooks []BlueprintChassisAnimationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BlueprintChassisAnimation) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisAnimationAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BlueprintChassisAnimation) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisAnimationBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BlueprintChassisAnimation) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisAnimationAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BlueprintChassisAnimation) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisAnimationBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BlueprintChassisAnimation) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisAnimationAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BlueprintChassisAnimation) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisAnimationBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BlueprintChassisAnimation) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisAnimationAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BlueprintChassisAnimation) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisAnimationBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BlueprintChassisAnimation) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisAnimationAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBlueprintChassisAnimationHook registers your hook function for all future operations.
func AddBlueprintChassisAnimationHook(hookPoint boil.HookPoint, blueprintChassisAnimationHook BlueprintChassisAnimationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		blueprintChassisAnimationAfterSelectHooks = append(blueprintChassisAnimationAfterSelectHooks, blueprintChassisAnimationHook)
	case boil.BeforeInsertHook:
		blueprintChassisAnimationBeforeInsertHooks = append(blueprintChassisAnimationBeforeInsertHooks, blueprintChassisAnimationHook)
	case boil.AfterInsertHook:
		blueprintChassisAnimationAfterInsertHooks = append(blueprintChassisAnimationAfterInsertHooks, blueprintChassisAnimationHook)
	case boil.BeforeUpdateHook:
		blueprintChassisAnimationBeforeUpdateHooks = append(blueprintChassisAnimationBeforeUpdateHooks, blueprintChassisAnimationHook)
	case boil.AfterUpdateHook:
		blueprintChassisAnimationAfterUpdateHooks = append(blueprintChassisAnimationAfterUpdateHooks, blueprintChassisAnimationHook)
	case boil.BeforeDeleteHook:
		blueprintChassisAnimationBeforeDeleteHooks = append(blueprintChassisAnimationBeforeDeleteHooks, blueprintChassisAnimationHook)
	case boil.AfterDeleteHook:
		blueprintChassisAnimationAfterDeleteHooks = append(blueprintChassisAnimationAfterDeleteHooks, blueprintChassisAnimationHook)
	case boil.BeforeUpsertHook:
		blueprintChassisAnimationBeforeUpsertHooks = append(blueprintChassisAnimationBeforeUpsertHooks, blueprintChassisAnimationHook)
	case boil.AfterUpsertHook:
		blueprintChassisAnimationAfterUpsertHooks = append(blueprintChassisAnimationAfterUpsertHooks, blueprintChassisAnimationHook)
	}
}

// One returns a single blueprintChassisAnimation record from the query.
func (q blueprintChassisAnimationQuery) One(exec boil.Executor) (*BlueprintChassisAnimation, error) {
	o := &BlueprintChassisAnimation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for blueprint_chassis_animation")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BlueprintChassisAnimation records from the query.
func (q blueprintChassisAnimationQuery) All(exec boil.Executor) (BlueprintChassisAnimationSlice, error) {
	var o []*BlueprintChassisAnimation

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BlueprintChassisAnimation slice")
	}

	if len(blueprintChassisAnimationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BlueprintChassisAnimation records in the query.
func (q blueprintChassisAnimationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count blueprint_chassis_animation rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q blueprintChassisAnimationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if blueprint_chassis_animation exists")
	}

	return count > 0, nil
}

// MechModelBlueprintMech pointed to by the foreign key.
func (o *BlueprintChassisAnimation) MechModelBlueprintMech(mods ...qm.QueryMod) blueprintMechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MechModel),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintMechs(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_mechs\"")

	return query
}

// BlueprintChassisAnimations retrieves all the chassis_animation's ChassisAnimations with an executor via blueprint_id column.
func (o *BlueprintChassisAnimation) BlueprintChassisAnimations(mods ...qm.QueryMod) chassisAnimationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chassis_animation\".\"blueprint_id\"=?", o.ID),
	)

	query := ChassisAnimations(queryMods...)
	queries.SetFrom(query.Query, "\"chassis_animation\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"chassis_animation\".*"})
	}

	return query
}

// LoadMechModelBlueprintMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blueprintChassisAnimationL) LoadMechModelBlueprintMech(e boil.Executor, singular bool, maybeBlueprintChassisAnimation interface{}, mods queries.Applicator) error {
	var slice []*BlueprintChassisAnimation
	var object *BlueprintChassisAnimation

	if singular {
		object = maybeBlueprintChassisAnimation.(*BlueprintChassisAnimation)
	} else {
		slice = *maybeBlueprintChassisAnimation.(*[]*BlueprintChassisAnimation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintChassisAnimationR{}
		}
		args = append(args, object.MechModel)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintChassisAnimationR{}
			}

			for _, a := range args {
				if a == obj.MechModel {
					continue Outer
				}
			}

			args = append(args, obj.MechModel)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_mechs`),
		qm.WhereIn(`blueprint_mechs.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintMech")
	}

	var resultSlice []*BlueprintMech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintMech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_mechs")
	}

	if len(blueprintChassisAnimationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MechModelBlueprintMech = foreign
		if foreign.R == nil {
			foreign.R = &blueprintMechR{}
		}
		foreign.R.MechModelBlueprintChassisAnimations = append(foreign.R.MechModelBlueprintChassisAnimations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MechModel == foreign.ID {
				local.R.MechModelBlueprintMech = foreign
				if foreign.R == nil {
					foreign.R = &blueprintMechR{}
				}
				foreign.R.MechModelBlueprintChassisAnimations = append(foreign.R.MechModelBlueprintChassisAnimations, local)
				break
			}
		}
	}

	return nil
}

// LoadBlueprintChassisAnimations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blueprintChassisAnimationL) LoadBlueprintChassisAnimations(e boil.Executor, singular bool, maybeBlueprintChassisAnimation interface{}, mods queries.Applicator) error {
	var slice []*BlueprintChassisAnimation
	var object *BlueprintChassisAnimation

	if singular {
		object = maybeBlueprintChassisAnimation.(*BlueprintChassisAnimation)
	} else {
		slice = *maybeBlueprintChassisAnimation.(*[]*BlueprintChassisAnimation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintChassisAnimationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintChassisAnimationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chassis_animation`),
		qm.WhereIn(`chassis_animation.blueprint_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chassis_animation")
	}

	var resultSlice []*ChassisAnimation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chassis_animation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chassis_animation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chassis_animation")
	}

	if len(chassisAnimationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlueprintChassisAnimations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chassisAnimationR{}
			}
			foreign.R.Blueprint = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BlueprintID {
				local.R.BlueprintChassisAnimations = append(local.R.BlueprintChassisAnimations, foreign)
				if foreign.R == nil {
					foreign.R = &chassisAnimationR{}
				}
				foreign.R.Blueprint = local
				break
			}
		}
	}

	return nil
}

// SetMechModelBlueprintMech of the blueprintChassisAnimation to the related item.
// Sets o.R.MechModelBlueprintMech to related.
// Adds o to related.R.MechModelBlueprintChassisAnimations.
func (o *BlueprintChassisAnimation) SetMechModelBlueprintMech(exec boil.Executor, insert bool, related *BlueprintMech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"blueprint_chassis_animation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mech_model"}),
		strmangle.WhereClause("\"", "\"", 2, blueprintChassisAnimationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MechModel = related.ID
	if o.R == nil {
		o.R = &blueprintChassisAnimationR{
			MechModelBlueprintMech: related,
		}
	} else {
		o.R.MechModelBlueprintMech = related
	}

	if related.R == nil {
		related.R = &blueprintMechR{
			MechModelBlueprintChassisAnimations: BlueprintChassisAnimationSlice{o},
		}
	} else {
		related.R.MechModelBlueprintChassisAnimations = append(related.R.MechModelBlueprintChassisAnimations, o)
	}

	return nil
}

// AddBlueprintChassisAnimations adds the given related objects to the existing relationships
// of the blueprint_chassis_animation, optionally inserting them as new records.
// Appends related to o.R.BlueprintChassisAnimations.
// Sets related.R.Blueprint appropriately.
func (o *BlueprintChassisAnimation) AddBlueprintChassisAnimations(exec boil.Executor, insert bool, related ...*ChassisAnimation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BlueprintID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chassis_animation\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_id"}),
				strmangle.WhereClause("\"", "\"", 2, chassisAnimationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BlueprintID = o.ID
		}
	}

	if o.R == nil {
		o.R = &blueprintChassisAnimationR{
			BlueprintChassisAnimations: related,
		}
	} else {
		o.R.BlueprintChassisAnimations = append(o.R.BlueprintChassisAnimations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chassisAnimationR{
				Blueprint: o,
			}
		} else {
			rel.R.Blueprint = o
		}
	}
	return nil
}

// BlueprintChassisAnimations retrieves all the records using an executor.
func BlueprintChassisAnimations(mods ...qm.QueryMod) blueprintChassisAnimationQuery {
	mods = append(mods, qm.From("\"blueprint_chassis_animation\""))
	return blueprintChassisAnimationQuery{NewQuery(mods...)}
}

// FindBlueprintChassisAnimation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlueprintChassisAnimation(exec boil.Executor, iD string, selectCols ...string) (*BlueprintChassisAnimation, error) {
	blueprintChassisAnimationObj := &BlueprintChassisAnimation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"blueprint_chassis_animation\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, blueprintChassisAnimationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from blueprint_chassis_animation")
	}

	if err = blueprintChassisAnimationObj.doAfterSelectHooks(exec); err != nil {
		return blueprintChassisAnimationObj, err
	}

	return blueprintChassisAnimationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlueprintChassisAnimation) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_chassis_animation provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintChassisAnimationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blueprintChassisAnimationInsertCacheMut.RLock()
	cache, cached := blueprintChassisAnimationInsertCache[key]
	blueprintChassisAnimationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blueprintChassisAnimationAllColumns,
			blueprintChassisAnimationColumnsWithDefault,
			blueprintChassisAnimationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blueprintChassisAnimationType, blueprintChassisAnimationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blueprintChassisAnimationType, blueprintChassisAnimationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"blueprint_chassis_animation\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"blueprint_chassis_animation\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into blueprint_chassis_animation")
	}

	if !cached {
		blueprintChassisAnimationInsertCacheMut.Lock()
		blueprintChassisAnimationInsertCache[key] = cache
		blueprintChassisAnimationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BlueprintChassisAnimation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlueprintChassisAnimation) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	blueprintChassisAnimationUpdateCacheMut.RLock()
	cache, cached := blueprintChassisAnimationUpdateCache[key]
	blueprintChassisAnimationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blueprintChassisAnimationAllColumns,
			blueprintChassisAnimationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update blueprint_chassis_animation, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"blueprint_chassis_animation\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, blueprintChassisAnimationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blueprintChassisAnimationType, blueprintChassisAnimationMapping, append(wl, blueprintChassisAnimationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update blueprint_chassis_animation row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for blueprint_chassis_animation")
	}

	if !cached {
		blueprintChassisAnimationUpdateCacheMut.Lock()
		blueprintChassisAnimationUpdateCache[key] = cache
		blueprintChassisAnimationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q blueprintChassisAnimationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for blueprint_chassis_animation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for blueprint_chassis_animation")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlueprintChassisAnimationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintChassisAnimationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"blueprint_chassis_animation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, blueprintChassisAnimationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in blueprintChassisAnimation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all blueprintChassisAnimation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlueprintChassisAnimation) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_chassis_animation provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintChassisAnimationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blueprintChassisAnimationUpsertCacheMut.RLock()
	cache, cached := blueprintChassisAnimationUpsertCache[key]
	blueprintChassisAnimationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blueprintChassisAnimationAllColumns,
			blueprintChassisAnimationColumnsWithDefault,
			blueprintChassisAnimationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			blueprintChassisAnimationAllColumns,
			blueprintChassisAnimationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert blueprint_chassis_animation, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(blueprintChassisAnimationPrimaryKeyColumns))
			copy(conflict, blueprintChassisAnimationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"blueprint_chassis_animation\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(blueprintChassisAnimationType, blueprintChassisAnimationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blueprintChassisAnimationType, blueprintChassisAnimationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert blueprint_chassis_animation")
	}

	if !cached {
		blueprintChassisAnimationUpsertCacheMut.Lock()
		blueprintChassisAnimationUpsertCache[key] = cache
		blueprintChassisAnimationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BlueprintChassisAnimation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlueprintChassisAnimation) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BlueprintChassisAnimation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blueprintChassisAnimationPrimaryKeyMapping)
	sql := "DELETE FROM \"blueprint_chassis_animation\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from blueprint_chassis_animation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for blueprint_chassis_animation")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q blueprintChassisAnimationQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no blueprintChassisAnimationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprint_chassis_animation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_chassis_animation")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlueprintChassisAnimationSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(blueprintChassisAnimationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintChassisAnimationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"blueprint_chassis_animation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintChassisAnimationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprintChassisAnimation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_chassis_animation")
	}

	if len(blueprintChassisAnimationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlueprintChassisAnimation) Reload(exec boil.Executor) error {
	ret, err := FindBlueprintChassisAnimation(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlueprintChassisAnimationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlueprintChassisAnimationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintChassisAnimationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"blueprint_chassis_animation\".* FROM \"blueprint_chassis_animation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintChassisAnimationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BlueprintChassisAnimationSlice")
	}

	*o = slice

	return nil
}

// BlueprintChassisAnimationExists checks if the BlueprintChassisAnimation row exists.
func BlueprintChassisAnimationExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"blueprint_chassis_animation\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if blueprint_chassis_animation exists")
	}

	return exists, nil
}
