// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SyndicateRule is an object representing the database table.
type SyndicateRule struct {
	ID          string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	SyndicateID string    `boiler:"syndicate_id" boil:"syndicate_id" json:"syndicate_id" toml:"syndicate_id" yaml:"syndicate_id"`
	Number      int       `boiler:"number" boil:"number" json:"number" toml:"number" yaml:"number"`
	Content     string    `boiler:"content" boil:"content" json:"content" toml:"content" yaml:"content"`
	CreatedAt   time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt   null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *syndicateRuleR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L syndicateRuleL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SyndicateRuleColumns = struct {
	ID          string
	SyndicateID string
	Number      string
	Content     string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "id",
	SyndicateID: "syndicate_id",
	Number:      "number",
	Content:     "content",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
}

var SyndicateRuleTableColumns = struct {
	ID          string
	SyndicateID string
	Number      string
	Content     string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "syndicate_rules.id",
	SyndicateID: "syndicate_rules.syndicate_id",
	Number:      "syndicate_rules.number",
	Content:     "syndicate_rules.content",
	CreatedAt:   "syndicate_rules.created_at",
	UpdatedAt:   "syndicate_rules.updated_at",
	DeletedAt:   "syndicate_rules.deleted_at",
}

// Generated where

var SyndicateRuleWhere = struct {
	ID          whereHelperstring
	SyndicateID whereHelperstring
	Number      whereHelperint
	Content     whereHelperstring
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	DeletedAt   whereHelpernull_Time
}{
	ID:          whereHelperstring{field: "\"syndicate_rules\".\"id\""},
	SyndicateID: whereHelperstring{field: "\"syndicate_rules\".\"syndicate_id\""},
	Number:      whereHelperint{field: "\"syndicate_rules\".\"number\""},
	Content:     whereHelperstring{field: "\"syndicate_rules\".\"content\""},
	CreatedAt:   whereHelpertime_Time{field: "\"syndicate_rules\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"syndicate_rules\".\"updated_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"syndicate_rules\".\"deleted_at\""},
}

// SyndicateRuleRels is where relationship names are stored.
var SyndicateRuleRels = struct {
	Syndicate            string
	RuleSyndicateMotions string
}{
	Syndicate:            "Syndicate",
	RuleSyndicateMotions: "RuleSyndicateMotions",
}

// syndicateRuleR is where relationships are stored.
type syndicateRuleR struct {
	Syndicate            *Syndicate           `boiler:"Syndicate" boil:"Syndicate" json:"Syndicate" toml:"Syndicate" yaml:"Syndicate"`
	RuleSyndicateMotions SyndicateMotionSlice `boiler:"RuleSyndicateMotions" boil:"RuleSyndicateMotions" json:"RuleSyndicateMotions" toml:"RuleSyndicateMotions" yaml:"RuleSyndicateMotions"`
}

// NewStruct creates a new relationship struct
func (*syndicateRuleR) NewStruct() *syndicateRuleR {
	return &syndicateRuleR{}
}

// syndicateRuleL is where Load methods for each relationship are stored.
type syndicateRuleL struct{}

var (
	syndicateRuleAllColumns            = []string{"id", "syndicate_id", "number", "content", "created_at", "updated_at", "deleted_at"}
	syndicateRuleColumnsWithoutDefault = []string{"syndicate_id", "content"}
	syndicateRuleColumnsWithDefault    = []string{"id", "number", "created_at", "updated_at", "deleted_at"}
	syndicateRulePrimaryKeyColumns     = []string{"id"}
	syndicateRuleGeneratedColumns      = []string{}
)

type (
	// SyndicateRuleSlice is an alias for a slice of pointers to SyndicateRule.
	// This should almost always be used instead of []SyndicateRule.
	SyndicateRuleSlice []*SyndicateRule
	// SyndicateRuleHook is the signature for custom SyndicateRule hook methods
	SyndicateRuleHook func(boil.Executor, *SyndicateRule) error

	syndicateRuleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	syndicateRuleType                 = reflect.TypeOf(&SyndicateRule{})
	syndicateRuleMapping              = queries.MakeStructMapping(syndicateRuleType)
	syndicateRulePrimaryKeyMapping, _ = queries.BindMapping(syndicateRuleType, syndicateRuleMapping, syndicateRulePrimaryKeyColumns)
	syndicateRuleInsertCacheMut       sync.RWMutex
	syndicateRuleInsertCache          = make(map[string]insertCache)
	syndicateRuleUpdateCacheMut       sync.RWMutex
	syndicateRuleUpdateCache          = make(map[string]updateCache)
	syndicateRuleUpsertCacheMut       sync.RWMutex
	syndicateRuleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var syndicateRuleAfterSelectHooks []SyndicateRuleHook

var syndicateRuleBeforeInsertHooks []SyndicateRuleHook
var syndicateRuleAfterInsertHooks []SyndicateRuleHook

var syndicateRuleBeforeUpdateHooks []SyndicateRuleHook
var syndicateRuleAfterUpdateHooks []SyndicateRuleHook

var syndicateRuleBeforeDeleteHooks []SyndicateRuleHook
var syndicateRuleAfterDeleteHooks []SyndicateRuleHook

var syndicateRuleBeforeUpsertHooks []SyndicateRuleHook
var syndicateRuleAfterUpsertHooks []SyndicateRuleHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SyndicateRule) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateRuleAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SyndicateRule) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateRuleBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SyndicateRule) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateRuleAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SyndicateRule) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateRuleBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SyndicateRule) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateRuleAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SyndicateRule) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateRuleBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SyndicateRule) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateRuleAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SyndicateRule) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateRuleBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SyndicateRule) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateRuleAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSyndicateRuleHook registers your hook function for all future operations.
func AddSyndicateRuleHook(hookPoint boil.HookPoint, syndicateRuleHook SyndicateRuleHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		syndicateRuleAfterSelectHooks = append(syndicateRuleAfterSelectHooks, syndicateRuleHook)
	case boil.BeforeInsertHook:
		syndicateRuleBeforeInsertHooks = append(syndicateRuleBeforeInsertHooks, syndicateRuleHook)
	case boil.AfterInsertHook:
		syndicateRuleAfterInsertHooks = append(syndicateRuleAfterInsertHooks, syndicateRuleHook)
	case boil.BeforeUpdateHook:
		syndicateRuleBeforeUpdateHooks = append(syndicateRuleBeforeUpdateHooks, syndicateRuleHook)
	case boil.AfterUpdateHook:
		syndicateRuleAfterUpdateHooks = append(syndicateRuleAfterUpdateHooks, syndicateRuleHook)
	case boil.BeforeDeleteHook:
		syndicateRuleBeforeDeleteHooks = append(syndicateRuleBeforeDeleteHooks, syndicateRuleHook)
	case boil.AfterDeleteHook:
		syndicateRuleAfterDeleteHooks = append(syndicateRuleAfterDeleteHooks, syndicateRuleHook)
	case boil.BeforeUpsertHook:
		syndicateRuleBeforeUpsertHooks = append(syndicateRuleBeforeUpsertHooks, syndicateRuleHook)
	case boil.AfterUpsertHook:
		syndicateRuleAfterUpsertHooks = append(syndicateRuleAfterUpsertHooks, syndicateRuleHook)
	}
}

// One returns a single syndicateRule record from the query.
func (q syndicateRuleQuery) One(exec boil.Executor) (*SyndicateRule, error) {
	o := &SyndicateRule{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for syndicate_rules")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SyndicateRule records from the query.
func (q syndicateRuleQuery) All(exec boil.Executor) (SyndicateRuleSlice, error) {
	var o []*SyndicateRule

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to SyndicateRule slice")
	}

	if len(syndicateRuleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SyndicateRule records in the query.
func (q syndicateRuleQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count syndicate_rules rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q syndicateRuleQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if syndicate_rules exists")
	}

	return count > 0, nil
}

// Syndicate pointed to by the foreign key.
func (o *SyndicateRule) Syndicate(mods ...qm.QueryMod) syndicateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SyndicateID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Syndicates(queryMods...)
	queries.SetFrom(query.Query, "\"syndicates\"")

	return query
}

// RuleSyndicateMotions retrieves all the syndicate_motion's SyndicateMotions with an executor via rule_id column.
func (o *SyndicateRule) RuleSyndicateMotions(mods ...qm.QueryMod) syndicateMotionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"syndicate_motions\".\"rule_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"syndicate_motions\".\"deleted_at\""),
	)

	query := SyndicateMotions(queryMods...)
	queries.SetFrom(query.Query, "\"syndicate_motions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"syndicate_motions\".*"})
	}

	return query
}

// LoadSyndicate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateRuleL) LoadSyndicate(e boil.Executor, singular bool, maybeSyndicateRule interface{}, mods queries.Applicator) error {
	var slice []*SyndicateRule
	var object *SyndicateRule

	if singular {
		object = maybeSyndicateRule.(*SyndicateRule)
	} else {
		slice = *maybeSyndicateRule.(*[]*SyndicateRule)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateRuleR{}
		}
		args = append(args, object.SyndicateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateRuleR{}
			}

			for _, a := range args {
				if a == obj.SyndicateID {
					continue Outer
				}
			}

			args = append(args, obj.SyndicateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicates`),
		qm.WhereIn(`syndicates.id in ?`, args...),
		qmhelper.WhereIsNull(`syndicates.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Syndicate")
	}

	var resultSlice []*Syndicate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Syndicate")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for syndicates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicates")
	}

	if len(syndicateRuleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Syndicate = foreign
		if foreign.R == nil {
			foreign.R = &syndicateR{}
		}
		foreign.R.SyndicateRules = append(foreign.R.SyndicateRules, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SyndicateID == foreign.ID {
				local.R.Syndicate = foreign
				if foreign.R == nil {
					foreign.R = &syndicateR{}
				}
				foreign.R.SyndicateRules = append(foreign.R.SyndicateRules, local)
				break
			}
		}
	}

	return nil
}

// LoadRuleSyndicateMotions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (syndicateRuleL) LoadRuleSyndicateMotions(e boil.Executor, singular bool, maybeSyndicateRule interface{}, mods queries.Applicator) error {
	var slice []*SyndicateRule
	var object *SyndicateRule

	if singular {
		object = maybeSyndicateRule.(*SyndicateRule)
	} else {
		slice = *maybeSyndicateRule.(*[]*SyndicateRule)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateRuleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateRuleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicate_motions`),
		qm.WhereIn(`syndicate_motions.rule_id in ?`, args...),
		qmhelper.WhereIsNull(`syndicate_motions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load syndicate_motions")
	}

	var resultSlice []*SyndicateMotion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice syndicate_motions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on syndicate_motions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicate_motions")
	}

	if len(syndicateMotionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RuleSyndicateMotions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &syndicateMotionR{}
			}
			foreign.R.Rule = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RuleID) {
				local.R.RuleSyndicateMotions = append(local.R.RuleSyndicateMotions, foreign)
				if foreign.R == nil {
					foreign.R = &syndicateMotionR{}
				}
				foreign.R.Rule = local
				break
			}
		}
	}

	return nil
}

// SetSyndicate of the syndicateRule to the related item.
// Sets o.R.Syndicate to related.
// Adds o to related.R.SyndicateRules.
func (o *SyndicateRule) SetSyndicate(exec boil.Executor, insert bool, related *Syndicate) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicate_rules\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"syndicate_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicateRulePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SyndicateID = related.ID
	if o.R == nil {
		o.R = &syndicateRuleR{
			Syndicate: related,
		}
	} else {
		o.R.Syndicate = related
	}

	if related.R == nil {
		related.R = &syndicateR{
			SyndicateRules: SyndicateRuleSlice{o},
		}
	} else {
		related.R.SyndicateRules = append(related.R.SyndicateRules, o)
	}

	return nil
}

// AddRuleSyndicateMotions adds the given related objects to the existing relationships
// of the syndicate_rule, optionally inserting them as new records.
// Appends related to o.R.RuleSyndicateMotions.
// Sets related.R.Rule appropriately.
func (o *SyndicateRule) AddRuleSyndicateMotions(exec boil.Executor, insert bool, related ...*SyndicateMotion) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RuleID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"syndicate_motions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"rule_id"}),
				strmangle.WhereClause("\"", "\"", 2, syndicateMotionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RuleID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &syndicateRuleR{
			RuleSyndicateMotions: related,
		}
	} else {
		o.R.RuleSyndicateMotions = append(o.R.RuleSyndicateMotions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &syndicateMotionR{
				Rule: o,
			}
		} else {
			rel.R.Rule = o
		}
	}
	return nil
}

// SetRuleSyndicateMotions removes all previously related items of the
// syndicate_rule replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Rule's RuleSyndicateMotions accordingly.
// Replaces o.R.RuleSyndicateMotions with related.
// Sets related.R.Rule's RuleSyndicateMotions accordingly.
func (o *SyndicateRule) SetRuleSyndicateMotions(exec boil.Executor, insert bool, related ...*SyndicateMotion) error {
	query := "update \"syndicate_motions\" set \"rule_id\" = null where \"rule_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RuleSyndicateMotions {
			queries.SetScanner(&rel.RuleID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Rule = nil
		}

		o.R.RuleSyndicateMotions = nil
	}
	return o.AddRuleSyndicateMotions(exec, insert, related...)
}

// RemoveRuleSyndicateMotions relationships from objects passed in.
// Removes related items from R.RuleSyndicateMotions (uses pointer comparison, removal does not keep order)
// Sets related.R.Rule.
func (o *SyndicateRule) RemoveRuleSyndicateMotions(exec boil.Executor, related ...*SyndicateMotion) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RuleID, nil)
		if rel.R != nil {
			rel.R.Rule = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("rule_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RuleSyndicateMotions {
			if rel != ri {
				continue
			}

			ln := len(o.R.RuleSyndicateMotions)
			if ln > 1 && i < ln-1 {
				o.R.RuleSyndicateMotions[i] = o.R.RuleSyndicateMotions[ln-1]
			}
			o.R.RuleSyndicateMotions = o.R.RuleSyndicateMotions[:ln-1]
			break
		}
	}

	return nil
}

// SyndicateRules retrieves all the records using an executor.
func SyndicateRules(mods ...qm.QueryMod) syndicateRuleQuery {
	mods = append(mods, qm.From("\"syndicate_rules\""), qmhelper.WhereIsNull("\"syndicate_rules\".\"deleted_at\""))
	return syndicateRuleQuery{NewQuery(mods...)}
}

// FindSyndicateRule retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSyndicateRule(exec boil.Executor, iD string, selectCols ...string) (*SyndicateRule, error) {
	syndicateRuleObj := &SyndicateRule{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"syndicate_rules\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, syndicateRuleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from syndicate_rules")
	}

	if err = syndicateRuleObj.doAfterSelectHooks(exec); err != nil {
		return syndicateRuleObj, err
	}

	return syndicateRuleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SyndicateRule) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no syndicate_rules provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syndicateRuleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	syndicateRuleInsertCacheMut.RLock()
	cache, cached := syndicateRuleInsertCache[key]
	syndicateRuleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			syndicateRuleAllColumns,
			syndicateRuleColumnsWithDefault,
			syndicateRuleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(syndicateRuleType, syndicateRuleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(syndicateRuleType, syndicateRuleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"syndicate_rules\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"syndicate_rules\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into syndicate_rules")
	}

	if !cached {
		syndicateRuleInsertCacheMut.Lock()
		syndicateRuleInsertCache[key] = cache
		syndicateRuleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the SyndicateRule.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SyndicateRule) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	syndicateRuleUpdateCacheMut.RLock()
	cache, cached := syndicateRuleUpdateCache[key]
	syndicateRuleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			syndicateRuleAllColumns,
			syndicateRulePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update syndicate_rules, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"syndicate_rules\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, syndicateRulePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(syndicateRuleType, syndicateRuleMapping, append(wl, syndicateRulePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update syndicate_rules row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for syndicate_rules")
	}

	if !cached {
		syndicateRuleUpdateCacheMut.Lock()
		syndicateRuleUpdateCache[key] = cache
		syndicateRuleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q syndicateRuleQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for syndicate_rules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for syndicate_rules")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SyndicateRuleSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"syndicate_rules\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, syndicateRulePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in syndicateRule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all syndicateRule")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SyndicateRule) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no syndicate_rules provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syndicateRuleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	syndicateRuleUpsertCacheMut.RLock()
	cache, cached := syndicateRuleUpsertCache[key]
	syndicateRuleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			syndicateRuleAllColumns,
			syndicateRuleColumnsWithDefault,
			syndicateRuleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			syndicateRuleAllColumns,
			syndicateRulePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert syndicate_rules, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(syndicateRulePrimaryKeyColumns))
			copy(conflict, syndicateRulePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"syndicate_rules\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(syndicateRuleType, syndicateRuleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(syndicateRuleType, syndicateRuleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert syndicate_rules")
	}

	if !cached {
		syndicateRuleUpsertCacheMut.Lock()
		syndicateRuleUpsertCache[key] = cache
		syndicateRuleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single SyndicateRule record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SyndicateRule) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no SyndicateRule provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), syndicateRulePrimaryKeyMapping)
		sql = "DELETE FROM \"syndicate_rules\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"syndicate_rules\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(syndicateRuleType, syndicateRuleMapping, append(wl, syndicateRulePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from syndicate_rules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for syndicate_rules")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q syndicateRuleQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no syndicateRuleQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from syndicate_rules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for syndicate_rules")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SyndicateRuleSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(syndicateRuleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateRulePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"syndicate_rules\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syndicateRulePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateRulePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"syndicate_rules\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, syndicateRulePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from syndicateRule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for syndicate_rules")
	}

	if len(syndicateRuleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SyndicateRule) Reload(exec boil.Executor) error {
	ret, err := FindSyndicateRule(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SyndicateRuleSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SyndicateRuleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"syndicate_rules\".* FROM \"syndicate_rules\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syndicateRulePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in SyndicateRuleSlice")
	}

	*o = slice

	return nil
}

// SyndicateRuleExists checks if the SyndicateRule row exists.
func SyndicateRuleExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"syndicate_rules\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if syndicate_rules exists")
	}

	return exists, nil
}
