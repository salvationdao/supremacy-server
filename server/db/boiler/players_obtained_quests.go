// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PlayersObtainedQuest is an object representing the database table.
type PlayersObtainedQuest struct {
	PlayerID        string    `boiler:"player_id" boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	ObtainedQuestID string    `boiler:"obtained_quest_id" boil:"obtained_quest_id" json:"obtained_quest_id" toml:"obtained_quest_id" yaml:"obtained_quest_id"`
	ObtainedAt      time.Time `boiler:"obtained_at" boil:"obtained_at" json:"obtained_at" toml:"obtained_at" yaml:"obtained_at"`

	R *playersObtainedQuestR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L playersObtainedQuestL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlayersObtainedQuestColumns = struct {
	PlayerID        string
	ObtainedQuestID string
	ObtainedAt      string
}{
	PlayerID:        "player_id",
	ObtainedQuestID: "obtained_quest_id",
	ObtainedAt:      "obtained_at",
}

var PlayersObtainedQuestTableColumns = struct {
	PlayerID        string
	ObtainedQuestID string
	ObtainedAt      string
}{
	PlayerID:        "players_obtained_quests.player_id",
	ObtainedQuestID: "players_obtained_quests.obtained_quest_id",
	ObtainedAt:      "players_obtained_quests.obtained_at",
}

// Generated where

var PlayersObtainedQuestWhere = struct {
	PlayerID        whereHelperstring
	ObtainedQuestID whereHelperstring
	ObtainedAt      whereHelpertime_Time
}{
	PlayerID:        whereHelperstring{field: "\"players_obtained_quests\".\"player_id\""},
	ObtainedQuestID: whereHelperstring{field: "\"players_obtained_quests\".\"obtained_quest_id\""},
	ObtainedAt:      whereHelpertime_Time{field: "\"players_obtained_quests\".\"obtained_at\""},
}

// PlayersObtainedQuestRels is where relationship names are stored.
var PlayersObtainedQuestRels = struct {
	ObtainedQuest string
	Player        string
}{
	ObtainedQuest: "ObtainedQuest",
	Player:        "Player",
}

// playersObtainedQuestR is where relationships are stored.
type playersObtainedQuestR struct {
	ObtainedQuest *Quest  `boiler:"ObtainedQuest" boil:"ObtainedQuest" json:"ObtainedQuest" toml:"ObtainedQuest" yaml:"ObtainedQuest"`
	Player        *Player `boiler:"Player" boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
}

// NewStruct creates a new relationship struct
func (*playersObtainedQuestR) NewStruct() *playersObtainedQuestR {
	return &playersObtainedQuestR{}
}

// playersObtainedQuestL is where Load methods for each relationship are stored.
type playersObtainedQuestL struct{}

var (
	playersObtainedQuestAllColumns            = []string{"player_id", "obtained_quest_id", "obtained_at"}
	playersObtainedQuestColumnsWithoutDefault = []string{"player_id", "obtained_quest_id"}
	playersObtainedQuestColumnsWithDefault    = []string{"obtained_at"}
	playersObtainedQuestPrimaryKeyColumns     = []string{"player_id", "obtained_quest_id"}
	playersObtainedQuestGeneratedColumns      = []string{}
)

type (
	// PlayersObtainedQuestSlice is an alias for a slice of pointers to PlayersObtainedQuest.
	// This should almost always be used instead of []PlayersObtainedQuest.
	PlayersObtainedQuestSlice []*PlayersObtainedQuest
	// PlayersObtainedQuestHook is the signature for custom PlayersObtainedQuest hook methods
	PlayersObtainedQuestHook func(boil.Executor, *PlayersObtainedQuest) error

	playersObtainedQuestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playersObtainedQuestType                 = reflect.TypeOf(&PlayersObtainedQuest{})
	playersObtainedQuestMapping              = queries.MakeStructMapping(playersObtainedQuestType)
	playersObtainedQuestPrimaryKeyMapping, _ = queries.BindMapping(playersObtainedQuestType, playersObtainedQuestMapping, playersObtainedQuestPrimaryKeyColumns)
	playersObtainedQuestInsertCacheMut       sync.RWMutex
	playersObtainedQuestInsertCache          = make(map[string]insertCache)
	playersObtainedQuestUpdateCacheMut       sync.RWMutex
	playersObtainedQuestUpdateCache          = make(map[string]updateCache)
	playersObtainedQuestUpsertCacheMut       sync.RWMutex
	playersObtainedQuestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var playersObtainedQuestAfterSelectHooks []PlayersObtainedQuestHook

var playersObtainedQuestBeforeInsertHooks []PlayersObtainedQuestHook
var playersObtainedQuestAfterInsertHooks []PlayersObtainedQuestHook

var playersObtainedQuestBeforeUpdateHooks []PlayersObtainedQuestHook
var playersObtainedQuestAfterUpdateHooks []PlayersObtainedQuestHook

var playersObtainedQuestBeforeDeleteHooks []PlayersObtainedQuestHook
var playersObtainedQuestAfterDeleteHooks []PlayersObtainedQuestHook

var playersObtainedQuestBeforeUpsertHooks []PlayersObtainedQuestHook
var playersObtainedQuestAfterUpsertHooks []PlayersObtainedQuestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PlayersObtainedQuest) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range playersObtainedQuestAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PlayersObtainedQuest) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playersObtainedQuestBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PlayersObtainedQuest) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playersObtainedQuestAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PlayersObtainedQuest) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range playersObtainedQuestBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PlayersObtainedQuest) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range playersObtainedQuestAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PlayersObtainedQuest) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range playersObtainedQuestBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PlayersObtainedQuest) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range playersObtainedQuestAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PlayersObtainedQuest) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playersObtainedQuestBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PlayersObtainedQuest) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playersObtainedQuestAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlayersObtainedQuestHook registers your hook function for all future operations.
func AddPlayersObtainedQuestHook(hookPoint boil.HookPoint, playersObtainedQuestHook PlayersObtainedQuestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		playersObtainedQuestAfterSelectHooks = append(playersObtainedQuestAfterSelectHooks, playersObtainedQuestHook)
	case boil.BeforeInsertHook:
		playersObtainedQuestBeforeInsertHooks = append(playersObtainedQuestBeforeInsertHooks, playersObtainedQuestHook)
	case boil.AfterInsertHook:
		playersObtainedQuestAfterInsertHooks = append(playersObtainedQuestAfterInsertHooks, playersObtainedQuestHook)
	case boil.BeforeUpdateHook:
		playersObtainedQuestBeforeUpdateHooks = append(playersObtainedQuestBeforeUpdateHooks, playersObtainedQuestHook)
	case boil.AfterUpdateHook:
		playersObtainedQuestAfterUpdateHooks = append(playersObtainedQuestAfterUpdateHooks, playersObtainedQuestHook)
	case boil.BeforeDeleteHook:
		playersObtainedQuestBeforeDeleteHooks = append(playersObtainedQuestBeforeDeleteHooks, playersObtainedQuestHook)
	case boil.AfterDeleteHook:
		playersObtainedQuestAfterDeleteHooks = append(playersObtainedQuestAfterDeleteHooks, playersObtainedQuestHook)
	case boil.BeforeUpsertHook:
		playersObtainedQuestBeforeUpsertHooks = append(playersObtainedQuestBeforeUpsertHooks, playersObtainedQuestHook)
	case boil.AfterUpsertHook:
		playersObtainedQuestAfterUpsertHooks = append(playersObtainedQuestAfterUpsertHooks, playersObtainedQuestHook)
	}
}

// One returns a single playersObtainedQuest record from the query.
func (q playersObtainedQuestQuery) One(exec boil.Executor) (*PlayersObtainedQuest, error) {
	o := &PlayersObtainedQuest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for players_obtained_quests")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PlayersObtainedQuest records from the query.
func (q playersObtainedQuestQuery) All(exec boil.Executor) (PlayersObtainedQuestSlice, error) {
	var o []*PlayersObtainedQuest

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to PlayersObtainedQuest slice")
	}

	if len(playersObtainedQuestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PlayersObtainedQuest records in the query.
func (q playersObtainedQuestQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count players_obtained_quests rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q playersObtainedQuestQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if players_obtained_quests exists")
	}

	return count > 0, nil
}

// ObtainedQuest pointed to by the foreign key.
func (o *PlayersObtainedQuest) ObtainedQuest(mods ...qm.QueryMod) questQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ObtainedQuestID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Quests(queryMods...)
	queries.SetFrom(query.Query, "\"quests\"")

	return query
}

// Player pointed to by the foreign key.
func (o *PlayersObtainedQuest) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// LoadObtainedQuest allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playersObtainedQuestL) LoadObtainedQuest(e boil.Executor, singular bool, maybePlayersObtainedQuest interface{}, mods queries.Applicator) error {
	var slice []*PlayersObtainedQuest
	var object *PlayersObtainedQuest

	if singular {
		object = maybePlayersObtainedQuest.(*PlayersObtainedQuest)
	} else {
		slice = *maybePlayersObtainedQuest.(*[]*PlayersObtainedQuest)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playersObtainedQuestR{}
		}
		args = append(args, object.ObtainedQuestID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playersObtainedQuestR{}
			}

			for _, a := range args {
				if a == obj.ObtainedQuestID {
					continue Outer
				}
			}

			args = append(args, obj.ObtainedQuestID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`quests`),
		qm.WhereIn(`quests.id in ?`, args...),
		qmhelper.WhereIsNull(`quests.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Quest")
	}

	var resultSlice []*Quest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Quest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for quests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for quests")
	}

	if len(playersObtainedQuestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ObtainedQuest = foreign
		if foreign.R == nil {
			foreign.R = &questR{}
		}
		foreign.R.ObtainedQuestPlayersObtainedQuests = append(foreign.R.ObtainedQuestPlayersObtainedQuests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ObtainedQuestID == foreign.ID {
				local.R.ObtainedQuest = foreign
				if foreign.R == nil {
					foreign.R = &questR{}
				}
				foreign.R.ObtainedQuestPlayersObtainedQuests = append(foreign.R.ObtainedQuestPlayersObtainedQuests, local)
				break
			}
		}
	}

	return nil
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playersObtainedQuestL) LoadPlayer(e boil.Executor, singular bool, maybePlayersObtainedQuest interface{}, mods queries.Applicator) error {
	var slice []*PlayersObtainedQuest
	var object *PlayersObtainedQuest

	if singular {
		object = maybePlayersObtainedQuest.(*PlayersObtainedQuest)
	} else {
		slice = *maybePlayersObtainedQuest.(*[]*PlayersObtainedQuest)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playersObtainedQuestR{}
		}
		args = append(args, object.PlayerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playersObtainedQuestR{}
			}

			for _, a := range args {
				if a == obj.PlayerID {
					continue Outer
				}
			}

			args = append(args, obj.PlayerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(playersObtainedQuestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.PlayersObtainedQuests = append(foreign.R.PlayersObtainedQuests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.ID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.PlayersObtainedQuests = append(foreign.R.PlayersObtainedQuests, local)
				break
			}
		}
	}

	return nil
}

// SetObtainedQuest of the playersObtainedQuest to the related item.
// Sets o.R.ObtainedQuest to related.
// Adds o to related.R.ObtainedQuestPlayersObtainedQuests.
func (o *PlayersObtainedQuest) SetObtainedQuest(exec boil.Executor, insert bool, related *Quest) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"players_obtained_quests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"obtained_quest_id"}),
		strmangle.WhereClause("\"", "\"", 2, playersObtainedQuestPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.PlayerID, o.ObtainedQuestID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ObtainedQuestID = related.ID
	if o.R == nil {
		o.R = &playersObtainedQuestR{
			ObtainedQuest: related,
		}
	} else {
		o.R.ObtainedQuest = related
	}

	if related.R == nil {
		related.R = &questR{
			ObtainedQuestPlayersObtainedQuests: PlayersObtainedQuestSlice{o},
		}
	} else {
		related.R.ObtainedQuestPlayersObtainedQuests = append(related.R.ObtainedQuestPlayersObtainedQuests, o)
	}

	return nil
}

// SetPlayer of the playersObtainedQuest to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.PlayersObtainedQuests.
func (o *PlayersObtainedQuest) SetPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"players_obtained_quests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, playersObtainedQuestPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.PlayerID, o.ObtainedQuestID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.ID
	if o.R == nil {
		o.R = &playersObtainedQuestR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			PlayersObtainedQuests: PlayersObtainedQuestSlice{o},
		}
	} else {
		related.R.PlayersObtainedQuests = append(related.R.PlayersObtainedQuests, o)
	}

	return nil
}

// PlayersObtainedQuests retrieves all the records using an executor.
func PlayersObtainedQuests(mods ...qm.QueryMod) playersObtainedQuestQuery {
	mods = append(mods, qm.From("\"players_obtained_quests\""))
	return playersObtainedQuestQuery{NewQuery(mods...)}
}

// FindPlayersObtainedQuest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlayersObtainedQuest(exec boil.Executor, playerID string, obtainedQuestID string, selectCols ...string) (*PlayersObtainedQuest, error) {
	playersObtainedQuestObj := &PlayersObtainedQuest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"players_obtained_quests\" where \"player_id\"=$1 AND \"obtained_quest_id\"=$2", sel,
	)

	q := queries.Raw(query, playerID, obtainedQuestID)

	err := q.Bind(nil, exec, playersObtainedQuestObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from players_obtained_quests")
	}

	if err = playersObtainedQuestObj.doAfterSelectHooks(exec); err != nil {
		return playersObtainedQuestObj, err
	}

	return playersObtainedQuestObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PlayersObtainedQuest) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no players_obtained_quests provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playersObtainedQuestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	playersObtainedQuestInsertCacheMut.RLock()
	cache, cached := playersObtainedQuestInsertCache[key]
	playersObtainedQuestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			playersObtainedQuestAllColumns,
			playersObtainedQuestColumnsWithDefault,
			playersObtainedQuestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(playersObtainedQuestType, playersObtainedQuestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(playersObtainedQuestType, playersObtainedQuestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"players_obtained_quests\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"players_obtained_quests\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into players_obtained_quests")
	}

	if !cached {
		playersObtainedQuestInsertCacheMut.Lock()
		playersObtainedQuestInsertCache[key] = cache
		playersObtainedQuestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the PlayersObtainedQuest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PlayersObtainedQuest) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	playersObtainedQuestUpdateCacheMut.RLock()
	cache, cached := playersObtainedQuestUpdateCache[key]
	playersObtainedQuestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			playersObtainedQuestAllColumns,
			playersObtainedQuestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update players_obtained_quests, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"players_obtained_quests\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, playersObtainedQuestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(playersObtainedQuestType, playersObtainedQuestMapping, append(wl, playersObtainedQuestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update players_obtained_quests row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for players_obtained_quests")
	}

	if !cached {
		playersObtainedQuestUpdateCacheMut.Lock()
		playersObtainedQuestUpdateCache[key] = cache
		playersObtainedQuestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q playersObtainedQuestQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for players_obtained_quests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for players_obtained_quests")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlayersObtainedQuestSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playersObtainedQuestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"players_obtained_quests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, playersObtainedQuestPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in playersObtainedQuest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all playersObtainedQuest")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PlayersObtainedQuest) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no players_obtained_quests provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playersObtainedQuestColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	playersObtainedQuestUpsertCacheMut.RLock()
	cache, cached := playersObtainedQuestUpsertCache[key]
	playersObtainedQuestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			playersObtainedQuestAllColumns,
			playersObtainedQuestColumnsWithDefault,
			playersObtainedQuestColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			playersObtainedQuestAllColumns,
			playersObtainedQuestPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert players_obtained_quests, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(playersObtainedQuestPrimaryKeyColumns))
			copy(conflict, playersObtainedQuestPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"players_obtained_quests\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(playersObtainedQuestType, playersObtainedQuestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(playersObtainedQuestType, playersObtainedQuestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert players_obtained_quests")
	}

	if !cached {
		playersObtainedQuestUpsertCacheMut.Lock()
		playersObtainedQuestUpsertCache[key] = cache
		playersObtainedQuestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single PlayersObtainedQuest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PlayersObtainedQuest) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no PlayersObtainedQuest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), playersObtainedQuestPrimaryKeyMapping)
	sql := "DELETE FROM \"players_obtained_quests\" WHERE \"player_id\"=$1 AND \"obtained_quest_id\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from players_obtained_quests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for players_obtained_quests")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q playersObtainedQuestQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no playersObtainedQuestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from players_obtained_quests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for players_obtained_quests")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlayersObtainedQuestSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(playersObtainedQuestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playersObtainedQuestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"players_obtained_quests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playersObtainedQuestPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from playersObtainedQuest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for players_obtained_quests")
	}

	if len(playersObtainedQuestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PlayersObtainedQuest) Reload(exec boil.Executor) error {
	ret, err := FindPlayersObtainedQuest(exec, o.PlayerID, o.ObtainedQuestID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlayersObtainedQuestSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlayersObtainedQuestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playersObtainedQuestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"players_obtained_quests\".* FROM \"players_obtained_quests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playersObtainedQuestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in PlayersObtainedQuestSlice")
	}

	*o = slice

	return nil
}

// PlayersObtainedQuestExists checks if the PlayersObtainedQuest row exists.
func PlayersObtainedQuestExists(exec boil.Executor, playerID string, obtainedQuestID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"players_obtained_quests\" where \"player_id\"=$1 AND \"obtained_quest_id\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, playerID, obtainedQuestID)
	}
	row := exec.QueryRow(sql, playerID, obtainedQuestID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if players_obtained_quests exists")
	}

	return exists, nil
}
