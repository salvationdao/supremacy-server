// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FactionPalette is an object representing the database table.
type FactionPalette struct {
	FactionID  string `boiler:"faction_id" boil:"faction_id" json:"faction_id" toml:"faction_id" yaml:"faction_id"`
	Primary    string `boiler:"primary" boil:"primary" json:"primary" toml:"primary" yaml:"primary"`
	Text       string `boiler:"text" boil:"text" json:"text" toml:"text" yaml:"text"`
	Background string `boiler:"background" boil:"background" json:"background" toml:"background" yaml:"background"`
	S100       string `boiler:"s100" boil:"s100" json:"s100" toml:"s100" yaml:"s100"`
	S200       string `boiler:"s200" boil:"s200" json:"s200" toml:"s200" yaml:"s200"`
	S300       string `boiler:"s300" boil:"s300" json:"s300" toml:"s300" yaml:"s300"`
	S400       string `boiler:"s400" boil:"s400" json:"s400" toml:"s400" yaml:"s400"`
	S500       string `boiler:"s500" boil:"s500" json:"s500" toml:"s500" yaml:"s500"`
	S600       string `boiler:"s600" boil:"s600" json:"s600" toml:"s600" yaml:"s600"`
	S700       string `boiler:"s700" boil:"s700" json:"s700" toml:"s700" yaml:"s700"`
	S800       string `boiler:"s800" boil:"s800" json:"s800" toml:"s800" yaml:"s800"`
	S900       string `boiler:"s900" boil:"s900" json:"s900" toml:"s900" yaml:"s900"`

	R *factionPaletteR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L factionPaletteL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FactionPaletteColumns = struct {
	FactionID  string
	Primary    string
	Text       string
	Background string
	S100       string
	S200       string
	S300       string
	S400       string
	S500       string
	S600       string
	S700       string
	S800       string
	S900       string
}{
	FactionID:  "faction_id",
	Primary:    "primary",
	Text:       "text",
	Background: "background",
	S100:       "s100",
	S200:       "s200",
	S300:       "s300",
	S400:       "s400",
	S500:       "s500",
	S600:       "s600",
	S700:       "s700",
	S800:       "s800",
	S900:       "s900",
}

var FactionPaletteTableColumns = struct {
	FactionID  string
	Primary    string
	Text       string
	Background string
	S100       string
	S200       string
	S300       string
	S400       string
	S500       string
	S600       string
	S700       string
	S800       string
	S900       string
}{
	FactionID:  "faction_palettes.faction_id",
	Primary:    "faction_palettes.primary",
	Text:       "faction_palettes.text",
	Background: "faction_palettes.background",
	S100:       "faction_palettes.s100",
	S200:       "faction_palettes.s200",
	S300:       "faction_palettes.s300",
	S400:       "faction_palettes.s400",
	S500:       "faction_palettes.s500",
	S600:       "faction_palettes.s600",
	S700:       "faction_palettes.s700",
	S800:       "faction_palettes.s800",
	S900:       "faction_palettes.s900",
}

// Generated where

var FactionPaletteWhere = struct {
	FactionID  whereHelperstring
	Primary    whereHelperstring
	Text       whereHelperstring
	Background whereHelperstring
	S100       whereHelperstring
	S200       whereHelperstring
	S300       whereHelperstring
	S400       whereHelperstring
	S500       whereHelperstring
	S600       whereHelperstring
	S700       whereHelperstring
	S800       whereHelperstring
	S900       whereHelperstring
}{
	FactionID:  whereHelperstring{field: "\"faction_palettes\".\"faction_id\""},
	Primary:    whereHelperstring{field: "\"faction_palettes\".\"primary\""},
	Text:       whereHelperstring{field: "\"faction_palettes\".\"text\""},
	Background: whereHelperstring{field: "\"faction_palettes\".\"background\""},
	S100:       whereHelperstring{field: "\"faction_palettes\".\"s100\""},
	S200:       whereHelperstring{field: "\"faction_palettes\".\"s200\""},
	S300:       whereHelperstring{field: "\"faction_palettes\".\"s300\""},
	S400:       whereHelperstring{field: "\"faction_palettes\".\"s400\""},
	S500:       whereHelperstring{field: "\"faction_palettes\".\"s500\""},
	S600:       whereHelperstring{field: "\"faction_palettes\".\"s600\""},
	S700:       whereHelperstring{field: "\"faction_palettes\".\"s700\""},
	S800:       whereHelperstring{field: "\"faction_palettes\".\"s800\""},
	S900:       whereHelperstring{field: "\"faction_palettes\".\"s900\""},
}

// FactionPaletteRels is where relationship names are stored.
var FactionPaletteRels = struct {
	Faction string
}{
	Faction: "Faction",
}

// factionPaletteR is where relationships are stored.
type factionPaletteR struct {
	Faction *Faction `boiler:"Faction" boil:"Faction" json:"Faction" toml:"Faction" yaml:"Faction"`
}

// NewStruct creates a new relationship struct
func (*factionPaletteR) NewStruct() *factionPaletteR {
	return &factionPaletteR{}
}

// factionPaletteL is where Load methods for each relationship are stored.
type factionPaletteL struct{}

var (
	factionPaletteAllColumns            = []string{"faction_id", "primary", "text", "background", "s100", "s200", "s300", "s400", "s500", "s600", "s700", "s800", "s900"}
	factionPaletteColumnsWithoutDefault = []string{"faction_id", "primary", "text", "background", "s100", "s200", "s300", "s400", "s500", "s600", "s700", "s800", "s900"}
	factionPaletteColumnsWithDefault    = []string{}
	factionPalettePrimaryKeyColumns     = []string{"faction_id"}
	factionPaletteGeneratedColumns      = []string{}
)

type (
	// FactionPaletteSlice is an alias for a slice of pointers to FactionPalette.
	// This should almost always be used instead of []FactionPalette.
	FactionPaletteSlice []*FactionPalette
	// FactionPaletteHook is the signature for custom FactionPalette hook methods
	FactionPaletteHook func(boil.Executor, *FactionPalette) error

	factionPaletteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	factionPaletteType                 = reflect.TypeOf(&FactionPalette{})
	factionPaletteMapping              = queries.MakeStructMapping(factionPaletteType)
	factionPalettePrimaryKeyMapping, _ = queries.BindMapping(factionPaletteType, factionPaletteMapping, factionPalettePrimaryKeyColumns)
	factionPaletteInsertCacheMut       sync.RWMutex
	factionPaletteInsertCache          = make(map[string]insertCache)
	factionPaletteUpdateCacheMut       sync.RWMutex
	factionPaletteUpdateCache          = make(map[string]updateCache)
	factionPaletteUpsertCacheMut       sync.RWMutex
	factionPaletteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var factionPaletteAfterSelectHooks []FactionPaletteHook

var factionPaletteBeforeInsertHooks []FactionPaletteHook
var factionPaletteAfterInsertHooks []FactionPaletteHook

var factionPaletteBeforeUpdateHooks []FactionPaletteHook
var factionPaletteAfterUpdateHooks []FactionPaletteHook

var factionPaletteBeforeDeleteHooks []FactionPaletteHook
var factionPaletteAfterDeleteHooks []FactionPaletteHook

var factionPaletteBeforeUpsertHooks []FactionPaletteHook
var factionPaletteAfterUpsertHooks []FactionPaletteHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FactionPalette) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range factionPaletteAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FactionPalette) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range factionPaletteBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FactionPalette) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range factionPaletteAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FactionPalette) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range factionPaletteBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FactionPalette) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range factionPaletteAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FactionPalette) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range factionPaletteBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FactionPalette) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range factionPaletteAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FactionPalette) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range factionPaletteBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FactionPalette) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range factionPaletteAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFactionPaletteHook registers your hook function for all future operations.
func AddFactionPaletteHook(hookPoint boil.HookPoint, factionPaletteHook FactionPaletteHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		factionPaletteAfterSelectHooks = append(factionPaletteAfterSelectHooks, factionPaletteHook)
	case boil.BeforeInsertHook:
		factionPaletteBeforeInsertHooks = append(factionPaletteBeforeInsertHooks, factionPaletteHook)
	case boil.AfterInsertHook:
		factionPaletteAfterInsertHooks = append(factionPaletteAfterInsertHooks, factionPaletteHook)
	case boil.BeforeUpdateHook:
		factionPaletteBeforeUpdateHooks = append(factionPaletteBeforeUpdateHooks, factionPaletteHook)
	case boil.AfterUpdateHook:
		factionPaletteAfterUpdateHooks = append(factionPaletteAfterUpdateHooks, factionPaletteHook)
	case boil.BeforeDeleteHook:
		factionPaletteBeforeDeleteHooks = append(factionPaletteBeforeDeleteHooks, factionPaletteHook)
	case boil.AfterDeleteHook:
		factionPaletteAfterDeleteHooks = append(factionPaletteAfterDeleteHooks, factionPaletteHook)
	case boil.BeforeUpsertHook:
		factionPaletteBeforeUpsertHooks = append(factionPaletteBeforeUpsertHooks, factionPaletteHook)
	case boil.AfterUpsertHook:
		factionPaletteAfterUpsertHooks = append(factionPaletteAfterUpsertHooks, factionPaletteHook)
	}
}

// One returns a single factionPalette record from the query.
func (q factionPaletteQuery) One(exec boil.Executor) (*FactionPalette, error) {
	o := &FactionPalette{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for faction_palettes")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FactionPalette records from the query.
func (q factionPaletteQuery) All(exec boil.Executor) (FactionPaletteSlice, error) {
	var o []*FactionPalette

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to FactionPalette slice")
	}

	if len(factionPaletteAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FactionPalette records in the query.
func (q factionPaletteQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count faction_palettes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q factionPaletteQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if faction_palettes exists")
	}

	return count > 0, nil
}

// Faction pointed to by the foreign key.
func (o *FactionPalette) Faction(mods ...qm.QueryMod) factionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FactionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Factions(queryMods...)
	queries.SetFrom(query.Query, "\"factions\"")

	return query
}

// LoadFaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (factionPaletteL) LoadFaction(e boil.Executor, singular bool, maybeFactionPalette interface{}, mods queries.Applicator) error {
	var slice []*FactionPalette
	var object *FactionPalette

	if singular {
		object = maybeFactionPalette.(*FactionPalette)
	} else {
		slice = *maybeFactionPalette.(*[]*FactionPalette)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &factionPaletteR{}
		}
		args = append(args, object.FactionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &factionPaletteR{}
			}

			for _, a := range args {
				if a == obj.FactionID {
					continue Outer
				}
			}

			args = append(args, obj.FactionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`factions`),
		qm.WhereIn(`factions.id in ?`, args...),
		qmhelper.WhereIsNull(`factions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Faction")
	}

	var resultSlice []*Faction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Faction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for factions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for factions")
	}

	if len(factionPaletteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Faction = foreign
		if foreign.R == nil {
			foreign.R = &factionR{}
		}
		foreign.R.FactionPalette = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FactionID == foreign.ID {
				local.R.Faction = foreign
				if foreign.R == nil {
					foreign.R = &factionR{}
				}
				foreign.R.FactionPalette = local
				break
			}
		}
	}

	return nil
}

// SetFaction of the factionPalette to the related item.
// Sets o.R.Faction to related.
// Adds o to related.R.FactionPalette.
func (o *FactionPalette) SetFaction(exec boil.Executor, insert bool, related *Faction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"faction_palettes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"faction_id"}),
		strmangle.WhereClause("\"", "\"", 2, factionPalettePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.FactionID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FactionID = related.ID
	if o.R == nil {
		o.R = &factionPaletteR{
			Faction: related,
		}
	} else {
		o.R.Faction = related
	}

	if related.R == nil {
		related.R = &factionR{
			FactionPalette: o,
		}
	} else {
		related.R.FactionPalette = o
	}

	return nil
}

// FactionPalettes retrieves all the records using an executor.
func FactionPalettes(mods ...qm.QueryMod) factionPaletteQuery {
	mods = append(mods, qm.From("\"faction_palettes\""))
	return factionPaletteQuery{NewQuery(mods...)}
}

// FindFactionPalette retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFactionPalette(exec boil.Executor, factionID string, selectCols ...string) (*FactionPalette, error) {
	factionPaletteObj := &FactionPalette{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"faction_palettes\" where \"faction_id\"=$1", sel,
	)

	q := queries.Raw(query, factionID)

	err := q.Bind(nil, exec, factionPaletteObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from faction_palettes")
	}

	if err = factionPaletteObj.doAfterSelectHooks(exec); err != nil {
		return factionPaletteObj, err
	}

	return factionPaletteObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FactionPalette) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no faction_palettes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(factionPaletteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	factionPaletteInsertCacheMut.RLock()
	cache, cached := factionPaletteInsertCache[key]
	factionPaletteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			factionPaletteAllColumns,
			factionPaletteColumnsWithDefault,
			factionPaletteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(factionPaletteType, factionPaletteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(factionPaletteType, factionPaletteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"faction_palettes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"faction_palettes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into faction_palettes")
	}

	if !cached {
		factionPaletteInsertCacheMut.Lock()
		factionPaletteInsertCache[key] = cache
		factionPaletteInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the FactionPalette.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FactionPalette) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	factionPaletteUpdateCacheMut.RLock()
	cache, cached := factionPaletteUpdateCache[key]
	factionPaletteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			factionPaletteAllColumns,
			factionPalettePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update faction_palettes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"faction_palettes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, factionPalettePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(factionPaletteType, factionPaletteMapping, append(wl, factionPalettePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update faction_palettes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for faction_palettes")
	}

	if !cached {
		factionPaletteUpdateCacheMut.Lock()
		factionPaletteUpdateCache[key] = cache
		factionPaletteUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q factionPaletteQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for faction_palettes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for faction_palettes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FactionPaletteSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factionPalettePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"faction_palettes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, factionPalettePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in factionPalette slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all factionPalette")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FactionPalette) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no faction_palettes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(factionPaletteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	factionPaletteUpsertCacheMut.RLock()
	cache, cached := factionPaletteUpsertCache[key]
	factionPaletteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			factionPaletteAllColumns,
			factionPaletteColumnsWithDefault,
			factionPaletteColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			factionPaletteAllColumns,
			factionPalettePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert faction_palettes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(factionPalettePrimaryKeyColumns))
			copy(conflict, factionPalettePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"faction_palettes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(factionPaletteType, factionPaletteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(factionPaletteType, factionPaletteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert faction_palettes")
	}

	if !cached {
		factionPaletteUpsertCacheMut.Lock()
		factionPaletteUpsertCache[key] = cache
		factionPaletteUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single FactionPalette record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FactionPalette) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no FactionPalette provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), factionPalettePrimaryKeyMapping)
	sql := "DELETE FROM \"faction_palettes\" WHERE \"faction_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from faction_palettes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for faction_palettes")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q factionPaletteQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no factionPaletteQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from faction_palettes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for faction_palettes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FactionPaletteSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(factionPaletteBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factionPalettePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"faction_palettes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, factionPalettePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from factionPalette slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for faction_palettes")
	}

	if len(factionPaletteAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FactionPalette) Reload(exec boil.Executor) error {
	ret, err := FindFactionPalette(exec, o.FactionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FactionPaletteSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FactionPaletteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factionPalettePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"faction_palettes\".* FROM \"faction_palettes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, factionPalettePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in FactionPaletteSlice")
	}

	*o = slice

	return nil
}

// FactionPaletteExists checks if the FactionPalette row exists.
func FactionPaletteExists(exec boil.Executor, factionID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"faction_palettes\" where \"faction_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, factionID)
	}
	row := exec.QueryRow(sql, factionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if faction_palettes exists")
	}

	return exists, nil
}
