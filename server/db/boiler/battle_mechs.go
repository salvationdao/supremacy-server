// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BattleMech is an object representing the database table.
type BattleMech struct {
	BattleID     string      `boiler:"battle_id" boil:"battle_id" json:"battle_id" toml:"battle_id" yaml:"battle_id"`
	PilotedByID  string      `boiler:"piloted_by_id" boil:"piloted_by_id" json:"piloted_by_id" toml:"piloted_by_id" yaml:"piloted_by_id"`
	FactionID    string      `boiler:"faction_id" boil:"faction_id" json:"faction_id" toml:"faction_id" yaml:"faction_id"`
	Killed       null.Time   `boiler:"killed" boil:"killed" json:"killed,omitempty" toml:"killed" yaml:"killed,omitempty"`
	Kills        int         `boiler:"kills" boil:"kills" json:"kills" toml:"kills" yaml:"kills"`
	DamageTaken  int         `boiler:"damage_taken" boil:"damage_taken" json:"damage_taken" toml:"damage_taken" yaml:"damage_taken"`
	UpdatedAt    time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt    time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	FactionWon   null.Bool   `boiler:"faction_won" boil:"faction_won" json:"faction_won,omitempty" toml:"faction_won" yaml:"faction_won,omitempty"`
	MechSurvived null.Bool   `boiler:"mech_survived" boil:"mech_survived" json:"mech_survived,omitempty" toml:"mech_survived" yaml:"mech_survived,omitempty"`
	MechID       string      `boiler:"mech_id" boil:"mech_id" json:"mech_id" toml:"mech_id" yaml:"mech_id"`
	KilledByID   null.String `boiler:"killed_by_id" boil:"killed_by_id" json:"killed_by_id,omitempty" toml:"killed_by_id" yaml:"killed_by_id,omitempty"`

	R *battleMechR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L battleMechL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattleMechColumns = struct {
	BattleID     string
	PilotedByID  string
	FactionID    string
	Killed       string
	Kills        string
	DamageTaken  string
	UpdatedAt    string
	CreatedAt    string
	FactionWon   string
	MechSurvived string
	MechID       string
	KilledByID   string
}{
	BattleID:     "battle_id",
	PilotedByID:  "piloted_by_id",
	FactionID:    "faction_id",
	Killed:       "killed",
	Kills:        "kills",
	DamageTaken:  "damage_taken",
	UpdatedAt:    "updated_at",
	CreatedAt:    "created_at",
	FactionWon:   "faction_won",
	MechSurvived: "mech_survived",
	MechID:       "mech_id",
	KilledByID:   "killed_by_id",
}

var BattleMechTableColumns = struct {
	BattleID     string
	PilotedByID  string
	FactionID    string
	Killed       string
	Kills        string
	DamageTaken  string
	UpdatedAt    string
	CreatedAt    string
	FactionWon   string
	MechSurvived string
	MechID       string
	KilledByID   string
}{
	BattleID:     "battle_mechs.battle_id",
	PilotedByID:  "battle_mechs.piloted_by_id",
	FactionID:    "battle_mechs.faction_id",
	Killed:       "battle_mechs.killed",
	Kills:        "battle_mechs.kills",
	DamageTaken:  "battle_mechs.damage_taken",
	UpdatedAt:    "battle_mechs.updated_at",
	CreatedAt:    "battle_mechs.created_at",
	FactionWon:   "battle_mechs.faction_won",
	MechSurvived: "battle_mechs.mech_survived",
	MechID:       "battle_mechs.mech_id",
	KilledByID:   "battle_mechs.killed_by_id",
}

// Generated where

var BattleMechWhere = struct {
	BattleID     whereHelperstring
	PilotedByID  whereHelperstring
	FactionID    whereHelperstring
	Killed       whereHelpernull_Time
	Kills        whereHelperint
	DamageTaken  whereHelperint
	UpdatedAt    whereHelpertime_Time
	CreatedAt    whereHelpertime_Time
	FactionWon   whereHelpernull_Bool
	MechSurvived whereHelpernull_Bool
	MechID       whereHelperstring
	KilledByID   whereHelpernull_String
}{
	BattleID:     whereHelperstring{field: "\"battle_mechs\".\"battle_id\""},
	PilotedByID:  whereHelperstring{field: "\"battle_mechs\".\"piloted_by_id\""},
	FactionID:    whereHelperstring{field: "\"battle_mechs\".\"faction_id\""},
	Killed:       whereHelpernull_Time{field: "\"battle_mechs\".\"killed\""},
	Kills:        whereHelperint{field: "\"battle_mechs\".\"kills\""},
	DamageTaken:  whereHelperint{field: "\"battle_mechs\".\"damage_taken\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"battle_mechs\".\"updated_at\""},
	CreatedAt:    whereHelpertime_Time{field: "\"battle_mechs\".\"created_at\""},
	FactionWon:   whereHelpernull_Bool{field: "\"battle_mechs\".\"faction_won\""},
	MechSurvived: whereHelpernull_Bool{field: "\"battle_mechs\".\"mech_survived\""},
	MechID:       whereHelperstring{field: "\"battle_mechs\".\"mech_id\""},
	KilledByID:   whereHelpernull_String{field: "\"battle_mechs\".\"killed_by_id\""},
}

// BattleMechRels is where relationship names are stored.
var BattleMechRels = struct {
	Battle    string
	Mech      string
	Faction   string
	KilledBy  string
	PilotedBy string
}{
	Battle:    "Battle",
	Mech:      "Mech",
	Faction:   "Faction",
	KilledBy:  "KilledBy",
	PilotedBy: "PilotedBy",
}

// battleMechR is where relationships are stored.
type battleMechR struct {
	Battle    *Battle  `boiler:"Battle" boil:"Battle" json:"Battle" toml:"Battle" yaml:"Battle"`
	Mech      *Mech    `boiler:"Mech" boil:"Mech" json:"Mech" toml:"Mech" yaml:"Mech"`
	Faction   *Faction `boiler:"Faction" boil:"Faction" json:"Faction" toml:"Faction" yaml:"Faction"`
	KilledBy  *Mech    `boiler:"KilledBy" boil:"KilledBy" json:"KilledBy" toml:"KilledBy" yaml:"KilledBy"`
	PilotedBy *Player  `boiler:"PilotedBy" boil:"PilotedBy" json:"PilotedBy" toml:"PilotedBy" yaml:"PilotedBy"`
}

// NewStruct creates a new relationship struct
func (*battleMechR) NewStruct() *battleMechR {
	return &battleMechR{}
}

// battleMechL is where Load methods for each relationship are stored.
type battleMechL struct{}

var (
	battleMechAllColumns            = []string{"battle_id", "piloted_by_id", "faction_id", "killed", "kills", "damage_taken", "updated_at", "created_at", "faction_won", "mech_survived", "mech_id", "killed_by_id"}
	battleMechColumnsWithoutDefault = []string{"battle_id", "piloted_by_id", "faction_id", "mech_id"}
	battleMechColumnsWithDefault    = []string{"killed", "kills", "damage_taken", "updated_at", "created_at", "faction_won", "mech_survived", "killed_by_id"}
	battleMechPrimaryKeyColumns     = []string{"battle_id", "mech_id"}
	battleMechGeneratedColumns      = []string{}
)

type (
	// BattleMechSlice is an alias for a slice of pointers to BattleMech.
	// This should almost always be used instead of []BattleMech.
	BattleMechSlice []*BattleMech
	// BattleMechHook is the signature for custom BattleMech hook methods
	BattleMechHook func(boil.Executor, *BattleMech) error

	battleMechQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battleMechType                 = reflect.TypeOf(&BattleMech{})
	battleMechMapping              = queries.MakeStructMapping(battleMechType)
	battleMechPrimaryKeyMapping, _ = queries.BindMapping(battleMechType, battleMechMapping, battleMechPrimaryKeyColumns)
	battleMechInsertCacheMut       sync.RWMutex
	battleMechInsertCache          = make(map[string]insertCache)
	battleMechUpdateCacheMut       sync.RWMutex
	battleMechUpdateCache          = make(map[string]updateCache)
	battleMechUpsertCacheMut       sync.RWMutex
	battleMechUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battleMechAfterSelectHooks []BattleMechHook

var battleMechBeforeInsertHooks []BattleMechHook
var battleMechAfterInsertHooks []BattleMechHook

var battleMechBeforeUpdateHooks []BattleMechHook
var battleMechAfterUpdateHooks []BattleMechHook

var battleMechBeforeDeleteHooks []BattleMechHook
var battleMechAfterDeleteHooks []BattleMechHook

var battleMechBeforeUpsertHooks []BattleMechHook
var battleMechAfterUpsertHooks []BattleMechHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BattleMech) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range battleMechAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BattleMech) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleMechBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BattleMech) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleMechAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BattleMech) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleMechBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BattleMech) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleMechAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BattleMech) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleMechBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BattleMech) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleMechAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BattleMech) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleMechBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BattleMech) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleMechAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattleMechHook registers your hook function for all future operations.
func AddBattleMechHook(hookPoint boil.HookPoint, battleMechHook BattleMechHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		battleMechAfterSelectHooks = append(battleMechAfterSelectHooks, battleMechHook)
	case boil.BeforeInsertHook:
		battleMechBeforeInsertHooks = append(battleMechBeforeInsertHooks, battleMechHook)
	case boil.AfterInsertHook:
		battleMechAfterInsertHooks = append(battleMechAfterInsertHooks, battleMechHook)
	case boil.BeforeUpdateHook:
		battleMechBeforeUpdateHooks = append(battleMechBeforeUpdateHooks, battleMechHook)
	case boil.AfterUpdateHook:
		battleMechAfterUpdateHooks = append(battleMechAfterUpdateHooks, battleMechHook)
	case boil.BeforeDeleteHook:
		battleMechBeforeDeleteHooks = append(battleMechBeforeDeleteHooks, battleMechHook)
	case boil.AfterDeleteHook:
		battleMechAfterDeleteHooks = append(battleMechAfterDeleteHooks, battleMechHook)
	case boil.BeforeUpsertHook:
		battleMechBeforeUpsertHooks = append(battleMechBeforeUpsertHooks, battleMechHook)
	case boil.AfterUpsertHook:
		battleMechAfterUpsertHooks = append(battleMechAfterUpsertHooks, battleMechHook)
	}
}

// One returns a single battleMech record from the query.
func (q battleMechQuery) One(exec boil.Executor) (*BattleMech, error) {
	o := &BattleMech{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for battle_mechs")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BattleMech records from the query.
func (q battleMechQuery) All(exec boil.Executor) (BattleMechSlice, error) {
	var o []*BattleMech

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BattleMech slice")
	}

	if len(battleMechAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BattleMech records in the query.
func (q battleMechQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count battle_mechs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battleMechQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if battle_mechs exists")
	}

	return count > 0, nil
}

// Battle pointed to by the foreign key.
func (o *BattleMech) Battle(mods ...qm.QueryMod) battleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BattleID),
	}

	queryMods = append(queryMods, mods...)

	query := Battles(queryMods...)
	queries.SetFrom(query.Query, "\"battles\"")

	return query
}

// Mech pointed to by the foreign key.
func (o *BattleMech) Mech(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MechID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// Faction pointed to by the foreign key.
func (o *BattleMech) Faction(mods ...qm.QueryMod) factionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FactionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Factions(queryMods...)
	queries.SetFrom(query.Query, "\"factions\"")

	return query
}

// KilledBy pointed to by the foreign key.
func (o *BattleMech) KilledBy(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.KilledByID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// PilotedBy pointed to by the foreign key.
func (o *BattleMech) PilotedBy(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PilotedByID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// LoadBattle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleMechL) LoadBattle(e boil.Executor, singular bool, maybeBattleMech interface{}, mods queries.Applicator) error {
	var slice []*BattleMech
	var object *BattleMech

	if singular {
		object = maybeBattleMech.(*BattleMech)
	} else {
		slice = *maybeBattleMech.(*[]*BattleMech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleMechR{}
		}
		args = append(args, object.BattleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleMechR{}
			}

			for _, a := range args {
				if a == obj.BattleID {
					continue Outer
				}
			}

			args = append(args, obj.BattleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battles`),
		qm.WhereIn(`battles.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Battle")
	}

	var resultSlice []*Battle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Battle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battles")
	}

	if len(battleMechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Battle = foreign
		if foreign.R == nil {
			foreign.R = &battleR{}
		}
		foreign.R.BattleMechs = append(foreign.R.BattleMechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BattleID == foreign.ID {
				local.R.Battle = foreign
				if foreign.R == nil {
					foreign.R = &battleR{}
				}
				foreign.R.BattleMechs = append(foreign.R.BattleMechs, local)
				break
			}
		}
	}

	return nil
}

// LoadMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleMechL) LoadMech(e boil.Executor, singular bool, maybeBattleMech interface{}, mods queries.Applicator) error {
	var slice []*BattleMech
	var object *BattleMech

	if singular {
		object = maybeBattleMech.(*BattleMech)
	} else {
		slice = *maybeBattleMech.(*[]*BattleMech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleMechR{}
		}
		args = append(args, object.MechID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleMechR{}
			}

			for _, a := range args {
				if a == obj.MechID {
					continue Outer
				}
			}

			args = append(args, obj.MechID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(battleMechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Mech = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.BattleMechs = append(foreign.R.BattleMechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MechID == foreign.ID {
				local.R.Mech = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.BattleMechs = append(foreign.R.BattleMechs, local)
				break
			}
		}
	}

	return nil
}

// LoadFaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleMechL) LoadFaction(e boil.Executor, singular bool, maybeBattleMech interface{}, mods queries.Applicator) error {
	var slice []*BattleMech
	var object *BattleMech

	if singular {
		object = maybeBattleMech.(*BattleMech)
	} else {
		slice = *maybeBattleMech.(*[]*BattleMech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleMechR{}
		}
		args = append(args, object.FactionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleMechR{}
			}

			for _, a := range args {
				if a == obj.FactionID {
					continue Outer
				}
			}

			args = append(args, obj.FactionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`factions`),
		qm.WhereIn(`factions.id in ?`, args...),
		qmhelper.WhereIsNull(`factions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Faction")
	}

	var resultSlice []*Faction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Faction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for factions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for factions")
	}

	if len(battleMechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Faction = foreign
		if foreign.R == nil {
			foreign.R = &factionR{}
		}
		foreign.R.BattleMechs = append(foreign.R.BattleMechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FactionID == foreign.ID {
				local.R.Faction = foreign
				if foreign.R == nil {
					foreign.R = &factionR{}
				}
				foreign.R.BattleMechs = append(foreign.R.BattleMechs, local)
				break
			}
		}
	}

	return nil
}

// LoadKilledBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleMechL) LoadKilledBy(e boil.Executor, singular bool, maybeBattleMech interface{}, mods queries.Applicator) error {
	var slice []*BattleMech
	var object *BattleMech

	if singular {
		object = maybeBattleMech.(*BattleMech)
	} else {
		slice = *maybeBattleMech.(*[]*BattleMech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleMechR{}
		}
		if !queries.IsNil(object.KilledByID) {
			args = append(args, object.KilledByID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleMechR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.KilledByID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.KilledByID) {
				args = append(args, obj.KilledByID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(battleMechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.KilledBy = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.KilledByBattleMechs = append(foreign.R.KilledByBattleMechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.KilledByID, foreign.ID) {
				local.R.KilledBy = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.KilledByBattleMechs = append(foreign.R.KilledByBattleMechs, local)
				break
			}
		}
	}

	return nil
}

// LoadPilotedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleMechL) LoadPilotedBy(e boil.Executor, singular bool, maybeBattleMech interface{}, mods queries.Applicator) error {
	var slice []*BattleMech
	var object *BattleMech

	if singular {
		object = maybeBattleMech.(*BattleMech)
	} else {
		slice = *maybeBattleMech.(*[]*BattleMech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleMechR{}
		}
		args = append(args, object.PilotedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleMechR{}
			}

			for _, a := range args {
				if a == obj.PilotedByID {
					continue Outer
				}
			}

			args = append(args, obj.PilotedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(battleMechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PilotedBy = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.PilotedByBattleMechs = append(foreign.R.PilotedByBattleMechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PilotedByID == foreign.ID {
				local.R.PilotedBy = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.PilotedByBattleMechs = append(foreign.R.PilotedByBattleMechs, local)
				break
			}
		}
	}

	return nil
}

// SetBattle of the battleMech to the related item.
// Sets o.R.Battle to related.
// Adds o to related.R.BattleMechs.
func (o *BattleMech) SetBattle(exec boil.Executor, insert bool, related *Battle) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleMechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.BattleID, o.MechID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BattleID = related.ID
	if o.R == nil {
		o.R = &battleMechR{
			Battle: related,
		}
	} else {
		o.R.Battle = related
	}

	if related.R == nil {
		related.R = &battleR{
			BattleMechs: BattleMechSlice{o},
		}
	} else {
		related.R.BattleMechs = append(related.R.BattleMechs, o)
	}

	return nil
}

// SetMech of the battleMech to the related item.
// Sets o.R.Mech to related.
// Adds o to related.R.BattleMechs.
func (o *BattleMech) SetMech(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleMechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.BattleID, o.MechID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MechID = related.ID
	if o.R == nil {
		o.R = &battleMechR{
			Mech: related,
		}
	} else {
		o.R.Mech = related
	}

	if related.R == nil {
		related.R = &mechR{
			BattleMechs: BattleMechSlice{o},
		}
	} else {
		related.R.BattleMechs = append(related.R.BattleMechs, o)
	}

	return nil
}

// SetFaction of the battleMech to the related item.
// Sets o.R.Faction to related.
// Adds o to related.R.BattleMechs.
func (o *BattleMech) SetFaction(exec boil.Executor, insert bool, related *Faction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"faction_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleMechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.BattleID, o.MechID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FactionID = related.ID
	if o.R == nil {
		o.R = &battleMechR{
			Faction: related,
		}
	} else {
		o.R.Faction = related
	}

	if related.R == nil {
		related.R = &factionR{
			BattleMechs: BattleMechSlice{o},
		}
	} else {
		related.R.BattleMechs = append(related.R.BattleMechs, o)
	}

	return nil
}

// SetKilledBy of the battleMech to the related item.
// Sets o.R.KilledBy to related.
// Adds o to related.R.KilledByBattleMechs.
func (o *BattleMech) SetKilledBy(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"killed_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleMechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.BattleID, o.MechID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.KilledByID, related.ID)
	if o.R == nil {
		o.R = &battleMechR{
			KilledBy: related,
		}
	} else {
		o.R.KilledBy = related
	}

	if related.R == nil {
		related.R = &mechR{
			KilledByBattleMechs: BattleMechSlice{o},
		}
	} else {
		related.R.KilledByBattleMechs = append(related.R.KilledByBattleMechs, o)
	}

	return nil
}

// RemoveKilledBy relationship.
// Sets o.R.KilledBy to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BattleMech) RemoveKilledBy(exec boil.Executor, related *Mech) error {
	var err error

	queries.SetScanner(&o.KilledByID, nil)
	if _, err = o.Update(exec, boil.Whitelist("killed_by_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.KilledBy = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.KilledByBattleMechs {
		if queries.Equal(o.KilledByID, ri.KilledByID) {
			continue
		}

		ln := len(related.R.KilledByBattleMechs)
		if ln > 1 && i < ln-1 {
			related.R.KilledByBattleMechs[i] = related.R.KilledByBattleMechs[ln-1]
		}
		related.R.KilledByBattleMechs = related.R.KilledByBattleMechs[:ln-1]
		break
	}
	return nil
}

// SetPilotedBy of the battleMech to the related item.
// Sets o.R.PilotedBy to related.
// Adds o to related.R.PilotedByBattleMechs.
func (o *BattleMech) SetPilotedBy(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"piloted_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleMechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.BattleID, o.MechID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PilotedByID = related.ID
	if o.R == nil {
		o.R = &battleMechR{
			PilotedBy: related,
		}
	} else {
		o.R.PilotedBy = related
	}

	if related.R == nil {
		related.R = &playerR{
			PilotedByBattleMechs: BattleMechSlice{o},
		}
	} else {
		related.R.PilotedByBattleMechs = append(related.R.PilotedByBattleMechs, o)
	}

	return nil
}

// BattleMechs retrieves all the records using an executor.
func BattleMechs(mods ...qm.QueryMod) battleMechQuery {
	mods = append(mods, qm.From("\"battle_mechs\""))
	return battleMechQuery{NewQuery(mods...)}
}

// FindBattleMech retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattleMech(exec boil.Executor, battleID string, mechID string, selectCols ...string) (*BattleMech, error) {
	battleMechObj := &BattleMech{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battle_mechs\" where \"battle_id\"=$1 AND \"mech_id\"=$2", sel,
	)

	q := queries.Raw(query, battleID, mechID)

	err := q.Bind(nil, exec, battleMechObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from battle_mechs")
	}

	if err = battleMechObj.doAfterSelectHooks(exec); err != nil {
		return battleMechObj, err
	}

	return battleMechObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BattleMech) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_mechs provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleMechColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battleMechInsertCacheMut.RLock()
	cache, cached := battleMechInsertCache[key]
	battleMechInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battleMechAllColumns,
			battleMechColumnsWithDefault,
			battleMechColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battleMechType, battleMechMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battleMechType, battleMechMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battle_mechs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battle_mechs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into battle_mechs")
	}

	if !cached {
		battleMechInsertCacheMut.Lock()
		battleMechInsertCache[key] = cache
		battleMechInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BattleMech.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BattleMech) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battleMechUpdateCacheMut.RLock()
	cache, cached := battleMechUpdateCache[key]
	battleMechUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battleMechAllColumns,
			battleMechPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update battle_mechs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battle_mechs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battleMechPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battleMechType, battleMechMapping, append(wl, battleMechPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update battle_mechs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for battle_mechs")
	}

	if !cached {
		battleMechUpdateCacheMut.Lock()
		battleMechUpdateCache[key] = cache
		battleMechUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battleMechQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for battle_mechs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for battle_mechs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattleMechSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleMechPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battle_mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battleMechPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in battleMech slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all battleMech")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BattleMech) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_mechs provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleMechColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battleMechUpsertCacheMut.RLock()
	cache, cached := battleMechUpsertCache[key]
	battleMechUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battleMechAllColumns,
			battleMechColumnsWithDefault,
			battleMechColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			battleMechAllColumns,
			battleMechPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert battle_mechs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battleMechPrimaryKeyColumns))
			copy(conflict, battleMechPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battle_mechs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battleMechType, battleMechMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battleMechType, battleMechMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert battle_mechs")
	}

	if !cached {
		battleMechUpsertCacheMut.Lock()
		battleMechUpsertCache[key] = cache
		battleMechUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BattleMech record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BattleMech) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BattleMech provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battleMechPrimaryKeyMapping)
	sql := "DELETE FROM \"battle_mechs\" WHERE \"battle_id\"=$1 AND \"mech_id\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from battle_mechs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for battle_mechs")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battleMechQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no battleMechQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battle_mechs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_mechs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattleMechSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(battleMechBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleMechPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"battle_mechs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleMechPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battleMech slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_mechs")
	}

	if len(battleMechAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BattleMech) Reload(exec boil.Executor) error {
	ret, err := FindBattleMech(exec, o.BattleID, o.MechID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattleMechSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattleMechSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleMechPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battle_mechs\".* FROM \"battle_mechs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleMechPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BattleMechSlice")
	}

	*o = slice

	return nil
}

// BattleMechExists checks if the BattleMech row exists.
func BattleMechExists(exec boil.Executor, battleID string, mechID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battle_mechs\" where \"battle_id\"=$1 AND \"mech_id\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, battleID, mechID)
	}
	row := exec.QueryRow(sql, battleID, mechID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if battle_mechs exists")
	}

	return exists, nil
}
