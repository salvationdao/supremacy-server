// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ItemSalesBuyoutPriceHistory is an object representing the database table.
type ItemSalesBuyoutPriceHistory struct {
	ID          string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	ItemSaleID  string      `boiler:"item_sale_id" boil:"item_sale_id" json:"item_sale_id" toml:"item_sale_id" yaml:"item_sale_id"`
	BuyoutPrice string      `boiler:"buyout_price" boil:"buyout_price" json:"buyout_price" toml:"buyout_price" yaml:"buyout_price"`
	CreatedBy   null.String `boiler:"created_by" boil:"created_by" json:"created_by,omitempty" toml:"created_by" yaml:"created_by,omitempty"`
	CreatedAt   time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *itemSalesBuyoutPriceHistoryR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L itemSalesBuyoutPriceHistoryL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ItemSalesBuyoutPriceHistoryColumns = struct {
	ID          string
	ItemSaleID  string
	BuyoutPrice string
	CreatedBy   string
	CreatedAt   string
}{
	ID:          "id",
	ItemSaleID:  "item_sale_id",
	BuyoutPrice: "buyout_price",
	CreatedBy:   "created_by",
	CreatedAt:   "created_at",
}

var ItemSalesBuyoutPriceHistoryTableColumns = struct {
	ID          string
	ItemSaleID  string
	BuyoutPrice string
	CreatedBy   string
	CreatedAt   string
}{
	ID:          "item_sales_buyout_price_history.id",
	ItemSaleID:  "item_sales_buyout_price_history.item_sale_id",
	BuyoutPrice: "item_sales_buyout_price_history.buyout_price",
	CreatedBy:   "item_sales_buyout_price_history.created_by",
	CreatedAt:   "item_sales_buyout_price_history.created_at",
}

// Generated where

var ItemSalesBuyoutPriceHistoryWhere = struct {
	ID          whereHelperstring
	ItemSaleID  whereHelperstring
	BuyoutPrice whereHelperstring
	CreatedBy   whereHelpernull_String
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperstring{field: "\"item_sales_buyout_price_history\".\"id\""},
	ItemSaleID:  whereHelperstring{field: "\"item_sales_buyout_price_history\".\"item_sale_id\""},
	BuyoutPrice: whereHelperstring{field: "\"item_sales_buyout_price_history\".\"buyout_price\""},
	CreatedBy:   whereHelpernull_String{field: "\"item_sales_buyout_price_history\".\"created_by\""},
	CreatedAt:   whereHelpertime_Time{field: "\"item_sales_buyout_price_history\".\"created_at\""},
}

// ItemSalesBuyoutPriceHistoryRels is where relationship names are stored.
var ItemSalesBuyoutPriceHistoryRels = struct {
	CreatedByPlayer string
	ItemSale        string
}{
	CreatedByPlayer: "CreatedByPlayer",
	ItemSale:        "ItemSale",
}

// itemSalesBuyoutPriceHistoryR is where relationships are stored.
type itemSalesBuyoutPriceHistoryR struct {
	CreatedByPlayer *Player   `boiler:"CreatedByPlayer" boil:"CreatedByPlayer" json:"CreatedByPlayer" toml:"CreatedByPlayer" yaml:"CreatedByPlayer"`
	ItemSale        *ItemSale `boiler:"ItemSale" boil:"ItemSale" json:"ItemSale" toml:"ItemSale" yaml:"ItemSale"`
}

// NewStruct creates a new relationship struct
func (*itemSalesBuyoutPriceHistoryR) NewStruct() *itemSalesBuyoutPriceHistoryR {
	return &itemSalesBuyoutPriceHistoryR{}
}

// itemSalesBuyoutPriceHistoryL is where Load methods for each relationship are stored.
type itemSalesBuyoutPriceHistoryL struct{}

var (
	itemSalesBuyoutPriceHistoryAllColumns            = []string{"id", "item_sale_id", "buyout_price", "created_by", "created_at"}
	itemSalesBuyoutPriceHistoryColumnsWithoutDefault = []string{"item_sale_id", "buyout_price"}
	itemSalesBuyoutPriceHistoryColumnsWithDefault    = []string{"id", "created_by", "created_at"}
	itemSalesBuyoutPriceHistoryPrimaryKeyColumns     = []string{"id", "item_sale_id"}
	itemSalesBuyoutPriceHistoryGeneratedColumns      = []string{}
)

type (
	// ItemSalesBuyoutPriceHistorySlice is an alias for a slice of pointers to ItemSalesBuyoutPriceHistory.
	// This should almost always be used instead of []ItemSalesBuyoutPriceHistory.
	ItemSalesBuyoutPriceHistorySlice []*ItemSalesBuyoutPriceHistory
	// ItemSalesBuyoutPriceHistoryHook is the signature for custom ItemSalesBuyoutPriceHistory hook methods
	ItemSalesBuyoutPriceHistoryHook func(boil.Executor, *ItemSalesBuyoutPriceHistory) error

	itemSalesBuyoutPriceHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	itemSalesBuyoutPriceHistoryType                 = reflect.TypeOf(&ItemSalesBuyoutPriceHistory{})
	itemSalesBuyoutPriceHistoryMapping              = queries.MakeStructMapping(itemSalesBuyoutPriceHistoryType)
	itemSalesBuyoutPriceHistoryPrimaryKeyMapping, _ = queries.BindMapping(itemSalesBuyoutPriceHistoryType, itemSalesBuyoutPriceHistoryMapping, itemSalesBuyoutPriceHistoryPrimaryKeyColumns)
	itemSalesBuyoutPriceHistoryInsertCacheMut       sync.RWMutex
	itemSalesBuyoutPriceHistoryInsertCache          = make(map[string]insertCache)
	itemSalesBuyoutPriceHistoryUpdateCacheMut       sync.RWMutex
	itemSalesBuyoutPriceHistoryUpdateCache          = make(map[string]updateCache)
	itemSalesBuyoutPriceHistoryUpsertCacheMut       sync.RWMutex
	itemSalesBuyoutPriceHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var itemSalesBuyoutPriceHistoryAfterSelectHooks []ItemSalesBuyoutPriceHistoryHook

var itemSalesBuyoutPriceHistoryBeforeInsertHooks []ItemSalesBuyoutPriceHistoryHook
var itemSalesBuyoutPriceHistoryAfterInsertHooks []ItemSalesBuyoutPriceHistoryHook

var itemSalesBuyoutPriceHistoryBeforeUpdateHooks []ItemSalesBuyoutPriceHistoryHook
var itemSalesBuyoutPriceHistoryAfterUpdateHooks []ItemSalesBuyoutPriceHistoryHook

var itemSalesBuyoutPriceHistoryBeforeDeleteHooks []ItemSalesBuyoutPriceHistoryHook
var itemSalesBuyoutPriceHistoryAfterDeleteHooks []ItemSalesBuyoutPriceHistoryHook

var itemSalesBuyoutPriceHistoryBeforeUpsertHooks []ItemSalesBuyoutPriceHistoryHook
var itemSalesBuyoutPriceHistoryAfterUpsertHooks []ItemSalesBuyoutPriceHistoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ItemSalesBuyoutPriceHistory) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range itemSalesBuyoutPriceHistoryAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ItemSalesBuyoutPriceHistory) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range itemSalesBuyoutPriceHistoryBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ItemSalesBuyoutPriceHistory) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range itemSalesBuyoutPriceHistoryAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ItemSalesBuyoutPriceHistory) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range itemSalesBuyoutPriceHistoryBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ItemSalesBuyoutPriceHistory) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range itemSalesBuyoutPriceHistoryAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ItemSalesBuyoutPriceHistory) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range itemSalesBuyoutPriceHistoryBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ItemSalesBuyoutPriceHistory) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range itemSalesBuyoutPriceHistoryAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ItemSalesBuyoutPriceHistory) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range itemSalesBuyoutPriceHistoryBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ItemSalesBuyoutPriceHistory) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range itemSalesBuyoutPriceHistoryAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddItemSalesBuyoutPriceHistoryHook registers your hook function for all future operations.
func AddItemSalesBuyoutPriceHistoryHook(hookPoint boil.HookPoint, itemSalesBuyoutPriceHistoryHook ItemSalesBuyoutPriceHistoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		itemSalesBuyoutPriceHistoryAfterSelectHooks = append(itemSalesBuyoutPriceHistoryAfterSelectHooks, itemSalesBuyoutPriceHistoryHook)
	case boil.BeforeInsertHook:
		itemSalesBuyoutPriceHistoryBeforeInsertHooks = append(itemSalesBuyoutPriceHistoryBeforeInsertHooks, itemSalesBuyoutPriceHistoryHook)
	case boil.AfterInsertHook:
		itemSalesBuyoutPriceHistoryAfterInsertHooks = append(itemSalesBuyoutPriceHistoryAfterInsertHooks, itemSalesBuyoutPriceHistoryHook)
	case boil.BeforeUpdateHook:
		itemSalesBuyoutPriceHistoryBeforeUpdateHooks = append(itemSalesBuyoutPriceHistoryBeforeUpdateHooks, itemSalesBuyoutPriceHistoryHook)
	case boil.AfterUpdateHook:
		itemSalesBuyoutPriceHistoryAfterUpdateHooks = append(itemSalesBuyoutPriceHistoryAfterUpdateHooks, itemSalesBuyoutPriceHistoryHook)
	case boil.BeforeDeleteHook:
		itemSalesBuyoutPriceHistoryBeforeDeleteHooks = append(itemSalesBuyoutPriceHistoryBeforeDeleteHooks, itemSalesBuyoutPriceHistoryHook)
	case boil.AfterDeleteHook:
		itemSalesBuyoutPriceHistoryAfterDeleteHooks = append(itemSalesBuyoutPriceHistoryAfterDeleteHooks, itemSalesBuyoutPriceHistoryHook)
	case boil.BeforeUpsertHook:
		itemSalesBuyoutPriceHistoryBeforeUpsertHooks = append(itemSalesBuyoutPriceHistoryBeforeUpsertHooks, itemSalesBuyoutPriceHistoryHook)
	case boil.AfterUpsertHook:
		itemSalesBuyoutPriceHistoryAfterUpsertHooks = append(itemSalesBuyoutPriceHistoryAfterUpsertHooks, itemSalesBuyoutPriceHistoryHook)
	}
}

// One returns a single itemSalesBuyoutPriceHistory record from the query.
func (q itemSalesBuyoutPriceHistoryQuery) One(exec boil.Executor) (*ItemSalesBuyoutPriceHistory, error) {
	o := &ItemSalesBuyoutPriceHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for item_sales_buyout_price_history")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ItemSalesBuyoutPriceHistory records from the query.
func (q itemSalesBuyoutPriceHistoryQuery) All(exec boil.Executor) (ItemSalesBuyoutPriceHistorySlice, error) {
	var o []*ItemSalesBuyoutPriceHistory

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to ItemSalesBuyoutPriceHistory slice")
	}

	if len(itemSalesBuyoutPriceHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ItemSalesBuyoutPriceHistory records in the query.
func (q itemSalesBuyoutPriceHistoryQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count item_sales_buyout_price_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q itemSalesBuyoutPriceHistoryQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if item_sales_buyout_price_history exists")
	}

	return count > 0, nil
}

// CreatedByPlayer pointed to by the foreign key.
func (o *ItemSalesBuyoutPriceHistory) CreatedByPlayer(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedBy),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// ItemSale pointed to by the foreign key.
func (o *ItemSalesBuyoutPriceHistory) ItemSale(mods ...qm.QueryMod) itemSaleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ItemSaleID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := ItemSales(queryMods...)
	queries.SetFrom(query.Query, "\"item_sales\"")

	return query
}

// LoadCreatedByPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (itemSalesBuyoutPriceHistoryL) LoadCreatedByPlayer(e boil.Executor, singular bool, maybeItemSalesBuyoutPriceHistory interface{}, mods queries.Applicator) error {
	var slice []*ItemSalesBuyoutPriceHistory
	var object *ItemSalesBuyoutPriceHistory

	if singular {
		object = maybeItemSalesBuyoutPriceHistory.(*ItemSalesBuyoutPriceHistory)
	} else {
		slice = *maybeItemSalesBuyoutPriceHistory.(*[]*ItemSalesBuyoutPriceHistory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &itemSalesBuyoutPriceHistoryR{}
		}
		if !queries.IsNil(object.CreatedBy) {
			args = append(args, object.CreatedBy)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &itemSalesBuyoutPriceHistoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CreatedBy) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CreatedBy) {
				args = append(args, obj.CreatedBy)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(itemSalesBuyoutPriceHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedByPlayer = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.CreatedByItemSalesBuyoutPriceHistories = append(foreign.R.CreatedByItemSalesBuyoutPriceHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CreatedBy, foreign.ID) {
				local.R.CreatedByPlayer = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.CreatedByItemSalesBuyoutPriceHistories = append(foreign.R.CreatedByItemSalesBuyoutPriceHistories, local)
				break
			}
		}
	}

	return nil
}

// LoadItemSale allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (itemSalesBuyoutPriceHistoryL) LoadItemSale(e boil.Executor, singular bool, maybeItemSalesBuyoutPriceHistory interface{}, mods queries.Applicator) error {
	var slice []*ItemSalesBuyoutPriceHistory
	var object *ItemSalesBuyoutPriceHistory

	if singular {
		object = maybeItemSalesBuyoutPriceHistory.(*ItemSalesBuyoutPriceHistory)
	} else {
		slice = *maybeItemSalesBuyoutPriceHistory.(*[]*ItemSalesBuyoutPriceHistory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &itemSalesBuyoutPriceHistoryR{}
		}
		args = append(args, object.ItemSaleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &itemSalesBuyoutPriceHistoryR{}
			}

			for _, a := range args {
				if a == obj.ItemSaleID {
					continue Outer
				}
			}

			args = append(args, obj.ItemSaleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`item_sales`),
		qm.WhereIn(`item_sales.id in ?`, args...),
		qmhelper.WhereIsNull(`item_sales.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ItemSale")
	}

	var resultSlice []*ItemSale
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ItemSale")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for item_sales")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for item_sales")
	}

	if len(itemSalesBuyoutPriceHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ItemSale = foreign
		if foreign.R == nil {
			foreign.R = &itemSaleR{}
		}
		foreign.R.ItemSalesBuyoutPriceHistories = append(foreign.R.ItemSalesBuyoutPriceHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ItemSaleID == foreign.ID {
				local.R.ItemSale = foreign
				if foreign.R == nil {
					foreign.R = &itemSaleR{}
				}
				foreign.R.ItemSalesBuyoutPriceHistories = append(foreign.R.ItemSalesBuyoutPriceHistories, local)
				break
			}
		}
	}

	return nil
}

// SetCreatedByPlayer of the itemSalesBuyoutPriceHistory to the related item.
// Sets o.R.CreatedByPlayer to related.
// Adds o to related.R.CreatedByItemSalesBuyoutPriceHistories.
func (o *ItemSalesBuyoutPriceHistory) SetCreatedByPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"item_sales_buyout_price_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by"}),
		strmangle.WhereClause("\"", "\"", 2, itemSalesBuyoutPriceHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID, o.ItemSaleID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CreatedBy, related.ID)
	if o.R == nil {
		o.R = &itemSalesBuyoutPriceHistoryR{
			CreatedByPlayer: related,
		}
	} else {
		o.R.CreatedByPlayer = related
	}

	if related.R == nil {
		related.R = &playerR{
			CreatedByItemSalesBuyoutPriceHistories: ItemSalesBuyoutPriceHistorySlice{o},
		}
	} else {
		related.R.CreatedByItemSalesBuyoutPriceHistories = append(related.R.CreatedByItemSalesBuyoutPriceHistories, o)
	}

	return nil
}

// RemoveCreatedByPlayer relationship.
// Sets o.R.CreatedByPlayer to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *ItemSalesBuyoutPriceHistory) RemoveCreatedByPlayer(exec boil.Executor, related *Player) error {
	var err error

	queries.SetScanner(&o.CreatedBy, nil)
	if _, err = o.Update(exec, boil.Whitelist("created_by")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CreatedByPlayer = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CreatedByItemSalesBuyoutPriceHistories {
		if queries.Equal(o.CreatedBy, ri.CreatedBy) {
			continue
		}

		ln := len(related.R.CreatedByItemSalesBuyoutPriceHistories)
		if ln > 1 && i < ln-1 {
			related.R.CreatedByItemSalesBuyoutPriceHistories[i] = related.R.CreatedByItemSalesBuyoutPriceHistories[ln-1]
		}
		related.R.CreatedByItemSalesBuyoutPriceHistories = related.R.CreatedByItemSalesBuyoutPriceHistories[:ln-1]
		break
	}
	return nil
}

// SetItemSale of the itemSalesBuyoutPriceHistory to the related item.
// Sets o.R.ItemSale to related.
// Adds o to related.R.ItemSalesBuyoutPriceHistories.
func (o *ItemSalesBuyoutPriceHistory) SetItemSale(exec boil.Executor, insert bool, related *ItemSale) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"item_sales_buyout_price_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"item_sale_id"}),
		strmangle.WhereClause("\"", "\"", 2, itemSalesBuyoutPriceHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID, o.ItemSaleID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ItemSaleID = related.ID
	if o.R == nil {
		o.R = &itemSalesBuyoutPriceHistoryR{
			ItemSale: related,
		}
	} else {
		o.R.ItemSale = related
	}

	if related.R == nil {
		related.R = &itemSaleR{
			ItemSalesBuyoutPriceHistories: ItemSalesBuyoutPriceHistorySlice{o},
		}
	} else {
		related.R.ItemSalesBuyoutPriceHistories = append(related.R.ItemSalesBuyoutPriceHistories, o)
	}

	return nil
}

// ItemSalesBuyoutPriceHistories retrieves all the records using an executor.
func ItemSalesBuyoutPriceHistories(mods ...qm.QueryMod) itemSalesBuyoutPriceHistoryQuery {
	mods = append(mods, qm.From("\"item_sales_buyout_price_history\""))
	return itemSalesBuyoutPriceHistoryQuery{NewQuery(mods...)}
}

// FindItemSalesBuyoutPriceHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindItemSalesBuyoutPriceHistory(exec boil.Executor, iD string, itemSaleID string, selectCols ...string) (*ItemSalesBuyoutPriceHistory, error) {
	itemSalesBuyoutPriceHistoryObj := &ItemSalesBuyoutPriceHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"item_sales_buyout_price_history\" where \"id\"=$1 AND \"item_sale_id\"=$2", sel,
	)

	q := queries.Raw(query, iD, itemSaleID)

	err := q.Bind(nil, exec, itemSalesBuyoutPriceHistoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from item_sales_buyout_price_history")
	}

	if err = itemSalesBuyoutPriceHistoryObj.doAfterSelectHooks(exec); err != nil {
		return itemSalesBuyoutPriceHistoryObj, err
	}

	return itemSalesBuyoutPriceHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ItemSalesBuyoutPriceHistory) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no item_sales_buyout_price_history provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(itemSalesBuyoutPriceHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	itemSalesBuyoutPriceHistoryInsertCacheMut.RLock()
	cache, cached := itemSalesBuyoutPriceHistoryInsertCache[key]
	itemSalesBuyoutPriceHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			itemSalesBuyoutPriceHistoryAllColumns,
			itemSalesBuyoutPriceHistoryColumnsWithDefault,
			itemSalesBuyoutPriceHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(itemSalesBuyoutPriceHistoryType, itemSalesBuyoutPriceHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(itemSalesBuyoutPriceHistoryType, itemSalesBuyoutPriceHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"item_sales_buyout_price_history\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"item_sales_buyout_price_history\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into item_sales_buyout_price_history")
	}

	if !cached {
		itemSalesBuyoutPriceHistoryInsertCacheMut.Lock()
		itemSalesBuyoutPriceHistoryInsertCache[key] = cache
		itemSalesBuyoutPriceHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the ItemSalesBuyoutPriceHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ItemSalesBuyoutPriceHistory) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	itemSalesBuyoutPriceHistoryUpdateCacheMut.RLock()
	cache, cached := itemSalesBuyoutPriceHistoryUpdateCache[key]
	itemSalesBuyoutPriceHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			itemSalesBuyoutPriceHistoryAllColumns,
			itemSalesBuyoutPriceHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update item_sales_buyout_price_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"item_sales_buyout_price_history\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, itemSalesBuyoutPriceHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(itemSalesBuyoutPriceHistoryType, itemSalesBuyoutPriceHistoryMapping, append(wl, itemSalesBuyoutPriceHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update item_sales_buyout_price_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for item_sales_buyout_price_history")
	}

	if !cached {
		itemSalesBuyoutPriceHistoryUpdateCacheMut.Lock()
		itemSalesBuyoutPriceHistoryUpdateCache[key] = cache
		itemSalesBuyoutPriceHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q itemSalesBuyoutPriceHistoryQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for item_sales_buyout_price_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for item_sales_buyout_price_history")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ItemSalesBuyoutPriceHistorySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), itemSalesBuyoutPriceHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"item_sales_buyout_price_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, itemSalesBuyoutPriceHistoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in itemSalesBuyoutPriceHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all itemSalesBuyoutPriceHistory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ItemSalesBuyoutPriceHistory) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no item_sales_buyout_price_history provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(itemSalesBuyoutPriceHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	itemSalesBuyoutPriceHistoryUpsertCacheMut.RLock()
	cache, cached := itemSalesBuyoutPriceHistoryUpsertCache[key]
	itemSalesBuyoutPriceHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			itemSalesBuyoutPriceHistoryAllColumns,
			itemSalesBuyoutPriceHistoryColumnsWithDefault,
			itemSalesBuyoutPriceHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			itemSalesBuyoutPriceHistoryAllColumns,
			itemSalesBuyoutPriceHistoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert item_sales_buyout_price_history, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(itemSalesBuyoutPriceHistoryPrimaryKeyColumns))
			copy(conflict, itemSalesBuyoutPriceHistoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"item_sales_buyout_price_history\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(itemSalesBuyoutPriceHistoryType, itemSalesBuyoutPriceHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(itemSalesBuyoutPriceHistoryType, itemSalesBuyoutPriceHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert item_sales_buyout_price_history")
	}

	if !cached {
		itemSalesBuyoutPriceHistoryUpsertCacheMut.Lock()
		itemSalesBuyoutPriceHistoryUpsertCache[key] = cache
		itemSalesBuyoutPriceHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single ItemSalesBuyoutPriceHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ItemSalesBuyoutPriceHistory) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no ItemSalesBuyoutPriceHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), itemSalesBuyoutPriceHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"item_sales_buyout_price_history\" WHERE \"id\"=$1 AND \"item_sale_id\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from item_sales_buyout_price_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for item_sales_buyout_price_history")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q itemSalesBuyoutPriceHistoryQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no itemSalesBuyoutPriceHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from item_sales_buyout_price_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for item_sales_buyout_price_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ItemSalesBuyoutPriceHistorySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(itemSalesBuyoutPriceHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), itemSalesBuyoutPriceHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"item_sales_buyout_price_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, itemSalesBuyoutPriceHistoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from itemSalesBuyoutPriceHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for item_sales_buyout_price_history")
	}

	if len(itemSalesBuyoutPriceHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ItemSalesBuyoutPriceHistory) Reload(exec boil.Executor) error {
	ret, err := FindItemSalesBuyoutPriceHistory(exec, o.ID, o.ItemSaleID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ItemSalesBuyoutPriceHistorySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ItemSalesBuyoutPriceHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), itemSalesBuyoutPriceHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"item_sales_buyout_price_history\".* FROM \"item_sales_buyout_price_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, itemSalesBuyoutPriceHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in ItemSalesBuyoutPriceHistorySlice")
	}

	*o = slice

	return nil
}

// ItemSalesBuyoutPriceHistoryExists checks if the ItemSalesBuyoutPriceHistory row exists.
func ItemSalesBuyoutPriceHistoryExists(exec boil.Executor, iD string, itemSaleID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"item_sales_buyout_price_history\" where \"id\"=$1 AND \"item_sale_id\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD, itemSaleID)
	}
	row := exec.QueryRow(sql, iD, itemSaleID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if item_sales_buyout_price_history exists")
	}

	return exists, nil
}
