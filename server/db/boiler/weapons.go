// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Weapon is an object representing the database table.
type Weapon struct {
	ID                    string              `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Slug                  string              `boiler:"slug" boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	Damage                int                 `boiler:"damage" boil:"damage" json:"damage" toml:"damage" yaml:"damage"`
	DeletedAt             null.Time           `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt             time.Time           `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt             time.Time           `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	BlueprintID           string              `boiler:"blueprint_id" boil:"blueprint_id" json:"blueprint_id" toml:"blueprint_id" yaml:"blueprint_id"`
	EquippedOn            null.String         `boiler:"equipped_on" boil:"equipped_on" json:"equipped_on,omitempty" toml:"equipped_on" yaml:"equipped_on,omitempty"`
	DefaultDamageType     string              `boiler:"default_damage_type" boil:"default_damage_type" json:"default_damage_type" toml:"default_damage_type" yaml:"default_damage_type"`
	GenesisTokenID        null.Int64          `boiler:"genesis_token_id" boil:"genesis_token_id" json:"genesis_token_id,omitempty" toml:"genesis_token_id" yaml:"genesis_token_id,omitempty"`
	LimitedReleaseTokenID null.Int64          `boiler:"limited_release_token_id" boil:"limited_release_token_id" json:"limited_release_token_id,omitempty" toml:"limited_release_token_id" yaml:"limited_release_token_id,omitempty"`
	DamageFalloff         null.Int            `boiler:"damage_falloff" boil:"damage_falloff" json:"damage_falloff,omitempty" toml:"damage_falloff" yaml:"damage_falloff,omitempty"`
	DamageFalloffRate     null.Int            `boiler:"damage_falloff_rate" boil:"damage_falloff_rate" json:"damage_falloff_rate,omitempty" toml:"damage_falloff_rate" yaml:"damage_falloff_rate,omitempty"`
	Radius                null.Int            `boiler:"radius" boil:"radius" json:"radius,omitempty" toml:"radius" yaml:"radius,omitempty"`
	RadiusDamageFalloff   null.Int            `boiler:"radius_damage_falloff" boil:"radius_damage_falloff" json:"radius_damage_falloff,omitempty" toml:"radius_damage_falloff" yaml:"radius_damage_falloff,omitempty"`
	Spread                decimal.NullDecimal `boiler:"spread" boil:"spread" json:"spread,omitempty" toml:"spread" yaml:"spread,omitempty"`
	RateOfFire            decimal.NullDecimal `boiler:"rate_of_fire" boil:"rate_of_fire" json:"rate_of_fire,omitempty" toml:"rate_of_fire" yaml:"rate_of_fire,omitempty"`
	ProjectileSpeed       decimal.NullDecimal `boiler:"projectile_speed" boil:"projectile_speed" json:"projectile_speed,omitempty" toml:"projectile_speed" yaml:"projectile_speed,omitempty"`
	EnergyCost            decimal.NullDecimal `boiler:"energy_cost" boil:"energy_cost" json:"energy_cost,omitempty" toml:"energy_cost" yaml:"energy_cost,omitempty"`
	IsMelee               bool                `boiler:"is_melee" boil:"is_melee" json:"is_melee" toml:"is_melee" yaml:"is_melee"`
	MaxAmmo               null.Int            `boiler:"max_ammo" boil:"max_ammo" json:"max_ammo,omitempty" toml:"max_ammo" yaml:"max_ammo,omitempty"`
	LockedToMech          bool                `boiler:"locked_to_mech" boil:"locked_to_mech" json:"locked_to_mech" toml:"locked_to_mech" yaml:"locked_to_mech"`
	EquippedWeaponSkinID  string              `boiler:"equipped_weapon_skin_id" boil:"equipped_weapon_skin_id" json:"equipped_weapon_skin_id" toml:"equipped_weapon_skin_id" yaml:"equipped_weapon_skin_id"`

	R *weaponR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L weaponL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WeaponColumns = struct {
	ID                    string
	Slug                  string
	Damage                string
	DeletedAt             string
	UpdatedAt             string
	CreatedAt             string
	BlueprintID           string
	EquippedOn            string
	DefaultDamageType     string
	GenesisTokenID        string
	LimitedReleaseTokenID string
	DamageFalloff         string
	DamageFalloffRate     string
	Radius                string
	RadiusDamageFalloff   string
	Spread                string
	RateOfFire            string
	ProjectileSpeed       string
	EnergyCost            string
	IsMelee               string
	MaxAmmo               string
	LockedToMech          string
	EquippedWeaponSkinID  string
}{
	ID:                    "id",
	Slug:                  "slug",
	Damage:                "damage",
	DeletedAt:             "deleted_at",
	UpdatedAt:             "updated_at",
	CreatedAt:             "created_at",
	BlueprintID:           "blueprint_id",
	EquippedOn:            "equipped_on",
	DefaultDamageType:     "default_damage_type",
	GenesisTokenID:        "genesis_token_id",
	LimitedReleaseTokenID: "limited_release_token_id",
	DamageFalloff:         "damage_falloff",
	DamageFalloffRate:     "damage_falloff_rate",
	Radius:                "radius",
	RadiusDamageFalloff:   "radius_damage_falloff",
	Spread:                "spread",
	RateOfFire:            "rate_of_fire",
	ProjectileSpeed:       "projectile_speed",
	EnergyCost:            "energy_cost",
	IsMelee:               "is_melee",
	MaxAmmo:               "max_ammo",
	LockedToMech:          "locked_to_mech",
	EquippedWeaponSkinID:  "equipped_weapon_skin_id",
}

var WeaponTableColumns = struct {
	ID                    string
	Slug                  string
	Damage                string
	DeletedAt             string
	UpdatedAt             string
	CreatedAt             string
	BlueprintID           string
	EquippedOn            string
	DefaultDamageType     string
	GenesisTokenID        string
	LimitedReleaseTokenID string
	DamageFalloff         string
	DamageFalloffRate     string
	Radius                string
	RadiusDamageFalloff   string
	Spread                string
	RateOfFire            string
	ProjectileSpeed       string
	EnergyCost            string
	IsMelee               string
	MaxAmmo               string
	LockedToMech          string
	EquippedWeaponSkinID  string
}{
	ID:                    "weapons.id",
	Slug:                  "weapons.slug",
	Damage:                "weapons.damage",
	DeletedAt:             "weapons.deleted_at",
	UpdatedAt:             "weapons.updated_at",
	CreatedAt:             "weapons.created_at",
	BlueprintID:           "weapons.blueprint_id",
	EquippedOn:            "weapons.equipped_on",
	DefaultDamageType:     "weapons.default_damage_type",
	GenesisTokenID:        "weapons.genesis_token_id",
	LimitedReleaseTokenID: "weapons.limited_release_token_id",
	DamageFalloff:         "weapons.damage_falloff",
	DamageFalloffRate:     "weapons.damage_falloff_rate",
	Radius:                "weapons.radius",
	RadiusDamageFalloff:   "weapons.radius_damage_falloff",
	Spread:                "weapons.spread",
	RateOfFire:            "weapons.rate_of_fire",
	ProjectileSpeed:       "weapons.projectile_speed",
	EnergyCost:            "weapons.energy_cost",
	IsMelee:               "weapons.is_melee",
	MaxAmmo:               "weapons.max_ammo",
	LockedToMech:          "weapons.locked_to_mech",
	EquippedWeaponSkinID:  "weapons.equipped_weapon_skin_id",
}

// Generated where

var WeaponWhere = struct {
	ID                    whereHelperstring
	Slug                  whereHelperstring
	Damage                whereHelperint
	DeletedAt             whereHelpernull_Time
	UpdatedAt             whereHelpertime_Time
	CreatedAt             whereHelpertime_Time
	BlueprintID           whereHelperstring
	EquippedOn            whereHelpernull_String
	DefaultDamageType     whereHelperstring
	GenesisTokenID        whereHelpernull_Int64
	LimitedReleaseTokenID whereHelpernull_Int64
	DamageFalloff         whereHelpernull_Int
	DamageFalloffRate     whereHelpernull_Int
	Radius                whereHelpernull_Int
	RadiusDamageFalloff   whereHelpernull_Int
	Spread                whereHelperdecimal_NullDecimal
	RateOfFire            whereHelperdecimal_NullDecimal
	ProjectileSpeed       whereHelperdecimal_NullDecimal
	EnergyCost            whereHelperdecimal_NullDecimal
	IsMelee               whereHelperbool
	MaxAmmo               whereHelpernull_Int
	LockedToMech          whereHelperbool
	EquippedWeaponSkinID  whereHelperstring
}{
	ID:                    whereHelperstring{field: "\"weapons\".\"id\""},
	Slug:                  whereHelperstring{field: "\"weapons\".\"slug\""},
	Damage:                whereHelperint{field: "\"weapons\".\"damage\""},
	DeletedAt:             whereHelpernull_Time{field: "\"weapons\".\"deleted_at\""},
	UpdatedAt:             whereHelpertime_Time{field: "\"weapons\".\"updated_at\""},
	CreatedAt:             whereHelpertime_Time{field: "\"weapons\".\"created_at\""},
	BlueprintID:           whereHelperstring{field: "\"weapons\".\"blueprint_id\""},
	EquippedOn:            whereHelpernull_String{field: "\"weapons\".\"equipped_on\""},
	DefaultDamageType:     whereHelperstring{field: "\"weapons\".\"default_damage_type\""},
	GenesisTokenID:        whereHelpernull_Int64{field: "\"weapons\".\"genesis_token_id\""},
	LimitedReleaseTokenID: whereHelpernull_Int64{field: "\"weapons\".\"limited_release_token_id\""},
	DamageFalloff:         whereHelpernull_Int{field: "\"weapons\".\"damage_falloff\""},
	DamageFalloffRate:     whereHelpernull_Int{field: "\"weapons\".\"damage_falloff_rate\""},
	Radius:                whereHelpernull_Int{field: "\"weapons\".\"radius\""},
	RadiusDamageFalloff:   whereHelpernull_Int{field: "\"weapons\".\"radius_damage_falloff\""},
	Spread:                whereHelperdecimal_NullDecimal{field: "\"weapons\".\"spread\""},
	RateOfFire:            whereHelperdecimal_NullDecimal{field: "\"weapons\".\"rate_of_fire\""},
	ProjectileSpeed:       whereHelperdecimal_NullDecimal{field: "\"weapons\".\"projectile_speed\""},
	EnergyCost:            whereHelperdecimal_NullDecimal{field: "\"weapons\".\"energy_cost\""},
	IsMelee:               whereHelperbool{field: "\"weapons\".\"is_melee\""},
	MaxAmmo:               whereHelpernull_Int{field: "\"weapons\".\"max_ammo\""},
	LockedToMech:          whereHelperbool{field: "\"weapons\".\"locked_to_mech\""},
	EquippedWeaponSkinID:  whereHelperstring{field: "\"weapons\".\"equipped_weapon_skin_id\""},
}

// WeaponRels is where relationship names are stored.
var WeaponRels = struct {
	Blueprint             string
	EquippedOnMech        string
	EquippedWeaponSkin    string
	MechWeapon            string
	WeaponAmmos           string
	EquippedOnWeaponSkins string
}{
	Blueprint:             "Blueprint",
	EquippedOnMech:        "EquippedOnMech",
	EquippedWeaponSkin:    "EquippedWeaponSkin",
	MechWeapon:            "MechWeapon",
	WeaponAmmos:           "WeaponAmmos",
	EquippedOnWeaponSkins: "EquippedOnWeaponSkins",
}

// weaponR is where relationships are stored.
type weaponR struct {
	Blueprint             *BlueprintWeapon `boiler:"Blueprint" boil:"Blueprint" json:"Blueprint" toml:"Blueprint" yaml:"Blueprint"`
	EquippedOnMech        *Mech            `boiler:"EquippedOnMech" boil:"EquippedOnMech" json:"EquippedOnMech" toml:"EquippedOnMech" yaml:"EquippedOnMech"`
	EquippedWeaponSkin    *WeaponSkin      `boiler:"EquippedWeaponSkin" boil:"EquippedWeaponSkin" json:"EquippedWeaponSkin" toml:"EquippedWeaponSkin" yaml:"EquippedWeaponSkin"`
	MechWeapon            *MechWeapon      `boiler:"MechWeapon" boil:"MechWeapon" json:"MechWeapon" toml:"MechWeapon" yaml:"MechWeapon"`
	WeaponAmmos           WeaponAmmoSlice  `boiler:"WeaponAmmos" boil:"WeaponAmmos" json:"WeaponAmmos" toml:"WeaponAmmos" yaml:"WeaponAmmos"`
	EquippedOnWeaponSkins WeaponSkinSlice  `boiler:"EquippedOnWeaponSkins" boil:"EquippedOnWeaponSkins" json:"EquippedOnWeaponSkins" toml:"EquippedOnWeaponSkins" yaml:"EquippedOnWeaponSkins"`
}

// NewStruct creates a new relationship struct
func (*weaponR) NewStruct() *weaponR {
	return &weaponR{}
}

// weaponL is where Load methods for each relationship are stored.
type weaponL struct{}

var (
	weaponAllColumns            = []string{"id", "slug", "damage", "deleted_at", "updated_at", "created_at", "blueprint_id", "equipped_on", "default_damage_type", "genesis_token_id", "limited_release_token_id", "damage_falloff", "damage_falloff_rate", "radius", "radius_damage_falloff", "spread", "rate_of_fire", "projectile_speed", "energy_cost", "is_melee", "max_ammo", "locked_to_mech", "equipped_weapon_skin_id"}
	weaponColumnsWithoutDefault = []string{"slug", "damage", "blueprint_id", "equipped_weapon_skin_id"}
	weaponColumnsWithDefault    = []string{"id", "deleted_at", "updated_at", "created_at", "equipped_on", "default_damage_type", "genesis_token_id", "limited_release_token_id", "damage_falloff", "damage_falloff_rate", "radius", "radius_damage_falloff", "spread", "rate_of_fire", "projectile_speed", "energy_cost", "is_melee", "max_ammo", "locked_to_mech"}
	weaponPrimaryKeyColumns     = []string{"id"}
	weaponGeneratedColumns      = []string{}
)

type (
	// WeaponSlice is an alias for a slice of pointers to Weapon.
	// This should almost always be used instead of []Weapon.
	WeaponSlice []*Weapon
	// WeaponHook is the signature for custom Weapon hook methods
	WeaponHook func(boil.Executor, *Weapon) error

	weaponQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	weaponType                 = reflect.TypeOf(&Weapon{})
	weaponMapping              = queries.MakeStructMapping(weaponType)
	weaponPrimaryKeyMapping, _ = queries.BindMapping(weaponType, weaponMapping, weaponPrimaryKeyColumns)
	weaponInsertCacheMut       sync.RWMutex
	weaponInsertCache          = make(map[string]insertCache)
	weaponUpdateCacheMut       sync.RWMutex
	weaponUpdateCache          = make(map[string]updateCache)
	weaponUpsertCacheMut       sync.RWMutex
	weaponUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var weaponAfterSelectHooks []WeaponHook

var weaponBeforeInsertHooks []WeaponHook
var weaponAfterInsertHooks []WeaponHook

var weaponBeforeUpdateHooks []WeaponHook
var weaponAfterUpdateHooks []WeaponHook

var weaponBeforeDeleteHooks []WeaponHook
var weaponAfterDeleteHooks []WeaponHook

var weaponBeforeUpsertHooks []WeaponHook
var weaponAfterUpsertHooks []WeaponHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Weapon) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Weapon) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Weapon) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Weapon) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Weapon) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Weapon) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Weapon) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Weapon) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Weapon) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWeaponHook registers your hook function for all future operations.
func AddWeaponHook(hookPoint boil.HookPoint, weaponHook WeaponHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		weaponAfterSelectHooks = append(weaponAfterSelectHooks, weaponHook)
	case boil.BeforeInsertHook:
		weaponBeforeInsertHooks = append(weaponBeforeInsertHooks, weaponHook)
	case boil.AfterInsertHook:
		weaponAfterInsertHooks = append(weaponAfterInsertHooks, weaponHook)
	case boil.BeforeUpdateHook:
		weaponBeforeUpdateHooks = append(weaponBeforeUpdateHooks, weaponHook)
	case boil.AfterUpdateHook:
		weaponAfterUpdateHooks = append(weaponAfterUpdateHooks, weaponHook)
	case boil.BeforeDeleteHook:
		weaponBeforeDeleteHooks = append(weaponBeforeDeleteHooks, weaponHook)
	case boil.AfterDeleteHook:
		weaponAfterDeleteHooks = append(weaponAfterDeleteHooks, weaponHook)
	case boil.BeforeUpsertHook:
		weaponBeforeUpsertHooks = append(weaponBeforeUpsertHooks, weaponHook)
	case boil.AfterUpsertHook:
		weaponAfterUpsertHooks = append(weaponAfterUpsertHooks, weaponHook)
	}
}

// One returns a single weapon record from the query.
func (q weaponQuery) One(exec boil.Executor) (*Weapon, error) {
	o := &Weapon{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for weapons")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Weapon records from the query.
func (q weaponQuery) All(exec boil.Executor) (WeaponSlice, error) {
	var o []*Weapon

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Weapon slice")
	}

	if len(weaponAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Weapon records in the query.
func (q weaponQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count weapons rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q weaponQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if weapons exists")
	}

	return count > 0, nil
}

// Blueprint pointed to by the foreign key.
func (o *Weapon) Blueprint(mods ...qm.QueryMod) blueprintWeaponQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BlueprintID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintWeapons(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_weapons\"")

	return query
}

// EquippedOnMech pointed to by the foreign key.
func (o *Weapon) EquippedOnMech(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EquippedOn),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// EquippedWeaponSkin pointed to by the foreign key.
func (o *Weapon) EquippedWeaponSkin(mods ...qm.QueryMod) weaponSkinQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EquippedWeaponSkinID),
	}

	queryMods = append(queryMods, mods...)

	query := WeaponSkins(queryMods...)
	queries.SetFrom(query.Query, "\"weapon_skin\"")

	return query
}

// MechWeapon pointed to by the foreign key.
func (o *Weapon) MechWeapon(mods ...qm.QueryMod) mechWeaponQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"weapon_id\" = ?", o.ID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := MechWeapons(queryMods...)
	queries.SetFrom(query.Query, "\"mech_weapons\"")

	return query
}

// WeaponAmmos retrieves all the weapon_ammo's WeaponAmmos with an executor.
func (o *Weapon) WeaponAmmos(mods ...qm.QueryMod) weaponAmmoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"weapon_ammo\".\"weapon_id\"=?", o.ID),
	)

	query := WeaponAmmos(queryMods...)
	queries.SetFrom(query.Query, "\"weapon_ammo\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"weapon_ammo\".*"})
	}

	return query
}

// EquippedOnWeaponSkins retrieves all the weapon_skin's WeaponSkins with an executor via equipped_on column.
func (o *Weapon) EquippedOnWeaponSkins(mods ...qm.QueryMod) weaponSkinQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"weapon_skin\".\"equipped_on\"=?", o.ID),
	)

	query := WeaponSkins(queryMods...)
	queries.SetFrom(query.Query, "\"weapon_skin\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"weapon_skin\".*"})
	}

	return query
}

// LoadBlueprint allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (weaponL) LoadBlueprint(e boil.Executor, singular bool, maybeWeapon interface{}, mods queries.Applicator) error {
	var slice []*Weapon
	var object *Weapon

	if singular {
		object = maybeWeapon.(*Weapon)
	} else {
		slice = *maybeWeapon.(*[]*Weapon)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &weaponR{}
		}
		args = append(args, object.BlueprintID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &weaponR{}
			}

			for _, a := range args {
				if a == obj.BlueprintID {
					continue Outer
				}
			}

			args = append(args, obj.BlueprintID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_weapons`),
		qm.WhereIn(`blueprint_weapons.id in ?`, args...),
		qmhelper.WhereIsNull(`blueprint_weapons.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintWeapon")
	}

	var resultSlice []*BlueprintWeapon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintWeapon")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_weapons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_weapons")
	}

	if len(weaponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Blueprint = foreign
		if foreign.R == nil {
			foreign.R = &blueprintWeaponR{}
		}
		foreign.R.BlueprintWeapons = append(foreign.R.BlueprintWeapons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlueprintID == foreign.ID {
				local.R.Blueprint = foreign
				if foreign.R == nil {
					foreign.R = &blueprintWeaponR{}
				}
				foreign.R.BlueprintWeapons = append(foreign.R.BlueprintWeapons, local)
				break
			}
		}
	}

	return nil
}

// LoadEquippedOnMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (weaponL) LoadEquippedOnMech(e boil.Executor, singular bool, maybeWeapon interface{}, mods queries.Applicator) error {
	var slice []*Weapon
	var object *Weapon

	if singular {
		object = maybeWeapon.(*Weapon)
	} else {
		slice = *maybeWeapon.(*[]*Weapon)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &weaponR{}
		}
		if !queries.IsNil(object.EquippedOn) {
			args = append(args, object.EquippedOn)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &weaponR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.EquippedOn) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.EquippedOn) {
				args = append(args, obj.EquippedOn)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(weaponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EquippedOnMech = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.EquippedOnWeapons = append(foreign.R.EquippedOnWeapons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.EquippedOn, foreign.ID) {
				local.R.EquippedOnMech = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.EquippedOnWeapons = append(foreign.R.EquippedOnWeapons, local)
				break
			}
		}
	}

	return nil
}

// LoadEquippedWeaponSkin allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (weaponL) LoadEquippedWeaponSkin(e boil.Executor, singular bool, maybeWeapon interface{}, mods queries.Applicator) error {
	var slice []*Weapon
	var object *Weapon

	if singular {
		object = maybeWeapon.(*Weapon)
	} else {
		slice = *maybeWeapon.(*[]*Weapon)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &weaponR{}
		}
		args = append(args, object.EquippedWeaponSkinID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &weaponR{}
			}

			for _, a := range args {
				if a == obj.EquippedWeaponSkinID {
					continue Outer
				}
			}

			args = append(args, obj.EquippedWeaponSkinID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`weapon_skin`),
		qm.WhereIn(`weapon_skin.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load WeaponSkin")
	}

	var resultSlice []*WeaponSkin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice WeaponSkin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for weapon_skin")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for weapon_skin")
	}

	if len(weaponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EquippedWeaponSkin = foreign
		if foreign.R == nil {
			foreign.R = &weaponSkinR{}
		}
		foreign.R.EquippedWeaponSkinWeapons = append(foreign.R.EquippedWeaponSkinWeapons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EquippedWeaponSkinID == foreign.ID {
				local.R.EquippedWeaponSkin = foreign
				if foreign.R == nil {
					foreign.R = &weaponSkinR{}
				}
				foreign.R.EquippedWeaponSkinWeapons = append(foreign.R.EquippedWeaponSkinWeapons, local)
				break
			}
		}
	}

	return nil
}

// LoadMechWeapon allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (weaponL) LoadMechWeapon(e boil.Executor, singular bool, maybeWeapon interface{}, mods queries.Applicator) error {
	var slice []*Weapon
	var object *Weapon

	if singular {
		object = maybeWeapon.(*Weapon)
	} else {
		slice = *maybeWeapon.(*[]*Weapon)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &weaponR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &weaponR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_weapons`),
		qm.WhereIn(`mech_weapons.weapon_id in ?`, args...),
		qmhelper.WhereIsNull(`mech_weapons.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MechWeapon")
	}

	var resultSlice []*MechWeapon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MechWeapon")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mech_weapons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_weapons")
	}

	if len(weaponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MechWeapon = foreign
		if foreign.R == nil {
			foreign.R = &mechWeaponR{}
		}
		foreign.R.Weapon = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.WeaponID {
				local.R.MechWeapon = foreign
				if foreign.R == nil {
					foreign.R = &mechWeaponR{}
				}
				foreign.R.Weapon = local
				break
			}
		}
	}

	return nil
}

// LoadWeaponAmmos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (weaponL) LoadWeaponAmmos(e boil.Executor, singular bool, maybeWeapon interface{}, mods queries.Applicator) error {
	var slice []*Weapon
	var object *Weapon

	if singular {
		object = maybeWeapon.(*Weapon)
	} else {
		slice = *maybeWeapon.(*[]*Weapon)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &weaponR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &weaponR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`weapon_ammo`),
		qm.WhereIn(`weapon_ammo.weapon_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load weapon_ammo")
	}

	var resultSlice []*WeaponAmmo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice weapon_ammo")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on weapon_ammo")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for weapon_ammo")
	}

	if len(weaponAmmoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WeaponAmmos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &weaponAmmoR{}
			}
			foreign.R.Weapon = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.WeaponID {
				local.R.WeaponAmmos = append(local.R.WeaponAmmos, foreign)
				if foreign.R == nil {
					foreign.R = &weaponAmmoR{}
				}
				foreign.R.Weapon = local
				break
			}
		}
	}

	return nil
}

// LoadEquippedOnWeaponSkins allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (weaponL) LoadEquippedOnWeaponSkins(e boil.Executor, singular bool, maybeWeapon interface{}, mods queries.Applicator) error {
	var slice []*Weapon
	var object *Weapon

	if singular {
		object = maybeWeapon.(*Weapon)
	} else {
		slice = *maybeWeapon.(*[]*Weapon)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &weaponR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &weaponR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`weapon_skin`),
		qm.WhereIn(`weapon_skin.equipped_on in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load weapon_skin")
	}

	var resultSlice []*WeaponSkin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice weapon_skin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on weapon_skin")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for weapon_skin")
	}

	if len(weaponSkinAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EquippedOnWeaponSkins = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &weaponSkinR{}
			}
			foreign.R.EquippedOnWeapon = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.EquippedOn) {
				local.R.EquippedOnWeaponSkins = append(local.R.EquippedOnWeaponSkins, foreign)
				if foreign.R == nil {
					foreign.R = &weaponSkinR{}
				}
				foreign.R.EquippedOnWeapon = local
				break
			}
		}
	}

	return nil
}

// SetBlueprint of the weapon to the related item.
// Sets o.R.Blueprint to related.
// Adds o to related.R.BlueprintWeapons.
func (o *Weapon) SetBlueprint(exec boil.Executor, insert bool, related *BlueprintWeapon) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"weapons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_id"}),
		strmangle.WhereClause("\"", "\"", 2, weaponPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlueprintID = related.ID
	if o.R == nil {
		o.R = &weaponR{
			Blueprint: related,
		}
	} else {
		o.R.Blueprint = related
	}

	if related.R == nil {
		related.R = &blueprintWeaponR{
			BlueprintWeapons: WeaponSlice{o},
		}
	} else {
		related.R.BlueprintWeapons = append(related.R.BlueprintWeapons, o)
	}

	return nil
}

// SetEquippedOnMech of the weapon to the related item.
// Sets o.R.EquippedOnMech to related.
// Adds o to related.R.EquippedOnWeapons.
func (o *Weapon) SetEquippedOnMech(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"weapons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"equipped_on"}),
		strmangle.WhereClause("\"", "\"", 2, weaponPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.EquippedOn, related.ID)
	if o.R == nil {
		o.R = &weaponR{
			EquippedOnMech: related,
		}
	} else {
		o.R.EquippedOnMech = related
	}

	if related.R == nil {
		related.R = &mechR{
			EquippedOnWeapons: WeaponSlice{o},
		}
	} else {
		related.R.EquippedOnWeapons = append(related.R.EquippedOnWeapons, o)
	}

	return nil
}

// RemoveEquippedOnMech relationship.
// Sets o.R.EquippedOnMech to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Weapon) RemoveEquippedOnMech(exec boil.Executor, related *Mech) error {
	var err error

	queries.SetScanner(&o.EquippedOn, nil)
	if _, err = o.Update(exec, boil.Whitelist("equipped_on")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.EquippedOnMech = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.EquippedOnWeapons {
		if queries.Equal(o.EquippedOn, ri.EquippedOn) {
			continue
		}

		ln := len(related.R.EquippedOnWeapons)
		if ln > 1 && i < ln-1 {
			related.R.EquippedOnWeapons[i] = related.R.EquippedOnWeapons[ln-1]
		}
		related.R.EquippedOnWeapons = related.R.EquippedOnWeapons[:ln-1]
		break
	}
	return nil
}

// SetEquippedWeaponSkin of the weapon to the related item.
// Sets o.R.EquippedWeaponSkin to related.
// Adds o to related.R.EquippedWeaponSkinWeapons.
func (o *Weapon) SetEquippedWeaponSkin(exec boil.Executor, insert bool, related *WeaponSkin) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"weapons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"equipped_weapon_skin_id"}),
		strmangle.WhereClause("\"", "\"", 2, weaponPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EquippedWeaponSkinID = related.ID
	if o.R == nil {
		o.R = &weaponR{
			EquippedWeaponSkin: related,
		}
	} else {
		o.R.EquippedWeaponSkin = related
	}

	if related.R == nil {
		related.R = &weaponSkinR{
			EquippedWeaponSkinWeapons: WeaponSlice{o},
		}
	} else {
		related.R.EquippedWeaponSkinWeapons = append(related.R.EquippedWeaponSkinWeapons, o)
	}

	return nil
}

// SetMechWeapon of the weapon to the related item.
// Sets o.R.MechWeapon to related.
// Adds o to related.R.Weapon.
func (o *Weapon) SetMechWeapon(exec boil.Executor, insert bool, related *MechWeapon) error {
	var err error

	if insert {
		related.WeaponID = o.ID

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"mech_weapons\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"weapon_id"}),
			strmangle.WhereClause("\"", "\"", 2, mechWeaponPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.WeaponID = o.ID

	}

	if o.R == nil {
		o.R = &weaponR{
			MechWeapon: related,
		}
	} else {
		o.R.MechWeapon = related
	}

	if related.R == nil {
		related.R = &mechWeaponR{
			Weapon: o,
		}
	} else {
		related.R.Weapon = o
	}
	return nil
}

// AddWeaponAmmos adds the given related objects to the existing relationships
// of the weapon, optionally inserting them as new records.
// Appends related to o.R.WeaponAmmos.
// Sets related.R.Weapon appropriately.
func (o *Weapon) AddWeaponAmmos(exec boil.Executor, insert bool, related ...*WeaponAmmo) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.WeaponID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"weapon_ammo\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"weapon_id"}),
				strmangle.WhereClause("\"", "\"", 2, weaponAmmoPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.BlueprintAmmoID, rel.WeaponID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.WeaponID = o.ID
		}
	}

	if o.R == nil {
		o.R = &weaponR{
			WeaponAmmos: related,
		}
	} else {
		o.R.WeaponAmmos = append(o.R.WeaponAmmos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &weaponAmmoR{
				Weapon: o,
			}
		} else {
			rel.R.Weapon = o
		}
	}
	return nil
}

// AddEquippedOnWeaponSkins adds the given related objects to the existing relationships
// of the weapon, optionally inserting them as new records.
// Appends related to o.R.EquippedOnWeaponSkins.
// Sets related.R.EquippedOnWeapon appropriately.
func (o *Weapon) AddEquippedOnWeaponSkins(exec boil.Executor, insert bool, related ...*WeaponSkin) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EquippedOn, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"weapon_skin\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"equipped_on"}),
				strmangle.WhereClause("\"", "\"", 2, weaponSkinPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EquippedOn, o.ID)
		}
	}

	if o.R == nil {
		o.R = &weaponR{
			EquippedOnWeaponSkins: related,
		}
	} else {
		o.R.EquippedOnWeaponSkins = append(o.R.EquippedOnWeaponSkins, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &weaponSkinR{
				EquippedOnWeapon: o,
			}
		} else {
			rel.R.EquippedOnWeapon = o
		}
	}
	return nil
}

// SetEquippedOnWeaponSkins removes all previously related items of the
// weapon replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.EquippedOnWeapon's EquippedOnWeaponSkins accordingly.
// Replaces o.R.EquippedOnWeaponSkins with related.
// Sets related.R.EquippedOnWeapon's EquippedOnWeaponSkins accordingly.
func (o *Weapon) SetEquippedOnWeaponSkins(exec boil.Executor, insert bool, related ...*WeaponSkin) error {
	query := "update \"weapon_skin\" set \"equipped_on\" = null where \"equipped_on\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.EquippedOnWeaponSkins {
			queries.SetScanner(&rel.EquippedOn, nil)
			if rel.R == nil {
				continue
			}

			rel.R.EquippedOnWeapon = nil
		}

		o.R.EquippedOnWeaponSkins = nil
	}
	return o.AddEquippedOnWeaponSkins(exec, insert, related...)
}

// RemoveEquippedOnWeaponSkins relationships from objects passed in.
// Removes related items from R.EquippedOnWeaponSkins (uses pointer comparison, removal does not keep order)
// Sets related.R.EquippedOnWeapon.
func (o *Weapon) RemoveEquippedOnWeaponSkins(exec boil.Executor, related ...*WeaponSkin) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EquippedOn, nil)
		if rel.R != nil {
			rel.R.EquippedOnWeapon = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("equipped_on")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.EquippedOnWeaponSkins {
			if rel != ri {
				continue
			}

			ln := len(o.R.EquippedOnWeaponSkins)
			if ln > 1 && i < ln-1 {
				o.R.EquippedOnWeaponSkins[i] = o.R.EquippedOnWeaponSkins[ln-1]
			}
			o.R.EquippedOnWeaponSkins = o.R.EquippedOnWeaponSkins[:ln-1]
			break
		}
	}

	return nil
}

// Weapons retrieves all the records using an executor.
func Weapons(mods ...qm.QueryMod) weaponQuery {
	mods = append(mods, qm.From("\"weapons\""), qmhelper.WhereIsNull("\"weapons\".\"deleted_at\""))
	return weaponQuery{NewQuery(mods...)}
}

// FindWeapon retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWeapon(exec boil.Executor, iD string, selectCols ...string) (*Weapon, error) {
	weaponObj := &Weapon{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"weapons\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, weaponObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from weapons")
	}

	if err = weaponObj.doAfterSelectHooks(exec); err != nil {
		return weaponObj, err
	}

	return weaponObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Weapon) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no weapons provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(weaponColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	weaponInsertCacheMut.RLock()
	cache, cached := weaponInsertCache[key]
	weaponInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			weaponAllColumns,
			weaponColumnsWithDefault,
			weaponColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(weaponType, weaponMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(weaponType, weaponMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"weapons\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"weapons\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into weapons")
	}

	if !cached {
		weaponInsertCacheMut.Lock()
		weaponInsertCache[key] = cache
		weaponInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Weapon.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Weapon) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	weaponUpdateCacheMut.RLock()
	cache, cached := weaponUpdateCache[key]
	weaponUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			weaponAllColumns,
			weaponPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update weapons, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"weapons\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, weaponPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(weaponType, weaponMapping, append(wl, weaponPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update weapons row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for weapons")
	}

	if !cached {
		weaponUpdateCacheMut.Lock()
		weaponUpdateCache[key] = cache
		weaponUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q weaponQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for weapons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for weapons")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WeaponSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), weaponPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"weapons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, weaponPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in weapon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all weapon")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Weapon) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no weapons provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(weaponColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	weaponUpsertCacheMut.RLock()
	cache, cached := weaponUpsertCache[key]
	weaponUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			weaponAllColumns,
			weaponColumnsWithDefault,
			weaponColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			weaponAllColumns,
			weaponPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert weapons, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(weaponPrimaryKeyColumns))
			copy(conflict, weaponPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"weapons\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(weaponType, weaponMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(weaponType, weaponMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert weapons")
	}

	if !cached {
		weaponUpsertCacheMut.Lock()
		weaponUpsertCache[key] = cache
		weaponUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Weapon record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Weapon) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Weapon provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), weaponPrimaryKeyMapping)
		sql = "DELETE FROM \"weapons\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"weapons\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(weaponType, weaponMapping, append(wl, weaponPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from weapons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for weapons")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q weaponQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no weaponQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from weapons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for weapons")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WeaponSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(weaponBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), weaponPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"weapons\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, weaponPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), weaponPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"weapons\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, weaponPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from weapon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for weapons")
	}

	if len(weaponAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Weapon) Reload(exec boil.Executor) error {
	ret, err := FindWeapon(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WeaponSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WeaponSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), weaponPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"weapons\".* FROM \"weapons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, weaponPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in WeaponSlice")
	}

	*o = slice

	return nil
}

// WeaponExists checks if the Weapon row exists.
func WeaponExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"weapons\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if weapons exists")
	}

	return exists, nil
}
