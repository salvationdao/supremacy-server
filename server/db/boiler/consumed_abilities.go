// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ConsumedAbility is an object representing the database table.
type ConsumedAbility struct {
	ID                  string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BattleID            string      `boiler:"battle_id" boil:"battle_id" json:"battle_id" toml:"battle_id" yaml:"battle_id"`
	ConsumedBy          string      `boiler:"consumed_by" boil:"consumed_by" json:"consumed_by" toml:"consumed_by" yaml:"consumed_by"`
	BlueprintID         string      `boiler:"blueprint_id" boil:"blueprint_id" json:"blueprint_id" toml:"blueprint_id" yaml:"blueprint_id"`
	GameClientAbilityID int         `boiler:"game_client_ability_id" boil:"game_client_ability_id" json:"game_client_ability_id" toml:"game_client_ability_id" yaml:"game_client_ability_id"`
	Label               string      `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	Colour              string      `boiler:"colour" boil:"colour" json:"colour" toml:"colour" yaml:"colour"`
	ImageURL            string      `boiler:"image_url" boil:"image_url" json:"image_url" toml:"image_url" yaml:"image_url"`
	Description         string      `boiler:"description" boil:"description" json:"description" toml:"description" yaml:"description"`
	TextColour          string      `boiler:"text_colour" boil:"text_colour" json:"text_colour" toml:"text_colour" yaml:"text_colour"`
	Type                null.String `boiler:"type" boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`
	ConsumedAt          time.Time   `boiler:"consumed_at" boil:"consumed_at" json:"consumed_at" toml:"consumed_at" yaml:"consumed_at"`

	R *consumedAbilityR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L consumedAbilityL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ConsumedAbilityColumns = struct {
	ID                  string
	BattleID            string
	ConsumedBy          string
	BlueprintID         string
	GameClientAbilityID string
	Label               string
	Colour              string
	ImageURL            string
	Description         string
	TextColour          string
	Type                string
	ConsumedAt          string
}{
	ID:                  "id",
	BattleID:            "battle_id",
	ConsumedBy:          "consumed_by",
	BlueprintID:         "blueprint_id",
	GameClientAbilityID: "game_client_ability_id",
	Label:               "label",
	Colour:              "colour",
	ImageURL:            "image_url",
	Description:         "description",
	TextColour:          "text_colour",
	Type:                "type",
	ConsumedAt:          "consumed_at",
}

var ConsumedAbilityTableColumns = struct {
	ID                  string
	BattleID            string
	ConsumedBy          string
	BlueprintID         string
	GameClientAbilityID string
	Label               string
	Colour              string
	ImageURL            string
	Description         string
	TextColour          string
	Type                string
	ConsumedAt          string
}{
	ID:                  "consumed_abilities.id",
	BattleID:            "consumed_abilities.battle_id",
	ConsumedBy:          "consumed_abilities.consumed_by",
	BlueprintID:         "consumed_abilities.blueprint_id",
	GameClientAbilityID: "consumed_abilities.game_client_ability_id",
	Label:               "consumed_abilities.label",
	Colour:              "consumed_abilities.colour",
	ImageURL:            "consumed_abilities.image_url",
	Description:         "consumed_abilities.description",
	TextColour:          "consumed_abilities.text_colour",
	Type:                "consumed_abilities.type",
	ConsumedAt:          "consumed_abilities.consumed_at",
}

// Generated where

var ConsumedAbilityWhere = struct {
	ID                  whereHelperstring
	BattleID            whereHelperstring
	ConsumedBy          whereHelperstring
	BlueprintID         whereHelperstring
	GameClientAbilityID whereHelperint
	Label               whereHelperstring
	Colour              whereHelperstring
	ImageURL            whereHelperstring
	Description         whereHelperstring
	TextColour          whereHelperstring
	Type                whereHelpernull_String
	ConsumedAt          whereHelpertime_Time
}{
	ID:                  whereHelperstring{field: "\"consumed_abilities\".\"id\""},
	BattleID:            whereHelperstring{field: "\"consumed_abilities\".\"battle_id\""},
	ConsumedBy:          whereHelperstring{field: "\"consumed_abilities\".\"consumed_by\""},
	BlueprintID:         whereHelperstring{field: "\"consumed_abilities\".\"blueprint_id\""},
	GameClientAbilityID: whereHelperint{field: "\"consumed_abilities\".\"game_client_ability_id\""},
	Label:               whereHelperstring{field: "\"consumed_abilities\".\"label\""},
	Colour:              whereHelperstring{field: "\"consumed_abilities\".\"colour\""},
	ImageURL:            whereHelperstring{field: "\"consumed_abilities\".\"image_url\""},
	Description:         whereHelperstring{field: "\"consumed_abilities\".\"description\""},
	TextColour:          whereHelperstring{field: "\"consumed_abilities\".\"text_colour\""},
	Type:                whereHelpernull_String{field: "\"consumed_abilities\".\"type\""},
	ConsumedAt:          whereHelpertime_Time{field: "\"consumed_abilities\".\"consumed_at\""},
}

// ConsumedAbilityRels is where relationship names are stored.
var ConsumedAbilityRels = struct {
	Battle           string
	Blueprint        string
	ConsumedByPlayer string
}{
	Battle:           "Battle",
	Blueprint:        "Blueprint",
	ConsumedByPlayer: "ConsumedByPlayer",
}

// consumedAbilityR is where relationships are stored.
type consumedAbilityR struct {
	Battle           *Battle                 `boiler:"Battle" boil:"Battle" json:"Battle" toml:"Battle" yaml:"Battle"`
	Blueprint        *BlueprintPlayerAbility `boiler:"Blueprint" boil:"Blueprint" json:"Blueprint" toml:"Blueprint" yaml:"Blueprint"`
	ConsumedByPlayer *Player                 `boiler:"ConsumedByPlayer" boil:"ConsumedByPlayer" json:"ConsumedByPlayer" toml:"ConsumedByPlayer" yaml:"ConsumedByPlayer"`
}

// NewStruct creates a new relationship struct
func (*consumedAbilityR) NewStruct() *consumedAbilityR {
	return &consumedAbilityR{}
}

// consumedAbilityL is where Load methods for each relationship are stored.
type consumedAbilityL struct{}

var (
	consumedAbilityAllColumns            = []string{"id", "battle_id", "consumed_by", "blueprint_id", "game_client_ability_id", "label", "colour", "image_url", "description", "text_colour", "type", "consumed_at"}
	consumedAbilityColumnsWithoutDefault = []string{"battle_id", "consumed_by", "blueprint_id", "game_client_ability_id", "label", "colour", "image_url", "description", "text_colour"}
	consumedAbilityColumnsWithDefault    = []string{"id", "type", "consumed_at"}
	consumedAbilityPrimaryKeyColumns     = []string{"id"}
	consumedAbilityGeneratedColumns      = []string{}
)

type (
	// ConsumedAbilitySlice is an alias for a slice of pointers to ConsumedAbility.
	// This should almost always be used instead of []ConsumedAbility.
	ConsumedAbilitySlice []*ConsumedAbility
	// ConsumedAbilityHook is the signature for custom ConsumedAbility hook methods
	ConsumedAbilityHook func(boil.Executor, *ConsumedAbility) error

	consumedAbilityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	consumedAbilityType                 = reflect.TypeOf(&ConsumedAbility{})
	consumedAbilityMapping              = queries.MakeStructMapping(consumedAbilityType)
	consumedAbilityPrimaryKeyMapping, _ = queries.BindMapping(consumedAbilityType, consumedAbilityMapping, consumedAbilityPrimaryKeyColumns)
	consumedAbilityInsertCacheMut       sync.RWMutex
	consumedAbilityInsertCache          = make(map[string]insertCache)
	consumedAbilityUpdateCacheMut       sync.RWMutex
	consumedAbilityUpdateCache          = make(map[string]updateCache)
	consumedAbilityUpsertCacheMut       sync.RWMutex
	consumedAbilityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var consumedAbilityAfterSelectHooks []ConsumedAbilityHook

var consumedAbilityBeforeInsertHooks []ConsumedAbilityHook
var consumedAbilityAfterInsertHooks []ConsumedAbilityHook

var consumedAbilityBeforeUpdateHooks []ConsumedAbilityHook
var consumedAbilityAfterUpdateHooks []ConsumedAbilityHook

var consumedAbilityBeforeDeleteHooks []ConsumedAbilityHook
var consumedAbilityAfterDeleteHooks []ConsumedAbilityHook

var consumedAbilityBeforeUpsertHooks []ConsumedAbilityHook
var consumedAbilityAfterUpsertHooks []ConsumedAbilityHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ConsumedAbility) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range consumedAbilityAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ConsumedAbility) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range consumedAbilityBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ConsumedAbility) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range consumedAbilityAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ConsumedAbility) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range consumedAbilityBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ConsumedAbility) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range consumedAbilityAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ConsumedAbility) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range consumedAbilityBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ConsumedAbility) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range consumedAbilityAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ConsumedAbility) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range consumedAbilityBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ConsumedAbility) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range consumedAbilityAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddConsumedAbilityHook registers your hook function for all future operations.
func AddConsumedAbilityHook(hookPoint boil.HookPoint, consumedAbilityHook ConsumedAbilityHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		consumedAbilityAfterSelectHooks = append(consumedAbilityAfterSelectHooks, consumedAbilityHook)
	case boil.BeforeInsertHook:
		consumedAbilityBeforeInsertHooks = append(consumedAbilityBeforeInsertHooks, consumedAbilityHook)
	case boil.AfterInsertHook:
		consumedAbilityAfterInsertHooks = append(consumedAbilityAfterInsertHooks, consumedAbilityHook)
	case boil.BeforeUpdateHook:
		consumedAbilityBeforeUpdateHooks = append(consumedAbilityBeforeUpdateHooks, consumedAbilityHook)
	case boil.AfterUpdateHook:
		consumedAbilityAfterUpdateHooks = append(consumedAbilityAfterUpdateHooks, consumedAbilityHook)
	case boil.BeforeDeleteHook:
		consumedAbilityBeforeDeleteHooks = append(consumedAbilityBeforeDeleteHooks, consumedAbilityHook)
	case boil.AfterDeleteHook:
		consumedAbilityAfterDeleteHooks = append(consumedAbilityAfterDeleteHooks, consumedAbilityHook)
	case boil.BeforeUpsertHook:
		consumedAbilityBeforeUpsertHooks = append(consumedAbilityBeforeUpsertHooks, consumedAbilityHook)
	case boil.AfterUpsertHook:
		consumedAbilityAfterUpsertHooks = append(consumedAbilityAfterUpsertHooks, consumedAbilityHook)
	}
}

// One returns a single consumedAbility record from the query.
func (q consumedAbilityQuery) One(exec boil.Executor) (*ConsumedAbility, error) {
	o := &ConsumedAbility{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for consumed_abilities")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ConsumedAbility records from the query.
func (q consumedAbilityQuery) All(exec boil.Executor) (ConsumedAbilitySlice, error) {
	var o []*ConsumedAbility

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to ConsumedAbility slice")
	}

	if len(consumedAbilityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ConsumedAbility records in the query.
func (q consumedAbilityQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count consumed_abilities rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q consumedAbilityQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if consumed_abilities exists")
	}

	return count > 0, nil
}

// Battle pointed to by the foreign key.
func (o *ConsumedAbility) Battle(mods ...qm.QueryMod) battleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BattleID),
	}

	queryMods = append(queryMods, mods...)

	query := Battles(queryMods...)
	queries.SetFrom(query.Query, "\"battles\"")

	return query
}

// Blueprint pointed to by the foreign key.
func (o *ConsumedAbility) Blueprint(mods ...qm.QueryMod) blueprintPlayerAbilityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BlueprintID),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintPlayerAbilities(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_player_abilities\"")

	return query
}

// ConsumedByPlayer pointed to by the foreign key.
func (o *ConsumedAbility) ConsumedByPlayer(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ConsumedBy),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// LoadBattle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (consumedAbilityL) LoadBattle(e boil.Executor, singular bool, maybeConsumedAbility interface{}, mods queries.Applicator) error {
	var slice []*ConsumedAbility
	var object *ConsumedAbility

	if singular {
		object = maybeConsumedAbility.(*ConsumedAbility)
	} else {
		slice = *maybeConsumedAbility.(*[]*ConsumedAbility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &consumedAbilityR{}
		}
		args = append(args, object.BattleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &consumedAbilityR{}
			}

			for _, a := range args {
				if a == obj.BattleID {
					continue Outer
				}
			}

			args = append(args, obj.BattleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battles`),
		qm.WhereIn(`battles.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Battle")
	}

	var resultSlice []*Battle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Battle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battles")
	}

	if len(consumedAbilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Battle = foreign
		if foreign.R == nil {
			foreign.R = &battleR{}
		}
		foreign.R.ConsumedAbilities = append(foreign.R.ConsumedAbilities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BattleID == foreign.ID {
				local.R.Battle = foreign
				if foreign.R == nil {
					foreign.R = &battleR{}
				}
				foreign.R.ConsumedAbilities = append(foreign.R.ConsumedAbilities, local)
				break
			}
		}
	}

	return nil
}

// LoadBlueprint allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (consumedAbilityL) LoadBlueprint(e boil.Executor, singular bool, maybeConsumedAbility interface{}, mods queries.Applicator) error {
	var slice []*ConsumedAbility
	var object *ConsumedAbility

	if singular {
		object = maybeConsumedAbility.(*ConsumedAbility)
	} else {
		slice = *maybeConsumedAbility.(*[]*ConsumedAbility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &consumedAbilityR{}
		}
		args = append(args, object.BlueprintID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &consumedAbilityR{}
			}

			for _, a := range args {
				if a == obj.BlueprintID {
					continue Outer
				}
			}

			args = append(args, obj.BlueprintID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_player_abilities`),
		qm.WhereIn(`blueprint_player_abilities.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintPlayerAbility")
	}

	var resultSlice []*BlueprintPlayerAbility
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintPlayerAbility")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_player_abilities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_player_abilities")
	}

	if len(consumedAbilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Blueprint = foreign
		if foreign.R == nil {
			foreign.R = &blueprintPlayerAbilityR{}
		}
		foreign.R.BlueprintConsumedAbilities = append(foreign.R.BlueprintConsumedAbilities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlueprintID == foreign.ID {
				local.R.Blueprint = foreign
				if foreign.R == nil {
					foreign.R = &blueprintPlayerAbilityR{}
				}
				foreign.R.BlueprintConsumedAbilities = append(foreign.R.BlueprintConsumedAbilities, local)
				break
			}
		}
	}

	return nil
}

// LoadConsumedByPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (consumedAbilityL) LoadConsumedByPlayer(e boil.Executor, singular bool, maybeConsumedAbility interface{}, mods queries.Applicator) error {
	var slice []*ConsumedAbility
	var object *ConsumedAbility

	if singular {
		object = maybeConsumedAbility.(*ConsumedAbility)
	} else {
		slice = *maybeConsumedAbility.(*[]*ConsumedAbility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &consumedAbilityR{}
		}
		args = append(args, object.ConsumedBy)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &consumedAbilityR{}
			}

			for _, a := range args {
				if a == obj.ConsumedBy {
					continue Outer
				}
			}

			args = append(args, obj.ConsumedBy)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(consumedAbilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ConsumedByPlayer = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.ConsumedByConsumedAbilities = append(foreign.R.ConsumedByConsumedAbilities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ConsumedBy == foreign.ID {
				local.R.ConsumedByPlayer = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.ConsumedByConsumedAbilities = append(foreign.R.ConsumedByConsumedAbilities, local)
				break
			}
		}
	}

	return nil
}

// SetBattle of the consumedAbility to the related item.
// Sets o.R.Battle to related.
// Adds o to related.R.ConsumedAbilities.
func (o *ConsumedAbility) SetBattle(exec boil.Executor, insert bool, related *Battle) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"consumed_abilities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
		strmangle.WhereClause("\"", "\"", 2, consumedAbilityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BattleID = related.ID
	if o.R == nil {
		o.R = &consumedAbilityR{
			Battle: related,
		}
	} else {
		o.R.Battle = related
	}

	if related.R == nil {
		related.R = &battleR{
			ConsumedAbilities: ConsumedAbilitySlice{o},
		}
	} else {
		related.R.ConsumedAbilities = append(related.R.ConsumedAbilities, o)
	}

	return nil
}

// SetBlueprint of the consumedAbility to the related item.
// Sets o.R.Blueprint to related.
// Adds o to related.R.BlueprintConsumedAbilities.
func (o *ConsumedAbility) SetBlueprint(exec boil.Executor, insert bool, related *BlueprintPlayerAbility) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"consumed_abilities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_id"}),
		strmangle.WhereClause("\"", "\"", 2, consumedAbilityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlueprintID = related.ID
	if o.R == nil {
		o.R = &consumedAbilityR{
			Blueprint: related,
		}
	} else {
		o.R.Blueprint = related
	}

	if related.R == nil {
		related.R = &blueprintPlayerAbilityR{
			BlueprintConsumedAbilities: ConsumedAbilitySlice{o},
		}
	} else {
		related.R.BlueprintConsumedAbilities = append(related.R.BlueprintConsumedAbilities, o)
	}

	return nil
}

// SetConsumedByPlayer of the consumedAbility to the related item.
// Sets o.R.ConsumedByPlayer to related.
// Adds o to related.R.ConsumedByConsumedAbilities.
func (o *ConsumedAbility) SetConsumedByPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"consumed_abilities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"consumed_by"}),
		strmangle.WhereClause("\"", "\"", 2, consumedAbilityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ConsumedBy = related.ID
	if o.R == nil {
		o.R = &consumedAbilityR{
			ConsumedByPlayer: related,
		}
	} else {
		o.R.ConsumedByPlayer = related
	}

	if related.R == nil {
		related.R = &playerR{
			ConsumedByConsumedAbilities: ConsumedAbilitySlice{o},
		}
	} else {
		related.R.ConsumedByConsumedAbilities = append(related.R.ConsumedByConsumedAbilities, o)
	}

	return nil
}

// ConsumedAbilities retrieves all the records using an executor.
func ConsumedAbilities(mods ...qm.QueryMod) consumedAbilityQuery {
	mods = append(mods, qm.From("\"consumed_abilities\""))
	return consumedAbilityQuery{NewQuery(mods...)}
}

// FindConsumedAbility retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindConsumedAbility(exec boil.Executor, iD string, selectCols ...string) (*ConsumedAbility, error) {
	consumedAbilityObj := &ConsumedAbility{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"consumed_abilities\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, consumedAbilityObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from consumed_abilities")
	}

	if err = consumedAbilityObj.doAfterSelectHooks(exec); err != nil {
		return consumedAbilityObj, err
	}

	return consumedAbilityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ConsumedAbility) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no consumed_abilities provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(consumedAbilityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	consumedAbilityInsertCacheMut.RLock()
	cache, cached := consumedAbilityInsertCache[key]
	consumedAbilityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			consumedAbilityAllColumns,
			consumedAbilityColumnsWithDefault,
			consumedAbilityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(consumedAbilityType, consumedAbilityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(consumedAbilityType, consumedAbilityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"consumed_abilities\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"consumed_abilities\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into consumed_abilities")
	}

	if !cached {
		consumedAbilityInsertCacheMut.Lock()
		consumedAbilityInsertCache[key] = cache
		consumedAbilityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the ConsumedAbility.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ConsumedAbility) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	consumedAbilityUpdateCacheMut.RLock()
	cache, cached := consumedAbilityUpdateCache[key]
	consumedAbilityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			consumedAbilityAllColumns,
			consumedAbilityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update consumed_abilities, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"consumed_abilities\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, consumedAbilityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(consumedAbilityType, consumedAbilityMapping, append(wl, consumedAbilityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update consumed_abilities row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for consumed_abilities")
	}

	if !cached {
		consumedAbilityUpdateCacheMut.Lock()
		consumedAbilityUpdateCache[key] = cache
		consumedAbilityUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q consumedAbilityQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for consumed_abilities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for consumed_abilities")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ConsumedAbilitySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), consumedAbilityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"consumed_abilities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, consumedAbilityPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in consumedAbility slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all consumedAbility")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ConsumedAbility) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no consumed_abilities provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(consumedAbilityColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	consumedAbilityUpsertCacheMut.RLock()
	cache, cached := consumedAbilityUpsertCache[key]
	consumedAbilityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			consumedAbilityAllColumns,
			consumedAbilityColumnsWithDefault,
			consumedAbilityColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			consumedAbilityAllColumns,
			consumedAbilityPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert consumed_abilities, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(consumedAbilityPrimaryKeyColumns))
			copy(conflict, consumedAbilityPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"consumed_abilities\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(consumedAbilityType, consumedAbilityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(consumedAbilityType, consumedAbilityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert consumed_abilities")
	}

	if !cached {
		consumedAbilityUpsertCacheMut.Lock()
		consumedAbilityUpsertCache[key] = cache
		consumedAbilityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single ConsumedAbility record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ConsumedAbility) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no ConsumedAbility provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), consumedAbilityPrimaryKeyMapping)
	sql := "DELETE FROM \"consumed_abilities\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from consumed_abilities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for consumed_abilities")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q consumedAbilityQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no consumedAbilityQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from consumed_abilities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for consumed_abilities")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ConsumedAbilitySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(consumedAbilityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), consumedAbilityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"consumed_abilities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, consumedAbilityPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from consumedAbility slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for consumed_abilities")
	}

	if len(consumedAbilityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ConsumedAbility) Reload(exec boil.Executor) error {
	ret, err := FindConsumedAbility(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ConsumedAbilitySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ConsumedAbilitySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), consumedAbilityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"consumed_abilities\".* FROM \"consumed_abilities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, consumedAbilityPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in ConsumedAbilitySlice")
	}

	*o = slice

	return nil
}

// ConsumedAbilityExists checks if the ConsumedAbility row exists.
func ConsumedAbilityExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"consumed_abilities\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if consumed_abilities exists")
	}

	return exists, nil
}
