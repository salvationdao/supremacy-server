// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PlayerSettingsPreference is an object representing the database table.
type PlayerSettingsPreference struct {
	ID                          string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	PlayerID                    string      `boiler:"player_id" boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	Shortcode                   string      `boiler:"shortcode" boil:"shortcode" json:"shortcode" toml:"shortcode" yaml:"shortcode"`
	EnableTelegramNotifications bool        `boiler:"enable_telegram_notifications" boil:"enable_telegram_notifications" json:"enable_telegram_notifications" toml:"enable_telegram_notifications" yaml:"enable_telegram_notifications"`
	EnableSMSNotifications      bool        `boiler:"enable_sms_notifications" boil:"enable_sms_notifications" json:"enable_sms_notifications" toml:"enable_sms_notifications" yaml:"enable_sms_notifications"`
	EnablePushNotifications     bool        `boiler:"enable_push_notifications" boil:"enable_push_notifications" json:"enable_push_notifications" toml:"enable_push_notifications" yaml:"enable_push_notifications"`
	TelegramID                  null.Int64  `boiler:"telegram_id" boil:"telegram_id" json:"telegram_id,omitempty" toml:"telegram_id" yaml:"telegram_id,omitempty"`
	MobileNumber                null.String `boiler:"mobile_number" boil:"mobile_number" json:"mobile_number,omitempty" toml:"mobile_number" yaml:"mobile_number,omitempty"`
	CreatedAt                   time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *playerSettingsPreferenceR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L playerSettingsPreferenceL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlayerSettingsPreferenceColumns = struct {
	ID                          string
	PlayerID                    string
	Shortcode                   string
	EnableTelegramNotifications string
	EnableSMSNotifications      string
	EnablePushNotifications     string
	TelegramID                  string
	MobileNumber                string
	CreatedAt                   string
}{
	ID:                          "id",
	PlayerID:                    "player_id",
	Shortcode:                   "shortcode",
	EnableTelegramNotifications: "enable_telegram_notifications",
	EnableSMSNotifications:      "enable_sms_notifications",
	EnablePushNotifications:     "enable_push_notifications",
	TelegramID:                  "telegram_id",
	MobileNumber:                "mobile_number",
	CreatedAt:                   "created_at",
}

var PlayerSettingsPreferenceTableColumns = struct {
	ID                          string
	PlayerID                    string
	Shortcode                   string
	EnableTelegramNotifications string
	EnableSMSNotifications      string
	EnablePushNotifications     string
	TelegramID                  string
	MobileNumber                string
	CreatedAt                   string
}{
	ID:                          "player_settings_preferences.id",
	PlayerID:                    "player_settings_preferences.player_id",
	Shortcode:                   "player_settings_preferences.shortcode",
	EnableTelegramNotifications: "player_settings_preferences.enable_telegram_notifications",
	EnableSMSNotifications:      "player_settings_preferences.enable_sms_notifications",
	EnablePushNotifications:     "player_settings_preferences.enable_push_notifications",
	TelegramID:                  "player_settings_preferences.telegram_id",
	MobileNumber:                "player_settings_preferences.mobile_number",
	CreatedAt:                   "player_settings_preferences.created_at",
}

// Generated where

var PlayerSettingsPreferenceWhere = struct {
	ID                          whereHelperstring
	PlayerID                    whereHelperstring
	Shortcode                   whereHelperstring
	EnableTelegramNotifications whereHelperbool
	EnableSMSNotifications      whereHelperbool
	EnablePushNotifications     whereHelperbool
	TelegramID                  whereHelpernull_Int64
	MobileNumber                whereHelpernull_String
	CreatedAt                   whereHelpertime_Time
}{
	ID:                          whereHelperstring{field: "\"player_settings_preferences\".\"id\""},
	PlayerID:                    whereHelperstring{field: "\"player_settings_preferences\".\"player_id\""},
	Shortcode:                   whereHelperstring{field: "\"player_settings_preferences\".\"shortcode\""},
	EnableTelegramNotifications: whereHelperbool{field: "\"player_settings_preferences\".\"enable_telegram_notifications\""},
	EnableSMSNotifications:      whereHelperbool{field: "\"player_settings_preferences\".\"enable_sms_notifications\""},
	EnablePushNotifications:     whereHelperbool{field: "\"player_settings_preferences\".\"enable_push_notifications\""},
	TelegramID:                  whereHelpernull_Int64{field: "\"player_settings_preferences\".\"telegram_id\""},
	MobileNumber:                whereHelpernull_String{field: "\"player_settings_preferences\".\"mobile_number\""},
	CreatedAt:                   whereHelpertime_Time{field: "\"player_settings_preferences\".\"created_at\""},
}

// PlayerSettingsPreferenceRels is where relationship names are stored.
var PlayerSettingsPreferenceRels = struct {
	Player string
}{
	Player: "Player",
}

// playerSettingsPreferenceR is where relationships are stored.
type playerSettingsPreferenceR struct {
	Player *Player `boiler:"Player" boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
}

// NewStruct creates a new relationship struct
func (*playerSettingsPreferenceR) NewStruct() *playerSettingsPreferenceR {
	return &playerSettingsPreferenceR{}
}

// playerSettingsPreferenceL is where Load methods for each relationship are stored.
type playerSettingsPreferenceL struct{}

var (
	playerSettingsPreferenceAllColumns            = []string{"id", "player_id", "shortcode", "enable_telegram_notifications", "enable_sms_notifications", "enable_push_notifications", "telegram_id", "mobile_number", "created_at"}
	playerSettingsPreferenceColumnsWithoutDefault = []string{"player_id", "shortcode"}
	playerSettingsPreferenceColumnsWithDefault    = []string{"id", "enable_telegram_notifications", "enable_sms_notifications", "enable_push_notifications", "telegram_id", "mobile_number", "created_at"}
	playerSettingsPreferencePrimaryKeyColumns     = []string{"id"}
	playerSettingsPreferenceGeneratedColumns      = []string{}
)

type (
	// PlayerSettingsPreferenceSlice is an alias for a slice of pointers to PlayerSettingsPreference.
	// This should almost always be used instead of []PlayerSettingsPreference.
	PlayerSettingsPreferenceSlice []*PlayerSettingsPreference
	// PlayerSettingsPreferenceHook is the signature for custom PlayerSettingsPreference hook methods
	PlayerSettingsPreferenceHook func(boil.Executor, *PlayerSettingsPreference) error

	playerSettingsPreferenceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playerSettingsPreferenceType                 = reflect.TypeOf(&PlayerSettingsPreference{})
	playerSettingsPreferenceMapping              = queries.MakeStructMapping(playerSettingsPreferenceType)
	playerSettingsPreferencePrimaryKeyMapping, _ = queries.BindMapping(playerSettingsPreferenceType, playerSettingsPreferenceMapping, playerSettingsPreferencePrimaryKeyColumns)
	playerSettingsPreferenceInsertCacheMut       sync.RWMutex
	playerSettingsPreferenceInsertCache          = make(map[string]insertCache)
	playerSettingsPreferenceUpdateCacheMut       sync.RWMutex
	playerSettingsPreferenceUpdateCache          = make(map[string]updateCache)
	playerSettingsPreferenceUpsertCacheMut       sync.RWMutex
	playerSettingsPreferenceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var playerSettingsPreferenceAfterSelectHooks []PlayerSettingsPreferenceHook

var playerSettingsPreferenceBeforeInsertHooks []PlayerSettingsPreferenceHook
var playerSettingsPreferenceAfterInsertHooks []PlayerSettingsPreferenceHook

var playerSettingsPreferenceBeforeUpdateHooks []PlayerSettingsPreferenceHook
var playerSettingsPreferenceAfterUpdateHooks []PlayerSettingsPreferenceHook

var playerSettingsPreferenceBeforeDeleteHooks []PlayerSettingsPreferenceHook
var playerSettingsPreferenceAfterDeleteHooks []PlayerSettingsPreferenceHook

var playerSettingsPreferenceBeforeUpsertHooks []PlayerSettingsPreferenceHook
var playerSettingsPreferenceAfterUpsertHooks []PlayerSettingsPreferenceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PlayerSettingsPreference) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range playerSettingsPreferenceAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PlayerSettingsPreference) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerSettingsPreferenceBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PlayerSettingsPreference) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerSettingsPreferenceAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PlayerSettingsPreference) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range playerSettingsPreferenceBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PlayerSettingsPreference) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range playerSettingsPreferenceAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PlayerSettingsPreference) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range playerSettingsPreferenceBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PlayerSettingsPreference) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range playerSettingsPreferenceAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PlayerSettingsPreference) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerSettingsPreferenceBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PlayerSettingsPreference) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerSettingsPreferenceAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlayerSettingsPreferenceHook registers your hook function for all future operations.
func AddPlayerSettingsPreferenceHook(hookPoint boil.HookPoint, playerSettingsPreferenceHook PlayerSettingsPreferenceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		playerSettingsPreferenceAfterSelectHooks = append(playerSettingsPreferenceAfterSelectHooks, playerSettingsPreferenceHook)
	case boil.BeforeInsertHook:
		playerSettingsPreferenceBeforeInsertHooks = append(playerSettingsPreferenceBeforeInsertHooks, playerSettingsPreferenceHook)
	case boil.AfterInsertHook:
		playerSettingsPreferenceAfterInsertHooks = append(playerSettingsPreferenceAfterInsertHooks, playerSettingsPreferenceHook)
	case boil.BeforeUpdateHook:
		playerSettingsPreferenceBeforeUpdateHooks = append(playerSettingsPreferenceBeforeUpdateHooks, playerSettingsPreferenceHook)
	case boil.AfterUpdateHook:
		playerSettingsPreferenceAfterUpdateHooks = append(playerSettingsPreferenceAfterUpdateHooks, playerSettingsPreferenceHook)
	case boil.BeforeDeleteHook:
		playerSettingsPreferenceBeforeDeleteHooks = append(playerSettingsPreferenceBeforeDeleteHooks, playerSettingsPreferenceHook)
	case boil.AfterDeleteHook:
		playerSettingsPreferenceAfterDeleteHooks = append(playerSettingsPreferenceAfterDeleteHooks, playerSettingsPreferenceHook)
	case boil.BeforeUpsertHook:
		playerSettingsPreferenceBeforeUpsertHooks = append(playerSettingsPreferenceBeforeUpsertHooks, playerSettingsPreferenceHook)
	case boil.AfterUpsertHook:
		playerSettingsPreferenceAfterUpsertHooks = append(playerSettingsPreferenceAfterUpsertHooks, playerSettingsPreferenceHook)
	}
}

// One returns a single playerSettingsPreference record from the query.
func (q playerSettingsPreferenceQuery) One(exec boil.Executor) (*PlayerSettingsPreference, error) {
	o := &PlayerSettingsPreference{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for player_settings_preferences")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PlayerSettingsPreference records from the query.
func (q playerSettingsPreferenceQuery) All(exec boil.Executor) (PlayerSettingsPreferenceSlice, error) {
	var o []*PlayerSettingsPreference

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to PlayerSettingsPreference slice")
	}

	if len(playerSettingsPreferenceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PlayerSettingsPreference records in the query.
func (q playerSettingsPreferenceQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count player_settings_preferences rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q playerSettingsPreferenceQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if player_settings_preferences exists")
	}

	return count > 0, nil
}

// Player pointed to by the foreign key.
func (o *PlayerSettingsPreference) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerSettingsPreferenceL) LoadPlayer(e boil.Executor, singular bool, maybePlayerSettingsPreference interface{}, mods queries.Applicator) error {
	var slice []*PlayerSettingsPreference
	var object *PlayerSettingsPreference

	if singular {
		object = maybePlayerSettingsPreference.(*PlayerSettingsPreference)
	} else {
		slice = *maybePlayerSettingsPreference.(*[]*PlayerSettingsPreference)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerSettingsPreferenceR{}
		}
		args = append(args, object.PlayerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerSettingsPreferenceR{}
			}

			for _, a := range args {
				if a == obj.PlayerID {
					continue Outer
				}
			}

			args = append(args, obj.PlayerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(playerSettingsPreferenceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.PlayerSettingsPreference = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.ID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.PlayerSettingsPreference = local
				break
			}
		}
	}

	return nil
}

// SetPlayer of the playerSettingsPreference to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.PlayerSettingsPreference.
func (o *PlayerSettingsPreference) SetPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"player_settings_preferences\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerSettingsPreferencePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.ID
	if o.R == nil {
		o.R = &playerSettingsPreferenceR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			PlayerSettingsPreference: o,
		}
	} else {
		related.R.PlayerSettingsPreference = o
	}

	return nil
}

// PlayerSettingsPreferences retrieves all the records using an executor.
func PlayerSettingsPreferences(mods ...qm.QueryMod) playerSettingsPreferenceQuery {
	mods = append(mods, qm.From("\"player_settings_preferences\""))
	return playerSettingsPreferenceQuery{NewQuery(mods...)}
}

// FindPlayerSettingsPreference retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlayerSettingsPreference(exec boil.Executor, iD string, selectCols ...string) (*PlayerSettingsPreference, error) {
	playerSettingsPreferenceObj := &PlayerSettingsPreference{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"player_settings_preferences\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, playerSettingsPreferenceObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from player_settings_preferences")
	}

	if err = playerSettingsPreferenceObj.doAfterSelectHooks(exec); err != nil {
		return playerSettingsPreferenceObj, err
	}

	return playerSettingsPreferenceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PlayerSettingsPreference) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no player_settings_preferences provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerSettingsPreferenceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	playerSettingsPreferenceInsertCacheMut.RLock()
	cache, cached := playerSettingsPreferenceInsertCache[key]
	playerSettingsPreferenceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			playerSettingsPreferenceAllColumns,
			playerSettingsPreferenceColumnsWithDefault,
			playerSettingsPreferenceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(playerSettingsPreferenceType, playerSettingsPreferenceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(playerSettingsPreferenceType, playerSettingsPreferenceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"player_settings_preferences\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"player_settings_preferences\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into player_settings_preferences")
	}

	if !cached {
		playerSettingsPreferenceInsertCacheMut.Lock()
		playerSettingsPreferenceInsertCache[key] = cache
		playerSettingsPreferenceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the PlayerSettingsPreference.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PlayerSettingsPreference) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	playerSettingsPreferenceUpdateCacheMut.RLock()
	cache, cached := playerSettingsPreferenceUpdateCache[key]
	playerSettingsPreferenceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			playerSettingsPreferenceAllColumns,
			playerSettingsPreferencePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update player_settings_preferences, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"player_settings_preferences\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, playerSettingsPreferencePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(playerSettingsPreferenceType, playerSettingsPreferenceMapping, append(wl, playerSettingsPreferencePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update player_settings_preferences row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for player_settings_preferences")
	}

	if !cached {
		playerSettingsPreferenceUpdateCacheMut.Lock()
		playerSettingsPreferenceUpdateCache[key] = cache
		playerSettingsPreferenceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q playerSettingsPreferenceQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for player_settings_preferences")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for player_settings_preferences")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlayerSettingsPreferenceSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerSettingsPreferencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"player_settings_preferences\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, playerSettingsPreferencePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in playerSettingsPreference slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all playerSettingsPreference")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PlayerSettingsPreference) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no player_settings_preferences provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerSettingsPreferenceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	playerSettingsPreferenceUpsertCacheMut.RLock()
	cache, cached := playerSettingsPreferenceUpsertCache[key]
	playerSettingsPreferenceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			playerSettingsPreferenceAllColumns,
			playerSettingsPreferenceColumnsWithDefault,
			playerSettingsPreferenceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			playerSettingsPreferenceAllColumns,
			playerSettingsPreferencePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert player_settings_preferences, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(playerSettingsPreferencePrimaryKeyColumns))
			copy(conflict, playerSettingsPreferencePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"player_settings_preferences\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(playerSettingsPreferenceType, playerSettingsPreferenceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(playerSettingsPreferenceType, playerSettingsPreferenceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert player_settings_preferences")
	}

	if !cached {
		playerSettingsPreferenceUpsertCacheMut.Lock()
		playerSettingsPreferenceUpsertCache[key] = cache
		playerSettingsPreferenceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single PlayerSettingsPreference record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PlayerSettingsPreference) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no PlayerSettingsPreference provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), playerSettingsPreferencePrimaryKeyMapping)
	sql := "DELETE FROM \"player_settings_preferences\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from player_settings_preferences")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for player_settings_preferences")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q playerSettingsPreferenceQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no playerSettingsPreferenceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from player_settings_preferences")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for player_settings_preferences")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlayerSettingsPreferenceSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(playerSettingsPreferenceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerSettingsPreferencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"player_settings_preferences\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerSettingsPreferencePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from playerSettingsPreference slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for player_settings_preferences")
	}

	if len(playerSettingsPreferenceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PlayerSettingsPreference) Reload(exec boil.Executor) error {
	ret, err := FindPlayerSettingsPreference(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlayerSettingsPreferenceSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlayerSettingsPreferenceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerSettingsPreferencePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"player_settings_preferences\".* FROM \"player_settings_preferences\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerSettingsPreferencePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in PlayerSettingsPreferenceSlice")
	}

	*o = slice

	return nil
}

// PlayerSettingsPreferenceExists checks if the PlayerSettingsPreference row exists.
func PlayerSettingsPreferenceExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"player_settings_preferences\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if player_settings_preferences exists")
	}

	return exists, nil
}
