// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MechAbilityTriggerLogsOld is an object representing the database table.
type MechAbilityTriggerLogsOld struct {
	ID            string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	TriggeredByID string    `boiler:"triggered_by_id" boil:"triggered_by_id" json:"triggered_by_id" toml:"triggered_by_id" yaml:"triggered_by_id"`
	MechID        string    `boiler:"mech_id" boil:"mech_id" json:"mech_id" toml:"mech_id" yaml:"mech_id"`
	GameAbilityID string    `boiler:"game_ability_id" boil:"game_ability_id" json:"game_ability_id" toml:"game_ability_id" yaml:"game_ability_id"`
	CreatedAt     time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt     null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	BattleNumber  int       `boiler:"battle_number" boil:"battle_number" json:"battle_number" toml:"battle_number" yaml:"battle_number"`

	R *mechAbilityTriggerLogsOldR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L mechAbilityTriggerLogsOldL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MechAbilityTriggerLogsOldColumns = struct {
	ID            string
	TriggeredByID string
	MechID        string
	GameAbilityID string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
	BattleNumber  string
}{
	ID:            "id",
	TriggeredByID: "triggered_by_id",
	MechID:        "mech_id",
	GameAbilityID: "game_ability_id",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	DeletedAt:     "deleted_at",
	BattleNumber:  "battle_number",
}

var MechAbilityTriggerLogsOldTableColumns = struct {
	ID            string
	TriggeredByID string
	MechID        string
	GameAbilityID string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
	BattleNumber  string
}{
	ID:            "mech_ability_trigger_logs_old.id",
	TriggeredByID: "mech_ability_trigger_logs_old.triggered_by_id",
	MechID:        "mech_ability_trigger_logs_old.mech_id",
	GameAbilityID: "mech_ability_trigger_logs_old.game_ability_id",
	CreatedAt:     "mech_ability_trigger_logs_old.created_at",
	UpdatedAt:     "mech_ability_trigger_logs_old.updated_at",
	DeletedAt:     "mech_ability_trigger_logs_old.deleted_at",
	BattleNumber:  "mech_ability_trigger_logs_old.battle_number",
}

// Generated where

var MechAbilityTriggerLogsOldWhere = struct {
	ID            whereHelperstring
	TriggeredByID whereHelperstring
	MechID        whereHelperstring
	GameAbilityID whereHelperstring
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	DeletedAt     whereHelpernull_Time
	BattleNumber  whereHelperint
}{
	ID:            whereHelperstring{field: "\"mech_ability_trigger_logs_old\".\"id\""},
	TriggeredByID: whereHelperstring{field: "\"mech_ability_trigger_logs_old\".\"triggered_by_id\""},
	MechID:        whereHelperstring{field: "\"mech_ability_trigger_logs_old\".\"mech_id\""},
	GameAbilityID: whereHelperstring{field: "\"mech_ability_trigger_logs_old\".\"game_ability_id\""},
	CreatedAt:     whereHelpertime_Time{field: "\"mech_ability_trigger_logs_old\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"mech_ability_trigger_logs_old\".\"updated_at\""},
	DeletedAt:     whereHelpernull_Time{field: "\"mech_ability_trigger_logs_old\".\"deleted_at\""},
	BattleNumber:  whereHelperint{field: "\"mech_ability_trigger_logs_old\".\"battle_number\""},
}

// MechAbilityTriggerLogsOldRels is where relationship names are stored.
var MechAbilityTriggerLogsOldRels = struct {
	GameAbility string
	Mech        string
	TriggeredBy string
}{
	GameAbility: "GameAbility",
	Mech:        "Mech",
	TriggeredBy: "TriggeredBy",
}

// mechAbilityTriggerLogsOldR is where relationships are stored.
type mechAbilityTriggerLogsOldR struct {
	GameAbility *GameAbility `boiler:"GameAbility" boil:"GameAbility" json:"GameAbility" toml:"GameAbility" yaml:"GameAbility"`
	Mech        *Mech        `boiler:"Mech" boil:"Mech" json:"Mech" toml:"Mech" yaml:"Mech"`
	TriggeredBy *Player      `boiler:"TriggeredBy" boil:"TriggeredBy" json:"TriggeredBy" toml:"TriggeredBy" yaml:"TriggeredBy"`
}

// NewStruct creates a new relationship struct
func (*mechAbilityTriggerLogsOldR) NewStruct() *mechAbilityTriggerLogsOldR {
	return &mechAbilityTriggerLogsOldR{}
}

// mechAbilityTriggerLogsOldL is where Load methods for each relationship are stored.
type mechAbilityTriggerLogsOldL struct{}

var (
	mechAbilityTriggerLogsOldAllColumns            = []string{"id", "triggered_by_id", "mech_id", "game_ability_id", "created_at", "updated_at", "deleted_at", "battle_number"}
	mechAbilityTriggerLogsOldColumnsWithoutDefault = []string{"triggered_by_id", "mech_id", "game_ability_id"}
	mechAbilityTriggerLogsOldColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at", "battle_number"}
	mechAbilityTriggerLogsOldPrimaryKeyColumns     = []string{"id"}
	mechAbilityTriggerLogsOldGeneratedColumns      = []string{}
)

type (
	// MechAbilityTriggerLogsOldSlice is an alias for a slice of pointers to MechAbilityTriggerLogsOld.
	// This should almost always be used instead of []MechAbilityTriggerLogsOld.
	MechAbilityTriggerLogsOldSlice []*MechAbilityTriggerLogsOld
	// MechAbilityTriggerLogsOldHook is the signature for custom MechAbilityTriggerLogsOld hook methods
	MechAbilityTriggerLogsOldHook func(boil.Executor, *MechAbilityTriggerLogsOld) error

	mechAbilityTriggerLogsOldQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mechAbilityTriggerLogsOldType                 = reflect.TypeOf(&MechAbilityTriggerLogsOld{})
	mechAbilityTriggerLogsOldMapping              = queries.MakeStructMapping(mechAbilityTriggerLogsOldType)
	mechAbilityTriggerLogsOldPrimaryKeyMapping, _ = queries.BindMapping(mechAbilityTriggerLogsOldType, mechAbilityTriggerLogsOldMapping, mechAbilityTriggerLogsOldPrimaryKeyColumns)
	mechAbilityTriggerLogsOldInsertCacheMut       sync.RWMutex
	mechAbilityTriggerLogsOldInsertCache          = make(map[string]insertCache)
	mechAbilityTriggerLogsOldUpdateCacheMut       sync.RWMutex
	mechAbilityTriggerLogsOldUpdateCache          = make(map[string]updateCache)
	mechAbilityTriggerLogsOldUpsertCacheMut       sync.RWMutex
	mechAbilityTriggerLogsOldUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mechAbilityTriggerLogsOldAfterSelectHooks []MechAbilityTriggerLogsOldHook

var mechAbilityTriggerLogsOldBeforeInsertHooks []MechAbilityTriggerLogsOldHook
var mechAbilityTriggerLogsOldAfterInsertHooks []MechAbilityTriggerLogsOldHook

var mechAbilityTriggerLogsOldBeforeUpdateHooks []MechAbilityTriggerLogsOldHook
var mechAbilityTriggerLogsOldAfterUpdateHooks []MechAbilityTriggerLogsOldHook

var mechAbilityTriggerLogsOldBeforeDeleteHooks []MechAbilityTriggerLogsOldHook
var mechAbilityTriggerLogsOldAfterDeleteHooks []MechAbilityTriggerLogsOldHook

var mechAbilityTriggerLogsOldBeforeUpsertHooks []MechAbilityTriggerLogsOldHook
var mechAbilityTriggerLogsOldAfterUpsertHooks []MechAbilityTriggerLogsOldHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MechAbilityTriggerLogsOld) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAbilityTriggerLogsOldAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MechAbilityTriggerLogsOld) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAbilityTriggerLogsOldBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MechAbilityTriggerLogsOld) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAbilityTriggerLogsOldAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MechAbilityTriggerLogsOld) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAbilityTriggerLogsOldBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MechAbilityTriggerLogsOld) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAbilityTriggerLogsOldAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MechAbilityTriggerLogsOld) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAbilityTriggerLogsOldBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MechAbilityTriggerLogsOld) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAbilityTriggerLogsOldAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MechAbilityTriggerLogsOld) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAbilityTriggerLogsOldBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MechAbilityTriggerLogsOld) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAbilityTriggerLogsOldAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMechAbilityTriggerLogsOldHook registers your hook function for all future operations.
func AddMechAbilityTriggerLogsOldHook(hookPoint boil.HookPoint, mechAbilityTriggerLogsOldHook MechAbilityTriggerLogsOldHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mechAbilityTriggerLogsOldAfterSelectHooks = append(mechAbilityTriggerLogsOldAfterSelectHooks, mechAbilityTriggerLogsOldHook)
	case boil.BeforeInsertHook:
		mechAbilityTriggerLogsOldBeforeInsertHooks = append(mechAbilityTriggerLogsOldBeforeInsertHooks, mechAbilityTriggerLogsOldHook)
	case boil.AfterInsertHook:
		mechAbilityTriggerLogsOldAfterInsertHooks = append(mechAbilityTriggerLogsOldAfterInsertHooks, mechAbilityTriggerLogsOldHook)
	case boil.BeforeUpdateHook:
		mechAbilityTriggerLogsOldBeforeUpdateHooks = append(mechAbilityTriggerLogsOldBeforeUpdateHooks, mechAbilityTriggerLogsOldHook)
	case boil.AfterUpdateHook:
		mechAbilityTriggerLogsOldAfterUpdateHooks = append(mechAbilityTriggerLogsOldAfterUpdateHooks, mechAbilityTriggerLogsOldHook)
	case boil.BeforeDeleteHook:
		mechAbilityTriggerLogsOldBeforeDeleteHooks = append(mechAbilityTriggerLogsOldBeforeDeleteHooks, mechAbilityTriggerLogsOldHook)
	case boil.AfterDeleteHook:
		mechAbilityTriggerLogsOldAfterDeleteHooks = append(mechAbilityTriggerLogsOldAfterDeleteHooks, mechAbilityTriggerLogsOldHook)
	case boil.BeforeUpsertHook:
		mechAbilityTriggerLogsOldBeforeUpsertHooks = append(mechAbilityTriggerLogsOldBeforeUpsertHooks, mechAbilityTriggerLogsOldHook)
	case boil.AfterUpsertHook:
		mechAbilityTriggerLogsOldAfterUpsertHooks = append(mechAbilityTriggerLogsOldAfterUpsertHooks, mechAbilityTriggerLogsOldHook)
	}
}

// One returns a single mechAbilityTriggerLogsOld record from the query.
func (q mechAbilityTriggerLogsOldQuery) One(exec boil.Executor) (*MechAbilityTriggerLogsOld, error) {
	o := &MechAbilityTriggerLogsOld{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for mech_ability_trigger_logs_old")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MechAbilityTriggerLogsOld records from the query.
func (q mechAbilityTriggerLogsOldQuery) All(exec boil.Executor) (MechAbilityTriggerLogsOldSlice, error) {
	var o []*MechAbilityTriggerLogsOld

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to MechAbilityTriggerLogsOld slice")
	}

	if len(mechAbilityTriggerLogsOldAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MechAbilityTriggerLogsOld records in the query.
func (q mechAbilityTriggerLogsOldQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count mech_ability_trigger_logs_old rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mechAbilityTriggerLogsOldQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if mech_ability_trigger_logs_old exists")
	}

	return count > 0, nil
}

// GameAbility pointed to by the foreign key.
func (o *MechAbilityTriggerLogsOld) GameAbility(mods ...qm.QueryMod) gameAbilityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GameAbilityID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := GameAbilities(queryMods...)
	queries.SetFrom(query.Query, "\"game_abilities\"")

	return query
}

// Mech pointed to by the foreign key.
func (o *MechAbilityTriggerLogsOld) Mech(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MechID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// TriggeredBy pointed to by the foreign key.
func (o *MechAbilityTriggerLogsOld) TriggeredBy(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TriggeredByID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// LoadGameAbility allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechAbilityTriggerLogsOldL) LoadGameAbility(e boil.Executor, singular bool, maybeMechAbilityTriggerLogsOld interface{}, mods queries.Applicator) error {
	var slice []*MechAbilityTriggerLogsOld
	var object *MechAbilityTriggerLogsOld

	if singular {
		object = maybeMechAbilityTriggerLogsOld.(*MechAbilityTriggerLogsOld)
	} else {
		slice = *maybeMechAbilityTriggerLogsOld.(*[]*MechAbilityTriggerLogsOld)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechAbilityTriggerLogsOldR{}
		}
		args = append(args, object.GameAbilityID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechAbilityTriggerLogsOldR{}
			}

			for _, a := range args {
				if a == obj.GameAbilityID {
					continue Outer
				}
			}

			args = append(args, obj.GameAbilityID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`game_abilities`),
		qm.WhereIn(`game_abilities.id in ?`, args...),
		qmhelper.WhereIsNull(`game_abilities.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GameAbility")
	}

	var resultSlice []*GameAbility
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GameAbility")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for game_abilities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_abilities")
	}

	if len(mechAbilityTriggerLogsOldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GameAbility = foreign
		if foreign.R == nil {
			foreign.R = &gameAbilityR{}
		}
		foreign.R.MechAbilityTriggerLogsOlds = append(foreign.R.MechAbilityTriggerLogsOlds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GameAbilityID == foreign.ID {
				local.R.GameAbility = foreign
				if foreign.R == nil {
					foreign.R = &gameAbilityR{}
				}
				foreign.R.MechAbilityTriggerLogsOlds = append(foreign.R.MechAbilityTriggerLogsOlds, local)
				break
			}
		}
	}

	return nil
}

// LoadMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechAbilityTriggerLogsOldL) LoadMech(e boil.Executor, singular bool, maybeMechAbilityTriggerLogsOld interface{}, mods queries.Applicator) error {
	var slice []*MechAbilityTriggerLogsOld
	var object *MechAbilityTriggerLogsOld

	if singular {
		object = maybeMechAbilityTriggerLogsOld.(*MechAbilityTriggerLogsOld)
	} else {
		slice = *maybeMechAbilityTriggerLogsOld.(*[]*MechAbilityTriggerLogsOld)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechAbilityTriggerLogsOldR{}
		}
		args = append(args, object.MechID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechAbilityTriggerLogsOldR{}
			}

			for _, a := range args {
				if a == obj.MechID {
					continue Outer
				}
			}

			args = append(args, obj.MechID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(mechAbilityTriggerLogsOldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Mech = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.MechAbilityTriggerLogsOlds = append(foreign.R.MechAbilityTriggerLogsOlds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MechID == foreign.ID {
				local.R.Mech = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.MechAbilityTriggerLogsOlds = append(foreign.R.MechAbilityTriggerLogsOlds, local)
				break
			}
		}
	}

	return nil
}

// LoadTriggeredBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechAbilityTriggerLogsOldL) LoadTriggeredBy(e boil.Executor, singular bool, maybeMechAbilityTriggerLogsOld interface{}, mods queries.Applicator) error {
	var slice []*MechAbilityTriggerLogsOld
	var object *MechAbilityTriggerLogsOld

	if singular {
		object = maybeMechAbilityTriggerLogsOld.(*MechAbilityTriggerLogsOld)
	} else {
		slice = *maybeMechAbilityTriggerLogsOld.(*[]*MechAbilityTriggerLogsOld)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechAbilityTriggerLogsOldR{}
		}
		args = append(args, object.TriggeredByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechAbilityTriggerLogsOldR{}
			}

			for _, a := range args {
				if a == obj.TriggeredByID {
					continue Outer
				}
			}

			args = append(args, obj.TriggeredByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(mechAbilityTriggerLogsOldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TriggeredBy = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.TriggeredByMechAbilityTriggerLogsOlds = append(foreign.R.TriggeredByMechAbilityTriggerLogsOlds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TriggeredByID == foreign.ID {
				local.R.TriggeredBy = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.TriggeredByMechAbilityTriggerLogsOlds = append(foreign.R.TriggeredByMechAbilityTriggerLogsOlds, local)
				break
			}
		}
	}

	return nil
}

// SetGameAbility of the mechAbilityTriggerLogsOld to the related item.
// Sets o.R.GameAbility to related.
// Adds o to related.R.MechAbilityTriggerLogsOlds.
func (o *MechAbilityTriggerLogsOld) SetGameAbility(exec boil.Executor, insert bool, related *GameAbility) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mech_ability_trigger_logs_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"game_ability_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechAbilityTriggerLogsOldPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GameAbilityID = related.ID
	if o.R == nil {
		o.R = &mechAbilityTriggerLogsOldR{
			GameAbility: related,
		}
	} else {
		o.R.GameAbility = related
	}

	if related.R == nil {
		related.R = &gameAbilityR{
			MechAbilityTriggerLogsOlds: MechAbilityTriggerLogsOldSlice{o},
		}
	} else {
		related.R.MechAbilityTriggerLogsOlds = append(related.R.MechAbilityTriggerLogsOlds, o)
	}

	return nil
}

// SetMech of the mechAbilityTriggerLogsOld to the related item.
// Sets o.R.Mech to related.
// Adds o to related.R.MechAbilityTriggerLogsOlds.
func (o *MechAbilityTriggerLogsOld) SetMech(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mech_ability_trigger_logs_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechAbilityTriggerLogsOldPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MechID = related.ID
	if o.R == nil {
		o.R = &mechAbilityTriggerLogsOldR{
			Mech: related,
		}
	} else {
		o.R.Mech = related
	}

	if related.R == nil {
		related.R = &mechR{
			MechAbilityTriggerLogsOlds: MechAbilityTriggerLogsOldSlice{o},
		}
	} else {
		related.R.MechAbilityTriggerLogsOlds = append(related.R.MechAbilityTriggerLogsOlds, o)
	}

	return nil
}

// SetTriggeredBy of the mechAbilityTriggerLogsOld to the related item.
// Sets o.R.TriggeredBy to related.
// Adds o to related.R.TriggeredByMechAbilityTriggerLogsOlds.
func (o *MechAbilityTriggerLogsOld) SetTriggeredBy(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mech_ability_trigger_logs_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"triggered_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechAbilityTriggerLogsOldPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TriggeredByID = related.ID
	if o.R == nil {
		o.R = &mechAbilityTriggerLogsOldR{
			TriggeredBy: related,
		}
	} else {
		o.R.TriggeredBy = related
	}

	if related.R == nil {
		related.R = &playerR{
			TriggeredByMechAbilityTriggerLogsOlds: MechAbilityTriggerLogsOldSlice{o},
		}
	} else {
		related.R.TriggeredByMechAbilityTriggerLogsOlds = append(related.R.TriggeredByMechAbilityTriggerLogsOlds, o)
	}

	return nil
}

// MechAbilityTriggerLogsOlds retrieves all the records using an executor.
func MechAbilityTriggerLogsOlds(mods ...qm.QueryMod) mechAbilityTriggerLogsOldQuery {
	mods = append(mods, qm.From("\"mech_ability_trigger_logs_old\""), qmhelper.WhereIsNull("\"mech_ability_trigger_logs_old\".\"deleted_at\""))
	return mechAbilityTriggerLogsOldQuery{NewQuery(mods...)}
}

// FindMechAbilityTriggerLogsOld retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMechAbilityTriggerLogsOld(exec boil.Executor, iD string, selectCols ...string) (*MechAbilityTriggerLogsOld, error) {
	mechAbilityTriggerLogsOldObj := &MechAbilityTriggerLogsOld{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mech_ability_trigger_logs_old\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, mechAbilityTriggerLogsOldObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from mech_ability_trigger_logs_old")
	}

	if err = mechAbilityTriggerLogsOldObj.doAfterSelectHooks(exec); err != nil {
		return mechAbilityTriggerLogsOldObj, err
	}

	return mechAbilityTriggerLogsOldObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MechAbilityTriggerLogsOld) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mech_ability_trigger_logs_old provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechAbilityTriggerLogsOldColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mechAbilityTriggerLogsOldInsertCacheMut.RLock()
	cache, cached := mechAbilityTriggerLogsOldInsertCache[key]
	mechAbilityTriggerLogsOldInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mechAbilityTriggerLogsOldAllColumns,
			mechAbilityTriggerLogsOldColumnsWithDefault,
			mechAbilityTriggerLogsOldColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mechAbilityTriggerLogsOldType, mechAbilityTriggerLogsOldMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mechAbilityTriggerLogsOldType, mechAbilityTriggerLogsOldMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mech_ability_trigger_logs_old\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mech_ability_trigger_logs_old\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into mech_ability_trigger_logs_old")
	}

	if !cached {
		mechAbilityTriggerLogsOldInsertCacheMut.Lock()
		mechAbilityTriggerLogsOldInsertCache[key] = cache
		mechAbilityTriggerLogsOldInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the MechAbilityTriggerLogsOld.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MechAbilityTriggerLogsOld) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mechAbilityTriggerLogsOldUpdateCacheMut.RLock()
	cache, cached := mechAbilityTriggerLogsOldUpdateCache[key]
	mechAbilityTriggerLogsOldUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mechAbilityTriggerLogsOldAllColumns,
			mechAbilityTriggerLogsOldPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update mech_ability_trigger_logs_old, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mech_ability_trigger_logs_old\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mechAbilityTriggerLogsOldPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mechAbilityTriggerLogsOldType, mechAbilityTriggerLogsOldMapping, append(wl, mechAbilityTriggerLogsOldPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update mech_ability_trigger_logs_old row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for mech_ability_trigger_logs_old")
	}

	if !cached {
		mechAbilityTriggerLogsOldUpdateCacheMut.Lock()
		mechAbilityTriggerLogsOldUpdateCache[key] = cache
		mechAbilityTriggerLogsOldUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mechAbilityTriggerLogsOldQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for mech_ability_trigger_logs_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for mech_ability_trigger_logs_old")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MechAbilityTriggerLogsOldSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechAbilityTriggerLogsOldPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mech_ability_trigger_logs_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mechAbilityTriggerLogsOldPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in mechAbilityTriggerLogsOld slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all mechAbilityTriggerLogsOld")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MechAbilityTriggerLogsOld) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mech_ability_trigger_logs_old provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechAbilityTriggerLogsOldColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mechAbilityTriggerLogsOldUpsertCacheMut.RLock()
	cache, cached := mechAbilityTriggerLogsOldUpsertCache[key]
	mechAbilityTriggerLogsOldUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mechAbilityTriggerLogsOldAllColumns,
			mechAbilityTriggerLogsOldColumnsWithDefault,
			mechAbilityTriggerLogsOldColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mechAbilityTriggerLogsOldAllColumns,
			mechAbilityTriggerLogsOldPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert mech_ability_trigger_logs_old, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mechAbilityTriggerLogsOldPrimaryKeyColumns))
			copy(conflict, mechAbilityTriggerLogsOldPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mech_ability_trigger_logs_old\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mechAbilityTriggerLogsOldType, mechAbilityTriggerLogsOldMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mechAbilityTriggerLogsOldType, mechAbilityTriggerLogsOldMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert mech_ability_trigger_logs_old")
	}

	if !cached {
		mechAbilityTriggerLogsOldUpsertCacheMut.Lock()
		mechAbilityTriggerLogsOldUpsertCache[key] = cache
		mechAbilityTriggerLogsOldUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single MechAbilityTriggerLogsOld record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MechAbilityTriggerLogsOld) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no MechAbilityTriggerLogsOld provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mechAbilityTriggerLogsOldPrimaryKeyMapping)
		sql = "DELETE FROM \"mech_ability_trigger_logs_old\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"mech_ability_trigger_logs_old\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(mechAbilityTriggerLogsOldType, mechAbilityTriggerLogsOldMapping, append(wl, mechAbilityTriggerLogsOldPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from mech_ability_trigger_logs_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for mech_ability_trigger_logs_old")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mechAbilityTriggerLogsOldQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no mechAbilityTriggerLogsOldQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mech_ability_trigger_logs_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mech_ability_trigger_logs_old")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MechAbilityTriggerLogsOldSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mechAbilityTriggerLogsOldBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechAbilityTriggerLogsOldPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"mech_ability_trigger_logs_old\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechAbilityTriggerLogsOldPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechAbilityTriggerLogsOldPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"mech_ability_trigger_logs_old\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, mechAbilityTriggerLogsOldPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mechAbilityTriggerLogsOld slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mech_ability_trigger_logs_old")
	}

	if len(mechAbilityTriggerLogsOldAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MechAbilityTriggerLogsOld) Reload(exec boil.Executor) error {
	ret, err := FindMechAbilityTriggerLogsOld(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MechAbilityTriggerLogsOldSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MechAbilityTriggerLogsOldSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechAbilityTriggerLogsOldPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mech_ability_trigger_logs_old\".* FROM \"mech_ability_trigger_logs_old\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechAbilityTriggerLogsOldPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in MechAbilityTriggerLogsOldSlice")
	}

	*o = slice

	return nil
}

// MechAbilityTriggerLogsOldExists checks if the MechAbilityTriggerLogsOld row exists.
func MechAbilityTriggerLogsOldExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mech_ability_trigger_logs_old\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if mech_ability_trigger_logs_old exists")
	}

	return exists, nil
}
