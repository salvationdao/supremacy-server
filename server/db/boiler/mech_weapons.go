// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MechWeapon is an object representing the database table.
type MechWeapon struct {
	ID              string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	ChassisID       string    `boiler:"chassis_id" boil:"chassis_id" json:"chassis_id" toml:"chassis_id" yaml:"chassis_id"`
	WeaponID        string    `boiler:"weapon_id" boil:"weapon_id" json:"weapon_id" toml:"weapon_id" yaml:"weapon_id"`
	SlotNumber      int       `boiler:"slot_number" boil:"slot_number" json:"slot_number" toml:"slot_number" yaml:"slot_number"`
	DeletedAt       null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt       time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt       time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	AllowMelee      bool      `boiler:"allow_melee" boil:"allow_melee" json:"allow_melee" toml:"allow_melee" yaml:"allow_melee"`
	IsSkinInherited bool      `boiler:"is_skin_inherited" boil:"is_skin_inherited" json:"is_skin_inherited" toml:"is_skin_inherited" yaml:"is_skin_inherited"`

	R *mechWeaponR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L mechWeaponL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MechWeaponColumns = struct {
	ID              string
	ChassisID       string
	WeaponID        string
	SlotNumber      string
	DeletedAt       string
	UpdatedAt       string
	CreatedAt       string
	AllowMelee      string
	IsSkinInherited string
}{
	ID:              "id",
	ChassisID:       "chassis_id",
	WeaponID:        "weapon_id",
	SlotNumber:      "slot_number",
	DeletedAt:       "deleted_at",
	UpdatedAt:       "updated_at",
	CreatedAt:       "created_at",
	AllowMelee:      "allow_melee",
	IsSkinInherited: "is_skin_inherited",
}

var MechWeaponTableColumns = struct {
	ID              string
	ChassisID       string
	WeaponID        string
	SlotNumber      string
	DeletedAt       string
	UpdatedAt       string
	CreatedAt       string
	AllowMelee      string
	IsSkinInherited string
}{
	ID:              "mech_weapons.id",
	ChassisID:       "mech_weapons.chassis_id",
	WeaponID:        "mech_weapons.weapon_id",
	SlotNumber:      "mech_weapons.slot_number",
	DeletedAt:       "mech_weapons.deleted_at",
	UpdatedAt:       "mech_weapons.updated_at",
	CreatedAt:       "mech_weapons.created_at",
	AllowMelee:      "mech_weapons.allow_melee",
	IsSkinInherited: "mech_weapons.is_skin_inherited",
}

// Generated where

var MechWeaponWhere = struct {
	ID              whereHelperstring
	ChassisID       whereHelperstring
	WeaponID        whereHelperstring
	SlotNumber      whereHelperint
	DeletedAt       whereHelpernull_Time
	UpdatedAt       whereHelpertime_Time
	CreatedAt       whereHelpertime_Time
	AllowMelee      whereHelperbool
	IsSkinInherited whereHelperbool
}{
	ID:              whereHelperstring{field: "\"mech_weapons\".\"id\""},
	ChassisID:       whereHelperstring{field: "\"mech_weapons\".\"chassis_id\""},
	WeaponID:        whereHelperstring{field: "\"mech_weapons\".\"weapon_id\""},
	SlotNumber:      whereHelperint{field: "\"mech_weapons\".\"slot_number\""},
	DeletedAt:       whereHelpernull_Time{field: "\"mech_weapons\".\"deleted_at\""},
	UpdatedAt:       whereHelpertime_Time{field: "\"mech_weapons\".\"updated_at\""},
	CreatedAt:       whereHelpertime_Time{field: "\"mech_weapons\".\"created_at\""},
	AllowMelee:      whereHelperbool{field: "\"mech_weapons\".\"allow_melee\""},
	IsSkinInherited: whereHelperbool{field: "\"mech_weapons\".\"is_skin_inherited\""},
}

// MechWeaponRels is where relationship names are stored.
var MechWeaponRels = struct {
	Chassis string
	Weapon  string
}{
	Chassis: "Chassis",
	Weapon:  "Weapon",
}

// mechWeaponR is where relationships are stored.
type mechWeaponR struct {
	Chassis *Mech   `boiler:"Chassis" boil:"Chassis" json:"Chassis" toml:"Chassis" yaml:"Chassis"`
	Weapon  *Weapon `boiler:"Weapon" boil:"Weapon" json:"Weapon" toml:"Weapon" yaml:"Weapon"`
}

// NewStruct creates a new relationship struct
func (*mechWeaponR) NewStruct() *mechWeaponR {
	return &mechWeaponR{}
}

// mechWeaponL is where Load methods for each relationship are stored.
type mechWeaponL struct{}

var (
	mechWeaponAllColumns            = []string{"id", "chassis_id", "weapon_id", "slot_number", "deleted_at", "updated_at", "created_at", "allow_melee", "is_skin_inherited"}
	mechWeaponColumnsWithoutDefault = []string{"chassis_id", "weapon_id", "slot_number"}
	mechWeaponColumnsWithDefault    = []string{"id", "deleted_at", "updated_at", "created_at", "allow_melee", "is_skin_inherited"}
	mechWeaponPrimaryKeyColumns     = []string{"id"}
	mechWeaponGeneratedColumns      = []string{}
)

type (
	// MechWeaponSlice is an alias for a slice of pointers to MechWeapon.
	// This should almost always be used instead of []MechWeapon.
	MechWeaponSlice []*MechWeapon
	// MechWeaponHook is the signature for custom MechWeapon hook methods
	MechWeaponHook func(boil.Executor, *MechWeapon) error

	mechWeaponQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mechWeaponType                 = reflect.TypeOf(&MechWeapon{})
	mechWeaponMapping              = queries.MakeStructMapping(mechWeaponType)
	mechWeaponPrimaryKeyMapping, _ = queries.BindMapping(mechWeaponType, mechWeaponMapping, mechWeaponPrimaryKeyColumns)
	mechWeaponInsertCacheMut       sync.RWMutex
	mechWeaponInsertCache          = make(map[string]insertCache)
	mechWeaponUpdateCacheMut       sync.RWMutex
	mechWeaponUpdateCache          = make(map[string]updateCache)
	mechWeaponUpsertCacheMut       sync.RWMutex
	mechWeaponUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mechWeaponAfterSelectHooks []MechWeaponHook

var mechWeaponBeforeInsertHooks []MechWeaponHook
var mechWeaponAfterInsertHooks []MechWeaponHook

var mechWeaponBeforeUpdateHooks []MechWeaponHook
var mechWeaponAfterUpdateHooks []MechWeaponHook

var mechWeaponBeforeDeleteHooks []MechWeaponHook
var mechWeaponAfterDeleteHooks []MechWeaponHook

var mechWeaponBeforeUpsertHooks []MechWeaponHook
var mechWeaponAfterUpsertHooks []MechWeaponHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MechWeapon) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range mechWeaponAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MechWeapon) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechWeaponBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MechWeapon) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechWeaponAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MechWeapon) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechWeaponBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MechWeapon) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechWeaponAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MechWeapon) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechWeaponBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MechWeapon) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechWeaponAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MechWeapon) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechWeaponBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MechWeapon) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechWeaponAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMechWeaponHook registers your hook function for all future operations.
func AddMechWeaponHook(hookPoint boil.HookPoint, mechWeaponHook MechWeaponHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mechWeaponAfterSelectHooks = append(mechWeaponAfterSelectHooks, mechWeaponHook)
	case boil.BeforeInsertHook:
		mechWeaponBeforeInsertHooks = append(mechWeaponBeforeInsertHooks, mechWeaponHook)
	case boil.AfterInsertHook:
		mechWeaponAfterInsertHooks = append(mechWeaponAfterInsertHooks, mechWeaponHook)
	case boil.BeforeUpdateHook:
		mechWeaponBeforeUpdateHooks = append(mechWeaponBeforeUpdateHooks, mechWeaponHook)
	case boil.AfterUpdateHook:
		mechWeaponAfterUpdateHooks = append(mechWeaponAfterUpdateHooks, mechWeaponHook)
	case boil.BeforeDeleteHook:
		mechWeaponBeforeDeleteHooks = append(mechWeaponBeforeDeleteHooks, mechWeaponHook)
	case boil.AfterDeleteHook:
		mechWeaponAfterDeleteHooks = append(mechWeaponAfterDeleteHooks, mechWeaponHook)
	case boil.BeforeUpsertHook:
		mechWeaponBeforeUpsertHooks = append(mechWeaponBeforeUpsertHooks, mechWeaponHook)
	case boil.AfterUpsertHook:
		mechWeaponAfterUpsertHooks = append(mechWeaponAfterUpsertHooks, mechWeaponHook)
	}
}

// One returns a single mechWeapon record from the query.
func (q mechWeaponQuery) One(exec boil.Executor) (*MechWeapon, error) {
	o := &MechWeapon{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for mech_weapons")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MechWeapon records from the query.
func (q mechWeaponQuery) All(exec boil.Executor) (MechWeaponSlice, error) {
	var o []*MechWeapon

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to MechWeapon slice")
	}

	if len(mechWeaponAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MechWeapon records in the query.
func (q mechWeaponQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count mech_weapons rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mechWeaponQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if mech_weapons exists")
	}

	return count > 0, nil
}

// Chassis pointed to by the foreign key.
func (o *MechWeapon) Chassis(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ChassisID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// Weapon pointed to by the foreign key.
func (o *MechWeapon) Weapon(mods ...qm.QueryMod) weaponQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.WeaponID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Weapons(queryMods...)
	queries.SetFrom(query.Query, "\"weapons\"")

	return query
}

// LoadChassis allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechWeaponL) LoadChassis(e boil.Executor, singular bool, maybeMechWeapon interface{}, mods queries.Applicator) error {
	var slice []*MechWeapon
	var object *MechWeapon

	if singular {
		object = maybeMechWeapon.(*MechWeapon)
	} else {
		slice = *maybeMechWeapon.(*[]*MechWeapon)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechWeaponR{}
		}
		args = append(args, object.ChassisID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechWeaponR{}
			}

			for _, a := range args {
				if a == obj.ChassisID {
					continue Outer
				}
			}

			args = append(args, obj.ChassisID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(mechWeaponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Chassis = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.ChassisMechWeapons = append(foreign.R.ChassisMechWeapons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChassisID == foreign.ID {
				local.R.Chassis = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.ChassisMechWeapons = append(foreign.R.ChassisMechWeapons, local)
				break
			}
		}
	}

	return nil
}

// LoadWeapon allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechWeaponL) LoadWeapon(e boil.Executor, singular bool, maybeMechWeapon interface{}, mods queries.Applicator) error {
	var slice []*MechWeapon
	var object *MechWeapon

	if singular {
		object = maybeMechWeapon.(*MechWeapon)
	} else {
		slice = *maybeMechWeapon.(*[]*MechWeapon)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechWeaponR{}
		}
		args = append(args, object.WeaponID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechWeaponR{}
			}

			for _, a := range args {
				if a == obj.WeaponID {
					continue Outer
				}
			}

			args = append(args, obj.WeaponID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`weapons`),
		qm.WhereIn(`weapons.id in ?`, args...),
		qmhelper.WhereIsNull(`weapons.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Weapon")
	}

	var resultSlice []*Weapon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Weapon")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for weapons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for weapons")
	}

	if len(mechWeaponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Weapon = foreign
		if foreign.R == nil {
			foreign.R = &weaponR{}
		}
		foreign.R.MechWeapon = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WeaponID == foreign.ID {
				local.R.Weapon = foreign
				if foreign.R == nil {
					foreign.R = &weaponR{}
				}
				foreign.R.MechWeapon = local
				break
			}
		}
	}

	return nil
}

// SetChassis of the mechWeapon to the related item.
// Sets o.R.Chassis to related.
// Adds o to related.R.ChassisMechWeapons.
func (o *MechWeapon) SetChassis(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mech_weapons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"chassis_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechWeaponPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChassisID = related.ID
	if o.R == nil {
		o.R = &mechWeaponR{
			Chassis: related,
		}
	} else {
		o.R.Chassis = related
	}

	if related.R == nil {
		related.R = &mechR{
			ChassisMechWeapons: MechWeaponSlice{o},
		}
	} else {
		related.R.ChassisMechWeapons = append(related.R.ChassisMechWeapons, o)
	}

	return nil
}

// SetWeapon of the mechWeapon to the related item.
// Sets o.R.Weapon to related.
// Adds o to related.R.MechWeapon.
func (o *MechWeapon) SetWeapon(exec boil.Executor, insert bool, related *Weapon) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mech_weapons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"weapon_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechWeaponPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.WeaponID = related.ID
	if o.R == nil {
		o.R = &mechWeaponR{
			Weapon: related,
		}
	} else {
		o.R.Weapon = related
	}

	if related.R == nil {
		related.R = &weaponR{
			MechWeapon: o,
		}
	} else {
		related.R.MechWeapon = o
	}

	return nil
}

// MechWeapons retrieves all the records using an executor.
func MechWeapons(mods ...qm.QueryMod) mechWeaponQuery {
	mods = append(mods, qm.From("\"mech_weapons\""), qmhelper.WhereIsNull("\"mech_weapons\".\"deleted_at\""))
	return mechWeaponQuery{NewQuery(mods...)}
}

// FindMechWeapon retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMechWeapon(exec boil.Executor, iD string, selectCols ...string) (*MechWeapon, error) {
	mechWeaponObj := &MechWeapon{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mech_weapons\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, mechWeaponObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from mech_weapons")
	}

	if err = mechWeaponObj.doAfterSelectHooks(exec); err != nil {
		return mechWeaponObj, err
	}

	return mechWeaponObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MechWeapon) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mech_weapons provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechWeaponColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mechWeaponInsertCacheMut.RLock()
	cache, cached := mechWeaponInsertCache[key]
	mechWeaponInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mechWeaponAllColumns,
			mechWeaponColumnsWithDefault,
			mechWeaponColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mechWeaponType, mechWeaponMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mechWeaponType, mechWeaponMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mech_weapons\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mech_weapons\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into mech_weapons")
	}

	if !cached {
		mechWeaponInsertCacheMut.Lock()
		mechWeaponInsertCache[key] = cache
		mechWeaponInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the MechWeapon.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MechWeapon) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mechWeaponUpdateCacheMut.RLock()
	cache, cached := mechWeaponUpdateCache[key]
	mechWeaponUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mechWeaponAllColumns,
			mechWeaponPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update mech_weapons, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mech_weapons\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mechWeaponPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mechWeaponType, mechWeaponMapping, append(wl, mechWeaponPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update mech_weapons row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for mech_weapons")
	}

	if !cached {
		mechWeaponUpdateCacheMut.Lock()
		mechWeaponUpdateCache[key] = cache
		mechWeaponUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mechWeaponQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for mech_weapons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for mech_weapons")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MechWeaponSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechWeaponPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mech_weapons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mechWeaponPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in mechWeapon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all mechWeapon")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MechWeapon) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mech_weapons provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechWeaponColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mechWeaponUpsertCacheMut.RLock()
	cache, cached := mechWeaponUpsertCache[key]
	mechWeaponUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mechWeaponAllColumns,
			mechWeaponColumnsWithDefault,
			mechWeaponColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mechWeaponAllColumns,
			mechWeaponPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert mech_weapons, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mechWeaponPrimaryKeyColumns))
			copy(conflict, mechWeaponPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mech_weapons\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mechWeaponType, mechWeaponMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mechWeaponType, mechWeaponMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert mech_weapons")
	}

	if !cached {
		mechWeaponUpsertCacheMut.Lock()
		mechWeaponUpsertCache[key] = cache
		mechWeaponUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single MechWeapon record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MechWeapon) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no MechWeapon provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mechWeaponPrimaryKeyMapping)
		sql = "DELETE FROM \"mech_weapons\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"mech_weapons\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(mechWeaponType, mechWeaponMapping, append(wl, mechWeaponPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from mech_weapons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for mech_weapons")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mechWeaponQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no mechWeaponQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mech_weapons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mech_weapons")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MechWeaponSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mechWeaponBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechWeaponPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"mech_weapons\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechWeaponPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechWeaponPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"mech_weapons\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, mechWeaponPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mechWeapon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mech_weapons")
	}

	if len(mechWeaponAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MechWeapon) Reload(exec boil.Executor) error {
	ret, err := FindMechWeapon(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MechWeaponSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MechWeaponSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechWeaponPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mech_weapons\".* FROM \"mech_weapons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechWeaponPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in MechWeaponSlice")
	}

	*o = slice

	return nil
}

// MechWeaponExists checks if the MechWeapon row exists.
func MechWeaponExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mech_weapons\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if mech_weapons exists")
	}

	return exists, nil
}
