// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// EnergyCore is an object representing the database table.
type EnergyCore struct {
	ID               string          `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	CollectionItemID string          `boiler:"collection_item_id" boil:"collection_item_id" json:"collection_item_id" toml:"collection_item_id" yaml:"collection_item_id"`
	OwnerID          string          `boiler:"owner_id" boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	Label            string          `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	Size             string          `boiler:"size" boil:"size" json:"size" toml:"size" yaml:"size"`
	Capacity         decimal.Decimal `boiler:"capacity" boil:"capacity" json:"capacity" toml:"capacity" yaml:"capacity"`
	MaxDrawRate      decimal.Decimal `boiler:"max_draw_rate" boil:"max_draw_rate" json:"max_draw_rate" toml:"max_draw_rate" yaml:"max_draw_rate"`
	RechargeRate     decimal.Decimal `boiler:"recharge_rate" boil:"recharge_rate" json:"recharge_rate" toml:"recharge_rate" yaml:"recharge_rate"`
	Armour           decimal.Decimal `boiler:"armour" boil:"armour" json:"armour" toml:"armour" yaml:"armour"`
	MaxHitpoints     decimal.Decimal `boiler:"max_hitpoints" boil:"max_hitpoints" json:"max_hitpoints" toml:"max_hitpoints" yaml:"max_hitpoints"`
	Tier             null.String     `boiler:"tier" boil:"tier" json:"tier,omitempty" toml:"tier" yaml:"tier,omitempty"`
	EquippedOn       null.String     `boiler:"equipped_on" boil:"equipped_on" json:"equipped_on,omitempty" toml:"equipped_on" yaml:"equipped_on,omitempty"`
	CreatedAt        time.Time       `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *energyCoreR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L energyCoreL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EnergyCoreColumns = struct {
	ID               string
	CollectionItemID string
	OwnerID          string
	Label            string
	Size             string
	Capacity         string
	MaxDrawRate      string
	RechargeRate     string
	Armour           string
	MaxHitpoints     string
	Tier             string
	EquippedOn       string
	CreatedAt        string
}{
	ID:               "id",
	CollectionItemID: "collection_item_id",
	OwnerID:          "owner_id",
	Label:            "label",
	Size:             "size",
	Capacity:         "capacity",
	MaxDrawRate:      "max_draw_rate",
	RechargeRate:     "recharge_rate",
	Armour:           "armour",
	MaxHitpoints:     "max_hitpoints",
	Tier:             "tier",
	EquippedOn:       "equipped_on",
	CreatedAt:        "created_at",
}

var EnergyCoreTableColumns = struct {
	ID               string
	CollectionItemID string
	OwnerID          string
	Label            string
	Size             string
	Capacity         string
	MaxDrawRate      string
	RechargeRate     string
	Armour           string
	MaxHitpoints     string
	Tier             string
	EquippedOn       string
	CreatedAt        string
}{
	ID:               "energy_cores.id",
	CollectionItemID: "energy_cores.collection_item_id",
	OwnerID:          "energy_cores.owner_id",
	Label:            "energy_cores.label",
	Size:             "energy_cores.size",
	Capacity:         "energy_cores.capacity",
	MaxDrawRate:      "energy_cores.max_draw_rate",
	RechargeRate:     "energy_cores.recharge_rate",
	Armour:           "energy_cores.armour",
	MaxHitpoints:     "energy_cores.max_hitpoints",
	Tier:             "energy_cores.tier",
	EquippedOn:       "energy_cores.equipped_on",
	CreatedAt:        "energy_cores.created_at",
}

// Generated where

var EnergyCoreWhere = struct {
	ID               whereHelperstring
	CollectionItemID whereHelperstring
	OwnerID          whereHelperstring
	Label            whereHelperstring
	Size             whereHelperstring
	Capacity         whereHelperdecimal_Decimal
	MaxDrawRate      whereHelperdecimal_Decimal
	RechargeRate     whereHelperdecimal_Decimal
	Armour           whereHelperdecimal_Decimal
	MaxHitpoints     whereHelperdecimal_Decimal
	Tier             whereHelpernull_String
	EquippedOn       whereHelpernull_String
	CreatedAt        whereHelpertime_Time
}{
	ID:               whereHelperstring{field: "\"energy_cores\".\"id\""},
	CollectionItemID: whereHelperstring{field: "\"energy_cores\".\"collection_item_id\""},
	OwnerID:          whereHelperstring{field: "\"energy_cores\".\"owner_id\""},
	Label:            whereHelperstring{field: "\"energy_cores\".\"label\""},
	Size:             whereHelperstring{field: "\"energy_cores\".\"size\""},
	Capacity:         whereHelperdecimal_Decimal{field: "\"energy_cores\".\"capacity\""},
	MaxDrawRate:      whereHelperdecimal_Decimal{field: "\"energy_cores\".\"max_draw_rate\""},
	RechargeRate:     whereHelperdecimal_Decimal{field: "\"energy_cores\".\"recharge_rate\""},
	Armour:           whereHelperdecimal_Decimal{field: "\"energy_cores\".\"armour\""},
	MaxHitpoints:     whereHelperdecimal_Decimal{field: "\"energy_cores\".\"max_hitpoints\""},
	Tier:             whereHelpernull_String{field: "\"energy_cores\".\"tier\""},
	EquippedOn:       whereHelpernull_String{field: "\"energy_cores\".\"equipped_on\""},
	CreatedAt:        whereHelpertime_Time{field: "\"energy_cores\".\"created_at\""},
}

// EnergyCoreRels is where relationship names are stored.
var EnergyCoreRels = struct {
	CollectionItem string
	EquippedOnMech string
	Owner          string
	Mechs          string
}{
	CollectionItem: "CollectionItem",
	EquippedOnMech: "EquippedOnMech",
	Owner:          "Owner",
	Mechs:          "Mechs",
}

// energyCoreR is where relationships are stored.
type energyCoreR struct {
	CollectionItem *CollectionItem `boiler:"CollectionItem" boil:"CollectionItem" json:"CollectionItem" toml:"CollectionItem" yaml:"CollectionItem"`
	EquippedOnMech *Mech           `boiler:"EquippedOnMech" boil:"EquippedOnMech" json:"EquippedOnMech" toml:"EquippedOnMech" yaml:"EquippedOnMech"`
	Owner          *Player         `boiler:"Owner" boil:"Owner" json:"Owner" toml:"Owner" yaml:"Owner"`
	Mechs          MechSlice       `boiler:"Mechs" boil:"Mechs" json:"Mechs" toml:"Mechs" yaml:"Mechs"`
}

// NewStruct creates a new relationship struct
func (*energyCoreR) NewStruct() *energyCoreR {
	return &energyCoreR{}
}

// energyCoreL is where Load methods for each relationship are stored.
type energyCoreL struct{}

var (
	energyCoreAllColumns            = []string{"id", "collection_item_id", "owner_id", "label", "size", "capacity", "max_draw_rate", "recharge_rate", "armour", "max_hitpoints", "tier", "equipped_on", "created_at"}
	energyCoreColumnsWithoutDefault = []string{"collection_item_id", "owner_id", "label"}
	energyCoreColumnsWithDefault    = []string{"id", "size", "capacity", "max_draw_rate", "recharge_rate", "armour", "max_hitpoints", "tier", "equipped_on", "created_at"}
	energyCorePrimaryKeyColumns     = []string{"id"}
	energyCoreGeneratedColumns      = []string{}
)

type (
	// EnergyCoreSlice is an alias for a slice of pointers to EnergyCore.
	// This should almost always be used instead of []EnergyCore.
	EnergyCoreSlice []*EnergyCore
	// EnergyCoreHook is the signature for custom EnergyCore hook methods
	EnergyCoreHook func(boil.Executor, *EnergyCore) error

	energyCoreQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	energyCoreType                 = reflect.TypeOf(&EnergyCore{})
	energyCoreMapping              = queries.MakeStructMapping(energyCoreType)
	energyCorePrimaryKeyMapping, _ = queries.BindMapping(energyCoreType, energyCoreMapping, energyCorePrimaryKeyColumns)
	energyCoreInsertCacheMut       sync.RWMutex
	energyCoreInsertCache          = make(map[string]insertCache)
	energyCoreUpdateCacheMut       sync.RWMutex
	energyCoreUpdateCache          = make(map[string]updateCache)
	energyCoreUpsertCacheMut       sync.RWMutex
	energyCoreUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var energyCoreAfterSelectHooks []EnergyCoreHook

var energyCoreBeforeInsertHooks []EnergyCoreHook
var energyCoreAfterInsertHooks []EnergyCoreHook

var energyCoreBeforeUpdateHooks []EnergyCoreHook
var energyCoreAfterUpdateHooks []EnergyCoreHook

var energyCoreBeforeDeleteHooks []EnergyCoreHook
var energyCoreAfterDeleteHooks []EnergyCoreHook

var energyCoreBeforeUpsertHooks []EnergyCoreHook
var energyCoreAfterUpsertHooks []EnergyCoreHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EnergyCore) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range energyCoreAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EnergyCore) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range energyCoreBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EnergyCore) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range energyCoreAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EnergyCore) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range energyCoreBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EnergyCore) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range energyCoreAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EnergyCore) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range energyCoreBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EnergyCore) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range energyCoreAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EnergyCore) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range energyCoreBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EnergyCore) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range energyCoreAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEnergyCoreHook registers your hook function for all future operations.
func AddEnergyCoreHook(hookPoint boil.HookPoint, energyCoreHook EnergyCoreHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		energyCoreAfterSelectHooks = append(energyCoreAfterSelectHooks, energyCoreHook)
	case boil.BeforeInsertHook:
		energyCoreBeforeInsertHooks = append(energyCoreBeforeInsertHooks, energyCoreHook)
	case boil.AfterInsertHook:
		energyCoreAfterInsertHooks = append(energyCoreAfterInsertHooks, energyCoreHook)
	case boil.BeforeUpdateHook:
		energyCoreBeforeUpdateHooks = append(energyCoreBeforeUpdateHooks, energyCoreHook)
	case boil.AfterUpdateHook:
		energyCoreAfterUpdateHooks = append(energyCoreAfterUpdateHooks, energyCoreHook)
	case boil.BeforeDeleteHook:
		energyCoreBeforeDeleteHooks = append(energyCoreBeforeDeleteHooks, energyCoreHook)
	case boil.AfterDeleteHook:
		energyCoreAfterDeleteHooks = append(energyCoreAfterDeleteHooks, energyCoreHook)
	case boil.BeforeUpsertHook:
		energyCoreBeforeUpsertHooks = append(energyCoreBeforeUpsertHooks, energyCoreHook)
	case boil.AfterUpsertHook:
		energyCoreAfterUpsertHooks = append(energyCoreAfterUpsertHooks, energyCoreHook)
	}
}

// One returns a single energyCore record from the query.
func (q energyCoreQuery) One(exec boil.Executor) (*EnergyCore, error) {
	o := &EnergyCore{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for energy_cores")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all EnergyCore records from the query.
func (q energyCoreQuery) All(exec boil.Executor) (EnergyCoreSlice, error) {
	var o []*EnergyCore

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to EnergyCore slice")
	}

	if len(energyCoreAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all EnergyCore records in the query.
func (q energyCoreQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count energy_cores rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q energyCoreQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if energy_cores exists")
	}

	return count > 0, nil
}

// CollectionItem pointed to by the foreign key.
func (o *EnergyCore) CollectionItem(mods ...qm.QueryMod) collectionItemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CollectionItemID),
	}

	queryMods = append(queryMods, mods...)

	query := CollectionItems(queryMods...)
	queries.SetFrom(query.Query, "\"collection_items\"")

	return query
}

// EquippedOnMech pointed to by the foreign key.
func (o *EnergyCore) EquippedOnMech(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EquippedOn),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// Owner pointed to by the foreign key.
func (o *EnergyCore) Owner(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OwnerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// Mechs retrieves all the mech's Mechs with an executor.
func (o *EnergyCore) Mechs(mods ...qm.QueryMod) mechQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mechs\".\"energy_core_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"mechs\".\"deleted_at\""),
	)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mechs\".*"})
	}

	return query
}

// LoadCollectionItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (energyCoreL) LoadCollectionItem(e boil.Executor, singular bool, maybeEnergyCore interface{}, mods queries.Applicator) error {
	var slice []*EnergyCore
	var object *EnergyCore

	if singular {
		object = maybeEnergyCore.(*EnergyCore)
	} else {
		slice = *maybeEnergyCore.(*[]*EnergyCore)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &energyCoreR{}
		}
		args = append(args, object.CollectionItemID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &energyCoreR{}
			}

			for _, a := range args {
				if a == obj.CollectionItemID {
					continue Outer
				}
			}

			args = append(args, obj.CollectionItemID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`collection_items`),
		qm.WhereIn(`collection_items.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CollectionItem")
	}

	var resultSlice []*CollectionItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CollectionItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for collection_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collection_items")
	}

	if len(energyCoreAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CollectionItem = foreign
		if foreign.R == nil {
			foreign.R = &collectionItemR{}
		}
		foreign.R.EnergyCores = append(foreign.R.EnergyCores, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CollectionItemID == foreign.ID {
				local.R.CollectionItem = foreign
				if foreign.R == nil {
					foreign.R = &collectionItemR{}
				}
				foreign.R.EnergyCores = append(foreign.R.EnergyCores, local)
				break
			}
		}
	}

	return nil
}

// LoadEquippedOnMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (energyCoreL) LoadEquippedOnMech(e boil.Executor, singular bool, maybeEnergyCore interface{}, mods queries.Applicator) error {
	var slice []*EnergyCore
	var object *EnergyCore

	if singular {
		object = maybeEnergyCore.(*EnergyCore)
	} else {
		slice = *maybeEnergyCore.(*[]*EnergyCore)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &energyCoreR{}
		}
		if !queries.IsNil(object.EquippedOn) {
			args = append(args, object.EquippedOn)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &energyCoreR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.EquippedOn) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.EquippedOn) {
				args = append(args, obj.EquippedOn)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(energyCoreAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EquippedOnMech = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.EquippedOnEnergyCores = append(foreign.R.EquippedOnEnergyCores, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.EquippedOn, foreign.ID) {
				local.R.EquippedOnMech = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.EquippedOnEnergyCores = append(foreign.R.EquippedOnEnergyCores, local)
				break
			}
		}
	}

	return nil
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (energyCoreL) LoadOwner(e boil.Executor, singular bool, maybeEnergyCore interface{}, mods queries.Applicator) error {
	var slice []*EnergyCore
	var object *EnergyCore

	if singular {
		object = maybeEnergyCore.(*EnergyCore)
	} else {
		slice = *maybeEnergyCore.(*[]*EnergyCore)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &energyCoreR{}
		}
		args = append(args, object.OwnerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &energyCoreR{}
			}

			for _, a := range args {
				if a == obj.OwnerID {
					continue Outer
				}
			}

			args = append(args, obj.OwnerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(energyCoreAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Owner = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.OwnerEnergyCores = append(foreign.R.OwnerEnergyCores, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerID == foreign.ID {
				local.R.Owner = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.OwnerEnergyCores = append(foreign.R.OwnerEnergyCores, local)
				break
			}
		}
	}

	return nil
}

// LoadMechs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (energyCoreL) LoadMechs(e boil.Executor, singular bool, maybeEnergyCore interface{}, mods queries.Applicator) error {
	var slice []*EnergyCore
	var object *EnergyCore

	if singular {
		object = maybeEnergyCore.(*EnergyCore)
	} else {
		slice = *maybeEnergyCore.(*[]*EnergyCore)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &energyCoreR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &energyCoreR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.energy_core_id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mechs")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mechs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Mechs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mechR{}
			}
			foreign.R.EnergyCore = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.EnergyCoreID) {
				local.R.Mechs = append(local.R.Mechs, foreign)
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.EnergyCore = local
				break
			}
		}
	}

	return nil
}

// SetCollectionItem of the energyCore to the related item.
// Sets o.R.CollectionItem to related.
// Adds o to related.R.EnergyCores.
func (o *EnergyCore) SetCollectionItem(exec boil.Executor, insert bool, related *CollectionItem) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"energy_cores\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"collection_item_id"}),
		strmangle.WhereClause("\"", "\"", 2, energyCorePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CollectionItemID = related.ID
	if o.R == nil {
		o.R = &energyCoreR{
			CollectionItem: related,
		}
	} else {
		o.R.CollectionItem = related
	}

	if related.R == nil {
		related.R = &collectionItemR{
			EnergyCores: EnergyCoreSlice{o},
		}
	} else {
		related.R.EnergyCores = append(related.R.EnergyCores, o)
	}

	return nil
}

// SetEquippedOnMech of the energyCore to the related item.
// Sets o.R.EquippedOnMech to related.
// Adds o to related.R.EquippedOnEnergyCores.
func (o *EnergyCore) SetEquippedOnMech(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"energy_cores\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"equipped_on"}),
		strmangle.WhereClause("\"", "\"", 2, energyCorePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.EquippedOn, related.ID)
	if o.R == nil {
		o.R = &energyCoreR{
			EquippedOnMech: related,
		}
	} else {
		o.R.EquippedOnMech = related
	}

	if related.R == nil {
		related.R = &mechR{
			EquippedOnEnergyCores: EnergyCoreSlice{o},
		}
	} else {
		related.R.EquippedOnEnergyCores = append(related.R.EquippedOnEnergyCores, o)
	}

	return nil
}

// RemoveEquippedOnMech relationship.
// Sets o.R.EquippedOnMech to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *EnergyCore) RemoveEquippedOnMech(exec boil.Executor, related *Mech) error {
	var err error

	queries.SetScanner(&o.EquippedOn, nil)
	if _, err = o.Update(exec, boil.Whitelist("equipped_on")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.EquippedOnMech = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.EquippedOnEnergyCores {
		if queries.Equal(o.EquippedOn, ri.EquippedOn) {
			continue
		}

		ln := len(related.R.EquippedOnEnergyCores)
		if ln > 1 && i < ln-1 {
			related.R.EquippedOnEnergyCores[i] = related.R.EquippedOnEnergyCores[ln-1]
		}
		related.R.EquippedOnEnergyCores = related.R.EquippedOnEnergyCores[:ln-1]
		break
	}
	return nil
}

// SetOwner of the energyCore to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerEnergyCores.
func (o *EnergyCore) SetOwner(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"energy_cores\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
		strmangle.WhereClause("\"", "\"", 2, energyCorePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerID = related.ID
	if o.R == nil {
		o.R = &energyCoreR{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &playerR{
			OwnerEnergyCores: EnergyCoreSlice{o},
		}
	} else {
		related.R.OwnerEnergyCores = append(related.R.OwnerEnergyCores, o)
	}

	return nil
}

// AddMechs adds the given related objects to the existing relationships
// of the energy_core, optionally inserting them as new records.
// Appends related to o.R.Mechs.
// Sets related.R.EnergyCore appropriately.
func (o *EnergyCore) AddMechs(exec boil.Executor, insert bool, related ...*Mech) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EnergyCoreID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mechs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"energy_core_id"}),
				strmangle.WhereClause("\"", "\"", 2, mechPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EnergyCoreID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &energyCoreR{
			Mechs: related,
		}
	} else {
		o.R.Mechs = append(o.R.Mechs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mechR{
				EnergyCore: o,
			}
		} else {
			rel.R.EnergyCore = o
		}
	}
	return nil
}

// SetMechs removes all previously related items of the
// energy_core replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.EnergyCore's Mechs accordingly.
// Replaces o.R.Mechs with related.
// Sets related.R.EnergyCore's Mechs accordingly.
func (o *EnergyCore) SetMechs(exec boil.Executor, insert bool, related ...*Mech) error {
	query := "update \"mechs\" set \"energy_core_id\" = null where \"energy_core_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Mechs {
			queries.SetScanner(&rel.EnergyCoreID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.EnergyCore = nil
		}

		o.R.Mechs = nil
	}
	return o.AddMechs(exec, insert, related...)
}

// RemoveMechs relationships from objects passed in.
// Removes related items from R.Mechs (uses pointer comparison, removal does not keep order)
// Sets related.R.EnergyCore.
func (o *EnergyCore) RemoveMechs(exec boil.Executor, related ...*Mech) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EnergyCoreID, nil)
		if rel.R != nil {
			rel.R.EnergyCore = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("energy_core_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Mechs {
			if rel != ri {
				continue
			}

			ln := len(o.R.Mechs)
			if ln > 1 && i < ln-1 {
				o.R.Mechs[i] = o.R.Mechs[ln-1]
			}
			o.R.Mechs = o.R.Mechs[:ln-1]
			break
		}
	}

	return nil
}

// EnergyCores retrieves all the records using an executor.
func EnergyCores(mods ...qm.QueryMod) energyCoreQuery {
	mods = append(mods, qm.From("\"energy_cores\""))
	return energyCoreQuery{NewQuery(mods...)}
}

// FindEnergyCore retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEnergyCore(exec boil.Executor, iD string, selectCols ...string) (*EnergyCore, error) {
	energyCoreObj := &EnergyCore{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"energy_cores\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, energyCoreObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from energy_cores")
	}

	if err = energyCoreObj.doAfterSelectHooks(exec); err != nil {
		return energyCoreObj, err
	}

	return energyCoreObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EnergyCore) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no energy_cores provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(energyCoreColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	energyCoreInsertCacheMut.RLock()
	cache, cached := energyCoreInsertCache[key]
	energyCoreInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			energyCoreAllColumns,
			energyCoreColumnsWithDefault,
			energyCoreColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(energyCoreType, energyCoreMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(energyCoreType, energyCoreMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"energy_cores\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"energy_cores\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into energy_cores")
	}

	if !cached {
		energyCoreInsertCacheMut.Lock()
		energyCoreInsertCache[key] = cache
		energyCoreInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the EnergyCore.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EnergyCore) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	energyCoreUpdateCacheMut.RLock()
	cache, cached := energyCoreUpdateCache[key]
	energyCoreUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			energyCoreAllColumns,
			energyCorePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update energy_cores, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"energy_cores\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, energyCorePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(energyCoreType, energyCoreMapping, append(wl, energyCorePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update energy_cores row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for energy_cores")
	}

	if !cached {
		energyCoreUpdateCacheMut.Lock()
		energyCoreUpdateCache[key] = cache
		energyCoreUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q energyCoreQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for energy_cores")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for energy_cores")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EnergyCoreSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), energyCorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"energy_cores\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, energyCorePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in energyCore slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all energyCore")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EnergyCore) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no energy_cores provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(energyCoreColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	energyCoreUpsertCacheMut.RLock()
	cache, cached := energyCoreUpsertCache[key]
	energyCoreUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			energyCoreAllColumns,
			energyCoreColumnsWithDefault,
			energyCoreColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			energyCoreAllColumns,
			energyCorePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert energy_cores, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(energyCorePrimaryKeyColumns))
			copy(conflict, energyCorePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"energy_cores\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(energyCoreType, energyCoreMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(energyCoreType, energyCoreMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert energy_cores")
	}

	if !cached {
		energyCoreUpsertCacheMut.Lock()
		energyCoreUpsertCache[key] = cache
		energyCoreUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single EnergyCore record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EnergyCore) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no EnergyCore provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), energyCorePrimaryKeyMapping)
	sql := "DELETE FROM \"energy_cores\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from energy_cores")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for energy_cores")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q energyCoreQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no energyCoreQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from energy_cores")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for energy_cores")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EnergyCoreSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(energyCoreBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), energyCorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"energy_cores\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, energyCorePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from energyCore slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for energy_cores")
	}

	if len(energyCoreAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EnergyCore) Reload(exec boil.Executor) error {
	ret, err := FindEnergyCore(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EnergyCoreSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EnergyCoreSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), energyCorePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"energy_cores\".* FROM \"energy_cores\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, energyCorePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in EnergyCoreSlice")
	}

	*o = slice

	return nil
}

// EnergyCoreExists checks if the EnergyCore row exists.
func EnergyCoreExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"energy_cores\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if energy_cores exists")
	}

	return exists, nil
}
