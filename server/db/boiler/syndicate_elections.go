// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SyndicateElection is an object representing the database table.
type SyndicateElection struct {
	ID                       string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	SyndicateID              string      `boiler:"syndicate_id" boil:"syndicate_id" json:"syndicate_id" toml:"syndicate_id" yaml:"syndicate_id"`
	Type                     string      `boiler:"type" boil:"type" json:"type" toml:"type" yaml:"type"`
	ParentElectionID         null.String `boiler:"parent_election_id" boil:"parent_election_id" json:"parent_election_id,omitempty" toml:"parent_election_id" yaml:"parent_election_id,omitempty"`
	WinnerID                 null.String `boiler:"winner_id" boil:"winner_id" json:"winner_id,omitempty" toml:"winner_id" yaml:"winner_id,omitempty"`
	StartedAt                time.Time   `boiler:"started_at" boil:"started_at" json:"started_at" toml:"started_at" yaml:"started_at"`
	CandidateRegisterCloseAt time.Time   `boiler:"candidate_register_close_at" boil:"candidate_register_close_at" json:"candidate_register_close_at" toml:"candidate_register_close_at" yaml:"candidate_register_close_at"`
	EndAt                    time.Time   `boiler:"end_at" boil:"end_at" json:"end_at" toml:"end_at" yaml:"end_at"`
	CreatedAt                time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt                null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *syndicateElectionR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L syndicateElectionL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SyndicateElectionColumns = struct {
	ID                       string
	SyndicateID              string
	Type                     string
	ParentElectionID         string
	WinnerID                 string
	StartedAt                string
	CandidateRegisterCloseAt string
	EndAt                    string
	CreatedAt                string
	UpdatedAt                string
	DeletedAt                string
}{
	ID:                       "id",
	SyndicateID:              "syndicate_id",
	Type:                     "type",
	ParentElectionID:         "parent_election_id",
	WinnerID:                 "winner_id",
	StartedAt:                "started_at",
	CandidateRegisterCloseAt: "candidate_register_close_at",
	EndAt:                    "end_at",
	CreatedAt:                "created_at",
	UpdatedAt:                "updated_at",
	DeletedAt:                "deleted_at",
}

var SyndicateElectionTableColumns = struct {
	ID                       string
	SyndicateID              string
	Type                     string
	ParentElectionID         string
	WinnerID                 string
	StartedAt                string
	CandidateRegisterCloseAt string
	EndAt                    string
	CreatedAt                string
	UpdatedAt                string
	DeletedAt                string
}{
	ID:                       "syndicate_elections.id",
	SyndicateID:              "syndicate_elections.syndicate_id",
	Type:                     "syndicate_elections.type",
	ParentElectionID:         "syndicate_elections.parent_election_id",
	WinnerID:                 "syndicate_elections.winner_id",
	StartedAt:                "syndicate_elections.started_at",
	CandidateRegisterCloseAt: "syndicate_elections.candidate_register_close_at",
	EndAt:                    "syndicate_elections.end_at",
	CreatedAt:                "syndicate_elections.created_at",
	UpdatedAt:                "syndicate_elections.updated_at",
	DeletedAt:                "syndicate_elections.deleted_at",
}

// Generated where

var SyndicateElectionWhere = struct {
	ID                       whereHelperstring
	SyndicateID              whereHelperstring
	Type                     whereHelperstring
	ParentElectionID         whereHelpernull_String
	WinnerID                 whereHelpernull_String
	StartedAt                whereHelpertime_Time
	CandidateRegisterCloseAt whereHelpertime_Time
	EndAt                    whereHelpertime_Time
	CreatedAt                whereHelpertime_Time
	UpdatedAt                whereHelpertime_Time
	DeletedAt                whereHelpernull_Time
}{
	ID:                       whereHelperstring{field: "\"syndicate_elections\".\"id\""},
	SyndicateID:              whereHelperstring{field: "\"syndicate_elections\".\"syndicate_id\""},
	Type:                     whereHelperstring{field: "\"syndicate_elections\".\"type\""},
	ParentElectionID:         whereHelpernull_String{field: "\"syndicate_elections\".\"parent_election_id\""},
	WinnerID:                 whereHelpernull_String{field: "\"syndicate_elections\".\"winner_id\""},
	StartedAt:                whereHelpertime_Time{field: "\"syndicate_elections\".\"started_at\""},
	CandidateRegisterCloseAt: whereHelpertime_Time{field: "\"syndicate_elections\".\"candidate_register_close_at\""},
	EndAt:                    whereHelpertime_Time{field: "\"syndicate_elections\".\"end_at\""},
	CreatedAt:                whereHelpertime_Time{field: "\"syndicate_elections\".\"created_at\""},
	UpdatedAt:                whereHelpertime_Time{field: "\"syndicate_elections\".\"updated_at\""},
	DeletedAt:                whereHelpernull_Time{field: "\"syndicate_elections\".\"deleted_at\""},
}

// SyndicateElectionRels is where relationship names are stored.
var SyndicateElectionRels = struct {
	ParentElection                   string
	Syndicate                        string
	Winner                           string
	SyndicateElectionCandidates      string
	SyndicateElectionVotes           string
	ParentElectionSyndicateElections string
}{
	ParentElection:                   "ParentElection",
	Syndicate:                        "Syndicate",
	Winner:                           "Winner",
	SyndicateElectionCandidates:      "SyndicateElectionCandidates",
	SyndicateElectionVotes:           "SyndicateElectionVotes",
	ParentElectionSyndicateElections: "ParentElectionSyndicateElections",
}

// syndicateElectionR is where relationships are stored.
type syndicateElectionR struct {
	ParentElection                   *SyndicateElection              `boiler:"ParentElection" boil:"ParentElection" json:"ParentElection" toml:"ParentElection" yaml:"ParentElection"`
	Syndicate                        *Syndicate                      `boiler:"Syndicate" boil:"Syndicate" json:"Syndicate" toml:"Syndicate" yaml:"Syndicate"`
	Winner                           *Player                         `boiler:"Winner" boil:"Winner" json:"Winner" toml:"Winner" yaml:"Winner"`
	SyndicateElectionCandidates      SyndicateElectionCandidateSlice `boiler:"SyndicateElectionCandidates" boil:"SyndicateElectionCandidates" json:"SyndicateElectionCandidates" toml:"SyndicateElectionCandidates" yaml:"SyndicateElectionCandidates"`
	SyndicateElectionVotes           SyndicateElectionVoteSlice      `boiler:"SyndicateElectionVotes" boil:"SyndicateElectionVotes" json:"SyndicateElectionVotes" toml:"SyndicateElectionVotes" yaml:"SyndicateElectionVotes"`
	ParentElectionSyndicateElections SyndicateElectionSlice          `boiler:"ParentElectionSyndicateElections" boil:"ParentElectionSyndicateElections" json:"ParentElectionSyndicateElections" toml:"ParentElectionSyndicateElections" yaml:"ParentElectionSyndicateElections"`
}

// NewStruct creates a new relationship struct
func (*syndicateElectionR) NewStruct() *syndicateElectionR {
	return &syndicateElectionR{}
}

// syndicateElectionL is where Load methods for each relationship are stored.
type syndicateElectionL struct{}

var (
	syndicateElectionAllColumns            = []string{"id", "syndicate_id", "type", "parent_election_id", "winner_id", "started_at", "candidate_register_close_at", "end_at", "created_at", "updated_at", "deleted_at"}
	syndicateElectionColumnsWithoutDefault = []string{"syndicate_id", "type", "started_at", "candidate_register_close_at", "end_at"}
	syndicateElectionColumnsWithDefault    = []string{"id", "parent_election_id", "winner_id", "created_at", "updated_at", "deleted_at"}
	syndicateElectionPrimaryKeyColumns     = []string{"id"}
	syndicateElectionGeneratedColumns      = []string{}
)

type (
	// SyndicateElectionSlice is an alias for a slice of pointers to SyndicateElection.
	// This should almost always be used instead of []SyndicateElection.
	SyndicateElectionSlice []*SyndicateElection
	// SyndicateElectionHook is the signature for custom SyndicateElection hook methods
	SyndicateElectionHook func(boil.Executor, *SyndicateElection) error

	syndicateElectionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	syndicateElectionType                 = reflect.TypeOf(&SyndicateElection{})
	syndicateElectionMapping              = queries.MakeStructMapping(syndicateElectionType)
	syndicateElectionPrimaryKeyMapping, _ = queries.BindMapping(syndicateElectionType, syndicateElectionMapping, syndicateElectionPrimaryKeyColumns)
	syndicateElectionInsertCacheMut       sync.RWMutex
	syndicateElectionInsertCache          = make(map[string]insertCache)
	syndicateElectionUpdateCacheMut       sync.RWMutex
	syndicateElectionUpdateCache          = make(map[string]updateCache)
	syndicateElectionUpsertCacheMut       sync.RWMutex
	syndicateElectionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var syndicateElectionAfterSelectHooks []SyndicateElectionHook

var syndicateElectionBeforeInsertHooks []SyndicateElectionHook
var syndicateElectionAfterInsertHooks []SyndicateElectionHook

var syndicateElectionBeforeUpdateHooks []SyndicateElectionHook
var syndicateElectionAfterUpdateHooks []SyndicateElectionHook

var syndicateElectionBeforeDeleteHooks []SyndicateElectionHook
var syndicateElectionAfterDeleteHooks []SyndicateElectionHook

var syndicateElectionBeforeUpsertHooks []SyndicateElectionHook
var syndicateElectionAfterUpsertHooks []SyndicateElectionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SyndicateElection) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateElectionAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SyndicateElection) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateElectionBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SyndicateElection) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateElectionAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SyndicateElection) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateElectionBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SyndicateElection) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateElectionAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SyndicateElection) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateElectionBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SyndicateElection) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateElectionAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SyndicateElection) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateElectionBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SyndicateElection) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateElectionAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSyndicateElectionHook registers your hook function for all future operations.
func AddSyndicateElectionHook(hookPoint boil.HookPoint, syndicateElectionHook SyndicateElectionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		syndicateElectionAfterSelectHooks = append(syndicateElectionAfterSelectHooks, syndicateElectionHook)
	case boil.BeforeInsertHook:
		syndicateElectionBeforeInsertHooks = append(syndicateElectionBeforeInsertHooks, syndicateElectionHook)
	case boil.AfterInsertHook:
		syndicateElectionAfterInsertHooks = append(syndicateElectionAfterInsertHooks, syndicateElectionHook)
	case boil.BeforeUpdateHook:
		syndicateElectionBeforeUpdateHooks = append(syndicateElectionBeforeUpdateHooks, syndicateElectionHook)
	case boil.AfterUpdateHook:
		syndicateElectionAfterUpdateHooks = append(syndicateElectionAfterUpdateHooks, syndicateElectionHook)
	case boil.BeforeDeleteHook:
		syndicateElectionBeforeDeleteHooks = append(syndicateElectionBeforeDeleteHooks, syndicateElectionHook)
	case boil.AfterDeleteHook:
		syndicateElectionAfterDeleteHooks = append(syndicateElectionAfterDeleteHooks, syndicateElectionHook)
	case boil.BeforeUpsertHook:
		syndicateElectionBeforeUpsertHooks = append(syndicateElectionBeforeUpsertHooks, syndicateElectionHook)
	case boil.AfterUpsertHook:
		syndicateElectionAfterUpsertHooks = append(syndicateElectionAfterUpsertHooks, syndicateElectionHook)
	}
}

// One returns a single syndicateElection record from the query.
func (q syndicateElectionQuery) One(exec boil.Executor) (*SyndicateElection, error) {
	o := &SyndicateElection{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for syndicate_elections")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SyndicateElection records from the query.
func (q syndicateElectionQuery) All(exec boil.Executor) (SyndicateElectionSlice, error) {
	var o []*SyndicateElection

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to SyndicateElection slice")
	}

	if len(syndicateElectionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SyndicateElection records in the query.
func (q syndicateElectionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count syndicate_elections rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q syndicateElectionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if syndicate_elections exists")
	}

	return count > 0, nil
}

// ParentElection pointed to by the foreign key.
func (o *SyndicateElection) ParentElection(mods ...qm.QueryMod) syndicateElectionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ParentElectionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := SyndicateElections(queryMods...)
	queries.SetFrom(query.Query, "\"syndicate_elections\"")

	return query
}

// Syndicate pointed to by the foreign key.
func (o *SyndicateElection) Syndicate(mods ...qm.QueryMod) syndicateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SyndicateID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Syndicates(queryMods...)
	queries.SetFrom(query.Query, "\"syndicates\"")

	return query
}

// Winner pointed to by the foreign key.
func (o *SyndicateElection) Winner(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.WinnerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// SyndicateElectionCandidates retrieves all the syndicate_election_candidate's SyndicateElectionCandidates with an executor.
func (o *SyndicateElection) SyndicateElectionCandidates(mods ...qm.QueryMod) syndicateElectionCandidateQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"syndicate_election_candidates\".\"syndicate_election_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"syndicate_election_candidates\".\"deleted_at\""),
	)

	query := SyndicateElectionCandidates(queryMods...)
	queries.SetFrom(query.Query, "\"syndicate_election_candidates\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"syndicate_election_candidates\".*"})
	}

	return query
}

// SyndicateElectionVotes retrieves all the syndicate_election_vote's SyndicateElectionVotes with an executor.
func (o *SyndicateElection) SyndicateElectionVotes(mods ...qm.QueryMod) syndicateElectionVoteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"syndicate_election_votes\".\"syndicate_election_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"syndicate_election_votes\".\"deleted_at\""),
	)

	query := SyndicateElectionVotes(queryMods...)
	queries.SetFrom(query.Query, "\"syndicate_election_votes\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"syndicate_election_votes\".*"})
	}

	return query
}

// ParentElectionSyndicateElections retrieves all the syndicate_election's SyndicateElections with an executor via parent_election_id column.
func (o *SyndicateElection) ParentElectionSyndicateElections(mods ...qm.QueryMod) syndicateElectionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"syndicate_elections\".\"parent_election_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"syndicate_elections\".\"deleted_at\""),
	)

	query := SyndicateElections(queryMods...)
	queries.SetFrom(query.Query, "\"syndicate_elections\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"syndicate_elections\".*"})
	}

	return query
}

// LoadParentElection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateElectionL) LoadParentElection(e boil.Executor, singular bool, maybeSyndicateElection interface{}, mods queries.Applicator) error {
	var slice []*SyndicateElection
	var object *SyndicateElection

	if singular {
		object = maybeSyndicateElection.(*SyndicateElection)
	} else {
		slice = *maybeSyndicateElection.(*[]*SyndicateElection)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateElectionR{}
		}
		if !queries.IsNil(object.ParentElectionID) {
			args = append(args, object.ParentElectionID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateElectionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ParentElectionID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ParentElectionID) {
				args = append(args, obj.ParentElectionID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicate_elections`),
		qm.WhereIn(`syndicate_elections.id in ?`, args...),
		qmhelper.WhereIsNull(`syndicate_elections.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SyndicateElection")
	}

	var resultSlice []*SyndicateElection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SyndicateElection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for syndicate_elections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicate_elections")
	}

	if len(syndicateElectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ParentElection = foreign
		if foreign.R == nil {
			foreign.R = &syndicateElectionR{}
		}
		foreign.R.ParentElectionSyndicateElections = append(foreign.R.ParentElectionSyndicateElections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ParentElectionID, foreign.ID) {
				local.R.ParentElection = foreign
				if foreign.R == nil {
					foreign.R = &syndicateElectionR{}
				}
				foreign.R.ParentElectionSyndicateElections = append(foreign.R.ParentElectionSyndicateElections, local)
				break
			}
		}
	}

	return nil
}

// LoadSyndicate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateElectionL) LoadSyndicate(e boil.Executor, singular bool, maybeSyndicateElection interface{}, mods queries.Applicator) error {
	var slice []*SyndicateElection
	var object *SyndicateElection

	if singular {
		object = maybeSyndicateElection.(*SyndicateElection)
	} else {
		slice = *maybeSyndicateElection.(*[]*SyndicateElection)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateElectionR{}
		}
		args = append(args, object.SyndicateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateElectionR{}
			}

			for _, a := range args {
				if a == obj.SyndicateID {
					continue Outer
				}
			}

			args = append(args, obj.SyndicateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicates`),
		qm.WhereIn(`syndicates.id in ?`, args...),
		qmhelper.WhereIsNull(`syndicates.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Syndicate")
	}

	var resultSlice []*Syndicate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Syndicate")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for syndicates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicates")
	}

	if len(syndicateElectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Syndicate = foreign
		if foreign.R == nil {
			foreign.R = &syndicateR{}
		}
		foreign.R.SyndicateElections = append(foreign.R.SyndicateElections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SyndicateID == foreign.ID {
				local.R.Syndicate = foreign
				if foreign.R == nil {
					foreign.R = &syndicateR{}
				}
				foreign.R.SyndicateElections = append(foreign.R.SyndicateElections, local)
				break
			}
		}
	}

	return nil
}

// LoadWinner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateElectionL) LoadWinner(e boil.Executor, singular bool, maybeSyndicateElection interface{}, mods queries.Applicator) error {
	var slice []*SyndicateElection
	var object *SyndicateElection

	if singular {
		object = maybeSyndicateElection.(*SyndicateElection)
	} else {
		slice = *maybeSyndicateElection.(*[]*SyndicateElection)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateElectionR{}
		}
		if !queries.IsNil(object.WinnerID) {
			args = append(args, object.WinnerID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateElectionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.WinnerID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.WinnerID) {
				args = append(args, obj.WinnerID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(syndicateElectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Winner = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.WinnerSyndicateElections = append(foreign.R.WinnerSyndicateElections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.WinnerID, foreign.ID) {
				local.R.Winner = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.WinnerSyndicateElections = append(foreign.R.WinnerSyndicateElections, local)
				break
			}
		}
	}

	return nil
}

// LoadSyndicateElectionCandidates allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (syndicateElectionL) LoadSyndicateElectionCandidates(e boil.Executor, singular bool, maybeSyndicateElection interface{}, mods queries.Applicator) error {
	var slice []*SyndicateElection
	var object *SyndicateElection

	if singular {
		object = maybeSyndicateElection.(*SyndicateElection)
	} else {
		slice = *maybeSyndicateElection.(*[]*SyndicateElection)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateElectionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateElectionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicate_election_candidates`),
		qm.WhereIn(`syndicate_election_candidates.syndicate_election_id in ?`, args...),
		qmhelper.WhereIsNull(`syndicate_election_candidates.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load syndicate_election_candidates")
	}

	var resultSlice []*SyndicateElectionCandidate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice syndicate_election_candidates")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on syndicate_election_candidates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicate_election_candidates")
	}

	if len(syndicateElectionCandidateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SyndicateElectionCandidates = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &syndicateElectionCandidateR{}
			}
			foreign.R.SyndicateElection = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SyndicateElectionID {
				local.R.SyndicateElectionCandidates = append(local.R.SyndicateElectionCandidates, foreign)
				if foreign.R == nil {
					foreign.R = &syndicateElectionCandidateR{}
				}
				foreign.R.SyndicateElection = local
				break
			}
		}
	}

	return nil
}

// LoadSyndicateElectionVotes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (syndicateElectionL) LoadSyndicateElectionVotes(e boil.Executor, singular bool, maybeSyndicateElection interface{}, mods queries.Applicator) error {
	var slice []*SyndicateElection
	var object *SyndicateElection

	if singular {
		object = maybeSyndicateElection.(*SyndicateElection)
	} else {
		slice = *maybeSyndicateElection.(*[]*SyndicateElection)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateElectionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateElectionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicate_election_votes`),
		qm.WhereIn(`syndicate_election_votes.syndicate_election_id in ?`, args...),
		qmhelper.WhereIsNull(`syndicate_election_votes.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load syndicate_election_votes")
	}

	var resultSlice []*SyndicateElectionVote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice syndicate_election_votes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on syndicate_election_votes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicate_election_votes")
	}

	if len(syndicateElectionVoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SyndicateElectionVotes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &syndicateElectionVoteR{}
			}
			foreign.R.SyndicateElection = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SyndicateElectionID {
				local.R.SyndicateElectionVotes = append(local.R.SyndicateElectionVotes, foreign)
				if foreign.R == nil {
					foreign.R = &syndicateElectionVoteR{}
				}
				foreign.R.SyndicateElection = local
				break
			}
		}
	}

	return nil
}

// LoadParentElectionSyndicateElections allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (syndicateElectionL) LoadParentElectionSyndicateElections(e boil.Executor, singular bool, maybeSyndicateElection interface{}, mods queries.Applicator) error {
	var slice []*SyndicateElection
	var object *SyndicateElection

	if singular {
		object = maybeSyndicateElection.(*SyndicateElection)
	} else {
		slice = *maybeSyndicateElection.(*[]*SyndicateElection)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateElectionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateElectionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicate_elections`),
		qm.WhereIn(`syndicate_elections.parent_election_id in ?`, args...),
		qmhelper.WhereIsNull(`syndicate_elections.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load syndicate_elections")
	}

	var resultSlice []*SyndicateElection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice syndicate_elections")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on syndicate_elections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicate_elections")
	}

	if len(syndicateElectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ParentElectionSyndicateElections = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &syndicateElectionR{}
			}
			foreign.R.ParentElection = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ParentElectionID) {
				local.R.ParentElectionSyndicateElections = append(local.R.ParentElectionSyndicateElections, foreign)
				if foreign.R == nil {
					foreign.R = &syndicateElectionR{}
				}
				foreign.R.ParentElection = local
				break
			}
		}
	}

	return nil
}

// SetParentElection of the syndicateElection to the related item.
// Sets o.R.ParentElection to related.
// Adds o to related.R.ParentElectionSyndicateElections.
func (o *SyndicateElection) SetParentElection(exec boil.Executor, insert bool, related *SyndicateElection) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicate_elections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"parent_election_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicateElectionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ParentElectionID, related.ID)
	if o.R == nil {
		o.R = &syndicateElectionR{
			ParentElection: related,
		}
	} else {
		o.R.ParentElection = related
	}

	if related.R == nil {
		related.R = &syndicateElectionR{
			ParentElectionSyndicateElections: SyndicateElectionSlice{o},
		}
	} else {
		related.R.ParentElectionSyndicateElections = append(related.R.ParentElectionSyndicateElections, o)
	}

	return nil
}

// RemoveParentElection relationship.
// Sets o.R.ParentElection to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *SyndicateElection) RemoveParentElection(exec boil.Executor, related *SyndicateElection) error {
	var err error

	queries.SetScanner(&o.ParentElectionID, nil)
	if _, err = o.Update(exec, boil.Whitelist("parent_election_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ParentElection = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ParentElectionSyndicateElections {
		if queries.Equal(o.ParentElectionID, ri.ParentElectionID) {
			continue
		}

		ln := len(related.R.ParentElectionSyndicateElections)
		if ln > 1 && i < ln-1 {
			related.R.ParentElectionSyndicateElections[i] = related.R.ParentElectionSyndicateElections[ln-1]
		}
		related.R.ParentElectionSyndicateElections = related.R.ParentElectionSyndicateElections[:ln-1]
		break
	}
	return nil
}

// SetSyndicate of the syndicateElection to the related item.
// Sets o.R.Syndicate to related.
// Adds o to related.R.SyndicateElections.
func (o *SyndicateElection) SetSyndicate(exec boil.Executor, insert bool, related *Syndicate) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicate_elections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"syndicate_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicateElectionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SyndicateID = related.ID
	if o.R == nil {
		o.R = &syndicateElectionR{
			Syndicate: related,
		}
	} else {
		o.R.Syndicate = related
	}

	if related.R == nil {
		related.R = &syndicateR{
			SyndicateElections: SyndicateElectionSlice{o},
		}
	} else {
		related.R.SyndicateElections = append(related.R.SyndicateElections, o)
	}

	return nil
}

// SetWinner of the syndicateElection to the related item.
// Sets o.R.Winner to related.
// Adds o to related.R.WinnerSyndicateElections.
func (o *SyndicateElection) SetWinner(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicate_elections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"winner_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicateElectionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.WinnerID, related.ID)
	if o.R == nil {
		o.R = &syndicateElectionR{
			Winner: related,
		}
	} else {
		o.R.Winner = related
	}

	if related.R == nil {
		related.R = &playerR{
			WinnerSyndicateElections: SyndicateElectionSlice{o},
		}
	} else {
		related.R.WinnerSyndicateElections = append(related.R.WinnerSyndicateElections, o)
	}

	return nil
}

// RemoveWinner relationship.
// Sets o.R.Winner to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *SyndicateElection) RemoveWinner(exec boil.Executor, related *Player) error {
	var err error

	queries.SetScanner(&o.WinnerID, nil)
	if _, err = o.Update(exec, boil.Whitelist("winner_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Winner = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.WinnerSyndicateElections {
		if queries.Equal(o.WinnerID, ri.WinnerID) {
			continue
		}

		ln := len(related.R.WinnerSyndicateElections)
		if ln > 1 && i < ln-1 {
			related.R.WinnerSyndicateElections[i] = related.R.WinnerSyndicateElections[ln-1]
		}
		related.R.WinnerSyndicateElections = related.R.WinnerSyndicateElections[:ln-1]
		break
	}
	return nil
}

// AddSyndicateElectionCandidates adds the given related objects to the existing relationships
// of the syndicate_election, optionally inserting them as new records.
// Appends related to o.R.SyndicateElectionCandidates.
// Sets related.R.SyndicateElection appropriately.
func (o *SyndicateElection) AddSyndicateElectionCandidates(exec boil.Executor, insert bool, related ...*SyndicateElectionCandidate) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SyndicateElectionID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"syndicate_election_candidates\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"syndicate_election_id"}),
				strmangle.WhereClause("\"", "\"", 2, syndicateElectionCandidatePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.SyndicateElectionID, rel.CandidateID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SyndicateElectionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &syndicateElectionR{
			SyndicateElectionCandidates: related,
		}
	} else {
		o.R.SyndicateElectionCandidates = append(o.R.SyndicateElectionCandidates, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &syndicateElectionCandidateR{
				SyndicateElection: o,
			}
		} else {
			rel.R.SyndicateElection = o
		}
	}
	return nil
}

// AddSyndicateElectionVotes adds the given related objects to the existing relationships
// of the syndicate_election, optionally inserting them as new records.
// Appends related to o.R.SyndicateElectionVotes.
// Sets related.R.SyndicateElection appropriately.
func (o *SyndicateElection) AddSyndicateElectionVotes(exec boil.Executor, insert bool, related ...*SyndicateElectionVote) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SyndicateElectionID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"syndicate_election_votes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"syndicate_election_id"}),
				strmangle.WhereClause("\"", "\"", 2, syndicateElectionVotePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.SyndicateElectionID, rel.VotedByID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SyndicateElectionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &syndicateElectionR{
			SyndicateElectionVotes: related,
		}
	} else {
		o.R.SyndicateElectionVotes = append(o.R.SyndicateElectionVotes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &syndicateElectionVoteR{
				SyndicateElection: o,
			}
		} else {
			rel.R.SyndicateElection = o
		}
	}
	return nil
}

// AddParentElectionSyndicateElections adds the given related objects to the existing relationships
// of the syndicate_election, optionally inserting them as new records.
// Appends related to o.R.ParentElectionSyndicateElections.
// Sets related.R.ParentElection appropriately.
func (o *SyndicateElection) AddParentElectionSyndicateElections(exec boil.Executor, insert bool, related ...*SyndicateElection) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ParentElectionID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"syndicate_elections\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"parent_election_id"}),
				strmangle.WhereClause("\"", "\"", 2, syndicateElectionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ParentElectionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &syndicateElectionR{
			ParentElectionSyndicateElections: related,
		}
	} else {
		o.R.ParentElectionSyndicateElections = append(o.R.ParentElectionSyndicateElections, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &syndicateElectionR{
				ParentElection: o,
			}
		} else {
			rel.R.ParentElection = o
		}
	}
	return nil
}

// SetParentElectionSyndicateElections removes all previously related items of the
// syndicate_election replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ParentElection's ParentElectionSyndicateElections accordingly.
// Replaces o.R.ParentElectionSyndicateElections with related.
// Sets related.R.ParentElection's ParentElectionSyndicateElections accordingly.
func (o *SyndicateElection) SetParentElectionSyndicateElections(exec boil.Executor, insert bool, related ...*SyndicateElection) error {
	query := "update \"syndicate_elections\" set \"parent_election_id\" = null where \"parent_election_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ParentElectionSyndicateElections {
			queries.SetScanner(&rel.ParentElectionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ParentElection = nil
		}

		o.R.ParentElectionSyndicateElections = nil
	}
	return o.AddParentElectionSyndicateElections(exec, insert, related...)
}

// RemoveParentElectionSyndicateElections relationships from objects passed in.
// Removes related items from R.ParentElectionSyndicateElections (uses pointer comparison, removal does not keep order)
// Sets related.R.ParentElection.
func (o *SyndicateElection) RemoveParentElectionSyndicateElections(exec boil.Executor, related ...*SyndicateElection) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ParentElectionID, nil)
		if rel.R != nil {
			rel.R.ParentElection = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("parent_election_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ParentElectionSyndicateElections {
			if rel != ri {
				continue
			}

			ln := len(o.R.ParentElectionSyndicateElections)
			if ln > 1 && i < ln-1 {
				o.R.ParentElectionSyndicateElections[i] = o.R.ParentElectionSyndicateElections[ln-1]
			}
			o.R.ParentElectionSyndicateElections = o.R.ParentElectionSyndicateElections[:ln-1]
			break
		}
	}

	return nil
}

// SyndicateElections retrieves all the records using an executor.
func SyndicateElections(mods ...qm.QueryMod) syndicateElectionQuery {
	mods = append(mods, qm.From("\"syndicate_elections\""), qmhelper.WhereIsNull("\"syndicate_elections\".\"deleted_at\""))
	return syndicateElectionQuery{NewQuery(mods...)}
}

// FindSyndicateElection retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSyndicateElection(exec boil.Executor, iD string, selectCols ...string) (*SyndicateElection, error) {
	syndicateElectionObj := &SyndicateElection{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"syndicate_elections\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, syndicateElectionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from syndicate_elections")
	}

	if err = syndicateElectionObj.doAfterSelectHooks(exec); err != nil {
		return syndicateElectionObj, err
	}

	return syndicateElectionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SyndicateElection) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no syndicate_elections provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syndicateElectionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	syndicateElectionInsertCacheMut.RLock()
	cache, cached := syndicateElectionInsertCache[key]
	syndicateElectionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			syndicateElectionAllColumns,
			syndicateElectionColumnsWithDefault,
			syndicateElectionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(syndicateElectionType, syndicateElectionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(syndicateElectionType, syndicateElectionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"syndicate_elections\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"syndicate_elections\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into syndicate_elections")
	}

	if !cached {
		syndicateElectionInsertCacheMut.Lock()
		syndicateElectionInsertCache[key] = cache
		syndicateElectionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the SyndicateElection.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SyndicateElection) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	syndicateElectionUpdateCacheMut.RLock()
	cache, cached := syndicateElectionUpdateCache[key]
	syndicateElectionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			syndicateElectionAllColumns,
			syndicateElectionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update syndicate_elections, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"syndicate_elections\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, syndicateElectionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(syndicateElectionType, syndicateElectionMapping, append(wl, syndicateElectionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update syndicate_elections row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for syndicate_elections")
	}

	if !cached {
		syndicateElectionUpdateCacheMut.Lock()
		syndicateElectionUpdateCache[key] = cache
		syndicateElectionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q syndicateElectionQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for syndicate_elections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for syndicate_elections")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SyndicateElectionSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateElectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"syndicate_elections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, syndicateElectionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in syndicateElection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all syndicateElection")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SyndicateElection) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no syndicate_elections provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syndicateElectionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	syndicateElectionUpsertCacheMut.RLock()
	cache, cached := syndicateElectionUpsertCache[key]
	syndicateElectionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			syndicateElectionAllColumns,
			syndicateElectionColumnsWithDefault,
			syndicateElectionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			syndicateElectionAllColumns,
			syndicateElectionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert syndicate_elections, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(syndicateElectionPrimaryKeyColumns))
			copy(conflict, syndicateElectionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"syndicate_elections\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(syndicateElectionType, syndicateElectionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(syndicateElectionType, syndicateElectionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert syndicate_elections")
	}

	if !cached {
		syndicateElectionUpsertCacheMut.Lock()
		syndicateElectionUpsertCache[key] = cache
		syndicateElectionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single SyndicateElection record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SyndicateElection) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no SyndicateElection provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), syndicateElectionPrimaryKeyMapping)
		sql = "DELETE FROM \"syndicate_elections\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"syndicate_elections\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(syndicateElectionType, syndicateElectionMapping, append(wl, syndicateElectionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from syndicate_elections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for syndicate_elections")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q syndicateElectionQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no syndicateElectionQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from syndicate_elections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for syndicate_elections")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SyndicateElectionSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(syndicateElectionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateElectionPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"syndicate_elections\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syndicateElectionPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateElectionPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"syndicate_elections\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, syndicateElectionPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from syndicateElection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for syndicate_elections")
	}

	if len(syndicateElectionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SyndicateElection) Reload(exec boil.Executor) error {
	ret, err := FindSyndicateElection(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SyndicateElectionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SyndicateElectionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateElectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"syndicate_elections\".* FROM \"syndicate_elections\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syndicateElectionPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in SyndicateElectionSlice")
	}

	*o = slice

	return nil
}

// SyndicateElectionExists checks if the SyndicateElection row exists.
func SyndicateElectionExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"syndicate_elections\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if syndicate_elections exists")
	}

	return exists, nil
}
