// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BattleQueueNotification is an object representing the database table.
type BattleQueueNotification struct {
	ID                     string          `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BattleID               null.String     `boiler:"battle_id" boil:"battle_id" json:"battle_id,omitempty" toml:"battle_id" yaml:"battle_id,omitempty"`
	MobileNumber           null.String     `boiler:"mobile_number" boil:"mobile_number" json:"mobile_number,omitempty" toml:"mobile_number" yaml:"mobile_number,omitempty"`
	PushNotifications      bool            `boiler:"push_notifications" boil:"push_notifications" json:"push_notifications" toml:"push_notifications" yaml:"push_notifications"`
	TelegramNotificationID null.String     `boiler:"telegram_notification_id" boil:"telegram_notification_id" json:"telegram_notification_id,omitempty" toml:"telegram_notification_id" yaml:"telegram_notification_id,omitempty"`
	SentAt                 null.Time       `boiler:"sent_at" boil:"sent_at" json:"sent_at,omitempty" toml:"sent_at" yaml:"sent_at,omitempty"`
	Message                null.String     `boiler:"message" boil:"message" json:"message,omitempty" toml:"message" yaml:"message,omitempty"`
	Fee                    decimal.Decimal `boiler:"fee" boil:"fee" json:"fee" toml:"fee" yaml:"fee"`
	IsRefunded             bool            `boiler:"is_refunded" boil:"is_refunded" json:"is_refunded" toml:"is_refunded" yaml:"is_refunded"`
	CreatedAt              time.Time       `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	MechID                 string          `boiler:"mech_id" boil:"mech_id" json:"mech_id" toml:"mech_id" yaml:"mech_id"`
	QueueMechID            null.String     `boiler:"queue_mech_id" boil:"queue_mech_id" json:"queue_mech_id,omitempty" toml:"queue_mech_id" yaml:"queue_mech_id,omitempty"`

	R *battleQueueNotificationR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L battleQueueNotificationL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattleQueueNotificationColumns = struct {
	ID                     string
	BattleID               string
	MobileNumber           string
	PushNotifications      string
	TelegramNotificationID string
	SentAt                 string
	Message                string
	Fee                    string
	IsRefunded             string
	CreatedAt              string
	MechID                 string
	QueueMechID            string
}{
	ID:                     "id",
	BattleID:               "battle_id",
	MobileNumber:           "mobile_number",
	PushNotifications:      "push_notifications",
	TelegramNotificationID: "telegram_notification_id",
	SentAt:                 "sent_at",
	Message:                "message",
	Fee:                    "fee",
	IsRefunded:             "is_refunded",
	CreatedAt:              "created_at",
	MechID:                 "mech_id",
	QueueMechID:            "queue_mech_id",
}

var BattleQueueNotificationTableColumns = struct {
	ID                     string
	BattleID               string
	MobileNumber           string
	PushNotifications      string
	TelegramNotificationID string
	SentAt                 string
	Message                string
	Fee                    string
	IsRefunded             string
	CreatedAt              string
	MechID                 string
	QueueMechID            string
}{
	ID:                     "battle_queue_notifications.id",
	BattleID:               "battle_queue_notifications.battle_id",
	MobileNumber:           "battle_queue_notifications.mobile_number",
	PushNotifications:      "battle_queue_notifications.push_notifications",
	TelegramNotificationID: "battle_queue_notifications.telegram_notification_id",
	SentAt:                 "battle_queue_notifications.sent_at",
	Message:                "battle_queue_notifications.message",
	Fee:                    "battle_queue_notifications.fee",
	IsRefunded:             "battle_queue_notifications.is_refunded",
	CreatedAt:              "battle_queue_notifications.created_at",
	MechID:                 "battle_queue_notifications.mech_id",
	QueueMechID:            "battle_queue_notifications.queue_mech_id",
}

// Generated where

var BattleQueueNotificationWhere = struct {
	ID                     whereHelperstring
	BattleID               whereHelpernull_String
	MobileNumber           whereHelpernull_String
	PushNotifications      whereHelperbool
	TelegramNotificationID whereHelpernull_String
	SentAt                 whereHelpernull_Time
	Message                whereHelpernull_String
	Fee                    whereHelperdecimal_Decimal
	IsRefunded             whereHelperbool
	CreatedAt              whereHelpertime_Time
	MechID                 whereHelperstring
	QueueMechID            whereHelpernull_String
}{
	ID:                     whereHelperstring{field: "\"battle_queue_notifications\".\"id\""},
	BattleID:               whereHelpernull_String{field: "\"battle_queue_notifications\".\"battle_id\""},
	MobileNumber:           whereHelpernull_String{field: "\"battle_queue_notifications\".\"mobile_number\""},
	PushNotifications:      whereHelperbool{field: "\"battle_queue_notifications\".\"push_notifications\""},
	TelegramNotificationID: whereHelpernull_String{field: "\"battle_queue_notifications\".\"telegram_notification_id\""},
	SentAt:                 whereHelpernull_Time{field: "\"battle_queue_notifications\".\"sent_at\""},
	Message:                whereHelpernull_String{field: "\"battle_queue_notifications\".\"message\""},
	Fee:                    whereHelperdecimal_Decimal{field: "\"battle_queue_notifications\".\"fee\""},
	IsRefunded:             whereHelperbool{field: "\"battle_queue_notifications\".\"is_refunded\""},
	CreatedAt:              whereHelpertime_Time{field: "\"battle_queue_notifications\".\"created_at\""},
	MechID:                 whereHelperstring{field: "\"battle_queue_notifications\".\"mech_id\""},
	QueueMechID:            whereHelpernull_String{field: "\"battle_queue_notifications\".\"queue_mech_id\""},
}

// BattleQueueNotificationRels is where relationship names are stored.
var BattleQueueNotificationRels = struct {
	Battle               string
	Mech                 string
	QueueMech            string
	TelegramNotification string
}{
	Battle:               "Battle",
	Mech:                 "Mech",
	QueueMech:            "QueueMech",
	TelegramNotification: "TelegramNotification",
}

// battleQueueNotificationR is where relationships are stored.
type battleQueueNotificationR struct {
	Battle               *Battle               `boiler:"Battle" boil:"Battle" json:"Battle" toml:"Battle" yaml:"Battle"`
	Mech                 *Mech                 `boiler:"Mech" boil:"Mech" json:"Mech" toml:"Mech" yaml:"Mech"`
	QueueMech            *BattleQueue          `boiler:"QueueMech" boil:"QueueMech" json:"QueueMech" toml:"QueueMech" yaml:"QueueMech"`
	TelegramNotification *TelegramNotification `boiler:"TelegramNotification" boil:"TelegramNotification" json:"TelegramNotification" toml:"TelegramNotification" yaml:"TelegramNotification"`
}

// NewStruct creates a new relationship struct
func (*battleQueueNotificationR) NewStruct() *battleQueueNotificationR {
	return &battleQueueNotificationR{}
}

// battleQueueNotificationL is where Load methods for each relationship are stored.
type battleQueueNotificationL struct{}

var (
	battleQueueNotificationAllColumns            = []string{"id", "battle_id", "mobile_number", "push_notifications", "telegram_notification_id", "sent_at", "message", "fee", "is_refunded", "created_at", "mech_id", "queue_mech_id"}
	battleQueueNotificationColumnsWithoutDefault = []string{"fee", "mech_id"}
	battleQueueNotificationColumnsWithDefault    = []string{"id", "battle_id", "mobile_number", "push_notifications", "telegram_notification_id", "sent_at", "message", "is_refunded", "created_at", "queue_mech_id"}
	battleQueueNotificationPrimaryKeyColumns     = []string{"id"}
	battleQueueNotificationGeneratedColumns      = []string{}
)

type (
	// BattleQueueNotificationSlice is an alias for a slice of pointers to BattleQueueNotification.
	// This should almost always be used instead of []BattleQueueNotification.
	BattleQueueNotificationSlice []*BattleQueueNotification
	// BattleQueueNotificationHook is the signature for custom BattleQueueNotification hook methods
	BattleQueueNotificationHook func(boil.Executor, *BattleQueueNotification) error

	battleQueueNotificationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battleQueueNotificationType                 = reflect.TypeOf(&BattleQueueNotification{})
	battleQueueNotificationMapping              = queries.MakeStructMapping(battleQueueNotificationType)
	battleQueueNotificationPrimaryKeyMapping, _ = queries.BindMapping(battleQueueNotificationType, battleQueueNotificationMapping, battleQueueNotificationPrimaryKeyColumns)
	battleQueueNotificationInsertCacheMut       sync.RWMutex
	battleQueueNotificationInsertCache          = make(map[string]insertCache)
	battleQueueNotificationUpdateCacheMut       sync.RWMutex
	battleQueueNotificationUpdateCache          = make(map[string]updateCache)
	battleQueueNotificationUpsertCacheMut       sync.RWMutex
	battleQueueNotificationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battleQueueNotificationAfterSelectHooks []BattleQueueNotificationHook

var battleQueueNotificationBeforeInsertHooks []BattleQueueNotificationHook
var battleQueueNotificationAfterInsertHooks []BattleQueueNotificationHook

var battleQueueNotificationBeforeUpdateHooks []BattleQueueNotificationHook
var battleQueueNotificationAfterUpdateHooks []BattleQueueNotificationHook

var battleQueueNotificationBeforeDeleteHooks []BattleQueueNotificationHook
var battleQueueNotificationAfterDeleteHooks []BattleQueueNotificationHook

var battleQueueNotificationBeforeUpsertHooks []BattleQueueNotificationHook
var battleQueueNotificationAfterUpsertHooks []BattleQueueNotificationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BattleQueueNotification) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueNotificationAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BattleQueueNotification) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueNotificationBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BattleQueueNotification) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueNotificationAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BattleQueueNotification) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueNotificationBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BattleQueueNotification) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueNotificationAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BattleQueueNotification) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueNotificationBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BattleQueueNotification) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueNotificationAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BattleQueueNotification) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueNotificationBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BattleQueueNotification) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueNotificationAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattleQueueNotificationHook registers your hook function for all future operations.
func AddBattleQueueNotificationHook(hookPoint boil.HookPoint, battleQueueNotificationHook BattleQueueNotificationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		battleQueueNotificationAfterSelectHooks = append(battleQueueNotificationAfterSelectHooks, battleQueueNotificationHook)
	case boil.BeforeInsertHook:
		battleQueueNotificationBeforeInsertHooks = append(battleQueueNotificationBeforeInsertHooks, battleQueueNotificationHook)
	case boil.AfterInsertHook:
		battleQueueNotificationAfterInsertHooks = append(battleQueueNotificationAfterInsertHooks, battleQueueNotificationHook)
	case boil.BeforeUpdateHook:
		battleQueueNotificationBeforeUpdateHooks = append(battleQueueNotificationBeforeUpdateHooks, battleQueueNotificationHook)
	case boil.AfterUpdateHook:
		battleQueueNotificationAfterUpdateHooks = append(battleQueueNotificationAfterUpdateHooks, battleQueueNotificationHook)
	case boil.BeforeDeleteHook:
		battleQueueNotificationBeforeDeleteHooks = append(battleQueueNotificationBeforeDeleteHooks, battleQueueNotificationHook)
	case boil.AfterDeleteHook:
		battleQueueNotificationAfterDeleteHooks = append(battleQueueNotificationAfterDeleteHooks, battleQueueNotificationHook)
	case boil.BeforeUpsertHook:
		battleQueueNotificationBeforeUpsertHooks = append(battleQueueNotificationBeforeUpsertHooks, battleQueueNotificationHook)
	case boil.AfterUpsertHook:
		battleQueueNotificationAfterUpsertHooks = append(battleQueueNotificationAfterUpsertHooks, battleQueueNotificationHook)
	}
}

// One returns a single battleQueueNotification record from the query.
func (q battleQueueNotificationQuery) One(exec boil.Executor) (*BattleQueueNotification, error) {
	o := &BattleQueueNotification{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for battle_queue_notifications")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BattleQueueNotification records from the query.
func (q battleQueueNotificationQuery) All(exec boil.Executor) (BattleQueueNotificationSlice, error) {
	var o []*BattleQueueNotification

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BattleQueueNotification slice")
	}

	if len(battleQueueNotificationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BattleQueueNotification records in the query.
func (q battleQueueNotificationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count battle_queue_notifications rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battleQueueNotificationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if battle_queue_notifications exists")
	}

	return count > 0, nil
}

// Battle pointed to by the foreign key.
func (o *BattleQueueNotification) Battle(mods ...qm.QueryMod) battleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BattleID),
	}

	queryMods = append(queryMods, mods...)

	query := Battles(queryMods...)
	queries.SetFrom(query.Query, "\"battles\"")

	return query
}

// Mech pointed to by the foreign key.
func (o *BattleQueueNotification) Mech(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MechID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// QueueMech pointed to by the foreign key.
func (o *BattleQueueNotification) QueueMech(mods ...qm.QueryMod) battleQueueQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"mech_id\" = ?", o.QueueMechID),
	}

	queryMods = append(queryMods, mods...)

	query := BattleQueues(queryMods...)
	queries.SetFrom(query.Query, "\"battle_queue\"")

	return query
}

// TelegramNotification pointed to by the foreign key.
func (o *BattleQueueNotification) TelegramNotification(mods ...qm.QueryMod) telegramNotificationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TelegramNotificationID),
	}

	queryMods = append(queryMods, mods...)

	query := TelegramNotifications(queryMods...)
	queries.SetFrom(query.Query, "\"telegram_notifications\"")

	return query
}

// LoadBattle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleQueueNotificationL) LoadBattle(e boil.Executor, singular bool, maybeBattleQueueNotification interface{}, mods queries.Applicator) error {
	var slice []*BattleQueueNotification
	var object *BattleQueueNotification

	if singular {
		object = maybeBattleQueueNotification.(*BattleQueueNotification)
	} else {
		slice = *maybeBattleQueueNotification.(*[]*BattleQueueNotification)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleQueueNotificationR{}
		}
		if !queries.IsNil(object.BattleID) {
			args = append(args, object.BattleID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleQueueNotificationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BattleID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BattleID) {
				args = append(args, obj.BattleID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battles`),
		qm.WhereIn(`battles.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Battle")
	}

	var resultSlice []*Battle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Battle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battles")
	}

	if len(battleQueueNotificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Battle = foreign
		if foreign.R == nil {
			foreign.R = &battleR{}
		}
		foreign.R.BattleQueueNotifications = append(foreign.R.BattleQueueNotifications, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BattleID, foreign.ID) {
				local.R.Battle = foreign
				if foreign.R == nil {
					foreign.R = &battleR{}
				}
				foreign.R.BattleQueueNotifications = append(foreign.R.BattleQueueNotifications, local)
				break
			}
		}
	}

	return nil
}

// LoadMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleQueueNotificationL) LoadMech(e boil.Executor, singular bool, maybeBattleQueueNotification interface{}, mods queries.Applicator) error {
	var slice []*BattleQueueNotification
	var object *BattleQueueNotification

	if singular {
		object = maybeBattleQueueNotification.(*BattleQueueNotification)
	} else {
		slice = *maybeBattleQueueNotification.(*[]*BattleQueueNotification)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleQueueNotificationR{}
		}
		args = append(args, object.MechID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleQueueNotificationR{}
			}

			for _, a := range args {
				if a == obj.MechID {
					continue Outer
				}
			}

			args = append(args, obj.MechID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(battleQueueNotificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Mech = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.BattleQueueNotifications = append(foreign.R.BattleQueueNotifications, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MechID == foreign.ID {
				local.R.Mech = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.BattleQueueNotifications = append(foreign.R.BattleQueueNotifications, local)
				break
			}
		}
	}

	return nil
}

// LoadQueueMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleQueueNotificationL) LoadQueueMech(e boil.Executor, singular bool, maybeBattleQueueNotification interface{}, mods queries.Applicator) error {
	var slice []*BattleQueueNotification
	var object *BattleQueueNotification

	if singular {
		object = maybeBattleQueueNotification.(*BattleQueueNotification)
	} else {
		slice = *maybeBattleQueueNotification.(*[]*BattleQueueNotification)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleQueueNotificationR{}
		}
		if !queries.IsNil(object.QueueMechID) {
			args = append(args, object.QueueMechID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleQueueNotificationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QueueMechID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.QueueMechID) {
				args = append(args, obj.QueueMechID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_queue`),
		qm.WhereIn(`battle_queue.mech_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BattleQueue")
	}

	var resultSlice []*BattleQueue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BattleQueue")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battle_queue")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_queue")
	}

	if len(battleQueueNotificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.QueueMech = foreign
		if foreign.R == nil {
			foreign.R = &battleQueueR{}
		}
		foreign.R.QueueMechBattleQueueNotifications = append(foreign.R.QueueMechBattleQueueNotifications, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.QueueMechID, foreign.MechID) {
				local.R.QueueMech = foreign
				if foreign.R == nil {
					foreign.R = &battleQueueR{}
				}
				foreign.R.QueueMechBattleQueueNotifications = append(foreign.R.QueueMechBattleQueueNotifications, local)
				break
			}
		}
	}

	return nil
}

// LoadTelegramNotification allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleQueueNotificationL) LoadTelegramNotification(e boil.Executor, singular bool, maybeBattleQueueNotification interface{}, mods queries.Applicator) error {
	var slice []*BattleQueueNotification
	var object *BattleQueueNotification

	if singular {
		object = maybeBattleQueueNotification.(*BattleQueueNotification)
	} else {
		slice = *maybeBattleQueueNotification.(*[]*BattleQueueNotification)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleQueueNotificationR{}
		}
		if !queries.IsNil(object.TelegramNotificationID) {
			args = append(args, object.TelegramNotificationID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleQueueNotificationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TelegramNotificationID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TelegramNotificationID) {
				args = append(args, obj.TelegramNotificationID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`telegram_notifications`),
		qm.WhereIn(`telegram_notifications.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TelegramNotification")
	}

	var resultSlice []*TelegramNotification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TelegramNotification")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for telegram_notifications")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for telegram_notifications")
	}

	if len(battleQueueNotificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TelegramNotification = foreign
		if foreign.R == nil {
			foreign.R = &telegramNotificationR{}
		}
		foreign.R.BattleQueueNotifications = append(foreign.R.BattleQueueNotifications, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TelegramNotificationID, foreign.ID) {
				local.R.TelegramNotification = foreign
				if foreign.R == nil {
					foreign.R = &telegramNotificationR{}
				}
				foreign.R.BattleQueueNotifications = append(foreign.R.BattleQueueNotifications, local)
				break
			}
		}
	}

	return nil
}

// SetBattle of the battleQueueNotification to the related item.
// Sets o.R.Battle to related.
// Adds o to related.R.BattleQueueNotifications.
func (o *BattleQueueNotification) SetBattle(exec boil.Executor, insert bool, related *Battle) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_queue_notifications\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleQueueNotificationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BattleID, related.ID)
	if o.R == nil {
		o.R = &battleQueueNotificationR{
			Battle: related,
		}
	} else {
		o.R.Battle = related
	}

	if related.R == nil {
		related.R = &battleR{
			BattleQueueNotifications: BattleQueueNotificationSlice{o},
		}
	} else {
		related.R.BattleQueueNotifications = append(related.R.BattleQueueNotifications, o)
	}

	return nil
}

// RemoveBattle relationship.
// Sets o.R.Battle to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BattleQueueNotification) RemoveBattle(exec boil.Executor, related *Battle) error {
	var err error

	queries.SetScanner(&o.BattleID, nil)
	if _, err = o.Update(exec, boil.Whitelist("battle_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Battle = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BattleQueueNotifications {
		if queries.Equal(o.BattleID, ri.BattleID) {
			continue
		}

		ln := len(related.R.BattleQueueNotifications)
		if ln > 1 && i < ln-1 {
			related.R.BattleQueueNotifications[i] = related.R.BattleQueueNotifications[ln-1]
		}
		related.R.BattleQueueNotifications = related.R.BattleQueueNotifications[:ln-1]
		break
	}
	return nil
}

// SetMech of the battleQueueNotification to the related item.
// Sets o.R.Mech to related.
// Adds o to related.R.BattleQueueNotifications.
func (o *BattleQueueNotification) SetMech(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_queue_notifications\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleQueueNotificationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MechID = related.ID
	if o.R == nil {
		o.R = &battleQueueNotificationR{
			Mech: related,
		}
	} else {
		o.R.Mech = related
	}

	if related.R == nil {
		related.R = &mechR{
			BattleQueueNotifications: BattleQueueNotificationSlice{o},
		}
	} else {
		related.R.BattleQueueNotifications = append(related.R.BattleQueueNotifications, o)
	}

	return nil
}

// SetQueueMech of the battleQueueNotification to the related item.
// Sets o.R.QueueMech to related.
// Adds o to related.R.QueueMechBattleQueueNotifications.
func (o *BattleQueueNotification) SetQueueMech(exec boil.Executor, insert bool, related *BattleQueue) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_queue_notifications\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"queue_mech_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleQueueNotificationPrimaryKeyColumns),
	)
	values := []interface{}{related.MechID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.QueueMechID, related.MechID)
	if o.R == nil {
		o.R = &battleQueueNotificationR{
			QueueMech: related,
		}
	} else {
		o.R.QueueMech = related
	}

	if related.R == nil {
		related.R = &battleQueueR{
			QueueMechBattleQueueNotifications: BattleQueueNotificationSlice{o},
		}
	} else {
		related.R.QueueMechBattleQueueNotifications = append(related.R.QueueMechBattleQueueNotifications, o)
	}

	return nil
}

// RemoveQueueMech relationship.
// Sets o.R.QueueMech to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BattleQueueNotification) RemoveQueueMech(exec boil.Executor, related *BattleQueue) error {
	var err error

	queries.SetScanner(&o.QueueMechID, nil)
	if _, err = o.Update(exec, boil.Whitelist("queue_mech_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.QueueMech = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.QueueMechBattleQueueNotifications {
		if queries.Equal(o.QueueMechID, ri.QueueMechID) {
			continue
		}

		ln := len(related.R.QueueMechBattleQueueNotifications)
		if ln > 1 && i < ln-1 {
			related.R.QueueMechBattleQueueNotifications[i] = related.R.QueueMechBattleQueueNotifications[ln-1]
		}
		related.R.QueueMechBattleQueueNotifications = related.R.QueueMechBattleQueueNotifications[:ln-1]
		break
	}
	return nil
}

// SetTelegramNotification of the battleQueueNotification to the related item.
// Sets o.R.TelegramNotification to related.
// Adds o to related.R.BattleQueueNotifications.
func (o *BattleQueueNotification) SetTelegramNotification(exec boil.Executor, insert bool, related *TelegramNotification) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_queue_notifications\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"telegram_notification_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleQueueNotificationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TelegramNotificationID, related.ID)
	if o.R == nil {
		o.R = &battleQueueNotificationR{
			TelegramNotification: related,
		}
	} else {
		o.R.TelegramNotification = related
	}

	if related.R == nil {
		related.R = &telegramNotificationR{
			BattleQueueNotifications: BattleQueueNotificationSlice{o},
		}
	} else {
		related.R.BattleQueueNotifications = append(related.R.BattleQueueNotifications, o)
	}

	return nil
}

// RemoveTelegramNotification relationship.
// Sets o.R.TelegramNotification to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BattleQueueNotification) RemoveTelegramNotification(exec boil.Executor, related *TelegramNotification) error {
	var err error

	queries.SetScanner(&o.TelegramNotificationID, nil)
	if _, err = o.Update(exec, boil.Whitelist("telegram_notification_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.TelegramNotification = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BattleQueueNotifications {
		if queries.Equal(o.TelegramNotificationID, ri.TelegramNotificationID) {
			continue
		}

		ln := len(related.R.BattleQueueNotifications)
		if ln > 1 && i < ln-1 {
			related.R.BattleQueueNotifications[i] = related.R.BattleQueueNotifications[ln-1]
		}
		related.R.BattleQueueNotifications = related.R.BattleQueueNotifications[:ln-1]
		break
	}
	return nil
}

// BattleQueueNotifications retrieves all the records using an executor.
func BattleQueueNotifications(mods ...qm.QueryMod) battleQueueNotificationQuery {
	mods = append(mods, qm.From("\"battle_queue_notifications\""))
	return battleQueueNotificationQuery{NewQuery(mods...)}
}

// FindBattleQueueNotification retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattleQueueNotification(exec boil.Executor, iD string, selectCols ...string) (*BattleQueueNotification, error) {
	battleQueueNotificationObj := &BattleQueueNotification{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battle_queue_notifications\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, battleQueueNotificationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from battle_queue_notifications")
	}

	if err = battleQueueNotificationObj.doAfterSelectHooks(exec); err != nil {
		return battleQueueNotificationObj, err
	}

	return battleQueueNotificationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BattleQueueNotification) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_queue_notifications provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleQueueNotificationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battleQueueNotificationInsertCacheMut.RLock()
	cache, cached := battleQueueNotificationInsertCache[key]
	battleQueueNotificationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battleQueueNotificationAllColumns,
			battleQueueNotificationColumnsWithDefault,
			battleQueueNotificationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battleQueueNotificationType, battleQueueNotificationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battleQueueNotificationType, battleQueueNotificationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battle_queue_notifications\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battle_queue_notifications\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into battle_queue_notifications")
	}

	if !cached {
		battleQueueNotificationInsertCacheMut.Lock()
		battleQueueNotificationInsertCache[key] = cache
		battleQueueNotificationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BattleQueueNotification.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BattleQueueNotification) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battleQueueNotificationUpdateCacheMut.RLock()
	cache, cached := battleQueueNotificationUpdateCache[key]
	battleQueueNotificationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battleQueueNotificationAllColumns,
			battleQueueNotificationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update battle_queue_notifications, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battle_queue_notifications\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battleQueueNotificationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battleQueueNotificationType, battleQueueNotificationMapping, append(wl, battleQueueNotificationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update battle_queue_notifications row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for battle_queue_notifications")
	}

	if !cached {
		battleQueueNotificationUpdateCacheMut.Lock()
		battleQueueNotificationUpdateCache[key] = cache
		battleQueueNotificationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battleQueueNotificationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for battle_queue_notifications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for battle_queue_notifications")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattleQueueNotificationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleQueueNotificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battle_queue_notifications\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battleQueueNotificationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in battleQueueNotification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all battleQueueNotification")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BattleQueueNotification) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_queue_notifications provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleQueueNotificationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battleQueueNotificationUpsertCacheMut.RLock()
	cache, cached := battleQueueNotificationUpsertCache[key]
	battleQueueNotificationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battleQueueNotificationAllColumns,
			battleQueueNotificationColumnsWithDefault,
			battleQueueNotificationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			battleQueueNotificationAllColumns,
			battleQueueNotificationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert battle_queue_notifications, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battleQueueNotificationPrimaryKeyColumns))
			copy(conflict, battleQueueNotificationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battle_queue_notifications\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battleQueueNotificationType, battleQueueNotificationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battleQueueNotificationType, battleQueueNotificationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert battle_queue_notifications")
	}

	if !cached {
		battleQueueNotificationUpsertCacheMut.Lock()
		battleQueueNotificationUpsertCache[key] = cache
		battleQueueNotificationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BattleQueueNotification record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BattleQueueNotification) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BattleQueueNotification provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battleQueueNotificationPrimaryKeyMapping)
	sql := "DELETE FROM \"battle_queue_notifications\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from battle_queue_notifications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for battle_queue_notifications")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battleQueueNotificationQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no battleQueueNotificationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battle_queue_notifications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_queue_notifications")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattleQueueNotificationSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(battleQueueNotificationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleQueueNotificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"battle_queue_notifications\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleQueueNotificationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battleQueueNotification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_queue_notifications")
	}

	if len(battleQueueNotificationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BattleQueueNotification) Reload(exec boil.Executor) error {
	ret, err := FindBattleQueueNotification(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattleQueueNotificationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattleQueueNotificationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleQueueNotificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battle_queue_notifications\".* FROM \"battle_queue_notifications\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleQueueNotificationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BattleQueueNotificationSlice")
	}

	*o = slice

	return nil
}

// BattleQueueNotificationExists checks if the BattleQueueNotification row exists.
func BattleQueueNotificationExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battle_queue_notifications\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if battle_queue_notifications exists")
	}

	return exists, nil
}
