// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SyndicateEventLog is an object representing the database table.
type SyndicateEventLog struct {
	ID               string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	InvolvedPlayerID string    `boiler:"involved_player_id" boil:"involved_player_id" json:"involved_player_id" toml:"involved_player_id" yaml:"involved_player_id"`
	Type             string    `boiler:"type" boil:"type" json:"type" toml:"type" yaml:"type"`
	CreatedAt        time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt        null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *syndicateEventLogR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L syndicateEventLogL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SyndicateEventLogColumns = struct {
	ID               string
	InvolvedPlayerID string
	Type             string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
}{
	ID:               "id",
	InvolvedPlayerID: "involved_player_id",
	Type:             "type",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	DeletedAt:        "deleted_at",
}

var SyndicateEventLogTableColumns = struct {
	ID               string
	InvolvedPlayerID string
	Type             string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
}{
	ID:               "syndicate_event_log.id",
	InvolvedPlayerID: "syndicate_event_log.involved_player_id",
	Type:             "syndicate_event_log.type",
	CreatedAt:        "syndicate_event_log.created_at",
	UpdatedAt:        "syndicate_event_log.updated_at",
	DeletedAt:        "syndicate_event_log.deleted_at",
}

// Generated where

var SyndicateEventLogWhere = struct {
	ID               whereHelperstring
	InvolvedPlayerID whereHelperstring
	Type             whereHelperstring
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
	DeletedAt        whereHelpernull_Time
}{
	ID:               whereHelperstring{field: "\"syndicate_event_log\".\"id\""},
	InvolvedPlayerID: whereHelperstring{field: "\"syndicate_event_log\".\"involved_player_id\""},
	Type:             whereHelperstring{field: "\"syndicate_event_log\".\"type\""},
	CreatedAt:        whereHelpertime_Time{field: "\"syndicate_event_log\".\"created_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"syndicate_event_log\".\"updated_at\""},
	DeletedAt:        whereHelpernull_Time{field: "\"syndicate_event_log\".\"deleted_at\""},
}

// SyndicateEventLogRels is where relationship names are stored.
var SyndicateEventLogRels = struct {
	InvolvedPlayer string
}{
	InvolvedPlayer: "InvolvedPlayer",
}

// syndicateEventLogR is where relationships are stored.
type syndicateEventLogR struct {
	InvolvedPlayer *Player `boiler:"InvolvedPlayer" boil:"InvolvedPlayer" json:"InvolvedPlayer" toml:"InvolvedPlayer" yaml:"InvolvedPlayer"`
}

// NewStruct creates a new relationship struct
func (*syndicateEventLogR) NewStruct() *syndicateEventLogR {
	return &syndicateEventLogR{}
}

// syndicateEventLogL is where Load methods for each relationship are stored.
type syndicateEventLogL struct{}

var (
	syndicateEventLogAllColumns            = []string{"id", "involved_player_id", "type", "created_at", "updated_at", "deleted_at"}
	syndicateEventLogColumnsWithoutDefault = []string{"involved_player_id", "type"}
	syndicateEventLogColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at"}
	syndicateEventLogPrimaryKeyColumns     = []string{"id"}
	syndicateEventLogGeneratedColumns      = []string{}
)

type (
	// SyndicateEventLogSlice is an alias for a slice of pointers to SyndicateEventLog.
	// This should almost always be used instead of []SyndicateEventLog.
	SyndicateEventLogSlice []*SyndicateEventLog
	// SyndicateEventLogHook is the signature for custom SyndicateEventLog hook methods
	SyndicateEventLogHook func(boil.Executor, *SyndicateEventLog) error

	syndicateEventLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	syndicateEventLogType                 = reflect.TypeOf(&SyndicateEventLog{})
	syndicateEventLogMapping              = queries.MakeStructMapping(syndicateEventLogType)
	syndicateEventLogPrimaryKeyMapping, _ = queries.BindMapping(syndicateEventLogType, syndicateEventLogMapping, syndicateEventLogPrimaryKeyColumns)
	syndicateEventLogInsertCacheMut       sync.RWMutex
	syndicateEventLogInsertCache          = make(map[string]insertCache)
	syndicateEventLogUpdateCacheMut       sync.RWMutex
	syndicateEventLogUpdateCache          = make(map[string]updateCache)
	syndicateEventLogUpsertCacheMut       sync.RWMutex
	syndicateEventLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var syndicateEventLogAfterSelectHooks []SyndicateEventLogHook

var syndicateEventLogBeforeInsertHooks []SyndicateEventLogHook
var syndicateEventLogAfterInsertHooks []SyndicateEventLogHook

var syndicateEventLogBeforeUpdateHooks []SyndicateEventLogHook
var syndicateEventLogAfterUpdateHooks []SyndicateEventLogHook

var syndicateEventLogBeforeDeleteHooks []SyndicateEventLogHook
var syndicateEventLogAfterDeleteHooks []SyndicateEventLogHook

var syndicateEventLogBeforeUpsertHooks []SyndicateEventLogHook
var syndicateEventLogAfterUpsertHooks []SyndicateEventLogHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SyndicateEventLog) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateEventLogAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SyndicateEventLog) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateEventLogBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SyndicateEventLog) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateEventLogAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SyndicateEventLog) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateEventLogBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SyndicateEventLog) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateEventLogAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SyndicateEventLog) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateEventLogBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SyndicateEventLog) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateEventLogAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SyndicateEventLog) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateEventLogBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SyndicateEventLog) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateEventLogAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSyndicateEventLogHook registers your hook function for all future operations.
func AddSyndicateEventLogHook(hookPoint boil.HookPoint, syndicateEventLogHook SyndicateEventLogHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		syndicateEventLogAfterSelectHooks = append(syndicateEventLogAfterSelectHooks, syndicateEventLogHook)
	case boil.BeforeInsertHook:
		syndicateEventLogBeforeInsertHooks = append(syndicateEventLogBeforeInsertHooks, syndicateEventLogHook)
	case boil.AfterInsertHook:
		syndicateEventLogAfterInsertHooks = append(syndicateEventLogAfterInsertHooks, syndicateEventLogHook)
	case boil.BeforeUpdateHook:
		syndicateEventLogBeforeUpdateHooks = append(syndicateEventLogBeforeUpdateHooks, syndicateEventLogHook)
	case boil.AfterUpdateHook:
		syndicateEventLogAfterUpdateHooks = append(syndicateEventLogAfterUpdateHooks, syndicateEventLogHook)
	case boil.BeforeDeleteHook:
		syndicateEventLogBeforeDeleteHooks = append(syndicateEventLogBeforeDeleteHooks, syndicateEventLogHook)
	case boil.AfterDeleteHook:
		syndicateEventLogAfterDeleteHooks = append(syndicateEventLogAfterDeleteHooks, syndicateEventLogHook)
	case boil.BeforeUpsertHook:
		syndicateEventLogBeforeUpsertHooks = append(syndicateEventLogBeforeUpsertHooks, syndicateEventLogHook)
	case boil.AfterUpsertHook:
		syndicateEventLogAfterUpsertHooks = append(syndicateEventLogAfterUpsertHooks, syndicateEventLogHook)
	}
}

// One returns a single syndicateEventLog record from the query.
func (q syndicateEventLogQuery) One(exec boil.Executor) (*SyndicateEventLog, error) {
	o := &SyndicateEventLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for syndicate_event_log")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SyndicateEventLog records from the query.
func (q syndicateEventLogQuery) All(exec boil.Executor) (SyndicateEventLogSlice, error) {
	var o []*SyndicateEventLog

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to SyndicateEventLog slice")
	}

	if len(syndicateEventLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SyndicateEventLog records in the query.
func (q syndicateEventLogQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count syndicate_event_log rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q syndicateEventLogQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if syndicate_event_log exists")
	}

	return count > 0, nil
}

// InvolvedPlayer pointed to by the foreign key.
func (o *SyndicateEventLog) InvolvedPlayer(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.InvolvedPlayerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// LoadInvolvedPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateEventLogL) LoadInvolvedPlayer(e boil.Executor, singular bool, maybeSyndicateEventLog interface{}, mods queries.Applicator) error {
	var slice []*SyndicateEventLog
	var object *SyndicateEventLog

	if singular {
		object = maybeSyndicateEventLog.(*SyndicateEventLog)
	} else {
		slice = *maybeSyndicateEventLog.(*[]*SyndicateEventLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateEventLogR{}
		}
		args = append(args, object.InvolvedPlayerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateEventLogR{}
			}

			for _, a := range args {
				if a == obj.InvolvedPlayerID {
					continue Outer
				}
			}

			args = append(args, obj.InvolvedPlayerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(syndicateEventLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InvolvedPlayer = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.InvolvedPlayerSyndicateEventLogs = append(foreign.R.InvolvedPlayerSyndicateEventLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InvolvedPlayerID == foreign.ID {
				local.R.InvolvedPlayer = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.InvolvedPlayerSyndicateEventLogs = append(foreign.R.InvolvedPlayerSyndicateEventLogs, local)
				break
			}
		}
	}

	return nil
}

// SetInvolvedPlayer of the syndicateEventLog to the related item.
// Sets o.R.InvolvedPlayer to related.
// Adds o to related.R.InvolvedPlayerSyndicateEventLogs.
func (o *SyndicateEventLog) SetInvolvedPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicate_event_log\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"involved_player_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicateEventLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InvolvedPlayerID = related.ID
	if o.R == nil {
		o.R = &syndicateEventLogR{
			InvolvedPlayer: related,
		}
	} else {
		o.R.InvolvedPlayer = related
	}

	if related.R == nil {
		related.R = &playerR{
			InvolvedPlayerSyndicateEventLogs: SyndicateEventLogSlice{o},
		}
	} else {
		related.R.InvolvedPlayerSyndicateEventLogs = append(related.R.InvolvedPlayerSyndicateEventLogs, o)
	}

	return nil
}

// SyndicateEventLogs retrieves all the records using an executor.
func SyndicateEventLogs(mods ...qm.QueryMod) syndicateEventLogQuery {
	mods = append(mods, qm.From("\"syndicate_event_log\""), qmhelper.WhereIsNull("\"syndicate_event_log\".\"deleted_at\""))
	return syndicateEventLogQuery{NewQuery(mods...)}
}

// FindSyndicateEventLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSyndicateEventLog(exec boil.Executor, iD string, selectCols ...string) (*SyndicateEventLog, error) {
	syndicateEventLogObj := &SyndicateEventLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"syndicate_event_log\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, syndicateEventLogObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from syndicate_event_log")
	}

	if err = syndicateEventLogObj.doAfterSelectHooks(exec); err != nil {
		return syndicateEventLogObj, err
	}

	return syndicateEventLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SyndicateEventLog) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no syndicate_event_log provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syndicateEventLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	syndicateEventLogInsertCacheMut.RLock()
	cache, cached := syndicateEventLogInsertCache[key]
	syndicateEventLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			syndicateEventLogAllColumns,
			syndicateEventLogColumnsWithDefault,
			syndicateEventLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(syndicateEventLogType, syndicateEventLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(syndicateEventLogType, syndicateEventLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"syndicate_event_log\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"syndicate_event_log\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into syndicate_event_log")
	}

	if !cached {
		syndicateEventLogInsertCacheMut.Lock()
		syndicateEventLogInsertCache[key] = cache
		syndicateEventLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the SyndicateEventLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SyndicateEventLog) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	syndicateEventLogUpdateCacheMut.RLock()
	cache, cached := syndicateEventLogUpdateCache[key]
	syndicateEventLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			syndicateEventLogAllColumns,
			syndicateEventLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update syndicate_event_log, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"syndicate_event_log\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, syndicateEventLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(syndicateEventLogType, syndicateEventLogMapping, append(wl, syndicateEventLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update syndicate_event_log row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for syndicate_event_log")
	}

	if !cached {
		syndicateEventLogUpdateCacheMut.Lock()
		syndicateEventLogUpdateCache[key] = cache
		syndicateEventLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q syndicateEventLogQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for syndicate_event_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for syndicate_event_log")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SyndicateEventLogSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateEventLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"syndicate_event_log\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, syndicateEventLogPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in syndicateEventLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all syndicateEventLog")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SyndicateEventLog) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no syndicate_event_log provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syndicateEventLogColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	syndicateEventLogUpsertCacheMut.RLock()
	cache, cached := syndicateEventLogUpsertCache[key]
	syndicateEventLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			syndicateEventLogAllColumns,
			syndicateEventLogColumnsWithDefault,
			syndicateEventLogColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			syndicateEventLogAllColumns,
			syndicateEventLogPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert syndicate_event_log, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(syndicateEventLogPrimaryKeyColumns))
			copy(conflict, syndicateEventLogPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"syndicate_event_log\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(syndicateEventLogType, syndicateEventLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(syndicateEventLogType, syndicateEventLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert syndicate_event_log")
	}

	if !cached {
		syndicateEventLogUpsertCacheMut.Lock()
		syndicateEventLogUpsertCache[key] = cache
		syndicateEventLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single SyndicateEventLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SyndicateEventLog) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no SyndicateEventLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), syndicateEventLogPrimaryKeyMapping)
		sql = "DELETE FROM \"syndicate_event_log\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"syndicate_event_log\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(syndicateEventLogType, syndicateEventLogMapping, append(wl, syndicateEventLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from syndicate_event_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for syndicate_event_log")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q syndicateEventLogQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no syndicateEventLogQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from syndicate_event_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for syndicate_event_log")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SyndicateEventLogSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(syndicateEventLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateEventLogPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"syndicate_event_log\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syndicateEventLogPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateEventLogPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"syndicate_event_log\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, syndicateEventLogPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from syndicateEventLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for syndicate_event_log")
	}

	if len(syndicateEventLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SyndicateEventLog) Reload(exec boil.Executor) error {
	ret, err := FindSyndicateEventLog(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SyndicateEventLogSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SyndicateEventLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateEventLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"syndicate_event_log\".* FROM \"syndicate_event_log\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syndicateEventLogPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in SyndicateEventLogSlice")
	}

	*o = slice

	return nil
}

// SyndicateEventLogExists checks if the SyndicateEventLog row exists.
func SyndicateEventLogExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"syndicate_event_log\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if syndicate_event_log exists")
	}

	return exists, nil
}
