// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// UserSpoilsOfWar is an object representing the database table.
type UserSpoilsOfWar struct {
	ID                       string            `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	PlayerID                 string            `boiler:"player_id" boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	BattleID                 string            `boiler:"battle_id" boil:"battle_id" json:"battle_id" toml:"battle_id" yaml:"battle_id"`
	TotalMultiplierForBattle int               `boiler:"total_multiplier_for_battle" boil:"total_multiplier_for_battle" json:"total_multiplier_for_battle" toml:"total_multiplier_for_battle" yaml:"total_multiplier_for_battle"`
	TotalSow                 decimal.Decimal   `boiler:"total_sow" boil:"total_sow" json:"total_sow" toml:"total_sow" yaml:"total_sow"`
	PaidSow                  decimal.Decimal   `boiler:"paid_sow" boil:"paid_sow" json:"paid_sow" toml:"paid_sow" yaml:"paid_sow"`
	TickAmount               decimal.Decimal   `boiler:"tick_amount" boil:"tick_amount" json:"tick_amount" toml:"tick_amount" yaml:"tick_amount"`
	LostSow                  decimal.Decimal   `boiler:"lost_sow" boil:"lost_sow" json:"lost_sow" toml:"lost_sow" yaml:"lost_sow"`
	RelatedTransactionIds    types.StringArray `boiler:"related_transaction_ids" boil:"related_transaction_ids" json:"related_transaction_ids,omitempty" toml:"related_transaction_ids" yaml:"related_transaction_ids,omitempty"`
	UpdatedAt                time.Time         `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt                null.Time         `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	CreatedAt                time.Time         `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *userSpoilsOfWarR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L userSpoilsOfWarL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserSpoilsOfWarColumns = struct {
	ID                       string
	PlayerID                 string
	BattleID                 string
	TotalMultiplierForBattle string
	TotalSow                 string
	PaidSow                  string
	TickAmount               string
	LostSow                  string
	RelatedTransactionIds    string
	UpdatedAt                string
	DeletedAt                string
	CreatedAt                string
}{
	ID:                       "id",
	PlayerID:                 "player_id",
	BattleID:                 "battle_id",
	TotalMultiplierForBattle: "total_multiplier_for_battle",
	TotalSow:                 "total_sow",
	PaidSow:                  "paid_sow",
	TickAmount:               "tick_amount",
	LostSow:                  "lost_sow",
	RelatedTransactionIds:    "related_transaction_ids",
	UpdatedAt:                "updated_at",
	DeletedAt:                "deleted_at",
	CreatedAt:                "created_at",
}

var UserSpoilsOfWarTableColumns = struct {
	ID                       string
	PlayerID                 string
	BattleID                 string
	TotalMultiplierForBattle string
	TotalSow                 string
	PaidSow                  string
	TickAmount               string
	LostSow                  string
	RelatedTransactionIds    string
	UpdatedAt                string
	DeletedAt                string
	CreatedAt                string
}{
	ID:                       "user_spoils_of_war.id",
	PlayerID:                 "user_spoils_of_war.player_id",
	BattleID:                 "user_spoils_of_war.battle_id",
	TotalMultiplierForBattle: "user_spoils_of_war.total_multiplier_for_battle",
	TotalSow:                 "user_spoils_of_war.total_sow",
	PaidSow:                  "user_spoils_of_war.paid_sow",
	TickAmount:               "user_spoils_of_war.tick_amount",
	LostSow:                  "user_spoils_of_war.lost_sow",
	RelatedTransactionIds:    "user_spoils_of_war.related_transaction_ids",
	UpdatedAt:                "user_spoils_of_war.updated_at",
	DeletedAt:                "user_spoils_of_war.deleted_at",
	CreatedAt:                "user_spoils_of_war.created_at",
}

// Generated where

type whereHelpertypes_StringArray struct{ field string }

func (w whereHelpertypes_StringArray) EQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_StringArray) NEQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_StringArray) LT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_StringArray) LTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_StringArray) GT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_StringArray) GTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_StringArray) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_StringArray) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var UserSpoilsOfWarWhere = struct {
	ID                       whereHelperstring
	PlayerID                 whereHelperstring
	BattleID                 whereHelperstring
	TotalMultiplierForBattle whereHelperint
	TotalSow                 whereHelperdecimal_Decimal
	PaidSow                  whereHelperdecimal_Decimal
	TickAmount               whereHelperdecimal_Decimal
	LostSow                  whereHelperdecimal_Decimal
	RelatedTransactionIds    whereHelpertypes_StringArray
	UpdatedAt                whereHelpertime_Time
	DeletedAt                whereHelpernull_Time
	CreatedAt                whereHelpertime_Time
}{
	ID:                       whereHelperstring{field: "\"user_spoils_of_war\".\"id\""},
	PlayerID:                 whereHelperstring{field: "\"user_spoils_of_war\".\"player_id\""},
	BattleID:                 whereHelperstring{field: "\"user_spoils_of_war\".\"battle_id\""},
	TotalMultiplierForBattle: whereHelperint{field: "\"user_spoils_of_war\".\"total_multiplier_for_battle\""},
	TotalSow:                 whereHelperdecimal_Decimal{field: "\"user_spoils_of_war\".\"total_sow\""},
	PaidSow:                  whereHelperdecimal_Decimal{field: "\"user_spoils_of_war\".\"paid_sow\""},
	TickAmount:               whereHelperdecimal_Decimal{field: "\"user_spoils_of_war\".\"tick_amount\""},
	LostSow:                  whereHelperdecimal_Decimal{field: "\"user_spoils_of_war\".\"lost_sow\""},
	RelatedTransactionIds:    whereHelpertypes_StringArray{field: "\"user_spoils_of_war\".\"related_transaction_ids\""},
	UpdatedAt:                whereHelpertime_Time{field: "\"user_spoils_of_war\".\"updated_at\""},
	DeletedAt:                whereHelpernull_Time{field: "\"user_spoils_of_war\".\"deleted_at\""},
	CreatedAt:                whereHelpertime_Time{field: "\"user_spoils_of_war\".\"created_at\""},
}

// UserSpoilsOfWarRels is where relationship names are stored.
var UserSpoilsOfWarRels = struct {
	Battle string
	Player string
}{
	Battle: "Battle",
	Player: "Player",
}

// userSpoilsOfWarR is where relationships are stored.
type userSpoilsOfWarR struct {
	Battle *Battle `boiler:"Battle" boil:"Battle" json:"Battle" toml:"Battle" yaml:"Battle"`
	Player *Player `boiler:"Player" boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
}

// NewStruct creates a new relationship struct
func (*userSpoilsOfWarR) NewStruct() *userSpoilsOfWarR {
	return &userSpoilsOfWarR{}
}

// userSpoilsOfWarL is where Load methods for each relationship are stored.
type userSpoilsOfWarL struct{}

var (
	userSpoilsOfWarAllColumns            = []string{"id", "player_id", "battle_id", "total_multiplier_for_battle", "total_sow", "paid_sow", "tick_amount", "lost_sow", "related_transaction_ids", "updated_at", "deleted_at", "created_at"}
	userSpoilsOfWarColumnsWithoutDefault = []string{"player_id", "battle_id", "total_multiplier_for_battle", "total_sow", "paid_sow", "tick_amount", "lost_sow"}
	userSpoilsOfWarColumnsWithDefault    = []string{"id", "related_transaction_ids", "updated_at", "deleted_at", "created_at"}
	userSpoilsOfWarPrimaryKeyColumns     = []string{"id"}
	userSpoilsOfWarGeneratedColumns      = []string{}
)

type (
	// UserSpoilsOfWarSlice is an alias for a slice of pointers to UserSpoilsOfWar.
	// This should almost always be used instead of []UserSpoilsOfWar.
	UserSpoilsOfWarSlice []*UserSpoilsOfWar
	// UserSpoilsOfWarHook is the signature for custom UserSpoilsOfWar hook methods
	UserSpoilsOfWarHook func(boil.Executor, *UserSpoilsOfWar) error

	userSpoilsOfWarQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userSpoilsOfWarType                 = reflect.TypeOf(&UserSpoilsOfWar{})
	userSpoilsOfWarMapping              = queries.MakeStructMapping(userSpoilsOfWarType)
	userSpoilsOfWarPrimaryKeyMapping, _ = queries.BindMapping(userSpoilsOfWarType, userSpoilsOfWarMapping, userSpoilsOfWarPrimaryKeyColumns)
	userSpoilsOfWarInsertCacheMut       sync.RWMutex
	userSpoilsOfWarInsertCache          = make(map[string]insertCache)
	userSpoilsOfWarUpdateCacheMut       sync.RWMutex
	userSpoilsOfWarUpdateCache          = make(map[string]updateCache)
	userSpoilsOfWarUpsertCacheMut       sync.RWMutex
	userSpoilsOfWarUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userSpoilsOfWarAfterSelectHooks []UserSpoilsOfWarHook

var userSpoilsOfWarBeforeInsertHooks []UserSpoilsOfWarHook
var userSpoilsOfWarAfterInsertHooks []UserSpoilsOfWarHook

var userSpoilsOfWarBeforeUpdateHooks []UserSpoilsOfWarHook
var userSpoilsOfWarAfterUpdateHooks []UserSpoilsOfWarHook

var userSpoilsOfWarBeforeDeleteHooks []UserSpoilsOfWarHook
var userSpoilsOfWarAfterDeleteHooks []UserSpoilsOfWarHook

var userSpoilsOfWarBeforeUpsertHooks []UserSpoilsOfWarHook
var userSpoilsOfWarAfterUpsertHooks []UserSpoilsOfWarHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserSpoilsOfWar) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userSpoilsOfWarAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserSpoilsOfWar) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userSpoilsOfWarBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserSpoilsOfWar) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userSpoilsOfWarAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserSpoilsOfWar) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userSpoilsOfWarBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserSpoilsOfWar) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userSpoilsOfWarAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserSpoilsOfWar) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userSpoilsOfWarBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserSpoilsOfWar) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userSpoilsOfWarAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserSpoilsOfWar) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userSpoilsOfWarBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserSpoilsOfWar) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userSpoilsOfWarAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserSpoilsOfWarHook registers your hook function for all future operations.
func AddUserSpoilsOfWarHook(hookPoint boil.HookPoint, userSpoilsOfWarHook UserSpoilsOfWarHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userSpoilsOfWarAfterSelectHooks = append(userSpoilsOfWarAfterSelectHooks, userSpoilsOfWarHook)
	case boil.BeforeInsertHook:
		userSpoilsOfWarBeforeInsertHooks = append(userSpoilsOfWarBeforeInsertHooks, userSpoilsOfWarHook)
	case boil.AfterInsertHook:
		userSpoilsOfWarAfterInsertHooks = append(userSpoilsOfWarAfterInsertHooks, userSpoilsOfWarHook)
	case boil.BeforeUpdateHook:
		userSpoilsOfWarBeforeUpdateHooks = append(userSpoilsOfWarBeforeUpdateHooks, userSpoilsOfWarHook)
	case boil.AfterUpdateHook:
		userSpoilsOfWarAfterUpdateHooks = append(userSpoilsOfWarAfterUpdateHooks, userSpoilsOfWarHook)
	case boil.BeforeDeleteHook:
		userSpoilsOfWarBeforeDeleteHooks = append(userSpoilsOfWarBeforeDeleteHooks, userSpoilsOfWarHook)
	case boil.AfterDeleteHook:
		userSpoilsOfWarAfterDeleteHooks = append(userSpoilsOfWarAfterDeleteHooks, userSpoilsOfWarHook)
	case boil.BeforeUpsertHook:
		userSpoilsOfWarBeforeUpsertHooks = append(userSpoilsOfWarBeforeUpsertHooks, userSpoilsOfWarHook)
	case boil.AfterUpsertHook:
		userSpoilsOfWarAfterUpsertHooks = append(userSpoilsOfWarAfterUpsertHooks, userSpoilsOfWarHook)
	}
}

// One returns a single userSpoilsOfWar record from the query.
func (q userSpoilsOfWarQuery) One(exec boil.Executor) (*UserSpoilsOfWar, error) {
	o := &UserSpoilsOfWar{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for user_spoils_of_war")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserSpoilsOfWar records from the query.
func (q userSpoilsOfWarQuery) All(exec boil.Executor) (UserSpoilsOfWarSlice, error) {
	var o []*UserSpoilsOfWar

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to UserSpoilsOfWar slice")
	}

	if len(userSpoilsOfWarAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserSpoilsOfWar records in the query.
func (q userSpoilsOfWarQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count user_spoils_of_war rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userSpoilsOfWarQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if user_spoils_of_war exists")
	}

	return count > 0, nil
}

// Battle pointed to by the foreign key.
func (o *UserSpoilsOfWar) Battle(mods ...qm.QueryMod) battleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BattleID),
	}

	queryMods = append(queryMods, mods...)

	query := Battles(queryMods...)
	queries.SetFrom(query.Query, "\"battles\"")

	return query
}

// Player pointed to by the foreign key.
func (o *UserSpoilsOfWar) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// LoadBattle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userSpoilsOfWarL) LoadBattle(e boil.Executor, singular bool, maybeUserSpoilsOfWar interface{}, mods queries.Applicator) error {
	var slice []*UserSpoilsOfWar
	var object *UserSpoilsOfWar

	if singular {
		object = maybeUserSpoilsOfWar.(*UserSpoilsOfWar)
	} else {
		slice = *maybeUserSpoilsOfWar.(*[]*UserSpoilsOfWar)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userSpoilsOfWarR{}
		}
		args = append(args, object.BattleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userSpoilsOfWarR{}
			}

			for _, a := range args {
				if a == obj.BattleID {
					continue Outer
				}
			}

			args = append(args, obj.BattleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battles`),
		qm.WhereIn(`battles.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Battle")
	}

	var resultSlice []*Battle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Battle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battles")
	}

	if len(userSpoilsOfWarAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Battle = foreign
		if foreign.R == nil {
			foreign.R = &battleR{}
		}
		foreign.R.UserSpoilsOfWars = append(foreign.R.UserSpoilsOfWars, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BattleID == foreign.ID {
				local.R.Battle = foreign
				if foreign.R == nil {
					foreign.R = &battleR{}
				}
				foreign.R.UserSpoilsOfWars = append(foreign.R.UserSpoilsOfWars, local)
				break
			}
		}
	}

	return nil
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userSpoilsOfWarL) LoadPlayer(e boil.Executor, singular bool, maybeUserSpoilsOfWar interface{}, mods queries.Applicator) error {
	var slice []*UserSpoilsOfWar
	var object *UserSpoilsOfWar

	if singular {
		object = maybeUserSpoilsOfWar.(*UserSpoilsOfWar)
	} else {
		slice = *maybeUserSpoilsOfWar.(*[]*UserSpoilsOfWar)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userSpoilsOfWarR{}
		}
		args = append(args, object.PlayerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userSpoilsOfWarR{}
			}

			for _, a := range args {
				if a == obj.PlayerID {
					continue Outer
				}
			}

			args = append(args, obj.PlayerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(userSpoilsOfWarAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.UserSpoilsOfWars = append(foreign.R.UserSpoilsOfWars, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.ID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.UserSpoilsOfWars = append(foreign.R.UserSpoilsOfWars, local)
				break
			}
		}
	}

	return nil
}

// SetBattle of the userSpoilsOfWar to the related item.
// Sets o.R.Battle to related.
// Adds o to related.R.UserSpoilsOfWars.
func (o *UserSpoilsOfWar) SetBattle(exec boil.Executor, insert bool, related *Battle) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_spoils_of_war\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
		strmangle.WhereClause("\"", "\"", 2, userSpoilsOfWarPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BattleID = related.ID
	if o.R == nil {
		o.R = &userSpoilsOfWarR{
			Battle: related,
		}
	} else {
		o.R.Battle = related
	}

	if related.R == nil {
		related.R = &battleR{
			UserSpoilsOfWars: UserSpoilsOfWarSlice{o},
		}
	} else {
		related.R.UserSpoilsOfWars = append(related.R.UserSpoilsOfWars, o)
	}

	return nil
}

// SetPlayer of the userSpoilsOfWar to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.UserSpoilsOfWars.
func (o *UserSpoilsOfWar) SetPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_spoils_of_war\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, userSpoilsOfWarPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.ID
	if o.R == nil {
		o.R = &userSpoilsOfWarR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			UserSpoilsOfWars: UserSpoilsOfWarSlice{o},
		}
	} else {
		related.R.UserSpoilsOfWars = append(related.R.UserSpoilsOfWars, o)
	}

	return nil
}

// UserSpoilsOfWars retrieves all the records using an executor.
func UserSpoilsOfWars(mods ...qm.QueryMod) userSpoilsOfWarQuery {
	mods = append(mods, qm.From("\"user_spoils_of_war\""), qmhelper.WhereIsNull("\"user_spoils_of_war\".\"deleted_at\""))
	return userSpoilsOfWarQuery{NewQuery(mods...)}
}

// FindUserSpoilsOfWar retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserSpoilsOfWar(exec boil.Executor, iD string, selectCols ...string) (*UserSpoilsOfWar, error) {
	userSpoilsOfWarObj := &UserSpoilsOfWar{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_spoils_of_war\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, userSpoilsOfWarObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from user_spoils_of_war")
	}

	if err = userSpoilsOfWarObj.doAfterSelectHooks(exec); err != nil {
		return userSpoilsOfWarObj, err
	}

	return userSpoilsOfWarObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserSpoilsOfWar) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no user_spoils_of_war provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userSpoilsOfWarColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userSpoilsOfWarInsertCacheMut.RLock()
	cache, cached := userSpoilsOfWarInsertCache[key]
	userSpoilsOfWarInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userSpoilsOfWarAllColumns,
			userSpoilsOfWarColumnsWithDefault,
			userSpoilsOfWarColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userSpoilsOfWarType, userSpoilsOfWarMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userSpoilsOfWarType, userSpoilsOfWarMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_spoils_of_war\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_spoils_of_war\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into user_spoils_of_war")
	}

	if !cached {
		userSpoilsOfWarInsertCacheMut.Lock()
		userSpoilsOfWarInsertCache[key] = cache
		userSpoilsOfWarInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the UserSpoilsOfWar.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserSpoilsOfWar) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userSpoilsOfWarUpdateCacheMut.RLock()
	cache, cached := userSpoilsOfWarUpdateCache[key]
	userSpoilsOfWarUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userSpoilsOfWarAllColumns,
			userSpoilsOfWarPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update user_spoils_of_war, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_spoils_of_war\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userSpoilsOfWarPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userSpoilsOfWarType, userSpoilsOfWarMapping, append(wl, userSpoilsOfWarPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update user_spoils_of_war row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for user_spoils_of_war")
	}

	if !cached {
		userSpoilsOfWarUpdateCacheMut.Lock()
		userSpoilsOfWarUpdateCache[key] = cache
		userSpoilsOfWarUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userSpoilsOfWarQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for user_spoils_of_war")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for user_spoils_of_war")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserSpoilsOfWarSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userSpoilsOfWarPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_spoils_of_war\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userSpoilsOfWarPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in userSpoilsOfWar slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all userSpoilsOfWar")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserSpoilsOfWar) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no user_spoils_of_war provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userSpoilsOfWarColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userSpoilsOfWarUpsertCacheMut.RLock()
	cache, cached := userSpoilsOfWarUpsertCache[key]
	userSpoilsOfWarUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userSpoilsOfWarAllColumns,
			userSpoilsOfWarColumnsWithDefault,
			userSpoilsOfWarColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userSpoilsOfWarAllColumns,
			userSpoilsOfWarPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert user_spoils_of_war, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userSpoilsOfWarPrimaryKeyColumns))
			copy(conflict, userSpoilsOfWarPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_spoils_of_war\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userSpoilsOfWarType, userSpoilsOfWarMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userSpoilsOfWarType, userSpoilsOfWarMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert user_spoils_of_war")
	}

	if !cached {
		userSpoilsOfWarUpsertCacheMut.Lock()
		userSpoilsOfWarUpsertCache[key] = cache
		userSpoilsOfWarUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single UserSpoilsOfWar record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserSpoilsOfWar) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no UserSpoilsOfWar provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userSpoilsOfWarPrimaryKeyMapping)
		sql = "DELETE FROM \"user_spoils_of_war\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"user_spoils_of_war\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(userSpoilsOfWarType, userSpoilsOfWarMapping, append(wl, userSpoilsOfWarPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from user_spoils_of_war")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for user_spoils_of_war")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userSpoilsOfWarQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no userSpoilsOfWarQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from user_spoils_of_war")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for user_spoils_of_war")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserSpoilsOfWarSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userSpoilsOfWarBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userSpoilsOfWarPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"user_spoils_of_war\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userSpoilsOfWarPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userSpoilsOfWarPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"user_spoils_of_war\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, userSpoilsOfWarPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from userSpoilsOfWar slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for user_spoils_of_war")
	}

	if len(userSpoilsOfWarAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserSpoilsOfWar) Reload(exec boil.Executor) error {
	ret, err := FindUserSpoilsOfWar(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserSpoilsOfWarSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserSpoilsOfWarSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userSpoilsOfWarPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_spoils_of_war\".* FROM \"user_spoils_of_war\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userSpoilsOfWarPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in UserSpoilsOfWarSlice")
	}

	*o = slice

	return nil
}

// UserSpoilsOfWarExists checks if the UserSpoilsOfWar row exists.
func UserSpoilsOfWarExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_spoils_of_war\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if user_spoils_of_war exists")
	}

	return exists, nil
}
