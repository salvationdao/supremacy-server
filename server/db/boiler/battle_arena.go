// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BattleArena is an object representing the database table.
type BattleArena struct {
	ID           string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Gid          int       `boiler:"gid" boil:"gid" json:"gid" toml:"gid" yaml:"gid"`
	CreatedAt    time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt    null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	OvenStreamID string    `boiler:"oven_stream_id" boil:"oven_stream_id" json:"oven_stream_id" toml:"oven_stream_id" yaml:"oven_stream_id"`

	R *battleArenaR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L battleArenaL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattleArenaColumns = struct {
	ID           string
	Gid          string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
	OvenStreamID string
}{
	ID:           "id",
	Gid:          "gid",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	DeletedAt:    "deleted_at",
	OvenStreamID: "oven_stream_id",
}

var BattleArenaTableColumns = struct {
	ID           string
	Gid          string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
	OvenStreamID string
}{
	ID:           "battle_arena.id",
	Gid:          "battle_arena.gid",
	CreatedAt:    "battle_arena.created_at",
	UpdatedAt:    "battle_arena.updated_at",
	DeletedAt:    "battle_arena.deleted_at",
	OvenStreamID: "battle_arena.oven_stream_id",
}

// Generated where

var BattleArenaWhere = struct {
	ID           whereHelperstring
	Gid          whereHelperint
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	DeletedAt    whereHelpernull_Time
	OvenStreamID whereHelperstring
}{
	ID:           whereHelperstring{field: "\"battle_arena\".\"id\""},
	Gid:          whereHelperint{field: "\"battle_arena\".\"gid\""},
	CreatedAt:    whereHelpertime_Time{field: "\"battle_arena\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"battle_arena\".\"updated_at\""},
	DeletedAt:    whereHelpernull_Time{field: "\"battle_arena\".\"deleted_at\""},
	OvenStreamID: whereHelperstring{field: "\"battle_arena\".\"oven_stream_id\""},
}

// BattleArenaRels is where relationship names are stored.
var BattleArenaRels = struct {
	OvenStream                   string
	AssignedToArenaBattleLobbies string
	ArenaBattleReplays           string
	ArenaBattles                 string
	ArenaChatHistories           string
	ArenaMechMoveCommandLogs     string
	ArenaVoiceStreams            string
}{
	OvenStream:                   "OvenStream",
	AssignedToArenaBattleLobbies: "AssignedToArenaBattleLobbies",
	ArenaBattleReplays:           "ArenaBattleReplays",
	ArenaBattles:                 "ArenaBattles",
	ArenaChatHistories:           "ArenaChatHistories",
	ArenaMechMoveCommandLogs:     "ArenaMechMoveCommandLogs",
	ArenaVoiceStreams:            "ArenaVoiceStreams",
}

// battleArenaR is where relationships are stored.
type battleArenaR struct {
	OvenStream                   *OvenStream             `boiler:"OvenStream" boil:"OvenStream" json:"OvenStream" toml:"OvenStream" yaml:"OvenStream"`
	AssignedToArenaBattleLobbies BattleLobbySlice        `boiler:"AssignedToArenaBattleLobbies" boil:"AssignedToArenaBattleLobbies" json:"AssignedToArenaBattleLobbies" toml:"AssignedToArenaBattleLobbies" yaml:"AssignedToArenaBattleLobbies"`
	ArenaBattleReplays           BattleReplaySlice       `boiler:"ArenaBattleReplays" boil:"ArenaBattleReplays" json:"ArenaBattleReplays" toml:"ArenaBattleReplays" yaml:"ArenaBattleReplays"`
	ArenaBattles                 BattleSlice             `boiler:"ArenaBattles" boil:"ArenaBattles" json:"ArenaBattles" toml:"ArenaBattles" yaml:"ArenaBattles"`
	ArenaChatHistories           ChatHistorySlice        `boiler:"ArenaChatHistories" boil:"ArenaChatHistories" json:"ArenaChatHistories" toml:"ArenaChatHistories" yaml:"ArenaChatHistories"`
	ArenaMechMoveCommandLogs     MechMoveCommandLogSlice `boiler:"ArenaMechMoveCommandLogs" boil:"ArenaMechMoveCommandLogs" json:"ArenaMechMoveCommandLogs" toml:"ArenaMechMoveCommandLogs" yaml:"ArenaMechMoveCommandLogs"`
	ArenaVoiceStreams            VoiceStreamSlice        `boiler:"ArenaVoiceStreams" boil:"ArenaVoiceStreams" json:"ArenaVoiceStreams" toml:"ArenaVoiceStreams" yaml:"ArenaVoiceStreams"`
}

// NewStruct creates a new relationship struct
func (*battleArenaR) NewStruct() *battleArenaR {
	return &battleArenaR{}
}

// battleArenaL is where Load methods for each relationship are stored.
type battleArenaL struct{}

var (
	battleArenaAllColumns            = []string{"id", "gid", "created_at", "updated_at", "deleted_at", "oven_stream_id"}
	battleArenaColumnsWithoutDefault = []string{"oven_stream_id"}
	battleArenaColumnsWithDefault    = []string{"id", "gid", "created_at", "updated_at", "deleted_at"}
	battleArenaPrimaryKeyColumns     = []string{"id"}
	battleArenaGeneratedColumns      = []string{}
)

type (
	// BattleArenaSlice is an alias for a slice of pointers to BattleArena.
	// This should almost always be used instead of []BattleArena.
	BattleArenaSlice []*BattleArena
	// BattleArenaHook is the signature for custom BattleArena hook methods
	BattleArenaHook func(boil.Executor, *BattleArena) error

	battleArenaQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battleArenaType                 = reflect.TypeOf(&BattleArena{})
	battleArenaMapping              = queries.MakeStructMapping(battleArenaType)
	battleArenaPrimaryKeyMapping, _ = queries.BindMapping(battleArenaType, battleArenaMapping, battleArenaPrimaryKeyColumns)
	battleArenaInsertCacheMut       sync.RWMutex
	battleArenaInsertCache          = make(map[string]insertCache)
	battleArenaUpdateCacheMut       sync.RWMutex
	battleArenaUpdateCache          = make(map[string]updateCache)
	battleArenaUpsertCacheMut       sync.RWMutex
	battleArenaUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battleArenaAfterSelectHooks []BattleArenaHook

var battleArenaBeforeInsertHooks []BattleArenaHook
var battleArenaAfterInsertHooks []BattleArenaHook

var battleArenaBeforeUpdateHooks []BattleArenaHook
var battleArenaAfterUpdateHooks []BattleArenaHook

var battleArenaBeforeDeleteHooks []BattleArenaHook
var battleArenaAfterDeleteHooks []BattleArenaHook

var battleArenaBeforeUpsertHooks []BattleArenaHook
var battleArenaAfterUpsertHooks []BattleArenaHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BattleArena) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range battleArenaAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BattleArena) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleArenaBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BattleArena) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleArenaAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BattleArena) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleArenaBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BattleArena) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleArenaAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BattleArena) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleArenaBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BattleArena) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleArenaAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BattleArena) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleArenaBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BattleArena) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleArenaAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattleArenaHook registers your hook function for all future operations.
func AddBattleArenaHook(hookPoint boil.HookPoint, battleArenaHook BattleArenaHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		battleArenaAfterSelectHooks = append(battleArenaAfterSelectHooks, battleArenaHook)
	case boil.BeforeInsertHook:
		battleArenaBeforeInsertHooks = append(battleArenaBeforeInsertHooks, battleArenaHook)
	case boil.AfterInsertHook:
		battleArenaAfterInsertHooks = append(battleArenaAfterInsertHooks, battleArenaHook)
	case boil.BeforeUpdateHook:
		battleArenaBeforeUpdateHooks = append(battleArenaBeforeUpdateHooks, battleArenaHook)
	case boil.AfterUpdateHook:
		battleArenaAfterUpdateHooks = append(battleArenaAfterUpdateHooks, battleArenaHook)
	case boil.BeforeDeleteHook:
		battleArenaBeforeDeleteHooks = append(battleArenaBeforeDeleteHooks, battleArenaHook)
	case boil.AfterDeleteHook:
		battleArenaAfterDeleteHooks = append(battleArenaAfterDeleteHooks, battleArenaHook)
	case boil.BeforeUpsertHook:
		battleArenaBeforeUpsertHooks = append(battleArenaBeforeUpsertHooks, battleArenaHook)
	case boil.AfterUpsertHook:
		battleArenaAfterUpsertHooks = append(battleArenaAfterUpsertHooks, battleArenaHook)
	}
}

// One returns a single battleArena record from the query.
func (q battleArenaQuery) One(exec boil.Executor) (*BattleArena, error) {
	o := &BattleArena{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for battle_arena")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BattleArena records from the query.
func (q battleArenaQuery) All(exec boil.Executor) (BattleArenaSlice, error) {
	var o []*BattleArena

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BattleArena slice")
	}

	if len(battleArenaAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BattleArena records in the query.
func (q battleArenaQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count battle_arena rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battleArenaQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if battle_arena exists")
	}

	return count > 0, nil
}

// OvenStream pointed to by the foreign key.
func (o *BattleArena) OvenStream(mods ...qm.QueryMod) ovenStreamQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OvenStreamID),
	}

	queryMods = append(queryMods, mods...)

	query := OvenStreams(queryMods...)
	queries.SetFrom(query.Query, "\"oven_streams\"")

	return query
}

// AssignedToArenaBattleLobbies retrieves all the battle_lobby's BattleLobbies with an executor via assigned_to_arena_id column.
func (o *BattleArena) AssignedToArenaBattleLobbies(mods ...qm.QueryMod) battleLobbyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_lobbies\".\"assigned_to_arena_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"battle_lobbies\".\"deleted_at\""),
	)

	query := BattleLobbies(queryMods...)
	queries.SetFrom(query.Query, "\"battle_lobbies\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_lobbies\".*"})
	}

	return query
}

// ArenaBattleReplays retrieves all the battle_replay's BattleReplays with an executor via arena_id column.
func (o *BattleArena) ArenaBattleReplays(mods ...qm.QueryMod) battleReplayQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_replays\".\"arena_id\"=?", o.ID),
	)

	query := BattleReplays(queryMods...)
	queries.SetFrom(query.Query, "\"battle_replays\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_replays\".*"})
	}

	return query
}

// ArenaBattles retrieves all the battle's Battles with an executor via arena_id column.
func (o *BattleArena) ArenaBattles(mods ...qm.QueryMod) battleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battles\".\"arena_id\"=?", o.ID),
	)

	query := Battles(queryMods...)
	queries.SetFrom(query.Query, "\"battles\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battles\".*"})
	}

	return query
}

// ArenaChatHistories retrieves all the chat_history's ChatHistories with an executor via arena_id column.
func (o *BattleArena) ArenaChatHistories(mods ...qm.QueryMod) chatHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chat_history\".\"arena_id\"=?", o.ID),
	)

	query := ChatHistories(queryMods...)
	queries.SetFrom(query.Query, "\"chat_history\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"chat_history\".*"})
	}

	return query
}

// ArenaMechMoveCommandLogs retrieves all the mech_move_command_log's MechMoveCommandLogs with an executor via arena_id column.
func (o *BattleArena) ArenaMechMoveCommandLogs(mods ...qm.QueryMod) mechMoveCommandLogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mech_move_command_logs\".\"arena_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"mech_move_command_logs\".\"deleted_at\""),
	)

	query := MechMoveCommandLogs(queryMods...)
	queries.SetFrom(query.Query, "\"mech_move_command_logs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mech_move_command_logs\".*"})
	}

	return query
}

// ArenaVoiceStreams retrieves all the voice_stream's VoiceStreams with an executor via arena_id column.
func (o *BattleArena) ArenaVoiceStreams(mods ...qm.QueryMod) voiceStreamQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"voice_streams\".\"arena_id\"=?", o.ID),
	)

	query := VoiceStreams(queryMods...)
	queries.SetFrom(query.Query, "\"voice_streams\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"voice_streams\".*"})
	}

	return query
}

// LoadOvenStream allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleArenaL) LoadOvenStream(e boil.Executor, singular bool, maybeBattleArena interface{}, mods queries.Applicator) error {
	var slice []*BattleArena
	var object *BattleArena

	if singular {
		object = maybeBattleArena.(*BattleArena)
	} else {
		slice = *maybeBattleArena.(*[]*BattleArena)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleArenaR{}
		}
		args = append(args, object.OvenStreamID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleArenaR{}
			}

			for _, a := range args {
				if a == obj.OvenStreamID {
					continue Outer
				}
			}

			args = append(args, obj.OvenStreamID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`oven_streams`),
		qm.WhereIn(`oven_streams.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OvenStream")
	}

	var resultSlice []*OvenStream
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OvenStream")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for oven_streams")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for oven_streams")
	}

	if len(battleArenaAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OvenStream = foreign
		if foreign.R == nil {
			foreign.R = &ovenStreamR{}
		}
		foreign.R.BattleArenas = append(foreign.R.BattleArenas, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OvenStreamID == foreign.ID {
				local.R.OvenStream = foreign
				if foreign.R == nil {
					foreign.R = &ovenStreamR{}
				}
				foreign.R.BattleArenas = append(foreign.R.BattleArenas, local)
				break
			}
		}
	}

	return nil
}

// LoadAssignedToArenaBattleLobbies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleArenaL) LoadAssignedToArenaBattleLobbies(e boil.Executor, singular bool, maybeBattleArena interface{}, mods queries.Applicator) error {
	var slice []*BattleArena
	var object *BattleArena

	if singular {
		object = maybeBattleArena.(*BattleArena)
	} else {
		slice = *maybeBattleArena.(*[]*BattleArena)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleArenaR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleArenaR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_lobbies`),
		qm.WhereIn(`battle_lobbies.assigned_to_arena_id in ?`, args...),
		qmhelper.WhereIsNull(`battle_lobbies.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_lobbies")
	}

	var resultSlice []*BattleLobby
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_lobbies")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_lobbies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_lobbies")
	}

	if len(battleLobbyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AssignedToArenaBattleLobbies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleLobbyR{}
			}
			foreign.R.AssignedToArena = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AssignedToArenaID) {
				local.R.AssignedToArenaBattleLobbies = append(local.R.AssignedToArenaBattleLobbies, foreign)
				if foreign.R == nil {
					foreign.R = &battleLobbyR{}
				}
				foreign.R.AssignedToArena = local
				break
			}
		}
	}

	return nil
}

// LoadArenaBattleReplays allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleArenaL) LoadArenaBattleReplays(e boil.Executor, singular bool, maybeBattleArena interface{}, mods queries.Applicator) error {
	var slice []*BattleArena
	var object *BattleArena

	if singular {
		object = maybeBattleArena.(*BattleArena)
	} else {
		slice = *maybeBattleArena.(*[]*BattleArena)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleArenaR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleArenaR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_replays`),
		qm.WhereIn(`battle_replays.arena_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_replays")
	}

	var resultSlice []*BattleReplay
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_replays")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_replays")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_replays")
	}

	if len(battleReplayAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ArenaBattleReplays = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleReplayR{}
			}
			foreign.R.Arena = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ArenaID {
				local.R.ArenaBattleReplays = append(local.R.ArenaBattleReplays, foreign)
				if foreign.R == nil {
					foreign.R = &battleReplayR{}
				}
				foreign.R.Arena = local
				break
			}
		}
	}

	return nil
}

// LoadArenaBattles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleArenaL) LoadArenaBattles(e boil.Executor, singular bool, maybeBattleArena interface{}, mods queries.Applicator) error {
	var slice []*BattleArena
	var object *BattleArena

	if singular {
		object = maybeBattleArena.(*BattleArena)
	} else {
		slice = *maybeBattleArena.(*[]*BattleArena)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleArenaR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleArenaR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battles`),
		qm.WhereIn(`battles.arena_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battles")
	}

	var resultSlice []*Battle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battles")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battles")
	}

	if len(battleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ArenaBattles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleR{}
			}
			foreign.R.Arena = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ArenaID {
				local.R.ArenaBattles = append(local.R.ArenaBattles, foreign)
				if foreign.R == nil {
					foreign.R = &battleR{}
				}
				foreign.R.Arena = local
				break
			}
		}
	}

	return nil
}

// LoadArenaChatHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleArenaL) LoadArenaChatHistories(e boil.Executor, singular bool, maybeBattleArena interface{}, mods queries.Applicator) error {
	var slice []*BattleArena
	var object *BattleArena

	if singular {
		object = maybeBattleArena.(*BattleArena)
	} else {
		slice = *maybeBattleArena.(*[]*BattleArena)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleArenaR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleArenaR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chat_history`),
		qm.WhereIn(`chat_history.arena_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chat_history")
	}

	var resultSlice []*ChatHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chat_history")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chat_history")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chat_history")
	}

	if len(chatHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ArenaChatHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chatHistoryR{}
			}
			foreign.R.Arena = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ArenaID) {
				local.R.ArenaChatHistories = append(local.R.ArenaChatHistories, foreign)
				if foreign.R == nil {
					foreign.R = &chatHistoryR{}
				}
				foreign.R.Arena = local
				break
			}
		}
	}

	return nil
}

// LoadArenaMechMoveCommandLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleArenaL) LoadArenaMechMoveCommandLogs(e boil.Executor, singular bool, maybeBattleArena interface{}, mods queries.Applicator) error {
	var slice []*BattleArena
	var object *BattleArena

	if singular {
		object = maybeBattleArena.(*BattleArena)
	} else {
		slice = *maybeBattleArena.(*[]*BattleArena)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleArenaR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleArenaR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_move_command_logs`),
		qm.WhereIn(`mech_move_command_logs.arena_id in ?`, args...),
		qmhelper.WhereIsNull(`mech_move_command_logs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mech_move_command_logs")
	}

	var resultSlice []*MechMoveCommandLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mech_move_command_logs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mech_move_command_logs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_move_command_logs")
	}

	if len(mechMoveCommandLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ArenaMechMoveCommandLogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mechMoveCommandLogR{}
			}
			foreign.R.Arena = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ArenaID {
				local.R.ArenaMechMoveCommandLogs = append(local.R.ArenaMechMoveCommandLogs, foreign)
				if foreign.R == nil {
					foreign.R = &mechMoveCommandLogR{}
				}
				foreign.R.Arena = local
				break
			}
		}
	}

	return nil
}

// LoadArenaVoiceStreams allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleArenaL) LoadArenaVoiceStreams(e boil.Executor, singular bool, maybeBattleArena interface{}, mods queries.Applicator) error {
	var slice []*BattleArena
	var object *BattleArena

	if singular {
		object = maybeBattleArena.(*BattleArena)
	} else {
		slice = *maybeBattleArena.(*[]*BattleArena)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleArenaR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleArenaR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`voice_streams`),
		qm.WhereIn(`voice_streams.arena_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load voice_streams")
	}

	var resultSlice []*VoiceStream
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice voice_streams")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on voice_streams")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for voice_streams")
	}

	if len(voiceStreamAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ArenaVoiceStreams = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &voiceStreamR{}
			}
			foreign.R.Arena = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ArenaID {
				local.R.ArenaVoiceStreams = append(local.R.ArenaVoiceStreams, foreign)
				if foreign.R == nil {
					foreign.R = &voiceStreamR{}
				}
				foreign.R.Arena = local
				break
			}
		}
	}

	return nil
}

// SetOvenStream of the battleArena to the related item.
// Sets o.R.OvenStream to related.
// Adds o to related.R.BattleArenas.
func (o *BattleArena) SetOvenStream(exec boil.Executor, insert bool, related *OvenStream) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_arena\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"oven_stream_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleArenaPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OvenStreamID = related.ID
	if o.R == nil {
		o.R = &battleArenaR{
			OvenStream: related,
		}
	} else {
		o.R.OvenStream = related
	}

	if related.R == nil {
		related.R = &ovenStreamR{
			BattleArenas: BattleArenaSlice{o},
		}
	} else {
		related.R.BattleArenas = append(related.R.BattleArenas, o)
	}

	return nil
}

// AddAssignedToArenaBattleLobbies adds the given related objects to the existing relationships
// of the battle_arena, optionally inserting them as new records.
// Appends related to o.R.AssignedToArenaBattleLobbies.
// Sets related.R.AssignedToArena appropriately.
func (o *BattleArena) AddAssignedToArenaBattleLobbies(exec boil.Executor, insert bool, related ...*BattleLobby) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AssignedToArenaID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_lobbies\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"assigned_to_arena_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleLobbyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AssignedToArenaID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &battleArenaR{
			AssignedToArenaBattleLobbies: related,
		}
	} else {
		o.R.AssignedToArenaBattleLobbies = append(o.R.AssignedToArenaBattleLobbies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleLobbyR{
				AssignedToArena: o,
			}
		} else {
			rel.R.AssignedToArena = o
		}
	}
	return nil
}

// SetAssignedToArenaBattleLobbies removes all previously related items of the
// battle_arena replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AssignedToArena's AssignedToArenaBattleLobbies accordingly.
// Replaces o.R.AssignedToArenaBattleLobbies with related.
// Sets related.R.AssignedToArena's AssignedToArenaBattleLobbies accordingly.
func (o *BattleArena) SetAssignedToArenaBattleLobbies(exec boil.Executor, insert bool, related ...*BattleLobby) error {
	query := "update \"battle_lobbies\" set \"assigned_to_arena_id\" = null where \"assigned_to_arena_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AssignedToArenaBattleLobbies {
			queries.SetScanner(&rel.AssignedToArenaID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AssignedToArena = nil
		}

		o.R.AssignedToArenaBattleLobbies = nil
	}
	return o.AddAssignedToArenaBattleLobbies(exec, insert, related...)
}

// RemoveAssignedToArenaBattleLobbies relationships from objects passed in.
// Removes related items from R.AssignedToArenaBattleLobbies (uses pointer comparison, removal does not keep order)
// Sets related.R.AssignedToArena.
func (o *BattleArena) RemoveAssignedToArenaBattleLobbies(exec boil.Executor, related ...*BattleLobby) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AssignedToArenaID, nil)
		if rel.R != nil {
			rel.R.AssignedToArena = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("assigned_to_arena_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AssignedToArenaBattleLobbies {
			if rel != ri {
				continue
			}

			ln := len(o.R.AssignedToArenaBattleLobbies)
			if ln > 1 && i < ln-1 {
				o.R.AssignedToArenaBattleLobbies[i] = o.R.AssignedToArenaBattleLobbies[ln-1]
			}
			o.R.AssignedToArenaBattleLobbies = o.R.AssignedToArenaBattleLobbies[:ln-1]
			break
		}
	}

	return nil
}

// AddArenaBattleReplays adds the given related objects to the existing relationships
// of the battle_arena, optionally inserting them as new records.
// Appends related to o.R.ArenaBattleReplays.
// Sets related.R.Arena appropriately.
func (o *BattleArena) AddArenaBattleReplays(exec boil.Executor, insert bool, related ...*BattleReplay) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ArenaID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_replays\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"arena_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleReplayPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ArenaID = o.ID
		}
	}

	if o.R == nil {
		o.R = &battleArenaR{
			ArenaBattleReplays: related,
		}
	} else {
		o.R.ArenaBattleReplays = append(o.R.ArenaBattleReplays, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleReplayR{
				Arena: o,
			}
		} else {
			rel.R.Arena = o
		}
	}
	return nil
}

// AddArenaBattles adds the given related objects to the existing relationships
// of the battle_arena, optionally inserting them as new records.
// Appends related to o.R.ArenaBattles.
// Sets related.R.Arena appropriately.
func (o *BattleArena) AddArenaBattles(exec boil.Executor, insert bool, related ...*Battle) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ArenaID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battles\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"arena_id"}),
				strmangle.WhereClause("\"", "\"", 2, battlePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ArenaID = o.ID
		}
	}

	if o.R == nil {
		o.R = &battleArenaR{
			ArenaBattles: related,
		}
	} else {
		o.R.ArenaBattles = append(o.R.ArenaBattles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleR{
				Arena: o,
			}
		} else {
			rel.R.Arena = o
		}
	}
	return nil
}

// AddArenaChatHistories adds the given related objects to the existing relationships
// of the battle_arena, optionally inserting them as new records.
// Appends related to o.R.ArenaChatHistories.
// Sets related.R.Arena appropriately.
func (o *BattleArena) AddArenaChatHistories(exec boil.Executor, insert bool, related ...*ChatHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ArenaID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chat_history\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"arena_id"}),
				strmangle.WhereClause("\"", "\"", 2, chatHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ArenaID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &battleArenaR{
			ArenaChatHistories: related,
		}
	} else {
		o.R.ArenaChatHistories = append(o.R.ArenaChatHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chatHistoryR{
				Arena: o,
			}
		} else {
			rel.R.Arena = o
		}
	}
	return nil
}

// SetArenaChatHistories removes all previously related items of the
// battle_arena replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Arena's ArenaChatHistories accordingly.
// Replaces o.R.ArenaChatHistories with related.
// Sets related.R.Arena's ArenaChatHistories accordingly.
func (o *BattleArena) SetArenaChatHistories(exec boil.Executor, insert bool, related ...*ChatHistory) error {
	query := "update \"chat_history\" set \"arena_id\" = null where \"arena_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ArenaChatHistories {
			queries.SetScanner(&rel.ArenaID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Arena = nil
		}

		o.R.ArenaChatHistories = nil
	}
	return o.AddArenaChatHistories(exec, insert, related...)
}

// RemoveArenaChatHistories relationships from objects passed in.
// Removes related items from R.ArenaChatHistories (uses pointer comparison, removal does not keep order)
// Sets related.R.Arena.
func (o *BattleArena) RemoveArenaChatHistories(exec boil.Executor, related ...*ChatHistory) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ArenaID, nil)
		if rel.R != nil {
			rel.R.Arena = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("arena_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ArenaChatHistories {
			if rel != ri {
				continue
			}

			ln := len(o.R.ArenaChatHistories)
			if ln > 1 && i < ln-1 {
				o.R.ArenaChatHistories[i] = o.R.ArenaChatHistories[ln-1]
			}
			o.R.ArenaChatHistories = o.R.ArenaChatHistories[:ln-1]
			break
		}
	}

	return nil
}

// AddArenaMechMoveCommandLogs adds the given related objects to the existing relationships
// of the battle_arena, optionally inserting them as new records.
// Appends related to o.R.ArenaMechMoveCommandLogs.
// Sets related.R.Arena appropriately.
func (o *BattleArena) AddArenaMechMoveCommandLogs(exec boil.Executor, insert bool, related ...*MechMoveCommandLog) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ArenaID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mech_move_command_logs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"arena_id"}),
				strmangle.WhereClause("\"", "\"", 2, mechMoveCommandLogPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ArenaID = o.ID
		}
	}

	if o.R == nil {
		o.R = &battleArenaR{
			ArenaMechMoveCommandLogs: related,
		}
	} else {
		o.R.ArenaMechMoveCommandLogs = append(o.R.ArenaMechMoveCommandLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mechMoveCommandLogR{
				Arena: o,
			}
		} else {
			rel.R.Arena = o
		}
	}
	return nil
}

// AddArenaVoiceStreams adds the given related objects to the existing relationships
// of the battle_arena, optionally inserting them as new records.
// Appends related to o.R.ArenaVoiceStreams.
// Sets related.R.Arena appropriately.
func (o *BattleArena) AddArenaVoiceStreams(exec boil.Executor, insert bool, related ...*VoiceStream) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ArenaID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"voice_streams\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"arena_id"}),
				strmangle.WhereClause("\"", "\"", 2, voiceStreamPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ArenaID = o.ID
		}
	}

	if o.R == nil {
		o.R = &battleArenaR{
			ArenaVoiceStreams: related,
		}
	} else {
		o.R.ArenaVoiceStreams = append(o.R.ArenaVoiceStreams, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &voiceStreamR{
				Arena: o,
			}
		} else {
			rel.R.Arena = o
		}
	}
	return nil
}

// BattleArenas retrieves all the records using an executor.
func BattleArenas(mods ...qm.QueryMod) battleArenaQuery {
	mods = append(mods, qm.From("\"battle_arena\""), qmhelper.WhereIsNull("\"battle_arena\".\"deleted_at\""))
	return battleArenaQuery{NewQuery(mods...)}
}

// FindBattleArena retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattleArena(exec boil.Executor, iD string, selectCols ...string) (*BattleArena, error) {
	battleArenaObj := &BattleArena{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battle_arena\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, battleArenaObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from battle_arena")
	}

	if err = battleArenaObj.doAfterSelectHooks(exec); err != nil {
		return battleArenaObj, err
	}

	return battleArenaObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BattleArena) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_arena provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleArenaColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battleArenaInsertCacheMut.RLock()
	cache, cached := battleArenaInsertCache[key]
	battleArenaInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battleArenaAllColumns,
			battleArenaColumnsWithDefault,
			battleArenaColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battleArenaType, battleArenaMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battleArenaType, battleArenaMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battle_arena\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battle_arena\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into battle_arena")
	}

	if !cached {
		battleArenaInsertCacheMut.Lock()
		battleArenaInsertCache[key] = cache
		battleArenaInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BattleArena.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BattleArena) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battleArenaUpdateCacheMut.RLock()
	cache, cached := battleArenaUpdateCache[key]
	battleArenaUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battleArenaAllColumns,
			battleArenaPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update battle_arena, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battle_arena\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battleArenaPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battleArenaType, battleArenaMapping, append(wl, battleArenaPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update battle_arena row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for battle_arena")
	}

	if !cached {
		battleArenaUpdateCacheMut.Lock()
		battleArenaUpdateCache[key] = cache
		battleArenaUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battleArenaQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for battle_arena")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for battle_arena")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattleArenaSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleArenaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battle_arena\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battleArenaPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in battleArena slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all battleArena")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BattleArena) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_arena provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleArenaColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battleArenaUpsertCacheMut.RLock()
	cache, cached := battleArenaUpsertCache[key]
	battleArenaUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battleArenaAllColumns,
			battleArenaColumnsWithDefault,
			battleArenaColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			battleArenaAllColumns,
			battleArenaPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert battle_arena, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battleArenaPrimaryKeyColumns))
			copy(conflict, battleArenaPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battle_arena\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battleArenaType, battleArenaMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battleArenaType, battleArenaMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert battle_arena")
	}

	if !cached {
		battleArenaUpsertCacheMut.Lock()
		battleArenaUpsertCache[key] = cache
		battleArenaUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BattleArena record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BattleArena) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BattleArena provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battleArenaPrimaryKeyMapping)
		sql = "DELETE FROM \"battle_arena\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"battle_arena\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(battleArenaType, battleArenaMapping, append(wl, battleArenaPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from battle_arena")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for battle_arena")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battleArenaQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no battleArenaQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battle_arena")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_arena")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattleArenaSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(battleArenaBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleArenaPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"battle_arena\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleArenaPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleArenaPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"battle_arena\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, battleArenaPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battleArena slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_arena")
	}

	if len(battleArenaAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BattleArena) Reload(exec boil.Executor) error {
	ret, err := FindBattleArena(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattleArenaSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattleArenaSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleArenaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battle_arena\".* FROM \"battle_arena\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleArenaPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BattleArenaSlice")
	}

	*o = slice

	return nil
}

// BattleArenaExists checks if the BattleArena row exists.
func BattleArenaExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battle_arena\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if battle_arena exists")
	}

	return exists, nil
}
