// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PlayerIP is an object representing the database table.
type PlayerIP struct {
	PlayerID    string    `boiler:"player_id" boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	IP          string    `boiler:"ip" boil:"ip" json:"ip" toml:"ip" yaml:"ip"`
	FirstSeenAt time.Time `boiler:"first_seen_at" boil:"first_seen_at" json:"first_seen_at" toml:"first_seen_at" yaml:"first_seen_at"`
	LastSeenAt  time.Time `boiler:"last_seen_at" boil:"last_seen_at" json:"last_seen_at" toml:"last_seen_at" yaml:"last_seen_at"`

	R *playerIPR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L playerIPL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlayerIPColumns = struct {
	PlayerID    string
	IP          string
	FirstSeenAt string
	LastSeenAt  string
}{
	PlayerID:    "player_id",
	IP:          "ip",
	FirstSeenAt: "first_seen_at",
	LastSeenAt:  "last_seen_at",
}

var PlayerIPTableColumns = struct {
	PlayerID    string
	IP          string
	FirstSeenAt string
	LastSeenAt  string
}{
	PlayerID:    "player_ips.player_id",
	IP:          "player_ips.ip",
	FirstSeenAt: "player_ips.first_seen_at",
	LastSeenAt:  "player_ips.last_seen_at",
}

// Generated where

var PlayerIPWhere = struct {
	PlayerID    whereHelperstring
	IP          whereHelperstring
	FirstSeenAt whereHelpertime_Time
	LastSeenAt  whereHelpertime_Time
}{
	PlayerID:    whereHelperstring{field: "\"player_ips\".\"player_id\""},
	IP:          whereHelperstring{field: "\"player_ips\".\"ip\""},
	FirstSeenAt: whereHelpertime_Time{field: "\"player_ips\".\"first_seen_at\""},
	LastSeenAt:  whereHelpertime_Time{field: "\"player_ips\".\"last_seen_at\""},
}

// PlayerIPRels is where relationship names are stored.
var PlayerIPRels = struct {
	Player string
}{
	Player: "Player",
}

// playerIPR is where relationships are stored.
type playerIPR struct {
	Player *Player `boiler:"Player" boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
}

// NewStruct creates a new relationship struct
func (*playerIPR) NewStruct() *playerIPR {
	return &playerIPR{}
}

// playerIPL is where Load methods for each relationship are stored.
type playerIPL struct{}

var (
	playerIPAllColumns            = []string{"player_id", "ip", "first_seen_at", "last_seen_at"}
	playerIPColumnsWithoutDefault = []string{"player_id", "ip", "first_seen_at", "last_seen_at"}
	playerIPColumnsWithDefault    = []string{}
	playerIPPrimaryKeyColumns     = []string{"player_id", "ip"}
	playerIPGeneratedColumns      = []string{}
)

type (
	// PlayerIPSlice is an alias for a slice of pointers to PlayerIP.
	// This should almost always be used instead of []PlayerIP.
	PlayerIPSlice []*PlayerIP
	// PlayerIPHook is the signature for custom PlayerIP hook methods
	PlayerIPHook func(boil.Executor, *PlayerIP) error

	playerIPQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playerIPType                 = reflect.TypeOf(&PlayerIP{})
	playerIPMapping              = queries.MakeStructMapping(playerIPType)
	playerIPPrimaryKeyMapping, _ = queries.BindMapping(playerIPType, playerIPMapping, playerIPPrimaryKeyColumns)
	playerIPInsertCacheMut       sync.RWMutex
	playerIPInsertCache          = make(map[string]insertCache)
	playerIPUpdateCacheMut       sync.RWMutex
	playerIPUpdateCache          = make(map[string]updateCache)
	playerIPUpsertCacheMut       sync.RWMutex
	playerIPUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var playerIPAfterSelectHooks []PlayerIPHook

var playerIPBeforeInsertHooks []PlayerIPHook
var playerIPAfterInsertHooks []PlayerIPHook

var playerIPBeforeUpdateHooks []PlayerIPHook
var playerIPAfterUpdateHooks []PlayerIPHook

var playerIPBeforeDeleteHooks []PlayerIPHook
var playerIPAfterDeleteHooks []PlayerIPHook

var playerIPBeforeUpsertHooks []PlayerIPHook
var playerIPAfterUpsertHooks []PlayerIPHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PlayerIP) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range playerIPAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PlayerIP) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerIPBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PlayerIP) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerIPAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PlayerIP) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range playerIPBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PlayerIP) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range playerIPAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PlayerIP) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range playerIPBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PlayerIP) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range playerIPAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PlayerIP) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerIPBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PlayerIP) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerIPAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlayerIPHook registers your hook function for all future operations.
func AddPlayerIPHook(hookPoint boil.HookPoint, playerIPHook PlayerIPHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		playerIPAfterSelectHooks = append(playerIPAfterSelectHooks, playerIPHook)
	case boil.BeforeInsertHook:
		playerIPBeforeInsertHooks = append(playerIPBeforeInsertHooks, playerIPHook)
	case boil.AfterInsertHook:
		playerIPAfterInsertHooks = append(playerIPAfterInsertHooks, playerIPHook)
	case boil.BeforeUpdateHook:
		playerIPBeforeUpdateHooks = append(playerIPBeforeUpdateHooks, playerIPHook)
	case boil.AfterUpdateHook:
		playerIPAfterUpdateHooks = append(playerIPAfterUpdateHooks, playerIPHook)
	case boil.BeforeDeleteHook:
		playerIPBeforeDeleteHooks = append(playerIPBeforeDeleteHooks, playerIPHook)
	case boil.AfterDeleteHook:
		playerIPAfterDeleteHooks = append(playerIPAfterDeleteHooks, playerIPHook)
	case boil.BeforeUpsertHook:
		playerIPBeforeUpsertHooks = append(playerIPBeforeUpsertHooks, playerIPHook)
	case boil.AfterUpsertHook:
		playerIPAfterUpsertHooks = append(playerIPAfterUpsertHooks, playerIPHook)
	}
}

// One returns a single playerIP record from the query.
func (q playerIPQuery) One(exec boil.Executor) (*PlayerIP, error) {
	o := &PlayerIP{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for player_ips")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PlayerIP records from the query.
func (q playerIPQuery) All(exec boil.Executor) (PlayerIPSlice, error) {
	var o []*PlayerIP

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to PlayerIP slice")
	}

	if len(playerIPAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PlayerIP records in the query.
func (q playerIPQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count player_ips rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q playerIPQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if player_ips exists")
	}

	return count > 0, nil
}

// Player pointed to by the foreign key.
func (o *PlayerIP) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerIPL) LoadPlayer(e boil.Executor, singular bool, maybePlayerIP interface{}, mods queries.Applicator) error {
	var slice []*PlayerIP
	var object *PlayerIP

	if singular {
		object = maybePlayerIP.(*PlayerIP)
	} else {
		slice = *maybePlayerIP.(*[]*PlayerIP)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerIPR{}
		}
		args = append(args, object.PlayerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerIPR{}
			}

			for _, a := range args {
				if a == obj.PlayerID {
					continue Outer
				}
			}

			args = append(args, obj.PlayerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(playerIPAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.PlayerIps = append(foreign.R.PlayerIps, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.ID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.PlayerIps = append(foreign.R.PlayerIps, local)
				break
			}
		}
	}

	return nil
}

// SetPlayer of the playerIP to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.PlayerIps.
func (o *PlayerIP) SetPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"player_ips\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerIPPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.PlayerID, o.IP}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.ID
	if o.R == nil {
		o.R = &playerIPR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			PlayerIps: PlayerIPSlice{o},
		}
	} else {
		related.R.PlayerIps = append(related.R.PlayerIps, o)
	}

	return nil
}

// PlayerIps retrieves all the records using an executor.
func PlayerIps(mods ...qm.QueryMod) playerIPQuery {
	mods = append(mods, qm.From("\"player_ips\""))
	return playerIPQuery{NewQuery(mods...)}
}

// FindPlayerIP retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlayerIP(exec boil.Executor, playerID string, iP string, selectCols ...string) (*PlayerIP, error) {
	playerIPObj := &PlayerIP{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"player_ips\" where \"player_id\"=$1 AND \"ip\"=$2", sel,
	)

	q := queries.Raw(query, playerID, iP)

	err := q.Bind(nil, exec, playerIPObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from player_ips")
	}

	if err = playerIPObj.doAfterSelectHooks(exec); err != nil {
		return playerIPObj, err
	}

	return playerIPObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PlayerIP) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no player_ips provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerIPColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	playerIPInsertCacheMut.RLock()
	cache, cached := playerIPInsertCache[key]
	playerIPInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			playerIPAllColumns,
			playerIPColumnsWithDefault,
			playerIPColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(playerIPType, playerIPMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(playerIPType, playerIPMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"player_ips\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"player_ips\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into player_ips")
	}

	if !cached {
		playerIPInsertCacheMut.Lock()
		playerIPInsertCache[key] = cache
		playerIPInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the PlayerIP.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PlayerIP) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	playerIPUpdateCacheMut.RLock()
	cache, cached := playerIPUpdateCache[key]
	playerIPUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			playerIPAllColumns,
			playerIPPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update player_ips, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"player_ips\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, playerIPPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(playerIPType, playerIPMapping, append(wl, playerIPPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update player_ips row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for player_ips")
	}

	if !cached {
		playerIPUpdateCacheMut.Lock()
		playerIPUpdateCache[key] = cache
		playerIPUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q playerIPQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for player_ips")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for player_ips")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlayerIPSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerIPPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"player_ips\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, playerIPPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in playerIP slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all playerIP")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PlayerIP) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no player_ips provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerIPColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	playerIPUpsertCacheMut.RLock()
	cache, cached := playerIPUpsertCache[key]
	playerIPUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			playerIPAllColumns,
			playerIPColumnsWithDefault,
			playerIPColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			playerIPAllColumns,
			playerIPPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert player_ips, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(playerIPPrimaryKeyColumns))
			copy(conflict, playerIPPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"player_ips\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(playerIPType, playerIPMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(playerIPType, playerIPMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert player_ips")
	}

	if !cached {
		playerIPUpsertCacheMut.Lock()
		playerIPUpsertCache[key] = cache
		playerIPUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single PlayerIP record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PlayerIP) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no PlayerIP provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), playerIPPrimaryKeyMapping)
	sql := "DELETE FROM \"player_ips\" WHERE \"player_id\"=$1 AND \"ip\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from player_ips")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for player_ips")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q playerIPQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no playerIPQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from player_ips")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for player_ips")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlayerIPSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(playerIPBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerIPPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"player_ips\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerIPPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from playerIP slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for player_ips")
	}

	if len(playerIPAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PlayerIP) Reload(exec boil.Executor) error {
	ret, err := FindPlayerIP(exec, o.PlayerID, o.IP)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlayerIPSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlayerIPSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerIPPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"player_ips\".* FROM \"player_ips\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerIPPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in PlayerIPSlice")
	}

	*o = slice

	return nil
}

// PlayerIPExists checks if the PlayerIP row exists.
func PlayerIPExists(exec boil.Executor, playerID string, iP string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"player_ips\" where \"player_id\"=$1 AND \"ip\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, playerID, iP)
	}
	row := exec.QueryRow(sql, playerID, iP)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if player_ips exists")
	}

	return exists, nil
}
