// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MechsWeapon is an object representing the database table.
type MechsWeapon struct {
	ID         string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	MechID     string    `boiler:"mech_id" boil:"mech_id" json:"mechID" toml:"mechID" yaml:"mechID"`
	WeaponID   string    `boiler:"weapon_id" boil:"weapon_id" json:"weaponID" toml:"weaponID" yaml:"weaponID"`
	SlotNumber int       `boiler:"slot_number" boil:"slot_number" json:"slotNumber" toml:"slotNumber" yaml:"slotNumber"`
	DeletedAt  null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deletedAt,omitempty" toml:"deletedAt" yaml:"deletedAt,omitempty"`
	UpdatedAt  time.Time `boiler:"updated_at" boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	CreatedAt  time.Time `boiler:"created_at" boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`

	R *mechsWeaponR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L mechsWeaponL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MechsWeaponColumns = struct {
	ID         string
	MechID     string
	WeaponID   string
	SlotNumber string
	DeletedAt  string
	UpdatedAt  string
	CreatedAt  string
}{
	ID:         "id",
	MechID:     "mech_id",
	WeaponID:   "weapon_id",
	SlotNumber: "slot_number",
	DeletedAt:  "deleted_at",
	UpdatedAt:  "updated_at",
	CreatedAt:  "created_at",
}

var MechsWeaponTableColumns = struct {
	ID         string
	MechID     string
	WeaponID   string
	SlotNumber string
	DeletedAt  string
	UpdatedAt  string
	CreatedAt  string
}{
	ID:         "mechs_weapons.id",
	MechID:     "mechs_weapons.mech_id",
	WeaponID:   "mechs_weapons.weapon_id",
	SlotNumber: "mechs_weapons.slot_number",
	DeletedAt:  "mechs_weapons.deleted_at",
	UpdatedAt:  "mechs_weapons.updated_at",
	CreatedAt:  "mechs_weapons.created_at",
}

// Generated where

var MechsWeaponWhere = struct {
	ID         whereHelperstring
	MechID     whereHelperstring
	WeaponID   whereHelperstring
	SlotNumber whereHelperint
	DeletedAt  whereHelpernull_Time
	UpdatedAt  whereHelpertime_Time
	CreatedAt  whereHelpertime_Time
}{
	ID:         whereHelperstring{field: "\"mechs_weapons\".\"id\""},
	MechID:     whereHelperstring{field: "\"mechs_weapons\".\"mech_id\""},
	WeaponID:   whereHelperstring{field: "\"mechs_weapons\".\"weapon_id\""},
	SlotNumber: whereHelperint{field: "\"mechs_weapons\".\"slot_number\""},
	DeletedAt:  whereHelpernull_Time{field: "\"mechs_weapons\".\"deleted_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"mechs_weapons\".\"updated_at\""},
	CreatedAt:  whereHelpertime_Time{field: "\"mechs_weapons\".\"created_at\""},
}

// MechsWeaponRels is where relationship names are stored.
var MechsWeaponRels = struct {
	Mech   string
	Weapon string
}{
	Mech:   "Mech",
	Weapon: "Weapon",
}

// mechsWeaponR is where relationships are stored.
type mechsWeaponR struct {
	Mech   *Mech   `boiler:"Mech" boil:"Mech" json:"Mech" toml:"Mech" yaml:"Mech"`
	Weapon *Weapon `boiler:"Weapon" boil:"Weapon" json:"Weapon" toml:"Weapon" yaml:"Weapon"`
}

// NewStruct creates a new relationship struct
func (*mechsWeaponR) NewStruct() *mechsWeaponR {
	return &mechsWeaponR{}
}

// mechsWeaponL is where Load methods for each relationship are stored.
type mechsWeaponL struct{}

var (
	mechsWeaponAllColumns            = []string{"id", "mech_id", "weapon_id", "slot_number", "deleted_at", "updated_at", "created_at"}
	mechsWeaponColumnsWithoutDefault = []string{"mech_id", "weapon_id", "slot_number"}
	mechsWeaponColumnsWithDefault    = []string{"id", "deleted_at", "updated_at", "created_at"}
	mechsWeaponPrimaryKeyColumns     = []string{"id"}
	mechsWeaponGeneratedColumns      = []string{}
)

type (
	// MechsWeaponSlice is an alias for a slice of pointers to MechsWeapon.
	// This should almost always be used instead of []MechsWeapon.
	MechsWeaponSlice []*MechsWeapon
	// MechsWeaponHook is the signature for custom MechsWeapon hook methods
	MechsWeaponHook func(boil.Executor, *MechsWeapon) error

	mechsWeaponQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mechsWeaponType                 = reflect.TypeOf(&MechsWeapon{})
	mechsWeaponMapping              = queries.MakeStructMapping(mechsWeaponType)
	mechsWeaponPrimaryKeyMapping, _ = queries.BindMapping(mechsWeaponType, mechsWeaponMapping, mechsWeaponPrimaryKeyColumns)
	mechsWeaponInsertCacheMut       sync.RWMutex
	mechsWeaponInsertCache          = make(map[string]insertCache)
	mechsWeaponUpdateCacheMut       sync.RWMutex
	mechsWeaponUpdateCache          = make(map[string]updateCache)
	mechsWeaponUpsertCacheMut       sync.RWMutex
	mechsWeaponUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mechsWeaponAfterSelectHooks []MechsWeaponHook

var mechsWeaponBeforeInsertHooks []MechsWeaponHook
var mechsWeaponAfterInsertHooks []MechsWeaponHook

var mechsWeaponBeforeUpdateHooks []MechsWeaponHook
var mechsWeaponAfterUpdateHooks []MechsWeaponHook

var mechsWeaponBeforeDeleteHooks []MechsWeaponHook
var mechsWeaponAfterDeleteHooks []MechsWeaponHook

var mechsWeaponBeforeUpsertHooks []MechsWeaponHook
var mechsWeaponAfterUpsertHooks []MechsWeaponHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MechsWeapon) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range mechsWeaponAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MechsWeapon) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechsWeaponBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MechsWeapon) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechsWeaponAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MechsWeapon) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechsWeaponBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MechsWeapon) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechsWeaponAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MechsWeapon) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechsWeaponBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MechsWeapon) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechsWeaponAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MechsWeapon) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechsWeaponBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MechsWeapon) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechsWeaponAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMechsWeaponHook registers your hook function for all future operations.
func AddMechsWeaponHook(hookPoint boil.HookPoint, mechsWeaponHook MechsWeaponHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mechsWeaponAfterSelectHooks = append(mechsWeaponAfterSelectHooks, mechsWeaponHook)
	case boil.BeforeInsertHook:
		mechsWeaponBeforeInsertHooks = append(mechsWeaponBeforeInsertHooks, mechsWeaponHook)
	case boil.AfterInsertHook:
		mechsWeaponAfterInsertHooks = append(mechsWeaponAfterInsertHooks, mechsWeaponHook)
	case boil.BeforeUpdateHook:
		mechsWeaponBeforeUpdateHooks = append(mechsWeaponBeforeUpdateHooks, mechsWeaponHook)
	case boil.AfterUpdateHook:
		mechsWeaponAfterUpdateHooks = append(mechsWeaponAfterUpdateHooks, mechsWeaponHook)
	case boil.BeforeDeleteHook:
		mechsWeaponBeforeDeleteHooks = append(mechsWeaponBeforeDeleteHooks, mechsWeaponHook)
	case boil.AfterDeleteHook:
		mechsWeaponAfterDeleteHooks = append(mechsWeaponAfterDeleteHooks, mechsWeaponHook)
	case boil.BeforeUpsertHook:
		mechsWeaponBeforeUpsertHooks = append(mechsWeaponBeforeUpsertHooks, mechsWeaponHook)
	case boil.AfterUpsertHook:
		mechsWeaponAfterUpsertHooks = append(mechsWeaponAfterUpsertHooks, mechsWeaponHook)
	}
}

// One returns a single mechsWeapon record from the query.
func (q mechsWeaponQuery) One(exec boil.Executor) (*MechsWeapon, error) {
	o := &MechsWeapon{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for mechs_weapons")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MechsWeapon records from the query.
func (q mechsWeaponQuery) All(exec boil.Executor) (MechsWeaponSlice, error) {
	var o []*MechsWeapon

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to MechsWeapon slice")
	}

	if len(mechsWeaponAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MechsWeapon records in the query.
func (q mechsWeaponQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count mechs_weapons rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mechsWeaponQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if mechs_weapons exists")
	}

	return count > 0, nil
}

// Mech pointed to by the foreign key.
func (o *MechsWeapon) Mech(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MechID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// Weapon pointed to by the foreign key.
func (o *MechsWeapon) Weapon(mods ...qm.QueryMod) weaponQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.WeaponID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Weapons(queryMods...)
	queries.SetFrom(query.Query, "\"weapons\"")

	return query
}

// LoadMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechsWeaponL) LoadMech(e boil.Executor, singular bool, maybeMechsWeapon interface{}, mods queries.Applicator) error {
	var slice []*MechsWeapon
	var object *MechsWeapon

	if singular {
		object = maybeMechsWeapon.(*MechsWeapon)
	} else {
		slice = *maybeMechsWeapon.(*[]*MechsWeapon)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechsWeaponR{}
		}
		args = append(args, object.MechID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechsWeaponR{}
			}

			for _, a := range args {
				if a == obj.MechID {
					continue Outer
				}
			}

			args = append(args, obj.MechID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(mechsWeaponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Mech = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.MechsWeapons = append(foreign.R.MechsWeapons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MechID == foreign.ID {
				local.R.Mech = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.MechsWeapons = append(foreign.R.MechsWeapons, local)
				break
			}
		}
	}

	return nil
}

// LoadWeapon allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechsWeaponL) LoadWeapon(e boil.Executor, singular bool, maybeMechsWeapon interface{}, mods queries.Applicator) error {
	var slice []*MechsWeapon
	var object *MechsWeapon

	if singular {
		object = maybeMechsWeapon.(*MechsWeapon)
	} else {
		slice = *maybeMechsWeapon.(*[]*MechsWeapon)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechsWeaponR{}
		}
		args = append(args, object.WeaponID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechsWeaponR{}
			}

			for _, a := range args {
				if a == obj.WeaponID {
					continue Outer
				}
			}

			args = append(args, obj.WeaponID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`weapons`),
		qm.WhereIn(`weapons.id in ?`, args...),
		qmhelper.WhereIsNull(`weapons.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Weapon")
	}

	var resultSlice []*Weapon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Weapon")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for weapons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for weapons")
	}

	if len(mechsWeaponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Weapon = foreign
		if foreign.R == nil {
			foreign.R = &weaponR{}
		}
		foreign.R.MechsWeapons = append(foreign.R.MechsWeapons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WeaponID == foreign.ID {
				local.R.Weapon = foreign
				if foreign.R == nil {
					foreign.R = &weaponR{}
				}
				foreign.R.MechsWeapons = append(foreign.R.MechsWeapons, local)
				break
			}
		}
	}

	return nil
}

// SetMech of the mechsWeapon to the related item.
// Sets o.R.Mech to related.
// Adds o to related.R.MechsWeapons.
func (o *MechsWeapon) SetMech(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mechs_weapons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechsWeaponPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MechID = related.ID
	if o.R == nil {
		o.R = &mechsWeaponR{
			Mech: related,
		}
	} else {
		o.R.Mech = related
	}

	if related.R == nil {
		related.R = &mechR{
			MechsWeapons: MechsWeaponSlice{o},
		}
	} else {
		related.R.MechsWeapons = append(related.R.MechsWeapons, o)
	}

	return nil
}

// SetWeapon of the mechsWeapon to the related item.
// Sets o.R.Weapon to related.
// Adds o to related.R.MechsWeapons.
func (o *MechsWeapon) SetWeapon(exec boil.Executor, insert bool, related *Weapon) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mechs_weapons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"weapon_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechsWeaponPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.WeaponID = related.ID
	if o.R == nil {
		o.R = &mechsWeaponR{
			Weapon: related,
		}
	} else {
		o.R.Weapon = related
	}

	if related.R == nil {
		related.R = &weaponR{
			MechsWeapons: MechsWeaponSlice{o},
		}
	} else {
		related.R.MechsWeapons = append(related.R.MechsWeapons, o)
	}

	return nil
}

// MechsWeapons retrieves all the records using an executor.
func MechsWeapons(mods ...qm.QueryMod) mechsWeaponQuery {
	mods = append(mods, qm.From("\"mechs_weapons\""), qmhelper.WhereIsNull("\"mechs_weapons\".\"deleted_at\""))
	return mechsWeaponQuery{NewQuery(mods...)}
}

// FindMechsWeapon retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMechsWeapon(exec boil.Executor, iD string, selectCols ...string) (*MechsWeapon, error) {
	mechsWeaponObj := &MechsWeapon{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mechs_weapons\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, mechsWeaponObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from mechs_weapons")
	}

	if err = mechsWeaponObj.doAfterSelectHooks(exec); err != nil {
		return mechsWeaponObj, err
	}

	return mechsWeaponObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MechsWeapon) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mechs_weapons provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechsWeaponColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mechsWeaponInsertCacheMut.RLock()
	cache, cached := mechsWeaponInsertCache[key]
	mechsWeaponInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mechsWeaponAllColumns,
			mechsWeaponColumnsWithDefault,
			mechsWeaponColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mechsWeaponType, mechsWeaponMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mechsWeaponType, mechsWeaponMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mechs_weapons\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mechs_weapons\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into mechs_weapons")
	}

	if !cached {
		mechsWeaponInsertCacheMut.Lock()
		mechsWeaponInsertCache[key] = cache
		mechsWeaponInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the MechsWeapon.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MechsWeapon) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mechsWeaponUpdateCacheMut.RLock()
	cache, cached := mechsWeaponUpdateCache[key]
	mechsWeaponUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mechsWeaponAllColumns,
			mechsWeaponPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update mechs_weapons, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mechs_weapons\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mechsWeaponPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mechsWeaponType, mechsWeaponMapping, append(wl, mechsWeaponPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update mechs_weapons row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for mechs_weapons")
	}

	if !cached {
		mechsWeaponUpdateCacheMut.Lock()
		mechsWeaponUpdateCache[key] = cache
		mechsWeaponUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mechsWeaponQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for mechs_weapons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for mechs_weapons")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MechsWeaponSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechsWeaponPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mechs_weapons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mechsWeaponPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in mechsWeapon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all mechsWeapon")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MechsWeapon) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mechs_weapons provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechsWeaponColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mechsWeaponUpsertCacheMut.RLock()
	cache, cached := mechsWeaponUpsertCache[key]
	mechsWeaponUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mechsWeaponAllColumns,
			mechsWeaponColumnsWithDefault,
			mechsWeaponColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mechsWeaponAllColumns,
			mechsWeaponPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert mechs_weapons, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mechsWeaponPrimaryKeyColumns))
			copy(conflict, mechsWeaponPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mechs_weapons\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mechsWeaponType, mechsWeaponMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mechsWeaponType, mechsWeaponMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert mechs_weapons")
	}

	if !cached {
		mechsWeaponUpsertCacheMut.Lock()
		mechsWeaponUpsertCache[key] = cache
		mechsWeaponUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single MechsWeapon record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MechsWeapon) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no MechsWeapon provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mechsWeaponPrimaryKeyMapping)
		sql = "DELETE FROM \"mechs_weapons\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"mechs_weapons\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(mechsWeaponType, mechsWeaponMapping, append(wl, mechsWeaponPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from mechs_weapons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for mechs_weapons")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mechsWeaponQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no mechsWeaponQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mechs_weapons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mechs_weapons")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MechsWeaponSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mechsWeaponBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechsWeaponPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"mechs_weapons\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechsWeaponPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechsWeaponPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"mechs_weapons\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, mechsWeaponPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mechsWeapon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mechs_weapons")
	}

	if len(mechsWeaponAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MechsWeapon) Reload(exec boil.Executor) error {
	ret, err := FindMechsWeapon(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MechsWeaponSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MechsWeaponSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechsWeaponPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mechs_weapons\".* FROM \"mechs_weapons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechsWeaponPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in MechsWeaponSlice")
	}

	*o = slice

	return nil
}

// MechsWeaponExists checks if the MechsWeapon row exists.
func MechsWeaponExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mechs_weapons\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if mechs_weapons exists")
	}

	return exists, nil
}
