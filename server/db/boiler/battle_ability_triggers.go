// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BattleAbilityTrigger is an object representing the database table.
type BattleAbilityTrigger struct {
	ID            string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	PlayerID      null.String `boiler:"player_id" boil:"player_id" json:"player_id,omitempty" toml:"player_id" yaml:"player_id,omitempty"`
	BattleID      string      `boiler:"battle_id" boil:"battle_id" json:"battle_id" toml:"battle_id" yaml:"battle_id"`
	FactionID     string      `boiler:"faction_id" boil:"faction_id" json:"faction_id" toml:"faction_id" yaml:"faction_id"`
	TriggeredAt   time.Time   `boiler:"triggered_at" boil:"triggered_at" json:"triggered_at" toml:"triggered_at" yaml:"triggered_at"`
	TriggerLabel  string      `boiler:"trigger_label" boil:"trigger_label" json:"trigger_label" toml:"trigger_label" yaml:"trigger_label"`
	GameAbilityID string      `boiler:"game_ability_id" boil:"game_ability_id" json:"game_ability_id" toml:"game_ability_id" yaml:"game_ability_id"`

	R *battleAbilityTriggerR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L battleAbilityTriggerL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattleAbilityTriggerColumns = struct {
	ID            string
	PlayerID      string
	BattleID      string
	FactionID     string
	TriggeredAt   string
	TriggerLabel  string
	GameAbilityID string
}{
	ID:            "id",
	PlayerID:      "player_id",
	BattleID:      "battle_id",
	FactionID:     "faction_id",
	TriggeredAt:   "triggered_at",
	TriggerLabel:  "trigger_label",
	GameAbilityID: "game_ability_id",
}

var BattleAbilityTriggerTableColumns = struct {
	ID            string
	PlayerID      string
	BattleID      string
	FactionID     string
	TriggeredAt   string
	TriggerLabel  string
	GameAbilityID string
}{
	ID:            "battle_ability_triggers.id",
	PlayerID:      "battle_ability_triggers.player_id",
	BattleID:      "battle_ability_triggers.battle_id",
	FactionID:     "battle_ability_triggers.faction_id",
	TriggeredAt:   "battle_ability_triggers.triggered_at",
	TriggerLabel:  "battle_ability_triggers.trigger_label",
	GameAbilityID: "battle_ability_triggers.game_ability_id",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var BattleAbilityTriggerWhere = struct {
	ID            whereHelperstring
	PlayerID      whereHelpernull_String
	BattleID      whereHelperstring
	FactionID     whereHelperstring
	TriggeredAt   whereHelpertime_Time
	TriggerLabel  whereHelperstring
	GameAbilityID whereHelperstring
}{
	ID:            whereHelperstring{field: "\"battle_ability_triggers\".\"id\""},
	PlayerID:      whereHelpernull_String{field: "\"battle_ability_triggers\".\"player_id\""},
	BattleID:      whereHelperstring{field: "\"battle_ability_triggers\".\"battle_id\""},
	FactionID:     whereHelperstring{field: "\"battle_ability_triggers\".\"faction_id\""},
	TriggeredAt:   whereHelpertime_Time{field: "\"battle_ability_triggers\".\"triggered_at\""},
	TriggerLabel:  whereHelperstring{field: "\"battle_ability_triggers\".\"trigger_label\""},
	GameAbilityID: whereHelperstring{field: "\"battle_ability_triggers\".\"game_ability_id\""},
}

// BattleAbilityTriggerRels is where relationship names are stored.
var BattleAbilityTriggerRels = struct {
	Battle      string
	Faction     string
	GameAbility string
	Player      string
}{
	Battle:      "Battle",
	Faction:     "Faction",
	GameAbility: "GameAbility",
	Player:      "Player",
}

// battleAbilityTriggerR is where relationships are stored.
type battleAbilityTriggerR struct {
	Battle      *Battle      `boiler:"Battle" boil:"Battle" json:"Battle" toml:"Battle" yaml:"Battle"`
	Faction     *Faction     `boiler:"Faction" boil:"Faction" json:"Faction" toml:"Faction" yaml:"Faction"`
	GameAbility *GameAbility `boiler:"GameAbility" boil:"GameAbility" json:"GameAbility" toml:"GameAbility" yaml:"GameAbility"`
	Player      *Player      `boiler:"Player" boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
}

// NewStruct creates a new relationship struct
func (*battleAbilityTriggerR) NewStruct() *battleAbilityTriggerR {
	return &battleAbilityTriggerR{}
}

// battleAbilityTriggerL is where Load methods for each relationship are stored.
type battleAbilityTriggerL struct{}

var (
	battleAbilityTriggerAllColumns            = []string{"id", "player_id", "battle_id", "faction_id", "triggered_at", "trigger_label", "game_ability_id"}
	battleAbilityTriggerColumnsWithoutDefault = []string{"battle_id", "faction_id", "trigger_label", "game_ability_id"}
	battleAbilityTriggerColumnsWithDefault    = []string{"id", "player_id", "triggered_at"}
	battleAbilityTriggerPrimaryKeyColumns     = []string{"id"}
	battleAbilityTriggerGeneratedColumns      = []string{}
)

type (
	// BattleAbilityTriggerSlice is an alias for a slice of pointers to BattleAbilityTrigger.
	// This should almost always be used instead of []BattleAbilityTrigger.
	BattleAbilityTriggerSlice []*BattleAbilityTrigger
	// BattleAbilityTriggerHook is the signature for custom BattleAbilityTrigger hook methods
	BattleAbilityTriggerHook func(boil.Executor, *BattleAbilityTrigger) error

	battleAbilityTriggerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battleAbilityTriggerType                 = reflect.TypeOf(&BattleAbilityTrigger{})
	battleAbilityTriggerMapping              = queries.MakeStructMapping(battleAbilityTriggerType)
	battleAbilityTriggerPrimaryKeyMapping, _ = queries.BindMapping(battleAbilityTriggerType, battleAbilityTriggerMapping, battleAbilityTriggerPrimaryKeyColumns)
	battleAbilityTriggerInsertCacheMut       sync.RWMutex
	battleAbilityTriggerInsertCache          = make(map[string]insertCache)
	battleAbilityTriggerUpdateCacheMut       sync.RWMutex
	battleAbilityTriggerUpdateCache          = make(map[string]updateCache)
	battleAbilityTriggerUpsertCacheMut       sync.RWMutex
	battleAbilityTriggerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battleAbilityTriggerAfterSelectHooks []BattleAbilityTriggerHook

var battleAbilityTriggerBeforeInsertHooks []BattleAbilityTriggerHook
var battleAbilityTriggerAfterInsertHooks []BattleAbilityTriggerHook

var battleAbilityTriggerBeforeUpdateHooks []BattleAbilityTriggerHook
var battleAbilityTriggerAfterUpdateHooks []BattleAbilityTriggerHook

var battleAbilityTriggerBeforeDeleteHooks []BattleAbilityTriggerHook
var battleAbilityTriggerAfterDeleteHooks []BattleAbilityTriggerHook

var battleAbilityTriggerBeforeUpsertHooks []BattleAbilityTriggerHook
var battleAbilityTriggerAfterUpsertHooks []BattleAbilityTriggerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BattleAbilityTrigger) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range battleAbilityTriggerAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BattleAbilityTrigger) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleAbilityTriggerBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BattleAbilityTrigger) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleAbilityTriggerAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BattleAbilityTrigger) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleAbilityTriggerBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BattleAbilityTrigger) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleAbilityTriggerAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BattleAbilityTrigger) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleAbilityTriggerBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BattleAbilityTrigger) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleAbilityTriggerAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BattleAbilityTrigger) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleAbilityTriggerBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BattleAbilityTrigger) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleAbilityTriggerAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattleAbilityTriggerHook registers your hook function for all future operations.
func AddBattleAbilityTriggerHook(hookPoint boil.HookPoint, battleAbilityTriggerHook BattleAbilityTriggerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		battleAbilityTriggerAfterSelectHooks = append(battleAbilityTriggerAfterSelectHooks, battleAbilityTriggerHook)
	case boil.BeforeInsertHook:
		battleAbilityTriggerBeforeInsertHooks = append(battleAbilityTriggerBeforeInsertHooks, battleAbilityTriggerHook)
	case boil.AfterInsertHook:
		battleAbilityTriggerAfterInsertHooks = append(battleAbilityTriggerAfterInsertHooks, battleAbilityTriggerHook)
	case boil.BeforeUpdateHook:
		battleAbilityTriggerBeforeUpdateHooks = append(battleAbilityTriggerBeforeUpdateHooks, battleAbilityTriggerHook)
	case boil.AfterUpdateHook:
		battleAbilityTriggerAfterUpdateHooks = append(battleAbilityTriggerAfterUpdateHooks, battleAbilityTriggerHook)
	case boil.BeforeDeleteHook:
		battleAbilityTriggerBeforeDeleteHooks = append(battleAbilityTriggerBeforeDeleteHooks, battleAbilityTriggerHook)
	case boil.AfterDeleteHook:
		battleAbilityTriggerAfterDeleteHooks = append(battleAbilityTriggerAfterDeleteHooks, battleAbilityTriggerHook)
	case boil.BeforeUpsertHook:
		battleAbilityTriggerBeforeUpsertHooks = append(battleAbilityTriggerBeforeUpsertHooks, battleAbilityTriggerHook)
	case boil.AfterUpsertHook:
		battleAbilityTriggerAfterUpsertHooks = append(battleAbilityTriggerAfterUpsertHooks, battleAbilityTriggerHook)
	}
}

// One returns a single battleAbilityTrigger record from the query.
func (q battleAbilityTriggerQuery) One(exec boil.Executor) (*BattleAbilityTrigger, error) {
	o := &BattleAbilityTrigger{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for battle_ability_triggers")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BattleAbilityTrigger records from the query.
func (q battleAbilityTriggerQuery) All(exec boil.Executor) (BattleAbilityTriggerSlice, error) {
	var o []*BattleAbilityTrigger

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BattleAbilityTrigger slice")
	}

	if len(battleAbilityTriggerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BattleAbilityTrigger records in the query.
func (q battleAbilityTriggerQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count battle_ability_triggers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battleAbilityTriggerQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if battle_ability_triggers exists")
	}

	return count > 0, nil
}

// Battle pointed to by the foreign key.
func (o *BattleAbilityTrigger) Battle(mods ...qm.QueryMod) battleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BattleID),
	}

	queryMods = append(queryMods, mods...)

	query := Battles(queryMods...)
	queries.SetFrom(query.Query, "\"battles\"")

	return query
}

// Faction pointed to by the foreign key.
func (o *BattleAbilityTrigger) Faction(mods ...qm.QueryMod) factionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FactionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Factions(queryMods...)
	queries.SetFrom(query.Query, "\"factions\"")

	return query
}

// GameAbility pointed to by the foreign key.
func (o *BattleAbilityTrigger) GameAbility(mods ...qm.QueryMod) gameAbilityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GameAbilityID),
	}

	queryMods = append(queryMods, mods...)

	query := GameAbilities(queryMods...)
	queries.SetFrom(query.Query, "\"game_abilities\"")

	return query
}

// Player pointed to by the foreign key.
func (o *BattleAbilityTrigger) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// LoadBattle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleAbilityTriggerL) LoadBattle(e boil.Executor, singular bool, maybeBattleAbilityTrigger interface{}, mods queries.Applicator) error {
	var slice []*BattleAbilityTrigger
	var object *BattleAbilityTrigger

	if singular {
		object = maybeBattleAbilityTrigger.(*BattleAbilityTrigger)
	} else {
		slice = *maybeBattleAbilityTrigger.(*[]*BattleAbilityTrigger)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleAbilityTriggerR{}
		}
		args = append(args, object.BattleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleAbilityTriggerR{}
			}

			for _, a := range args {
				if a == obj.BattleID {
					continue Outer
				}
			}

			args = append(args, obj.BattleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battles`),
		qm.WhereIn(`battles.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Battle")
	}

	var resultSlice []*Battle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Battle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battles")
	}

	if len(battleAbilityTriggerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Battle = foreign
		if foreign.R == nil {
			foreign.R = &battleR{}
		}
		foreign.R.BattleAbilityTriggers = append(foreign.R.BattleAbilityTriggers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BattleID == foreign.ID {
				local.R.Battle = foreign
				if foreign.R == nil {
					foreign.R = &battleR{}
				}
				foreign.R.BattleAbilityTriggers = append(foreign.R.BattleAbilityTriggers, local)
				break
			}
		}
	}

	return nil
}

// LoadFaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleAbilityTriggerL) LoadFaction(e boil.Executor, singular bool, maybeBattleAbilityTrigger interface{}, mods queries.Applicator) error {
	var slice []*BattleAbilityTrigger
	var object *BattleAbilityTrigger

	if singular {
		object = maybeBattleAbilityTrigger.(*BattleAbilityTrigger)
	} else {
		slice = *maybeBattleAbilityTrigger.(*[]*BattleAbilityTrigger)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleAbilityTriggerR{}
		}
		args = append(args, object.FactionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleAbilityTriggerR{}
			}

			for _, a := range args {
				if a == obj.FactionID {
					continue Outer
				}
			}

			args = append(args, obj.FactionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`factions`),
		qm.WhereIn(`factions.id in ?`, args...),
		qmhelper.WhereIsNull(`factions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Faction")
	}

	var resultSlice []*Faction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Faction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for factions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for factions")
	}

	if len(battleAbilityTriggerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Faction = foreign
		if foreign.R == nil {
			foreign.R = &factionR{}
		}
		foreign.R.BattleAbilityTriggers = append(foreign.R.BattleAbilityTriggers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FactionID == foreign.ID {
				local.R.Faction = foreign
				if foreign.R == nil {
					foreign.R = &factionR{}
				}
				foreign.R.BattleAbilityTriggers = append(foreign.R.BattleAbilityTriggers, local)
				break
			}
		}
	}

	return nil
}

// LoadGameAbility allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleAbilityTriggerL) LoadGameAbility(e boil.Executor, singular bool, maybeBattleAbilityTrigger interface{}, mods queries.Applicator) error {
	var slice []*BattleAbilityTrigger
	var object *BattleAbilityTrigger

	if singular {
		object = maybeBattleAbilityTrigger.(*BattleAbilityTrigger)
	} else {
		slice = *maybeBattleAbilityTrigger.(*[]*BattleAbilityTrigger)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleAbilityTriggerR{}
		}
		args = append(args, object.GameAbilityID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleAbilityTriggerR{}
			}

			for _, a := range args {
				if a == obj.GameAbilityID {
					continue Outer
				}
			}

			args = append(args, obj.GameAbilityID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`game_abilities`),
		qm.WhereIn(`game_abilities.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GameAbility")
	}

	var resultSlice []*GameAbility
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GameAbility")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for game_abilities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_abilities")
	}

	if len(battleAbilityTriggerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GameAbility = foreign
		if foreign.R == nil {
			foreign.R = &gameAbilityR{}
		}
		foreign.R.BattleAbilityTriggers = append(foreign.R.BattleAbilityTriggers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GameAbilityID == foreign.ID {
				local.R.GameAbility = foreign
				if foreign.R == nil {
					foreign.R = &gameAbilityR{}
				}
				foreign.R.BattleAbilityTriggers = append(foreign.R.BattleAbilityTriggers, local)
				break
			}
		}
	}

	return nil
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleAbilityTriggerL) LoadPlayer(e boil.Executor, singular bool, maybeBattleAbilityTrigger interface{}, mods queries.Applicator) error {
	var slice []*BattleAbilityTrigger
	var object *BattleAbilityTrigger

	if singular {
		object = maybeBattleAbilityTrigger.(*BattleAbilityTrigger)
	} else {
		slice = *maybeBattleAbilityTrigger.(*[]*BattleAbilityTrigger)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleAbilityTriggerR{}
		}
		if !queries.IsNil(object.PlayerID) {
			args = append(args, object.PlayerID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleAbilityTriggerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PlayerID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PlayerID) {
				args = append(args, obj.PlayerID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(battleAbilityTriggerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.BattleAbilityTriggers = append(foreign.R.BattleAbilityTriggers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PlayerID, foreign.ID) {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.BattleAbilityTriggers = append(foreign.R.BattleAbilityTriggers, local)
				break
			}
		}
	}

	return nil
}

// SetBattle of the battleAbilityTrigger to the related item.
// Sets o.R.Battle to related.
// Adds o to related.R.BattleAbilityTriggers.
func (o *BattleAbilityTrigger) SetBattle(exec boil.Executor, insert bool, related *Battle) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_ability_triggers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleAbilityTriggerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BattleID = related.ID
	if o.R == nil {
		o.R = &battleAbilityTriggerR{
			Battle: related,
		}
	} else {
		o.R.Battle = related
	}

	if related.R == nil {
		related.R = &battleR{
			BattleAbilityTriggers: BattleAbilityTriggerSlice{o},
		}
	} else {
		related.R.BattleAbilityTriggers = append(related.R.BattleAbilityTriggers, o)
	}

	return nil
}

// SetFaction of the battleAbilityTrigger to the related item.
// Sets o.R.Faction to related.
// Adds o to related.R.BattleAbilityTriggers.
func (o *BattleAbilityTrigger) SetFaction(exec boil.Executor, insert bool, related *Faction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_ability_triggers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"faction_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleAbilityTriggerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FactionID = related.ID
	if o.R == nil {
		o.R = &battleAbilityTriggerR{
			Faction: related,
		}
	} else {
		o.R.Faction = related
	}

	if related.R == nil {
		related.R = &factionR{
			BattleAbilityTriggers: BattleAbilityTriggerSlice{o},
		}
	} else {
		related.R.BattleAbilityTriggers = append(related.R.BattleAbilityTriggers, o)
	}

	return nil
}

// SetGameAbility of the battleAbilityTrigger to the related item.
// Sets o.R.GameAbility to related.
// Adds o to related.R.BattleAbilityTriggers.
func (o *BattleAbilityTrigger) SetGameAbility(exec boil.Executor, insert bool, related *GameAbility) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_ability_triggers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"game_ability_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleAbilityTriggerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GameAbilityID = related.ID
	if o.R == nil {
		o.R = &battleAbilityTriggerR{
			GameAbility: related,
		}
	} else {
		o.R.GameAbility = related
	}

	if related.R == nil {
		related.R = &gameAbilityR{
			BattleAbilityTriggers: BattleAbilityTriggerSlice{o},
		}
	} else {
		related.R.BattleAbilityTriggers = append(related.R.BattleAbilityTriggers, o)
	}

	return nil
}

// SetPlayer of the battleAbilityTrigger to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.BattleAbilityTriggers.
func (o *BattleAbilityTrigger) SetPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_ability_triggers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleAbilityTriggerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PlayerID, related.ID)
	if o.R == nil {
		o.R = &battleAbilityTriggerR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			BattleAbilityTriggers: BattleAbilityTriggerSlice{o},
		}
	} else {
		related.R.BattleAbilityTriggers = append(related.R.BattleAbilityTriggers, o)
	}

	return nil
}

// RemovePlayer relationship.
// Sets o.R.Player to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BattleAbilityTrigger) RemovePlayer(exec boil.Executor, related *Player) error {
	var err error

	queries.SetScanner(&o.PlayerID, nil)
	if _, err = o.Update(exec, boil.Whitelist("player_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Player = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BattleAbilityTriggers {
		if queries.Equal(o.PlayerID, ri.PlayerID) {
			continue
		}

		ln := len(related.R.BattleAbilityTriggers)
		if ln > 1 && i < ln-1 {
			related.R.BattleAbilityTriggers[i] = related.R.BattleAbilityTriggers[ln-1]
		}
		related.R.BattleAbilityTriggers = related.R.BattleAbilityTriggers[:ln-1]
		break
	}
	return nil
}

// BattleAbilityTriggers retrieves all the records using an executor.
func BattleAbilityTriggers(mods ...qm.QueryMod) battleAbilityTriggerQuery {
	mods = append(mods, qm.From("\"battle_ability_triggers\""))
	return battleAbilityTriggerQuery{NewQuery(mods...)}
}

// FindBattleAbilityTrigger retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattleAbilityTrigger(exec boil.Executor, iD string, selectCols ...string) (*BattleAbilityTrigger, error) {
	battleAbilityTriggerObj := &BattleAbilityTrigger{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battle_ability_triggers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, battleAbilityTriggerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from battle_ability_triggers")
	}

	if err = battleAbilityTriggerObj.doAfterSelectHooks(exec); err != nil {
		return battleAbilityTriggerObj, err
	}

	return battleAbilityTriggerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BattleAbilityTrigger) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_ability_triggers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleAbilityTriggerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battleAbilityTriggerInsertCacheMut.RLock()
	cache, cached := battleAbilityTriggerInsertCache[key]
	battleAbilityTriggerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battleAbilityTriggerAllColumns,
			battleAbilityTriggerColumnsWithDefault,
			battleAbilityTriggerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battleAbilityTriggerType, battleAbilityTriggerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battleAbilityTriggerType, battleAbilityTriggerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battle_ability_triggers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battle_ability_triggers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into battle_ability_triggers")
	}

	if !cached {
		battleAbilityTriggerInsertCacheMut.Lock()
		battleAbilityTriggerInsertCache[key] = cache
		battleAbilityTriggerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BattleAbilityTrigger.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BattleAbilityTrigger) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battleAbilityTriggerUpdateCacheMut.RLock()
	cache, cached := battleAbilityTriggerUpdateCache[key]
	battleAbilityTriggerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battleAbilityTriggerAllColumns,
			battleAbilityTriggerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update battle_ability_triggers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battle_ability_triggers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battleAbilityTriggerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battleAbilityTriggerType, battleAbilityTriggerMapping, append(wl, battleAbilityTriggerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update battle_ability_triggers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for battle_ability_triggers")
	}

	if !cached {
		battleAbilityTriggerUpdateCacheMut.Lock()
		battleAbilityTriggerUpdateCache[key] = cache
		battleAbilityTriggerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battleAbilityTriggerQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for battle_ability_triggers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for battle_ability_triggers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattleAbilityTriggerSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleAbilityTriggerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battle_ability_triggers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battleAbilityTriggerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in battleAbilityTrigger slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all battleAbilityTrigger")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BattleAbilityTrigger) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_ability_triggers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleAbilityTriggerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battleAbilityTriggerUpsertCacheMut.RLock()
	cache, cached := battleAbilityTriggerUpsertCache[key]
	battleAbilityTriggerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battleAbilityTriggerAllColumns,
			battleAbilityTriggerColumnsWithDefault,
			battleAbilityTriggerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			battleAbilityTriggerAllColumns,
			battleAbilityTriggerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert battle_ability_triggers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battleAbilityTriggerPrimaryKeyColumns))
			copy(conflict, battleAbilityTriggerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battle_ability_triggers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battleAbilityTriggerType, battleAbilityTriggerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battleAbilityTriggerType, battleAbilityTriggerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert battle_ability_triggers")
	}

	if !cached {
		battleAbilityTriggerUpsertCacheMut.Lock()
		battleAbilityTriggerUpsertCache[key] = cache
		battleAbilityTriggerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BattleAbilityTrigger record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BattleAbilityTrigger) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BattleAbilityTrigger provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battleAbilityTriggerPrimaryKeyMapping)
	sql := "DELETE FROM \"battle_ability_triggers\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from battle_ability_triggers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for battle_ability_triggers")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battleAbilityTriggerQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no battleAbilityTriggerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battle_ability_triggers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_ability_triggers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattleAbilityTriggerSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(battleAbilityTriggerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleAbilityTriggerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"battle_ability_triggers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleAbilityTriggerPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battleAbilityTrigger slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_ability_triggers")
	}

	if len(battleAbilityTriggerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BattleAbilityTrigger) Reload(exec boil.Executor) error {
	ret, err := FindBattleAbilityTrigger(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattleAbilityTriggerSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattleAbilityTriggerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleAbilityTriggerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battle_ability_triggers\".* FROM \"battle_ability_triggers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleAbilityTriggerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BattleAbilityTriggerSlice")
	}

	*o = slice

	return nil
}

// BattleAbilityTriggerExists checks if the BattleAbilityTrigger row exists.
func BattleAbilityTriggerExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battle_ability_triggers\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if battle_ability_triggers exists")
	}

	return exists, nil
}
