// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FactionPass is an object representing the database table.
type FactionPass struct {
	ID          string          `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Label       string          `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	LastForDays int             `boiler:"last_for_days" boil:"last_for_days" json:"last_for_days" toml:"last_for_days" yaml:"last_for_days"`
	SupsCost    decimal.Decimal `boiler:"sups_cost" boil:"sups_cost" json:"sups_cost" toml:"sups_cost" yaml:"sups_cost"`
	CreatedAt   time.Time       `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time       `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt   null.Time       `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *factionPassR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L factionPassL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FactionPassColumns = struct {
	ID          string
	Label       string
	LastForDays string
	SupsCost    string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "id",
	Label:       "label",
	LastForDays: "last_for_days",
	SupsCost:    "sups_cost",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
}

var FactionPassTableColumns = struct {
	ID          string
	Label       string
	LastForDays string
	SupsCost    string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "faction_passes.id",
	Label:       "faction_passes.label",
	LastForDays: "faction_passes.last_for_days",
	SupsCost:    "faction_passes.sups_cost",
	CreatedAt:   "faction_passes.created_at",
	UpdatedAt:   "faction_passes.updated_at",
	DeletedAt:   "faction_passes.deleted_at",
}

// Generated where

var FactionPassWhere = struct {
	ID          whereHelperstring
	Label       whereHelperstring
	LastForDays whereHelperint
	SupsCost    whereHelperdecimal_Decimal
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	DeletedAt   whereHelpernull_Time
}{
	ID:          whereHelperstring{field: "\"faction_passes\".\"id\""},
	Label:       whereHelperstring{field: "\"faction_passes\".\"label\""},
	LastForDays: whereHelperint{field: "\"faction_passes\".\"last_for_days\""},
	SupsCost:    whereHelperdecimal_Decimal{field: "\"faction_passes\".\"sups_cost\""},
	CreatedAt:   whereHelpertime_Time{field: "\"faction_passes\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"faction_passes\".\"updated_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"faction_passes\".\"deleted_at\""},
}

// FactionPassRels is where relationship names are stored.
var FactionPassRels = struct {
}{}

// factionPassR is where relationships are stored.
type factionPassR struct {
}

// NewStruct creates a new relationship struct
func (*factionPassR) NewStruct() *factionPassR {
	return &factionPassR{}
}

// factionPassL is where Load methods for each relationship are stored.
type factionPassL struct{}

var (
	factionPassAllColumns            = []string{"id", "label", "last_for_days", "sups_cost", "created_at", "updated_at", "deleted_at"}
	factionPassColumnsWithoutDefault = []string{"label", "last_for_days"}
	factionPassColumnsWithDefault    = []string{"id", "sups_cost", "created_at", "updated_at", "deleted_at"}
	factionPassPrimaryKeyColumns     = []string{"id"}
	factionPassGeneratedColumns      = []string{}
)

type (
	// FactionPassSlice is an alias for a slice of pointers to FactionPass.
	// This should almost always be used instead of []FactionPass.
	FactionPassSlice []*FactionPass
	// FactionPassHook is the signature for custom FactionPass hook methods
	FactionPassHook func(boil.Executor, *FactionPass) error

	factionPassQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	factionPassType                 = reflect.TypeOf(&FactionPass{})
	factionPassMapping              = queries.MakeStructMapping(factionPassType)
	factionPassPrimaryKeyMapping, _ = queries.BindMapping(factionPassType, factionPassMapping, factionPassPrimaryKeyColumns)
	factionPassInsertCacheMut       sync.RWMutex
	factionPassInsertCache          = make(map[string]insertCache)
	factionPassUpdateCacheMut       sync.RWMutex
	factionPassUpdateCache          = make(map[string]updateCache)
	factionPassUpsertCacheMut       sync.RWMutex
	factionPassUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var factionPassAfterSelectHooks []FactionPassHook

var factionPassBeforeInsertHooks []FactionPassHook
var factionPassAfterInsertHooks []FactionPassHook

var factionPassBeforeUpdateHooks []FactionPassHook
var factionPassAfterUpdateHooks []FactionPassHook

var factionPassBeforeDeleteHooks []FactionPassHook
var factionPassAfterDeleteHooks []FactionPassHook

var factionPassBeforeUpsertHooks []FactionPassHook
var factionPassAfterUpsertHooks []FactionPassHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FactionPass) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range factionPassAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FactionPass) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range factionPassBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FactionPass) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range factionPassAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FactionPass) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range factionPassBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FactionPass) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range factionPassAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FactionPass) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range factionPassBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FactionPass) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range factionPassAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FactionPass) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range factionPassBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FactionPass) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range factionPassAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFactionPassHook registers your hook function for all future operations.
func AddFactionPassHook(hookPoint boil.HookPoint, factionPassHook FactionPassHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		factionPassAfterSelectHooks = append(factionPassAfterSelectHooks, factionPassHook)
	case boil.BeforeInsertHook:
		factionPassBeforeInsertHooks = append(factionPassBeforeInsertHooks, factionPassHook)
	case boil.AfterInsertHook:
		factionPassAfterInsertHooks = append(factionPassAfterInsertHooks, factionPassHook)
	case boil.BeforeUpdateHook:
		factionPassBeforeUpdateHooks = append(factionPassBeforeUpdateHooks, factionPassHook)
	case boil.AfterUpdateHook:
		factionPassAfterUpdateHooks = append(factionPassAfterUpdateHooks, factionPassHook)
	case boil.BeforeDeleteHook:
		factionPassBeforeDeleteHooks = append(factionPassBeforeDeleteHooks, factionPassHook)
	case boil.AfterDeleteHook:
		factionPassAfterDeleteHooks = append(factionPassAfterDeleteHooks, factionPassHook)
	case boil.BeforeUpsertHook:
		factionPassBeforeUpsertHooks = append(factionPassBeforeUpsertHooks, factionPassHook)
	case boil.AfterUpsertHook:
		factionPassAfterUpsertHooks = append(factionPassAfterUpsertHooks, factionPassHook)
	}
}

// One returns a single factionPass record from the query.
func (q factionPassQuery) One(exec boil.Executor) (*FactionPass, error) {
	o := &FactionPass{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for faction_passes")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FactionPass records from the query.
func (q factionPassQuery) All(exec boil.Executor) (FactionPassSlice, error) {
	var o []*FactionPass

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to FactionPass slice")
	}

	if len(factionPassAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FactionPass records in the query.
func (q factionPassQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count faction_passes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q factionPassQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if faction_passes exists")
	}

	return count > 0, nil
}

// FactionPasses retrieves all the records using an executor.
func FactionPasses(mods ...qm.QueryMod) factionPassQuery {
	mods = append(mods, qm.From("\"faction_passes\""), qmhelper.WhereIsNull("\"faction_passes\".\"deleted_at\""))
	return factionPassQuery{NewQuery(mods...)}
}

// FindFactionPass retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFactionPass(exec boil.Executor, iD string, selectCols ...string) (*FactionPass, error) {
	factionPassObj := &FactionPass{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"faction_passes\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, factionPassObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from faction_passes")
	}

	if err = factionPassObj.doAfterSelectHooks(exec); err != nil {
		return factionPassObj, err
	}

	return factionPassObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FactionPass) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no faction_passes provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(factionPassColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	factionPassInsertCacheMut.RLock()
	cache, cached := factionPassInsertCache[key]
	factionPassInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			factionPassAllColumns,
			factionPassColumnsWithDefault,
			factionPassColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(factionPassType, factionPassMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(factionPassType, factionPassMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"faction_passes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"faction_passes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into faction_passes")
	}

	if !cached {
		factionPassInsertCacheMut.Lock()
		factionPassInsertCache[key] = cache
		factionPassInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the FactionPass.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FactionPass) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	factionPassUpdateCacheMut.RLock()
	cache, cached := factionPassUpdateCache[key]
	factionPassUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			factionPassAllColumns,
			factionPassPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update faction_passes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"faction_passes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, factionPassPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(factionPassType, factionPassMapping, append(wl, factionPassPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update faction_passes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for faction_passes")
	}

	if !cached {
		factionPassUpdateCacheMut.Lock()
		factionPassUpdateCache[key] = cache
		factionPassUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q factionPassQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for faction_passes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for faction_passes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FactionPassSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factionPassPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"faction_passes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, factionPassPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in factionPass slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all factionPass")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FactionPass) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no faction_passes provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(factionPassColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	factionPassUpsertCacheMut.RLock()
	cache, cached := factionPassUpsertCache[key]
	factionPassUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			factionPassAllColumns,
			factionPassColumnsWithDefault,
			factionPassColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			factionPassAllColumns,
			factionPassPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert faction_passes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(factionPassPrimaryKeyColumns))
			copy(conflict, factionPassPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"faction_passes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(factionPassType, factionPassMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(factionPassType, factionPassMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert faction_passes")
	}

	if !cached {
		factionPassUpsertCacheMut.Lock()
		factionPassUpsertCache[key] = cache
		factionPassUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single FactionPass record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FactionPass) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no FactionPass provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), factionPassPrimaryKeyMapping)
		sql = "DELETE FROM \"faction_passes\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"faction_passes\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(factionPassType, factionPassMapping, append(wl, factionPassPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from faction_passes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for faction_passes")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q factionPassQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no factionPassQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from faction_passes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for faction_passes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FactionPassSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(factionPassBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factionPassPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"faction_passes\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, factionPassPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factionPassPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"faction_passes\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, factionPassPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from factionPass slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for faction_passes")
	}

	if len(factionPassAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FactionPass) Reload(exec boil.Executor) error {
	ret, err := FindFactionPass(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FactionPassSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FactionPassSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factionPassPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"faction_passes\".* FROM \"faction_passes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, factionPassPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in FactionPassSlice")
	}

	*o = slice

	return nil
}

// FactionPassExists checks if the FactionPass row exists.
func FactionPassExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"faction_passes\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if faction_passes exists")
	}

	return exists, nil
}
