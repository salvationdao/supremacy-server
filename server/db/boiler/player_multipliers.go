// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PlayerMultiplier is an object representing the database table.
type PlayerMultiplier struct {
	PlayerID                string          `boiler:"player_id" boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	FromBattleNumber        int             `boiler:"from_battle_number" boil:"from_battle_number" json:"from_battle_number" toml:"from_battle_number" yaml:"from_battle_number"`
	UntilBattleNumber       int             `boiler:"until_battle_number" boil:"until_battle_number" json:"until_battle_number" toml:"until_battle_number" yaml:"until_battle_number"`
	MultiplierID            string          `boiler:"multiplier_id" boil:"multiplier_id" json:"multiplier_id" toml:"multiplier_id" yaml:"multiplier_id"`
	Value                   decimal.Decimal `boiler:"value" boil:"value" json:"value" toml:"value" yaml:"value"`
	CreatedAt               time.Time       `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ObtainedAtBattleSeconds decimal.Decimal `boiler:"obtained_at_battle_seconds" boil:"obtained_at_battle_seconds" json:"obtained_at_battle_seconds" toml:"obtained_at_battle_seconds" yaml:"obtained_at_battle_seconds"`
	ExpiresAtBattleSeconds  decimal.Decimal `boiler:"expires_at_battle_seconds" boil:"expires_at_battle_seconds" json:"expires_at_battle_seconds" toml:"expires_at_battle_seconds" yaml:"expires_at_battle_seconds"`
	ID                      string          `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`

	R *playerMultiplierR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L playerMultiplierL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlayerMultiplierColumns = struct {
	PlayerID                string
	FromBattleNumber        string
	UntilBattleNumber       string
	MultiplierID            string
	Value                   string
	CreatedAt               string
	ObtainedAtBattleSeconds string
	ExpiresAtBattleSeconds  string
	ID                      string
}{
	PlayerID:                "player_id",
	FromBattleNumber:        "from_battle_number",
	UntilBattleNumber:       "until_battle_number",
	MultiplierID:            "multiplier_id",
	Value:                   "value",
	CreatedAt:               "created_at",
	ObtainedAtBattleSeconds: "obtained_at_battle_seconds",
	ExpiresAtBattleSeconds:  "expires_at_battle_seconds",
	ID:                      "id",
}

var PlayerMultiplierTableColumns = struct {
	PlayerID                string
	FromBattleNumber        string
	UntilBattleNumber       string
	MultiplierID            string
	Value                   string
	CreatedAt               string
	ObtainedAtBattleSeconds string
	ExpiresAtBattleSeconds  string
	ID                      string
}{
	PlayerID:                "player_multipliers.player_id",
	FromBattleNumber:        "player_multipliers.from_battle_number",
	UntilBattleNumber:       "player_multipliers.until_battle_number",
	MultiplierID:            "player_multipliers.multiplier_id",
	Value:                   "player_multipliers.value",
	CreatedAt:               "player_multipliers.created_at",
	ObtainedAtBattleSeconds: "player_multipliers.obtained_at_battle_seconds",
	ExpiresAtBattleSeconds:  "player_multipliers.expires_at_battle_seconds",
	ID:                      "player_multipliers.id",
}

// Generated where

var PlayerMultiplierWhere = struct {
	PlayerID                whereHelperstring
	FromBattleNumber        whereHelperint
	UntilBattleNumber       whereHelperint
	MultiplierID            whereHelperstring
	Value                   whereHelperdecimal_Decimal
	CreatedAt               whereHelpertime_Time
	ObtainedAtBattleSeconds whereHelperdecimal_Decimal
	ExpiresAtBattleSeconds  whereHelperdecimal_Decimal
	ID                      whereHelperstring
}{
	PlayerID:                whereHelperstring{field: "\"player_multipliers\".\"player_id\""},
	FromBattleNumber:        whereHelperint{field: "\"player_multipliers\".\"from_battle_number\""},
	UntilBattleNumber:       whereHelperint{field: "\"player_multipliers\".\"until_battle_number\""},
	MultiplierID:            whereHelperstring{field: "\"player_multipliers\".\"multiplier_id\""},
	Value:                   whereHelperdecimal_Decimal{field: "\"player_multipliers\".\"value\""},
	CreatedAt:               whereHelpertime_Time{field: "\"player_multipliers\".\"created_at\""},
	ObtainedAtBattleSeconds: whereHelperdecimal_Decimal{field: "\"player_multipliers\".\"obtained_at_battle_seconds\""},
	ExpiresAtBattleSeconds:  whereHelperdecimal_Decimal{field: "\"player_multipliers\".\"expires_at_battle_seconds\""},
	ID:                      whereHelperstring{field: "\"player_multipliers\".\"id\""},
}

// PlayerMultiplierRels is where relationship names are stored.
var PlayerMultiplierRels = struct {
	Multiplier string
	Player     string
}{
	Multiplier: "Multiplier",
	Player:     "Player",
}

// playerMultiplierR is where relationships are stored.
type playerMultiplierR struct {
	Multiplier *Multiplier `boiler:"Multiplier" boil:"Multiplier" json:"Multiplier" toml:"Multiplier" yaml:"Multiplier"`
	Player     *Player     `boiler:"Player" boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
}

// NewStruct creates a new relationship struct
func (*playerMultiplierR) NewStruct() *playerMultiplierR {
	return &playerMultiplierR{}
}

// playerMultiplierL is where Load methods for each relationship are stored.
type playerMultiplierL struct{}

var (
	playerMultiplierAllColumns            = []string{"player_id", "from_battle_number", "until_battle_number", "multiplier_id", "value", "created_at", "obtained_at_battle_seconds", "expires_at_battle_seconds", "id"}
	playerMultiplierColumnsWithoutDefault = []string{"player_id", "from_battle_number", "until_battle_number", "multiplier_id", "value"}
	playerMultiplierColumnsWithDefault    = []string{"created_at", "obtained_at_battle_seconds", "expires_at_battle_seconds", "id"}
	playerMultiplierPrimaryKeyColumns     = []string{"id"}
	playerMultiplierGeneratedColumns      = []string{}
)

type (
	// PlayerMultiplierSlice is an alias for a slice of pointers to PlayerMultiplier.
	// This should almost always be used instead of []PlayerMultiplier.
	PlayerMultiplierSlice []*PlayerMultiplier
	// PlayerMultiplierHook is the signature for custom PlayerMultiplier hook methods
	PlayerMultiplierHook func(boil.Executor, *PlayerMultiplier) error

	playerMultiplierQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playerMultiplierType                 = reflect.TypeOf(&PlayerMultiplier{})
	playerMultiplierMapping              = queries.MakeStructMapping(playerMultiplierType)
	playerMultiplierPrimaryKeyMapping, _ = queries.BindMapping(playerMultiplierType, playerMultiplierMapping, playerMultiplierPrimaryKeyColumns)
	playerMultiplierInsertCacheMut       sync.RWMutex
	playerMultiplierInsertCache          = make(map[string]insertCache)
	playerMultiplierUpdateCacheMut       sync.RWMutex
	playerMultiplierUpdateCache          = make(map[string]updateCache)
	playerMultiplierUpsertCacheMut       sync.RWMutex
	playerMultiplierUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var playerMultiplierAfterSelectHooks []PlayerMultiplierHook

var playerMultiplierBeforeInsertHooks []PlayerMultiplierHook
var playerMultiplierAfterInsertHooks []PlayerMultiplierHook

var playerMultiplierBeforeUpdateHooks []PlayerMultiplierHook
var playerMultiplierAfterUpdateHooks []PlayerMultiplierHook

var playerMultiplierBeforeDeleteHooks []PlayerMultiplierHook
var playerMultiplierAfterDeleteHooks []PlayerMultiplierHook

var playerMultiplierBeforeUpsertHooks []PlayerMultiplierHook
var playerMultiplierAfterUpsertHooks []PlayerMultiplierHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PlayerMultiplier) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range playerMultiplierAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PlayerMultiplier) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerMultiplierBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PlayerMultiplier) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerMultiplierAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PlayerMultiplier) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range playerMultiplierBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PlayerMultiplier) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range playerMultiplierAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PlayerMultiplier) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range playerMultiplierBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PlayerMultiplier) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range playerMultiplierAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PlayerMultiplier) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerMultiplierBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PlayerMultiplier) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerMultiplierAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlayerMultiplierHook registers your hook function for all future operations.
func AddPlayerMultiplierHook(hookPoint boil.HookPoint, playerMultiplierHook PlayerMultiplierHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		playerMultiplierAfterSelectHooks = append(playerMultiplierAfterSelectHooks, playerMultiplierHook)
	case boil.BeforeInsertHook:
		playerMultiplierBeforeInsertHooks = append(playerMultiplierBeforeInsertHooks, playerMultiplierHook)
	case boil.AfterInsertHook:
		playerMultiplierAfterInsertHooks = append(playerMultiplierAfterInsertHooks, playerMultiplierHook)
	case boil.BeforeUpdateHook:
		playerMultiplierBeforeUpdateHooks = append(playerMultiplierBeforeUpdateHooks, playerMultiplierHook)
	case boil.AfterUpdateHook:
		playerMultiplierAfterUpdateHooks = append(playerMultiplierAfterUpdateHooks, playerMultiplierHook)
	case boil.BeforeDeleteHook:
		playerMultiplierBeforeDeleteHooks = append(playerMultiplierBeforeDeleteHooks, playerMultiplierHook)
	case boil.AfterDeleteHook:
		playerMultiplierAfterDeleteHooks = append(playerMultiplierAfterDeleteHooks, playerMultiplierHook)
	case boil.BeforeUpsertHook:
		playerMultiplierBeforeUpsertHooks = append(playerMultiplierBeforeUpsertHooks, playerMultiplierHook)
	case boil.AfterUpsertHook:
		playerMultiplierAfterUpsertHooks = append(playerMultiplierAfterUpsertHooks, playerMultiplierHook)
	}
}

// One returns a single playerMultiplier record from the query.
func (q playerMultiplierQuery) One(exec boil.Executor) (*PlayerMultiplier, error) {
	o := &PlayerMultiplier{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for player_multipliers")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PlayerMultiplier records from the query.
func (q playerMultiplierQuery) All(exec boil.Executor) (PlayerMultiplierSlice, error) {
	var o []*PlayerMultiplier

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to PlayerMultiplier slice")
	}

	if len(playerMultiplierAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PlayerMultiplier records in the query.
func (q playerMultiplierQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count player_multipliers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q playerMultiplierQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if player_multipliers exists")
	}

	return count > 0, nil
}

// Multiplier pointed to by the foreign key.
func (o *PlayerMultiplier) Multiplier(mods ...qm.QueryMod) multiplierQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MultiplierID),
	}

	queryMods = append(queryMods, mods...)

	query := Multipliers(queryMods...)
	queries.SetFrom(query.Query, "\"multipliers\"")

	return query
}

// Player pointed to by the foreign key.
func (o *PlayerMultiplier) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// LoadMultiplier allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerMultiplierL) LoadMultiplier(e boil.Executor, singular bool, maybePlayerMultiplier interface{}, mods queries.Applicator) error {
	var slice []*PlayerMultiplier
	var object *PlayerMultiplier

	if singular {
		object = maybePlayerMultiplier.(*PlayerMultiplier)
	} else {
		slice = *maybePlayerMultiplier.(*[]*PlayerMultiplier)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerMultiplierR{}
		}
		args = append(args, object.MultiplierID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerMultiplierR{}
			}

			for _, a := range args {
				if a == obj.MultiplierID {
					continue Outer
				}
			}

			args = append(args, obj.MultiplierID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`multipliers`),
		qm.WhereIn(`multipliers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Multiplier")
	}

	var resultSlice []*Multiplier
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Multiplier")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for multipliers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for multipliers")
	}

	if len(playerMultiplierAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Multiplier = foreign
		if foreign.R == nil {
			foreign.R = &multiplierR{}
		}
		foreign.R.PlayerMultipliers = append(foreign.R.PlayerMultipliers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MultiplierID == foreign.ID {
				local.R.Multiplier = foreign
				if foreign.R == nil {
					foreign.R = &multiplierR{}
				}
				foreign.R.PlayerMultipliers = append(foreign.R.PlayerMultipliers, local)
				break
			}
		}
	}

	return nil
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerMultiplierL) LoadPlayer(e boil.Executor, singular bool, maybePlayerMultiplier interface{}, mods queries.Applicator) error {
	var slice []*PlayerMultiplier
	var object *PlayerMultiplier

	if singular {
		object = maybePlayerMultiplier.(*PlayerMultiplier)
	} else {
		slice = *maybePlayerMultiplier.(*[]*PlayerMultiplier)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerMultiplierR{}
		}
		args = append(args, object.PlayerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerMultiplierR{}
			}

			for _, a := range args {
				if a == obj.PlayerID {
					continue Outer
				}
			}

			args = append(args, obj.PlayerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(playerMultiplierAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.PlayerMultipliers = append(foreign.R.PlayerMultipliers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.ID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.PlayerMultipliers = append(foreign.R.PlayerMultipliers, local)
				break
			}
		}
	}

	return nil
}

// SetMultiplier of the playerMultiplier to the related item.
// Sets o.R.Multiplier to related.
// Adds o to related.R.PlayerMultipliers.
func (o *PlayerMultiplier) SetMultiplier(exec boil.Executor, insert bool, related *Multiplier) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"player_multipliers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"multiplier_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerMultiplierPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MultiplierID = related.ID
	if o.R == nil {
		o.R = &playerMultiplierR{
			Multiplier: related,
		}
	} else {
		o.R.Multiplier = related
	}

	if related.R == nil {
		related.R = &multiplierR{
			PlayerMultipliers: PlayerMultiplierSlice{o},
		}
	} else {
		related.R.PlayerMultipliers = append(related.R.PlayerMultipliers, o)
	}

	return nil
}

// SetPlayer of the playerMultiplier to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.PlayerMultipliers.
func (o *PlayerMultiplier) SetPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"player_multipliers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerMultiplierPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.ID
	if o.R == nil {
		o.R = &playerMultiplierR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			PlayerMultipliers: PlayerMultiplierSlice{o},
		}
	} else {
		related.R.PlayerMultipliers = append(related.R.PlayerMultipliers, o)
	}

	return nil
}

// PlayerMultipliers retrieves all the records using an executor.
func PlayerMultipliers(mods ...qm.QueryMod) playerMultiplierQuery {
	mods = append(mods, qm.From("\"player_multipliers\""))
	return playerMultiplierQuery{NewQuery(mods...)}
}

// FindPlayerMultiplier retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlayerMultiplier(exec boil.Executor, iD string, selectCols ...string) (*PlayerMultiplier, error) {
	playerMultiplierObj := &PlayerMultiplier{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"player_multipliers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, playerMultiplierObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from player_multipliers")
	}

	if err = playerMultiplierObj.doAfterSelectHooks(exec); err != nil {
		return playerMultiplierObj, err
	}

	return playerMultiplierObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PlayerMultiplier) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no player_multipliers provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerMultiplierColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	playerMultiplierInsertCacheMut.RLock()
	cache, cached := playerMultiplierInsertCache[key]
	playerMultiplierInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			playerMultiplierAllColumns,
			playerMultiplierColumnsWithDefault,
			playerMultiplierColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(playerMultiplierType, playerMultiplierMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(playerMultiplierType, playerMultiplierMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"player_multipliers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"player_multipliers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into player_multipliers")
	}

	if !cached {
		playerMultiplierInsertCacheMut.Lock()
		playerMultiplierInsertCache[key] = cache
		playerMultiplierInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the PlayerMultiplier.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PlayerMultiplier) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	playerMultiplierUpdateCacheMut.RLock()
	cache, cached := playerMultiplierUpdateCache[key]
	playerMultiplierUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			playerMultiplierAllColumns,
			playerMultiplierPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update player_multipliers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"player_multipliers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, playerMultiplierPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(playerMultiplierType, playerMultiplierMapping, append(wl, playerMultiplierPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update player_multipliers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for player_multipliers")
	}

	if !cached {
		playerMultiplierUpdateCacheMut.Lock()
		playerMultiplierUpdateCache[key] = cache
		playerMultiplierUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q playerMultiplierQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for player_multipliers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for player_multipliers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlayerMultiplierSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerMultiplierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"player_multipliers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, playerMultiplierPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in playerMultiplier slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all playerMultiplier")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PlayerMultiplier) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no player_multipliers provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerMultiplierColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	playerMultiplierUpsertCacheMut.RLock()
	cache, cached := playerMultiplierUpsertCache[key]
	playerMultiplierUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			playerMultiplierAllColumns,
			playerMultiplierColumnsWithDefault,
			playerMultiplierColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			playerMultiplierAllColumns,
			playerMultiplierPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert player_multipliers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(playerMultiplierPrimaryKeyColumns))
			copy(conflict, playerMultiplierPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"player_multipliers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(playerMultiplierType, playerMultiplierMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(playerMultiplierType, playerMultiplierMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert player_multipliers")
	}

	if !cached {
		playerMultiplierUpsertCacheMut.Lock()
		playerMultiplierUpsertCache[key] = cache
		playerMultiplierUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single PlayerMultiplier record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PlayerMultiplier) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no PlayerMultiplier provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), playerMultiplierPrimaryKeyMapping)
	sql := "DELETE FROM \"player_multipliers\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from player_multipliers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for player_multipliers")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q playerMultiplierQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no playerMultiplierQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from player_multipliers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for player_multipliers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlayerMultiplierSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(playerMultiplierBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerMultiplierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"player_multipliers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerMultiplierPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from playerMultiplier slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for player_multipliers")
	}

	if len(playerMultiplierAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PlayerMultiplier) Reload(exec boil.Executor) error {
	ret, err := FindPlayerMultiplier(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlayerMultiplierSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlayerMultiplierSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerMultiplierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"player_multipliers\".* FROM \"player_multipliers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerMultiplierPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in PlayerMultiplierSlice")
	}

	*o = slice

	return nil
}

// PlayerMultiplierExists checks if the PlayerMultiplier row exists.
func PlayerMultiplierExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"player_multipliers\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if player_multipliers exists")
	}

	return exists, nil
}
