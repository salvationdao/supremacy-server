// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SyndicateQuestionnaire is an object representing the database table.
type SyndicateQuestionnaire struct {
	ID          string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	SyndicateID string    `boiler:"syndicate_id" boil:"syndicate_id" json:"syndicate_id" toml:"syndicate_id" yaml:"syndicate_id"`
	Usage       string    `boiler:"usage" boil:"usage" json:"usage" toml:"usage" yaml:"usage"`
	Question    string    `boiler:"question" boil:"question" json:"question" toml:"question" yaml:"question"`
	Type        string    `boiler:"type" boil:"type" json:"type" toml:"type" yaml:"type"`
	CreatedAt   time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt   null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *syndicateQuestionnaireR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L syndicateQuestionnaireL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SyndicateQuestionnaireColumns = struct {
	ID          string
	SyndicateID string
	Usage       string
	Question    string
	Type        string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "id",
	SyndicateID: "syndicate_id",
	Usage:       "usage",
	Question:    "question",
	Type:        "type",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
}

var SyndicateQuestionnaireTableColumns = struct {
	ID          string
	SyndicateID string
	Usage       string
	Question    string
	Type        string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "syndicate_questionnaires.id",
	SyndicateID: "syndicate_questionnaires.syndicate_id",
	Usage:       "syndicate_questionnaires.usage",
	Question:    "syndicate_questionnaires.question",
	Type:        "syndicate_questionnaires.type",
	CreatedAt:   "syndicate_questionnaires.created_at",
	UpdatedAt:   "syndicate_questionnaires.updated_at",
	DeletedAt:   "syndicate_questionnaires.deleted_at",
}

// Generated where

var SyndicateQuestionnaireWhere = struct {
	ID          whereHelperstring
	SyndicateID whereHelperstring
	Usage       whereHelperstring
	Question    whereHelperstring
	Type        whereHelperstring
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	DeletedAt   whereHelpernull_Time
}{
	ID:          whereHelperstring{field: "\"syndicate_questionnaires\".\"id\""},
	SyndicateID: whereHelperstring{field: "\"syndicate_questionnaires\".\"syndicate_id\""},
	Usage:       whereHelperstring{field: "\"syndicate_questionnaires\".\"usage\""},
	Question:    whereHelperstring{field: "\"syndicate_questionnaires\".\"question\""},
	Type:        whereHelperstring{field: "\"syndicate_questionnaires\".\"type\""},
	CreatedAt:   whereHelpertime_Time{field: "\"syndicate_questionnaires\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"syndicate_questionnaires\".\"updated_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"syndicate_questionnaires\".\"deleted_at\""},
}

// SyndicateQuestionnaireRels is where relationship names are stored.
var SyndicateQuestionnaireRels = struct {
	Syndicate                         string
	QuestionnaireQuestionnaireOptions string
}{
	Syndicate:                         "Syndicate",
	QuestionnaireQuestionnaireOptions: "QuestionnaireQuestionnaireOptions",
}

// syndicateQuestionnaireR is where relationships are stored.
type syndicateQuestionnaireR struct {
	Syndicate                         *Syndicate               `boiler:"Syndicate" boil:"Syndicate" json:"Syndicate" toml:"Syndicate" yaml:"Syndicate"`
	QuestionnaireQuestionnaireOptions QuestionnaireOptionSlice `boiler:"QuestionnaireQuestionnaireOptions" boil:"QuestionnaireQuestionnaireOptions" json:"QuestionnaireQuestionnaireOptions" toml:"QuestionnaireQuestionnaireOptions" yaml:"QuestionnaireQuestionnaireOptions"`
}

// NewStruct creates a new relationship struct
func (*syndicateQuestionnaireR) NewStruct() *syndicateQuestionnaireR {
	return &syndicateQuestionnaireR{}
}

// syndicateQuestionnaireL is where Load methods for each relationship are stored.
type syndicateQuestionnaireL struct{}

var (
	syndicateQuestionnaireAllColumns            = []string{"id", "syndicate_id", "usage", "question", "type", "created_at", "updated_at", "deleted_at"}
	syndicateQuestionnaireColumnsWithoutDefault = []string{"syndicate_id", "usage", "question", "type"}
	syndicateQuestionnaireColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at"}
	syndicateQuestionnairePrimaryKeyColumns     = []string{"id"}
	syndicateQuestionnaireGeneratedColumns      = []string{}
)

type (
	// SyndicateQuestionnaireSlice is an alias for a slice of pointers to SyndicateQuestionnaire.
	// This should almost always be used instead of []SyndicateQuestionnaire.
	SyndicateQuestionnaireSlice []*SyndicateQuestionnaire
	// SyndicateQuestionnaireHook is the signature for custom SyndicateQuestionnaire hook methods
	SyndicateQuestionnaireHook func(boil.Executor, *SyndicateQuestionnaire) error

	syndicateQuestionnaireQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	syndicateQuestionnaireType                 = reflect.TypeOf(&SyndicateQuestionnaire{})
	syndicateQuestionnaireMapping              = queries.MakeStructMapping(syndicateQuestionnaireType)
	syndicateQuestionnairePrimaryKeyMapping, _ = queries.BindMapping(syndicateQuestionnaireType, syndicateQuestionnaireMapping, syndicateQuestionnairePrimaryKeyColumns)
	syndicateQuestionnaireInsertCacheMut       sync.RWMutex
	syndicateQuestionnaireInsertCache          = make(map[string]insertCache)
	syndicateQuestionnaireUpdateCacheMut       sync.RWMutex
	syndicateQuestionnaireUpdateCache          = make(map[string]updateCache)
	syndicateQuestionnaireUpsertCacheMut       sync.RWMutex
	syndicateQuestionnaireUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var syndicateQuestionnaireAfterSelectHooks []SyndicateQuestionnaireHook

var syndicateQuestionnaireBeforeInsertHooks []SyndicateQuestionnaireHook
var syndicateQuestionnaireAfterInsertHooks []SyndicateQuestionnaireHook

var syndicateQuestionnaireBeforeUpdateHooks []SyndicateQuestionnaireHook
var syndicateQuestionnaireAfterUpdateHooks []SyndicateQuestionnaireHook

var syndicateQuestionnaireBeforeDeleteHooks []SyndicateQuestionnaireHook
var syndicateQuestionnaireAfterDeleteHooks []SyndicateQuestionnaireHook

var syndicateQuestionnaireBeforeUpsertHooks []SyndicateQuestionnaireHook
var syndicateQuestionnaireAfterUpsertHooks []SyndicateQuestionnaireHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SyndicateQuestionnaire) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateQuestionnaireAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SyndicateQuestionnaire) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateQuestionnaireBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SyndicateQuestionnaire) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateQuestionnaireAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SyndicateQuestionnaire) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateQuestionnaireBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SyndicateQuestionnaire) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateQuestionnaireAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SyndicateQuestionnaire) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateQuestionnaireBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SyndicateQuestionnaire) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateQuestionnaireAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SyndicateQuestionnaire) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateQuestionnaireBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SyndicateQuestionnaire) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateQuestionnaireAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSyndicateQuestionnaireHook registers your hook function for all future operations.
func AddSyndicateQuestionnaireHook(hookPoint boil.HookPoint, syndicateQuestionnaireHook SyndicateQuestionnaireHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		syndicateQuestionnaireAfterSelectHooks = append(syndicateQuestionnaireAfterSelectHooks, syndicateQuestionnaireHook)
	case boil.BeforeInsertHook:
		syndicateQuestionnaireBeforeInsertHooks = append(syndicateQuestionnaireBeforeInsertHooks, syndicateQuestionnaireHook)
	case boil.AfterInsertHook:
		syndicateQuestionnaireAfterInsertHooks = append(syndicateQuestionnaireAfterInsertHooks, syndicateQuestionnaireHook)
	case boil.BeforeUpdateHook:
		syndicateQuestionnaireBeforeUpdateHooks = append(syndicateQuestionnaireBeforeUpdateHooks, syndicateQuestionnaireHook)
	case boil.AfterUpdateHook:
		syndicateQuestionnaireAfterUpdateHooks = append(syndicateQuestionnaireAfterUpdateHooks, syndicateQuestionnaireHook)
	case boil.BeforeDeleteHook:
		syndicateQuestionnaireBeforeDeleteHooks = append(syndicateQuestionnaireBeforeDeleteHooks, syndicateQuestionnaireHook)
	case boil.AfterDeleteHook:
		syndicateQuestionnaireAfterDeleteHooks = append(syndicateQuestionnaireAfterDeleteHooks, syndicateQuestionnaireHook)
	case boil.BeforeUpsertHook:
		syndicateQuestionnaireBeforeUpsertHooks = append(syndicateQuestionnaireBeforeUpsertHooks, syndicateQuestionnaireHook)
	case boil.AfterUpsertHook:
		syndicateQuestionnaireAfterUpsertHooks = append(syndicateQuestionnaireAfterUpsertHooks, syndicateQuestionnaireHook)
	}
}

// One returns a single syndicateQuestionnaire record from the query.
func (q syndicateQuestionnaireQuery) One(exec boil.Executor) (*SyndicateQuestionnaire, error) {
	o := &SyndicateQuestionnaire{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for syndicate_questionnaires")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SyndicateQuestionnaire records from the query.
func (q syndicateQuestionnaireQuery) All(exec boil.Executor) (SyndicateQuestionnaireSlice, error) {
	var o []*SyndicateQuestionnaire

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to SyndicateQuestionnaire slice")
	}

	if len(syndicateQuestionnaireAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SyndicateQuestionnaire records in the query.
func (q syndicateQuestionnaireQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count syndicate_questionnaires rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q syndicateQuestionnaireQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if syndicate_questionnaires exists")
	}

	return count > 0, nil
}

// Syndicate pointed to by the foreign key.
func (o *SyndicateQuestionnaire) Syndicate(mods ...qm.QueryMod) syndicateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SyndicateID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Syndicates(queryMods...)
	queries.SetFrom(query.Query, "\"syndicates\"")

	return query
}

// QuestionnaireQuestionnaireOptions retrieves all the questionnaire_option's QuestionnaireOptions with an executor via questionnaire_id column.
func (o *SyndicateQuestionnaire) QuestionnaireQuestionnaireOptions(mods ...qm.QueryMod) questionnaireOptionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"questionnaire_options\".\"questionnaire_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"questionnaire_options\".\"deleted_at\""),
	)

	query := QuestionnaireOptions(queryMods...)
	queries.SetFrom(query.Query, "\"questionnaire_options\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"questionnaire_options\".*"})
	}

	return query
}

// LoadSyndicate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateQuestionnaireL) LoadSyndicate(e boil.Executor, singular bool, maybeSyndicateQuestionnaire interface{}, mods queries.Applicator) error {
	var slice []*SyndicateQuestionnaire
	var object *SyndicateQuestionnaire

	if singular {
		object = maybeSyndicateQuestionnaire.(*SyndicateQuestionnaire)
	} else {
		slice = *maybeSyndicateQuestionnaire.(*[]*SyndicateQuestionnaire)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateQuestionnaireR{}
		}
		args = append(args, object.SyndicateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateQuestionnaireR{}
			}

			for _, a := range args {
				if a == obj.SyndicateID {
					continue Outer
				}
			}

			args = append(args, obj.SyndicateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicates`),
		qm.WhereIn(`syndicates.id in ?`, args...),
		qmhelper.WhereIsNull(`syndicates.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Syndicate")
	}

	var resultSlice []*Syndicate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Syndicate")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for syndicates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicates")
	}

	if len(syndicateQuestionnaireAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Syndicate = foreign
		if foreign.R == nil {
			foreign.R = &syndicateR{}
		}
		foreign.R.SyndicateQuestionnaires = append(foreign.R.SyndicateQuestionnaires, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SyndicateID == foreign.ID {
				local.R.Syndicate = foreign
				if foreign.R == nil {
					foreign.R = &syndicateR{}
				}
				foreign.R.SyndicateQuestionnaires = append(foreign.R.SyndicateQuestionnaires, local)
				break
			}
		}
	}

	return nil
}

// LoadQuestionnaireQuestionnaireOptions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (syndicateQuestionnaireL) LoadQuestionnaireQuestionnaireOptions(e boil.Executor, singular bool, maybeSyndicateQuestionnaire interface{}, mods queries.Applicator) error {
	var slice []*SyndicateQuestionnaire
	var object *SyndicateQuestionnaire

	if singular {
		object = maybeSyndicateQuestionnaire.(*SyndicateQuestionnaire)
	} else {
		slice = *maybeSyndicateQuestionnaire.(*[]*SyndicateQuestionnaire)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateQuestionnaireR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateQuestionnaireR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`questionnaire_options`),
		qm.WhereIn(`questionnaire_options.questionnaire_id in ?`, args...),
		qmhelper.WhereIsNull(`questionnaire_options.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load questionnaire_options")
	}

	var resultSlice []*QuestionnaireOption
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice questionnaire_options")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on questionnaire_options")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for questionnaire_options")
	}

	if len(questionnaireOptionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.QuestionnaireQuestionnaireOptions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &questionnaireOptionR{}
			}
			foreign.R.Questionnaire = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.QuestionnaireID {
				local.R.QuestionnaireQuestionnaireOptions = append(local.R.QuestionnaireQuestionnaireOptions, foreign)
				if foreign.R == nil {
					foreign.R = &questionnaireOptionR{}
				}
				foreign.R.Questionnaire = local
				break
			}
		}
	}

	return nil
}

// SetSyndicate of the syndicateQuestionnaire to the related item.
// Sets o.R.Syndicate to related.
// Adds o to related.R.SyndicateQuestionnaires.
func (o *SyndicateQuestionnaire) SetSyndicate(exec boil.Executor, insert bool, related *Syndicate) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicate_questionnaires\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"syndicate_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicateQuestionnairePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SyndicateID = related.ID
	if o.R == nil {
		o.R = &syndicateQuestionnaireR{
			Syndicate: related,
		}
	} else {
		o.R.Syndicate = related
	}

	if related.R == nil {
		related.R = &syndicateR{
			SyndicateQuestionnaires: SyndicateQuestionnaireSlice{o},
		}
	} else {
		related.R.SyndicateQuestionnaires = append(related.R.SyndicateQuestionnaires, o)
	}

	return nil
}

// AddQuestionnaireQuestionnaireOptions adds the given related objects to the existing relationships
// of the syndicate_questionnaire, optionally inserting them as new records.
// Appends related to o.R.QuestionnaireQuestionnaireOptions.
// Sets related.R.Questionnaire appropriately.
func (o *SyndicateQuestionnaire) AddQuestionnaireQuestionnaireOptions(exec boil.Executor, insert bool, related ...*QuestionnaireOption) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.QuestionnaireID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"questionnaire_options\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"questionnaire_id"}),
				strmangle.WhereClause("\"", "\"", 2, questionnaireOptionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.QuestionnaireID = o.ID
		}
	}

	if o.R == nil {
		o.R = &syndicateQuestionnaireR{
			QuestionnaireQuestionnaireOptions: related,
		}
	} else {
		o.R.QuestionnaireQuestionnaireOptions = append(o.R.QuestionnaireQuestionnaireOptions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &questionnaireOptionR{
				Questionnaire: o,
			}
		} else {
			rel.R.Questionnaire = o
		}
	}
	return nil
}

// SyndicateQuestionnaires retrieves all the records using an executor.
func SyndicateQuestionnaires(mods ...qm.QueryMod) syndicateQuestionnaireQuery {
	mods = append(mods, qm.From("\"syndicate_questionnaires\""), qmhelper.WhereIsNull("\"syndicate_questionnaires\".\"deleted_at\""))
	return syndicateQuestionnaireQuery{NewQuery(mods...)}
}

// FindSyndicateQuestionnaire retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSyndicateQuestionnaire(exec boil.Executor, iD string, selectCols ...string) (*SyndicateQuestionnaire, error) {
	syndicateQuestionnaireObj := &SyndicateQuestionnaire{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"syndicate_questionnaires\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, syndicateQuestionnaireObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from syndicate_questionnaires")
	}

	if err = syndicateQuestionnaireObj.doAfterSelectHooks(exec); err != nil {
		return syndicateQuestionnaireObj, err
	}

	return syndicateQuestionnaireObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SyndicateQuestionnaire) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no syndicate_questionnaires provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syndicateQuestionnaireColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	syndicateQuestionnaireInsertCacheMut.RLock()
	cache, cached := syndicateQuestionnaireInsertCache[key]
	syndicateQuestionnaireInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			syndicateQuestionnaireAllColumns,
			syndicateQuestionnaireColumnsWithDefault,
			syndicateQuestionnaireColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(syndicateQuestionnaireType, syndicateQuestionnaireMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(syndicateQuestionnaireType, syndicateQuestionnaireMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"syndicate_questionnaires\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"syndicate_questionnaires\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into syndicate_questionnaires")
	}

	if !cached {
		syndicateQuestionnaireInsertCacheMut.Lock()
		syndicateQuestionnaireInsertCache[key] = cache
		syndicateQuestionnaireInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the SyndicateQuestionnaire.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SyndicateQuestionnaire) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	syndicateQuestionnaireUpdateCacheMut.RLock()
	cache, cached := syndicateQuestionnaireUpdateCache[key]
	syndicateQuestionnaireUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			syndicateQuestionnaireAllColumns,
			syndicateQuestionnairePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update syndicate_questionnaires, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"syndicate_questionnaires\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, syndicateQuestionnairePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(syndicateQuestionnaireType, syndicateQuestionnaireMapping, append(wl, syndicateQuestionnairePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update syndicate_questionnaires row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for syndicate_questionnaires")
	}

	if !cached {
		syndicateQuestionnaireUpdateCacheMut.Lock()
		syndicateQuestionnaireUpdateCache[key] = cache
		syndicateQuestionnaireUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q syndicateQuestionnaireQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for syndicate_questionnaires")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for syndicate_questionnaires")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SyndicateQuestionnaireSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateQuestionnairePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"syndicate_questionnaires\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, syndicateQuestionnairePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in syndicateQuestionnaire slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all syndicateQuestionnaire")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SyndicateQuestionnaire) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no syndicate_questionnaires provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syndicateQuestionnaireColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	syndicateQuestionnaireUpsertCacheMut.RLock()
	cache, cached := syndicateQuestionnaireUpsertCache[key]
	syndicateQuestionnaireUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			syndicateQuestionnaireAllColumns,
			syndicateQuestionnaireColumnsWithDefault,
			syndicateQuestionnaireColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			syndicateQuestionnaireAllColumns,
			syndicateQuestionnairePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert syndicate_questionnaires, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(syndicateQuestionnairePrimaryKeyColumns))
			copy(conflict, syndicateQuestionnairePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"syndicate_questionnaires\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(syndicateQuestionnaireType, syndicateQuestionnaireMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(syndicateQuestionnaireType, syndicateQuestionnaireMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert syndicate_questionnaires")
	}

	if !cached {
		syndicateQuestionnaireUpsertCacheMut.Lock()
		syndicateQuestionnaireUpsertCache[key] = cache
		syndicateQuestionnaireUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single SyndicateQuestionnaire record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SyndicateQuestionnaire) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no SyndicateQuestionnaire provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), syndicateQuestionnairePrimaryKeyMapping)
		sql = "DELETE FROM \"syndicate_questionnaires\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"syndicate_questionnaires\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(syndicateQuestionnaireType, syndicateQuestionnaireMapping, append(wl, syndicateQuestionnairePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from syndicate_questionnaires")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for syndicate_questionnaires")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q syndicateQuestionnaireQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no syndicateQuestionnaireQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from syndicate_questionnaires")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for syndicate_questionnaires")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SyndicateQuestionnaireSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(syndicateQuestionnaireBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateQuestionnairePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"syndicate_questionnaires\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syndicateQuestionnairePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateQuestionnairePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"syndicate_questionnaires\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, syndicateQuestionnairePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from syndicateQuestionnaire slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for syndicate_questionnaires")
	}

	if len(syndicateQuestionnaireAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SyndicateQuestionnaire) Reload(exec boil.Executor) error {
	ret, err := FindSyndicateQuestionnaire(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SyndicateQuestionnaireSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SyndicateQuestionnaireSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateQuestionnairePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"syndicate_questionnaires\".* FROM \"syndicate_questionnaires\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syndicateQuestionnairePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in SyndicateQuestionnaireSlice")
	}

	*o = slice

	return nil
}

// SyndicateQuestionnaireExists checks if the SyndicateQuestionnaire row exists.
func SyndicateQuestionnaireExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"syndicate_questionnaires\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if syndicate_questionnaires exists")
	}

	return exists, nil
}
