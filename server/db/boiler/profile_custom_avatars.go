// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProfileCustomAvatar is an object representing the database table.
type ProfileCustomAvatar struct {
	ID          string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	PlayerID    string      `boiler:"player_id" boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	FaceID      string      `boiler:"face_id" boil:"face_id" json:"face_id" toml:"face_id" yaml:"face_id"`
	HairID      null.String `boiler:"hair_id" boil:"hair_id" json:"hair_id,omitempty" toml:"hair_id" yaml:"hair_id,omitempty"`
	BodyID      null.String `boiler:"body_id" boil:"body_id" json:"body_id,omitempty" toml:"body_id" yaml:"body_id,omitempty"`
	AccessoryID null.String `boiler:"accessory_id" boil:"accessory_id" json:"accessory_id,omitempty" toml:"accessory_id" yaml:"accessory_id,omitempty"`
	EyeWearID   null.String `boiler:"eye_wear_id" boil:"eye_wear_id" json:"eye_wear_id,omitempty" toml:"eye_wear_id" yaml:"eye_wear_id,omitempty"`
	HelmetID    null.String `boiler:"helmet_id" boil:"helmet_id" json:"helmet_id,omitempty" toml:"helmet_id" yaml:"helmet_id,omitempty"`
	UpdatedAt   time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt   null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	CreatedAt   time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *profileCustomAvatarR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L profileCustomAvatarL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProfileCustomAvatarColumns = struct {
	ID          string
	PlayerID    string
	FaceID      string
	HairID      string
	BodyID      string
	AccessoryID string
	EyeWearID   string
	HelmetID    string
	UpdatedAt   string
	DeletedAt   string
	CreatedAt   string
}{
	ID:          "id",
	PlayerID:    "player_id",
	FaceID:      "face_id",
	HairID:      "hair_id",
	BodyID:      "body_id",
	AccessoryID: "accessory_id",
	EyeWearID:   "eye_wear_id",
	HelmetID:    "helmet_id",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
	CreatedAt:   "created_at",
}

var ProfileCustomAvatarTableColumns = struct {
	ID          string
	PlayerID    string
	FaceID      string
	HairID      string
	BodyID      string
	AccessoryID string
	EyeWearID   string
	HelmetID    string
	UpdatedAt   string
	DeletedAt   string
	CreatedAt   string
}{
	ID:          "profile_custom_avatars.id",
	PlayerID:    "profile_custom_avatars.player_id",
	FaceID:      "profile_custom_avatars.face_id",
	HairID:      "profile_custom_avatars.hair_id",
	BodyID:      "profile_custom_avatars.body_id",
	AccessoryID: "profile_custom_avatars.accessory_id",
	EyeWearID:   "profile_custom_avatars.eye_wear_id",
	HelmetID:    "profile_custom_avatars.helmet_id",
	UpdatedAt:   "profile_custom_avatars.updated_at",
	DeletedAt:   "profile_custom_avatars.deleted_at",
	CreatedAt:   "profile_custom_avatars.created_at",
}

// Generated where

var ProfileCustomAvatarWhere = struct {
	ID          whereHelperstring
	PlayerID    whereHelperstring
	FaceID      whereHelperstring
	HairID      whereHelpernull_String
	BodyID      whereHelpernull_String
	AccessoryID whereHelpernull_String
	EyeWearID   whereHelpernull_String
	HelmetID    whereHelpernull_String
	UpdatedAt   whereHelpertime_Time
	DeletedAt   whereHelpernull_Time
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperstring{field: "\"profile_custom_avatars\".\"id\""},
	PlayerID:    whereHelperstring{field: "\"profile_custom_avatars\".\"player_id\""},
	FaceID:      whereHelperstring{field: "\"profile_custom_avatars\".\"face_id\""},
	HairID:      whereHelpernull_String{field: "\"profile_custom_avatars\".\"hair_id\""},
	BodyID:      whereHelpernull_String{field: "\"profile_custom_avatars\".\"body_id\""},
	AccessoryID: whereHelpernull_String{field: "\"profile_custom_avatars\".\"accessory_id\""},
	EyeWearID:   whereHelpernull_String{field: "\"profile_custom_avatars\".\"eye_wear_id\""},
	HelmetID:    whereHelpernull_String{field: "\"profile_custom_avatars\".\"helmet_id\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"profile_custom_avatars\".\"updated_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"profile_custom_avatars\".\"deleted_at\""},
	CreatedAt:   whereHelpertime_Time{field: "\"profile_custom_avatars\".\"created_at\""},
}

// ProfileCustomAvatarRels is where relationship names are stored.
var ProfileCustomAvatarRels = struct {
	Accessory           string
	Body                string
	EyeWear             string
	Face                string
	Hair                string
	Helmet              string
	Player              string
	CustomAvatarPlayers string
}{
	Accessory:           "Accessory",
	Body:                "Body",
	EyeWear:             "EyeWear",
	Face:                "Face",
	Hair:                "Hair",
	Helmet:              "Helmet",
	Player:              "Player",
	CustomAvatarPlayers: "CustomAvatarPlayers",
}

// profileCustomAvatarR is where relationships are stored.
type profileCustomAvatarR struct {
	Accessory           *Layer      `boiler:"Accessory" boil:"Accessory" json:"Accessory" toml:"Accessory" yaml:"Accessory"`
	Body                *Layer      `boiler:"Body" boil:"Body" json:"Body" toml:"Body" yaml:"Body"`
	EyeWear             *Layer      `boiler:"EyeWear" boil:"EyeWear" json:"EyeWear" toml:"EyeWear" yaml:"EyeWear"`
	Face                *Layer      `boiler:"Face" boil:"Face" json:"Face" toml:"Face" yaml:"Face"`
	Hair                *Layer      `boiler:"Hair" boil:"Hair" json:"Hair" toml:"Hair" yaml:"Hair"`
	Helmet              *Layer      `boiler:"Helmet" boil:"Helmet" json:"Helmet" toml:"Helmet" yaml:"Helmet"`
	Player              *Player     `boiler:"Player" boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
	CustomAvatarPlayers PlayerSlice `boiler:"CustomAvatarPlayers" boil:"CustomAvatarPlayers" json:"CustomAvatarPlayers" toml:"CustomAvatarPlayers" yaml:"CustomAvatarPlayers"`
}

// NewStruct creates a new relationship struct
func (*profileCustomAvatarR) NewStruct() *profileCustomAvatarR {
	return &profileCustomAvatarR{}
}

// profileCustomAvatarL is where Load methods for each relationship are stored.
type profileCustomAvatarL struct{}

var (
	profileCustomAvatarAllColumns            = []string{"id", "player_id", "face_id", "hair_id", "body_id", "accessory_id", "eye_wear_id", "helmet_id", "updated_at", "deleted_at", "created_at"}
	profileCustomAvatarColumnsWithoutDefault = []string{"player_id", "face_id"}
	profileCustomAvatarColumnsWithDefault    = []string{"id", "hair_id", "body_id", "accessory_id", "eye_wear_id", "helmet_id", "updated_at", "deleted_at", "created_at"}
	profileCustomAvatarPrimaryKeyColumns     = []string{"id"}
	profileCustomAvatarGeneratedColumns      = []string{}
)

type (
	// ProfileCustomAvatarSlice is an alias for a slice of pointers to ProfileCustomAvatar.
	// This should almost always be used instead of []ProfileCustomAvatar.
	ProfileCustomAvatarSlice []*ProfileCustomAvatar
	// ProfileCustomAvatarHook is the signature for custom ProfileCustomAvatar hook methods
	ProfileCustomAvatarHook func(boil.Executor, *ProfileCustomAvatar) error

	profileCustomAvatarQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	profileCustomAvatarType                 = reflect.TypeOf(&ProfileCustomAvatar{})
	profileCustomAvatarMapping              = queries.MakeStructMapping(profileCustomAvatarType)
	profileCustomAvatarPrimaryKeyMapping, _ = queries.BindMapping(profileCustomAvatarType, profileCustomAvatarMapping, profileCustomAvatarPrimaryKeyColumns)
	profileCustomAvatarInsertCacheMut       sync.RWMutex
	profileCustomAvatarInsertCache          = make(map[string]insertCache)
	profileCustomAvatarUpdateCacheMut       sync.RWMutex
	profileCustomAvatarUpdateCache          = make(map[string]updateCache)
	profileCustomAvatarUpsertCacheMut       sync.RWMutex
	profileCustomAvatarUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var profileCustomAvatarAfterSelectHooks []ProfileCustomAvatarHook

var profileCustomAvatarBeforeInsertHooks []ProfileCustomAvatarHook
var profileCustomAvatarAfterInsertHooks []ProfileCustomAvatarHook

var profileCustomAvatarBeforeUpdateHooks []ProfileCustomAvatarHook
var profileCustomAvatarAfterUpdateHooks []ProfileCustomAvatarHook

var profileCustomAvatarBeforeDeleteHooks []ProfileCustomAvatarHook
var profileCustomAvatarAfterDeleteHooks []ProfileCustomAvatarHook

var profileCustomAvatarBeforeUpsertHooks []ProfileCustomAvatarHook
var profileCustomAvatarAfterUpsertHooks []ProfileCustomAvatarHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProfileCustomAvatar) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range profileCustomAvatarAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProfileCustomAvatar) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range profileCustomAvatarBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProfileCustomAvatar) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range profileCustomAvatarAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProfileCustomAvatar) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range profileCustomAvatarBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProfileCustomAvatar) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range profileCustomAvatarAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProfileCustomAvatar) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range profileCustomAvatarBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProfileCustomAvatar) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range profileCustomAvatarAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProfileCustomAvatar) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range profileCustomAvatarBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProfileCustomAvatar) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range profileCustomAvatarAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProfileCustomAvatarHook registers your hook function for all future operations.
func AddProfileCustomAvatarHook(hookPoint boil.HookPoint, profileCustomAvatarHook ProfileCustomAvatarHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		profileCustomAvatarAfterSelectHooks = append(profileCustomAvatarAfterSelectHooks, profileCustomAvatarHook)
	case boil.BeforeInsertHook:
		profileCustomAvatarBeforeInsertHooks = append(profileCustomAvatarBeforeInsertHooks, profileCustomAvatarHook)
	case boil.AfterInsertHook:
		profileCustomAvatarAfterInsertHooks = append(profileCustomAvatarAfterInsertHooks, profileCustomAvatarHook)
	case boil.BeforeUpdateHook:
		profileCustomAvatarBeforeUpdateHooks = append(profileCustomAvatarBeforeUpdateHooks, profileCustomAvatarHook)
	case boil.AfterUpdateHook:
		profileCustomAvatarAfterUpdateHooks = append(profileCustomAvatarAfterUpdateHooks, profileCustomAvatarHook)
	case boil.BeforeDeleteHook:
		profileCustomAvatarBeforeDeleteHooks = append(profileCustomAvatarBeforeDeleteHooks, profileCustomAvatarHook)
	case boil.AfterDeleteHook:
		profileCustomAvatarAfterDeleteHooks = append(profileCustomAvatarAfterDeleteHooks, profileCustomAvatarHook)
	case boil.BeforeUpsertHook:
		profileCustomAvatarBeforeUpsertHooks = append(profileCustomAvatarBeforeUpsertHooks, profileCustomAvatarHook)
	case boil.AfterUpsertHook:
		profileCustomAvatarAfterUpsertHooks = append(profileCustomAvatarAfterUpsertHooks, profileCustomAvatarHook)
	}
}

// One returns a single profileCustomAvatar record from the query.
func (q profileCustomAvatarQuery) One(exec boil.Executor) (*ProfileCustomAvatar, error) {
	o := &ProfileCustomAvatar{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for profile_custom_avatars")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProfileCustomAvatar records from the query.
func (q profileCustomAvatarQuery) All(exec boil.Executor) (ProfileCustomAvatarSlice, error) {
	var o []*ProfileCustomAvatar

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to ProfileCustomAvatar slice")
	}

	if len(profileCustomAvatarAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProfileCustomAvatar records in the query.
func (q profileCustomAvatarQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count profile_custom_avatars rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q profileCustomAvatarQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if profile_custom_avatars exists")
	}

	return count > 0, nil
}

// Accessory pointed to by the foreign key.
func (o *ProfileCustomAvatar) Accessory(mods ...qm.QueryMod) layerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AccessoryID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Layers(queryMods...)
	queries.SetFrom(query.Query, "\"layers\"")

	return query
}

// Body pointed to by the foreign key.
func (o *ProfileCustomAvatar) Body(mods ...qm.QueryMod) layerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BodyID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Layers(queryMods...)
	queries.SetFrom(query.Query, "\"layers\"")

	return query
}

// EyeWear pointed to by the foreign key.
func (o *ProfileCustomAvatar) EyeWear(mods ...qm.QueryMod) layerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EyeWearID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Layers(queryMods...)
	queries.SetFrom(query.Query, "\"layers\"")

	return query
}

// Face pointed to by the foreign key.
func (o *ProfileCustomAvatar) Face(mods ...qm.QueryMod) layerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FaceID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Layers(queryMods...)
	queries.SetFrom(query.Query, "\"layers\"")

	return query
}

// Hair pointed to by the foreign key.
func (o *ProfileCustomAvatar) Hair(mods ...qm.QueryMod) layerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.HairID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Layers(queryMods...)
	queries.SetFrom(query.Query, "\"layers\"")

	return query
}

// Helmet pointed to by the foreign key.
func (o *ProfileCustomAvatar) Helmet(mods ...qm.QueryMod) layerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.HelmetID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Layers(queryMods...)
	queries.SetFrom(query.Query, "\"layers\"")

	return query
}

// Player pointed to by the foreign key.
func (o *ProfileCustomAvatar) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// CustomAvatarPlayers retrieves all the player's Players with an executor via custom_avatar_id column.
func (o *ProfileCustomAvatar) CustomAvatarPlayers(mods ...qm.QueryMod) playerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"players\".\"custom_avatar_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"players\".\"deleted_at\""),
	)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"players\".*"})
	}

	return query
}

// LoadAccessory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (profileCustomAvatarL) LoadAccessory(e boil.Executor, singular bool, maybeProfileCustomAvatar interface{}, mods queries.Applicator) error {
	var slice []*ProfileCustomAvatar
	var object *ProfileCustomAvatar

	if singular {
		object = maybeProfileCustomAvatar.(*ProfileCustomAvatar)
	} else {
		slice = *maybeProfileCustomAvatar.(*[]*ProfileCustomAvatar)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &profileCustomAvatarR{}
		}
		if !queries.IsNil(object.AccessoryID) {
			args = append(args, object.AccessoryID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileCustomAvatarR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AccessoryID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AccessoryID) {
				args = append(args, obj.AccessoryID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`layers`),
		qm.WhereIn(`layers.id in ?`, args...),
		qmhelper.WhereIsNull(`layers.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Layer")
	}

	var resultSlice []*Layer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Layer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for layers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for layers")
	}

	if len(profileCustomAvatarAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Accessory = foreign
		if foreign.R == nil {
			foreign.R = &layerR{}
		}
		foreign.R.AccessoryProfileCustomAvatars = append(foreign.R.AccessoryProfileCustomAvatars, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AccessoryID, foreign.ID) {
				local.R.Accessory = foreign
				if foreign.R == nil {
					foreign.R = &layerR{}
				}
				foreign.R.AccessoryProfileCustomAvatars = append(foreign.R.AccessoryProfileCustomAvatars, local)
				break
			}
		}
	}

	return nil
}

// LoadBody allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (profileCustomAvatarL) LoadBody(e boil.Executor, singular bool, maybeProfileCustomAvatar interface{}, mods queries.Applicator) error {
	var slice []*ProfileCustomAvatar
	var object *ProfileCustomAvatar

	if singular {
		object = maybeProfileCustomAvatar.(*ProfileCustomAvatar)
	} else {
		slice = *maybeProfileCustomAvatar.(*[]*ProfileCustomAvatar)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &profileCustomAvatarR{}
		}
		if !queries.IsNil(object.BodyID) {
			args = append(args, object.BodyID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileCustomAvatarR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BodyID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BodyID) {
				args = append(args, obj.BodyID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`layers`),
		qm.WhereIn(`layers.id in ?`, args...),
		qmhelper.WhereIsNull(`layers.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Layer")
	}

	var resultSlice []*Layer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Layer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for layers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for layers")
	}

	if len(profileCustomAvatarAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Body = foreign
		if foreign.R == nil {
			foreign.R = &layerR{}
		}
		foreign.R.BodyProfileCustomAvatars = append(foreign.R.BodyProfileCustomAvatars, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BodyID, foreign.ID) {
				local.R.Body = foreign
				if foreign.R == nil {
					foreign.R = &layerR{}
				}
				foreign.R.BodyProfileCustomAvatars = append(foreign.R.BodyProfileCustomAvatars, local)
				break
			}
		}
	}

	return nil
}

// LoadEyeWear allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (profileCustomAvatarL) LoadEyeWear(e boil.Executor, singular bool, maybeProfileCustomAvatar interface{}, mods queries.Applicator) error {
	var slice []*ProfileCustomAvatar
	var object *ProfileCustomAvatar

	if singular {
		object = maybeProfileCustomAvatar.(*ProfileCustomAvatar)
	} else {
		slice = *maybeProfileCustomAvatar.(*[]*ProfileCustomAvatar)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &profileCustomAvatarR{}
		}
		if !queries.IsNil(object.EyeWearID) {
			args = append(args, object.EyeWearID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileCustomAvatarR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.EyeWearID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.EyeWearID) {
				args = append(args, obj.EyeWearID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`layers`),
		qm.WhereIn(`layers.id in ?`, args...),
		qmhelper.WhereIsNull(`layers.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Layer")
	}

	var resultSlice []*Layer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Layer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for layers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for layers")
	}

	if len(profileCustomAvatarAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EyeWear = foreign
		if foreign.R == nil {
			foreign.R = &layerR{}
		}
		foreign.R.EyeWearProfileCustomAvatars = append(foreign.R.EyeWearProfileCustomAvatars, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.EyeWearID, foreign.ID) {
				local.R.EyeWear = foreign
				if foreign.R == nil {
					foreign.R = &layerR{}
				}
				foreign.R.EyeWearProfileCustomAvatars = append(foreign.R.EyeWearProfileCustomAvatars, local)
				break
			}
		}
	}

	return nil
}

// LoadFace allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (profileCustomAvatarL) LoadFace(e boil.Executor, singular bool, maybeProfileCustomAvatar interface{}, mods queries.Applicator) error {
	var slice []*ProfileCustomAvatar
	var object *ProfileCustomAvatar

	if singular {
		object = maybeProfileCustomAvatar.(*ProfileCustomAvatar)
	} else {
		slice = *maybeProfileCustomAvatar.(*[]*ProfileCustomAvatar)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &profileCustomAvatarR{}
		}
		args = append(args, object.FaceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileCustomAvatarR{}
			}

			for _, a := range args {
				if a == obj.FaceID {
					continue Outer
				}
			}

			args = append(args, obj.FaceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`layers`),
		qm.WhereIn(`layers.id in ?`, args...),
		qmhelper.WhereIsNull(`layers.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Layer")
	}

	var resultSlice []*Layer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Layer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for layers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for layers")
	}

	if len(profileCustomAvatarAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Face = foreign
		if foreign.R == nil {
			foreign.R = &layerR{}
		}
		foreign.R.FaceProfileCustomAvatars = append(foreign.R.FaceProfileCustomAvatars, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FaceID == foreign.ID {
				local.R.Face = foreign
				if foreign.R == nil {
					foreign.R = &layerR{}
				}
				foreign.R.FaceProfileCustomAvatars = append(foreign.R.FaceProfileCustomAvatars, local)
				break
			}
		}
	}

	return nil
}

// LoadHair allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (profileCustomAvatarL) LoadHair(e boil.Executor, singular bool, maybeProfileCustomAvatar interface{}, mods queries.Applicator) error {
	var slice []*ProfileCustomAvatar
	var object *ProfileCustomAvatar

	if singular {
		object = maybeProfileCustomAvatar.(*ProfileCustomAvatar)
	} else {
		slice = *maybeProfileCustomAvatar.(*[]*ProfileCustomAvatar)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &profileCustomAvatarR{}
		}
		if !queries.IsNil(object.HairID) {
			args = append(args, object.HairID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileCustomAvatarR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.HairID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.HairID) {
				args = append(args, obj.HairID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`layers`),
		qm.WhereIn(`layers.id in ?`, args...),
		qmhelper.WhereIsNull(`layers.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Layer")
	}

	var resultSlice []*Layer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Layer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for layers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for layers")
	}

	if len(profileCustomAvatarAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Hair = foreign
		if foreign.R == nil {
			foreign.R = &layerR{}
		}
		foreign.R.HairProfileCustomAvatars = append(foreign.R.HairProfileCustomAvatars, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.HairID, foreign.ID) {
				local.R.Hair = foreign
				if foreign.R == nil {
					foreign.R = &layerR{}
				}
				foreign.R.HairProfileCustomAvatars = append(foreign.R.HairProfileCustomAvatars, local)
				break
			}
		}
	}

	return nil
}

// LoadHelmet allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (profileCustomAvatarL) LoadHelmet(e boil.Executor, singular bool, maybeProfileCustomAvatar interface{}, mods queries.Applicator) error {
	var slice []*ProfileCustomAvatar
	var object *ProfileCustomAvatar

	if singular {
		object = maybeProfileCustomAvatar.(*ProfileCustomAvatar)
	} else {
		slice = *maybeProfileCustomAvatar.(*[]*ProfileCustomAvatar)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &profileCustomAvatarR{}
		}
		if !queries.IsNil(object.HelmetID) {
			args = append(args, object.HelmetID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileCustomAvatarR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.HelmetID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.HelmetID) {
				args = append(args, obj.HelmetID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`layers`),
		qm.WhereIn(`layers.id in ?`, args...),
		qmhelper.WhereIsNull(`layers.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Layer")
	}

	var resultSlice []*Layer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Layer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for layers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for layers")
	}

	if len(profileCustomAvatarAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Helmet = foreign
		if foreign.R == nil {
			foreign.R = &layerR{}
		}
		foreign.R.HelmetProfileCustomAvatars = append(foreign.R.HelmetProfileCustomAvatars, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.HelmetID, foreign.ID) {
				local.R.Helmet = foreign
				if foreign.R == nil {
					foreign.R = &layerR{}
				}
				foreign.R.HelmetProfileCustomAvatars = append(foreign.R.HelmetProfileCustomAvatars, local)
				break
			}
		}
	}

	return nil
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (profileCustomAvatarL) LoadPlayer(e boil.Executor, singular bool, maybeProfileCustomAvatar interface{}, mods queries.Applicator) error {
	var slice []*ProfileCustomAvatar
	var object *ProfileCustomAvatar

	if singular {
		object = maybeProfileCustomAvatar.(*ProfileCustomAvatar)
	} else {
		slice = *maybeProfileCustomAvatar.(*[]*ProfileCustomAvatar)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &profileCustomAvatarR{}
		}
		args = append(args, object.PlayerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileCustomAvatarR{}
			}

			for _, a := range args {
				if a == obj.PlayerID {
					continue Outer
				}
			}

			args = append(args, obj.PlayerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(profileCustomAvatarAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.ProfileCustomAvatars = append(foreign.R.ProfileCustomAvatars, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.ID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.ProfileCustomAvatars = append(foreign.R.ProfileCustomAvatars, local)
				break
			}
		}
	}

	return nil
}

// LoadCustomAvatarPlayers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (profileCustomAvatarL) LoadCustomAvatarPlayers(e boil.Executor, singular bool, maybeProfileCustomAvatar interface{}, mods queries.Applicator) error {
	var slice []*ProfileCustomAvatar
	var object *ProfileCustomAvatar

	if singular {
		object = maybeProfileCustomAvatar.(*ProfileCustomAvatar)
	} else {
		slice = *maybeProfileCustomAvatar.(*[]*ProfileCustomAvatar)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &profileCustomAvatarR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &profileCustomAvatarR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.custom_avatar_id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load players")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice players")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(playerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CustomAvatarPlayers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playerR{}
			}
			foreign.R.CustomAvatar = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CustomAvatarID) {
				local.R.CustomAvatarPlayers = append(local.R.CustomAvatarPlayers, foreign)
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.CustomAvatar = local
				break
			}
		}
	}

	return nil
}

// SetAccessory of the profileCustomAvatar to the related item.
// Sets o.R.Accessory to related.
// Adds o to related.R.AccessoryProfileCustomAvatars.
func (o *ProfileCustomAvatar) SetAccessory(exec boil.Executor, insert bool, related *Layer) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"profile_custom_avatars\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"accessory_id"}),
		strmangle.WhereClause("\"", "\"", 2, profileCustomAvatarPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AccessoryID, related.ID)
	if o.R == nil {
		o.R = &profileCustomAvatarR{
			Accessory: related,
		}
	} else {
		o.R.Accessory = related
	}

	if related.R == nil {
		related.R = &layerR{
			AccessoryProfileCustomAvatars: ProfileCustomAvatarSlice{o},
		}
	} else {
		related.R.AccessoryProfileCustomAvatars = append(related.R.AccessoryProfileCustomAvatars, o)
	}

	return nil
}

// RemoveAccessory relationship.
// Sets o.R.Accessory to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *ProfileCustomAvatar) RemoveAccessory(exec boil.Executor, related *Layer) error {
	var err error

	queries.SetScanner(&o.AccessoryID, nil)
	if _, err = o.Update(exec, boil.Whitelist("accessory_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Accessory = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AccessoryProfileCustomAvatars {
		if queries.Equal(o.AccessoryID, ri.AccessoryID) {
			continue
		}

		ln := len(related.R.AccessoryProfileCustomAvatars)
		if ln > 1 && i < ln-1 {
			related.R.AccessoryProfileCustomAvatars[i] = related.R.AccessoryProfileCustomAvatars[ln-1]
		}
		related.R.AccessoryProfileCustomAvatars = related.R.AccessoryProfileCustomAvatars[:ln-1]
		break
	}
	return nil
}

// SetBody of the profileCustomAvatar to the related item.
// Sets o.R.Body to related.
// Adds o to related.R.BodyProfileCustomAvatars.
func (o *ProfileCustomAvatar) SetBody(exec boil.Executor, insert bool, related *Layer) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"profile_custom_avatars\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"body_id"}),
		strmangle.WhereClause("\"", "\"", 2, profileCustomAvatarPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BodyID, related.ID)
	if o.R == nil {
		o.R = &profileCustomAvatarR{
			Body: related,
		}
	} else {
		o.R.Body = related
	}

	if related.R == nil {
		related.R = &layerR{
			BodyProfileCustomAvatars: ProfileCustomAvatarSlice{o},
		}
	} else {
		related.R.BodyProfileCustomAvatars = append(related.R.BodyProfileCustomAvatars, o)
	}

	return nil
}

// RemoveBody relationship.
// Sets o.R.Body to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *ProfileCustomAvatar) RemoveBody(exec boil.Executor, related *Layer) error {
	var err error

	queries.SetScanner(&o.BodyID, nil)
	if _, err = o.Update(exec, boil.Whitelist("body_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Body = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BodyProfileCustomAvatars {
		if queries.Equal(o.BodyID, ri.BodyID) {
			continue
		}

		ln := len(related.R.BodyProfileCustomAvatars)
		if ln > 1 && i < ln-1 {
			related.R.BodyProfileCustomAvatars[i] = related.R.BodyProfileCustomAvatars[ln-1]
		}
		related.R.BodyProfileCustomAvatars = related.R.BodyProfileCustomAvatars[:ln-1]
		break
	}
	return nil
}

// SetEyeWear of the profileCustomAvatar to the related item.
// Sets o.R.EyeWear to related.
// Adds o to related.R.EyeWearProfileCustomAvatars.
func (o *ProfileCustomAvatar) SetEyeWear(exec boil.Executor, insert bool, related *Layer) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"profile_custom_avatars\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"eye_wear_id"}),
		strmangle.WhereClause("\"", "\"", 2, profileCustomAvatarPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.EyeWearID, related.ID)
	if o.R == nil {
		o.R = &profileCustomAvatarR{
			EyeWear: related,
		}
	} else {
		o.R.EyeWear = related
	}

	if related.R == nil {
		related.R = &layerR{
			EyeWearProfileCustomAvatars: ProfileCustomAvatarSlice{o},
		}
	} else {
		related.R.EyeWearProfileCustomAvatars = append(related.R.EyeWearProfileCustomAvatars, o)
	}

	return nil
}

// RemoveEyeWear relationship.
// Sets o.R.EyeWear to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *ProfileCustomAvatar) RemoveEyeWear(exec boil.Executor, related *Layer) error {
	var err error

	queries.SetScanner(&o.EyeWearID, nil)
	if _, err = o.Update(exec, boil.Whitelist("eye_wear_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.EyeWear = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.EyeWearProfileCustomAvatars {
		if queries.Equal(o.EyeWearID, ri.EyeWearID) {
			continue
		}

		ln := len(related.R.EyeWearProfileCustomAvatars)
		if ln > 1 && i < ln-1 {
			related.R.EyeWearProfileCustomAvatars[i] = related.R.EyeWearProfileCustomAvatars[ln-1]
		}
		related.R.EyeWearProfileCustomAvatars = related.R.EyeWearProfileCustomAvatars[:ln-1]
		break
	}
	return nil
}

// SetFace of the profileCustomAvatar to the related item.
// Sets o.R.Face to related.
// Adds o to related.R.FaceProfileCustomAvatars.
func (o *ProfileCustomAvatar) SetFace(exec boil.Executor, insert bool, related *Layer) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"profile_custom_avatars\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"face_id"}),
		strmangle.WhereClause("\"", "\"", 2, profileCustomAvatarPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FaceID = related.ID
	if o.R == nil {
		o.R = &profileCustomAvatarR{
			Face: related,
		}
	} else {
		o.R.Face = related
	}

	if related.R == nil {
		related.R = &layerR{
			FaceProfileCustomAvatars: ProfileCustomAvatarSlice{o},
		}
	} else {
		related.R.FaceProfileCustomAvatars = append(related.R.FaceProfileCustomAvatars, o)
	}

	return nil
}

// SetHair of the profileCustomAvatar to the related item.
// Sets o.R.Hair to related.
// Adds o to related.R.HairProfileCustomAvatars.
func (o *ProfileCustomAvatar) SetHair(exec boil.Executor, insert bool, related *Layer) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"profile_custom_avatars\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"hair_id"}),
		strmangle.WhereClause("\"", "\"", 2, profileCustomAvatarPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.HairID, related.ID)
	if o.R == nil {
		o.R = &profileCustomAvatarR{
			Hair: related,
		}
	} else {
		o.R.Hair = related
	}

	if related.R == nil {
		related.R = &layerR{
			HairProfileCustomAvatars: ProfileCustomAvatarSlice{o},
		}
	} else {
		related.R.HairProfileCustomAvatars = append(related.R.HairProfileCustomAvatars, o)
	}

	return nil
}

// RemoveHair relationship.
// Sets o.R.Hair to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *ProfileCustomAvatar) RemoveHair(exec boil.Executor, related *Layer) error {
	var err error

	queries.SetScanner(&o.HairID, nil)
	if _, err = o.Update(exec, boil.Whitelist("hair_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Hair = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.HairProfileCustomAvatars {
		if queries.Equal(o.HairID, ri.HairID) {
			continue
		}

		ln := len(related.R.HairProfileCustomAvatars)
		if ln > 1 && i < ln-1 {
			related.R.HairProfileCustomAvatars[i] = related.R.HairProfileCustomAvatars[ln-1]
		}
		related.R.HairProfileCustomAvatars = related.R.HairProfileCustomAvatars[:ln-1]
		break
	}
	return nil
}

// SetHelmet of the profileCustomAvatar to the related item.
// Sets o.R.Helmet to related.
// Adds o to related.R.HelmetProfileCustomAvatars.
func (o *ProfileCustomAvatar) SetHelmet(exec boil.Executor, insert bool, related *Layer) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"profile_custom_avatars\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"helmet_id"}),
		strmangle.WhereClause("\"", "\"", 2, profileCustomAvatarPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.HelmetID, related.ID)
	if o.R == nil {
		o.R = &profileCustomAvatarR{
			Helmet: related,
		}
	} else {
		o.R.Helmet = related
	}

	if related.R == nil {
		related.R = &layerR{
			HelmetProfileCustomAvatars: ProfileCustomAvatarSlice{o},
		}
	} else {
		related.R.HelmetProfileCustomAvatars = append(related.R.HelmetProfileCustomAvatars, o)
	}

	return nil
}

// RemoveHelmet relationship.
// Sets o.R.Helmet to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *ProfileCustomAvatar) RemoveHelmet(exec boil.Executor, related *Layer) error {
	var err error

	queries.SetScanner(&o.HelmetID, nil)
	if _, err = o.Update(exec, boil.Whitelist("helmet_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Helmet = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.HelmetProfileCustomAvatars {
		if queries.Equal(o.HelmetID, ri.HelmetID) {
			continue
		}

		ln := len(related.R.HelmetProfileCustomAvatars)
		if ln > 1 && i < ln-1 {
			related.R.HelmetProfileCustomAvatars[i] = related.R.HelmetProfileCustomAvatars[ln-1]
		}
		related.R.HelmetProfileCustomAvatars = related.R.HelmetProfileCustomAvatars[:ln-1]
		break
	}
	return nil
}

// SetPlayer of the profileCustomAvatar to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.ProfileCustomAvatars.
func (o *ProfileCustomAvatar) SetPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"profile_custom_avatars\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, profileCustomAvatarPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.ID
	if o.R == nil {
		o.R = &profileCustomAvatarR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			ProfileCustomAvatars: ProfileCustomAvatarSlice{o},
		}
	} else {
		related.R.ProfileCustomAvatars = append(related.R.ProfileCustomAvatars, o)
	}

	return nil
}

// AddCustomAvatarPlayers adds the given related objects to the existing relationships
// of the profile_custom_avatar, optionally inserting them as new records.
// Appends related to o.R.CustomAvatarPlayers.
// Sets related.R.CustomAvatar appropriately.
func (o *ProfileCustomAvatar) AddCustomAvatarPlayers(exec boil.Executor, insert bool, related ...*Player) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CustomAvatarID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"players\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"custom_avatar_id"}),
				strmangle.WhereClause("\"", "\"", 2, playerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CustomAvatarID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &profileCustomAvatarR{
			CustomAvatarPlayers: related,
		}
	} else {
		o.R.CustomAvatarPlayers = append(o.R.CustomAvatarPlayers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playerR{
				CustomAvatar: o,
			}
		} else {
			rel.R.CustomAvatar = o
		}
	}
	return nil
}

// SetCustomAvatarPlayers removes all previously related items of the
// profile_custom_avatar replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CustomAvatar's CustomAvatarPlayers accordingly.
// Replaces o.R.CustomAvatarPlayers with related.
// Sets related.R.CustomAvatar's CustomAvatarPlayers accordingly.
func (o *ProfileCustomAvatar) SetCustomAvatarPlayers(exec boil.Executor, insert bool, related ...*Player) error {
	query := "update \"players\" set \"custom_avatar_id\" = null where \"custom_avatar_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CustomAvatarPlayers {
			queries.SetScanner(&rel.CustomAvatarID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CustomAvatar = nil
		}

		o.R.CustomAvatarPlayers = nil
	}
	return o.AddCustomAvatarPlayers(exec, insert, related...)
}

// RemoveCustomAvatarPlayers relationships from objects passed in.
// Removes related items from R.CustomAvatarPlayers (uses pointer comparison, removal does not keep order)
// Sets related.R.CustomAvatar.
func (o *ProfileCustomAvatar) RemoveCustomAvatarPlayers(exec boil.Executor, related ...*Player) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CustomAvatarID, nil)
		if rel.R != nil {
			rel.R.CustomAvatar = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("custom_avatar_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CustomAvatarPlayers {
			if rel != ri {
				continue
			}

			ln := len(o.R.CustomAvatarPlayers)
			if ln > 1 && i < ln-1 {
				o.R.CustomAvatarPlayers[i] = o.R.CustomAvatarPlayers[ln-1]
			}
			o.R.CustomAvatarPlayers = o.R.CustomAvatarPlayers[:ln-1]
			break
		}
	}

	return nil
}

// ProfileCustomAvatars retrieves all the records using an executor.
func ProfileCustomAvatars(mods ...qm.QueryMod) profileCustomAvatarQuery {
	mods = append(mods, qm.From("\"profile_custom_avatars\""), qmhelper.WhereIsNull("\"profile_custom_avatars\".\"deleted_at\""))
	return profileCustomAvatarQuery{NewQuery(mods...)}
}

// FindProfileCustomAvatar retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProfileCustomAvatar(exec boil.Executor, iD string, selectCols ...string) (*ProfileCustomAvatar, error) {
	profileCustomAvatarObj := &ProfileCustomAvatar{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"profile_custom_avatars\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, profileCustomAvatarObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from profile_custom_avatars")
	}

	if err = profileCustomAvatarObj.doAfterSelectHooks(exec); err != nil {
		return profileCustomAvatarObj, err
	}

	return profileCustomAvatarObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProfileCustomAvatar) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no profile_custom_avatars provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(profileCustomAvatarColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	profileCustomAvatarInsertCacheMut.RLock()
	cache, cached := profileCustomAvatarInsertCache[key]
	profileCustomAvatarInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			profileCustomAvatarAllColumns,
			profileCustomAvatarColumnsWithDefault,
			profileCustomAvatarColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(profileCustomAvatarType, profileCustomAvatarMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(profileCustomAvatarType, profileCustomAvatarMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"profile_custom_avatars\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"profile_custom_avatars\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into profile_custom_avatars")
	}

	if !cached {
		profileCustomAvatarInsertCacheMut.Lock()
		profileCustomAvatarInsertCache[key] = cache
		profileCustomAvatarInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the ProfileCustomAvatar.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProfileCustomAvatar) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	profileCustomAvatarUpdateCacheMut.RLock()
	cache, cached := profileCustomAvatarUpdateCache[key]
	profileCustomAvatarUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			profileCustomAvatarAllColumns,
			profileCustomAvatarPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update profile_custom_avatars, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"profile_custom_avatars\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, profileCustomAvatarPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(profileCustomAvatarType, profileCustomAvatarMapping, append(wl, profileCustomAvatarPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update profile_custom_avatars row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for profile_custom_avatars")
	}

	if !cached {
		profileCustomAvatarUpdateCacheMut.Lock()
		profileCustomAvatarUpdateCache[key] = cache
		profileCustomAvatarUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q profileCustomAvatarQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for profile_custom_avatars")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for profile_custom_avatars")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProfileCustomAvatarSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), profileCustomAvatarPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"profile_custom_avatars\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, profileCustomAvatarPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in profileCustomAvatar slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all profileCustomAvatar")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProfileCustomAvatar) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no profile_custom_avatars provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(profileCustomAvatarColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	profileCustomAvatarUpsertCacheMut.RLock()
	cache, cached := profileCustomAvatarUpsertCache[key]
	profileCustomAvatarUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			profileCustomAvatarAllColumns,
			profileCustomAvatarColumnsWithDefault,
			profileCustomAvatarColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			profileCustomAvatarAllColumns,
			profileCustomAvatarPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert profile_custom_avatars, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(profileCustomAvatarPrimaryKeyColumns))
			copy(conflict, profileCustomAvatarPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"profile_custom_avatars\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(profileCustomAvatarType, profileCustomAvatarMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(profileCustomAvatarType, profileCustomAvatarMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert profile_custom_avatars")
	}

	if !cached {
		profileCustomAvatarUpsertCacheMut.Lock()
		profileCustomAvatarUpsertCache[key] = cache
		profileCustomAvatarUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single ProfileCustomAvatar record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProfileCustomAvatar) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no ProfileCustomAvatar provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), profileCustomAvatarPrimaryKeyMapping)
		sql = "DELETE FROM \"profile_custom_avatars\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"profile_custom_avatars\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(profileCustomAvatarType, profileCustomAvatarMapping, append(wl, profileCustomAvatarPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from profile_custom_avatars")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for profile_custom_avatars")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q profileCustomAvatarQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no profileCustomAvatarQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from profile_custom_avatars")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for profile_custom_avatars")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProfileCustomAvatarSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(profileCustomAvatarBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), profileCustomAvatarPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"profile_custom_avatars\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, profileCustomAvatarPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), profileCustomAvatarPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"profile_custom_avatars\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, profileCustomAvatarPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from profileCustomAvatar slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for profile_custom_avatars")
	}

	if len(profileCustomAvatarAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProfileCustomAvatar) Reload(exec boil.Executor) error {
	ret, err := FindProfileCustomAvatar(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProfileCustomAvatarSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProfileCustomAvatarSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), profileCustomAvatarPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"profile_custom_avatars\".* FROM \"profile_custom_avatars\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, profileCustomAvatarPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in ProfileCustomAvatarSlice")
	}

	*o = slice

	return nil
}

// ProfileCustomAvatarExists checks if the ProfileCustomAvatar row exists.
func ProfileCustomAvatarExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"profile_custom_avatars\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if profile_custom_avatars exists")
	}

	return exists, nil
}
