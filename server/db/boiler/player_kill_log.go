// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PlayerKillLog is an object representing the database table.
type PlayerKillLog struct {
	ID                string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BattleID          string      `boiler:"battle_id" boil:"battle_id" json:"battle_id" toml:"battle_id" yaml:"battle_id"`
	PlayerID          string      `boiler:"player_id" boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	FactionID         string      `boiler:"faction_id" boil:"faction_id" json:"faction_id" toml:"faction_id" yaml:"faction_id"`
	IsTeamKill        bool        `boiler:"is_team_kill" boil:"is_team_kill" json:"is_team_kill" toml:"is_team_kill" yaml:"is_team_kill"`
	CreatedAt         time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	AbilityOfferingID null.String `boiler:"ability_offering_id" boil:"ability_offering_id" json:"ability_offering_id,omitempty" toml:"ability_offering_id" yaml:"ability_offering_id,omitempty"`
	GameAbilityID     null.String `boiler:"game_ability_id" boil:"game_ability_id" json:"game_ability_id,omitempty" toml:"game_ability_id" yaml:"game_ability_id,omitempty"`
	IsVerified        bool        `boiler:"is_verified" boil:"is_verified" json:"is_verified" toml:"is_verified" yaml:"is_verified"`
	RelatedPlayBanID  null.String `boiler:"related_play_ban_id" boil:"related_play_ban_id" json:"related_play_ban_id,omitempty" toml:"related_play_ban_id" yaml:"related_play_ban_id,omitempty"`

	R *playerKillLogR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L playerKillLogL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlayerKillLogColumns = struct {
	ID                string
	BattleID          string
	PlayerID          string
	FactionID         string
	IsTeamKill        string
	CreatedAt         string
	AbilityOfferingID string
	GameAbilityID     string
	IsVerified        string
	RelatedPlayBanID  string
}{
	ID:                "id",
	BattleID:          "battle_id",
	PlayerID:          "player_id",
	FactionID:         "faction_id",
	IsTeamKill:        "is_team_kill",
	CreatedAt:         "created_at",
	AbilityOfferingID: "ability_offering_id",
	GameAbilityID:     "game_ability_id",
	IsVerified:        "is_verified",
	RelatedPlayBanID:  "related_play_ban_id",
}

var PlayerKillLogTableColumns = struct {
	ID                string
	BattleID          string
	PlayerID          string
	FactionID         string
	IsTeamKill        string
	CreatedAt         string
	AbilityOfferingID string
	GameAbilityID     string
	IsVerified        string
	RelatedPlayBanID  string
}{
	ID:                "player_kill_log.id",
	BattleID:          "player_kill_log.battle_id",
	PlayerID:          "player_kill_log.player_id",
	FactionID:         "player_kill_log.faction_id",
	IsTeamKill:        "player_kill_log.is_team_kill",
	CreatedAt:         "player_kill_log.created_at",
	AbilityOfferingID: "player_kill_log.ability_offering_id",
	GameAbilityID:     "player_kill_log.game_ability_id",
	IsVerified:        "player_kill_log.is_verified",
	RelatedPlayBanID:  "player_kill_log.related_play_ban_id",
}

// Generated where

var PlayerKillLogWhere = struct {
	ID                whereHelperstring
	BattleID          whereHelperstring
	PlayerID          whereHelperstring
	FactionID         whereHelperstring
	IsTeamKill        whereHelperbool
	CreatedAt         whereHelpertime_Time
	AbilityOfferingID whereHelpernull_String
	GameAbilityID     whereHelpernull_String
	IsVerified        whereHelperbool
	RelatedPlayBanID  whereHelpernull_String
}{
	ID:                whereHelperstring{field: "\"player_kill_log\".\"id\""},
	BattleID:          whereHelperstring{field: "\"player_kill_log\".\"battle_id\""},
	PlayerID:          whereHelperstring{field: "\"player_kill_log\".\"player_id\""},
	FactionID:         whereHelperstring{field: "\"player_kill_log\".\"faction_id\""},
	IsTeamKill:        whereHelperbool{field: "\"player_kill_log\".\"is_team_kill\""},
	CreatedAt:         whereHelpertime_Time{field: "\"player_kill_log\".\"created_at\""},
	AbilityOfferingID: whereHelpernull_String{field: "\"player_kill_log\".\"ability_offering_id\""},
	GameAbilityID:     whereHelpernull_String{field: "\"player_kill_log\".\"game_ability_id\""},
	IsVerified:        whereHelperbool{field: "\"player_kill_log\".\"is_verified\""},
	RelatedPlayBanID:  whereHelpernull_String{field: "\"player_kill_log\".\"related_play_ban_id\""},
}

// PlayerKillLogRels is where relationship names are stored.
var PlayerKillLogRels = struct {
	Battle         string
	Faction        string
	GameAbility    string
	Player         string
	RelatedPlayBan string
}{
	Battle:         "Battle",
	Faction:        "Faction",
	GameAbility:    "GameAbility",
	Player:         "Player",
	RelatedPlayBan: "RelatedPlayBan",
}

// playerKillLogR is where relationships are stored.
type playerKillLogR struct {
	Battle         *Battle      `boiler:"Battle" boil:"Battle" json:"Battle" toml:"Battle" yaml:"Battle"`
	Faction        *Faction     `boiler:"Faction" boil:"Faction" json:"Faction" toml:"Faction" yaml:"Faction"`
	GameAbility    *GameAbility `boiler:"GameAbility" boil:"GameAbility" json:"GameAbility" toml:"GameAbility" yaml:"GameAbility"`
	Player         *Player      `boiler:"Player" boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
	RelatedPlayBan *PlayerBan   `boiler:"RelatedPlayBan" boil:"RelatedPlayBan" json:"RelatedPlayBan" toml:"RelatedPlayBan" yaml:"RelatedPlayBan"`
}

// NewStruct creates a new relationship struct
func (*playerKillLogR) NewStruct() *playerKillLogR {
	return &playerKillLogR{}
}

// playerKillLogL is where Load methods for each relationship are stored.
type playerKillLogL struct{}

var (
	playerKillLogAllColumns            = []string{"id", "battle_id", "player_id", "faction_id", "is_team_kill", "created_at", "ability_offering_id", "game_ability_id", "is_verified", "related_play_ban_id"}
	playerKillLogColumnsWithoutDefault = []string{"battle_id", "player_id", "faction_id"}
	playerKillLogColumnsWithDefault    = []string{"id", "is_team_kill", "created_at", "ability_offering_id", "game_ability_id", "is_verified", "related_play_ban_id"}
	playerKillLogPrimaryKeyColumns     = []string{"id"}
	playerKillLogGeneratedColumns      = []string{}
)

type (
	// PlayerKillLogSlice is an alias for a slice of pointers to PlayerKillLog.
	// This should almost always be used instead of []PlayerKillLog.
	PlayerKillLogSlice []*PlayerKillLog
	// PlayerKillLogHook is the signature for custom PlayerKillLog hook methods
	PlayerKillLogHook func(boil.Executor, *PlayerKillLog) error

	playerKillLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playerKillLogType                 = reflect.TypeOf(&PlayerKillLog{})
	playerKillLogMapping              = queries.MakeStructMapping(playerKillLogType)
	playerKillLogPrimaryKeyMapping, _ = queries.BindMapping(playerKillLogType, playerKillLogMapping, playerKillLogPrimaryKeyColumns)
	playerKillLogInsertCacheMut       sync.RWMutex
	playerKillLogInsertCache          = make(map[string]insertCache)
	playerKillLogUpdateCacheMut       sync.RWMutex
	playerKillLogUpdateCache          = make(map[string]updateCache)
	playerKillLogUpsertCacheMut       sync.RWMutex
	playerKillLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var playerKillLogAfterSelectHooks []PlayerKillLogHook

var playerKillLogBeforeInsertHooks []PlayerKillLogHook
var playerKillLogAfterInsertHooks []PlayerKillLogHook

var playerKillLogBeforeUpdateHooks []PlayerKillLogHook
var playerKillLogAfterUpdateHooks []PlayerKillLogHook

var playerKillLogBeforeDeleteHooks []PlayerKillLogHook
var playerKillLogAfterDeleteHooks []PlayerKillLogHook

var playerKillLogBeforeUpsertHooks []PlayerKillLogHook
var playerKillLogAfterUpsertHooks []PlayerKillLogHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PlayerKillLog) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range playerKillLogAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PlayerKillLog) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerKillLogBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PlayerKillLog) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerKillLogAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PlayerKillLog) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range playerKillLogBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PlayerKillLog) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range playerKillLogAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PlayerKillLog) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range playerKillLogBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PlayerKillLog) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range playerKillLogAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PlayerKillLog) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerKillLogBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PlayerKillLog) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerKillLogAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlayerKillLogHook registers your hook function for all future operations.
func AddPlayerKillLogHook(hookPoint boil.HookPoint, playerKillLogHook PlayerKillLogHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		playerKillLogAfterSelectHooks = append(playerKillLogAfterSelectHooks, playerKillLogHook)
	case boil.BeforeInsertHook:
		playerKillLogBeforeInsertHooks = append(playerKillLogBeforeInsertHooks, playerKillLogHook)
	case boil.AfterInsertHook:
		playerKillLogAfterInsertHooks = append(playerKillLogAfterInsertHooks, playerKillLogHook)
	case boil.BeforeUpdateHook:
		playerKillLogBeforeUpdateHooks = append(playerKillLogBeforeUpdateHooks, playerKillLogHook)
	case boil.AfterUpdateHook:
		playerKillLogAfterUpdateHooks = append(playerKillLogAfterUpdateHooks, playerKillLogHook)
	case boil.BeforeDeleteHook:
		playerKillLogBeforeDeleteHooks = append(playerKillLogBeforeDeleteHooks, playerKillLogHook)
	case boil.AfterDeleteHook:
		playerKillLogAfterDeleteHooks = append(playerKillLogAfterDeleteHooks, playerKillLogHook)
	case boil.BeforeUpsertHook:
		playerKillLogBeforeUpsertHooks = append(playerKillLogBeforeUpsertHooks, playerKillLogHook)
	case boil.AfterUpsertHook:
		playerKillLogAfterUpsertHooks = append(playerKillLogAfterUpsertHooks, playerKillLogHook)
	}
}

// One returns a single playerKillLog record from the query.
func (q playerKillLogQuery) One(exec boil.Executor) (*PlayerKillLog, error) {
	o := &PlayerKillLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for player_kill_log")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PlayerKillLog records from the query.
func (q playerKillLogQuery) All(exec boil.Executor) (PlayerKillLogSlice, error) {
	var o []*PlayerKillLog

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to PlayerKillLog slice")
	}

	if len(playerKillLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PlayerKillLog records in the query.
func (q playerKillLogQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count player_kill_log rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q playerKillLogQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if player_kill_log exists")
	}

	return count > 0, nil
}

// Battle pointed to by the foreign key.
func (o *PlayerKillLog) Battle(mods ...qm.QueryMod) battleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BattleID),
	}

	queryMods = append(queryMods, mods...)

	query := Battles(queryMods...)
	queries.SetFrom(query.Query, "\"battles\"")

	return query
}

// Faction pointed to by the foreign key.
func (o *PlayerKillLog) Faction(mods ...qm.QueryMod) factionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FactionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Factions(queryMods...)
	queries.SetFrom(query.Query, "\"factions\"")

	return query
}

// GameAbility pointed to by the foreign key.
func (o *PlayerKillLog) GameAbility(mods ...qm.QueryMod) gameAbilityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GameAbilityID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := GameAbilities(queryMods...)
	queries.SetFrom(query.Query, "\"game_abilities\"")

	return query
}

// Player pointed to by the foreign key.
func (o *PlayerKillLog) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// RelatedPlayBan pointed to by the foreign key.
func (o *PlayerKillLog) RelatedPlayBan(mods ...qm.QueryMod) playerBanQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RelatedPlayBanID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := PlayerBans(queryMods...)
	queries.SetFrom(query.Query, "\"player_bans\"")

	return query
}

// LoadBattle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerKillLogL) LoadBattle(e boil.Executor, singular bool, maybePlayerKillLog interface{}, mods queries.Applicator) error {
	var slice []*PlayerKillLog
	var object *PlayerKillLog

	if singular {
		object = maybePlayerKillLog.(*PlayerKillLog)
	} else {
		slice = *maybePlayerKillLog.(*[]*PlayerKillLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerKillLogR{}
		}
		args = append(args, object.BattleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerKillLogR{}
			}

			for _, a := range args {
				if a == obj.BattleID {
					continue Outer
				}
			}

			args = append(args, obj.BattleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battles`),
		qm.WhereIn(`battles.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Battle")
	}

	var resultSlice []*Battle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Battle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battles")
	}

	if len(playerKillLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Battle = foreign
		if foreign.R == nil {
			foreign.R = &battleR{}
		}
		foreign.R.PlayerKillLogs = append(foreign.R.PlayerKillLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BattleID == foreign.ID {
				local.R.Battle = foreign
				if foreign.R == nil {
					foreign.R = &battleR{}
				}
				foreign.R.PlayerKillLogs = append(foreign.R.PlayerKillLogs, local)
				break
			}
		}
	}

	return nil
}

// LoadFaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerKillLogL) LoadFaction(e boil.Executor, singular bool, maybePlayerKillLog interface{}, mods queries.Applicator) error {
	var slice []*PlayerKillLog
	var object *PlayerKillLog

	if singular {
		object = maybePlayerKillLog.(*PlayerKillLog)
	} else {
		slice = *maybePlayerKillLog.(*[]*PlayerKillLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerKillLogR{}
		}
		args = append(args, object.FactionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerKillLogR{}
			}

			for _, a := range args {
				if a == obj.FactionID {
					continue Outer
				}
			}

			args = append(args, obj.FactionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`factions`),
		qm.WhereIn(`factions.id in ?`, args...),
		qmhelper.WhereIsNull(`factions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Faction")
	}

	var resultSlice []*Faction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Faction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for factions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for factions")
	}

	if len(playerKillLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Faction = foreign
		if foreign.R == nil {
			foreign.R = &factionR{}
		}
		foreign.R.PlayerKillLogs = append(foreign.R.PlayerKillLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FactionID == foreign.ID {
				local.R.Faction = foreign
				if foreign.R == nil {
					foreign.R = &factionR{}
				}
				foreign.R.PlayerKillLogs = append(foreign.R.PlayerKillLogs, local)
				break
			}
		}
	}

	return nil
}

// LoadGameAbility allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerKillLogL) LoadGameAbility(e boil.Executor, singular bool, maybePlayerKillLog interface{}, mods queries.Applicator) error {
	var slice []*PlayerKillLog
	var object *PlayerKillLog

	if singular {
		object = maybePlayerKillLog.(*PlayerKillLog)
	} else {
		slice = *maybePlayerKillLog.(*[]*PlayerKillLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerKillLogR{}
		}
		if !queries.IsNil(object.GameAbilityID) {
			args = append(args, object.GameAbilityID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerKillLogR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.GameAbilityID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.GameAbilityID) {
				args = append(args, obj.GameAbilityID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`game_abilities`),
		qm.WhereIn(`game_abilities.id in ?`, args...),
		qmhelper.WhereIsNull(`game_abilities.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GameAbility")
	}

	var resultSlice []*GameAbility
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GameAbility")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for game_abilities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_abilities")
	}

	if len(playerKillLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GameAbility = foreign
		if foreign.R == nil {
			foreign.R = &gameAbilityR{}
		}
		foreign.R.PlayerKillLogs = append(foreign.R.PlayerKillLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.GameAbilityID, foreign.ID) {
				local.R.GameAbility = foreign
				if foreign.R == nil {
					foreign.R = &gameAbilityR{}
				}
				foreign.R.PlayerKillLogs = append(foreign.R.PlayerKillLogs, local)
				break
			}
		}
	}

	return nil
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerKillLogL) LoadPlayer(e boil.Executor, singular bool, maybePlayerKillLog interface{}, mods queries.Applicator) error {
	var slice []*PlayerKillLog
	var object *PlayerKillLog

	if singular {
		object = maybePlayerKillLog.(*PlayerKillLog)
	} else {
		slice = *maybePlayerKillLog.(*[]*PlayerKillLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerKillLogR{}
		}
		args = append(args, object.PlayerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerKillLogR{}
			}

			for _, a := range args {
				if a == obj.PlayerID {
					continue Outer
				}
			}

			args = append(args, obj.PlayerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(playerKillLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.PlayerKillLogs = append(foreign.R.PlayerKillLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.ID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.PlayerKillLogs = append(foreign.R.PlayerKillLogs, local)
				break
			}
		}
	}

	return nil
}

// LoadRelatedPlayBan allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerKillLogL) LoadRelatedPlayBan(e boil.Executor, singular bool, maybePlayerKillLog interface{}, mods queries.Applicator) error {
	var slice []*PlayerKillLog
	var object *PlayerKillLog

	if singular {
		object = maybePlayerKillLog.(*PlayerKillLog)
	} else {
		slice = *maybePlayerKillLog.(*[]*PlayerKillLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerKillLogR{}
		}
		if !queries.IsNil(object.RelatedPlayBanID) {
			args = append(args, object.RelatedPlayBanID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerKillLogR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RelatedPlayBanID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RelatedPlayBanID) {
				args = append(args, obj.RelatedPlayBanID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`player_bans`),
		qm.WhereIn(`player_bans.id in ?`, args...),
		qmhelper.WhereIsNull(`player_bans.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PlayerBan")
	}

	var resultSlice []*PlayerBan
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PlayerBan")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for player_bans")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for player_bans")
	}

	if len(playerKillLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RelatedPlayBan = foreign
		if foreign.R == nil {
			foreign.R = &playerBanR{}
		}
		foreign.R.RelatedPlayBanPlayerKillLogs = append(foreign.R.RelatedPlayBanPlayerKillLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RelatedPlayBanID, foreign.ID) {
				local.R.RelatedPlayBan = foreign
				if foreign.R == nil {
					foreign.R = &playerBanR{}
				}
				foreign.R.RelatedPlayBanPlayerKillLogs = append(foreign.R.RelatedPlayBanPlayerKillLogs, local)
				break
			}
		}
	}

	return nil
}

// SetBattle of the playerKillLog to the related item.
// Sets o.R.Battle to related.
// Adds o to related.R.PlayerKillLogs.
func (o *PlayerKillLog) SetBattle(exec boil.Executor, insert bool, related *Battle) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"player_kill_log\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerKillLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BattleID = related.ID
	if o.R == nil {
		o.R = &playerKillLogR{
			Battle: related,
		}
	} else {
		o.R.Battle = related
	}

	if related.R == nil {
		related.R = &battleR{
			PlayerKillLogs: PlayerKillLogSlice{o},
		}
	} else {
		related.R.PlayerKillLogs = append(related.R.PlayerKillLogs, o)
	}

	return nil
}

// SetFaction of the playerKillLog to the related item.
// Sets o.R.Faction to related.
// Adds o to related.R.PlayerKillLogs.
func (o *PlayerKillLog) SetFaction(exec boil.Executor, insert bool, related *Faction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"player_kill_log\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"faction_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerKillLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FactionID = related.ID
	if o.R == nil {
		o.R = &playerKillLogR{
			Faction: related,
		}
	} else {
		o.R.Faction = related
	}

	if related.R == nil {
		related.R = &factionR{
			PlayerKillLogs: PlayerKillLogSlice{o},
		}
	} else {
		related.R.PlayerKillLogs = append(related.R.PlayerKillLogs, o)
	}

	return nil
}

// SetGameAbility of the playerKillLog to the related item.
// Sets o.R.GameAbility to related.
// Adds o to related.R.PlayerKillLogs.
func (o *PlayerKillLog) SetGameAbility(exec boil.Executor, insert bool, related *GameAbility) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"player_kill_log\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"game_ability_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerKillLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.GameAbilityID, related.ID)
	if o.R == nil {
		o.R = &playerKillLogR{
			GameAbility: related,
		}
	} else {
		o.R.GameAbility = related
	}

	if related.R == nil {
		related.R = &gameAbilityR{
			PlayerKillLogs: PlayerKillLogSlice{o},
		}
	} else {
		related.R.PlayerKillLogs = append(related.R.PlayerKillLogs, o)
	}

	return nil
}

// RemoveGameAbility relationship.
// Sets o.R.GameAbility to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *PlayerKillLog) RemoveGameAbility(exec boil.Executor, related *GameAbility) error {
	var err error

	queries.SetScanner(&o.GameAbilityID, nil)
	if _, err = o.Update(exec, boil.Whitelist("game_ability_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.GameAbility = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PlayerKillLogs {
		if queries.Equal(o.GameAbilityID, ri.GameAbilityID) {
			continue
		}

		ln := len(related.R.PlayerKillLogs)
		if ln > 1 && i < ln-1 {
			related.R.PlayerKillLogs[i] = related.R.PlayerKillLogs[ln-1]
		}
		related.R.PlayerKillLogs = related.R.PlayerKillLogs[:ln-1]
		break
	}
	return nil
}

// SetPlayer of the playerKillLog to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.PlayerKillLogs.
func (o *PlayerKillLog) SetPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"player_kill_log\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerKillLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.ID
	if o.R == nil {
		o.R = &playerKillLogR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			PlayerKillLogs: PlayerKillLogSlice{o},
		}
	} else {
		related.R.PlayerKillLogs = append(related.R.PlayerKillLogs, o)
	}

	return nil
}

// SetRelatedPlayBan of the playerKillLog to the related item.
// Sets o.R.RelatedPlayBan to related.
// Adds o to related.R.RelatedPlayBanPlayerKillLogs.
func (o *PlayerKillLog) SetRelatedPlayBan(exec boil.Executor, insert bool, related *PlayerBan) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"player_kill_log\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"related_play_ban_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerKillLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RelatedPlayBanID, related.ID)
	if o.R == nil {
		o.R = &playerKillLogR{
			RelatedPlayBan: related,
		}
	} else {
		o.R.RelatedPlayBan = related
	}

	if related.R == nil {
		related.R = &playerBanR{
			RelatedPlayBanPlayerKillLogs: PlayerKillLogSlice{o},
		}
	} else {
		related.R.RelatedPlayBanPlayerKillLogs = append(related.R.RelatedPlayBanPlayerKillLogs, o)
	}

	return nil
}

// RemoveRelatedPlayBan relationship.
// Sets o.R.RelatedPlayBan to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *PlayerKillLog) RemoveRelatedPlayBan(exec boil.Executor, related *PlayerBan) error {
	var err error

	queries.SetScanner(&o.RelatedPlayBanID, nil)
	if _, err = o.Update(exec, boil.Whitelist("related_play_ban_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.RelatedPlayBan = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RelatedPlayBanPlayerKillLogs {
		if queries.Equal(o.RelatedPlayBanID, ri.RelatedPlayBanID) {
			continue
		}

		ln := len(related.R.RelatedPlayBanPlayerKillLogs)
		if ln > 1 && i < ln-1 {
			related.R.RelatedPlayBanPlayerKillLogs[i] = related.R.RelatedPlayBanPlayerKillLogs[ln-1]
		}
		related.R.RelatedPlayBanPlayerKillLogs = related.R.RelatedPlayBanPlayerKillLogs[:ln-1]
		break
	}
	return nil
}

// PlayerKillLogs retrieves all the records using an executor.
func PlayerKillLogs(mods ...qm.QueryMod) playerKillLogQuery {
	mods = append(mods, qm.From("\"player_kill_log\""))
	return playerKillLogQuery{NewQuery(mods...)}
}

// FindPlayerKillLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlayerKillLog(exec boil.Executor, iD string, selectCols ...string) (*PlayerKillLog, error) {
	playerKillLogObj := &PlayerKillLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"player_kill_log\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, playerKillLogObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from player_kill_log")
	}

	if err = playerKillLogObj.doAfterSelectHooks(exec); err != nil {
		return playerKillLogObj, err
	}

	return playerKillLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PlayerKillLog) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no player_kill_log provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerKillLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	playerKillLogInsertCacheMut.RLock()
	cache, cached := playerKillLogInsertCache[key]
	playerKillLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			playerKillLogAllColumns,
			playerKillLogColumnsWithDefault,
			playerKillLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(playerKillLogType, playerKillLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(playerKillLogType, playerKillLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"player_kill_log\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"player_kill_log\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into player_kill_log")
	}

	if !cached {
		playerKillLogInsertCacheMut.Lock()
		playerKillLogInsertCache[key] = cache
		playerKillLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the PlayerKillLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PlayerKillLog) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	playerKillLogUpdateCacheMut.RLock()
	cache, cached := playerKillLogUpdateCache[key]
	playerKillLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			playerKillLogAllColumns,
			playerKillLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update player_kill_log, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"player_kill_log\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, playerKillLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(playerKillLogType, playerKillLogMapping, append(wl, playerKillLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update player_kill_log row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for player_kill_log")
	}

	if !cached {
		playerKillLogUpdateCacheMut.Lock()
		playerKillLogUpdateCache[key] = cache
		playerKillLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q playerKillLogQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for player_kill_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for player_kill_log")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlayerKillLogSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerKillLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"player_kill_log\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, playerKillLogPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in playerKillLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all playerKillLog")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PlayerKillLog) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no player_kill_log provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerKillLogColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	playerKillLogUpsertCacheMut.RLock()
	cache, cached := playerKillLogUpsertCache[key]
	playerKillLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			playerKillLogAllColumns,
			playerKillLogColumnsWithDefault,
			playerKillLogColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			playerKillLogAllColumns,
			playerKillLogPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert player_kill_log, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(playerKillLogPrimaryKeyColumns))
			copy(conflict, playerKillLogPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"player_kill_log\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(playerKillLogType, playerKillLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(playerKillLogType, playerKillLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert player_kill_log")
	}

	if !cached {
		playerKillLogUpsertCacheMut.Lock()
		playerKillLogUpsertCache[key] = cache
		playerKillLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single PlayerKillLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PlayerKillLog) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no PlayerKillLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), playerKillLogPrimaryKeyMapping)
	sql := "DELETE FROM \"player_kill_log\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from player_kill_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for player_kill_log")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q playerKillLogQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no playerKillLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from player_kill_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for player_kill_log")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlayerKillLogSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(playerKillLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerKillLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"player_kill_log\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerKillLogPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from playerKillLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for player_kill_log")
	}

	if len(playerKillLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PlayerKillLog) Reload(exec boil.Executor) error {
	ret, err := FindPlayerKillLog(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlayerKillLogSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlayerKillLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerKillLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"player_kill_log\".* FROM \"player_kill_log\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerKillLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in PlayerKillLogSlice")
	}

	*o = slice

	return nil
}

// PlayerKillLogExists checks if the PlayerKillLog row exists.
func PlayerKillLogExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"player_kill_log\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if player_kill_log exists")
	}

	return exists, nil
}
