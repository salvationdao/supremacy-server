// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SyndicateJoinRequest is an object representing the database table.
type SyndicateJoinRequest struct {
	ID          string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	SyndicateID string    `boiler:"syndicate_id" boil:"syndicate_id" json:"syndicate_id" toml:"syndicate_id" yaml:"syndicate_id"`
	ApplicantID string    `boiler:"applicant_id" boil:"applicant_id" json:"applicant_id" toml:"applicant_id" yaml:"applicant_id"`
	ExpireAt    time.Time `boiler:"expire_at" boil:"expire_at" json:"expire_at" toml:"expire_at" yaml:"expire_at"`
	CreatedAt   time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt   null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *syndicateJoinRequestR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L syndicateJoinRequestL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SyndicateJoinRequestColumns = struct {
	ID          string
	SyndicateID string
	ApplicantID string
	ExpireAt    string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "id",
	SyndicateID: "syndicate_id",
	ApplicantID: "applicant_id",
	ExpireAt:    "expire_at",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
}

var SyndicateJoinRequestTableColumns = struct {
	ID          string
	SyndicateID string
	ApplicantID string
	ExpireAt    string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "syndicate_join_requests.id",
	SyndicateID: "syndicate_join_requests.syndicate_id",
	ApplicantID: "syndicate_join_requests.applicant_id",
	ExpireAt:    "syndicate_join_requests.expire_at",
	CreatedAt:   "syndicate_join_requests.created_at",
	UpdatedAt:   "syndicate_join_requests.updated_at",
	DeletedAt:   "syndicate_join_requests.deleted_at",
}

// Generated where

var SyndicateJoinRequestWhere = struct {
	ID          whereHelperstring
	SyndicateID whereHelperstring
	ApplicantID whereHelperstring
	ExpireAt    whereHelpertime_Time
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	DeletedAt   whereHelpernull_Time
}{
	ID:          whereHelperstring{field: "\"syndicate_join_requests\".\"id\""},
	SyndicateID: whereHelperstring{field: "\"syndicate_join_requests\".\"syndicate_id\""},
	ApplicantID: whereHelperstring{field: "\"syndicate_join_requests\".\"applicant_id\""},
	ExpireAt:    whereHelpertime_Time{field: "\"syndicate_join_requests\".\"expire_at\""},
	CreatedAt:   whereHelpertime_Time{field: "\"syndicate_join_requests\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"syndicate_join_requests\".\"updated_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"syndicate_join_requests\".\"deleted_at\""},
}

// SyndicateJoinRequestRels is where relationship names are stored.
var SyndicateJoinRequestRels = struct {
	Applicant            string
	Syndicate            string
	QuestionnaireAnswers string
}{
	Applicant:            "Applicant",
	Syndicate:            "Syndicate",
	QuestionnaireAnswers: "QuestionnaireAnswers",
}

// syndicateJoinRequestR is where relationships are stored.
type syndicateJoinRequestR struct {
	Applicant            *Player                  `boiler:"Applicant" boil:"Applicant" json:"Applicant" toml:"Applicant" yaml:"Applicant"`
	Syndicate            *Syndicate               `boiler:"Syndicate" boil:"Syndicate" json:"Syndicate" toml:"Syndicate" yaml:"Syndicate"`
	QuestionnaireAnswers QuestionnaireAnswerSlice `boiler:"QuestionnaireAnswers" boil:"QuestionnaireAnswers" json:"QuestionnaireAnswers" toml:"QuestionnaireAnswers" yaml:"QuestionnaireAnswers"`
}

// NewStruct creates a new relationship struct
func (*syndicateJoinRequestR) NewStruct() *syndicateJoinRequestR {
	return &syndicateJoinRequestR{}
}

// syndicateJoinRequestL is where Load methods for each relationship are stored.
type syndicateJoinRequestL struct{}

var (
	syndicateJoinRequestAllColumns            = []string{"id", "syndicate_id", "applicant_id", "expire_at", "created_at", "updated_at", "deleted_at"}
	syndicateJoinRequestColumnsWithoutDefault = []string{"syndicate_id", "applicant_id", "expire_at"}
	syndicateJoinRequestColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at"}
	syndicateJoinRequestPrimaryKeyColumns     = []string{"id"}
	syndicateJoinRequestGeneratedColumns      = []string{}
)

type (
	// SyndicateJoinRequestSlice is an alias for a slice of pointers to SyndicateJoinRequest.
	// This should almost always be used instead of []SyndicateJoinRequest.
	SyndicateJoinRequestSlice []*SyndicateJoinRequest
	// SyndicateJoinRequestHook is the signature for custom SyndicateJoinRequest hook methods
	SyndicateJoinRequestHook func(boil.Executor, *SyndicateJoinRequest) error

	syndicateJoinRequestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	syndicateJoinRequestType                 = reflect.TypeOf(&SyndicateJoinRequest{})
	syndicateJoinRequestMapping              = queries.MakeStructMapping(syndicateJoinRequestType)
	syndicateJoinRequestPrimaryKeyMapping, _ = queries.BindMapping(syndicateJoinRequestType, syndicateJoinRequestMapping, syndicateJoinRequestPrimaryKeyColumns)
	syndicateJoinRequestInsertCacheMut       sync.RWMutex
	syndicateJoinRequestInsertCache          = make(map[string]insertCache)
	syndicateJoinRequestUpdateCacheMut       sync.RWMutex
	syndicateJoinRequestUpdateCache          = make(map[string]updateCache)
	syndicateJoinRequestUpsertCacheMut       sync.RWMutex
	syndicateJoinRequestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var syndicateJoinRequestAfterSelectHooks []SyndicateJoinRequestHook

var syndicateJoinRequestBeforeInsertHooks []SyndicateJoinRequestHook
var syndicateJoinRequestAfterInsertHooks []SyndicateJoinRequestHook

var syndicateJoinRequestBeforeUpdateHooks []SyndicateJoinRequestHook
var syndicateJoinRequestAfterUpdateHooks []SyndicateJoinRequestHook

var syndicateJoinRequestBeforeDeleteHooks []SyndicateJoinRequestHook
var syndicateJoinRequestAfterDeleteHooks []SyndicateJoinRequestHook

var syndicateJoinRequestBeforeUpsertHooks []SyndicateJoinRequestHook
var syndicateJoinRequestAfterUpsertHooks []SyndicateJoinRequestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SyndicateJoinRequest) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateJoinRequestAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SyndicateJoinRequest) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateJoinRequestBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SyndicateJoinRequest) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateJoinRequestAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SyndicateJoinRequest) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateJoinRequestBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SyndicateJoinRequest) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateJoinRequestAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SyndicateJoinRequest) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateJoinRequestBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SyndicateJoinRequest) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateJoinRequestAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SyndicateJoinRequest) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateJoinRequestBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SyndicateJoinRequest) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateJoinRequestAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSyndicateJoinRequestHook registers your hook function for all future operations.
func AddSyndicateJoinRequestHook(hookPoint boil.HookPoint, syndicateJoinRequestHook SyndicateJoinRequestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		syndicateJoinRequestAfterSelectHooks = append(syndicateJoinRequestAfterSelectHooks, syndicateJoinRequestHook)
	case boil.BeforeInsertHook:
		syndicateJoinRequestBeforeInsertHooks = append(syndicateJoinRequestBeforeInsertHooks, syndicateJoinRequestHook)
	case boil.AfterInsertHook:
		syndicateJoinRequestAfterInsertHooks = append(syndicateJoinRequestAfterInsertHooks, syndicateJoinRequestHook)
	case boil.BeforeUpdateHook:
		syndicateJoinRequestBeforeUpdateHooks = append(syndicateJoinRequestBeforeUpdateHooks, syndicateJoinRequestHook)
	case boil.AfterUpdateHook:
		syndicateJoinRequestAfterUpdateHooks = append(syndicateJoinRequestAfterUpdateHooks, syndicateJoinRequestHook)
	case boil.BeforeDeleteHook:
		syndicateJoinRequestBeforeDeleteHooks = append(syndicateJoinRequestBeforeDeleteHooks, syndicateJoinRequestHook)
	case boil.AfterDeleteHook:
		syndicateJoinRequestAfterDeleteHooks = append(syndicateJoinRequestAfterDeleteHooks, syndicateJoinRequestHook)
	case boil.BeforeUpsertHook:
		syndicateJoinRequestBeforeUpsertHooks = append(syndicateJoinRequestBeforeUpsertHooks, syndicateJoinRequestHook)
	case boil.AfterUpsertHook:
		syndicateJoinRequestAfterUpsertHooks = append(syndicateJoinRequestAfterUpsertHooks, syndicateJoinRequestHook)
	}
}

// One returns a single syndicateJoinRequest record from the query.
func (q syndicateJoinRequestQuery) One(exec boil.Executor) (*SyndicateJoinRequest, error) {
	o := &SyndicateJoinRequest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for syndicate_join_requests")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SyndicateJoinRequest records from the query.
func (q syndicateJoinRequestQuery) All(exec boil.Executor) (SyndicateJoinRequestSlice, error) {
	var o []*SyndicateJoinRequest

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to SyndicateJoinRequest slice")
	}

	if len(syndicateJoinRequestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SyndicateJoinRequest records in the query.
func (q syndicateJoinRequestQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count syndicate_join_requests rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q syndicateJoinRequestQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if syndicate_join_requests exists")
	}

	return count > 0, nil
}

// Applicant pointed to by the foreign key.
func (o *SyndicateJoinRequest) Applicant(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ApplicantID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// Syndicate pointed to by the foreign key.
func (o *SyndicateJoinRequest) Syndicate(mods ...qm.QueryMod) syndicateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SyndicateID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Syndicates(queryMods...)
	queries.SetFrom(query.Query, "\"syndicates\"")

	return query
}

// QuestionnaireAnswers retrieves all the questionnaire_answer's QuestionnaireAnswers with an executor.
func (o *SyndicateJoinRequest) QuestionnaireAnswers(mods ...qm.QueryMod) questionnaireAnswerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"questionnaire_answer\".\"syndicate_join_request_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"questionnaire_answer\".\"deleted_at\""),
	)

	query := QuestionnaireAnswers(queryMods...)
	queries.SetFrom(query.Query, "\"questionnaire_answer\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"questionnaire_answer\".*"})
	}

	return query
}

// LoadApplicant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateJoinRequestL) LoadApplicant(e boil.Executor, singular bool, maybeSyndicateJoinRequest interface{}, mods queries.Applicator) error {
	var slice []*SyndicateJoinRequest
	var object *SyndicateJoinRequest

	if singular {
		object = maybeSyndicateJoinRequest.(*SyndicateJoinRequest)
	} else {
		slice = *maybeSyndicateJoinRequest.(*[]*SyndicateJoinRequest)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateJoinRequestR{}
		}
		args = append(args, object.ApplicantID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateJoinRequestR{}
			}

			for _, a := range args {
				if a == obj.ApplicantID {
					continue Outer
				}
			}

			args = append(args, obj.ApplicantID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(syndicateJoinRequestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Applicant = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.ApplicantSyndicateJoinRequests = append(foreign.R.ApplicantSyndicateJoinRequests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ApplicantID == foreign.ID {
				local.R.Applicant = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.ApplicantSyndicateJoinRequests = append(foreign.R.ApplicantSyndicateJoinRequests, local)
				break
			}
		}
	}

	return nil
}

// LoadSyndicate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateJoinRequestL) LoadSyndicate(e boil.Executor, singular bool, maybeSyndicateJoinRequest interface{}, mods queries.Applicator) error {
	var slice []*SyndicateJoinRequest
	var object *SyndicateJoinRequest

	if singular {
		object = maybeSyndicateJoinRequest.(*SyndicateJoinRequest)
	} else {
		slice = *maybeSyndicateJoinRequest.(*[]*SyndicateJoinRequest)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateJoinRequestR{}
		}
		args = append(args, object.SyndicateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateJoinRequestR{}
			}

			for _, a := range args {
				if a == obj.SyndicateID {
					continue Outer
				}
			}

			args = append(args, obj.SyndicateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicates`),
		qm.WhereIn(`syndicates.id in ?`, args...),
		qmhelper.WhereIsNull(`syndicates.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Syndicate")
	}

	var resultSlice []*Syndicate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Syndicate")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for syndicates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicates")
	}

	if len(syndicateJoinRequestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Syndicate = foreign
		if foreign.R == nil {
			foreign.R = &syndicateR{}
		}
		foreign.R.SyndicateJoinRequests = append(foreign.R.SyndicateJoinRequests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SyndicateID == foreign.ID {
				local.R.Syndicate = foreign
				if foreign.R == nil {
					foreign.R = &syndicateR{}
				}
				foreign.R.SyndicateJoinRequests = append(foreign.R.SyndicateJoinRequests, local)
				break
			}
		}
	}

	return nil
}

// LoadQuestionnaireAnswers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (syndicateJoinRequestL) LoadQuestionnaireAnswers(e boil.Executor, singular bool, maybeSyndicateJoinRequest interface{}, mods queries.Applicator) error {
	var slice []*SyndicateJoinRequest
	var object *SyndicateJoinRequest

	if singular {
		object = maybeSyndicateJoinRequest.(*SyndicateJoinRequest)
	} else {
		slice = *maybeSyndicateJoinRequest.(*[]*SyndicateJoinRequest)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateJoinRequestR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateJoinRequestR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`questionnaire_answer`),
		qm.WhereIn(`questionnaire_answer.syndicate_join_request_id in ?`, args...),
		qmhelper.WhereIsNull(`questionnaire_answer.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load questionnaire_answer")
	}

	var resultSlice []*QuestionnaireAnswer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice questionnaire_answer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on questionnaire_answer")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for questionnaire_answer")
	}

	if len(questionnaireAnswerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.QuestionnaireAnswers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &questionnaireAnswerR{}
			}
			foreign.R.SyndicateJoinRequest = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SyndicateJoinRequestID) {
				local.R.QuestionnaireAnswers = append(local.R.QuestionnaireAnswers, foreign)
				if foreign.R == nil {
					foreign.R = &questionnaireAnswerR{}
				}
				foreign.R.SyndicateJoinRequest = local
				break
			}
		}
	}

	return nil
}

// SetApplicant of the syndicateJoinRequest to the related item.
// Sets o.R.Applicant to related.
// Adds o to related.R.ApplicantSyndicateJoinRequests.
func (o *SyndicateJoinRequest) SetApplicant(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicate_join_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"applicant_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicateJoinRequestPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ApplicantID = related.ID
	if o.R == nil {
		o.R = &syndicateJoinRequestR{
			Applicant: related,
		}
	} else {
		o.R.Applicant = related
	}

	if related.R == nil {
		related.R = &playerR{
			ApplicantSyndicateJoinRequests: SyndicateJoinRequestSlice{o},
		}
	} else {
		related.R.ApplicantSyndicateJoinRequests = append(related.R.ApplicantSyndicateJoinRequests, o)
	}

	return nil
}

// SetSyndicate of the syndicateJoinRequest to the related item.
// Sets o.R.Syndicate to related.
// Adds o to related.R.SyndicateJoinRequests.
func (o *SyndicateJoinRequest) SetSyndicate(exec boil.Executor, insert bool, related *Syndicate) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicate_join_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"syndicate_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicateJoinRequestPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SyndicateID = related.ID
	if o.R == nil {
		o.R = &syndicateJoinRequestR{
			Syndicate: related,
		}
	} else {
		o.R.Syndicate = related
	}

	if related.R == nil {
		related.R = &syndicateR{
			SyndicateJoinRequests: SyndicateJoinRequestSlice{o},
		}
	} else {
		related.R.SyndicateJoinRequests = append(related.R.SyndicateJoinRequests, o)
	}

	return nil
}

// AddQuestionnaireAnswers adds the given related objects to the existing relationships
// of the syndicate_join_request, optionally inserting them as new records.
// Appends related to o.R.QuestionnaireAnswers.
// Sets related.R.SyndicateJoinRequest appropriately.
func (o *SyndicateJoinRequest) AddQuestionnaireAnswers(exec boil.Executor, insert bool, related ...*QuestionnaireAnswer) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SyndicateJoinRequestID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"questionnaire_answer\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"syndicate_join_request_id"}),
				strmangle.WhereClause("\"", "\"", 2, questionnaireAnswerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SyndicateJoinRequestID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &syndicateJoinRequestR{
			QuestionnaireAnswers: related,
		}
	} else {
		o.R.QuestionnaireAnswers = append(o.R.QuestionnaireAnswers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &questionnaireAnswerR{
				SyndicateJoinRequest: o,
			}
		} else {
			rel.R.SyndicateJoinRequest = o
		}
	}
	return nil
}

// SetQuestionnaireAnswers removes all previously related items of the
// syndicate_join_request replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SyndicateJoinRequest's QuestionnaireAnswers accordingly.
// Replaces o.R.QuestionnaireAnswers with related.
// Sets related.R.SyndicateJoinRequest's QuestionnaireAnswers accordingly.
func (o *SyndicateJoinRequest) SetQuestionnaireAnswers(exec boil.Executor, insert bool, related ...*QuestionnaireAnswer) error {
	query := "update \"questionnaire_answer\" set \"syndicate_join_request_id\" = null where \"syndicate_join_request_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.QuestionnaireAnswers {
			queries.SetScanner(&rel.SyndicateJoinRequestID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SyndicateJoinRequest = nil
		}

		o.R.QuestionnaireAnswers = nil
	}
	return o.AddQuestionnaireAnswers(exec, insert, related...)
}

// RemoveQuestionnaireAnswers relationships from objects passed in.
// Removes related items from R.QuestionnaireAnswers (uses pointer comparison, removal does not keep order)
// Sets related.R.SyndicateJoinRequest.
func (o *SyndicateJoinRequest) RemoveQuestionnaireAnswers(exec boil.Executor, related ...*QuestionnaireAnswer) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SyndicateJoinRequestID, nil)
		if rel.R != nil {
			rel.R.SyndicateJoinRequest = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("syndicate_join_request_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.QuestionnaireAnswers {
			if rel != ri {
				continue
			}

			ln := len(o.R.QuestionnaireAnswers)
			if ln > 1 && i < ln-1 {
				o.R.QuestionnaireAnswers[i] = o.R.QuestionnaireAnswers[ln-1]
			}
			o.R.QuestionnaireAnswers = o.R.QuestionnaireAnswers[:ln-1]
			break
		}
	}

	return nil
}

// SyndicateJoinRequests retrieves all the records using an executor.
func SyndicateJoinRequests(mods ...qm.QueryMod) syndicateJoinRequestQuery {
	mods = append(mods, qm.From("\"syndicate_join_requests\""), qmhelper.WhereIsNull("\"syndicate_join_requests\".\"deleted_at\""))
	return syndicateJoinRequestQuery{NewQuery(mods...)}
}

// FindSyndicateJoinRequest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSyndicateJoinRequest(exec boil.Executor, iD string, selectCols ...string) (*SyndicateJoinRequest, error) {
	syndicateJoinRequestObj := &SyndicateJoinRequest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"syndicate_join_requests\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, syndicateJoinRequestObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from syndicate_join_requests")
	}

	if err = syndicateJoinRequestObj.doAfterSelectHooks(exec); err != nil {
		return syndicateJoinRequestObj, err
	}

	return syndicateJoinRequestObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SyndicateJoinRequest) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no syndicate_join_requests provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syndicateJoinRequestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	syndicateJoinRequestInsertCacheMut.RLock()
	cache, cached := syndicateJoinRequestInsertCache[key]
	syndicateJoinRequestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			syndicateJoinRequestAllColumns,
			syndicateJoinRequestColumnsWithDefault,
			syndicateJoinRequestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(syndicateJoinRequestType, syndicateJoinRequestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(syndicateJoinRequestType, syndicateJoinRequestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"syndicate_join_requests\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"syndicate_join_requests\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into syndicate_join_requests")
	}

	if !cached {
		syndicateJoinRequestInsertCacheMut.Lock()
		syndicateJoinRequestInsertCache[key] = cache
		syndicateJoinRequestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the SyndicateJoinRequest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SyndicateJoinRequest) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	syndicateJoinRequestUpdateCacheMut.RLock()
	cache, cached := syndicateJoinRequestUpdateCache[key]
	syndicateJoinRequestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			syndicateJoinRequestAllColumns,
			syndicateJoinRequestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update syndicate_join_requests, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"syndicate_join_requests\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, syndicateJoinRequestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(syndicateJoinRequestType, syndicateJoinRequestMapping, append(wl, syndicateJoinRequestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update syndicate_join_requests row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for syndicate_join_requests")
	}

	if !cached {
		syndicateJoinRequestUpdateCacheMut.Lock()
		syndicateJoinRequestUpdateCache[key] = cache
		syndicateJoinRequestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q syndicateJoinRequestQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for syndicate_join_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for syndicate_join_requests")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SyndicateJoinRequestSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateJoinRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"syndicate_join_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, syndicateJoinRequestPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in syndicateJoinRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all syndicateJoinRequest")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SyndicateJoinRequest) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no syndicate_join_requests provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syndicateJoinRequestColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	syndicateJoinRequestUpsertCacheMut.RLock()
	cache, cached := syndicateJoinRequestUpsertCache[key]
	syndicateJoinRequestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			syndicateJoinRequestAllColumns,
			syndicateJoinRequestColumnsWithDefault,
			syndicateJoinRequestColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			syndicateJoinRequestAllColumns,
			syndicateJoinRequestPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert syndicate_join_requests, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(syndicateJoinRequestPrimaryKeyColumns))
			copy(conflict, syndicateJoinRequestPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"syndicate_join_requests\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(syndicateJoinRequestType, syndicateJoinRequestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(syndicateJoinRequestType, syndicateJoinRequestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert syndicate_join_requests")
	}

	if !cached {
		syndicateJoinRequestUpsertCacheMut.Lock()
		syndicateJoinRequestUpsertCache[key] = cache
		syndicateJoinRequestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single SyndicateJoinRequest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SyndicateJoinRequest) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no SyndicateJoinRequest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), syndicateJoinRequestPrimaryKeyMapping)
		sql = "DELETE FROM \"syndicate_join_requests\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"syndicate_join_requests\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(syndicateJoinRequestType, syndicateJoinRequestMapping, append(wl, syndicateJoinRequestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from syndicate_join_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for syndicate_join_requests")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q syndicateJoinRequestQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no syndicateJoinRequestQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from syndicate_join_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for syndicate_join_requests")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SyndicateJoinRequestSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(syndicateJoinRequestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateJoinRequestPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"syndicate_join_requests\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syndicateJoinRequestPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateJoinRequestPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"syndicate_join_requests\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, syndicateJoinRequestPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from syndicateJoinRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for syndicate_join_requests")
	}

	if len(syndicateJoinRequestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SyndicateJoinRequest) Reload(exec boil.Executor) error {
	ret, err := FindSyndicateJoinRequest(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SyndicateJoinRequestSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SyndicateJoinRequestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateJoinRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"syndicate_join_requests\".* FROM \"syndicate_join_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syndicateJoinRequestPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in SyndicateJoinRequestSlice")
	}

	*o = slice

	return nil
}

// SyndicateJoinRequestExists checks if the SyndicateJoinRequest row exists.
func SyndicateJoinRequestExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"syndicate_join_requests\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if syndicate_join_requests exists")
	}

	return exists, nil
}
