// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BlueprintUtility is an object representing the database table.
type BlueprintUtility struct {
	ID         string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BrandID    null.String `boiler:"brand_id" boil:"brand_id" json:"brand_id,omitempty" toml:"brand_id" yaml:"brand_id,omitempty"`
	Label      string      `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	DeletedAt  null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt  time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt  time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Type       string      `boiler:"type" boil:"type" json:"type" toml:"type" yaml:"type"`
	Tier       string      `boiler:"tier" boil:"tier" json:"tier" toml:"tier" yaml:"tier"`
	Collection string      `boiler:"collection" boil:"collection" json:"collection" toml:"collection" yaml:"collection"`

	R *blueprintUtilityR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L blueprintUtilityL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlueprintUtilityColumns = struct {
	ID         string
	BrandID    string
	Label      string
	DeletedAt  string
	UpdatedAt  string
	CreatedAt  string
	Type       string
	Tier       string
	Collection string
}{
	ID:         "id",
	BrandID:    "brand_id",
	Label:      "label",
	DeletedAt:  "deleted_at",
	UpdatedAt:  "updated_at",
	CreatedAt:  "created_at",
	Type:       "type",
	Tier:       "tier",
	Collection: "collection",
}

var BlueprintUtilityTableColumns = struct {
	ID         string
	BrandID    string
	Label      string
	DeletedAt  string
	UpdatedAt  string
	CreatedAt  string
	Type       string
	Tier       string
	Collection string
}{
	ID:         "blueprint_utility.id",
	BrandID:    "blueprint_utility.brand_id",
	Label:      "blueprint_utility.label",
	DeletedAt:  "blueprint_utility.deleted_at",
	UpdatedAt:  "blueprint_utility.updated_at",
	CreatedAt:  "blueprint_utility.created_at",
	Type:       "blueprint_utility.type",
	Tier:       "blueprint_utility.tier",
	Collection: "blueprint_utility.collection",
}

// Generated where

var BlueprintUtilityWhere = struct {
	ID         whereHelperstring
	BrandID    whereHelpernull_String
	Label      whereHelperstring
	DeletedAt  whereHelpernull_Time
	UpdatedAt  whereHelpertime_Time
	CreatedAt  whereHelpertime_Time
	Type       whereHelperstring
	Tier       whereHelperstring
	Collection whereHelperstring
}{
	ID:         whereHelperstring{field: "\"blueprint_utility\".\"id\""},
	BrandID:    whereHelpernull_String{field: "\"blueprint_utility\".\"brand_id\""},
	Label:      whereHelperstring{field: "\"blueprint_utility\".\"label\""},
	DeletedAt:  whereHelpernull_Time{field: "\"blueprint_utility\".\"deleted_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"blueprint_utility\".\"updated_at\""},
	CreatedAt:  whereHelpertime_Time{field: "\"blueprint_utility\".\"created_at\""},
	Type:       whereHelperstring{field: "\"blueprint_utility\".\"type\""},
	Tier:       whereHelperstring{field: "\"blueprint_utility\".\"tier\""},
	Collection: whereHelperstring{field: "\"blueprint_utility\".\"collection\""},
}

// BlueprintUtilityRels is where relationship names are stored.
var BlueprintUtilityRels = struct {
	Brand                        string
	BlueprintUtilityAccelerators string
	BlueprintUtilityAntiMissiles string
	BlueprintUtilityAttackDrones string
	BlueprintUtilityRepairDrones string
	BlueprintUtilityShields      string
	BlueprintUtilities           string
}{
	Brand:                        "Brand",
	BlueprintUtilityAccelerators: "BlueprintUtilityAccelerators",
	BlueprintUtilityAntiMissiles: "BlueprintUtilityAntiMissiles",
	BlueprintUtilityAttackDrones: "BlueprintUtilityAttackDrones",
	BlueprintUtilityRepairDrones: "BlueprintUtilityRepairDrones",
	BlueprintUtilityShields:      "BlueprintUtilityShields",
	BlueprintUtilities:           "BlueprintUtilities",
}

// blueprintUtilityR is where relationships are stored.
type blueprintUtilityR struct {
	Brand                        *Brand                           `boiler:"Brand" boil:"Brand" json:"Brand" toml:"Brand" yaml:"Brand"`
	BlueprintUtilityAccelerators BlueprintUtilityAcceleratorSlice `boiler:"BlueprintUtilityAccelerators" boil:"BlueprintUtilityAccelerators" json:"BlueprintUtilityAccelerators" toml:"BlueprintUtilityAccelerators" yaml:"BlueprintUtilityAccelerators"`
	BlueprintUtilityAntiMissiles BlueprintUtilityAntiMissileSlice `boiler:"BlueprintUtilityAntiMissiles" boil:"BlueprintUtilityAntiMissiles" json:"BlueprintUtilityAntiMissiles" toml:"BlueprintUtilityAntiMissiles" yaml:"BlueprintUtilityAntiMissiles"`
	BlueprintUtilityAttackDrones BlueprintUtilityAttackDroneSlice `boiler:"BlueprintUtilityAttackDrones" boil:"BlueprintUtilityAttackDrones" json:"BlueprintUtilityAttackDrones" toml:"BlueprintUtilityAttackDrones" yaml:"BlueprintUtilityAttackDrones"`
	BlueprintUtilityRepairDrones BlueprintUtilityRepairDroneSlice `boiler:"BlueprintUtilityRepairDrones" boil:"BlueprintUtilityRepairDrones" json:"BlueprintUtilityRepairDrones" toml:"BlueprintUtilityRepairDrones" yaml:"BlueprintUtilityRepairDrones"`
	BlueprintUtilityShields      BlueprintUtilityShieldSlice      `boiler:"BlueprintUtilityShields" boil:"BlueprintUtilityShields" json:"BlueprintUtilityShields" toml:"BlueprintUtilityShields" yaml:"BlueprintUtilityShields"`
	BlueprintUtilities           UtilitySlice                     `boiler:"BlueprintUtilities" boil:"BlueprintUtilities" json:"BlueprintUtilities" toml:"BlueprintUtilities" yaml:"BlueprintUtilities"`
}

// NewStruct creates a new relationship struct
func (*blueprintUtilityR) NewStruct() *blueprintUtilityR {
	return &blueprintUtilityR{}
}

// blueprintUtilityL is where Load methods for each relationship are stored.
type blueprintUtilityL struct{}

var (
	blueprintUtilityAllColumns            = []string{"id", "brand_id", "label", "deleted_at", "updated_at", "created_at", "type", "tier", "collection"}
	blueprintUtilityColumnsWithoutDefault = []string{"label", "type"}
	blueprintUtilityColumnsWithDefault    = []string{"id", "brand_id", "deleted_at", "updated_at", "created_at", "tier", "collection"}
	blueprintUtilityPrimaryKeyColumns     = []string{"id"}
	blueprintUtilityGeneratedColumns      = []string{}
)

type (
	// BlueprintUtilitySlice is an alias for a slice of pointers to BlueprintUtility.
	// This should almost always be used instead of []BlueprintUtility.
	BlueprintUtilitySlice []*BlueprintUtility
	// BlueprintUtilityHook is the signature for custom BlueprintUtility hook methods
	BlueprintUtilityHook func(boil.Executor, *BlueprintUtility) error

	blueprintUtilityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blueprintUtilityType                 = reflect.TypeOf(&BlueprintUtility{})
	blueprintUtilityMapping              = queries.MakeStructMapping(blueprintUtilityType)
	blueprintUtilityPrimaryKeyMapping, _ = queries.BindMapping(blueprintUtilityType, blueprintUtilityMapping, blueprintUtilityPrimaryKeyColumns)
	blueprintUtilityInsertCacheMut       sync.RWMutex
	blueprintUtilityInsertCache          = make(map[string]insertCache)
	blueprintUtilityUpdateCacheMut       sync.RWMutex
	blueprintUtilityUpdateCache          = make(map[string]updateCache)
	blueprintUtilityUpsertCacheMut       sync.RWMutex
	blueprintUtilityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var blueprintUtilityAfterSelectHooks []BlueprintUtilityHook

var blueprintUtilityBeforeInsertHooks []BlueprintUtilityHook
var blueprintUtilityAfterInsertHooks []BlueprintUtilityHook

var blueprintUtilityBeforeUpdateHooks []BlueprintUtilityHook
var blueprintUtilityAfterUpdateHooks []BlueprintUtilityHook

var blueprintUtilityBeforeDeleteHooks []BlueprintUtilityHook
var blueprintUtilityAfterDeleteHooks []BlueprintUtilityHook

var blueprintUtilityBeforeUpsertHooks []BlueprintUtilityHook
var blueprintUtilityAfterUpsertHooks []BlueprintUtilityHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BlueprintUtility) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BlueprintUtility) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BlueprintUtility) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BlueprintUtility) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BlueprintUtility) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BlueprintUtility) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BlueprintUtility) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BlueprintUtility) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BlueprintUtility) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBlueprintUtilityHook registers your hook function for all future operations.
func AddBlueprintUtilityHook(hookPoint boil.HookPoint, blueprintUtilityHook BlueprintUtilityHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		blueprintUtilityAfterSelectHooks = append(blueprintUtilityAfterSelectHooks, blueprintUtilityHook)
	case boil.BeforeInsertHook:
		blueprintUtilityBeforeInsertHooks = append(blueprintUtilityBeforeInsertHooks, blueprintUtilityHook)
	case boil.AfterInsertHook:
		blueprintUtilityAfterInsertHooks = append(blueprintUtilityAfterInsertHooks, blueprintUtilityHook)
	case boil.BeforeUpdateHook:
		blueprintUtilityBeforeUpdateHooks = append(blueprintUtilityBeforeUpdateHooks, blueprintUtilityHook)
	case boil.AfterUpdateHook:
		blueprintUtilityAfterUpdateHooks = append(blueprintUtilityAfterUpdateHooks, blueprintUtilityHook)
	case boil.BeforeDeleteHook:
		blueprintUtilityBeforeDeleteHooks = append(blueprintUtilityBeforeDeleteHooks, blueprintUtilityHook)
	case boil.AfterDeleteHook:
		blueprintUtilityAfterDeleteHooks = append(blueprintUtilityAfterDeleteHooks, blueprintUtilityHook)
	case boil.BeforeUpsertHook:
		blueprintUtilityBeforeUpsertHooks = append(blueprintUtilityBeforeUpsertHooks, blueprintUtilityHook)
	case boil.AfterUpsertHook:
		blueprintUtilityAfterUpsertHooks = append(blueprintUtilityAfterUpsertHooks, blueprintUtilityHook)
	}
}

// One returns a single blueprintUtility record from the query.
func (q blueprintUtilityQuery) One(exec boil.Executor) (*BlueprintUtility, error) {
	o := &BlueprintUtility{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for blueprint_utility")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BlueprintUtility records from the query.
func (q blueprintUtilityQuery) All(exec boil.Executor) (BlueprintUtilitySlice, error) {
	var o []*BlueprintUtility

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BlueprintUtility slice")
	}

	if len(blueprintUtilityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BlueprintUtility records in the query.
func (q blueprintUtilityQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count blueprint_utility rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q blueprintUtilityQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if blueprint_utility exists")
	}

	return count > 0, nil
}

// Brand pointed to by the foreign key.
func (o *BlueprintUtility) Brand(mods ...qm.QueryMod) brandQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BrandID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Brands(queryMods...)
	queries.SetFrom(query.Query, "\"brands\"")

	return query
}

// BlueprintUtilityAccelerators retrieves all the blueprint_utility_accelerator's BlueprintUtilityAccelerators with an executor.
func (o *BlueprintUtility) BlueprintUtilityAccelerators(mods ...qm.QueryMod) blueprintUtilityAcceleratorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"blueprint_utility_accelerator\".\"blueprint_utility_id\"=?", o.ID),
	)

	query := BlueprintUtilityAccelerators(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_utility_accelerator\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"blueprint_utility_accelerator\".*"})
	}

	return query
}

// BlueprintUtilityAntiMissiles retrieves all the blueprint_utility_anti_missile's BlueprintUtilityAntiMissiles with an executor.
func (o *BlueprintUtility) BlueprintUtilityAntiMissiles(mods ...qm.QueryMod) blueprintUtilityAntiMissileQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"blueprint_utility_anti_missile\".\"blueprint_utility_id\"=?", o.ID),
	)

	query := BlueprintUtilityAntiMissiles(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_utility_anti_missile\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"blueprint_utility_anti_missile\".*"})
	}

	return query
}

// BlueprintUtilityAttackDrones retrieves all the blueprint_utility_attack_drone's BlueprintUtilityAttackDrones with an executor.
func (o *BlueprintUtility) BlueprintUtilityAttackDrones(mods ...qm.QueryMod) blueprintUtilityAttackDroneQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"blueprint_utility_attack_drone\".\"blueprint_utility_id\"=?", o.ID),
	)

	query := BlueprintUtilityAttackDrones(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_utility_attack_drone\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"blueprint_utility_attack_drone\".*"})
	}

	return query
}

// BlueprintUtilityRepairDrones retrieves all the blueprint_utility_repair_drone's BlueprintUtilityRepairDrones with an executor.
func (o *BlueprintUtility) BlueprintUtilityRepairDrones(mods ...qm.QueryMod) blueprintUtilityRepairDroneQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"blueprint_utility_repair_drone\".\"blueprint_utility_id\"=?", o.ID),
	)

	query := BlueprintUtilityRepairDrones(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_utility_repair_drone\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"blueprint_utility_repair_drone\".*"})
	}

	return query
}

// BlueprintUtilityShields retrieves all the blueprint_utility_shield's BlueprintUtilityShields with an executor.
func (o *BlueprintUtility) BlueprintUtilityShields(mods ...qm.QueryMod) blueprintUtilityShieldQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"blueprint_utility_shield\".\"blueprint_utility_id\"=?", o.ID),
	)

	query := BlueprintUtilityShields(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_utility_shield\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"blueprint_utility_shield\".*"})
	}

	return query
}

// BlueprintUtilities retrieves all the utility's Utilities with an executor via blueprint_id column.
func (o *BlueprintUtility) BlueprintUtilities(mods ...qm.QueryMod) utilityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"utility\".\"blueprint_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"utility\".\"deleted_at\""),
	)

	query := Utilities(queryMods...)
	queries.SetFrom(query.Query, "\"utility\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"utility\".*"})
	}

	return query
}

// LoadBrand allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blueprintUtilityL) LoadBrand(e boil.Executor, singular bool, maybeBlueprintUtility interface{}, mods queries.Applicator) error {
	var slice []*BlueprintUtility
	var object *BlueprintUtility

	if singular {
		object = maybeBlueprintUtility.(*BlueprintUtility)
	} else {
		slice = *maybeBlueprintUtility.(*[]*BlueprintUtility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintUtilityR{}
		}
		if !queries.IsNil(object.BrandID) {
			args = append(args, object.BrandID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintUtilityR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BrandID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BrandID) {
				args = append(args, obj.BrandID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`brands`),
		qm.WhereIn(`brands.id in ?`, args...),
		qmhelper.WhereIsNull(`brands.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Brand")
	}

	var resultSlice []*Brand
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Brand")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for brands")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for brands")
	}

	if len(blueprintUtilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Brand = foreign
		if foreign.R == nil {
			foreign.R = &brandR{}
		}
		foreign.R.BlueprintUtilities = append(foreign.R.BlueprintUtilities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BrandID, foreign.ID) {
				local.R.Brand = foreign
				if foreign.R == nil {
					foreign.R = &brandR{}
				}
				foreign.R.BlueprintUtilities = append(foreign.R.BlueprintUtilities, local)
				break
			}
		}
	}

	return nil
}

// LoadBlueprintUtilityAccelerators allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blueprintUtilityL) LoadBlueprintUtilityAccelerators(e boil.Executor, singular bool, maybeBlueprintUtility interface{}, mods queries.Applicator) error {
	var slice []*BlueprintUtility
	var object *BlueprintUtility

	if singular {
		object = maybeBlueprintUtility.(*BlueprintUtility)
	} else {
		slice = *maybeBlueprintUtility.(*[]*BlueprintUtility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintUtilityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintUtilityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_utility_accelerator`),
		qm.WhereIn(`blueprint_utility_accelerator.blueprint_utility_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blueprint_utility_accelerator")
	}

	var resultSlice []*BlueprintUtilityAccelerator
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blueprint_utility_accelerator")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blueprint_utility_accelerator")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_utility_accelerator")
	}

	if len(blueprintUtilityAcceleratorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlueprintUtilityAccelerators = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blueprintUtilityAcceleratorR{}
			}
			foreign.R.BlueprintUtility = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BlueprintUtilityID {
				local.R.BlueprintUtilityAccelerators = append(local.R.BlueprintUtilityAccelerators, foreign)
				if foreign.R == nil {
					foreign.R = &blueprintUtilityAcceleratorR{}
				}
				foreign.R.BlueprintUtility = local
				break
			}
		}
	}

	return nil
}

// LoadBlueprintUtilityAntiMissiles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blueprintUtilityL) LoadBlueprintUtilityAntiMissiles(e boil.Executor, singular bool, maybeBlueprintUtility interface{}, mods queries.Applicator) error {
	var slice []*BlueprintUtility
	var object *BlueprintUtility

	if singular {
		object = maybeBlueprintUtility.(*BlueprintUtility)
	} else {
		slice = *maybeBlueprintUtility.(*[]*BlueprintUtility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintUtilityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintUtilityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_utility_anti_missile`),
		qm.WhereIn(`blueprint_utility_anti_missile.blueprint_utility_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blueprint_utility_anti_missile")
	}

	var resultSlice []*BlueprintUtilityAntiMissile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blueprint_utility_anti_missile")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blueprint_utility_anti_missile")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_utility_anti_missile")
	}

	if len(blueprintUtilityAntiMissileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlueprintUtilityAntiMissiles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blueprintUtilityAntiMissileR{}
			}
			foreign.R.BlueprintUtility = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BlueprintUtilityID {
				local.R.BlueprintUtilityAntiMissiles = append(local.R.BlueprintUtilityAntiMissiles, foreign)
				if foreign.R == nil {
					foreign.R = &blueprintUtilityAntiMissileR{}
				}
				foreign.R.BlueprintUtility = local
				break
			}
		}
	}

	return nil
}

// LoadBlueprintUtilityAttackDrones allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blueprintUtilityL) LoadBlueprintUtilityAttackDrones(e boil.Executor, singular bool, maybeBlueprintUtility interface{}, mods queries.Applicator) error {
	var slice []*BlueprintUtility
	var object *BlueprintUtility

	if singular {
		object = maybeBlueprintUtility.(*BlueprintUtility)
	} else {
		slice = *maybeBlueprintUtility.(*[]*BlueprintUtility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintUtilityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintUtilityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_utility_attack_drone`),
		qm.WhereIn(`blueprint_utility_attack_drone.blueprint_utility_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blueprint_utility_attack_drone")
	}

	var resultSlice []*BlueprintUtilityAttackDrone
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blueprint_utility_attack_drone")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blueprint_utility_attack_drone")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_utility_attack_drone")
	}

	if len(blueprintUtilityAttackDroneAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlueprintUtilityAttackDrones = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blueprintUtilityAttackDroneR{}
			}
			foreign.R.BlueprintUtility = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BlueprintUtilityID {
				local.R.BlueprintUtilityAttackDrones = append(local.R.BlueprintUtilityAttackDrones, foreign)
				if foreign.R == nil {
					foreign.R = &blueprintUtilityAttackDroneR{}
				}
				foreign.R.BlueprintUtility = local
				break
			}
		}
	}

	return nil
}

// LoadBlueprintUtilityRepairDrones allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blueprintUtilityL) LoadBlueprintUtilityRepairDrones(e boil.Executor, singular bool, maybeBlueprintUtility interface{}, mods queries.Applicator) error {
	var slice []*BlueprintUtility
	var object *BlueprintUtility

	if singular {
		object = maybeBlueprintUtility.(*BlueprintUtility)
	} else {
		slice = *maybeBlueprintUtility.(*[]*BlueprintUtility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintUtilityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintUtilityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_utility_repair_drone`),
		qm.WhereIn(`blueprint_utility_repair_drone.blueprint_utility_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blueprint_utility_repair_drone")
	}

	var resultSlice []*BlueprintUtilityRepairDrone
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blueprint_utility_repair_drone")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blueprint_utility_repair_drone")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_utility_repair_drone")
	}

	if len(blueprintUtilityRepairDroneAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlueprintUtilityRepairDrones = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blueprintUtilityRepairDroneR{}
			}
			foreign.R.BlueprintUtility = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BlueprintUtilityID {
				local.R.BlueprintUtilityRepairDrones = append(local.R.BlueprintUtilityRepairDrones, foreign)
				if foreign.R == nil {
					foreign.R = &blueprintUtilityRepairDroneR{}
				}
				foreign.R.BlueprintUtility = local
				break
			}
		}
	}

	return nil
}

// LoadBlueprintUtilityShields allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blueprintUtilityL) LoadBlueprintUtilityShields(e boil.Executor, singular bool, maybeBlueprintUtility interface{}, mods queries.Applicator) error {
	var slice []*BlueprintUtility
	var object *BlueprintUtility

	if singular {
		object = maybeBlueprintUtility.(*BlueprintUtility)
	} else {
		slice = *maybeBlueprintUtility.(*[]*BlueprintUtility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintUtilityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintUtilityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_utility_shield`),
		qm.WhereIn(`blueprint_utility_shield.blueprint_utility_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blueprint_utility_shield")
	}

	var resultSlice []*BlueprintUtilityShield
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blueprint_utility_shield")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blueprint_utility_shield")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_utility_shield")
	}

	if len(blueprintUtilityShieldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlueprintUtilityShields = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blueprintUtilityShieldR{}
			}
			foreign.R.BlueprintUtility = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BlueprintUtilityID {
				local.R.BlueprintUtilityShields = append(local.R.BlueprintUtilityShields, foreign)
				if foreign.R == nil {
					foreign.R = &blueprintUtilityShieldR{}
				}
				foreign.R.BlueprintUtility = local
				break
			}
		}
	}

	return nil
}

// LoadBlueprintUtilities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blueprintUtilityL) LoadBlueprintUtilities(e boil.Executor, singular bool, maybeBlueprintUtility interface{}, mods queries.Applicator) error {
	var slice []*BlueprintUtility
	var object *BlueprintUtility

	if singular {
		object = maybeBlueprintUtility.(*BlueprintUtility)
	} else {
		slice = *maybeBlueprintUtility.(*[]*BlueprintUtility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintUtilityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintUtilityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`utility`),
		qm.WhereIn(`utility.blueprint_id in ?`, args...),
		qmhelper.WhereIsNull(`utility.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load utility")
	}

	var resultSlice []*Utility
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice utility")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on utility")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for utility")
	}

	if len(utilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlueprintUtilities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &utilityR{}
			}
			foreign.R.Blueprint = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BlueprintID {
				local.R.BlueprintUtilities = append(local.R.BlueprintUtilities, foreign)
				if foreign.R == nil {
					foreign.R = &utilityR{}
				}
				foreign.R.Blueprint = local
				break
			}
		}
	}

	return nil
}

// SetBrand of the blueprintUtility to the related item.
// Sets o.R.Brand to related.
// Adds o to related.R.BlueprintUtilities.
func (o *BlueprintUtility) SetBrand(exec boil.Executor, insert bool, related *Brand) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"blueprint_utility\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"brand_id"}),
		strmangle.WhereClause("\"", "\"", 2, blueprintUtilityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BrandID, related.ID)
	if o.R == nil {
		o.R = &blueprintUtilityR{
			Brand: related,
		}
	} else {
		o.R.Brand = related
	}

	if related.R == nil {
		related.R = &brandR{
			BlueprintUtilities: BlueprintUtilitySlice{o},
		}
	} else {
		related.R.BlueprintUtilities = append(related.R.BlueprintUtilities, o)
	}

	return nil
}

// RemoveBrand relationship.
// Sets o.R.Brand to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BlueprintUtility) RemoveBrand(exec boil.Executor, related *Brand) error {
	var err error

	queries.SetScanner(&o.BrandID, nil)
	if _, err = o.Update(exec, boil.Whitelist("brand_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Brand = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BlueprintUtilities {
		if queries.Equal(o.BrandID, ri.BrandID) {
			continue
		}

		ln := len(related.R.BlueprintUtilities)
		if ln > 1 && i < ln-1 {
			related.R.BlueprintUtilities[i] = related.R.BlueprintUtilities[ln-1]
		}
		related.R.BlueprintUtilities = related.R.BlueprintUtilities[:ln-1]
		break
	}
	return nil
}

// AddBlueprintUtilityAccelerators adds the given related objects to the existing relationships
// of the blueprint_utility, optionally inserting them as new records.
// Appends related to o.R.BlueprintUtilityAccelerators.
// Sets related.R.BlueprintUtility appropriately.
func (o *BlueprintUtility) AddBlueprintUtilityAccelerators(exec boil.Executor, insert bool, related ...*BlueprintUtilityAccelerator) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BlueprintUtilityID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"blueprint_utility_accelerator\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_utility_id"}),
				strmangle.WhereClause("\"", "\"", 2, blueprintUtilityAcceleratorPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BlueprintUtilityID = o.ID
		}
	}

	if o.R == nil {
		o.R = &blueprintUtilityR{
			BlueprintUtilityAccelerators: related,
		}
	} else {
		o.R.BlueprintUtilityAccelerators = append(o.R.BlueprintUtilityAccelerators, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blueprintUtilityAcceleratorR{
				BlueprintUtility: o,
			}
		} else {
			rel.R.BlueprintUtility = o
		}
	}
	return nil
}

// AddBlueprintUtilityAntiMissiles adds the given related objects to the existing relationships
// of the blueprint_utility, optionally inserting them as new records.
// Appends related to o.R.BlueprintUtilityAntiMissiles.
// Sets related.R.BlueprintUtility appropriately.
func (o *BlueprintUtility) AddBlueprintUtilityAntiMissiles(exec boil.Executor, insert bool, related ...*BlueprintUtilityAntiMissile) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BlueprintUtilityID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"blueprint_utility_anti_missile\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_utility_id"}),
				strmangle.WhereClause("\"", "\"", 2, blueprintUtilityAntiMissilePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BlueprintUtilityID = o.ID
		}
	}

	if o.R == nil {
		o.R = &blueprintUtilityR{
			BlueprintUtilityAntiMissiles: related,
		}
	} else {
		o.R.BlueprintUtilityAntiMissiles = append(o.R.BlueprintUtilityAntiMissiles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blueprintUtilityAntiMissileR{
				BlueprintUtility: o,
			}
		} else {
			rel.R.BlueprintUtility = o
		}
	}
	return nil
}

// AddBlueprintUtilityAttackDrones adds the given related objects to the existing relationships
// of the blueprint_utility, optionally inserting them as new records.
// Appends related to o.R.BlueprintUtilityAttackDrones.
// Sets related.R.BlueprintUtility appropriately.
func (o *BlueprintUtility) AddBlueprintUtilityAttackDrones(exec boil.Executor, insert bool, related ...*BlueprintUtilityAttackDrone) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BlueprintUtilityID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"blueprint_utility_attack_drone\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_utility_id"}),
				strmangle.WhereClause("\"", "\"", 2, blueprintUtilityAttackDronePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BlueprintUtilityID = o.ID
		}
	}

	if o.R == nil {
		o.R = &blueprintUtilityR{
			BlueprintUtilityAttackDrones: related,
		}
	} else {
		o.R.BlueprintUtilityAttackDrones = append(o.R.BlueprintUtilityAttackDrones, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blueprintUtilityAttackDroneR{
				BlueprintUtility: o,
			}
		} else {
			rel.R.BlueprintUtility = o
		}
	}
	return nil
}

// AddBlueprintUtilityRepairDrones adds the given related objects to the existing relationships
// of the blueprint_utility, optionally inserting them as new records.
// Appends related to o.R.BlueprintUtilityRepairDrones.
// Sets related.R.BlueprintUtility appropriately.
func (o *BlueprintUtility) AddBlueprintUtilityRepairDrones(exec boil.Executor, insert bool, related ...*BlueprintUtilityRepairDrone) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BlueprintUtilityID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"blueprint_utility_repair_drone\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_utility_id"}),
				strmangle.WhereClause("\"", "\"", 2, blueprintUtilityRepairDronePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BlueprintUtilityID = o.ID
		}
	}

	if o.R == nil {
		o.R = &blueprintUtilityR{
			BlueprintUtilityRepairDrones: related,
		}
	} else {
		o.R.BlueprintUtilityRepairDrones = append(o.R.BlueprintUtilityRepairDrones, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blueprintUtilityRepairDroneR{
				BlueprintUtility: o,
			}
		} else {
			rel.R.BlueprintUtility = o
		}
	}
	return nil
}

// AddBlueprintUtilityShields adds the given related objects to the existing relationships
// of the blueprint_utility, optionally inserting them as new records.
// Appends related to o.R.BlueprintUtilityShields.
// Sets related.R.BlueprintUtility appropriately.
func (o *BlueprintUtility) AddBlueprintUtilityShields(exec boil.Executor, insert bool, related ...*BlueprintUtilityShield) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BlueprintUtilityID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"blueprint_utility_shield\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_utility_id"}),
				strmangle.WhereClause("\"", "\"", 2, blueprintUtilityShieldPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BlueprintUtilityID = o.ID
		}
	}

	if o.R == nil {
		o.R = &blueprintUtilityR{
			BlueprintUtilityShields: related,
		}
	} else {
		o.R.BlueprintUtilityShields = append(o.R.BlueprintUtilityShields, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blueprintUtilityShieldR{
				BlueprintUtility: o,
			}
		} else {
			rel.R.BlueprintUtility = o
		}
	}
	return nil
}

// AddBlueprintUtilities adds the given related objects to the existing relationships
// of the blueprint_utility, optionally inserting them as new records.
// Appends related to o.R.BlueprintUtilities.
// Sets related.R.Blueprint appropriately.
func (o *BlueprintUtility) AddBlueprintUtilities(exec boil.Executor, insert bool, related ...*Utility) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BlueprintID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"utility\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_id"}),
				strmangle.WhereClause("\"", "\"", 2, utilityPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BlueprintID = o.ID
		}
	}

	if o.R == nil {
		o.R = &blueprintUtilityR{
			BlueprintUtilities: related,
		}
	} else {
		o.R.BlueprintUtilities = append(o.R.BlueprintUtilities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &utilityR{
				Blueprint: o,
			}
		} else {
			rel.R.Blueprint = o
		}
	}
	return nil
}

// BlueprintUtilities retrieves all the records using an executor.
func BlueprintUtilities(mods ...qm.QueryMod) blueprintUtilityQuery {
	mods = append(mods, qm.From("\"blueprint_utility\""), qmhelper.WhereIsNull("\"blueprint_utility\".\"deleted_at\""))
	return blueprintUtilityQuery{NewQuery(mods...)}
}

// FindBlueprintUtility retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlueprintUtility(exec boil.Executor, iD string, selectCols ...string) (*BlueprintUtility, error) {
	blueprintUtilityObj := &BlueprintUtility{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"blueprint_utility\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, blueprintUtilityObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from blueprint_utility")
	}

	if err = blueprintUtilityObj.doAfterSelectHooks(exec); err != nil {
		return blueprintUtilityObj, err
	}

	return blueprintUtilityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlueprintUtility) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_utility provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintUtilityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blueprintUtilityInsertCacheMut.RLock()
	cache, cached := blueprintUtilityInsertCache[key]
	blueprintUtilityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blueprintUtilityAllColumns,
			blueprintUtilityColumnsWithDefault,
			blueprintUtilityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blueprintUtilityType, blueprintUtilityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blueprintUtilityType, blueprintUtilityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"blueprint_utility\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"blueprint_utility\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into blueprint_utility")
	}

	if !cached {
		blueprintUtilityInsertCacheMut.Lock()
		blueprintUtilityInsertCache[key] = cache
		blueprintUtilityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BlueprintUtility.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlueprintUtility) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	blueprintUtilityUpdateCacheMut.RLock()
	cache, cached := blueprintUtilityUpdateCache[key]
	blueprintUtilityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blueprintUtilityAllColumns,
			blueprintUtilityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update blueprint_utility, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"blueprint_utility\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, blueprintUtilityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blueprintUtilityType, blueprintUtilityMapping, append(wl, blueprintUtilityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update blueprint_utility row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for blueprint_utility")
	}

	if !cached {
		blueprintUtilityUpdateCacheMut.Lock()
		blueprintUtilityUpdateCache[key] = cache
		blueprintUtilityUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q blueprintUtilityQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for blueprint_utility")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for blueprint_utility")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlueprintUtilitySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintUtilityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"blueprint_utility\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, blueprintUtilityPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in blueprintUtility slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all blueprintUtility")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlueprintUtility) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_utility provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintUtilityColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blueprintUtilityUpsertCacheMut.RLock()
	cache, cached := blueprintUtilityUpsertCache[key]
	blueprintUtilityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blueprintUtilityAllColumns,
			blueprintUtilityColumnsWithDefault,
			blueprintUtilityColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			blueprintUtilityAllColumns,
			blueprintUtilityPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert blueprint_utility, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(blueprintUtilityPrimaryKeyColumns))
			copy(conflict, blueprintUtilityPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"blueprint_utility\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(blueprintUtilityType, blueprintUtilityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blueprintUtilityType, blueprintUtilityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert blueprint_utility")
	}

	if !cached {
		blueprintUtilityUpsertCacheMut.Lock()
		blueprintUtilityUpsertCache[key] = cache
		blueprintUtilityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BlueprintUtility record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlueprintUtility) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BlueprintUtility provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blueprintUtilityPrimaryKeyMapping)
		sql = "DELETE FROM \"blueprint_utility\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"blueprint_utility\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(blueprintUtilityType, blueprintUtilityMapping, append(wl, blueprintUtilityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from blueprint_utility")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for blueprint_utility")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q blueprintUtilityQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no blueprintUtilityQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprint_utility")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_utility")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlueprintUtilitySlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(blueprintUtilityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintUtilityPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"blueprint_utility\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintUtilityPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintUtilityPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"blueprint_utility\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, blueprintUtilityPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprintUtility slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_utility")
	}

	if len(blueprintUtilityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlueprintUtility) Reload(exec boil.Executor) error {
	ret, err := FindBlueprintUtility(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlueprintUtilitySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlueprintUtilitySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintUtilityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"blueprint_utility\".* FROM \"blueprint_utility\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintUtilityPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BlueprintUtilitySlice")
	}

	*o = slice

	return nil
}

// BlueprintUtilityExists checks if the BlueprintUtility row exists.
func BlueprintUtilityExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"blueprint_utility\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if blueprint_utility exists")
	}

	return exists, nil
}
