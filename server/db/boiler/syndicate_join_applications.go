// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SyndicateJoinApplication is an object representing the database table.
type SyndicateJoinApplication struct {
	ID          string          `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	SyndicateID string          `boiler:"syndicate_id" boil:"syndicate_id" json:"syndicate_id" toml:"syndicate_id" yaml:"syndicate_id"`
	ApplicantID string          `boiler:"applicant_id" boil:"applicant_id" json:"applicant_id" toml:"applicant_id" yaml:"applicant_id"`
	ExpireAt    time.Time       `boiler:"expire_at" boil:"expire_at" json:"expire_at" toml:"expire_at" yaml:"expire_at"`
	PaidAmount  decimal.Decimal `boiler:"paid_amount" boil:"paid_amount" json:"paid_amount" toml:"paid_amount" yaml:"paid_amount"`
	TXID        null.String     `boiler:"tx_id" boil:"tx_id" json:"tx_id,omitempty" toml:"tx_id" yaml:"tx_id,omitempty"`
	RefundTXID  null.String     `boiler:"refund_tx_id" boil:"refund_tx_id" json:"refund_tx_id,omitempty" toml:"refund_tx_id" yaml:"refund_tx_id,omitempty"`
	Result      null.String     `boiler:"result" boil:"result" json:"result,omitempty" toml:"result" yaml:"result,omitempty"`
	Note        null.String     `boiler:"note" boil:"note" json:"note,omitempty" toml:"note" yaml:"note,omitempty"`
	FinalisedAt null.Time       `boiler:"finalised_at" boil:"finalised_at" json:"finalised_at,omitempty" toml:"finalised_at" yaml:"finalised_at,omitempty"`
	CreatedAt   time.Time       `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time       `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt   null.Time       `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *syndicateJoinApplicationR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L syndicateJoinApplicationL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SyndicateJoinApplicationColumns = struct {
	ID          string
	SyndicateID string
	ApplicantID string
	ExpireAt    string
	PaidAmount  string
	TXID        string
	RefundTXID  string
	Result      string
	Note        string
	FinalisedAt string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "id",
	SyndicateID: "syndicate_id",
	ApplicantID: "applicant_id",
	ExpireAt:    "expire_at",
	PaidAmount:  "paid_amount",
	TXID:        "tx_id",
	RefundTXID:  "refund_tx_id",
	Result:      "result",
	Note:        "note",
	FinalisedAt: "finalised_at",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
}

var SyndicateJoinApplicationTableColumns = struct {
	ID          string
	SyndicateID string
	ApplicantID string
	ExpireAt    string
	PaidAmount  string
	TXID        string
	RefundTXID  string
	Result      string
	Note        string
	FinalisedAt string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "syndicate_join_applications.id",
	SyndicateID: "syndicate_join_applications.syndicate_id",
	ApplicantID: "syndicate_join_applications.applicant_id",
	ExpireAt:    "syndicate_join_applications.expire_at",
	PaidAmount:  "syndicate_join_applications.paid_amount",
	TXID:        "syndicate_join_applications.tx_id",
	RefundTXID:  "syndicate_join_applications.refund_tx_id",
	Result:      "syndicate_join_applications.result",
	Note:        "syndicate_join_applications.note",
	FinalisedAt: "syndicate_join_applications.finalised_at",
	CreatedAt:   "syndicate_join_applications.created_at",
	UpdatedAt:   "syndicate_join_applications.updated_at",
	DeletedAt:   "syndicate_join_applications.deleted_at",
}

// Generated where

var SyndicateJoinApplicationWhere = struct {
	ID          whereHelperstring
	SyndicateID whereHelperstring
	ApplicantID whereHelperstring
	ExpireAt    whereHelpertime_Time
	PaidAmount  whereHelperdecimal_Decimal
	TXID        whereHelpernull_String
	RefundTXID  whereHelpernull_String
	Result      whereHelpernull_String
	Note        whereHelpernull_String
	FinalisedAt whereHelpernull_Time
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	DeletedAt   whereHelpernull_Time
}{
	ID:          whereHelperstring{field: "\"syndicate_join_applications\".\"id\""},
	SyndicateID: whereHelperstring{field: "\"syndicate_join_applications\".\"syndicate_id\""},
	ApplicantID: whereHelperstring{field: "\"syndicate_join_applications\".\"applicant_id\""},
	ExpireAt:    whereHelpertime_Time{field: "\"syndicate_join_applications\".\"expire_at\""},
	PaidAmount:  whereHelperdecimal_Decimal{field: "\"syndicate_join_applications\".\"paid_amount\""},
	TXID:        whereHelpernull_String{field: "\"syndicate_join_applications\".\"tx_id\""},
	RefundTXID:  whereHelpernull_String{field: "\"syndicate_join_applications\".\"refund_tx_id\""},
	Result:      whereHelpernull_String{field: "\"syndicate_join_applications\".\"result\""},
	Note:        whereHelpernull_String{field: "\"syndicate_join_applications\".\"note\""},
	FinalisedAt: whereHelpernull_Time{field: "\"syndicate_join_applications\".\"finalised_at\""},
	CreatedAt:   whereHelpertime_Time{field: "\"syndicate_join_applications\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"syndicate_join_applications\".\"updated_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"syndicate_join_applications\".\"deleted_at\""},
}

// SyndicateJoinApplicationRels is where relationship names are stored.
var SyndicateJoinApplicationRels = struct {
	Applicant                   string
	Syndicate                   string
	ApplicationApplicationVotes string
	QuestionnaireAnswers        string
}{
	Applicant:                   "Applicant",
	Syndicate:                   "Syndicate",
	ApplicationApplicationVotes: "ApplicationApplicationVotes",
	QuestionnaireAnswers:        "QuestionnaireAnswers",
}

// syndicateJoinApplicationR is where relationships are stored.
type syndicateJoinApplicationR struct {
	Applicant                   *Player                  `boiler:"Applicant" boil:"Applicant" json:"Applicant" toml:"Applicant" yaml:"Applicant"`
	Syndicate                   *Syndicate               `boiler:"Syndicate" boil:"Syndicate" json:"Syndicate" toml:"Syndicate" yaml:"Syndicate"`
	ApplicationApplicationVotes ApplicationVoteSlice     `boiler:"ApplicationApplicationVotes" boil:"ApplicationApplicationVotes" json:"ApplicationApplicationVotes" toml:"ApplicationApplicationVotes" yaml:"ApplicationApplicationVotes"`
	QuestionnaireAnswers        QuestionnaireAnswerSlice `boiler:"QuestionnaireAnswers" boil:"QuestionnaireAnswers" json:"QuestionnaireAnswers" toml:"QuestionnaireAnswers" yaml:"QuestionnaireAnswers"`
}

// NewStruct creates a new relationship struct
func (*syndicateJoinApplicationR) NewStruct() *syndicateJoinApplicationR {
	return &syndicateJoinApplicationR{}
}

// syndicateJoinApplicationL is where Load methods for each relationship are stored.
type syndicateJoinApplicationL struct{}

var (
	syndicateJoinApplicationAllColumns            = []string{"id", "syndicate_id", "applicant_id", "expire_at", "paid_amount", "tx_id", "refund_tx_id", "result", "note", "finalised_at", "created_at", "updated_at", "deleted_at"}
	syndicateJoinApplicationColumnsWithoutDefault = []string{"syndicate_id", "applicant_id", "expire_at", "paid_amount"}
	syndicateJoinApplicationColumnsWithDefault    = []string{"id", "tx_id", "refund_tx_id", "result", "note", "finalised_at", "created_at", "updated_at", "deleted_at"}
	syndicateJoinApplicationPrimaryKeyColumns     = []string{"id"}
	syndicateJoinApplicationGeneratedColumns      = []string{}
)

type (
	// SyndicateJoinApplicationSlice is an alias for a slice of pointers to SyndicateJoinApplication.
	// This should almost always be used instead of []SyndicateJoinApplication.
	SyndicateJoinApplicationSlice []*SyndicateJoinApplication
	// SyndicateJoinApplicationHook is the signature for custom SyndicateJoinApplication hook methods
	SyndicateJoinApplicationHook func(boil.Executor, *SyndicateJoinApplication) error

	syndicateJoinApplicationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	syndicateJoinApplicationType                 = reflect.TypeOf(&SyndicateJoinApplication{})
	syndicateJoinApplicationMapping              = queries.MakeStructMapping(syndicateJoinApplicationType)
	syndicateJoinApplicationPrimaryKeyMapping, _ = queries.BindMapping(syndicateJoinApplicationType, syndicateJoinApplicationMapping, syndicateJoinApplicationPrimaryKeyColumns)
	syndicateJoinApplicationInsertCacheMut       sync.RWMutex
	syndicateJoinApplicationInsertCache          = make(map[string]insertCache)
	syndicateJoinApplicationUpdateCacheMut       sync.RWMutex
	syndicateJoinApplicationUpdateCache          = make(map[string]updateCache)
	syndicateJoinApplicationUpsertCacheMut       sync.RWMutex
	syndicateJoinApplicationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var syndicateJoinApplicationAfterSelectHooks []SyndicateJoinApplicationHook

var syndicateJoinApplicationBeforeInsertHooks []SyndicateJoinApplicationHook
var syndicateJoinApplicationAfterInsertHooks []SyndicateJoinApplicationHook

var syndicateJoinApplicationBeforeUpdateHooks []SyndicateJoinApplicationHook
var syndicateJoinApplicationAfterUpdateHooks []SyndicateJoinApplicationHook

var syndicateJoinApplicationBeforeDeleteHooks []SyndicateJoinApplicationHook
var syndicateJoinApplicationAfterDeleteHooks []SyndicateJoinApplicationHook

var syndicateJoinApplicationBeforeUpsertHooks []SyndicateJoinApplicationHook
var syndicateJoinApplicationAfterUpsertHooks []SyndicateJoinApplicationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SyndicateJoinApplication) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateJoinApplicationAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SyndicateJoinApplication) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateJoinApplicationBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SyndicateJoinApplication) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateJoinApplicationAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SyndicateJoinApplication) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateJoinApplicationBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SyndicateJoinApplication) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateJoinApplicationAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SyndicateJoinApplication) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateJoinApplicationBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SyndicateJoinApplication) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateJoinApplicationAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SyndicateJoinApplication) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateJoinApplicationBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SyndicateJoinApplication) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateJoinApplicationAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSyndicateJoinApplicationHook registers your hook function for all future operations.
func AddSyndicateJoinApplicationHook(hookPoint boil.HookPoint, syndicateJoinApplicationHook SyndicateJoinApplicationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		syndicateJoinApplicationAfterSelectHooks = append(syndicateJoinApplicationAfterSelectHooks, syndicateJoinApplicationHook)
	case boil.BeforeInsertHook:
		syndicateJoinApplicationBeforeInsertHooks = append(syndicateJoinApplicationBeforeInsertHooks, syndicateJoinApplicationHook)
	case boil.AfterInsertHook:
		syndicateJoinApplicationAfterInsertHooks = append(syndicateJoinApplicationAfterInsertHooks, syndicateJoinApplicationHook)
	case boil.BeforeUpdateHook:
		syndicateJoinApplicationBeforeUpdateHooks = append(syndicateJoinApplicationBeforeUpdateHooks, syndicateJoinApplicationHook)
	case boil.AfterUpdateHook:
		syndicateJoinApplicationAfterUpdateHooks = append(syndicateJoinApplicationAfterUpdateHooks, syndicateJoinApplicationHook)
	case boil.BeforeDeleteHook:
		syndicateJoinApplicationBeforeDeleteHooks = append(syndicateJoinApplicationBeforeDeleteHooks, syndicateJoinApplicationHook)
	case boil.AfterDeleteHook:
		syndicateJoinApplicationAfterDeleteHooks = append(syndicateJoinApplicationAfterDeleteHooks, syndicateJoinApplicationHook)
	case boil.BeforeUpsertHook:
		syndicateJoinApplicationBeforeUpsertHooks = append(syndicateJoinApplicationBeforeUpsertHooks, syndicateJoinApplicationHook)
	case boil.AfterUpsertHook:
		syndicateJoinApplicationAfterUpsertHooks = append(syndicateJoinApplicationAfterUpsertHooks, syndicateJoinApplicationHook)
	}
}

// One returns a single syndicateJoinApplication record from the query.
func (q syndicateJoinApplicationQuery) One(exec boil.Executor) (*SyndicateJoinApplication, error) {
	o := &SyndicateJoinApplication{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for syndicate_join_applications")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SyndicateJoinApplication records from the query.
func (q syndicateJoinApplicationQuery) All(exec boil.Executor) (SyndicateJoinApplicationSlice, error) {
	var o []*SyndicateJoinApplication

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to SyndicateJoinApplication slice")
	}

	if len(syndicateJoinApplicationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SyndicateJoinApplication records in the query.
func (q syndicateJoinApplicationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count syndicate_join_applications rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q syndicateJoinApplicationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if syndicate_join_applications exists")
	}

	return count > 0, nil
}

// Applicant pointed to by the foreign key.
func (o *SyndicateJoinApplication) Applicant(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ApplicantID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// Syndicate pointed to by the foreign key.
func (o *SyndicateJoinApplication) Syndicate(mods ...qm.QueryMod) syndicateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SyndicateID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Syndicates(queryMods...)
	queries.SetFrom(query.Query, "\"syndicates\"")

	return query
}

// ApplicationApplicationVotes retrieves all the application_vote's ApplicationVotes with an executor via application_id column.
func (o *SyndicateJoinApplication) ApplicationApplicationVotes(mods ...qm.QueryMod) applicationVoteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"application_votes\".\"application_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"application_votes\".\"deleted_at\""),
	)

	query := ApplicationVotes(queryMods...)
	queries.SetFrom(query.Query, "\"application_votes\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"application_votes\".*"})
	}

	return query
}

// QuestionnaireAnswers retrieves all the questionnaire_answer's QuestionnaireAnswers with an executor.
func (o *SyndicateJoinApplication) QuestionnaireAnswers(mods ...qm.QueryMod) questionnaireAnswerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"questionnaire_answer\".\"syndicate_join_application_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"questionnaire_answer\".\"deleted_at\""),
	)

	query := QuestionnaireAnswers(queryMods...)
	queries.SetFrom(query.Query, "\"questionnaire_answer\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"questionnaire_answer\".*"})
	}

	return query
}

// LoadApplicant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateJoinApplicationL) LoadApplicant(e boil.Executor, singular bool, maybeSyndicateJoinApplication interface{}, mods queries.Applicator) error {
	var slice []*SyndicateJoinApplication
	var object *SyndicateJoinApplication

	if singular {
		object = maybeSyndicateJoinApplication.(*SyndicateJoinApplication)
	} else {
		slice = *maybeSyndicateJoinApplication.(*[]*SyndicateJoinApplication)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateJoinApplicationR{}
		}
		args = append(args, object.ApplicantID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateJoinApplicationR{}
			}

			for _, a := range args {
				if a == obj.ApplicantID {
					continue Outer
				}
			}

			args = append(args, obj.ApplicantID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(syndicateJoinApplicationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Applicant = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.ApplicantSyndicateJoinApplications = append(foreign.R.ApplicantSyndicateJoinApplications, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ApplicantID == foreign.ID {
				local.R.Applicant = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.ApplicantSyndicateJoinApplications = append(foreign.R.ApplicantSyndicateJoinApplications, local)
				break
			}
		}
	}

	return nil
}

// LoadSyndicate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateJoinApplicationL) LoadSyndicate(e boil.Executor, singular bool, maybeSyndicateJoinApplication interface{}, mods queries.Applicator) error {
	var slice []*SyndicateJoinApplication
	var object *SyndicateJoinApplication

	if singular {
		object = maybeSyndicateJoinApplication.(*SyndicateJoinApplication)
	} else {
		slice = *maybeSyndicateJoinApplication.(*[]*SyndicateJoinApplication)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateJoinApplicationR{}
		}
		args = append(args, object.SyndicateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateJoinApplicationR{}
			}

			for _, a := range args {
				if a == obj.SyndicateID {
					continue Outer
				}
			}

			args = append(args, obj.SyndicateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicates`),
		qm.WhereIn(`syndicates.id in ?`, args...),
		qmhelper.WhereIsNull(`syndicates.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Syndicate")
	}

	var resultSlice []*Syndicate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Syndicate")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for syndicates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicates")
	}

	if len(syndicateJoinApplicationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Syndicate = foreign
		if foreign.R == nil {
			foreign.R = &syndicateR{}
		}
		foreign.R.SyndicateJoinApplications = append(foreign.R.SyndicateJoinApplications, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SyndicateID == foreign.ID {
				local.R.Syndicate = foreign
				if foreign.R == nil {
					foreign.R = &syndicateR{}
				}
				foreign.R.SyndicateJoinApplications = append(foreign.R.SyndicateJoinApplications, local)
				break
			}
		}
	}

	return nil
}

// LoadApplicationApplicationVotes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (syndicateJoinApplicationL) LoadApplicationApplicationVotes(e boil.Executor, singular bool, maybeSyndicateJoinApplication interface{}, mods queries.Applicator) error {
	var slice []*SyndicateJoinApplication
	var object *SyndicateJoinApplication

	if singular {
		object = maybeSyndicateJoinApplication.(*SyndicateJoinApplication)
	} else {
		slice = *maybeSyndicateJoinApplication.(*[]*SyndicateJoinApplication)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateJoinApplicationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateJoinApplicationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`application_votes`),
		qm.WhereIn(`application_votes.application_id in ?`, args...),
		qmhelper.WhereIsNull(`application_votes.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load application_votes")
	}

	var resultSlice []*ApplicationVote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice application_votes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on application_votes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for application_votes")
	}

	if len(applicationVoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ApplicationApplicationVotes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &applicationVoteR{}
			}
			foreign.R.Application = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ApplicationID {
				local.R.ApplicationApplicationVotes = append(local.R.ApplicationApplicationVotes, foreign)
				if foreign.R == nil {
					foreign.R = &applicationVoteR{}
				}
				foreign.R.Application = local
				break
			}
		}
	}

	return nil
}

// LoadQuestionnaireAnswers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (syndicateJoinApplicationL) LoadQuestionnaireAnswers(e boil.Executor, singular bool, maybeSyndicateJoinApplication interface{}, mods queries.Applicator) error {
	var slice []*SyndicateJoinApplication
	var object *SyndicateJoinApplication

	if singular {
		object = maybeSyndicateJoinApplication.(*SyndicateJoinApplication)
	} else {
		slice = *maybeSyndicateJoinApplication.(*[]*SyndicateJoinApplication)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateJoinApplicationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateJoinApplicationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`questionnaire_answer`),
		qm.WhereIn(`questionnaire_answer.syndicate_join_application_id in ?`, args...),
		qmhelper.WhereIsNull(`questionnaire_answer.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load questionnaire_answer")
	}

	var resultSlice []*QuestionnaireAnswer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice questionnaire_answer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on questionnaire_answer")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for questionnaire_answer")
	}

	if len(questionnaireAnswerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.QuestionnaireAnswers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &questionnaireAnswerR{}
			}
			foreign.R.SyndicateJoinApplication = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SyndicateJoinApplicationID) {
				local.R.QuestionnaireAnswers = append(local.R.QuestionnaireAnswers, foreign)
				if foreign.R == nil {
					foreign.R = &questionnaireAnswerR{}
				}
				foreign.R.SyndicateJoinApplication = local
				break
			}
		}
	}

	return nil
}

// SetApplicant of the syndicateJoinApplication to the related item.
// Sets o.R.Applicant to related.
// Adds o to related.R.ApplicantSyndicateJoinApplications.
func (o *SyndicateJoinApplication) SetApplicant(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicate_join_applications\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"applicant_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicateJoinApplicationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ApplicantID = related.ID
	if o.R == nil {
		o.R = &syndicateJoinApplicationR{
			Applicant: related,
		}
	} else {
		o.R.Applicant = related
	}

	if related.R == nil {
		related.R = &playerR{
			ApplicantSyndicateJoinApplications: SyndicateJoinApplicationSlice{o},
		}
	} else {
		related.R.ApplicantSyndicateJoinApplications = append(related.R.ApplicantSyndicateJoinApplications, o)
	}

	return nil
}

// SetSyndicate of the syndicateJoinApplication to the related item.
// Sets o.R.Syndicate to related.
// Adds o to related.R.SyndicateJoinApplications.
func (o *SyndicateJoinApplication) SetSyndicate(exec boil.Executor, insert bool, related *Syndicate) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicate_join_applications\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"syndicate_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicateJoinApplicationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SyndicateID = related.ID
	if o.R == nil {
		o.R = &syndicateJoinApplicationR{
			Syndicate: related,
		}
	} else {
		o.R.Syndicate = related
	}

	if related.R == nil {
		related.R = &syndicateR{
			SyndicateJoinApplications: SyndicateJoinApplicationSlice{o},
		}
	} else {
		related.R.SyndicateJoinApplications = append(related.R.SyndicateJoinApplications, o)
	}

	return nil
}

// AddApplicationApplicationVotes adds the given related objects to the existing relationships
// of the syndicate_join_application, optionally inserting them as new records.
// Appends related to o.R.ApplicationApplicationVotes.
// Sets related.R.Application appropriately.
func (o *SyndicateJoinApplication) AddApplicationApplicationVotes(exec boil.Executor, insert bool, related ...*ApplicationVote) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ApplicationID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"application_votes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"application_id"}),
				strmangle.WhereClause("\"", "\"", 2, applicationVotePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ApplicationID, rel.VotedByID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ApplicationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &syndicateJoinApplicationR{
			ApplicationApplicationVotes: related,
		}
	} else {
		o.R.ApplicationApplicationVotes = append(o.R.ApplicationApplicationVotes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &applicationVoteR{
				Application: o,
			}
		} else {
			rel.R.Application = o
		}
	}
	return nil
}

// AddQuestionnaireAnswers adds the given related objects to the existing relationships
// of the syndicate_join_application, optionally inserting them as new records.
// Appends related to o.R.QuestionnaireAnswers.
// Sets related.R.SyndicateJoinApplication appropriately.
func (o *SyndicateJoinApplication) AddQuestionnaireAnswers(exec boil.Executor, insert bool, related ...*QuestionnaireAnswer) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SyndicateJoinApplicationID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"questionnaire_answer\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"syndicate_join_application_id"}),
				strmangle.WhereClause("\"", "\"", 2, questionnaireAnswerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SyndicateJoinApplicationID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &syndicateJoinApplicationR{
			QuestionnaireAnswers: related,
		}
	} else {
		o.R.QuestionnaireAnswers = append(o.R.QuestionnaireAnswers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &questionnaireAnswerR{
				SyndicateJoinApplication: o,
			}
		} else {
			rel.R.SyndicateJoinApplication = o
		}
	}
	return nil
}

// SetQuestionnaireAnswers removes all previously related items of the
// syndicate_join_application replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SyndicateJoinApplication's QuestionnaireAnswers accordingly.
// Replaces o.R.QuestionnaireAnswers with related.
// Sets related.R.SyndicateJoinApplication's QuestionnaireAnswers accordingly.
func (o *SyndicateJoinApplication) SetQuestionnaireAnswers(exec boil.Executor, insert bool, related ...*QuestionnaireAnswer) error {
	query := "update \"questionnaire_answer\" set \"syndicate_join_application_id\" = null where \"syndicate_join_application_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.QuestionnaireAnswers {
			queries.SetScanner(&rel.SyndicateJoinApplicationID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SyndicateJoinApplication = nil
		}

		o.R.QuestionnaireAnswers = nil
	}
	return o.AddQuestionnaireAnswers(exec, insert, related...)
}

// RemoveQuestionnaireAnswers relationships from objects passed in.
// Removes related items from R.QuestionnaireAnswers (uses pointer comparison, removal does not keep order)
// Sets related.R.SyndicateJoinApplication.
func (o *SyndicateJoinApplication) RemoveQuestionnaireAnswers(exec boil.Executor, related ...*QuestionnaireAnswer) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SyndicateJoinApplicationID, nil)
		if rel.R != nil {
			rel.R.SyndicateJoinApplication = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("syndicate_join_application_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.QuestionnaireAnswers {
			if rel != ri {
				continue
			}

			ln := len(o.R.QuestionnaireAnswers)
			if ln > 1 && i < ln-1 {
				o.R.QuestionnaireAnswers[i] = o.R.QuestionnaireAnswers[ln-1]
			}
			o.R.QuestionnaireAnswers = o.R.QuestionnaireAnswers[:ln-1]
			break
		}
	}

	return nil
}

// SyndicateJoinApplications retrieves all the records using an executor.
func SyndicateJoinApplications(mods ...qm.QueryMod) syndicateJoinApplicationQuery {
	mods = append(mods, qm.From("\"syndicate_join_applications\""), qmhelper.WhereIsNull("\"syndicate_join_applications\".\"deleted_at\""))
	return syndicateJoinApplicationQuery{NewQuery(mods...)}
}

// FindSyndicateJoinApplication retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSyndicateJoinApplication(exec boil.Executor, iD string, selectCols ...string) (*SyndicateJoinApplication, error) {
	syndicateJoinApplicationObj := &SyndicateJoinApplication{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"syndicate_join_applications\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, syndicateJoinApplicationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from syndicate_join_applications")
	}

	if err = syndicateJoinApplicationObj.doAfterSelectHooks(exec); err != nil {
		return syndicateJoinApplicationObj, err
	}

	return syndicateJoinApplicationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SyndicateJoinApplication) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no syndicate_join_applications provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syndicateJoinApplicationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	syndicateJoinApplicationInsertCacheMut.RLock()
	cache, cached := syndicateJoinApplicationInsertCache[key]
	syndicateJoinApplicationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			syndicateJoinApplicationAllColumns,
			syndicateJoinApplicationColumnsWithDefault,
			syndicateJoinApplicationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(syndicateJoinApplicationType, syndicateJoinApplicationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(syndicateJoinApplicationType, syndicateJoinApplicationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"syndicate_join_applications\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"syndicate_join_applications\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into syndicate_join_applications")
	}

	if !cached {
		syndicateJoinApplicationInsertCacheMut.Lock()
		syndicateJoinApplicationInsertCache[key] = cache
		syndicateJoinApplicationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the SyndicateJoinApplication.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SyndicateJoinApplication) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	syndicateJoinApplicationUpdateCacheMut.RLock()
	cache, cached := syndicateJoinApplicationUpdateCache[key]
	syndicateJoinApplicationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			syndicateJoinApplicationAllColumns,
			syndicateJoinApplicationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update syndicate_join_applications, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"syndicate_join_applications\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, syndicateJoinApplicationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(syndicateJoinApplicationType, syndicateJoinApplicationMapping, append(wl, syndicateJoinApplicationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update syndicate_join_applications row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for syndicate_join_applications")
	}

	if !cached {
		syndicateJoinApplicationUpdateCacheMut.Lock()
		syndicateJoinApplicationUpdateCache[key] = cache
		syndicateJoinApplicationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q syndicateJoinApplicationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for syndicate_join_applications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for syndicate_join_applications")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SyndicateJoinApplicationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateJoinApplicationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"syndicate_join_applications\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, syndicateJoinApplicationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in syndicateJoinApplication slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all syndicateJoinApplication")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SyndicateJoinApplication) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no syndicate_join_applications provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syndicateJoinApplicationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	syndicateJoinApplicationUpsertCacheMut.RLock()
	cache, cached := syndicateJoinApplicationUpsertCache[key]
	syndicateJoinApplicationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			syndicateJoinApplicationAllColumns,
			syndicateJoinApplicationColumnsWithDefault,
			syndicateJoinApplicationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			syndicateJoinApplicationAllColumns,
			syndicateJoinApplicationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert syndicate_join_applications, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(syndicateJoinApplicationPrimaryKeyColumns))
			copy(conflict, syndicateJoinApplicationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"syndicate_join_applications\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(syndicateJoinApplicationType, syndicateJoinApplicationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(syndicateJoinApplicationType, syndicateJoinApplicationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert syndicate_join_applications")
	}

	if !cached {
		syndicateJoinApplicationUpsertCacheMut.Lock()
		syndicateJoinApplicationUpsertCache[key] = cache
		syndicateJoinApplicationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single SyndicateJoinApplication record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SyndicateJoinApplication) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no SyndicateJoinApplication provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), syndicateJoinApplicationPrimaryKeyMapping)
		sql = "DELETE FROM \"syndicate_join_applications\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"syndicate_join_applications\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(syndicateJoinApplicationType, syndicateJoinApplicationMapping, append(wl, syndicateJoinApplicationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from syndicate_join_applications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for syndicate_join_applications")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q syndicateJoinApplicationQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no syndicateJoinApplicationQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from syndicate_join_applications")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for syndicate_join_applications")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SyndicateJoinApplicationSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(syndicateJoinApplicationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateJoinApplicationPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"syndicate_join_applications\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syndicateJoinApplicationPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateJoinApplicationPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"syndicate_join_applications\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, syndicateJoinApplicationPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from syndicateJoinApplication slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for syndicate_join_applications")
	}

	if len(syndicateJoinApplicationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SyndicateJoinApplication) Reload(exec boil.Executor) error {
	ret, err := FindSyndicateJoinApplication(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SyndicateJoinApplicationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SyndicateJoinApplicationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateJoinApplicationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"syndicate_join_applications\".* FROM \"syndicate_join_applications\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syndicateJoinApplicationPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in SyndicateJoinApplicationSlice")
	}

	*o = slice

	return nil
}

// SyndicateJoinApplicationExists checks if the SyndicateJoinApplication row exists.
func SyndicateJoinApplicationExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"syndicate_join_applications\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if syndicate_join_applications exists")
	}

	return exists, nil
}
