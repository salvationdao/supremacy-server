// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Layer is an object representing the database table.
type Layer struct {
	ID        string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Type      string    `boiler:"type" boil:"type" json:"type" toml:"type" yaml:"type"`
	ImageURL  string    `boiler:"image_url" boil:"image_url" json:"image_url" toml:"image_url" yaml:"image_url"`
	UpdatedAt time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	CreatedAt time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *layerR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L layerL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LayerColumns = struct {
	ID        string
	Type      string
	ImageURL  string
	UpdatedAt string
	DeletedAt string
	CreatedAt string
}{
	ID:        "id",
	Type:      "type",
	ImageURL:  "image_url",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
	CreatedAt: "created_at",
}

var LayerTableColumns = struct {
	ID        string
	Type      string
	ImageURL  string
	UpdatedAt string
	DeletedAt string
	CreatedAt string
}{
	ID:        "layers.id",
	Type:      "layers.type",
	ImageURL:  "layers.image_url",
	UpdatedAt: "layers.updated_at",
	DeletedAt: "layers.deleted_at",
	CreatedAt: "layers.created_at",
}

// Generated where

var LayerWhere = struct {
	ID        whereHelperstring
	Type      whereHelperstring
	ImageURL  whereHelperstring
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"layers\".\"id\""},
	Type:      whereHelperstring{field: "\"layers\".\"type\""},
	ImageURL:  whereHelperstring{field: "\"layers\".\"image_url\""},
	UpdatedAt: whereHelpertime_Time{field: "\"layers\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"layers\".\"deleted_at\""},
	CreatedAt: whereHelpertime_Time{field: "\"layers\".\"created_at\""},
}

// LayerRels is where relationship names are stored.
var LayerRels = struct {
	AccessoryProfileCustomAvatars string
	BodyProfileCustomAvatars      string
	EyeWearProfileCustomAvatars   string
	FaceProfileCustomAvatars      string
	HairProfileCustomAvatars      string
	HelmetProfileCustomAvatars    string
}{
	AccessoryProfileCustomAvatars: "AccessoryProfileCustomAvatars",
	BodyProfileCustomAvatars:      "BodyProfileCustomAvatars",
	EyeWearProfileCustomAvatars:   "EyeWearProfileCustomAvatars",
	FaceProfileCustomAvatars:      "FaceProfileCustomAvatars",
	HairProfileCustomAvatars:      "HairProfileCustomAvatars",
	HelmetProfileCustomAvatars:    "HelmetProfileCustomAvatars",
}

// layerR is where relationships are stored.
type layerR struct {
	AccessoryProfileCustomAvatars ProfileCustomAvatarSlice `boiler:"AccessoryProfileCustomAvatars" boil:"AccessoryProfileCustomAvatars" json:"AccessoryProfileCustomAvatars" toml:"AccessoryProfileCustomAvatars" yaml:"AccessoryProfileCustomAvatars"`
	BodyProfileCustomAvatars      ProfileCustomAvatarSlice `boiler:"BodyProfileCustomAvatars" boil:"BodyProfileCustomAvatars" json:"BodyProfileCustomAvatars" toml:"BodyProfileCustomAvatars" yaml:"BodyProfileCustomAvatars"`
	EyeWearProfileCustomAvatars   ProfileCustomAvatarSlice `boiler:"EyeWearProfileCustomAvatars" boil:"EyeWearProfileCustomAvatars" json:"EyeWearProfileCustomAvatars" toml:"EyeWearProfileCustomAvatars" yaml:"EyeWearProfileCustomAvatars"`
	FaceProfileCustomAvatars      ProfileCustomAvatarSlice `boiler:"FaceProfileCustomAvatars" boil:"FaceProfileCustomAvatars" json:"FaceProfileCustomAvatars" toml:"FaceProfileCustomAvatars" yaml:"FaceProfileCustomAvatars"`
	HairProfileCustomAvatars      ProfileCustomAvatarSlice `boiler:"HairProfileCustomAvatars" boil:"HairProfileCustomAvatars" json:"HairProfileCustomAvatars" toml:"HairProfileCustomAvatars" yaml:"HairProfileCustomAvatars"`
	HelmetProfileCustomAvatars    ProfileCustomAvatarSlice `boiler:"HelmetProfileCustomAvatars" boil:"HelmetProfileCustomAvatars" json:"HelmetProfileCustomAvatars" toml:"HelmetProfileCustomAvatars" yaml:"HelmetProfileCustomAvatars"`
}

// NewStruct creates a new relationship struct
func (*layerR) NewStruct() *layerR {
	return &layerR{}
}

// layerL is where Load methods for each relationship are stored.
type layerL struct{}

var (
	layerAllColumns            = []string{"id", "type", "image_url", "updated_at", "deleted_at", "created_at"}
	layerColumnsWithoutDefault = []string{"type", "image_url"}
	layerColumnsWithDefault    = []string{"id", "updated_at", "deleted_at", "created_at"}
	layerPrimaryKeyColumns     = []string{"id"}
	layerGeneratedColumns      = []string{}
)

type (
	// LayerSlice is an alias for a slice of pointers to Layer.
	// This should almost always be used instead of []Layer.
	LayerSlice []*Layer
	// LayerHook is the signature for custom Layer hook methods
	LayerHook func(boil.Executor, *Layer) error

	layerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	layerType                 = reflect.TypeOf(&Layer{})
	layerMapping              = queries.MakeStructMapping(layerType)
	layerPrimaryKeyMapping, _ = queries.BindMapping(layerType, layerMapping, layerPrimaryKeyColumns)
	layerInsertCacheMut       sync.RWMutex
	layerInsertCache          = make(map[string]insertCache)
	layerUpdateCacheMut       sync.RWMutex
	layerUpdateCache          = make(map[string]updateCache)
	layerUpsertCacheMut       sync.RWMutex
	layerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var layerAfterSelectHooks []LayerHook

var layerBeforeInsertHooks []LayerHook
var layerAfterInsertHooks []LayerHook

var layerBeforeUpdateHooks []LayerHook
var layerAfterUpdateHooks []LayerHook

var layerBeforeDeleteHooks []LayerHook
var layerAfterDeleteHooks []LayerHook

var layerBeforeUpsertHooks []LayerHook
var layerAfterUpsertHooks []LayerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Layer) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range layerAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Layer) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range layerBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Layer) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range layerAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Layer) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range layerBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Layer) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range layerAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Layer) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range layerBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Layer) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range layerAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Layer) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range layerBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Layer) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range layerAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLayerHook registers your hook function for all future operations.
func AddLayerHook(hookPoint boil.HookPoint, layerHook LayerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		layerAfterSelectHooks = append(layerAfterSelectHooks, layerHook)
	case boil.BeforeInsertHook:
		layerBeforeInsertHooks = append(layerBeforeInsertHooks, layerHook)
	case boil.AfterInsertHook:
		layerAfterInsertHooks = append(layerAfterInsertHooks, layerHook)
	case boil.BeforeUpdateHook:
		layerBeforeUpdateHooks = append(layerBeforeUpdateHooks, layerHook)
	case boil.AfterUpdateHook:
		layerAfterUpdateHooks = append(layerAfterUpdateHooks, layerHook)
	case boil.BeforeDeleteHook:
		layerBeforeDeleteHooks = append(layerBeforeDeleteHooks, layerHook)
	case boil.AfterDeleteHook:
		layerAfterDeleteHooks = append(layerAfterDeleteHooks, layerHook)
	case boil.BeforeUpsertHook:
		layerBeforeUpsertHooks = append(layerBeforeUpsertHooks, layerHook)
	case boil.AfterUpsertHook:
		layerAfterUpsertHooks = append(layerAfterUpsertHooks, layerHook)
	}
}

// One returns a single layer record from the query.
func (q layerQuery) One(exec boil.Executor) (*Layer, error) {
	o := &Layer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for layers")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Layer records from the query.
func (q layerQuery) All(exec boil.Executor) (LayerSlice, error) {
	var o []*Layer

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Layer slice")
	}

	if len(layerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Layer records in the query.
func (q layerQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count layers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q layerQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if layers exists")
	}

	return count > 0, nil
}

// AccessoryProfileCustomAvatars retrieves all the profile_custom_avatar's ProfileCustomAvatars with an executor via accessory_id column.
func (o *Layer) AccessoryProfileCustomAvatars(mods ...qm.QueryMod) profileCustomAvatarQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"profile_custom_avatars\".\"accessory_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"profile_custom_avatars\".\"deleted_at\""),
	)

	query := ProfileCustomAvatars(queryMods...)
	queries.SetFrom(query.Query, "\"profile_custom_avatars\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"profile_custom_avatars\".*"})
	}

	return query
}

// BodyProfileCustomAvatars retrieves all the profile_custom_avatar's ProfileCustomAvatars with an executor via body_id column.
func (o *Layer) BodyProfileCustomAvatars(mods ...qm.QueryMod) profileCustomAvatarQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"profile_custom_avatars\".\"body_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"profile_custom_avatars\".\"deleted_at\""),
	)

	query := ProfileCustomAvatars(queryMods...)
	queries.SetFrom(query.Query, "\"profile_custom_avatars\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"profile_custom_avatars\".*"})
	}

	return query
}

// EyeWearProfileCustomAvatars retrieves all the profile_custom_avatar's ProfileCustomAvatars with an executor via eye_wear_id column.
func (o *Layer) EyeWearProfileCustomAvatars(mods ...qm.QueryMod) profileCustomAvatarQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"profile_custom_avatars\".\"eye_wear_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"profile_custom_avatars\".\"deleted_at\""),
	)

	query := ProfileCustomAvatars(queryMods...)
	queries.SetFrom(query.Query, "\"profile_custom_avatars\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"profile_custom_avatars\".*"})
	}

	return query
}

// FaceProfileCustomAvatars retrieves all the profile_custom_avatar's ProfileCustomAvatars with an executor via face_id column.
func (o *Layer) FaceProfileCustomAvatars(mods ...qm.QueryMod) profileCustomAvatarQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"profile_custom_avatars\".\"face_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"profile_custom_avatars\".\"deleted_at\""),
	)

	query := ProfileCustomAvatars(queryMods...)
	queries.SetFrom(query.Query, "\"profile_custom_avatars\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"profile_custom_avatars\".*"})
	}

	return query
}

// HairProfileCustomAvatars retrieves all the profile_custom_avatar's ProfileCustomAvatars with an executor via hair_id column.
func (o *Layer) HairProfileCustomAvatars(mods ...qm.QueryMod) profileCustomAvatarQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"profile_custom_avatars\".\"hair_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"profile_custom_avatars\".\"deleted_at\""),
	)

	query := ProfileCustomAvatars(queryMods...)
	queries.SetFrom(query.Query, "\"profile_custom_avatars\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"profile_custom_avatars\".*"})
	}

	return query
}

// HelmetProfileCustomAvatars retrieves all the profile_custom_avatar's ProfileCustomAvatars with an executor via helmet_id column.
func (o *Layer) HelmetProfileCustomAvatars(mods ...qm.QueryMod) profileCustomAvatarQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"profile_custom_avatars\".\"helmet_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"profile_custom_avatars\".\"deleted_at\""),
	)

	query := ProfileCustomAvatars(queryMods...)
	queries.SetFrom(query.Query, "\"profile_custom_avatars\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"profile_custom_avatars\".*"})
	}

	return query
}

// LoadAccessoryProfileCustomAvatars allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (layerL) LoadAccessoryProfileCustomAvatars(e boil.Executor, singular bool, maybeLayer interface{}, mods queries.Applicator) error {
	var slice []*Layer
	var object *Layer

	if singular {
		object = maybeLayer.(*Layer)
	} else {
		slice = *maybeLayer.(*[]*Layer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &layerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &layerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`profile_custom_avatars`),
		qm.WhereIn(`profile_custom_avatars.accessory_id in ?`, args...),
		qmhelper.WhereIsNull(`profile_custom_avatars.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load profile_custom_avatars")
	}

	var resultSlice []*ProfileCustomAvatar
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice profile_custom_avatars")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on profile_custom_avatars")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for profile_custom_avatars")
	}

	if len(profileCustomAvatarAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AccessoryProfileCustomAvatars = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &profileCustomAvatarR{}
			}
			foreign.R.Accessory = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AccessoryID) {
				local.R.AccessoryProfileCustomAvatars = append(local.R.AccessoryProfileCustomAvatars, foreign)
				if foreign.R == nil {
					foreign.R = &profileCustomAvatarR{}
				}
				foreign.R.Accessory = local
				break
			}
		}
	}

	return nil
}

// LoadBodyProfileCustomAvatars allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (layerL) LoadBodyProfileCustomAvatars(e boil.Executor, singular bool, maybeLayer interface{}, mods queries.Applicator) error {
	var slice []*Layer
	var object *Layer

	if singular {
		object = maybeLayer.(*Layer)
	} else {
		slice = *maybeLayer.(*[]*Layer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &layerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &layerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`profile_custom_avatars`),
		qm.WhereIn(`profile_custom_avatars.body_id in ?`, args...),
		qmhelper.WhereIsNull(`profile_custom_avatars.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load profile_custom_avatars")
	}

	var resultSlice []*ProfileCustomAvatar
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice profile_custom_avatars")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on profile_custom_avatars")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for profile_custom_avatars")
	}

	if len(profileCustomAvatarAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BodyProfileCustomAvatars = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &profileCustomAvatarR{}
			}
			foreign.R.Body = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BodyID) {
				local.R.BodyProfileCustomAvatars = append(local.R.BodyProfileCustomAvatars, foreign)
				if foreign.R == nil {
					foreign.R = &profileCustomAvatarR{}
				}
				foreign.R.Body = local
				break
			}
		}
	}

	return nil
}

// LoadEyeWearProfileCustomAvatars allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (layerL) LoadEyeWearProfileCustomAvatars(e boil.Executor, singular bool, maybeLayer interface{}, mods queries.Applicator) error {
	var slice []*Layer
	var object *Layer

	if singular {
		object = maybeLayer.(*Layer)
	} else {
		slice = *maybeLayer.(*[]*Layer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &layerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &layerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`profile_custom_avatars`),
		qm.WhereIn(`profile_custom_avatars.eye_wear_id in ?`, args...),
		qmhelper.WhereIsNull(`profile_custom_avatars.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load profile_custom_avatars")
	}

	var resultSlice []*ProfileCustomAvatar
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice profile_custom_avatars")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on profile_custom_avatars")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for profile_custom_avatars")
	}

	if len(profileCustomAvatarAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EyeWearProfileCustomAvatars = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &profileCustomAvatarR{}
			}
			foreign.R.EyeWear = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.EyeWearID) {
				local.R.EyeWearProfileCustomAvatars = append(local.R.EyeWearProfileCustomAvatars, foreign)
				if foreign.R == nil {
					foreign.R = &profileCustomAvatarR{}
				}
				foreign.R.EyeWear = local
				break
			}
		}
	}

	return nil
}

// LoadFaceProfileCustomAvatars allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (layerL) LoadFaceProfileCustomAvatars(e boil.Executor, singular bool, maybeLayer interface{}, mods queries.Applicator) error {
	var slice []*Layer
	var object *Layer

	if singular {
		object = maybeLayer.(*Layer)
	} else {
		slice = *maybeLayer.(*[]*Layer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &layerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &layerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`profile_custom_avatars`),
		qm.WhereIn(`profile_custom_avatars.face_id in ?`, args...),
		qmhelper.WhereIsNull(`profile_custom_avatars.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load profile_custom_avatars")
	}

	var resultSlice []*ProfileCustomAvatar
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice profile_custom_avatars")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on profile_custom_avatars")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for profile_custom_avatars")
	}

	if len(profileCustomAvatarAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FaceProfileCustomAvatars = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &profileCustomAvatarR{}
			}
			foreign.R.Face = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FaceID {
				local.R.FaceProfileCustomAvatars = append(local.R.FaceProfileCustomAvatars, foreign)
				if foreign.R == nil {
					foreign.R = &profileCustomAvatarR{}
				}
				foreign.R.Face = local
				break
			}
		}
	}

	return nil
}

// LoadHairProfileCustomAvatars allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (layerL) LoadHairProfileCustomAvatars(e boil.Executor, singular bool, maybeLayer interface{}, mods queries.Applicator) error {
	var slice []*Layer
	var object *Layer

	if singular {
		object = maybeLayer.(*Layer)
	} else {
		slice = *maybeLayer.(*[]*Layer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &layerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &layerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`profile_custom_avatars`),
		qm.WhereIn(`profile_custom_avatars.hair_id in ?`, args...),
		qmhelper.WhereIsNull(`profile_custom_avatars.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load profile_custom_avatars")
	}

	var resultSlice []*ProfileCustomAvatar
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice profile_custom_avatars")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on profile_custom_avatars")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for profile_custom_avatars")
	}

	if len(profileCustomAvatarAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.HairProfileCustomAvatars = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &profileCustomAvatarR{}
			}
			foreign.R.Hair = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.HairID) {
				local.R.HairProfileCustomAvatars = append(local.R.HairProfileCustomAvatars, foreign)
				if foreign.R == nil {
					foreign.R = &profileCustomAvatarR{}
				}
				foreign.R.Hair = local
				break
			}
		}
	}

	return nil
}

// LoadHelmetProfileCustomAvatars allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (layerL) LoadHelmetProfileCustomAvatars(e boil.Executor, singular bool, maybeLayer interface{}, mods queries.Applicator) error {
	var slice []*Layer
	var object *Layer

	if singular {
		object = maybeLayer.(*Layer)
	} else {
		slice = *maybeLayer.(*[]*Layer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &layerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &layerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`profile_custom_avatars`),
		qm.WhereIn(`profile_custom_avatars.helmet_id in ?`, args...),
		qmhelper.WhereIsNull(`profile_custom_avatars.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load profile_custom_avatars")
	}

	var resultSlice []*ProfileCustomAvatar
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice profile_custom_avatars")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on profile_custom_avatars")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for profile_custom_avatars")
	}

	if len(profileCustomAvatarAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.HelmetProfileCustomAvatars = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &profileCustomAvatarR{}
			}
			foreign.R.Helmet = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.HelmetID) {
				local.R.HelmetProfileCustomAvatars = append(local.R.HelmetProfileCustomAvatars, foreign)
				if foreign.R == nil {
					foreign.R = &profileCustomAvatarR{}
				}
				foreign.R.Helmet = local
				break
			}
		}
	}

	return nil
}

// AddAccessoryProfileCustomAvatars adds the given related objects to the existing relationships
// of the layer, optionally inserting them as new records.
// Appends related to o.R.AccessoryProfileCustomAvatars.
// Sets related.R.Accessory appropriately.
func (o *Layer) AddAccessoryProfileCustomAvatars(exec boil.Executor, insert bool, related ...*ProfileCustomAvatar) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AccessoryID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"profile_custom_avatars\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"accessory_id"}),
				strmangle.WhereClause("\"", "\"", 2, profileCustomAvatarPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AccessoryID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &layerR{
			AccessoryProfileCustomAvatars: related,
		}
	} else {
		o.R.AccessoryProfileCustomAvatars = append(o.R.AccessoryProfileCustomAvatars, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &profileCustomAvatarR{
				Accessory: o,
			}
		} else {
			rel.R.Accessory = o
		}
	}
	return nil
}

// SetAccessoryProfileCustomAvatars removes all previously related items of the
// layer replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Accessory's AccessoryProfileCustomAvatars accordingly.
// Replaces o.R.AccessoryProfileCustomAvatars with related.
// Sets related.R.Accessory's AccessoryProfileCustomAvatars accordingly.
func (o *Layer) SetAccessoryProfileCustomAvatars(exec boil.Executor, insert bool, related ...*ProfileCustomAvatar) error {
	query := "update \"profile_custom_avatars\" set \"accessory_id\" = null where \"accessory_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AccessoryProfileCustomAvatars {
			queries.SetScanner(&rel.AccessoryID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Accessory = nil
		}

		o.R.AccessoryProfileCustomAvatars = nil
	}
	return o.AddAccessoryProfileCustomAvatars(exec, insert, related...)
}

// RemoveAccessoryProfileCustomAvatars relationships from objects passed in.
// Removes related items from R.AccessoryProfileCustomAvatars (uses pointer comparison, removal does not keep order)
// Sets related.R.Accessory.
func (o *Layer) RemoveAccessoryProfileCustomAvatars(exec boil.Executor, related ...*ProfileCustomAvatar) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AccessoryID, nil)
		if rel.R != nil {
			rel.R.Accessory = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("accessory_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AccessoryProfileCustomAvatars {
			if rel != ri {
				continue
			}

			ln := len(o.R.AccessoryProfileCustomAvatars)
			if ln > 1 && i < ln-1 {
				o.R.AccessoryProfileCustomAvatars[i] = o.R.AccessoryProfileCustomAvatars[ln-1]
			}
			o.R.AccessoryProfileCustomAvatars = o.R.AccessoryProfileCustomAvatars[:ln-1]
			break
		}
	}

	return nil
}

// AddBodyProfileCustomAvatars adds the given related objects to the existing relationships
// of the layer, optionally inserting them as new records.
// Appends related to o.R.BodyProfileCustomAvatars.
// Sets related.R.Body appropriately.
func (o *Layer) AddBodyProfileCustomAvatars(exec boil.Executor, insert bool, related ...*ProfileCustomAvatar) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BodyID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"profile_custom_avatars\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"body_id"}),
				strmangle.WhereClause("\"", "\"", 2, profileCustomAvatarPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BodyID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &layerR{
			BodyProfileCustomAvatars: related,
		}
	} else {
		o.R.BodyProfileCustomAvatars = append(o.R.BodyProfileCustomAvatars, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &profileCustomAvatarR{
				Body: o,
			}
		} else {
			rel.R.Body = o
		}
	}
	return nil
}

// SetBodyProfileCustomAvatars removes all previously related items of the
// layer replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Body's BodyProfileCustomAvatars accordingly.
// Replaces o.R.BodyProfileCustomAvatars with related.
// Sets related.R.Body's BodyProfileCustomAvatars accordingly.
func (o *Layer) SetBodyProfileCustomAvatars(exec boil.Executor, insert bool, related ...*ProfileCustomAvatar) error {
	query := "update \"profile_custom_avatars\" set \"body_id\" = null where \"body_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BodyProfileCustomAvatars {
			queries.SetScanner(&rel.BodyID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Body = nil
		}

		o.R.BodyProfileCustomAvatars = nil
	}
	return o.AddBodyProfileCustomAvatars(exec, insert, related...)
}

// RemoveBodyProfileCustomAvatars relationships from objects passed in.
// Removes related items from R.BodyProfileCustomAvatars (uses pointer comparison, removal does not keep order)
// Sets related.R.Body.
func (o *Layer) RemoveBodyProfileCustomAvatars(exec boil.Executor, related ...*ProfileCustomAvatar) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BodyID, nil)
		if rel.R != nil {
			rel.R.Body = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("body_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BodyProfileCustomAvatars {
			if rel != ri {
				continue
			}

			ln := len(o.R.BodyProfileCustomAvatars)
			if ln > 1 && i < ln-1 {
				o.R.BodyProfileCustomAvatars[i] = o.R.BodyProfileCustomAvatars[ln-1]
			}
			o.R.BodyProfileCustomAvatars = o.R.BodyProfileCustomAvatars[:ln-1]
			break
		}
	}

	return nil
}

// AddEyeWearProfileCustomAvatars adds the given related objects to the existing relationships
// of the layer, optionally inserting them as new records.
// Appends related to o.R.EyeWearProfileCustomAvatars.
// Sets related.R.EyeWear appropriately.
func (o *Layer) AddEyeWearProfileCustomAvatars(exec boil.Executor, insert bool, related ...*ProfileCustomAvatar) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EyeWearID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"profile_custom_avatars\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"eye_wear_id"}),
				strmangle.WhereClause("\"", "\"", 2, profileCustomAvatarPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EyeWearID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &layerR{
			EyeWearProfileCustomAvatars: related,
		}
	} else {
		o.R.EyeWearProfileCustomAvatars = append(o.R.EyeWearProfileCustomAvatars, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &profileCustomAvatarR{
				EyeWear: o,
			}
		} else {
			rel.R.EyeWear = o
		}
	}
	return nil
}

// SetEyeWearProfileCustomAvatars removes all previously related items of the
// layer replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.EyeWear's EyeWearProfileCustomAvatars accordingly.
// Replaces o.R.EyeWearProfileCustomAvatars with related.
// Sets related.R.EyeWear's EyeWearProfileCustomAvatars accordingly.
func (o *Layer) SetEyeWearProfileCustomAvatars(exec boil.Executor, insert bool, related ...*ProfileCustomAvatar) error {
	query := "update \"profile_custom_avatars\" set \"eye_wear_id\" = null where \"eye_wear_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.EyeWearProfileCustomAvatars {
			queries.SetScanner(&rel.EyeWearID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.EyeWear = nil
		}

		o.R.EyeWearProfileCustomAvatars = nil
	}
	return o.AddEyeWearProfileCustomAvatars(exec, insert, related...)
}

// RemoveEyeWearProfileCustomAvatars relationships from objects passed in.
// Removes related items from R.EyeWearProfileCustomAvatars (uses pointer comparison, removal does not keep order)
// Sets related.R.EyeWear.
func (o *Layer) RemoveEyeWearProfileCustomAvatars(exec boil.Executor, related ...*ProfileCustomAvatar) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EyeWearID, nil)
		if rel.R != nil {
			rel.R.EyeWear = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("eye_wear_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.EyeWearProfileCustomAvatars {
			if rel != ri {
				continue
			}

			ln := len(o.R.EyeWearProfileCustomAvatars)
			if ln > 1 && i < ln-1 {
				o.R.EyeWearProfileCustomAvatars[i] = o.R.EyeWearProfileCustomAvatars[ln-1]
			}
			o.R.EyeWearProfileCustomAvatars = o.R.EyeWearProfileCustomAvatars[:ln-1]
			break
		}
	}

	return nil
}

// AddFaceProfileCustomAvatars adds the given related objects to the existing relationships
// of the layer, optionally inserting them as new records.
// Appends related to o.R.FaceProfileCustomAvatars.
// Sets related.R.Face appropriately.
func (o *Layer) AddFaceProfileCustomAvatars(exec boil.Executor, insert bool, related ...*ProfileCustomAvatar) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FaceID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"profile_custom_avatars\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"face_id"}),
				strmangle.WhereClause("\"", "\"", 2, profileCustomAvatarPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FaceID = o.ID
		}
	}

	if o.R == nil {
		o.R = &layerR{
			FaceProfileCustomAvatars: related,
		}
	} else {
		o.R.FaceProfileCustomAvatars = append(o.R.FaceProfileCustomAvatars, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &profileCustomAvatarR{
				Face: o,
			}
		} else {
			rel.R.Face = o
		}
	}
	return nil
}

// AddHairProfileCustomAvatars adds the given related objects to the existing relationships
// of the layer, optionally inserting them as new records.
// Appends related to o.R.HairProfileCustomAvatars.
// Sets related.R.Hair appropriately.
func (o *Layer) AddHairProfileCustomAvatars(exec boil.Executor, insert bool, related ...*ProfileCustomAvatar) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.HairID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"profile_custom_avatars\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"hair_id"}),
				strmangle.WhereClause("\"", "\"", 2, profileCustomAvatarPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.HairID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &layerR{
			HairProfileCustomAvatars: related,
		}
	} else {
		o.R.HairProfileCustomAvatars = append(o.R.HairProfileCustomAvatars, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &profileCustomAvatarR{
				Hair: o,
			}
		} else {
			rel.R.Hair = o
		}
	}
	return nil
}

// SetHairProfileCustomAvatars removes all previously related items of the
// layer replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Hair's HairProfileCustomAvatars accordingly.
// Replaces o.R.HairProfileCustomAvatars with related.
// Sets related.R.Hair's HairProfileCustomAvatars accordingly.
func (o *Layer) SetHairProfileCustomAvatars(exec boil.Executor, insert bool, related ...*ProfileCustomAvatar) error {
	query := "update \"profile_custom_avatars\" set \"hair_id\" = null where \"hair_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.HairProfileCustomAvatars {
			queries.SetScanner(&rel.HairID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Hair = nil
		}

		o.R.HairProfileCustomAvatars = nil
	}
	return o.AddHairProfileCustomAvatars(exec, insert, related...)
}

// RemoveHairProfileCustomAvatars relationships from objects passed in.
// Removes related items from R.HairProfileCustomAvatars (uses pointer comparison, removal does not keep order)
// Sets related.R.Hair.
func (o *Layer) RemoveHairProfileCustomAvatars(exec boil.Executor, related ...*ProfileCustomAvatar) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.HairID, nil)
		if rel.R != nil {
			rel.R.Hair = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("hair_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.HairProfileCustomAvatars {
			if rel != ri {
				continue
			}

			ln := len(o.R.HairProfileCustomAvatars)
			if ln > 1 && i < ln-1 {
				o.R.HairProfileCustomAvatars[i] = o.R.HairProfileCustomAvatars[ln-1]
			}
			o.R.HairProfileCustomAvatars = o.R.HairProfileCustomAvatars[:ln-1]
			break
		}
	}

	return nil
}

// AddHelmetProfileCustomAvatars adds the given related objects to the existing relationships
// of the layer, optionally inserting them as new records.
// Appends related to o.R.HelmetProfileCustomAvatars.
// Sets related.R.Helmet appropriately.
func (o *Layer) AddHelmetProfileCustomAvatars(exec boil.Executor, insert bool, related ...*ProfileCustomAvatar) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.HelmetID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"profile_custom_avatars\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"helmet_id"}),
				strmangle.WhereClause("\"", "\"", 2, profileCustomAvatarPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.HelmetID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &layerR{
			HelmetProfileCustomAvatars: related,
		}
	} else {
		o.R.HelmetProfileCustomAvatars = append(o.R.HelmetProfileCustomAvatars, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &profileCustomAvatarR{
				Helmet: o,
			}
		} else {
			rel.R.Helmet = o
		}
	}
	return nil
}

// SetHelmetProfileCustomAvatars removes all previously related items of the
// layer replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Helmet's HelmetProfileCustomAvatars accordingly.
// Replaces o.R.HelmetProfileCustomAvatars with related.
// Sets related.R.Helmet's HelmetProfileCustomAvatars accordingly.
func (o *Layer) SetHelmetProfileCustomAvatars(exec boil.Executor, insert bool, related ...*ProfileCustomAvatar) error {
	query := "update \"profile_custom_avatars\" set \"helmet_id\" = null where \"helmet_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.HelmetProfileCustomAvatars {
			queries.SetScanner(&rel.HelmetID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Helmet = nil
		}

		o.R.HelmetProfileCustomAvatars = nil
	}
	return o.AddHelmetProfileCustomAvatars(exec, insert, related...)
}

// RemoveHelmetProfileCustomAvatars relationships from objects passed in.
// Removes related items from R.HelmetProfileCustomAvatars (uses pointer comparison, removal does not keep order)
// Sets related.R.Helmet.
func (o *Layer) RemoveHelmetProfileCustomAvatars(exec boil.Executor, related ...*ProfileCustomAvatar) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.HelmetID, nil)
		if rel.R != nil {
			rel.R.Helmet = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("helmet_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.HelmetProfileCustomAvatars {
			if rel != ri {
				continue
			}

			ln := len(o.R.HelmetProfileCustomAvatars)
			if ln > 1 && i < ln-1 {
				o.R.HelmetProfileCustomAvatars[i] = o.R.HelmetProfileCustomAvatars[ln-1]
			}
			o.R.HelmetProfileCustomAvatars = o.R.HelmetProfileCustomAvatars[:ln-1]
			break
		}
	}

	return nil
}

// Layers retrieves all the records using an executor.
func Layers(mods ...qm.QueryMod) layerQuery {
	mods = append(mods, qm.From("\"layers\""), qmhelper.WhereIsNull("\"layers\".\"deleted_at\""))
	return layerQuery{NewQuery(mods...)}
}

// FindLayer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLayer(exec boil.Executor, iD string, selectCols ...string) (*Layer, error) {
	layerObj := &Layer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"layers\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, layerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from layers")
	}

	if err = layerObj.doAfterSelectHooks(exec); err != nil {
		return layerObj, err
	}

	return layerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Layer) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no layers provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(layerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	layerInsertCacheMut.RLock()
	cache, cached := layerInsertCache[key]
	layerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			layerAllColumns,
			layerColumnsWithDefault,
			layerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(layerType, layerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(layerType, layerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"layers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"layers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into layers")
	}

	if !cached {
		layerInsertCacheMut.Lock()
		layerInsertCache[key] = cache
		layerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Layer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Layer) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	layerUpdateCacheMut.RLock()
	cache, cached := layerUpdateCache[key]
	layerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			layerAllColumns,
			layerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update layers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"layers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, layerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(layerType, layerMapping, append(wl, layerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update layers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for layers")
	}

	if !cached {
		layerUpdateCacheMut.Lock()
		layerUpdateCache[key] = cache
		layerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q layerQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for layers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for layers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LayerSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), layerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"layers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, layerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in layer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all layer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Layer) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no layers provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(layerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	layerUpsertCacheMut.RLock()
	cache, cached := layerUpsertCache[key]
	layerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			layerAllColumns,
			layerColumnsWithDefault,
			layerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			layerAllColumns,
			layerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert layers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(layerPrimaryKeyColumns))
			copy(conflict, layerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"layers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(layerType, layerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(layerType, layerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert layers")
	}

	if !cached {
		layerUpsertCacheMut.Lock()
		layerUpsertCache[key] = cache
		layerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Layer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Layer) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Layer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), layerPrimaryKeyMapping)
		sql = "DELETE FROM \"layers\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"layers\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(layerType, layerMapping, append(wl, layerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from layers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for layers")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q layerQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no layerQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from layers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for layers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LayerSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(layerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), layerPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"layers\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, layerPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), layerPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"layers\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, layerPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from layer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for layers")
	}

	if len(layerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Layer) Reload(exec boil.Executor) error {
	ret, err := FindLayer(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LayerSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LayerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), layerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"layers\".* FROM \"layers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, layerPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in LayerSlice")
	}

	*o = slice

	return nil
}

// LayerExists checks if the Layer row exists.
func LayerExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"layers\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if layers exists")
	}

	return exists, nil
}
