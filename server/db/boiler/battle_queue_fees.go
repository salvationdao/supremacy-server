// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BattleQueueFee is an object representing the database table.
type BattleQueueFee struct {
	ID        string          `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	MechID    string          `boiler:"mech_id" boil:"mech_id" json:"mech_id" toml:"mech_id" yaml:"mech_id"`
	PaidByID  string          `boiler:"paid_by_id" boil:"paid_by_id" json:"paid_by_id" toml:"paid_by_id" yaml:"paid_by_id"`
	Amount    decimal.Decimal `boiler:"amount" boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	CreatedAt time.Time       `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time       `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time       `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *battleQueueFeeR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L battleQueueFeeL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattleQueueFeeColumns = struct {
	ID        string
	MechID    string
	PaidByID  string
	Amount    string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	MechID:    "mech_id",
	PaidByID:  "paid_by_id",
	Amount:    "amount",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var BattleQueueFeeTableColumns = struct {
	ID        string
	MechID    string
	PaidByID  string
	Amount    string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "battle_queue_fees.id",
	MechID:    "battle_queue_fees.mech_id",
	PaidByID:  "battle_queue_fees.paid_by_id",
	Amount:    "battle_queue_fees.amount",
	CreatedAt: "battle_queue_fees.created_at",
	UpdatedAt: "battle_queue_fees.updated_at",
	DeletedAt: "battle_queue_fees.deleted_at",
}

// Generated where

var BattleQueueFeeWhere = struct {
	ID        whereHelperstring
	MechID    whereHelperstring
	PaidByID  whereHelperstring
	Amount    whereHelperdecimal_Decimal
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperstring{field: "\"battle_queue_fees\".\"id\""},
	MechID:    whereHelperstring{field: "\"battle_queue_fees\".\"mech_id\""},
	PaidByID:  whereHelperstring{field: "\"battle_queue_fees\".\"paid_by_id\""},
	Amount:    whereHelperdecimal_Decimal{field: "\"battle_queue_fees\".\"amount\""},
	CreatedAt: whereHelpertime_Time{field: "\"battle_queue_fees\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"battle_queue_fees\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"battle_queue_fees\".\"deleted_at\""},
}

// BattleQueueFeeRels is where relationship names are stored.
var BattleQueueFeeRels = struct {
	Mech            string
	PaidBy          string
	FeeBattleQueues string
}{
	Mech:            "Mech",
	PaidBy:          "PaidBy",
	FeeBattleQueues: "FeeBattleQueues",
}

// battleQueueFeeR is where relationships are stored.
type battleQueueFeeR struct {
	Mech            *Mech            `boiler:"Mech" boil:"Mech" json:"Mech" toml:"Mech" yaml:"Mech"`
	PaidBy          *Player          `boiler:"PaidBy" boil:"PaidBy" json:"PaidBy" toml:"PaidBy" yaml:"PaidBy"`
	FeeBattleQueues BattleQueueSlice `boiler:"FeeBattleQueues" boil:"FeeBattleQueues" json:"FeeBattleQueues" toml:"FeeBattleQueues" yaml:"FeeBattleQueues"`
}

// NewStruct creates a new relationship struct
func (*battleQueueFeeR) NewStruct() *battleQueueFeeR {
	return &battleQueueFeeR{}
}

// battleQueueFeeL is where Load methods for each relationship are stored.
type battleQueueFeeL struct{}

var (
	battleQueueFeeAllColumns            = []string{"id", "mech_id", "paid_by_id", "amount", "created_at", "updated_at", "deleted_at"}
	battleQueueFeeColumnsWithoutDefault = []string{"mech_id", "paid_by_id", "amount"}
	battleQueueFeeColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at"}
	battleQueueFeePrimaryKeyColumns     = []string{"id"}
	battleQueueFeeGeneratedColumns      = []string{}
)

type (
	// BattleQueueFeeSlice is an alias for a slice of pointers to BattleQueueFee.
	// This should almost always be used instead of []BattleQueueFee.
	BattleQueueFeeSlice []*BattleQueueFee
	// BattleQueueFeeHook is the signature for custom BattleQueueFee hook methods
	BattleQueueFeeHook func(boil.Executor, *BattleQueueFee) error

	battleQueueFeeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battleQueueFeeType                 = reflect.TypeOf(&BattleQueueFee{})
	battleQueueFeeMapping              = queries.MakeStructMapping(battleQueueFeeType)
	battleQueueFeePrimaryKeyMapping, _ = queries.BindMapping(battleQueueFeeType, battleQueueFeeMapping, battleQueueFeePrimaryKeyColumns)
	battleQueueFeeInsertCacheMut       sync.RWMutex
	battleQueueFeeInsertCache          = make(map[string]insertCache)
	battleQueueFeeUpdateCacheMut       sync.RWMutex
	battleQueueFeeUpdateCache          = make(map[string]updateCache)
	battleQueueFeeUpsertCacheMut       sync.RWMutex
	battleQueueFeeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battleQueueFeeAfterSelectHooks []BattleQueueFeeHook

var battleQueueFeeBeforeInsertHooks []BattleQueueFeeHook
var battleQueueFeeAfterInsertHooks []BattleQueueFeeHook

var battleQueueFeeBeforeUpdateHooks []BattleQueueFeeHook
var battleQueueFeeAfterUpdateHooks []BattleQueueFeeHook

var battleQueueFeeBeforeDeleteHooks []BattleQueueFeeHook
var battleQueueFeeAfterDeleteHooks []BattleQueueFeeHook

var battleQueueFeeBeforeUpsertHooks []BattleQueueFeeHook
var battleQueueFeeAfterUpsertHooks []BattleQueueFeeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BattleQueueFee) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueFeeAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BattleQueueFee) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueFeeBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BattleQueueFee) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueFeeAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BattleQueueFee) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueFeeBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BattleQueueFee) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueFeeAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BattleQueueFee) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueFeeBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BattleQueueFee) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueFeeAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BattleQueueFee) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueFeeBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BattleQueueFee) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueFeeAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattleQueueFeeHook registers your hook function for all future operations.
func AddBattleQueueFeeHook(hookPoint boil.HookPoint, battleQueueFeeHook BattleQueueFeeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		battleQueueFeeAfterSelectHooks = append(battleQueueFeeAfterSelectHooks, battleQueueFeeHook)
	case boil.BeforeInsertHook:
		battleQueueFeeBeforeInsertHooks = append(battleQueueFeeBeforeInsertHooks, battleQueueFeeHook)
	case boil.AfterInsertHook:
		battleQueueFeeAfterInsertHooks = append(battleQueueFeeAfterInsertHooks, battleQueueFeeHook)
	case boil.BeforeUpdateHook:
		battleQueueFeeBeforeUpdateHooks = append(battleQueueFeeBeforeUpdateHooks, battleQueueFeeHook)
	case boil.AfterUpdateHook:
		battleQueueFeeAfterUpdateHooks = append(battleQueueFeeAfterUpdateHooks, battleQueueFeeHook)
	case boil.BeforeDeleteHook:
		battleQueueFeeBeforeDeleteHooks = append(battleQueueFeeBeforeDeleteHooks, battleQueueFeeHook)
	case boil.AfterDeleteHook:
		battleQueueFeeAfterDeleteHooks = append(battleQueueFeeAfterDeleteHooks, battleQueueFeeHook)
	case boil.BeforeUpsertHook:
		battleQueueFeeBeforeUpsertHooks = append(battleQueueFeeBeforeUpsertHooks, battleQueueFeeHook)
	case boil.AfterUpsertHook:
		battleQueueFeeAfterUpsertHooks = append(battleQueueFeeAfterUpsertHooks, battleQueueFeeHook)
	}
}

// One returns a single battleQueueFee record from the query.
func (q battleQueueFeeQuery) One(exec boil.Executor) (*BattleQueueFee, error) {
	o := &BattleQueueFee{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for battle_queue_fees")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BattleQueueFee records from the query.
func (q battleQueueFeeQuery) All(exec boil.Executor) (BattleQueueFeeSlice, error) {
	var o []*BattleQueueFee

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BattleQueueFee slice")
	}

	if len(battleQueueFeeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BattleQueueFee records in the query.
func (q battleQueueFeeQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count battle_queue_fees rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battleQueueFeeQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if battle_queue_fees exists")
	}

	return count > 0, nil
}

// Mech pointed to by the foreign key.
func (o *BattleQueueFee) Mech(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MechID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// PaidBy pointed to by the foreign key.
func (o *BattleQueueFee) PaidBy(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PaidByID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// FeeBattleQueues retrieves all the battle_queue's BattleQueues with an executor via fee_id column.
func (o *BattleQueueFee) FeeBattleQueues(mods ...qm.QueryMod) battleQueueQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_queue\".\"fee_id\"=?", o.ID),
	)

	query := BattleQueues(queryMods...)
	queries.SetFrom(query.Query, "\"battle_queue\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_queue\".*"})
	}

	return query
}

// LoadMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleQueueFeeL) LoadMech(e boil.Executor, singular bool, maybeBattleQueueFee interface{}, mods queries.Applicator) error {
	var slice []*BattleQueueFee
	var object *BattleQueueFee

	if singular {
		object = maybeBattleQueueFee.(*BattleQueueFee)
	} else {
		slice = *maybeBattleQueueFee.(*[]*BattleQueueFee)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleQueueFeeR{}
		}
		args = append(args, object.MechID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleQueueFeeR{}
			}

			for _, a := range args {
				if a == obj.MechID {
					continue Outer
				}
			}

			args = append(args, obj.MechID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(battleQueueFeeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Mech = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.BattleQueueFees = append(foreign.R.BattleQueueFees, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MechID == foreign.ID {
				local.R.Mech = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.BattleQueueFees = append(foreign.R.BattleQueueFees, local)
				break
			}
		}
	}

	return nil
}

// LoadPaidBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleQueueFeeL) LoadPaidBy(e boil.Executor, singular bool, maybeBattleQueueFee interface{}, mods queries.Applicator) error {
	var slice []*BattleQueueFee
	var object *BattleQueueFee

	if singular {
		object = maybeBattleQueueFee.(*BattleQueueFee)
	} else {
		slice = *maybeBattleQueueFee.(*[]*BattleQueueFee)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleQueueFeeR{}
		}
		args = append(args, object.PaidByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleQueueFeeR{}
			}

			for _, a := range args {
				if a == obj.PaidByID {
					continue Outer
				}
			}

			args = append(args, obj.PaidByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(battleQueueFeeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PaidBy = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.PaidByBattleQueueFees = append(foreign.R.PaidByBattleQueueFees, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PaidByID == foreign.ID {
				local.R.PaidBy = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.PaidByBattleQueueFees = append(foreign.R.PaidByBattleQueueFees, local)
				break
			}
		}
	}

	return nil
}

// LoadFeeBattleQueues allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleQueueFeeL) LoadFeeBattleQueues(e boil.Executor, singular bool, maybeBattleQueueFee interface{}, mods queries.Applicator) error {
	var slice []*BattleQueueFee
	var object *BattleQueueFee

	if singular {
		object = maybeBattleQueueFee.(*BattleQueueFee)
	} else {
		slice = *maybeBattleQueueFee.(*[]*BattleQueueFee)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleQueueFeeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleQueueFeeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_queue`),
		qm.WhereIn(`battle_queue.fee_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_queue")
	}

	var resultSlice []*BattleQueue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_queue")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_queue")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_queue")
	}

	if len(battleQueueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FeeBattleQueues = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleQueueR{}
			}
			foreign.R.Fee = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.FeeID) {
				local.R.FeeBattleQueues = append(local.R.FeeBattleQueues, foreign)
				if foreign.R == nil {
					foreign.R = &battleQueueR{}
				}
				foreign.R.Fee = local
				break
			}
		}
	}

	return nil
}

// SetMech of the battleQueueFee to the related item.
// Sets o.R.Mech to related.
// Adds o to related.R.BattleQueueFees.
func (o *BattleQueueFee) SetMech(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_queue_fees\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleQueueFeePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MechID = related.ID
	if o.R == nil {
		o.R = &battleQueueFeeR{
			Mech: related,
		}
	} else {
		o.R.Mech = related
	}

	if related.R == nil {
		related.R = &mechR{
			BattleQueueFees: BattleQueueFeeSlice{o},
		}
	} else {
		related.R.BattleQueueFees = append(related.R.BattleQueueFees, o)
	}

	return nil
}

// SetPaidBy of the battleQueueFee to the related item.
// Sets o.R.PaidBy to related.
// Adds o to related.R.PaidByBattleQueueFees.
func (o *BattleQueueFee) SetPaidBy(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_queue_fees\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"paid_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleQueueFeePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PaidByID = related.ID
	if o.R == nil {
		o.R = &battleQueueFeeR{
			PaidBy: related,
		}
	} else {
		o.R.PaidBy = related
	}

	if related.R == nil {
		related.R = &playerR{
			PaidByBattleQueueFees: BattleQueueFeeSlice{o},
		}
	} else {
		related.R.PaidByBattleQueueFees = append(related.R.PaidByBattleQueueFees, o)
	}

	return nil
}

// AddFeeBattleQueues adds the given related objects to the existing relationships
// of the battle_queue_fee, optionally inserting them as new records.
// Appends related to o.R.FeeBattleQueues.
// Sets related.R.Fee appropriately.
func (o *BattleQueueFee) AddFeeBattleQueues(exec boil.Executor, insert bool, related ...*BattleQueue) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.FeeID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_queue\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"fee_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleQueuePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.MechID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.FeeID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &battleQueueFeeR{
			FeeBattleQueues: related,
		}
	} else {
		o.R.FeeBattleQueues = append(o.R.FeeBattleQueues, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleQueueR{
				Fee: o,
			}
		} else {
			rel.R.Fee = o
		}
	}
	return nil
}

// SetFeeBattleQueues removes all previously related items of the
// battle_queue_fee replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Fee's FeeBattleQueues accordingly.
// Replaces o.R.FeeBattleQueues with related.
// Sets related.R.Fee's FeeBattleQueues accordingly.
func (o *BattleQueueFee) SetFeeBattleQueues(exec boil.Executor, insert bool, related ...*BattleQueue) error {
	query := "update \"battle_queue\" set \"fee_id\" = null where \"fee_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.FeeBattleQueues {
			queries.SetScanner(&rel.FeeID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Fee = nil
		}

		o.R.FeeBattleQueues = nil
	}
	return o.AddFeeBattleQueues(exec, insert, related...)
}

// RemoveFeeBattleQueues relationships from objects passed in.
// Removes related items from R.FeeBattleQueues (uses pointer comparison, removal does not keep order)
// Sets related.R.Fee.
func (o *BattleQueueFee) RemoveFeeBattleQueues(exec boil.Executor, related ...*BattleQueue) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.FeeID, nil)
		if rel.R != nil {
			rel.R.Fee = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("fee_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.FeeBattleQueues {
			if rel != ri {
				continue
			}

			ln := len(o.R.FeeBattleQueues)
			if ln > 1 && i < ln-1 {
				o.R.FeeBattleQueues[i] = o.R.FeeBattleQueues[ln-1]
			}
			o.R.FeeBattleQueues = o.R.FeeBattleQueues[:ln-1]
			break
		}
	}

	return nil
}

// BattleQueueFees retrieves all the records using an executor.
func BattleQueueFees(mods ...qm.QueryMod) battleQueueFeeQuery {
	mods = append(mods, qm.From("\"battle_queue_fees\""), qmhelper.WhereIsNull("\"battle_queue_fees\".\"deleted_at\""))
	return battleQueueFeeQuery{NewQuery(mods...)}
}

// FindBattleQueueFee retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattleQueueFee(exec boil.Executor, iD string, selectCols ...string) (*BattleQueueFee, error) {
	battleQueueFeeObj := &BattleQueueFee{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battle_queue_fees\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, battleQueueFeeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from battle_queue_fees")
	}

	if err = battleQueueFeeObj.doAfterSelectHooks(exec); err != nil {
		return battleQueueFeeObj, err
	}

	return battleQueueFeeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BattleQueueFee) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_queue_fees provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleQueueFeeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battleQueueFeeInsertCacheMut.RLock()
	cache, cached := battleQueueFeeInsertCache[key]
	battleQueueFeeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battleQueueFeeAllColumns,
			battleQueueFeeColumnsWithDefault,
			battleQueueFeeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battleQueueFeeType, battleQueueFeeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battleQueueFeeType, battleQueueFeeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battle_queue_fees\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battle_queue_fees\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into battle_queue_fees")
	}

	if !cached {
		battleQueueFeeInsertCacheMut.Lock()
		battleQueueFeeInsertCache[key] = cache
		battleQueueFeeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BattleQueueFee.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BattleQueueFee) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battleQueueFeeUpdateCacheMut.RLock()
	cache, cached := battleQueueFeeUpdateCache[key]
	battleQueueFeeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battleQueueFeeAllColumns,
			battleQueueFeePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update battle_queue_fees, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battle_queue_fees\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battleQueueFeePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battleQueueFeeType, battleQueueFeeMapping, append(wl, battleQueueFeePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update battle_queue_fees row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for battle_queue_fees")
	}

	if !cached {
		battleQueueFeeUpdateCacheMut.Lock()
		battleQueueFeeUpdateCache[key] = cache
		battleQueueFeeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battleQueueFeeQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for battle_queue_fees")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for battle_queue_fees")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattleQueueFeeSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleQueueFeePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battle_queue_fees\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battleQueueFeePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in battleQueueFee slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all battleQueueFee")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BattleQueueFee) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_queue_fees provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleQueueFeeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battleQueueFeeUpsertCacheMut.RLock()
	cache, cached := battleQueueFeeUpsertCache[key]
	battleQueueFeeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battleQueueFeeAllColumns,
			battleQueueFeeColumnsWithDefault,
			battleQueueFeeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			battleQueueFeeAllColumns,
			battleQueueFeePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert battle_queue_fees, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battleQueueFeePrimaryKeyColumns))
			copy(conflict, battleQueueFeePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battle_queue_fees\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battleQueueFeeType, battleQueueFeeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battleQueueFeeType, battleQueueFeeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert battle_queue_fees")
	}

	if !cached {
		battleQueueFeeUpsertCacheMut.Lock()
		battleQueueFeeUpsertCache[key] = cache
		battleQueueFeeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BattleQueueFee record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BattleQueueFee) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BattleQueueFee provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battleQueueFeePrimaryKeyMapping)
		sql = "DELETE FROM \"battle_queue_fees\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"battle_queue_fees\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(battleQueueFeeType, battleQueueFeeMapping, append(wl, battleQueueFeePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from battle_queue_fees")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for battle_queue_fees")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battleQueueFeeQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no battleQueueFeeQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battle_queue_fees")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_queue_fees")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattleQueueFeeSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(battleQueueFeeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleQueueFeePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"battle_queue_fees\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleQueueFeePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleQueueFeePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"battle_queue_fees\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, battleQueueFeePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battleQueueFee slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_queue_fees")
	}

	if len(battleQueueFeeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BattleQueueFee) Reload(exec boil.Executor) error {
	ret, err := FindBattleQueueFee(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattleQueueFeeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattleQueueFeeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleQueueFeePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battle_queue_fees\".* FROM \"battle_queue_fees\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleQueueFeePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BattleQueueFeeSlice")
	}

	*o = slice

	return nil
}

// BattleQueueFeeExists checks if the BattleQueueFee row exists.
func BattleQueueFeeExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battle_queue_fees\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if battle_queue_fees exists")
	}

	return exists, nil
}
