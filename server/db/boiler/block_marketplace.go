// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BlockMarketplace is an object representing the database table.
type BlockMarketplace struct {
	ID            string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	PublicAddress string      `boiler:"public_address" boil:"public_address" json:"public_address" toml:"public_address" yaml:"public_address"`
	Note          null.String `boiler:"note" boil:"note" json:"note,omitempty" toml:"note" yaml:"note,omitempty"`
	CreatedAt     time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	BlockedUntil  time.Time   `boiler:"blocked_until" boil:"blocked_until" json:"blocked_until" toml:"blocked_until" yaml:"blocked_until"`

	R *blockMarketplaceR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L blockMarketplaceL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlockMarketplaceColumns = struct {
	ID            string
	PublicAddress string
	Note          string
	CreatedAt     string
	BlockedUntil  string
}{
	ID:            "id",
	PublicAddress: "public_address",
	Note:          "note",
	CreatedAt:     "created_at",
	BlockedUntil:  "blocked_until",
}

var BlockMarketplaceTableColumns = struct {
	ID            string
	PublicAddress string
	Note          string
	CreatedAt     string
	BlockedUntil  string
}{
	ID:            "block_marketplace.id",
	PublicAddress: "block_marketplace.public_address",
	Note:          "block_marketplace.note",
	CreatedAt:     "block_marketplace.created_at",
	BlockedUntil:  "block_marketplace.blocked_until",
}

// Generated where

var BlockMarketplaceWhere = struct {
	ID            whereHelperstring
	PublicAddress whereHelperstring
	Note          whereHelpernull_String
	CreatedAt     whereHelpertime_Time
	BlockedUntil  whereHelpertime_Time
}{
	ID:            whereHelperstring{field: "\"block_marketplace\".\"id\""},
	PublicAddress: whereHelperstring{field: "\"block_marketplace\".\"public_address\""},
	Note:          whereHelpernull_String{field: "\"block_marketplace\".\"note\""},
	CreatedAt:     whereHelpertime_Time{field: "\"block_marketplace\".\"created_at\""},
	BlockedUntil:  whereHelpertime_Time{field: "\"block_marketplace\".\"blocked_until\""},
}

// BlockMarketplaceRels is where relationship names are stored.
var BlockMarketplaceRels = struct {
}{}

// blockMarketplaceR is where relationships are stored.
type blockMarketplaceR struct {
}

// NewStruct creates a new relationship struct
func (*blockMarketplaceR) NewStruct() *blockMarketplaceR {
	return &blockMarketplaceR{}
}

// blockMarketplaceL is where Load methods for each relationship are stored.
type blockMarketplaceL struct{}

var (
	blockMarketplaceAllColumns            = []string{"id", "public_address", "note", "created_at", "blocked_until"}
	blockMarketplaceColumnsWithoutDefault = []string{"public_address"}
	blockMarketplaceColumnsWithDefault    = []string{"id", "note", "created_at", "blocked_until"}
	blockMarketplacePrimaryKeyColumns     = []string{"id"}
	blockMarketplaceGeneratedColumns      = []string{}
)

type (
	// BlockMarketplaceSlice is an alias for a slice of pointers to BlockMarketplace.
	// This should almost always be used instead of []BlockMarketplace.
	BlockMarketplaceSlice []*BlockMarketplace
	// BlockMarketplaceHook is the signature for custom BlockMarketplace hook methods
	BlockMarketplaceHook func(boil.Executor, *BlockMarketplace) error

	blockMarketplaceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blockMarketplaceType                 = reflect.TypeOf(&BlockMarketplace{})
	blockMarketplaceMapping              = queries.MakeStructMapping(blockMarketplaceType)
	blockMarketplacePrimaryKeyMapping, _ = queries.BindMapping(blockMarketplaceType, blockMarketplaceMapping, blockMarketplacePrimaryKeyColumns)
	blockMarketplaceInsertCacheMut       sync.RWMutex
	blockMarketplaceInsertCache          = make(map[string]insertCache)
	blockMarketplaceUpdateCacheMut       sync.RWMutex
	blockMarketplaceUpdateCache          = make(map[string]updateCache)
	blockMarketplaceUpsertCacheMut       sync.RWMutex
	blockMarketplaceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var blockMarketplaceAfterSelectHooks []BlockMarketplaceHook

var blockMarketplaceBeforeInsertHooks []BlockMarketplaceHook
var blockMarketplaceAfterInsertHooks []BlockMarketplaceHook

var blockMarketplaceBeforeUpdateHooks []BlockMarketplaceHook
var blockMarketplaceAfterUpdateHooks []BlockMarketplaceHook

var blockMarketplaceBeforeDeleteHooks []BlockMarketplaceHook
var blockMarketplaceAfterDeleteHooks []BlockMarketplaceHook

var blockMarketplaceBeforeUpsertHooks []BlockMarketplaceHook
var blockMarketplaceAfterUpsertHooks []BlockMarketplaceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BlockMarketplace) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range blockMarketplaceAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BlockMarketplace) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blockMarketplaceBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BlockMarketplace) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blockMarketplaceAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BlockMarketplace) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blockMarketplaceBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BlockMarketplace) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blockMarketplaceAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BlockMarketplace) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blockMarketplaceBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BlockMarketplace) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blockMarketplaceAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BlockMarketplace) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blockMarketplaceBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BlockMarketplace) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blockMarketplaceAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBlockMarketplaceHook registers your hook function for all future operations.
func AddBlockMarketplaceHook(hookPoint boil.HookPoint, blockMarketplaceHook BlockMarketplaceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		blockMarketplaceAfterSelectHooks = append(blockMarketplaceAfterSelectHooks, blockMarketplaceHook)
	case boil.BeforeInsertHook:
		blockMarketplaceBeforeInsertHooks = append(blockMarketplaceBeforeInsertHooks, blockMarketplaceHook)
	case boil.AfterInsertHook:
		blockMarketplaceAfterInsertHooks = append(blockMarketplaceAfterInsertHooks, blockMarketplaceHook)
	case boil.BeforeUpdateHook:
		blockMarketplaceBeforeUpdateHooks = append(blockMarketplaceBeforeUpdateHooks, blockMarketplaceHook)
	case boil.AfterUpdateHook:
		blockMarketplaceAfterUpdateHooks = append(blockMarketplaceAfterUpdateHooks, blockMarketplaceHook)
	case boil.BeforeDeleteHook:
		blockMarketplaceBeforeDeleteHooks = append(blockMarketplaceBeforeDeleteHooks, blockMarketplaceHook)
	case boil.AfterDeleteHook:
		blockMarketplaceAfterDeleteHooks = append(blockMarketplaceAfterDeleteHooks, blockMarketplaceHook)
	case boil.BeforeUpsertHook:
		blockMarketplaceBeforeUpsertHooks = append(blockMarketplaceBeforeUpsertHooks, blockMarketplaceHook)
	case boil.AfterUpsertHook:
		blockMarketplaceAfterUpsertHooks = append(blockMarketplaceAfterUpsertHooks, blockMarketplaceHook)
	}
}

// One returns a single blockMarketplace record from the query.
func (q blockMarketplaceQuery) One(exec boil.Executor) (*BlockMarketplace, error) {
	o := &BlockMarketplace{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for block_marketplace")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BlockMarketplace records from the query.
func (q blockMarketplaceQuery) All(exec boil.Executor) (BlockMarketplaceSlice, error) {
	var o []*BlockMarketplace

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BlockMarketplace slice")
	}

	if len(blockMarketplaceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BlockMarketplace records in the query.
func (q blockMarketplaceQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count block_marketplace rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q blockMarketplaceQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if block_marketplace exists")
	}

	return count > 0, nil
}

// BlockMarketplaces retrieves all the records using an executor.
func BlockMarketplaces(mods ...qm.QueryMod) blockMarketplaceQuery {
	mods = append(mods, qm.From("\"block_marketplace\""))
	return blockMarketplaceQuery{NewQuery(mods...)}
}

// FindBlockMarketplace retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlockMarketplace(exec boil.Executor, iD string, selectCols ...string) (*BlockMarketplace, error) {
	blockMarketplaceObj := &BlockMarketplace{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"block_marketplace\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, blockMarketplaceObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from block_marketplace")
	}

	if err = blockMarketplaceObj.doAfterSelectHooks(exec); err != nil {
		return blockMarketplaceObj, err
	}

	return blockMarketplaceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlockMarketplace) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no block_marketplace provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blockMarketplaceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blockMarketplaceInsertCacheMut.RLock()
	cache, cached := blockMarketplaceInsertCache[key]
	blockMarketplaceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blockMarketplaceAllColumns,
			blockMarketplaceColumnsWithDefault,
			blockMarketplaceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blockMarketplaceType, blockMarketplaceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blockMarketplaceType, blockMarketplaceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"block_marketplace\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"block_marketplace\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into block_marketplace")
	}

	if !cached {
		blockMarketplaceInsertCacheMut.Lock()
		blockMarketplaceInsertCache[key] = cache
		blockMarketplaceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BlockMarketplace.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlockMarketplace) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	blockMarketplaceUpdateCacheMut.RLock()
	cache, cached := blockMarketplaceUpdateCache[key]
	blockMarketplaceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blockMarketplaceAllColumns,
			blockMarketplacePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update block_marketplace, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"block_marketplace\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, blockMarketplacePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blockMarketplaceType, blockMarketplaceMapping, append(wl, blockMarketplacePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update block_marketplace row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for block_marketplace")
	}

	if !cached {
		blockMarketplaceUpdateCacheMut.Lock()
		blockMarketplaceUpdateCache[key] = cache
		blockMarketplaceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q blockMarketplaceQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for block_marketplace")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for block_marketplace")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlockMarketplaceSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blockMarketplacePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"block_marketplace\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, blockMarketplacePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in blockMarketplace slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all blockMarketplace")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlockMarketplace) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no block_marketplace provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blockMarketplaceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blockMarketplaceUpsertCacheMut.RLock()
	cache, cached := blockMarketplaceUpsertCache[key]
	blockMarketplaceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blockMarketplaceAllColumns,
			blockMarketplaceColumnsWithDefault,
			blockMarketplaceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			blockMarketplaceAllColumns,
			blockMarketplacePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert block_marketplace, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(blockMarketplacePrimaryKeyColumns))
			copy(conflict, blockMarketplacePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"block_marketplace\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(blockMarketplaceType, blockMarketplaceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blockMarketplaceType, blockMarketplaceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert block_marketplace")
	}

	if !cached {
		blockMarketplaceUpsertCacheMut.Lock()
		blockMarketplaceUpsertCache[key] = cache
		blockMarketplaceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BlockMarketplace record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlockMarketplace) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BlockMarketplace provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blockMarketplacePrimaryKeyMapping)
	sql := "DELETE FROM \"block_marketplace\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from block_marketplace")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for block_marketplace")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q blockMarketplaceQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no blockMarketplaceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from block_marketplace")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for block_marketplace")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlockMarketplaceSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(blockMarketplaceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blockMarketplacePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"block_marketplace\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blockMarketplacePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blockMarketplace slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for block_marketplace")
	}

	if len(blockMarketplaceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlockMarketplace) Reload(exec boil.Executor) error {
	ret, err := FindBlockMarketplace(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlockMarketplaceSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlockMarketplaceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blockMarketplacePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"block_marketplace\".* FROM \"block_marketplace\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blockMarketplacePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BlockMarketplaceSlice")
	}

	*o = slice

	return nil
}

// BlockMarketplaceExists checks if the BlockMarketplace row exists.
func BlockMarketplaceExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"block_marketplace\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if block_marketplace exists")
	}

	return exists, nil
}
