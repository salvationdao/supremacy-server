// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BattleMapQueueOld is an object representing the database table.
type BattleMapQueueOld struct {
	ID        string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	MapID     string    `boiler:"map_id" boil:"map_id" json:"map_id" toml:"map_id" yaml:"map_id"`
	CreatedAt time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *battleMapQueueOldR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L battleMapQueueOldL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattleMapQueueOldColumns = struct {
	ID        string
	MapID     string
	CreatedAt string
}{
	ID:        "id",
	MapID:     "map_id",
	CreatedAt: "created_at",
}

var BattleMapQueueOldTableColumns = struct {
	ID        string
	MapID     string
	CreatedAt string
}{
	ID:        "battle_map_queue_old.id",
	MapID:     "battle_map_queue_old.map_id",
	CreatedAt: "battle_map_queue_old.created_at",
}

// Generated where

var BattleMapQueueOldWhere = struct {
	ID        whereHelperstring
	MapID     whereHelperstring
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"battle_map_queue_old\".\"id\""},
	MapID:     whereHelperstring{field: "\"battle_map_queue_old\".\"map_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"battle_map_queue_old\".\"created_at\""},
}

// BattleMapQueueOldRels is where relationship names are stored.
var BattleMapQueueOldRels = struct {
	Map string
}{
	Map: "Map",
}

// battleMapQueueOldR is where relationships are stored.
type battleMapQueueOldR struct {
	Map *GameMap `boiler:"Map" boil:"Map" json:"Map" toml:"Map" yaml:"Map"`
}

// NewStruct creates a new relationship struct
func (*battleMapQueueOldR) NewStruct() *battleMapQueueOldR {
	return &battleMapQueueOldR{}
}

// battleMapQueueOldL is where Load methods for each relationship are stored.
type battleMapQueueOldL struct{}

var (
	battleMapQueueOldAllColumns            = []string{"id", "map_id", "created_at"}
	battleMapQueueOldColumnsWithoutDefault = []string{"map_id"}
	battleMapQueueOldColumnsWithDefault    = []string{"id", "created_at"}
	battleMapQueueOldPrimaryKeyColumns     = []string{"id"}
	battleMapQueueOldGeneratedColumns      = []string{}
)

type (
	// BattleMapQueueOldSlice is an alias for a slice of pointers to BattleMapQueueOld.
	// This should almost always be used instead of []BattleMapQueueOld.
	BattleMapQueueOldSlice []*BattleMapQueueOld
	// BattleMapQueueOldHook is the signature for custom BattleMapQueueOld hook methods
	BattleMapQueueOldHook func(boil.Executor, *BattleMapQueueOld) error

	battleMapQueueOldQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battleMapQueueOldType                 = reflect.TypeOf(&BattleMapQueueOld{})
	battleMapQueueOldMapping              = queries.MakeStructMapping(battleMapQueueOldType)
	battleMapQueueOldPrimaryKeyMapping, _ = queries.BindMapping(battleMapQueueOldType, battleMapQueueOldMapping, battleMapQueueOldPrimaryKeyColumns)
	battleMapQueueOldInsertCacheMut       sync.RWMutex
	battleMapQueueOldInsertCache          = make(map[string]insertCache)
	battleMapQueueOldUpdateCacheMut       sync.RWMutex
	battleMapQueueOldUpdateCache          = make(map[string]updateCache)
	battleMapQueueOldUpsertCacheMut       sync.RWMutex
	battleMapQueueOldUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battleMapQueueOldAfterSelectHooks []BattleMapQueueOldHook

var battleMapQueueOldBeforeInsertHooks []BattleMapQueueOldHook
var battleMapQueueOldAfterInsertHooks []BattleMapQueueOldHook

var battleMapQueueOldBeforeUpdateHooks []BattleMapQueueOldHook
var battleMapQueueOldAfterUpdateHooks []BattleMapQueueOldHook

var battleMapQueueOldBeforeDeleteHooks []BattleMapQueueOldHook
var battleMapQueueOldAfterDeleteHooks []BattleMapQueueOldHook

var battleMapQueueOldBeforeUpsertHooks []BattleMapQueueOldHook
var battleMapQueueOldAfterUpsertHooks []BattleMapQueueOldHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BattleMapQueueOld) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range battleMapQueueOldAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BattleMapQueueOld) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleMapQueueOldBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BattleMapQueueOld) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleMapQueueOldAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BattleMapQueueOld) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleMapQueueOldBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BattleMapQueueOld) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleMapQueueOldAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BattleMapQueueOld) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleMapQueueOldBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BattleMapQueueOld) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleMapQueueOldAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BattleMapQueueOld) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleMapQueueOldBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BattleMapQueueOld) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleMapQueueOldAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattleMapQueueOldHook registers your hook function for all future operations.
func AddBattleMapQueueOldHook(hookPoint boil.HookPoint, battleMapQueueOldHook BattleMapQueueOldHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		battleMapQueueOldAfterSelectHooks = append(battleMapQueueOldAfterSelectHooks, battleMapQueueOldHook)
	case boil.BeforeInsertHook:
		battleMapQueueOldBeforeInsertHooks = append(battleMapQueueOldBeforeInsertHooks, battleMapQueueOldHook)
	case boil.AfterInsertHook:
		battleMapQueueOldAfterInsertHooks = append(battleMapQueueOldAfterInsertHooks, battleMapQueueOldHook)
	case boil.BeforeUpdateHook:
		battleMapQueueOldBeforeUpdateHooks = append(battleMapQueueOldBeforeUpdateHooks, battleMapQueueOldHook)
	case boil.AfterUpdateHook:
		battleMapQueueOldAfterUpdateHooks = append(battleMapQueueOldAfterUpdateHooks, battleMapQueueOldHook)
	case boil.BeforeDeleteHook:
		battleMapQueueOldBeforeDeleteHooks = append(battleMapQueueOldBeforeDeleteHooks, battleMapQueueOldHook)
	case boil.AfterDeleteHook:
		battleMapQueueOldAfterDeleteHooks = append(battleMapQueueOldAfterDeleteHooks, battleMapQueueOldHook)
	case boil.BeforeUpsertHook:
		battleMapQueueOldBeforeUpsertHooks = append(battleMapQueueOldBeforeUpsertHooks, battleMapQueueOldHook)
	case boil.AfterUpsertHook:
		battleMapQueueOldAfterUpsertHooks = append(battleMapQueueOldAfterUpsertHooks, battleMapQueueOldHook)
	}
}

// One returns a single battleMapQueueOld record from the query.
func (q battleMapQueueOldQuery) One(exec boil.Executor) (*BattleMapQueueOld, error) {
	o := &BattleMapQueueOld{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for battle_map_queue_old")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BattleMapQueueOld records from the query.
func (q battleMapQueueOldQuery) All(exec boil.Executor) (BattleMapQueueOldSlice, error) {
	var o []*BattleMapQueueOld

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BattleMapQueueOld slice")
	}

	if len(battleMapQueueOldAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BattleMapQueueOld records in the query.
func (q battleMapQueueOldQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count battle_map_queue_old rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battleMapQueueOldQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if battle_map_queue_old exists")
	}

	return count > 0, nil
}

// Map pointed to by the foreign key.
func (o *BattleMapQueueOld) Map(mods ...qm.QueryMod) gameMapQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MapID),
	}

	queryMods = append(queryMods, mods...)

	query := GameMaps(queryMods...)
	queries.SetFrom(query.Query, "\"game_maps\"")

	return query
}

// LoadMap allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleMapQueueOldL) LoadMap(e boil.Executor, singular bool, maybeBattleMapQueueOld interface{}, mods queries.Applicator) error {
	var slice []*BattleMapQueueOld
	var object *BattleMapQueueOld

	if singular {
		object = maybeBattleMapQueueOld.(*BattleMapQueueOld)
	} else {
		slice = *maybeBattleMapQueueOld.(*[]*BattleMapQueueOld)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleMapQueueOldR{}
		}
		args = append(args, object.MapID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleMapQueueOldR{}
			}

			for _, a := range args {
				if a == obj.MapID {
					continue Outer
				}
			}

			args = append(args, obj.MapID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`game_maps`),
		qm.WhereIn(`game_maps.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GameMap")
	}

	var resultSlice []*GameMap
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GameMap")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for game_maps")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_maps")
	}

	if len(battleMapQueueOldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Map = foreign
		if foreign.R == nil {
			foreign.R = &gameMapR{}
		}
		foreign.R.MapBattleMapQueueOlds = append(foreign.R.MapBattleMapQueueOlds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MapID == foreign.ID {
				local.R.Map = foreign
				if foreign.R == nil {
					foreign.R = &gameMapR{}
				}
				foreign.R.MapBattleMapQueueOlds = append(foreign.R.MapBattleMapQueueOlds, local)
				break
			}
		}
	}

	return nil
}

// SetMap of the battleMapQueueOld to the related item.
// Sets o.R.Map to related.
// Adds o to related.R.MapBattleMapQueueOlds.
func (o *BattleMapQueueOld) SetMap(exec boil.Executor, insert bool, related *GameMap) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_map_queue_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"map_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleMapQueueOldPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MapID = related.ID
	if o.R == nil {
		o.R = &battleMapQueueOldR{
			Map: related,
		}
	} else {
		o.R.Map = related
	}

	if related.R == nil {
		related.R = &gameMapR{
			MapBattleMapQueueOlds: BattleMapQueueOldSlice{o},
		}
	} else {
		related.R.MapBattleMapQueueOlds = append(related.R.MapBattleMapQueueOlds, o)
	}

	return nil
}

// BattleMapQueueOlds retrieves all the records using an executor.
func BattleMapQueueOlds(mods ...qm.QueryMod) battleMapQueueOldQuery {
	mods = append(mods, qm.From("\"battle_map_queue_old\""))
	return battleMapQueueOldQuery{NewQuery(mods...)}
}

// FindBattleMapQueueOld retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattleMapQueueOld(exec boil.Executor, iD string, selectCols ...string) (*BattleMapQueueOld, error) {
	battleMapQueueOldObj := &BattleMapQueueOld{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battle_map_queue_old\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, battleMapQueueOldObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from battle_map_queue_old")
	}

	if err = battleMapQueueOldObj.doAfterSelectHooks(exec); err != nil {
		return battleMapQueueOldObj, err
	}

	return battleMapQueueOldObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BattleMapQueueOld) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_map_queue_old provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleMapQueueOldColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battleMapQueueOldInsertCacheMut.RLock()
	cache, cached := battleMapQueueOldInsertCache[key]
	battleMapQueueOldInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battleMapQueueOldAllColumns,
			battleMapQueueOldColumnsWithDefault,
			battleMapQueueOldColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battleMapQueueOldType, battleMapQueueOldMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battleMapQueueOldType, battleMapQueueOldMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battle_map_queue_old\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battle_map_queue_old\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into battle_map_queue_old")
	}

	if !cached {
		battleMapQueueOldInsertCacheMut.Lock()
		battleMapQueueOldInsertCache[key] = cache
		battleMapQueueOldInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BattleMapQueueOld.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BattleMapQueueOld) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battleMapQueueOldUpdateCacheMut.RLock()
	cache, cached := battleMapQueueOldUpdateCache[key]
	battleMapQueueOldUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battleMapQueueOldAllColumns,
			battleMapQueueOldPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update battle_map_queue_old, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battle_map_queue_old\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battleMapQueueOldPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battleMapQueueOldType, battleMapQueueOldMapping, append(wl, battleMapQueueOldPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update battle_map_queue_old row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for battle_map_queue_old")
	}

	if !cached {
		battleMapQueueOldUpdateCacheMut.Lock()
		battleMapQueueOldUpdateCache[key] = cache
		battleMapQueueOldUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battleMapQueueOldQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for battle_map_queue_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for battle_map_queue_old")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattleMapQueueOldSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleMapQueueOldPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battle_map_queue_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battleMapQueueOldPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in battleMapQueueOld slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all battleMapQueueOld")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BattleMapQueueOld) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_map_queue_old provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleMapQueueOldColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battleMapQueueOldUpsertCacheMut.RLock()
	cache, cached := battleMapQueueOldUpsertCache[key]
	battleMapQueueOldUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battleMapQueueOldAllColumns,
			battleMapQueueOldColumnsWithDefault,
			battleMapQueueOldColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			battleMapQueueOldAllColumns,
			battleMapQueueOldPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert battle_map_queue_old, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battleMapQueueOldPrimaryKeyColumns))
			copy(conflict, battleMapQueueOldPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battle_map_queue_old\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battleMapQueueOldType, battleMapQueueOldMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battleMapQueueOldType, battleMapQueueOldMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert battle_map_queue_old")
	}

	if !cached {
		battleMapQueueOldUpsertCacheMut.Lock()
		battleMapQueueOldUpsertCache[key] = cache
		battleMapQueueOldUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BattleMapQueueOld record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BattleMapQueueOld) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BattleMapQueueOld provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battleMapQueueOldPrimaryKeyMapping)
	sql := "DELETE FROM \"battle_map_queue_old\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from battle_map_queue_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for battle_map_queue_old")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battleMapQueueOldQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no battleMapQueueOldQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battle_map_queue_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_map_queue_old")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattleMapQueueOldSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(battleMapQueueOldBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleMapQueueOldPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"battle_map_queue_old\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleMapQueueOldPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battleMapQueueOld slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_map_queue_old")
	}

	if len(battleMapQueueOldAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BattleMapQueueOld) Reload(exec boil.Executor) error {
	ret, err := FindBattleMapQueueOld(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattleMapQueueOldSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattleMapQueueOldSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleMapQueueOldPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battle_map_queue_old\".* FROM \"battle_map_queue_old\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleMapQueueOldPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BattleMapQueueOldSlice")
	}

	*o = slice

	return nil
}

// BattleMapQueueOldExists checks if the BattleMapQueueOld row exists.
func BattleMapQueueOldExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battle_map_queue_old\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if battle_map_queue_old exists")
	}

	return exists, nil
}
