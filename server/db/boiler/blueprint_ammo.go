// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BlueprintAmmo is an object representing the database table.
type BlueprintAmmo struct {
	ID                          string              `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Label                       string              `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	WeaponType                  string              `boiler:"weapon_type" boil:"weapon_type" json:"weapon_type" toml:"weapon_type" yaml:"weapon_type"`
	DamageMultiplier            decimal.NullDecimal `boiler:"damage_multiplier" boil:"damage_multiplier" json:"damage_multiplier,omitempty" toml:"damage_multiplier" yaml:"damage_multiplier,omitempty"`
	DamageFalloffMultiplier     decimal.NullDecimal `boiler:"damage_falloff_multiplier" boil:"damage_falloff_multiplier" json:"damage_falloff_multiplier,omitempty" toml:"damage_falloff_multiplier" yaml:"damage_falloff_multiplier,omitempty"`
	DamageFalloffRateMultiplier decimal.NullDecimal `boiler:"damage_falloff_rate_multiplier" boil:"damage_falloff_rate_multiplier" json:"damage_falloff_rate_multiplier,omitempty" toml:"damage_falloff_rate_multiplier" yaml:"damage_falloff_rate_multiplier,omitempty"`
	SpreadMultiplier            decimal.NullDecimal `boiler:"spread_multiplier" boil:"spread_multiplier" json:"spread_multiplier,omitempty" toml:"spread_multiplier" yaml:"spread_multiplier,omitempty"`
	RateOfFireMultiplier        decimal.NullDecimal `boiler:"rate_of_fire_multiplier" boil:"rate_of_fire_multiplier" json:"rate_of_fire_multiplier,omitempty" toml:"rate_of_fire_multiplier" yaml:"rate_of_fire_multiplier,omitempty"`
	RadiusMultiplier            decimal.NullDecimal `boiler:"radius_multiplier" boil:"radius_multiplier" json:"radius_multiplier,omitempty" toml:"radius_multiplier" yaml:"radius_multiplier,omitempty"`
	ProjectileSpeedMultiplier   decimal.NullDecimal `boiler:"projectile_speed_multiplier" boil:"projectile_speed_multiplier" json:"projectile_speed_multiplier,omitempty" toml:"projectile_speed_multiplier" yaml:"projectile_speed_multiplier,omitempty"`
	EnergyCostMultiplier        decimal.NullDecimal `boiler:"energy_cost_multiplier" boil:"energy_cost_multiplier" json:"energy_cost_multiplier,omitempty" toml:"energy_cost_multiplier" yaml:"energy_cost_multiplier,omitempty"`
	MaxAmmoMultiplier           decimal.NullDecimal `boiler:"max_ammo_multiplier" boil:"max_ammo_multiplier" json:"max_ammo_multiplier,omitempty" toml:"max_ammo_multiplier" yaml:"max_ammo_multiplier,omitempty"`
	CreatedAt                   time.Time           `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *blueprintAmmoR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L blueprintAmmoL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlueprintAmmoColumns = struct {
	ID                          string
	Label                       string
	WeaponType                  string
	DamageMultiplier            string
	DamageFalloffMultiplier     string
	DamageFalloffRateMultiplier string
	SpreadMultiplier            string
	RateOfFireMultiplier        string
	RadiusMultiplier            string
	ProjectileSpeedMultiplier   string
	EnergyCostMultiplier        string
	MaxAmmoMultiplier           string
	CreatedAt                   string
}{
	ID:                          "id",
	Label:                       "label",
	WeaponType:                  "weapon_type",
	DamageMultiplier:            "damage_multiplier",
	DamageFalloffMultiplier:     "damage_falloff_multiplier",
	DamageFalloffRateMultiplier: "damage_falloff_rate_multiplier",
	SpreadMultiplier:            "spread_multiplier",
	RateOfFireMultiplier:        "rate_of_fire_multiplier",
	RadiusMultiplier:            "radius_multiplier",
	ProjectileSpeedMultiplier:   "projectile_speed_multiplier",
	EnergyCostMultiplier:        "energy_cost_multiplier",
	MaxAmmoMultiplier:           "max_ammo_multiplier",
	CreatedAt:                   "created_at",
}

var BlueprintAmmoTableColumns = struct {
	ID                          string
	Label                       string
	WeaponType                  string
	DamageMultiplier            string
	DamageFalloffMultiplier     string
	DamageFalloffRateMultiplier string
	SpreadMultiplier            string
	RateOfFireMultiplier        string
	RadiusMultiplier            string
	ProjectileSpeedMultiplier   string
	EnergyCostMultiplier        string
	MaxAmmoMultiplier           string
	CreatedAt                   string
}{
	ID:                          "blueprint_ammo.id",
	Label:                       "blueprint_ammo.label",
	WeaponType:                  "blueprint_ammo.weapon_type",
	DamageMultiplier:            "blueprint_ammo.damage_multiplier",
	DamageFalloffMultiplier:     "blueprint_ammo.damage_falloff_multiplier",
	DamageFalloffRateMultiplier: "blueprint_ammo.damage_falloff_rate_multiplier",
	SpreadMultiplier:            "blueprint_ammo.spread_multiplier",
	RateOfFireMultiplier:        "blueprint_ammo.rate_of_fire_multiplier",
	RadiusMultiplier:            "blueprint_ammo.radius_multiplier",
	ProjectileSpeedMultiplier:   "blueprint_ammo.projectile_speed_multiplier",
	EnergyCostMultiplier:        "blueprint_ammo.energy_cost_multiplier",
	MaxAmmoMultiplier:           "blueprint_ammo.max_ammo_multiplier",
	CreatedAt:                   "blueprint_ammo.created_at",
}

// Generated where

var BlueprintAmmoWhere = struct {
	ID                          whereHelperstring
	Label                       whereHelperstring
	WeaponType                  whereHelperstring
	DamageMultiplier            whereHelperdecimal_NullDecimal
	DamageFalloffMultiplier     whereHelperdecimal_NullDecimal
	DamageFalloffRateMultiplier whereHelperdecimal_NullDecimal
	SpreadMultiplier            whereHelperdecimal_NullDecimal
	RateOfFireMultiplier        whereHelperdecimal_NullDecimal
	RadiusMultiplier            whereHelperdecimal_NullDecimal
	ProjectileSpeedMultiplier   whereHelperdecimal_NullDecimal
	EnergyCostMultiplier        whereHelperdecimal_NullDecimal
	MaxAmmoMultiplier           whereHelperdecimal_NullDecimal
	CreatedAt                   whereHelpertime_Time
}{
	ID:                          whereHelperstring{field: "\"blueprint_ammo\".\"id\""},
	Label:                       whereHelperstring{field: "\"blueprint_ammo\".\"label\""},
	WeaponType:                  whereHelperstring{field: "\"blueprint_ammo\".\"weapon_type\""},
	DamageMultiplier:            whereHelperdecimal_NullDecimal{field: "\"blueprint_ammo\".\"damage_multiplier\""},
	DamageFalloffMultiplier:     whereHelperdecimal_NullDecimal{field: "\"blueprint_ammo\".\"damage_falloff_multiplier\""},
	DamageFalloffRateMultiplier: whereHelperdecimal_NullDecimal{field: "\"blueprint_ammo\".\"damage_falloff_rate_multiplier\""},
	SpreadMultiplier:            whereHelperdecimal_NullDecimal{field: "\"blueprint_ammo\".\"spread_multiplier\""},
	RateOfFireMultiplier:        whereHelperdecimal_NullDecimal{field: "\"blueprint_ammo\".\"rate_of_fire_multiplier\""},
	RadiusMultiplier:            whereHelperdecimal_NullDecimal{field: "\"blueprint_ammo\".\"radius_multiplier\""},
	ProjectileSpeedMultiplier:   whereHelperdecimal_NullDecimal{field: "\"blueprint_ammo\".\"projectile_speed_multiplier\""},
	EnergyCostMultiplier:        whereHelperdecimal_NullDecimal{field: "\"blueprint_ammo\".\"energy_cost_multiplier\""},
	MaxAmmoMultiplier:           whereHelperdecimal_NullDecimal{field: "\"blueprint_ammo\".\"max_ammo_multiplier\""},
	CreatedAt:                   whereHelpertime_Time{field: "\"blueprint_ammo\".\"created_at\""},
}

// BlueprintAmmoRels is where relationship names are stored.
var BlueprintAmmoRels = struct {
	BlueprintAmmos string
	WeaponAmmos    string
}{
	BlueprintAmmos: "BlueprintAmmos",
	WeaponAmmos:    "WeaponAmmos",
}

// blueprintAmmoR is where relationships are stored.
type blueprintAmmoR struct {
	BlueprintAmmos AmmoSlice       `boiler:"BlueprintAmmos" boil:"BlueprintAmmos" json:"BlueprintAmmos" toml:"BlueprintAmmos" yaml:"BlueprintAmmos"`
	WeaponAmmos    WeaponAmmoSlice `boiler:"WeaponAmmos" boil:"WeaponAmmos" json:"WeaponAmmos" toml:"WeaponAmmos" yaml:"WeaponAmmos"`
}

// NewStruct creates a new relationship struct
func (*blueprintAmmoR) NewStruct() *blueprintAmmoR {
	return &blueprintAmmoR{}
}

// blueprintAmmoL is where Load methods for each relationship are stored.
type blueprintAmmoL struct{}

var (
	blueprintAmmoAllColumns            = []string{"id", "label", "weapon_type", "damage_multiplier", "damage_falloff_multiplier", "damage_falloff_rate_multiplier", "spread_multiplier", "rate_of_fire_multiplier", "radius_multiplier", "projectile_speed_multiplier", "energy_cost_multiplier", "max_ammo_multiplier", "created_at"}
	blueprintAmmoColumnsWithoutDefault = []string{"label", "weapon_type"}
	blueprintAmmoColumnsWithDefault    = []string{"id", "damage_multiplier", "damage_falloff_multiplier", "damage_falloff_rate_multiplier", "spread_multiplier", "rate_of_fire_multiplier", "radius_multiplier", "projectile_speed_multiplier", "energy_cost_multiplier", "max_ammo_multiplier", "created_at"}
	blueprintAmmoPrimaryKeyColumns     = []string{"id"}
	blueprintAmmoGeneratedColumns      = []string{}
)

type (
	// BlueprintAmmoSlice is an alias for a slice of pointers to BlueprintAmmo.
	// This should almost always be used instead of []BlueprintAmmo.
	BlueprintAmmoSlice []*BlueprintAmmo
	// BlueprintAmmoHook is the signature for custom BlueprintAmmo hook methods
	BlueprintAmmoHook func(boil.Executor, *BlueprintAmmo) error

	blueprintAmmoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blueprintAmmoType                 = reflect.TypeOf(&BlueprintAmmo{})
	blueprintAmmoMapping              = queries.MakeStructMapping(blueprintAmmoType)
	blueprintAmmoPrimaryKeyMapping, _ = queries.BindMapping(blueprintAmmoType, blueprintAmmoMapping, blueprintAmmoPrimaryKeyColumns)
	blueprintAmmoInsertCacheMut       sync.RWMutex
	blueprintAmmoInsertCache          = make(map[string]insertCache)
	blueprintAmmoUpdateCacheMut       sync.RWMutex
	blueprintAmmoUpdateCache          = make(map[string]updateCache)
	blueprintAmmoUpsertCacheMut       sync.RWMutex
	blueprintAmmoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var blueprintAmmoAfterSelectHooks []BlueprintAmmoHook

var blueprintAmmoBeforeInsertHooks []BlueprintAmmoHook
var blueprintAmmoAfterInsertHooks []BlueprintAmmoHook

var blueprintAmmoBeforeUpdateHooks []BlueprintAmmoHook
var blueprintAmmoAfterUpdateHooks []BlueprintAmmoHook

var blueprintAmmoBeforeDeleteHooks []BlueprintAmmoHook
var blueprintAmmoAfterDeleteHooks []BlueprintAmmoHook

var blueprintAmmoBeforeUpsertHooks []BlueprintAmmoHook
var blueprintAmmoAfterUpsertHooks []BlueprintAmmoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BlueprintAmmo) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintAmmoAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BlueprintAmmo) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintAmmoBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BlueprintAmmo) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintAmmoAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BlueprintAmmo) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintAmmoBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BlueprintAmmo) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintAmmoAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BlueprintAmmo) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintAmmoBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BlueprintAmmo) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintAmmoAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BlueprintAmmo) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintAmmoBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BlueprintAmmo) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintAmmoAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBlueprintAmmoHook registers your hook function for all future operations.
func AddBlueprintAmmoHook(hookPoint boil.HookPoint, blueprintAmmoHook BlueprintAmmoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		blueprintAmmoAfterSelectHooks = append(blueprintAmmoAfterSelectHooks, blueprintAmmoHook)
	case boil.BeforeInsertHook:
		blueprintAmmoBeforeInsertHooks = append(blueprintAmmoBeforeInsertHooks, blueprintAmmoHook)
	case boil.AfterInsertHook:
		blueprintAmmoAfterInsertHooks = append(blueprintAmmoAfterInsertHooks, blueprintAmmoHook)
	case boil.BeforeUpdateHook:
		blueprintAmmoBeforeUpdateHooks = append(blueprintAmmoBeforeUpdateHooks, blueprintAmmoHook)
	case boil.AfterUpdateHook:
		blueprintAmmoAfterUpdateHooks = append(blueprintAmmoAfterUpdateHooks, blueprintAmmoHook)
	case boil.BeforeDeleteHook:
		blueprintAmmoBeforeDeleteHooks = append(blueprintAmmoBeforeDeleteHooks, blueprintAmmoHook)
	case boil.AfterDeleteHook:
		blueprintAmmoAfterDeleteHooks = append(blueprintAmmoAfterDeleteHooks, blueprintAmmoHook)
	case boil.BeforeUpsertHook:
		blueprintAmmoBeforeUpsertHooks = append(blueprintAmmoBeforeUpsertHooks, blueprintAmmoHook)
	case boil.AfterUpsertHook:
		blueprintAmmoAfterUpsertHooks = append(blueprintAmmoAfterUpsertHooks, blueprintAmmoHook)
	}
}

// One returns a single blueprintAmmo record from the query.
func (q blueprintAmmoQuery) One(exec boil.Executor) (*BlueprintAmmo, error) {
	o := &BlueprintAmmo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for blueprint_ammo")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BlueprintAmmo records from the query.
func (q blueprintAmmoQuery) All(exec boil.Executor) (BlueprintAmmoSlice, error) {
	var o []*BlueprintAmmo

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BlueprintAmmo slice")
	}

	if len(blueprintAmmoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BlueprintAmmo records in the query.
func (q blueprintAmmoQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count blueprint_ammo rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q blueprintAmmoQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if blueprint_ammo exists")
	}

	return count > 0, nil
}

// BlueprintAmmos retrieves all the ammo's Ammos with an executor via blueprint_id column.
func (o *BlueprintAmmo) BlueprintAmmos(mods ...qm.QueryMod) ammoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"ammo\".\"blueprint_id\"=?", o.ID),
	)

	query := Ammos(queryMods...)
	queries.SetFrom(query.Query, "\"ammo\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"ammo\".*"})
	}

	return query
}

// WeaponAmmos retrieves all the weapon_ammo's WeaponAmmos with an executor.
func (o *BlueprintAmmo) WeaponAmmos(mods ...qm.QueryMod) weaponAmmoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"weapon_ammo\".\"blueprint_ammo_id\"=?", o.ID),
	)

	query := WeaponAmmos(queryMods...)
	queries.SetFrom(query.Query, "\"weapon_ammo\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"weapon_ammo\".*"})
	}

	return query
}

// LoadBlueprintAmmos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blueprintAmmoL) LoadBlueprintAmmos(e boil.Executor, singular bool, maybeBlueprintAmmo interface{}, mods queries.Applicator) error {
	var slice []*BlueprintAmmo
	var object *BlueprintAmmo

	if singular {
		object = maybeBlueprintAmmo.(*BlueprintAmmo)
	} else {
		slice = *maybeBlueprintAmmo.(*[]*BlueprintAmmo)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintAmmoR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintAmmoR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`ammo`),
		qm.WhereIn(`ammo.blueprint_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ammo")
	}

	var resultSlice []*Ammo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ammo")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ammo")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ammo")
	}

	if len(ammoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlueprintAmmos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &ammoR{}
			}
			foreign.R.Blueprint = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BlueprintID {
				local.R.BlueprintAmmos = append(local.R.BlueprintAmmos, foreign)
				if foreign.R == nil {
					foreign.R = &ammoR{}
				}
				foreign.R.Blueprint = local
				break
			}
		}
	}

	return nil
}

// LoadWeaponAmmos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blueprintAmmoL) LoadWeaponAmmos(e boil.Executor, singular bool, maybeBlueprintAmmo interface{}, mods queries.Applicator) error {
	var slice []*BlueprintAmmo
	var object *BlueprintAmmo

	if singular {
		object = maybeBlueprintAmmo.(*BlueprintAmmo)
	} else {
		slice = *maybeBlueprintAmmo.(*[]*BlueprintAmmo)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintAmmoR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintAmmoR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`weapon_ammo`),
		qm.WhereIn(`weapon_ammo.blueprint_ammo_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load weapon_ammo")
	}

	var resultSlice []*WeaponAmmo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice weapon_ammo")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on weapon_ammo")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for weapon_ammo")
	}

	if len(weaponAmmoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WeaponAmmos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &weaponAmmoR{}
			}
			foreign.R.BlueprintAmmo = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BlueprintAmmoID {
				local.R.WeaponAmmos = append(local.R.WeaponAmmos, foreign)
				if foreign.R == nil {
					foreign.R = &weaponAmmoR{}
				}
				foreign.R.BlueprintAmmo = local
				break
			}
		}
	}

	return nil
}

// AddBlueprintAmmos adds the given related objects to the existing relationships
// of the blueprint_ammo, optionally inserting them as new records.
// Appends related to o.R.BlueprintAmmos.
// Sets related.R.Blueprint appropriately.
func (o *BlueprintAmmo) AddBlueprintAmmos(exec boil.Executor, insert bool, related ...*Ammo) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BlueprintID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"ammo\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_id"}),
				strmangle.WhereClause("\"", "\"", 2, ammoPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.BlueprintID, rel.OwnerID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BlueprintID = o.ID
		}
	}

	if o.R == nil {
		o.R = &blueprintAmmoR{
			BlueprintAmmos: related,
		}
	} else {
		o.R.BlueprintAmmos = append(o.R.BlueprintAmmos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &ammoR{
				Blueprint: o,
			}
		} else {
			rel.R.Blueprint = o
		}
	}
	return nil
}

// AddWeaponAmmos adds the given related objects to the existing relationships
// of the blueprint_ammo, optionally inserting them as new records.
// Appends related to o.R.WeaponAmmos.
// Sets related.R.BlueprintAmmo appropriately.
func (o *BlueprintAmmo) AddWeaponAmmos(exec boil.Executor, insert bool, related ...*WeaponAmmo) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BlueprintAmmoID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"weapon_ammo\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_ammo_id"}),
				strmangle.WhereClause("\"", "\"", 2, weaponAmmoPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.BlueprintAmmoID, rel.WeaponID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BlueprintAmmoID = o.ID
		}
	}

	if o.R == nil {
		o.R = &blueprintAmmoR{
			WeaponAmmos: related,
		}
	} else {
		o.R.WeaponAmmos = append(o.R.WeaponAmmos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &weaponAmmoR{
				BlueprintAmmo: o,
			}
		} else {
			rel.R.BlueprintAmmo = o
		}
	}
	return nil
}

// BlueprintAmmos retrieves all the records using an executor.
func BlueprintAmmos(mods ...qm.QueryMod) blueprintAmmoQuery {
	mods = append(mods, qm.From("\"blueprint_ammo\""))
	return blueprintAmmoQuery{NewQuery(mods...)}
}

// FindBlueprintAmmo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlueprintAmmo(exec boil.Executor, iD string, selectCols ...string) (*BlueprintAmmo, error) {
	blueprintAmmoObj := &BlueprintAmmo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"blueprint_ammo\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, blueprintAmmoObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from blueprint_ammo")
	}

	if err = blueprintAmmoObj.doAfterSelectHooks(exec); err != nil {
		return blueprintAmmoObj, err
	}

	return blueprintAmmoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlueprintAmmo) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_ammo provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintAmmoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blueprintAmmoInsertCacheMut.RLock()
	cache, cached := blueprintAmmoInsertCache[key]
	blueprintAmmoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blueprintAmmoAllColumns,
			blueprintAmmoColumnsWithDefault,
			blueprintAmmoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blueprintAmmoType, blueprintAmmoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blueprintAmmoType, blueprintAmmoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"blueprint_ammo\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"blueprint_ammo\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into blueprint_ammo")
	}

	if !cached {
		blueprintAmmoInsertCacheMut.Lock()
		blueprintAmmoInsertCache[key] = cache
		blueprintAmmoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BlueprintAmmo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlueprintAmmo) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	blueprintAmmoUpdateCacheMut.RLock()
	cache, cached := blueprintAmmoUpdateCache[key]
	blueprintAmmoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blueprintAmmoAllColumns,
			blueprintAmmoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update blueprint_ammo, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"blueprint_ammo\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, blueprintAmmoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blueprintAmmoType, blueprintAmmoMapping, append(wl, blueprintAmmoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update blueprint_ammo row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for blueprint_ammo")
	}

	if !cached {
		blueprintAmmoUpdateCacheMut.Lock()
		blueprintAmmoUpdateCache[key] = cache
		blueprintAmmoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q blueprintAmmoQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for blueprint_ammo")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for blueprint_ammo")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlueprintAmmoSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintAmmoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"blueprint_ammo\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, blueprintAmmoPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in blueprintAmmo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all blueprintAmmo")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlueprintAmmo) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_ammo provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintAmmoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blueprintAmmoUpsertCacheMut.RLock()
	cache, cached := blueprintAmmoUpsertCache[key]
	blueprintAmmoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blueprintAmmoAllColumns,
			blueprintAmmoColumnsWithDefault,
			blueprintAmmoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			blueprintAmmoAllColumns,
			blueprintAmmoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert blueprint_ammo, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(blueprintAmmoPrimaryKeyColumns))
			copy(conflict, blueprintAmmoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"blueprint_ammo\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(blueprintAmmoType, blueprintAmmoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blueprintAmmoType, blueprintAmmoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert blueprint_ammo")
	}

	if !cached {
		blueprintAmmoUpsertCacheMut.Lock()
		blueprintAmmoUpsertCache[key] = cache
		blueprintAmmoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BlueprintAmmo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlueprintAmmo) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BlueprintAmmo provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blueprintAmmoPrimaryKeyMapping)
	sql := "DELETE FROM \"blueprint_ammo\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from blueprint_ammo")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for blueprint_ammo")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q blueprintAmmoQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no blueprintAmmoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprint_ammo")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_ammo")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlueprintAmmoSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(blueprintAmmoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintAmmoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"blueprint_ammo\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintAmmoPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprintAmmo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_ammo")
	}

	if len(blueprintAmmoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlueprintAmmo) Reload(exec boil.Executor) error {
	ret, err := FindBlueprintAmmo(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlueprintAmmoSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlueprintAmmoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintAmmoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"blueprint_ammo\".* FROM \"blueprint_ammo\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintAmmoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BlueprintAmmoSlice")
	}

	*o = slice

	return nil
}

// BlueprintAmmoExists checks if the BlueprintAmmo row exists.
func BlueprintAmmoExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"blueprint_ammo\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if blueprint_ammo exists")
	}

	return exists, nil
}
