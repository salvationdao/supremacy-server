// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SyndicateElectionVote is an object representing the database table.
type SyndicateElectionVote struct {
	SyndicateElectionID string    `boiler:"syndicate_election_id" boil:"syndicate_election_id" json:"syndicate_election_id" toml:"syndicate_election_id" yaml:"syndicate_election_id"`
	VoterID             string    `boiler:"voter_id" boil:"voter_id" json:"voter_id" toml:"voter_id" yaml:"voter_id"`
	VotedForCandidateID string    `boiler:"voted_for_candidate_id" boil:"voted_for_candidate_id" json:"voted_for_candidate_id" toml:"voted_for_candidate_id" yaml:"voted_for_candidate_id"`
	CreatedAt           time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt           time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt           null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *syndicateElectionVoteR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L syndicateElectionVoteL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SyndicateElectionVoteColumns = struct {
	SyndicateElectionID string
	VoterID             string
	VotedForCandidateID string
	CreatedAt           string
	UpdatedAt           string
	DeletedAt           string
}{
	SyndicateElectionID: "syndicate_election_id",
	VoterID:             "voter_id",
	VotedForCandidateID: "voted_for_candidate_id",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
	DeletedAt:           "deleted_at",
}

var SyndicateElectionVoteTableColumns = struct {
	SyndicateElectionID string
	VoterID             string
	VotedForCandidateID string
	CreatedAt           string
	UpdatedAt           string
	DeletedAt           string
}{
	SyndicateElectionID: "syndicate_election_votes.syndicate_election_id",
	VoterID:             "syndicate_election_votes.voter_id",
	VotedForCandidateID: "syndicate_election_votes.voted_for_candidate_id",
	CreatedAt:           "syndicate_election_votes.created_at",
	UpdatedAt:           "syndicate_election_votes.updated_at",
	DeletedAt:           "syndicate_election_votes.deleted_at",
}

// Generated where

var SyndicateElectionVoteWhere = struct {
	SyndicateElectionID whereHelperstring
	VoterID             whereHelperstring
	VotedForCandidateID whereHelperstring
	CreatedAt           whereHelpertime_Time
	UpdatedAt           whereHelpertime_Time
	DeletedAt           whereHelpernull_Time
}{
	SyndicateElectionID: whereHelperstring{field: "\"syndicate_election_votes\".\"syndicate_election_id\""},
	VoterID:             whereHelperstring{field: "\"syndicate_election_votes\".\"voter_id\""},
	VotedForCandidateID: whereHelperstring{field: "\"syndicate_election_votes\".\"voted_for_candidate_id\""},
	CreatedAt:           whereHelpertime_Time{field: "\"syndicate_election_votes\".\"created_at\""},
	UpdatedAt:           whereHelpertime_Time{field: "\"syndicate_election_votes\".\"updated_at\""},
	DeletedAt:           whereHelpernull_Time{field: "\"syndicate_election_votes\".\"deleted_at\""},
}

// SyndicateElectionVoteRels is where relationship names are stored.
var SyndicateElectionVoteRels = struct {
	SyndicateElection string
	VotedForCandidate string
	Voter             string
}{
	SyndicateElection: "SyndicateElection",
	VotedForCandidate: "VotedForCandidate",
	Voter:             "Voter",
}

// syndicateElectionVoteR is where relationships are stored.
type syndicateElectionVoteR struct {
	SyndicateElection *SyndicateElection `boiler:"SyndicateElection" boil:"SyndicateElection" json:"SyndicateElection" toml:"SyndicateElection" yaml:"SyndicateElection"`
	VotedForCandidate *Player            `boiler:"VotedForCandidate" boil:"VotedForCandidate" json:"VotedForCandidate" toml:"VotedForCandidate" yaml:"VotedForCandidate"`
	Voter             *Player            `boiler:"Voter" boil:"Voter" json:"Voter" toml:"Voter" yaml:"Voter"`
}

// NewStruct creates a new relationship struct
func (*syndicateElectionVoteR) NewStruct() *syndicateElectionVoteR {
	return &syndicateElectionVoteR{}
}

// syndicateElectionVoteL is where Load methods for each relationship are stored.
type syndicateElectionVoteL struct{}

var (
	syndicateElectionVoteAllColumns            = []string{"syndicate_election_id", "voter_id", "voted_for_candidate_id", "created_at", "updated_at", "deleted_at"}
	syndicateElectionVoteColumnsWithoutDefault = []string{"syndicate_election_id", "voter_id", "voted_for_candidate_id"}
	syndicateElectionVoteColumnsWithDefault    = []string{"created_at", "updated_at", "deleted_at"}
	syndicateElectionVotePrimaryKeyColumns     = []string{"syndicate_election_id", "voter_id"}
	syndicateElectionVoteGeneratedColumns      = []string{}
)

type (
	// SyndicateElectionVoteSlice is an alias for a slice of pointers to SyndicateElectionVote.
	// This should almost always be used instead of []SyndicateElectionVote.
	SyndicateElectionVoteSlice []*SyndicateElectionVote
	// SyndicateElectionVoteHook is the signature for custom SyndicateElectionVote hook methods
	SyndicateElectionVoteHook func(boil.Executor, *SyndicateElectionVote) error

	syndicateElectionVoteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	syndicateElectionVoteType                 = reflect.TypeOf(&SyndicateElectionVote{})
	syndicateElectionVoteMapping              = queries.MakeStructMapping(syndicateElectionVoteType)
	syndicateElectionVotePrimaryKeyMapping, _ = queries.BindMapping(syndicateElectionVoteType, syndicateElectionVoteMapping, syndicateElectionVotePrimaryKeyColumns)
	syndicateElectionVoteInsertCacheMut       sync.RWMutex
	syndicateElectionVoteInsertCache          = make(map[string]insertCache)
	syndicateElectionVoteUpdateCacheMut       sync.RWMutex
	syndicateElectionVoteUpdateCache          = make(map[string]updateCache)
	syndicateElectionVoteUpsertCacheMut       sync.RWMutex
	syndicateElectionVoteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var syndicateElectionVoteAfterSelectHooks []SyndicateElectionVoteHook

var syndicateElectionVoteBeforeInsertHooks []SyndicateElectionVoteHook
var syndicateElectionVoteAfterInsertHooks []SyndicateElectionVoteHook

var syndicateElectionVoteBeforeUpdateHooks []SyndicateElectionVoteHook
var syndicateElectionVoteAfterUpdateHooks []SyndicateElectionVoteHook

var syndicateElectionVoteBeforeDeleteHooks []SyndicateElectionVoteHook
var syndicateElectionVoteAfterDeleteHooks []SyndicateElectionVoteHook

var syndicateElectionVoteBeforeUpsertHooks []SyndicateElectionVoteHook
var syndicateElectionVoteAfterUpsertHooks []SyndicateElectionVoteHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SyndicateElectionVote) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateElectionVoteAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SyndicateElectionVote) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateElectionVoteBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SyndicateElectionVote) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateElectionVoteAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SyndicateElectionVote) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateElectionVoteBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SyndicateElectionVote) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateElectionVoteAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SyndicateElectionVote) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateElectionVoteBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SyndicateElectionVote) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateElectionVoteAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SyndicateElectionVote) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateElectionVoteBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SyndicateElectionVote) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateElectionVoteAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSyndicateElectionVoteHook registers your hook function for all future operations.
func AddSyndicateElectionVoteHook(hookPoint boil.HookPoint, syndicateElectionVoteHook SyndicateElectionVoteHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		syndicateElectionVoteAfterSelectHooks = append(syndicateElectionVoteAfterSelectHooks, syndicateElectionVoteHook)
	case boil.BeforeInsertHook:
		syndicateElectionVoteBeforeInsertHooks = append(syndicateElectionVoteBeforeInsertHooks, syndicateElectionVoteHook)
	case boil.AfterInsertHook:
		syndicateElectionVoteAfterInsertHooks = append(syndicateElectionVoteAfterInsertHooks, syndicateElectionVoteHook)
	case boil.BeforeUpdateHook:
		syndicateElectionVoteBeforeUpdateHooks = append(syndicateElectionVoteBeforeUpdateHooks, syndicateElectionVoteHook)
	case boil.AfterUpdateHook:
		syndicateElectionVoteAfterUpdateHooks = append(syndicateElectionVoteAfterUpdateHooks, syndicateElectionVoteHook)
	case boil.BeforeDeleteHook:
		syndicateElectionVoteBeforeDeleteHooks = append(syndicateElectionVoteBeforeDeleteHooks, syndicateElectionVoteHook)
	case boil.AfterDeleteHook:
		syndicateElectionVoteAfterDeleteHooks = append(syndicateElectionVoteAfterDeleteHooks, syndicateElectionVoteHook)
	case boil.BeforeUpsertHook:
		syndicateElectionVoteBeforeUpsertHooks = append(syndicateElectionVoteBeforeUpsertHooks, syndicateElectionVoteHook)
	case boil.AfterUpsertHook:
		syndicateElectionVoteAfterUpsertHooks = append(syndicateElectionVoteAfterUpsertHooks, syndicateElectionVoteHook)
	}
}

// One returns a single syndicateElectionVote record from the query.
func (q syndicateElectionVoteQuery) One(exec boil.Executor) (*SyndicateElectionVote, error) {
	o := &SyndicateElectionVote{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for syndicate_election_votes")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SyndicateElectionVote records from the query.
func (q syndicateElectionVoteQuery) All(exec boil.Executor) (SyndicateElectionVoteSlice, error) {
	var o []*SyndicateElectionVote

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to SyndicateElectionVote slice")
	}

	if len(syndicateElectionVoteAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SyndicateElectionVote records in the query.
func (q syndicateElectionVoteQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count syndicate_election_votes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q syndicateElectionVoteQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if syndicate_election_votes exists")
	}

	return count > 0, nil
}

// SyndicateElection pointed to by the foreign key.
func (o *SyndicateElectionVote) SyndicateElection(mods ...qm.QueryMod) syndicateElectionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SyndicateElectionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := SyndicateElections(queryMods...)
	queries.SetFrom(query.Query, "\"syndicate_elections\"")

	return query
}

// VotedForCandidate pointed to by the foreign key.
func (o *SyndicateElectionVote) VotedForCandidate(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VotedForCandidateID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// Voter pointed to by the foreign key.
func (o *SyndicateElectionVote) Voter(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VoterID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// LoadSyndicateElection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateElectionVoteL) LoadSyndicateElection(e boil.Executor, singular bool, maybeSyndicateElectionVote interface{}, mods queries.Applicator) error {
	var slice []*SyndicateElectionVote
	var object *SyndicateElectionVote

	if singular {
		object = maybeSyndicateElectionVote.(*SyndicateElectionVote)
	} else {
		slice = *maybeSyndicateElectionVote.(*[]*SyndicateElectionVote)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateElectionVoteR{}
		}
		args = append(args, object.SyndicateElectionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateElectionVoteR{}
			}

			for _, a := range args {
				if a == obj.SyndicateElectionID {
					continue Outer
				}
			}

			args = append(args, obj.SyndicateElectionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicate_elections`),
		qm.WhereIn(`syndicate_elections.id in ?`, args...),
		qmhelper.WhereIsNull(`syndicate_elections.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SyndicateElection")
	}

	var resultSlice []*SyndicateElection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SyndicateElection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for syndicate_elections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicate_elections")
	}

	if len(syndicateElectionVoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SyndicateElection = foreign
		if foreign.R == nil {
			foreign.R = &syndicateElectionR{}
		}
		foreign.R.SyndicateElectionVotes = append(foreign.R.SyndicateElectionVotes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SyndicateElectionID == foreign.ID {
				local.R.SyndicateElection = foreign
				if foreign.R == nil {
					foreign.R = &syndicateElectionR{}
				}
				foreign.R.SyndicateElectionVotes = append(foreign.R.SyndicateElectionVotes, local)
				break
			}
		}
	}

	return nil
}

// LoadVotedForCandidate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateElectionVoteL) LoadVotedForCandidate(e boil.Executor, singular bool, maybeSyndicateElectionVote interface{}, mods queries.Applicator) error {
	var slice []*SyndicateElectionVote
	var object *SyndicateElectionVote

	if singular {
		object = maybeSyndicateElectionVote.(*SyndicateElectionVote)
	} else {
		slice = *maybeSyndicateElectionVote.(*[]*SyndicateElectionVote)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateElectionVoteR{}
		}
		args = append(args, object.VotedForCandidateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateElectionVoteR{}
			}

			for _, a := range args {
				if a == obj.VotedForCandidateID {
					continue Outer
				}
			}

			args = append(args, obj.VotedForCandidateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(syndicateElectionVoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VotedForCandidate = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.VotedForCandidateSyndicateElectionVotes = append(foreign.R.VotedForCandidateSyndicateElectionVotes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VotedForCandidateID == foreign.ID {
				local.R.VotedForCandidate = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.VotedForCandidateSyndicateElectionVotes = append(foreign.R.VotedForCandidateSyndicateElectionVotes, local)
				break
			}
		}
	}

	return nil
}

// LoadVoter allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateElectionVoteL) LoadVoter(e boil.Executor, singular bool, maybeSyndicateElectionVote interface{}, mods queries.Applicator) error {
	var slice []*SyndicateElectionVote
	var object *SyndicateElectionVote

	if singular {
		object = maybeSyndicateElectionVote.(*SyndicateElectionVote)
	} else {
		slice = *maybeSyndicateElectionVote.(*[]*SyndicateElectionVote)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateElectionVoteR{}
		}
		args = append(args, object.VoterID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateElectionVoteR{}
			}

			for _, a := range args {
				if a == obj.VoterID {
					continue Outer
				}
			}

			args = append(args, obj.VoterID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(syndicateElectionVoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Voter = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.VoterSyndicateElectionVotes = append(foreign.R.VoterSyndicateElectionVotes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VoterID == foreign.ID {
				local.R.Voter = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.VoterSyndicateElectionVotes = append(foreign.R.VoterSyndicateElectionVotes, local)
				break
			}
		}
	}

	return nil
}

// SetSyndicateElection of the syndicateElectionVote to the related item.
// Sets o.R.SyndicateElection to related.
// Adds o to related.R.SyndicateElectionVotes.
func (o *SyndicateElectionVote) SetSyndicateElection(exec boil.Executor, insert bool, related *SyndicateElection) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicate_election_votes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"syndicate_election_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicateElectionVotePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.SyndicateElectionID, o.VoterID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SyndicateElectionID = related.ID
	if o.R == nil {
		o.R = &syndicateElectionVoteR{
			SyndicateElection: related,
		}
	} else {
		o.R.SyndicateElection = related
	}

	if related.R == nil {
		related.R = &syndicateElectionR{
			SyndicateElectionVotes: SyndicateElectionVoteSlice{o},
		}
	} else {
		related.R.SyndicateElectionVotes = append(related.R.SyndicateElectionVotes, o)
	}

	return nil
}

// SetVotedForCandidate of the syndicateElectionVote to the related item.
// Sets o.R.VotedForCandidate to related.
// Adds o to related.R.VotedForCandidateSyndicateElectionVotes.
func (o *SyndicateElectionVote) SetVotedForCandidate(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicate_election_votes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"voted_for_candidate_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicateElectionVotePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.SyndicateElectionID, o.VoterID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VotedForCandidateID = related.ID
	if o.R == nil {
		o.R = &syndicateElectionVoteR{
			VotedForCandidate: related,
		}
	} else {
		o.R.VotedForCandidate = related
	}

	if related.R == nil {
		related.R = &playerR{
			VotedForCandidateSyndicateElectionVotes: SyndicateElectionVoteSlice{o},
		}
	} else {
		related.R.VotedForCandidateSyndicateElectionVotes = append(related.R.VotedForCandidateSyndicateElectionVotes, o)
	}

	return nil
}

// SetVoter of the syndicateElectionVote to the related item.
// Sets o.R.Voter to related.
// Adds o to related.R.VoterSyndicateElectionVotes.
func (o *SyndicateElectionVote) SetVoter(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicate_election_votes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"voter_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicateElectionVotePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.SyndicateElectionID, o.VoterID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VoterID = related.ID
	if o.R == nil {
		o.R = &syndicateElectionVoteR{
			Voter: related,
		}
	} else {
		o.R.Voter = related
	}

	if related.R == nil {
		related.R = &playerR{
			VoterSyndicateElectionVotes: SyndicateElectionVoteSlice{o},
		}
	} else {
		related.R.VoterSyndicateElectionVotes = append(related.R.VoterSyndicateElectionVotes, o)
	}

	return nil
}

// SyndicateElectionVotes retrieves all the records using an executor.
func SyndicateElectionVotes(mods ...qm.QueryMod) syndicateElectionVoteQuery {
	mods = append(mods, qm.From("\"syndicate_election_votes\""), qmhelper.WhereIsNull("\"syndicate_election_votes\".\"deleted_at\""))
	return syndicateElectionVoteQuery{NewQuery(mods...)}
}

// FindSyndicateElectionVote retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSyndicateElectionVote(exec boil.Executor, syndicateElectionID string, voterID string, selectCols ...string) (*SyndicateElectionVote, error) {
	syndicateElectionVoteObj := &SyndicateElectionVote{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"syndicate_election_votes\" where \"syndicate_election_id\"=$1 AND \"voter_id\"=$2 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, syndicateElectionID, voterID)

	err := q.Bind(nil, exec, syndicateElectionVoteObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from syndicate_election_votes")
	}

	if err = syndicateElectionVoteObj.doAfterSelectHooks(exec); err != nil {
		return syndicateElectionVoteObj, err
	}

	return syndicateElectionVoteObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SyndicateElectionVote) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no syndicate_election_votes provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syndicateElectionVoteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	syndicateElectionVoteInsertCacheMut.RLock()
	cache, cached := syndicateElectionVoteInsertCache[key]
	syndicateElectionVoteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			syndicateElectionVoteAllColumns,
			syndicateElectionVoteColumnsWithDefault,
			syndicateElectionVoteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(syndicateElectionVoteType, syndicateElectionVoteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(syndicateElectionVoteType, syndicateElectionVoteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"syndicate_election_votes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"syndicate_election_votes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into syndicate_election_votes")
	}

	if !cached {
		syndicateElectionVoteInsertCacheMut.Lock()
		syndicateElectionVoteInsertCache[key] = cache
		syndicateElectionVoteInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the SyndicateElectionVote.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SyndicateElectionVote) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	syndicateElectionVoteUpdateCacheMut.RLock()
	cache, cached := syndicateElectionVoteUpdateCache[key]
	syndicateElectionVoteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			syndicateElectionVoteAllColumns,
			syndicateElectionVotePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update syndicate_election_votes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"syndicate_election_votes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, syndicateElectionVotePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(syndicateElectionVoteType, syndicateElectionVoteMapping, append(wl, syndicateElectionVotePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update syndicate_election_votes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for syndicate_election_votes")
	}

	if !cached {
		syndicateElectionVoteUpdateCacheMut.Lock()
		syndicateElectionVoteUpdateCache[key] = cache
		syndicateElectionVoteUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q syndicateElectionVoteQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for syndicate_election_votes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for syndicate_election_votes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SyndicateElectionVoteSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateElectionVotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"syndicate_election_votes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, syndicateElectionVotePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in syndicateElectionVote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all syndicateElectionVote")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SyndicateElectionVote) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no syndicate_election_votes provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syndicateElectionVoteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	syndicateElectionVoteUpsertCacheMut.RLock()
	cache, cached := syndicateElectionVoteUpsertCache[key]
	syndicateElectionVoteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			syndicateElectionVoteAllColumns,
			syndicateElectionVoteColumnsWithDefault,
			syndicateElectionVoteColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			syndicateElectionVoteAllColumns,
			syndicateElectionVotePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert syndicate_election_votes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(syndicateElectionVotePrimaryKeyColumns))
			copy(conflict, syndicateElectionVotePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"syndicate_election_votes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(syndicateElectionVoteType, syndicateElectionVoteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(syndicateElectionVoteType, syndicateElectionVoteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert syndicate_election_votes")
	}

	if !cached {
		syndicateElectionVoteUpsertCacheMut.Lock()
		syndicateElectionVoteUpsertCache[key] = cache
		syndicateElectionVoteUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single SyndicateElectionVote record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SyndicateElectionVote) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no SyndicateElectionVote provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), syndicateElectionVotePrimaryKeyMapping)
		sql = "DELETE FROM \"syndicate_election_votes\" WHERE \"syndicate_election_id\"=$1 AND \"voter_id\"=$2"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"syndicate_election_votes\" SET %s WHERE \"syndicate_election_id\"=$2 AND \"voter_id\"=$3",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(syndicateElectionVoteType, syndicateElectionVoteMapping, append(wl, syndicateElectionVotePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from syndicate_election_votes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for syndicate_election_votes")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q syndicateElectionVoteQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no syndicateElectionVoteQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from syndicate_election_votes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for syndicate_election_votes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SyndicateElectionVoteSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(syndicateElectionVoteBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateElectionVotePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"syndicate_election_votes\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syndicateElectionVotePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateElectionVotePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"syndicate_election_votes\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, syndicateElectionVotePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from syndicateElectionVote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for syndicate_election_votes")
	}

	if len(syndicateElectionVoteAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SyndicateElectionVote) Reload(exec boil.Executor) error {
	ret, err := FindSyndicateElectionVote(exec, o.SyndicateElectionID, o.VoterID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SyndicateElectionVoteSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SyndicateElectionVoteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateElectionVotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"syndicate_election_votes\".* FROM \"syndicate_election_votes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syndicateElectionVotePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in SyndicateElectionVoteSlice")
	}

	*o = slice

	return nil
}

// SyndicateElectionVoteExists checks if the SyndicateElectionVote row exists.
func SyndicateElectionVoteExists(exec boil.Executor, syndicateElectionID string, voterID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"syndicate_election_votes\" where \"syndicate_election_id\"=$1 AND \"voter_id\"=$2 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, syndicateElectionID, voterID)
	}
	row := exec.QueryRow(sql, syndicateElectionID, voterID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if syndicate_election_votes exists")
	}

	return exists, nil
}
