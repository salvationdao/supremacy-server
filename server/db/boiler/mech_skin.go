// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MechSkin is an object representing the database table.
type MechSkin struct {
	ID                    string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BlueprintID           string      `boiler:"blueprint_id" boil:"blueprint_id" json:"blueprint_id" toml:"blueprint_id" yaml:"blueprint_id"`
	GenesisTokenID        null.Int64  `boiler:"genesis_token_id" boil:"genesis_token_id" json:"genesis_token_id,omitempty" toml:"genesis_token_id" yaml:"genesis_token_id,omitempty"`
	LimitedReleaseTokenID null.Int64  `boiler:"limited_release_token_id" boil:"limited_release_token_id" json:"limited_release_token_id,omitempty" toml:"limited_release_token_id" yaml:"limited_release_token_id,omitempty"`
	EquippedOn            null.String `boiler:"equipped_on" boil:"equipped_on" json:"equipped_on,omitempty" toml:"equipped_on" yaml:"equipped_on,omitempty"`
	CreatedAt             time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	LockedToMech          bool        `boiler:"locked_to_mech" boil:"locked_to_mech" json:"locked_to_mech" toml:"locked_to_mech" yaml:"locked_to_mech"`

	R *mechSkinR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L mechSkinL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MechSkinColumns = struct {
	ID                    string
	BlueprintID           string
	GenesisTokenID        string
	LimitedReleaseTokenID string
	EquippedOn            string
	CreatedAt             string
	LockedToMech          string
}{
	ID:                    "id",
	BlueprintID:           "blueprint_id",
	GenesisTokenID:        "genesis_token_id",
	LimitedReleaseTokenID: "limited_release_token_id",
	EquippedOn:            "equipped_on",
	CreatedAt:             "created_at",
	LockedToMech:          "locked_to_mech",
}

var MechSkinTableColumns = struct {
	ID                    string
	BlueprintID           string
	GenesisTokenID        string
	LimitedReleaseTokenID string
	EquippedOn            string
	CreatedAt             string
	LockedToMech          string
}{
	ID:                    "mech_skin.id",
	BlueprintID:           "mech_skin.blueprint_id",
	GenesisTokenID:        "mech_skin.genesis_token_id",
	LimitedReleaseTokenID: "mech_skin.limited_release_token_id",
	EquippedOn:            "mech_skin.equipped_on",
	CreatedAt:             "mech_skin.created_at",
	LockedToMech:          "mech_skin.locked_to_mech",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var MechSkinWhere = struct {
	ID                    whereHelperstring
	BlueprintID           whereHelperstring
	GenesisTokenID        whereHelpernull_Int64
	LimitedReleaseTokenID whereHelpernull_Int64
	EquippedOn            whereHelpernull_String
	CreatedAt             whereHelpertime_Time
	LockedToMech          whereHelperbool
}{
	ID:                    whereHelperstring{field: "\"mech_skin\".\"id\""},
	BlueprintID:           whereHelperstring{field: "\"mech_skin\".\"blueprint_id\""},
	GenesisTokenID:        whereHelpernull_Int64{field: "\"mech_skin\".\"genesis_token_id\""},
	LimitedReleaseTokenID: whereHelpernull_Int64{field: "\"mech_skin\".\"limited_release_token_id\""},
	EquippedOn:            whereHelpernull_String{field: "\"mech_skin\".\"equipped_on\""},
	CreatedAt:             whereHelpertime_Time{field: "\"mech_skin\".\"created_at\""},
	LockedToMech:          whereHelperbool{field: "\"mech_skin\".\"locked_to_mech\""},
}

// MechSkinRels is where relationship names are stored.
var MechSkinRels = struct {
	Blueprint        string
	EquippedOnMech   string
	ChassisSkinMechs string
}{
	Blueprint:        "Blueprint",
	EquippedOnMech:   "EquippedOnMech",
	ChassisSkinMechs: "ChassisSkinMechs",
}

// mechSkinR is where relationships are stored.
type mechSkinR struct {
	Blueprint        *BlueprintMechSkin `boiler:"Blueprint" boil:"Blueprint" json:"Blueprint" toml:"Blueprint" yaml:"Blueprint"`
	EquippedOnMech   *Mech              `boiler:"EquippedOnMech" boil:"EquippedOnMech" json:"EquippedOnMech" toml:"EquippedOnMech" yaml:"EquippedOnMech"`
	ChassisSkinMechs MechSlice          `boiler:"ChassisSkinMechs" boil:"ChassisSkinMechs" json:"ChassisSkinMechs" toml:"ChassisSkinMechs" yaml:"ChassisSkinMechs"`
}

// NewStruct creates a new relationship struct
func (*mechSkinR) NewStruct() *mechSkinR {
	return &mechSkinR{}
}

// mechSkinL is where Load methods for each relationship are stored.
type mechSkinL struct{}

var (
	mechSkinAllColumns            = []string{"id", "blueprint_id", "genesis_token_id", "limited_release_token_id", "equipped_on", "created_at", "locked_to_mech"}
	mechSkinColumnsWithoutDefault = []string{"blueprint_id"}
	mechSkinColumnsWithDefault    = []string{"id", "genesis_token_id", "limited_release_token_id", "equipped_on", "created_at", "locked_to_mech"}
	mechSkinPrimaryKeyColumns     = []string{"id"}
	mechSkinGeneratedColumns      = []string{}
)

type (
	// MechSkinSlice is an alias for a slice of pointers to MechSkin.
	// This should almost always be used instead of []MechSkin.
	MechSkinSlice []*MechSkin
	// MechSkinHook is the signature for custom MechSkin hook methods
	MechSkinHook func(boil.Executor, *MechSkin) error

	mechSkinQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mechSkinType                 = reflect.TypeOf(&MechSkin{})
	mechSkinMapping              = queries.MakeStructMapping(mechSkinType)
	mechSkinPrimaryKeyMapping, _ = queries.BindMapping(mechSkinType, mechSkinMapping, mechSkinPrimaryKeyColumns)
	mechSkinInsertCacheMut       sync.RWMutex
	mechSkinInsertCache          = make(map[string]insertCache)
	mechSkinUpdateCacheMut       sync.RWMutex
	mechSkinUpdateCache          = make(map[string]updateCache)
	mechSkinUpsertCacheMut       sync.RWMutex
	mechSkinUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mechSkinAfterSelectHooks []MechSkinHook

var mechSkinBeforeInsertHooks []MechSkinHook
var mechSkinAfterInsertHooks []MechSkinHook

var mechSkinBeforeUpdateHooks []MechSkinHook
var mechSkinAfterUpdateHooks []MechSkinHook

var mechSkinBeforeDeleteHooks []MechSkinHook
var mechSkinAfterDeleteHooks []MechSkinHook

var mechSkinBeforeUpsertHooks []MechSkinHook
var mechSkinAfterUpsertHooks []MechSkinHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MechSkin) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range mechSkinAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MechSkin) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechSkinBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MechSkin) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechSkinAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MechSkin) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechSkinBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MechSkin) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechSkinAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MechSkin) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechSkinBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MechSkin) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechSkinAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MechSkin) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechSkinBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MechSkin) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechSkinAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMechSkinHook registers your hook function for all future operations.
func AddMechSkinHook(hookPoint boil.HookPoint, mechSkinHook MechSkinHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mechSkinAfterSelectHooks = append(mechSkinAfterSelectHooks, mechSkinHook)
	case boil.BeforeInsertHook:
		mechSkinBeforeInsertHooks = append(mechSkinBeforeInsertHooks, mechSkinHook)
	case boil.AfterInsertHook:
		mechSkinAfterInsertHooks = append(mechSkinAfterInsertHooks, mechSkinHook)
	case boil.BeforeUpdateHook:
		mechSkinBeforeUpdateHooks = append(mechSkinBeforeUpdateHooks, mechSkinHook)
	case boil.AfterUpdateHook:
		mechSkinAfterUpdateHooks = append(mechSkinAfterUpdateHooks, mechSkinHook)
	case boil.BeforeDeleteHook:
		mechSkinBeforeDeleteHooks = append(mechSkinBeforeDeleteHooks, mechSkinHook)
	case boil.AfterDeleteHook:
		mechSkinAfterDeleteHooks = append(mechSkinAfterDeleteHooks, mechSkinHook)
	case boil.BeforeUpsertHook:
		mechSkinBeforeUpsertHooks = append(mechSkinBeforeUpsertHooks, mechSkinHook)
	case boil.AfterUpsertHook:
		mechSkinAfterUpsertHooks = append(mechSkinAfterUpsertHooks, mechSkinHook)
	}
}

// One returns a single mechSkin record from the query.
func (q mechSkinQuery) One(exec boil.Executor) (*MechSkin, error) {
	o := &MechSkin{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for mech_skin")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MechSkin records from the query.
func (q mechSkinQuery) All(exec boil.Executor) (MechSkinSlice, error) {
	var o []*MechSkin

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to MechSkin slice")
	}

	if len(mechSkinAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MechSkin records in the query.
func (q mechSkinQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count mech_skin rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mechSkinQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if mech_skin exists")
	}

	return count > 0, nil
}

// Blueprint pointed to by the foreign key.
func (o *MechSkin) Blueprint(mods ...qm.QueryMod) blueprintMechSkinQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BlueprintID),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintMechSkins(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_mech_skin\"")

	return query
}

// EquippedOnMech pointed to by the foreign key.
func (o *MechSkin) EquippedOnMech(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EquippedOn),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// ChassisSkinMechs retrieves all the mech's Mechs with an executor via chassis_skin_id column.
func (o *MechSkin) ChassisSkinMechs(mods ...qm.QueryMod) mechQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mechs\".\"chassis_skin_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"mechs\".\"deleted_at\""),
	)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mechs\".*"})
	}

	return query
}

// LoadBlueprint allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechSkinL) LoadBlueprint(e boil.Executor, singular bool, maybeMechSkin interface{}, mods queries.Applicator) error {
	var slice []*MechSkin
	var object *MechSkin

	if singular {
		object = maybeMechSkin.(*MechSkin)
	} else {
		slice = *maybeMechSkin.(*[]*MechSkin)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechSkinR{}
		}
		args = append(args, object.BlueprintID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechSkinR{}
			}

			for _, a := range args {
				if a == obj.BlueprintID {
					continue Outer
				}
			}

			args = append(args, obj.BlueprintID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_mech_skin`),
		qm.WhereIn(`blueprint_mech_skin.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintMechSkin")
	}

	var resultSlice []*BlueprintMechSkin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintMechSkin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_mech_skin")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_mech_skin")
	}

	if len(mechSkinAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Blueprint = foreign
		if foreign.R == nil {
			foreign.R = &blueprintMechSkinR{}
		}
		foreign.R.BlueprintMechSkins = append(foreign.R.BlueprintMechSkins, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlueprintID == foreign.ID {
				local.R.Blueprint = foreign
				if foreign.R == nil {
					foreign.R = &blueprintMechSkinR{}
				}
				foreign.R.BlueprintMechSkins = append(foreign.R.BlueprintMechSkins, local)
				break
			}
		}
	}

	return nil
}

// LoadEquippedOnMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechSkinL) LoadEquippedOnMech(e boil.Executor, singular bool, maybeMechSkin interface{}, mods queries.Applicator) error {
	var slice []*MechSkin
	var object *MechSkin

	if singular {
		object = maybeMechSkin.(*MechSkin)
	} else {
		slice = *maybeMechSkin.(*[]*MechSkin)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechSkinR{}
		}
		if !queries.IsNil(object.EquippedOn) {
			args = append(args, object.EquippedOn)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechSkinR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.EquippedOn) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.EquippedOn) {
				args = append(args, obj.EquippedOn)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(mechSkinAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EquippedOnMech = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.EquippedOnMechSkins = append(foreign.R.EquippedOnMechSkins, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.EquippedOn, foreign.ID) {
				local.R.EquippedOnMech = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.EquippedOnMechSkins = append(foreign.R.EquippedOnMechSkins, local)
				break
			}
		}
	}

	return nil
}

// LoadChassisSkinMechs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechSkinL) LoadChassisSkinMechs(e boil.Executor, singular bool, maybeMechSkin interface{}, mods queries.Applicator) error {
	var slice []*MechSkin
	var object *MechSkin

	if singular {
		object = maybeMechSkin.(*MechSkin)
	} else {
		slice = *maybeMechSkin.(*[]*MechSkin)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechSkinR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechSkinR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.chassis_skin_id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mechs")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mechs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChassisSkinMechs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mechR{}
			}
			foreign.R.ChassisSkin = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChassisSkinID {
				local.R.ChassisSkinMechs = append(local.R.ChassisSkinMechs, foreign)
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.ChassisSkin = local
				break
			}
		}
	}

	return nil
}

// SetBlueprint of the mechSkin to the related item.
// Sets o.R.Blueprint to related.
// Adds o to related.R.BlueprintMechSkins.
func (o *MechSkin) SetBlueprint(exec boil.Executor, insert bool, related *BlueprintMechSkin) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mech_skin\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechSkinPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlueprintID = related.ID
	if o.R == nil {
		o.R = &mechSkinR{
			Blueprint: related,
		}
	} else {
		o.R.Blueprint = related
	}

	if related.R == nil {
		related.R = &blueprintMechSkinR{
			BlueprintMechSkins: MechSkinSlice{o},
		}
	} else {
		related.R.BlueprintMechSkins = append(related.R.BlueprintMechSkins, o)
	}

	return nil
}

// SetEquippedOnMech of the mechSkin to the related item.
// Sets o.R.EquippedOnMech to related.
// Adds o to related.R.EquippedOnMechSkins.
func (o *MechSkin) SetEquippedOnMech(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mech_skin\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"equipped_on"}),
		strmangle.WhereClause("\"", "\"", 2, mechSkinPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.EquippedOn, related.ID)
	if o.R == nil {
		o.R = &mechSkinR{
			EquippedOnMech: related,
		}
	} else {
		o.R.EquippedOnMech = related
	}

	if related.R == nil {
		related.R = &mechR{
			EquippedOnMechSkins: MechSkinSlice{o},
		}
	} else {
		related.R.EquippedOnMechSkins = append(related.R.EquippedOnMechSkins, o)
	}

	return nil
}

// RemoveEquippedOnMech relationship.
// Sets o.R.EquippedOnMech to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *MechSkin) RemoveEquippedOnMech(exec boil.Executor, related *Mech) error {
	var err error

	queries.SetScanner(&o.EquippedOn, nil)
	if _, err = o.Update(exec, boil.Whitelist("equipped_on")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.EquippedOnMech = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.EquippedOnMechSkins {
		if queries.Equal(o.EquippedOn, ri.EquippedOn) {
			continue
		}

		ln := len(related.R.EquippedOnMechSkins)
		if ln > 1 && i < ln-1 {
			related.R.EquippedOnMechSkins[i] = related.R.EquippedOnMechSkins[ln-1]
		}
		related.R.EquippedOnMechSkins = related.R.EquippedOnMechSkins[:ln-1]
		break
	}
	return nil
}

// AddChassisSkinMechs adds the given related objects to the existing relationships
// of the mech_skin, optionally inserting them as new records.
// Appends related to o.R.ChassisSkinMechs.
// Sets related.R.ChassisSkin appropriately.
func (o *MechSkin) AddChassisSkinMechs(exec boil.Executor, insert bool, related ...*Mech) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChassisSkinID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mechs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"chassis_skin_id"}),
				strmangle.WhereClause("\"", "\"", 2, mechPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChassisSkinID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechSkinR{
			ChassisSkinMechs: related,
		}
	} else {
		o.R.ChassisSkinMechs = append(o.R.ChassisSkinMechs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mechR{
				ChassisSkin: o,
			}
		} else {
			rel.R.ChassisSkin = o
		}
	}
	return nil
}

// MechSkins retrieves all the records using an executor.
func MechSkins(mods ...qm.QueryMod) mechSkinQuery {
	mods = append(mods, qm.From("\"mech_skin\""))
	return mechSkinQuery{NewQuery(mods...)}
}

// FindMechSkin retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMechSkin(exec boil.Executor, iD string, selectCols ...string) (*MechSkin, error) {
	mechSkinObj := &MechSkin{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mech_skin\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, mechSkinObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from mech_skin")
	}

	if err = mechSkinObj.doAfterSelectHooks(exec); err != nil {
		return mechSkinObj, err
	}

	return mechSkinObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MechSkin) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mech_skin provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechSkinColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mechSkinInsertCacheMut.RLock()
	cache, cached := mechSkinInsertCache[key]
	mechSkinInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mechSkinAllColumns,
			mechSkinColumnsWithDefault,
			mechSkinColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mechSkinType, mechSkinMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mechSkinType, mechSkinMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mech_skin\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mech_skin\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into mech_skin")
	}

	if !cached {
		mechSkinInsertCacheMut.Lock()
		mechSkinInsertCache[key] = cache
		mechSkinInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the MechSkin.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MechSkin) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mechSkinUpdateCacheMut.RLock()
	cache, cached := mechSkinUpdateCache[key]
	mechSkinUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mechSkinAllColumns,
			mechSkinPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update mech_skin, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mech_skin\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mechSkinPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mechSkinType, mechSkinMapping, append(wl, mechSkinPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update mech_skin row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for mech_skin")
	}

	if !cached {
		mechSkinUpdateCacheMut.Lock()
		mechSkinUpdateCache[key] = cache
		mechSkinUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mechSkinQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for mech_skin")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for mech_skin")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MechSkinSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechSkinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mech_skin\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mechSkinPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in mechSkin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all mechSkin")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MechSkin) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mech_skin provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechSkinColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mechSkinUpsertCacheMut.RLock()
	cache, cached := mechSkinUpsertCache[key]
	mechSkinUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mechSkinAllColumns,
			mechSkinColumnsWithDefault,
			mechSkinColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mechSkinAllColumns,
			mechSkinPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert mech_skin, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mechSkinPrimaryKeyColumns))
			copy(conflict, mechSkinPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mech_skin\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mechSkinType, mechSkinMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mechSkinType, mechSkinMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert mech_skin")
	}

	if !cached {
		mechSkinUpsertCacheMut.Lock()
		mechSkinUpsertCache[key] = cache
		mechSkinUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single MechSkin record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MechSkin) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no MechSkin provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mechSkinPrimaryKeyMapping)
	sql := "DELETE FROM \"mech_skin\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from mech_skin")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for mech_skin")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mechSkinQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no mechSkinQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mech_skin")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mech_skin")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MechSkinSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mechSkinBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechSkinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"mech_skin\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechSkinPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mechSkin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mech_skin")
	}

	if len(mechSkinAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MechSkin) Reload(exec boil.Executor) error {
	ret, err := FindMechSkin(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MechSkinSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MechSkinSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechSkinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mech_skin\".* FROM \"mech_skin\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechSkinPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in MechSkinSlice")
	}

	*o = slice

	return nil
}

// MechSkinExists checks if the MechSkin row exists.
func MechSkinExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mech_skin\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if mech_skin exists")
	}

	return exists, nil
}
