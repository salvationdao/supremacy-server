// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MechAnimation is an object representing the database table.
type MechAnimation struct {
	ID             string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BlueprintID    string      `boiler:"blueprint_id" boil:"blueprint_id" json:"blueprint_id" toml:"blueprint_id" yaml:"blueprint_id"`
	Label          string      `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	MechModel      string      `boiler:"mech_model" boil:"mech_model" json:"mech_model" toml:"mech_model" yaml:"mech_model"`
	EquippedOn     null.String `boiler:"equipped_on" boil:"equipped_on" json:"equipped_on,omitempty" toml:"equipped_on" yaml:"equipped_on,omitempty"`
	IntroAnimation null.Bool   `boiler:"intro_animation" boil:"intro_animation" json:"intro_animation,omitempty" toml:"intro_animation" yaml:"intro_animation,omitempty"`
	OutroAnimation null.Bool   `boiler:"outro_animation" boil:"outro_animation" json:"outro_animation,omitempty" toml:"outro_animation" yaml:"outro_animation,omitempty"`
	CreatedAt      time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *mechAnimationR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L mechAnimationL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MechAnimationColumns = struct {
	ID             string
	BlueprintID    string
	Label          string
	MechModel      string
	EquippedOn     string
	IntroAnimation string
	OutroAnimation string
	CreatedAt      string
}{
	ID:             "id",
	BlueprintID:    "blueprint_id",
	Label:          "label",
	MechModel:      "mech_model",
	EquippedOn:     "equipped_on",
	IntroAnimation: "intro_animation",
	OutroAnimation: "outro_animation",
	CreatedAt:      "created_at",
}

var MechAnimationTableColumns = struct {
	ID             string
	BlueprintID    string
	Label          string
	MechModel      string
	EquippedOn     string
	IntroAnimation string
	OutroAnimation string
	CreatedAt      string
}{
	ID:             "mech_animation.id",
	BlueprintID:    "mech_animation.blueprint_id",
	Label:          "mech_animation.label",
	MechModel:      "mech_animation.mech_model",
	EquippedOn:     "mech_animation.equipped_on",
	IntroAnimation: "mech_animation.intro_animation",
	OutroAnimation: "mech_animation.outro_animation",
	CreatedAt:      "mech_animation.created_at",
}

// Generated where

var MechAnimationWhere = struct {
	ID             whereHelperstring
	BlueprintID    whereHelperstring
	Label          whereHelperstring
	MechModel      whereHelperstring
	EquippedOn     whereHelpernull_String
	IntroAnimation whereHelpernull_Bool
	OutroAnimation whereHelpernull_Bool
	CreatedAt      whereHelpertime_Time
}{
	ID:             whereHelperstring{field: "\"mech_animation\".\"id\""},
	BlueprintID:    whereHelperstring{field: "\"mech_animation\".\"blueprint_id\""},
	Label:          whereHelperstring{field: "\"mech_animation\".\"label\""},
	MechModel:      whereHelperstring{field: "\"mech_animation\".\"mech_model\""},
	EquippedOn:     whereHelpernull_String{field: "\"mech_animation\".\"equipped_on\""},
	IntroAnimation: whereHelpernull_Bool{field: "\"mech_animation\".\"intro_animation\""},
	OutroAnimation: whereHelpernull_Bool{field: "\"mech_animation\".\"outro_animation\""},
	CreatedAt:      whereHelpertime_Time{field: "\"mech_animation\".\"created_at\""},
}

// MechAnimationRels is where relationship names are stored.
var MechAnimationRels = struct {
	Blueprint              string
	EquippedOnMech         string
	MechAnimationMechModel string
	IntroAnimationMechs    string
	OutroAnimationMechs    string
}{
	Blueprint:              "Blueprint",
	EquippedOnMech:         "EquippedOnMech",
	MechAnimationMechModel: "MechAnimationMechModel",
	IntroAnimationMechs:    "IntroAnimationMechs",
	OutroAnimationMechs:    "OutroAnimationMechs",
}

// mechAnimationR is where relationships are stored.
type mechAnimationR struct {
	Blueprint              *BlueprintMechAnimation `boiler:"Blueprint" boil:"Blueprint" json:"Blueprint" toml:"Blueprint" yaml:"Blueprint"`
	EquippedOnMech         *Mech                   `boiler:"EquippedOnMech" boil:"EquippedOnMech" json:"EquippedOnMech" toml:"EquippedOnMech" yaml:"EquippedOnMech"`
	MechAnimationMechModel *MechModel              `boiler:"MechAnimationMechModel" boil:"MechAnimationMechModel" json:"MechAnimationMechModel" toml:"MechAnimationMechModel" yaml:"MechAnimationMechModel"`
	IntroAnimationMechs    MechSlice               `boiler:"IntroAnimationMechs" boil:"IntroAnimationMechs" json:"IntroAnimationMechs" toml:"IntroAnimationMechs" yaml:"IntroAnimationMechs"`
	OutroAnimationMechs    MechSlice               `boiler:"OutroAnimationMechs" boil:"OutroAnimationMechs" json:"OutroAnimationMechs" toml:"OutroAnimationMechs" yaml:"OutroAnimationMechs"`
}

// NewStruct creates a new relationship struct
func (*mechAnimationR) NewStruct() *mechAnimationR {
	return &mechAnimationR{}
}

// mechAnimationL is where Load methods for each relationship are stored.
type mechAnimationL struct{}

var (
	mechAnimationAllColumns            = []string{"id", "blueprint_id", "label", "mech_model", "equipped_on", "intro_animation", "outro_animation", "created_at"}
	mechAnimationColumnsWithoutDefault = []string{"blueprint_id", "label", "mech_model"}
	mechAnimationColumnsWithDefault    = []string{"id", "equipped_on", "intro_animation", "outro_animation", "created_at"}
	mechAnimationPrimaryKeyColumns     = []string{"id"}
	mechAnimationGeneratedColumns      = []string{}
)

type (
	// MechAnimationSlice is an alias for a slice of pointers to MechAnimation.
	// This should almost always be used instead of []MechAnimation.
	MechAnimationSlice []*MechAnimation
	// MechAnimationHook is the signature for custom MechAnimation hook methods
	MechAnimationHook func(boil.Executor, *MechAnimation) error

	mechAnimationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mechAnimationType                 = reflect.TypeOf(&MechAnimation{})
	mechAnimationMapping              = queries.MakeStructMapping(mechAnimationType)
	mechAnimationPrimaryKeyMapping, _ = queries.BindMapping(mechAnimationType, mechAnimationMapping, mechAnimationPrimaryKeyColumns)
	mechAnimationInsertCacheMut       sync.RWMutex
	mechAnimationInsertCache          = make(map[string]insertCache)
	mechAnimationUpdateCacheMut       sync.RWMutex
	mechAnimationUpdateCache          = make(map[string]updateCache)
	mechAnimationUpsertCacheMut       sync.RWMutex
	mechAnimationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mechAnimationAfterSelectHooks []MechAnimationHook

var mechAnimationBeforeInsertHooks []MechAnimationHook
var mechAnimationAfterInsertHooks []MechAnimationHook

var mechAnimationBeforeUpdateHooks []MechAnimationHook
var mechAnimationAfterUpdateHooks []MechAnimationHook

var mechAnimationBeforeDeleteHooks []MechAnimationHook
var mechAnimationAfterDeleteHooks []MechAnimationHook

var mechAnimationBeforeUpsertHooks []MechAnimationHook
var mechAnimationAfterUpsertHooks []MechAnimationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MechAnimation) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAnimationAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MechAnimation) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAnimationBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MechAnimation) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAnimationAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MechAnimation) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAnimationBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MechAnimation) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAnimationAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MechAnimation) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAnimationBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MechAnimation) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAnimationAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MechAnimation) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAnimationBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MechAnimation) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAnimationAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMechAnimationHook registers your hook function for all future operations.
func AddMechAnimationHook(hookPoint boil.HookPoint, mechAnimationHook MechAnimationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mechAnimationAfterSelectHooks = append(mechAnimationAfterSelectHooks, mechAnimationHook)
	case boil.BeforeInsertHook:
		mechAnimationBeforeInsertHooks = append(mechAnimationBeforeInsertHooks, mechAnimationHook)
	case boil.AfterInsertHook:
		mechAnimationAfterInsertHooks = append(mechAnimationAfterInsertHooks, mechAnimationHook)
	case boil.BeforeUpdateHook:
		mechAnimationBeforeUpdateHooks = append(mechAnimationBeforeUpdateHooks, mechAnimationHook)
	case boil.AfterUpdateHook:
		mechAnimationAfterUpdateHooks = append(mechAnimationAfterUpdateHooks, mechAnimationHook)
	case boil.BeforeDeleteHook:
		mechAnimationBeforeDeleteHooks = append(mechAnimationBeforeDeleteHooks, mechAnimationHook)
	case boil.AfterDeleteHook:
		mechAnimationAfterDeleteHooks = append(mechAnimationAfterDeleteHooks, mechAnimationHook)
	case boil.BeforeUpsertHook:
		mechAnimationBeforeUpsertHooks = append(mechAnimationBeforeUpsertHooks, mechAnimationHook)
	case boil.AfterUpsertHook:
		mechAnimationAfterUpsertHooks = append(mechAnimationAfterUpsertHooks, mechAnimationHook)
	}
}

// One returns a single mechAnimation record from the query.
func (q mechAnimationQuery) One(exec boil.Executor) (*MechAnimation, error) {
	o := &MechAnimation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for mech_animation")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MechAnimation records from the query.
func (q mechAnimationQuery) All(exec boil.Executor) (MechAnimationSlice, error) {
	var o []*MechAnimation

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to MechAnimation slice")
	}

	if len(mechAnimationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MechAnimation records in the query.
func (q mechAnimationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count mech_animation rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mechAnimationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if mech_animation exists")
	}

	return count > 0, nil
}

// Blueprint pointed to by the foreign key.
func (o *MechAnimation) Blueprint(mods ...qm.QueryMod) blueprintMechAnimationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BlueprintID),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintMechAnimations(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_mech_animation\"")

	return query
}

// EquippedOnMech pointed to by the foreign key.
func (o *MechAnimation) EquippedOnMech(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EquippedOn),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// MechAnimationMechModel pointed to by the foreign key.
func (o *MechAnimation) MechAnimationMechModel(mods ...qm.QueryMod) mechModelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MechModel),
	}

	queryMods = append(queryMods, mods...)

	query := MechModels(queryMods...)
	queries.SetFrom(query.Query, "\"mech_models\"")

	return query
}

// IntroAnimationMechs retrieves all the mech's Mechs with an executor via intro_animation_id column.
func (o *MechAnimation) IntroAnimationMechs(mods ...qm.QueryMod) mechQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mechs\".\"intro_animation_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"mechs\".\"deleted_at\""),
	)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mechs\".*"})
	}

	return query
}

// OutroAnimationMechs retrieves all the mech's Mechs with an executor via outro_animation_id column.
func (o *MechAnimation) OutroAnimationMechs(mods ...qm.QueryMod) mechQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mechs\".\"outro_animation_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"mechs\".\"deleted_at\""),
	)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mechs\".*"})
	}

	return query
}

// LoadBlueprint allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechAnimationL) LoadBlueprint(e boil.Executor, singular bool, maybeMechAnimation interface{}, mods queries.Applicator) error {
	var slice []*MechAnimation
	var object *MechAnimation

	if singular {
		object = maybeMechAnimation.(*MechAnimation)
	} else {
		slice = *maybeMechAnimation.(*[]*MechAnimation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechAnimationR{}
		}
		args = append(args, object.BlueprintID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechAnimationR{}
			}

			for _, a := range args {
				if a == obj.BlueprintID {
					continue Outer
				}
			}

			args = append(args, obj.BlueprintID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_mech_animation`),
		qm.WhereIn(`blueprint_mech_animation.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintMechAnimation")
	}

	var resultSlice []*BlueprintMechAnimation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintMechAnimation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_mech_animation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_mech_animation")
	}

	if len(mechAnimationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Blueprint = foreign
		if foreign.R == nil {
			foreign.R = &blueprintMechAnimationR{}
		}
		foreign.R.BlueprintMechAnimations = append(foreign.R.BlueprintMechAnimations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlueprintID == foreign.ID {
				local.R.Blueprint = foreign
				if foreign.R == nil {
					foreign.R = &blueprintMechAnimationR{}
				}
				foreign.R.BlueprintMechAnimations = append(foreign.R.BlueprintMechAnimations, local)
				break
			}
		}
	}

	return nil
}

// LoadEquippedOnMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechAnimationL) LoadEquippedOnMech(e boil.Executor, singular bool, maybeMechAnimation interface{}, mods queries.Applicator) error {
	var slice []*MechAnimation
	var object *MechAnimation

	if singular {
		object = maybeMechAnimation.(*MechAnimation)
	} else {
		slice = *maybeMechAnimation.(*[]*MechAnimation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechAnimationR{}
		}
		if !queries.IsNil(object.EquippedOn) {
			args = append(args, object.EquippedOn)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechAnimationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.EquippedOn) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.EquippedOn) {
				args = append(args, obj.EquippedOn)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(mechAnimationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EquippedOnMech = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.EquippedOnMechAnimations = append(foreign.R.EquippedOnMechAnimations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.EquippedOn, foreign.ID) {
				local.R.EquippedOnMech = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.EquippedOnMechAnimations = append(foreign.R.EquippedOnMechAnimations, local)
				break
			}
		}
	}

	return nil
}

// LoadMechAnimationMechModel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechAnimationL) LoadMechAnimationMechModel(e boil.Executor, singular bool, maybeMechAnimation interface{}, mods queries.Applicator) error {
	var slice []*MechAnimation
	var object *MechAnimation

	if singular {
		object = maybeMechAnimation.(*MechAnimation)
	} else {
		slice = *maybeMechAnimation.(*[]*MechAnimation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechAnimationR{}
		}
		args = append(args, object.MechModel)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechAnimationR{}
			}

			for _, a := range args {
				if a == obj.MechModel {
					continue Outer
				}
			}

			args = append(args, obj.MechModel)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_models`),
		qm.WhereIn(`mech_models.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MechModel")
	}

	var resultSlice []*MechModel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MechModel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mech_models")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_models")
	}

	if len(mechAnimationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MechAnimationMechModel = foreign
		if foreign.R == nil {
			foreign.R = &mechModelR{}
		}
		foreign.R.MechAnimations = append(foreign.R.MechAnimations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MechModel == foreign.ID {
				local.R.MechAnimationMechModel = foreign
				if foreign.R == nil {
					foreign.R = &mechModelR{}
				}
				foreign.R.MechAnimations = append(foreign.R.MechAnimations, local)
				break
			}
		}
	}

	return nil
}

// LoadIntroAnimationMechs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechAnimationL) LoadIntroAnimationMechs(e boil.Executor, singular bool, maybeMechAnimation interface{}, mods queries.Applicator) error {
	var slice []*MechAnimation
	var object *MechAnimation

	if singular {
		object = maybeMechAnimation.(*MechAnimation)
	} else {
		slice = *maybeMechAnimation.(*[]*MechAnimation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechAnimationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechAnimationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.intro_animation_id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mechs")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mechs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IntroAnimationMechs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mechR{}
			}
			foreign.R.IntroAnimation = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.IntroAnimationID) {
				local.R.IntroAnimationMechs = append(local.R.IntroAnimationMechs, foreign)
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.IntroAnimation = local
				break
			}
		}
	}

	return nil
}

// LoadOutroAnimationMechs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechAnimationL) LoadOutroAnimationMechs(e boil.Executor, singular bool, maybeMechAnimation interface{}, mods queries.Applicator) error {
	var slice []*MechAnimation
	var object *MechAnimation

	if singular {
		object = maybeMechAnimation.(*MechAnimation)
	} else {
		slice = *maybeMechAnimation.(*[]*MechAnimation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechAnimationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechAnimationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.outro_animation_id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mechs")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mechs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OutroAnimationMechs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mechR{}
			}
			foreign.R.OutroAnimation = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.OutroAnimationID) {
				local.R.OutroAnimationMechs = append(local.R.OutroAnimationMechs, foreign)
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.OutroAnimation = local
				break
			}
		}
	}

	return nil
}

// SetBlueprint of the mechAnimation to the related item.
// Sets o.R.Blueprint to related.
// Adds o to related.R.BlueprintMechAnimations.
func (o *MechAnimation) SetBlueprint(exec boil.Executor, insert bool, related *BlueprintMechAnimation) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mech_animation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechAnimationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlueprintID = related.ID
	if o.R == nil {
		o.R = &mechAnimationR{
			Blueprint: related,
		}
	} else {
		o.R.Blueprint = related
	}

	if related.R == nil {
		related.R = &blueprintMechAnimationR{
			BlueprintMechAnimations: MechAnimationSlice{o},
		}
	} else {
		related.R.BlueprintMechAnimations = append(related.R.BlueprintMechAnimations, o)
	}

	return nil
}

// SetEquippedOnMech of the mechAnimation to the related item.
// Sets o.R.EquippedOnMech to related.
// Adds o to related.R.EquippedOnMechAnimations.
func (o *MechAnimation) SetEquippedOnMech(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mech_animation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"equipped_on"}),
		strmangle.WhereClause("\"", "\"", 2, mechAnimationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.EquippedOn, related.ID)
	if o.R == nil {
		o.R = &mechAnimationR{
			EquippedOnMech: related,
		}
	} else {
		o.R.EquippedOnMech = related
	}

	if related.R == nil {
		related.R = &mechR{
			EquippedOnMechAnimations: MechAnimationSlice{o},
		}
	} else {
		related.R.EquippedOnMechAnimations = append(related.R.EquippedOnMechAnimations, o)
	}

	return nil
}

// RemoveEquippedOnMech relationship.
// Sets o.R.EquippedOnMech to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *MechAnimation) RemoveEquippedOnMech(exec boil.Executor, related *Mech) error {
	var err error

	queries.SetScanner(&o.EquippedOn, nil)
	if _, err = o.Update(exec, boil.Whitelist("equipped_on")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.EquippedOnMech = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.EquippedOnMechAnimations {
		if queries.Equal(o.EquippedOn, ri.EquippedOn) {
			continue
		}

		ln := len(related.R.EquippedOnMechAnimations)
		if ln > 1 && i < ln-1 {
			related.R.EquippedOnMechAnimations[i] = related.R.EquippedOnMechAnimations[ln-1]
		}
		related.R.EquippedOnMechAnimations = related.R.EquippedOnMechAnimations[:ln-1]
		break
	}
	return nil
}

// SetMechAnimationMechModel of the mechAnimation to the related item.
// Sets o.R.MechAnimationMechModel to related.
// Adds o to related.R.MechAnimations.
func (o *MechAnimation) SetMechAnimationMechModel(exec boil.Executor, insert bool, related *MechModel) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mech_animation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mech_model"}),
		strmangle.WhereClause("\"", "\"", 2, mechAnimationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MechModel = related.ID
	if o.R == nil {
		o.R = &mechAnimationR{
			MechAnimationMechModel: related,
		}
	} else {
		o.R.MechAnimationMechModel = related
	}

	if related.R == nil {
		related.R = &mechModelR{
			MechAnimations: MechAnimationSlice{o},
		}
	} else {
		related.R.MechAnimations = append(related.R.MechAnimations, o)
	}

	return nil
}

// AddIntroAnimationMechs adds the given related objects to the existing relationships
// of the mech_animation, optionally inserting them as new records.
// Appends related to o.R.IntroAnimationMechs.
// Sets related.R.IntroAnimation appropriately.
func (o *MechAnimation) AddIntroAnimationMechs(exec boil.Executor, insert bool, related ...*Mech) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.IntroAnimationID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mechs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"intro_animation_id"}),
				strmangle.WhereClause("\"", "\"", 2, mechPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.IntroAnimationID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mechAnimationR{
			IntroAnimationMechs: related,
		}
	} else {
		o.R.IntroAnimationMechs = append(o.R.IntroAnimationMechs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mechR{
				IntroAnimation: o,
			}
		} else {
			rel.R.IntroAnimation = o
		}
	}
	return nil
}

// SetIntroAnimationMechs removes all previously related items of the
// mech_animation replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.IntroAnimation's IntroAnimationMechs accordingly.
// Replaces o.R.IntroAnimationMechs with related.
// Sets related.R.IntroAnimation's IntroAnimationMechs accordingly.
func (o *MechAnimation) SetIntroAnimationMechs(exec boil.Executor, insert bool, related ...*Mech) error {
	query := "update \"mechs\" set \"intro_animation_id\" = null where \"intro_animation_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.IntroAnimationMechs {
			queries.SetScanner(&rel.IntroAnimationID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.IntroAnimation = nil
		}

		o.R.IntroAnimationMechs = nil
	}
	return o.AddIntroAnimationMechs(exec, insert, related...)
}

// RemoveIntroAnimationMechs relationships from objects passed in.
// Removes related items from R.IntroAnimationMechs (uses pointer comparison, removal does not keep order)
// Sets related.R.IntroAnimation.
func (o *MechAnimation) RemoveIntroAnimationMechs(exec boil.Executor, related ...*Mech) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.IntroAnimationID, nil)
		if rel.R != nil {
			rel.R.IntroAnimation = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("intro_animation_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.IntroAnimationMechs {
			if rel != ri {
				continue
			}

			ln := len(o.R.IntroAnimationMechs)
			if ln > 1 && i < ln-1 {
				o.R.IntroAnimationMechs[i] = o.R.IntroAnimationMechs[ln-1]
			}
			o.R.IntroAnimationMechs = o.R.IntroAnimationMechs[:ln-1]
			break
		}
	}

	return nil
}

// AddOutroAnimationMechs adds the given related objects to the existing relationships
// of the mech_animation, optionally inserting them as new records.
// Appends related to o.R.OutroAnimationMechs.
// Sets related.R.OutroAnimation appropriately.
func (o *MechAnimation) AddOutroAnimationMechs(exec boil.Executor, insert bool, related ...*Mech) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OutroAnimationID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mechs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"outro_animation_id"}),
				strmangle.WhereClause("\"", "\"", 2, mechPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OutroAnimationID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mechAnimationR{
			OutroAnimationMechs: related,
		}
	} else {
		o.R.OutroAnimationMechs = append(o.R.OutroAnimationMechs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mechR{
				OutroAnimation: o,
			}
		} else {
			rel.R.OutroAnimation = o
		}
	}
	return nil
}

// SetOutroAnimationMechs removes all previously related items of the
// mech_animation replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OutroAnimation's OutroAnimationMechs accordingly.
// Replaces o.R.OutroAnimationMechs with related.
// Sets related.R.OutroAnimation's OutroAnimationMechs accordingly.
func (o *MechAnimation) SetOutroAnimationMechs(exec boil.Executor, insert bool, related ...*Mech) error {
	query := "update \"mechs\" set \"outro_animation_id\" = null where \"outro_animation_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OutroAnimationMechs {
			queries.SetScanner(&rel.OutroAnimationID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OutroAnimation = nil
		}

		o.R.OutroAnimationMechs = nil
	}
	return o.AddOutroAnimationMechs(exec, insert, related...)
}

// RemoveOutroAnimationMechs relationships from objects passed in.
// Removes related items from R.OutroAnimationMechs (uses pointer comparison, removal does not keep order)
// Sets related.R.OutroAnimation.
func (o *MechAnimation) RemoveOutroAnimationMechs(exec boil.Executor, related ...*Mech) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OutroAnimationID, nil)
		if rel.R != nil {
			rel.R.OutroAnimation = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("outro_animation_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OutroAnimationMechs {
			if rel != ri {
				continue
			}

			ln := len(o.R.OutroAnimationMechs)
			if ln > 1 && i < ln-1 {
				o.R.OutroAnimationMechs[i] = o.R.OutroAnimationMechs[ln-1]
			}
			o.R.OutroAnimationMechs = o.R.OutroAnimationMechs[:ln-1]
			break
		}
	}

	return nil
}

// MechAnimations retrieves all the records using an executor.
func MechAnimations(mods ...qm.QueryMod) mechAnimationQuery {
	mods = append(mods, qm.From("\"mech_animation\""))
	return mechAnimationQuery{NewQuery(mods...)}
}

// FindMechAnimation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMechAnimation(exec boil.Executor, iD string, selectCols ...string) (*MechAnimation, error) {
	mechAnimationObj := &MechAnimation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mech_animation\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, mechAnimationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from mech_animation")
	}

	if err = mechAnimationObj.doAfterSelectHooks(exec); err != nil {
		return mechAnimationObj, err
	}

	return mechAnimationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MechAnimation) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mech_animation provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechAnimationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mechAnimationInsertCacheMut.RLock()
	cache, cached := mechAnimationInsertCache[key]
	mechAnimationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mechAnimationAllColumns,
			mechAnimationColumnsWithDefault,
			mechAnimationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mechAnimationType, mechAnimationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mechAnimationType, mechAnimationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mech_animation\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mech_animation\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into mech_animation")
	}

	if !cached {
		mechAnimationInsertCacheMut.Lock()
		mechAnimationInsertCache[key] = cache
		mechAnimationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the MechAnimation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MechAnimation) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mechAnimationUpdateCacheMut.RLock()
	cache, cached := mechAnimationUpdateCache[key]
	mechAnimationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mechAnimationAllColumns,
			mechAnimationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update mech_animation, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mech_animation\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mechAnimationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mechAnimationType, mechAnimationMapping, append(wl, mechAnimationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update mech_animation row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for mech_animation")
	}

	if !cached {
		mechAnimationUpdateCacheMut.Lock()
		mechAnimationUpdateCache[key] = cache
		mechAnimationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mechAnimationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for mech_animation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for mech_animation")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MechAnimationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechAnimationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mech_animation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mechAnimationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in mechAnimation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all mechAnimation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MechAnimation) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mech_animation provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechAnimationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mechAnimationUpsertCacheMut.RLock()
	cache, cached := mechAnimationUpsertCache[key]
	mechAnimationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mechAnimationAllColumns,
			mechAnimationColumnsWithDefault,
			mechAnimationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mechAnimationAllColumns,
			mechAnimationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert mech_animation, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mechAnimationPrimaryKeyColumns))
			copy(conflict, mechAnimationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mech_animation\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mechAnimationType, mechAnimationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mechAnimationType, mechAnimationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert mech_animation")
	}

	if !cached {
		mechAnimationUpsertCacheMut.Lock()
		mechAnimationUpsertCache[key] = cache
		mechAnimationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single MechAnimation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MechAnimation) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no MechAnimation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mechAnimationPrimaryKeyMapping)
	sql := "DELETE FROM \"mech_animation\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from mech_animation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for mech_animation")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mechAnimationQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no mechAnimationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mech_animation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mech_animation")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MechAnimationSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mechAnimationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechAnimationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"mech_animation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechAnimationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mechAnimation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mech_animation")
	}

	if len(mechAnimationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MechAnimation) Reload(exec boil.Executor) error {
	ret, err := FindMechAnimation(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MechAnimationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MechAnimationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechAnimationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mech_animation\".* FROM \"mech_animation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechAnimationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in MechAnimationSlice")
	}

	*o = slice

	return nil
}

// MechAnimationExists checks if the MechAnimation row exists.
func MechAnimationExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mech_animation\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if mech_animation exists")
	}

	return exists, nil
}
