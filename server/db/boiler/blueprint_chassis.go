// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BlueprintChassis is an object representing the database table.
type BlueprintChassis struct {
	ID                 string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BrandID            string      `boiler:"brand_id" boil:"brand_id" json:"brand_id" toml:"brand_id" yaml:"brand_id"`
	Label              string      `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	Slug               string      `boiler:"slug" boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	Skin               string      `boiler:"skin" boil:"skin" json:"skin" toml:"skin" yaml:"skin"`
	ShieldRechargeRate int         `boiler:"shield_recharge_rate" boil:"shield_recharge_rate" json:"shield_recharge_rate" toml:"shield_recharge_rate" yaml:"shield_recharge_rate"`
	WeaponHardpoints   int         `boiler:"weapon_hardpoints" boil:"weapon_hardpoints" json:"weapon_hardpoints" toml:"weapon_hardpoints" yaml:"weapon_hardpoints"`
	UtilitySlots       int         `boiler:"utility_slots" boil:"utility_slots" json:"utility_slots" toml:"utility_slots" yaml:"utility_slots"`
	Speed              int         `boiler:"speed" boil:"speed" json:"speed" toml:"speed" yaml:"speed"`
	MaxHitpoints       int         `boiler:"max_hitpoints" boil:"max_hitpoints" json:"max_hitpoints" toml:"max_hitpoints" yaml:"max_hitpoints"`
	MaxShield          int         `boiler:"max_shield" boil:"max_shield" json:"max_shield" toml:"max_shield" yaml:"max_shield"`
	DeletedAt          null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt          time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt          time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ModelID            string      `boiler:"model_id" boil:"model_id" json:"model_id" toml:"model_id" yaml:"model_id"`
	Collection         string      `boiler:"collection" boil:"collection" json:"collection" toml:"collection" yaml:"collection"`
	PowerCoreSize      string      `boiler:"power_core_size" boil:"power_core_size" json:"power_core_size" toml:"power_core_size" yaml:"power_core_size"`
	Tier               string      `boiler:"tier" boil:"tier" json:"tier" toml:"tier" yaml:"tier"`
	ChassisSkinID      null.String `boiler:"chassis_skin_id" boil:"chassis_skin_id" json:"chassis_skin_id,omitempty" toml:"chassis_skin_id" yaml:"chassis_skin_id,omitempty"`

	R *blueprintChassisR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L blueprintChassisL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlueprintChassisColumns = struct {
	ID                 string
	BrandID            string
	Label              string
	Slug               string
	Skin               string
	ShieldRechargeRate string
	WeaponHardpoints   string
	UtilitySlots       string
	Speed              string
	MaxHitpoints       string
	MaxShield          string
	DeletedAt          string
	UpdatedAt          string
	CreatedAt          string
	ModelID            string
	Collection         string
	PowerCoreSize      string
	Tier               string
	ChassisSkinID      string
}{
	ID:                 "id",
	BrandID:            "brand_id",
	Label:              "label",
	Slug:               "slug",
	Skin:               "skin",
	ShieldRechargeRate: "shield_recharge_rate",
	WeaponHardpoints:   "weapon_hardpoints",
	UtilitySlots:       "utility_slots",
	Speed:              "speed",
	MaxHitpoints:       "max_hitpoints",
	MaxShield:          "max_shield",
	DeletedAt:          "deleted_at",
	UpdatedAt:          "updated_at",
	CreatedAt:          "created_at",
	ModelID:            "model_id",
	Collection:         "collection",
	PowerCoreSize:      "power_core_size",
	Tier:               "tier",
	ChassisSkinID:      "chassis_skin_id",
}

var BlueprintChassisTableColumns = struct {
	ID                 string
	BrandID            string
	Label              string
	Slug               string
	Skin               string
	ShieldRechargeRate string
	WeaponHardpoints   string
	UtilitySlots       string
	Speed              string
	MaxHitpoints       string
	MaxShield          string
	DeletedAt          string
	UpdatedAt          string
	CreatedAt          string
	ModelID            string
	Collection         string
	PowerCoreSize      string
	Tier               string
	ChassisSkinID      string
}{
	ID:                 "blueprint_chassis.id",
	BrandID:            "blueprint_chassis.brand_id",
	Label:              "blueprint_chassis.label",
	Slug:               "blueprint_chassis.slug",
	Skin:               "blueprint_chassis.skin",
	ShieldRechargeRate: "blueprint_chassis.shield_recharge_rate",
	WeaponHardpoints:   "blueprint_chassis.weapon_hardpoints",
	UtilitySlots:       "blueprint_chassis.utility_slots",
	Speed:              "blueprint_chassis.speed",
	MaxHitpoints:       "blueprint_chassis.max_hitpoints",
	MaxShield:          "blueprint_chassis.max_shield",
	DeletedAt:          "blueprint_chassis.deleted_at",
	UpdatedAt:          "blueprint_chassis.updated_at",
	CreatedAt:          "blueprint_chassis.created_at",
	ModelID:            "blueprint_chassis.model_id",
	Collection:         "blueprint_chassis.collection",
	PowerCoreSize:      "blueprint_chassis.power_core_size",
	Tier:               "blueprint_chassis.tier",
	ChassisSkinID:      "blueprint_chassis.chassis_skin_id",
}

// Generated where

var BlueprintChassisWhere = struct {
	ID                 whereHelperstring
	BrandID            whereHelperstring
	Label              whereHelperstring
	Slug               whereHelperstring
	Skin               whereHelperstring
	ShieldRechargeRate whereHelperint
	WeaponHardpoints   whereHelperint
	UtilitySlots       whereHelperint
	Speed              whereHelperint
	MaxHitpoints       whereHelperint
	MaxShield          whereHelperint
	DeletedAt          whereHelpernull_Time
	UpdatedAt          whereHelpertime_Time
	CreatedAt          whereHelpertime_Time
	ModelID            whereHelperstring
	Collection         whereHelperstring
	PowerCoreSize      whereHelperstring
	Tier               whereHelperstring
	ChassisSkinID      whereHelpernull_String
}{
	ID:                 whereHelperstring{field: "\"blueprint_chassis\".\"id\""},
	BrandID:            whereHelperstring{field: "\"blueprint_chassis\".\"brand_id\""},
	Label:              whereHelperstring{field: "\"blueprint_chassis\".\"label\""},
	Slug:               whereHelperstring{field: "\"blueprint_chassis\".\"slug\""},
	Skin:               whereHelperstring{field: "\"blueprint_chassis\".\"skin\""},
	ShieldRechargeRate: whereHelperint{field: "\"blueprint_chassis\".\"shield_recharge_rate\""},
	WeaponHardpoints:   whereHelperint{field: "\"blueprint_chassis\".\"weapon_hardpoints\""},
	UtilitySlots:       whereHelperint{field: "\"blueprint_chassis\".\"utility_slots\""},
	Speed:              whereHelperint{field: "\"blueprint_chassis\".\"speed\""},
	MaxHitpoints:       whereHelperint{field: "\"blueprint_chassis\".\"max_hitpoints\""},
	MaxShield:          whereHelperint{field: "\"blueprint_chassis\".\"max_shield\""},
	DeletedAt:          whereHelpernull_Time{field: "\"blueprint_chassis\".\"deleted_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"blueprint_chassis\".\"updated_at\""},
	CreatedAt:          whereHelpertime_Time{field: "\"blueprint_chassis\".\"created_at\""},
	ModelID:            whereHelperstring{field: "\"blueprint_chassis\".\"model_id\""},
	Collection:         whereHelperstring{field: "\"blueprint_chassis\".\"collection\""},
	PowerCoreSize:      whereHelperstring{field: "\"blueprint_chassis\".\"power_core_size\""},
	Tier:               whereHelperstring{field: "\"blueprint_chassis\".\"tier\""},
	ChassisSkinID:      whereHelpernull_String{field: "\"blueprint_chassis\".\"chassis_skin_id\""},
}

// BlueprintChassisRels is where relationship names are stored.
var BlueprintChassisRels = struct {
	Brand                            string
	ChassisSkin                      string
	Model                            string
	Template                         string
	BlueprintChassisBlueprintModules string
	BlueprintChassisBlueprintWeapons string
}{
	Brand:                            "Brand",
	ChassisSkin:                      "ChassisSkin",
	Model:                            "Model",
	Template:                         "Template",
	BlueprintChassisBlueprintModules: "BlueprintChassisBlueprintModules",
	BlueprintChassisBlueprintWeapons: "BlueprintChassisBlueprintWeapons",
}

// blueprintChassisR is where relationships are stored.
type blueprintChassisR struct {
	Brand                            *Brand                               `boiler:"Brand" boil:"Brand" json:"Brand" toml:"Brand" yaml:"Brand"`
	ChassisSkin                      *BlueprintMechSkin                   `boiler:"ChassisSkin" boil:"ChassisSkin" json:"ChassisSkin" toml:"ChassisSkin" yaml:"ChassisSkin"`
	Model                            *BlueprintMech                       `boiler:"Model" boil:"Model" json:"Model" toml:"Model" yaml:"Model"`
	Template                         *Template                            `boiler:"Template" boil:"Template" json:"Template" toml:"Template" yaml:"Template"`
	BlueprintChassisBlueprintModules BlueprintChassisBlueprintModuleSlice `boiler:"BlueprintChassisBlueprintModules" boil:"BlueprintChassisBlueprintModules" json:"BlueprintChassisBlueprintModules" toml:"BlueprintChassisBlueprintModules" yaml:"BlueprintChassisBlueprintModules"`
	BlueprintChassisBlueprintWeapons BlueprintChassisBlueprintWeaponSlice `boiler:"BlueprintChassisBlueprintWeapons" boil:"BlueprintChassisBlueprintWeapons" json:"BlueprintChassisBlueprintWeapons" toml:"BlueprintChassisBlueprintWeapons" yaml:"BlueprintChassisBlueprintWeapons"`
}

// NewStruct creates a new relationship struct
func (*blueprintChassisR) NewStruct() *blueprintChassisR {
	return &blueprintChassisR{}
}

// blueprintChassisL is where Load methods for each relationship are stored.
type blueprintChassisL struct{}

var (
	blueprintChassisAllColumns            = []string{"id", "brand_id", "label", "slug", "skin", "shield_recharge_rate", "weapon_hardpoints", "utility_slots", "speed", "max_hitpoints", "max_shield", "deleted_at", "updated_at", "created_at", "model_id", "collection", "power_core_size", "tier", "chassis_skin_id"}
	blueprintChassisColumnsWithoutDefault = []string{"brand_id", "label", "slug", "skin", "shield_recharge_rate", "weapon_hardpoints", "utility_slots", "speed", "max_hitpoints", "max_shield", "model_id"}
	blueprintChassisColumnsWithDefault    = []string{"id", "deleted_at", "updated_at", "created_at", "collection", "power_core_size", "tier", "chassis_skin_id"}
	blueprintChassisPrimaryKeyColumns     = []string{"id"}
	blueprintChassisGeneratedColumns      = []string{}
)

type (
	// BlueprintChassisSlice is an alias for a slice of pointers to BlueprintChassis.
	// This should almost always be used instead of []BlueprintChassis.
	BlueprintChassisSlice []*BlueprintChassis
	// BlueprintChassisHook is the signature for custom BlueprintChassis hook methods
	BlueprintChassisHook func(boil.Executor, *BlueprintChassis) error

	blueprintChassisQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blueprintChassisType                 = reflect.TypeOf(&BlueprintChassis{})
	blueprintChassisMapping              = queries.MakeStructMapping(blueprintChassisType)
	blueprintChassisPrimaryKeyMapping, _ = queries.BindMapping(blueprintChassisType, blueprintChassisMapping, blueprintChassisPrimaryKeyColumns)
	blueprintChassisInsertCacheMut       sync.RWMutex
	blueprintChassisInsertCache          = make(map[string]insertCache)
	blueprintChassisUpdateCacheMut       sync.RWMutex
	blueprintChassisUpdateCache          = make(map[string]updateCache)
	blueprintChassisUpsertCacheMut       sync.RWMutex
	blueprintChassisUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var blueprintChassisAfterSelectHooks []BlueprintChassisHook

var blueprintChassisBeforeInsertHooks []BlueprintChassisHook
var blueprintChassisAfterInsertHooks []BlueprintChassisHook

var blueprintChassisBeforeUpdateHooks []BlueprintChassisHook
var blueprintChassisAfterUpdateHooks []BlueprintChassisHook

var blueprintChassisBeforeDeleteHooks []BlueprintChassisHook
var blueprintChassisAfterDeleteHooks []BlueprintChassisHook

var blueprintChassisBeforeUpsertHooks []BlueprintChassisHook
var blueprintChassisAfterUpsertHooks []BlueprintChassisHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BlueprintChassis) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BlueprintChassis) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BlueprintChassis) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BlueprintChassis) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BlueprintChassis) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BlueprintChassis) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BlueprintChassis) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BlueprintChassis) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BlueprintChassis) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBlueprintChassisHook registers your hook function for all future operations.
func AddBlueprintChassisHook(hookPoint boil.HookPoint, blueprintChassisHook BlueprintChassisHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		blueprintChassisAfterSelectHooks = append(blueprintChassisAfterSelectHooks, blueprintChassisHook)
	case boil.BeforeInsertHook:
		blueprintChassisBeforeInsertHooks = append(blueprintChassisBeforeInsertHooks, blueprintChassisHook)
	case boil.AfterInsertHook:
		blueprintChassisAfterInsertHooks = append(blueprintChassisAfterInsertHooks, blueprintChassisHook)
	case boil.BeforeUpdateHook:
		blueprintChassisBeforeUpdateHooks = append(blueprintChassisBeforeUpdateHooks, blueprintChassisHook)
	case boil.AfterUpdateHook:
		blueprintChassisAfterUpdateHooks = append(blueprintChassisAfterUpdateHooks, blueprintChassisHook)
	case boil.BeforeDeleteHook:
		blueprintChassisBeforeDeleteHooks = append(blueprintChassisBeforeDeleteHooks, blueprintChassisHook)
	case boil.AfterDeleteHook:
		blueprintChassisAfterDeleteHooks = append(blueprintChassisAfterDeleteHooks, blueprintChassisHook)
	case boil.BeforeUpsertHook:
		blueprintChassisBeforeUpsertHooks = append(blueprintChassisBeforeUpsertHooks, blueprintChassisHook)
	case boil.AfterUpsertHook:
		blueprintChassisAfterUpsertHooks = append(blueprintChassisAfterUpsertHooks, blueprintChassisHook)
	}
}

// One returns a single blueprintChassis record from the query.
func (q blueprintChassisQuery) One(exec boil.Executor) (*BlueprintChassis, error) {
	o := &BlueprintChassis{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for blueprint_chassis")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BlueprintChassis records from the query.
func (q blueprintChassisQuery) All(exec boil.Executor) (BlueprintChassisSlice, error) {
	var o []*BlueprintChassis

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BlueprintChassis slice")
	}

	if len(blueprintChassisAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BlueprintChassis records in the query.
func (q blueprintChassisQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count blueprint_chassis rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q blueprintChassisQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if blueprint_chassis exists")
	}

	return count > 0, nil
}

// Brand pointed to by the foreign key.
func (o *BlueprintChassis) Brand(mods ...qm.QueryMod) brandQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BrandID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Brands(queryMods...)
	queries.SetFrom(query.Query, "\"brands\"")

	return query
}

// ChassisSkin pointed to by the foreign key.
func (o *BlueprintChassis) ChassisSkin(mods ...qm.QueryMod) blueprintMechSkinQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ChassisSkinID),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintMechSkins(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_mech_skin\"")

	return query
}

// Model pointed to by the foreign key.
func (o *BlueprintChassis) Model(mods ...qm.QueryMod) blueprintMechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ModelID),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintMechs(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_mechs\"")

	return query
}

// Template pointed to by the foreign key.
func (o *BlueprintChassis) Template(mods ...qm.QueryMod) templateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"blueprint_chassis_id\" = ?", o.ID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Templates(queryMods...)
	queries.SetFrom(query.Query, "\"templates\"")

	return query
}

// BlueprintChassisBlueprintModules retrieves all the blueprint_chassis_blueprint_module's BlueprintChassisBlueprintModules with an executor.
func (o *BlueprintChassis) BlueprintChassisBlueprintModules(mods ...qm.QueryMod) blueprintChassisBlueprintModuleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"blueprint_chassis_blueprint_modules\".\"blueprint_chassis_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"blueprint_chassis_blueprint_modules\".\"deleted_at\""),
	)

	query := BlueprintChassisBlueprintModules(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_chassis_blueprint_modules\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"blueprint_chassis_blueprint_modules\".*"})
	}

	return query
}

// BlueprintChassisBlueprintWeapons retrieves all the blueprint_chassis_blueprint_weapon's BlueprintChassisBlueprintWeapons with an executor.
func (o *BlueprintChassis) BlueprintChassisBlueprintWeapons(mods ...qm.QueryMod) blueprintChassisBlueprintWeaponQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"blueprint_chassis_blueprint_weapons\".\"blueprint_chassis_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"blueprint_chassis_blueprint_weapons\".\"deleted_at\""),
	)

	query := BlueprintChassisBlueprintWeapons(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_chassis_blueprint_weapons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"blueprint_chassis_blueprint_weapons\".*"})
	}

	return query
}

// LoadBrand allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blueprintChassisL) LoadBrand(e boil.Executor, singular bool, maybeBlueprintChassis interface{}, mods queries.Applicator) error {
	var slice []*BlueprintChassis
	var object *BlueprintChassis

	if singular {
		object = maybeBlueprintChassis.(*BlueprintChassis)
	} else {
		slice = *maybeBlueprintChassis.(*[]*BlueprintChassis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintChassisR{}
		}
		args = append(args, object.BrandID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintChassisR{}
			}

			for _, a := range args {
				if a == obj.BrandID {
					continue Outer
				}
			}

			args = append(args, obj.BrandID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`brands`),
		qm.WhereIn(`brands.id in ?`, args...),
		qmhelper.WhereIsNull(`brands.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Brand")
	}

	var resultSlice []*Brand
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Brand")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for brands")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for brands")
	}

	if len(blueprintChassisAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Brand = foreign
		if foreign.R == nil {
			foreign.R = &brandR{}
		}
		foreign.R.BlueprintChasses = append(foreign.R.BlueprintChasses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BrandID == foreign.ID {
				local.R.Brand = foreign
				if foreign.R == nil {
					foreign.R = &brandR{}
				}
				foreign.R.BlueprintChasses = append(foreign.R.BlueprintChasses, local)
				break
			}
		}
	}

	return nil
}

// LoadChassisSkin allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blueprintChassisL) LoadChassisSkin(e boil.Executor, singular bool, maybeBlueprintChassis interface{}, mods queries.Applicator) error {
	var slice []*BlueprintChassis
	var object *BlueprintChassis

	if singular {
		object = maybeBlueprintChassis.(*BlueprintChassis)
	} else {
		slice = *maybeBlueprintChassis.(*[]*BlueprintChassis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintChassisR{}
		}
		if !queries.IsNil(object.ChassisSkinID) {
			args = append(args, object.ChassisSkinID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintChassisR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ChassisSkinID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ChassisSkinID) {
				args = append(args, obj.ChassisSkinID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_mech_skin`),
		qm.WhereIn(`blueprint_mech_skin.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintMechSkin")
	}

	var resultSlice []*BlueprintMechSkin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintMechSkin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_mech_skin")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_mech_skin")
	}

	if len(blueprintChassisAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChassisSkin = foreign
		if foreign.R == nil {
			foreign.R = &blueprintMechSkinR{}
		}
		foreign.R.ChassisSkinBlueprintChasses = append(foreign.R.ChassisSkinBlueprintChasses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ChassisSkinID, foreign.ID) {
				local.R.ChassisSkin = foreign
				if foreign.R == nil {
					foreign.R = &blueprintMechSkinR{}
				}
				foreign.R.ChassisSkinBlueprintChasses = append(foreign.R.ChassisSkinBlueprintChasses, local)
				break
			}
		}
	}

	return nil
}

// LoadModel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blueprintChassisL) LoadModel(e boil.Executor, singular bool, maybeBlueprintChassis interface{}, mods queries.Applicator) error {
	var slice []*BlueprintChassis
	var object *BlueprintChassis

	if singular {
		object = maybeBlueprintChassis.(*BlueprintChassis)
	} else {
		slice = *maybeBlueprintChassis.(*[]*BlueprintChassis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintChassisR{}
		}
		args = append(args, object.ModelID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintChassisR{}
			}

			for _, a := range args {
				if a == obj.ModelID {
					continue Outer
				}
			}

			args = append(args, obj.ModelID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_mechs`),
		qm.WhereIn(`blueprint_mechs.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintMech")
	}

	var resultSlice []*BlueprintMech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintMech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_mechs")
	}

	if len(blueprintChassisAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Model = foreign
		if foreign.R == nil {
			foreign.R = &blueprintMechR{}
		}
		foreign.R.ModelBlueprintChasses = append(foreign.R.ModelBlueprintChasses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ModelID == foreign.ID {
				local.R.Model = foreign
				if foreign.R == nil {
					foreign.R = &blueprintMechR{}
				}
				foreign.R.ModelBlueprintChasses = append(foreign.R.ModelBlueprintChasses, local)
				break
			}
		}
	}

	return nil
}

// LoadTemplate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (blueprintChassisL) LoadTemplate(e boil.Executor, singular bool, maybeBlueprintChassis interface{}, mods queries.Applicator) error {
	var slice []*BlueprintChassis
	var object *BlueprintChassis

	if singular {
		object = maybeBlueprintChassis.(*BlueprintChassis)
	} else {
		slice = *maybeBlueprintChassis.(*[]*BlueprintChassis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintChassisR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintChassisR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`templates`),
		qm.WhereIn(`templates.blueprint_chassis_id in ?`, args...),
		qmhelper.WhereIsNull(`templates.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Template")
	}

	var resultSlice []*Template
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Template")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for templates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for templates")
	}

	if len(blueprintChassisAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Template = foreign
		if foreign.R == nil {
			foreign.R = &templateR{}
		}
		foreign.R.BlueprintChassis = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.BlueprintChassisID {
				local.R.Template = foreign
				if foreign.R == nil {
					foreign.R = &templateR{}
				}
				foreign.R.BlueprintChassis = local
				break
			}
		}
	}

	return nil
}

// LoadBlueprintChassisBlueprintModules allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blueprintChassisL) LoadBlueprintChassisBlueprintModules(e boil.Executor, singular bool, maybeBlueprintChassis interface{}, mods queries.Applicator) error {
	var slice []*BlueprintChassis
	var object *BlueprintChassis

	if singular {
		object = maybeBlueprintChassis.(*BlueprintChassis)
	} else {
		slice = *maybeBlueprintChassis.(*[]*BlueprintChassis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintChassisR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintChassisR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_chassis_blueprint_modules`),
		qm.WhereIn(`blueprint_chassis_blueprint_modules.blueprint_chassis_id in ?`, args...),
		qmhelper.WhereIsNull(`blueprint_chassis_blueprint_modules.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blueprint_chassis_blueprint_modules")
	}

	var resultSlice []*BlueprintChassisBlueprintModule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blueprint_chassis_blueprint_modules")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blueprint_chassis_blueprint_modules")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_chassis_blueprint_modules")
	}

	if len(blueprintChassisBlueprintModuleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlueprintChassisBlueprintModules = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blueprintChassisBlueprintModuleR{}
			}
			foreign.R.BlueprintChassis = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BlueprintChassisID {
				local.R.BlueprintChassisBlueprintModules = append(local.R.BlueprintChassisBlueprintModules, foreign)
				if foreign.R == nil {
					foreign.R = &blueprintChassisBlueprintModuleR{}
				}
				foreign.R.BlueprintChassis = local
				break
			}
		}
	}

	return nil
}

// LoadBlueprintChassisBlueprintWeapons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blueprintChassisL) LoadBlueprintChassisBlueprintWeapons(e boil.Executor, singular bool, maybeBlueprintChassis interface{}, mods queries.Applicator) error {
	var slice []*BlueprintChassis
	var object *BlueprintChassis

	if singular {
		object = maybeBlueprintChassis.(*BlueprintChassis)
	} else {
		slice = *maybeBlueprintChassis.(*[]*BlueprintChassis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintChassisR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintChassisR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_chassis_blueprint_weapons`),
		qm.WhereIn(`blueprint_chassis_blueprint_weapons.blueprint_chassis_id in ?`, args...),
		qmhelper.WhereIsNull(`blueprint_chassis_blueprint_weapons.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blueprint_chassis_blueprint_weapons")
	}

	var resultSlice []*BlueprintChassisBlueprintWeapon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blueprint_chassis_blueprint_weapons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blueprint_chassis_blueprint_weapons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_chassis_blueprint_weapons")
	}

	if len(blueprintChassisBlueprintWeaponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlueprintChassisBlueprintWeapons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blueprintChassisBlueprintWeaponR{}
			}
			foreign.R.BlueprintChassis = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BlueprintChassisID {
				local.R.BlueprintChassisBlueprintWeapons = append(local.R.BlueprintChassisBlueprintWeapons, foreign)
				if foreign.R == nil {
					foreign.R = &blueprintChassisBlueprintWeaponR{}
				}
				foreign.R.BlueprintChassis = local
				break
			}
		}
	}

	return nil
}

// SetBrand of the blueprintChassis to the related item.
// Sets o.R.Brand to related.
// Adds o to related.R.BlueprintChasses.
func (o *BlueprintChassis) SetBrand(exec boil.Executor, insert bool, related *Brand) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"blueprint_chassis\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"brand_id"}),
		strmangle.WhereClause("\"", "\"", 2, blueprintChassisPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BrandID = related.ID
	if o.R == nil {
		o.R = &blueprintChassisR{
			Brand: related,
		}
	} else {
		o.R.Brand = related
	}

	if related.R == nil {
		related.R = &brandR{
			BlueprintChasses: BlueprintChassisSlice{o},
		}
	} else {
		related.R.BlueprintChasses = append(related.R.BlueprintChasses, o)
	}

	return nil
}

// SetChassisSkin of the blueprintChassis to the related item.
// Sets o.R.ChassisSkin to related.
// Adds o to related.R.ChassisSkinBlueprintChasses.
func (o *BlueprintChassis) SetChassisSkin(exec boil.Executor, insert bool, related *BlueprintMechSkin) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"blueprint_chassis\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"chassis_skin_id"}),
		strmangle.WhereClause("\"", "\"", 2, blueprintChassisPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ChassisSkinID, related.ID)
	if o.R == nil {
		o.R = &blueprintChassisR{
			ChassisSkin: related,
		}
	} else {
		o.R.ChassisSkin = related
	}

	if related.R == nil {
		related.R = &blueprintMechSkinR{
			ChassisSkinBlueprintChasses: BlueprintChassisSlice{o},
		}
	} else {
		related.R.ChassisSkinBlueprintChasses = append(related.R.ChassisSkinBlueprintChasses, o)
	}

	return nil
}

// RemoveChassisSkin relationship.
// Sets o.R.ChassisSkin to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BlueprintChassis) RemoveChassisSkin(exec boil.Executor, related *BlueprintMechSkin) error {
	var err error

	queries.SetScanner(&o.ChassisSkinID, nil)
	if _, err = o.Update(exec, boil.Whitelist("chassis_skin_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ChassisSkin = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ChassisSkinBlueprintChasses {
		if queries.Equal(o.ChassisSkinID, ri.ChassisSkinID) {
			continue
		}

		ln := len(related.R.ChassisSkinBlueprintChasses)
		if ln > 1 && i < ln-1 {
			related.R.ChassisSkinBlueprintChasses[i] = related.R.ChassisSkinBlueprintChasses[ln-1]
		}
		related.R.ChassisSkinBlueprintChasses = related.R.ChassisSkinBlueprintChasses[:ln-1]
		break
	}
	return nil
}

// SetModel of the blueprintChassis to the related item.
// Sets o.R.Model to related.
// Adds o to related.R.ModelBlueprintChasses.
func (o *BlueprintChassis) SetModel(exec boil.Executor, insert bool, related *BlueprintMech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"blueprint_chassis\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"model_id"}),
		strmangle.WhereClause("\"", "\"", 2, blueprintChassisPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ModelID = related.ID
	if o.R == nil {
		o.R = &blueprintChassisR{
			Model: related,
		}
	} else {
		o.R.Model = related
	}

	if related.R == nil {
		related.R = &blueprintMechR{
			ModelBlueprintChasses: BlueprintChassisSlice{o},
		}
	} else {
		related.R.ModelBlueprintChasses = append(related.R.ModelBlueprintChasses, o)
	}

	return nil
}

// SetTemplate of the blueprintChassis to the related item.
// Sets o.R.Template to related.
// Adds o to related.R.BlueprintChassis.
func (o *BlueprintChassis) SetTemplate(exec boil.Executor, insert bool, related *Template) error {
	var err error

	if insert {
		related.BlueprintChassisID = o.ID

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"templates\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_chassis_id"}),
			strmangle.WhereClause("\"", "\"", 2, templatePrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.BlueprintChassisID = o.ID

	}

	if o.R == nil {
		o.R = &blueprintChassisR{
			Template: related,
		}
	} else {
		o.R.Template = related
	}

	if related.R == nil {
		related.R = &templateR{
			BlueprintChassis: o,
		}
	} else {
		related.R.BlueprintChassis = o
	}
	return nil
}

// AddBlueprintChassisBlueprintModules adds the given related objects to the existing relationships
// of the blueprint_chassis, optionally inserting them as new records.
// Appends related to o.R.BlueprintChassisBlueprintModules.
// Sets related.R.BlueprintChassis appropriately.
func (o *BlueprintChassis) AddBlueprintChassisBlueprintModules(exec boil.Executor, insert bool, related ...*BlueprintChassisBlueprintModule) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BlueprintChassisID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"blueprint_chassis_blueprint_modules\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_chassis_id"}),
				strmangle.WhereClause("\"", "\"", 2, blueprintChassisBlueprintModulePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BlueprintChassisID = o.ID
		}
	}

	if o.R == nil {
		o.R = &blueprintChassisR{
			BlueprintChassisBlueprintModules: related,
		}
	} else {
		o.R.BlueprintChassisBlueprintModules = append(o.R.BlueprintChassisBlueprintModules, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blueprintChassisBlueprintModuleR{
				BlueprintChassis: o,
			}
		} else {
			rel.R.BlueprintChassis = o
		}
	}
	return nil
}

// AddBlueprintChassisBlueprintWeapons adds the given related objects to the existing relationships
// of the blueprint_chassis, optionally inserting them as new records.
// Appends related to o.R.BlueprintChassisBlueprintWeapons.
// Sets related.R.BlueprintChassis appropriately.
func (o *BlueprintChassis) AddBlueprintChassisBlueprintWeapons(exec boil.Executor, insert bool, related ...*BlueprintChassisBlueprintWeapon) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BlueprintChassisID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"blueprint_chassis_blueprint_weapons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_chassis_id"}),
				strmangle.WhereClause("\"", "\"", 2, blueprintChassisBlueprintWeaponPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BlueprintChassisID = o.ID
		}
	}

	if o.R == nil {
		o.R = &blueprintChassisR{
			BlueprintChassisBlueprintWeapons: related,
		}
	} else {
		o.R.BlueprintChassisBlueprintWeapons = append(o.R.BlueprintChassisBlueprintWeapons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blueprintChassisBlueprintWeaponR{
				BlueprintChassis: o,
			}
		} else {
			rel.R.BlueprintChassis = o
		}
	}
	return nil
}

// BlueprintChasses retrieves all the records using an executor.
func BlueprintChasses(mods ...qm.QueryMod) blueprintChassisQuery {
	mods = append(mods, qm.From("\"blueprint_chassis\""), qmhelper.WhereIsNull("\"blueprint_chassis\".\"deleted_at\""))
	return blueprintChassisQuery{NewQuery(mods...)}
}

// FindBlueprintChassis retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlueprintChassis(exec boil.Executor, iD string, selectCols ...string) (*BlueprintChassis, error) {
	blueprintChassisObj := &BlueprintChassis{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"blueprint_chassis\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, blueprintChassisObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from blueprint_chassis")
	}

	if err = blueprintChassisObj.doAfterSelectHooks(exec); err != nil {
		return blueprintChassisObj, err
	}

	return blueprintChassisObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlueprintChassis) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_chassis provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintChassisColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blueprintChassisInsertCacheMut.RLock()
	cache, cached := blueprintChassisInsertCache[key]
	blueprintChassisInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blueprintChassisAllColumns,
			blueprintChassisColumnsWithDefault,
			blueprintChassisColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blueprintChassisType, blueprintChassisMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blueprintChassisType, blueprintChassisMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"blueprint_chassis\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"blueprint_chassis\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into blueprint_chassis")
	}

	if !cached {
		blueprintChassisInsertCacheMut.Lock()
		blueprintChassisInsertCache[key] = cache
		blueprintChassisInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BlueprintChassis.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlueprintChassis) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	blueprintChassisUpdateCacheMut.RLock()
	cache, cached := blueprintChassisUpdateCache[key]
	blueprintChassisUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blueprintChassisAllColumns,
			blueprintChassisPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update blueprint_chassis, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"blueprint_chassis\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, blueprintChassisPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blueprintChassisType, blueprintChassisMapping, append(wl, blueprintChassisPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update blueprint_chassis row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for blueprint_chassis")
	}

	if !cached {
		blueprintChassisUpdateCacheMut.Lock()
		blueprintChassisUpdateCache[key] = cache
		blueprintChassisUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q blueprintChassisQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for blueprint_chassis")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for blueprint_chassis")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlueprintChassisSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintChassisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"blueprint_chassis\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, blueprintChassisPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in blueprintChassis slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all blueprintChassis")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlueprintChassis) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_chassis provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintChassisColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blueprintChassisUpsertCacheMut.RLock()
	cache, cached := blueprintChassisUpsertCache[key]
	blueprintChassisUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blueprintChassisAllColumns,
			blueprintChassisColumnsWithDefault,
			blueprintChassisColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			blueprintChassisAllColumns,
			blueprintChassisPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert blueprint_chassis, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(blueprintChassisPrimaryKeyColumns))
			copy(conflict, blueprintChassisPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"blueprint_chassis\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(blueprintChassisType, blueprintChassisMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blueprintChassisType, blueprintChassisMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert blueprint_chassis")
	}

	if !cached {
		blueprintChassisUpsertCacheMut.Lock()
		blueprintChassisUpsertCache[key] = cache
		blueprintChassisUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BlueprintChassis record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlueprintChassis) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BlueprintChassis provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blueprintChassisPrimaryKeyMapping)
		sql = "DELETE FROM \"blueprint_chassis\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"blueprint_chassis\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(blueprintChassisType, blueprintChassisMapping, append(wl, blueprintChassisPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from blueprint_chassis")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for blueprint_chassis")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q blueprintChassisQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no blueprintChassisQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprint_chassis")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_chassis")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlueprintChassisSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(blueprintChassisBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintChassisPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"blueprint_chassis\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintChassisPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintChassisPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"blueprint_chassis\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, blueprintChassisPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprintChassis slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_chassis")
	}

	if len(blueprintChassisAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlueprintChassis) Reload(exec boil.Executor) error {
	ret, err := FindBlueprintChassis(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlueprintChassisSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlueprintChassisSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintChassisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"blueprint_chassis\".* FROM \"blueprint_chassis\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintChassisPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BlueprintChassisSlice")
	}

	*o = slice

	return nil
}

// BlueprintChassisExists checks if the BlueprintChassis row exists.
func BlueprintChassisExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"blueprint_chassis\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if blueprint_chassis exists")
	}

	return exists, nil
}
