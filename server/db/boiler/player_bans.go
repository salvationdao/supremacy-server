// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PlayerBan is an object representing the database table.
type PlayerBan struct {
	ID                  string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BanFrom             string      `boiler:"ban_from" boil:"ban_from" json:"ban_from" toml:"ban_from" yaml:"ban_from"`
	BattleNumber        null.Int    `boiler:"battle_number" boil:"battle_number" json:"battle_number,omitempty" toml:"battle_number" yaml:"battle_number,omitempty"`
	BannedPlayerID      string      `boiler:"banned_player_id" boil:"banned_player_id" json:"banned_player_id" toml:"banned_player_id" yaml:"banned_player_id"`
	BannedByID          string      `boiler:"banned_by_id" boil:"banned_by_id" json:"banned_by_id" toml:"banned_by_id" yaml:"banned_by_id"`
	Reason              string      `boiler:"reason" boil:"reason" json:"reason" toml:"reason" yaml:"reason"`
	BannedAt            time.Time   `boiler:"banned_at" boil:"banned_at" json:"banned_at" toml:"banned_at" yaml:"banned_at"`
	EndAt               time.Time   `boiler:"end_at" boil:"end_at" json:"end_at" toml:"end_at" yaml:"end_at"`
	RelatedPunishVoteID null.String `boiler:"related_punish_vote_id" boil:"related_punish_vote_id" json:"related_punish_vote_id,omitempty" toml:"related_punish_vote_id" yaml:"related_punish_vote_id,omitempty"`
	ManuallyUnbanByID   null.String `boiler:"manually_unban_by_id" boil:"manually_unban_by_id" json:"manually_unban_by_id,omitempty" toml:"manually_unban_by_id" yaml:"manually_unban_by_id,omitempty"`
	ManuallyUnbanReason null.String `boiler:"manually_unban_reason" boil:"manually_unban_reason" json:"manually_unban_reason,omitempty" toml:"manually_unban_reason" yaml:"manually_unban_reason,omitempty"`
	ManuallyUnbanAt     null.Time   `boiler:"manually_unban_at" boil:"manually_unban_at" json:"manually_unban_at,omitempty" toml:"manually_unban_at" yaml:"manually_unban_at,omitempty"`
	BanSupsContribute   bool        `boiler:"ban_sups_contribute" boil:"ban_sups_contribute" json:"ban_sups_contribute" toml:"ban_sups_contribute" yaml:"ban_sups_contribute"`
	BanLocationSelect   bool        `boiler:"ban_location_select" boil:"ban_location_select" json:"ban_location_select" toml:"ban_location_select" yaml:"ban_location_select"`
	BanSendChat         bool        `boiler:"ban_send_chat" boil:"ban_send_chat" json:"ban_send_chat" toml:"ban_send_chat" yaml:"ban_send_chat"`
	BanViewChat         bool        `boiler:"ban_view_chat" boil:"ban_view_chat" json:"ban_view_chat" toml:"ban_view_chat" yaml:"ban_view_chat"`
	CreatedAt           time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt           time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt           null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *playerBanR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L playerBanL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlayerBanColumns = struct {
	ID                  string
	BanFrom             string
	BattleNumber        string
	BannedPlayerID      string
	BannedByID          string
	Reason              string
	BannedAt            string
	EndAt               string
	RelatedPunishVoteID string
	ManuallyUnbanByID   string
	ManuallyUnbanReason string
	ManuallyUnbanAt     string
	BanSupsContribute   string
	BanLocationSelect   string
	BanSendChat         string
	BanViewChat         string
	CreatedAt           string
	UpdatedAt           string
	DeletedAt           string
}{
	ID:                  "id",
	BanFrom:             "ban_from",
	BattleNumber:        "battle_number",
	BannedPlayerID:      "banned_player_id",
	BannedByID:          "banned_by_id",
	Reason:              "reason",
	BannedAt:            "banned_at",
	EndAt:               "end_at",
	RelatedPunishVoteID: "related_punish_vote_id",
	ManuallyUnbanByID:   "manually_unban_by_id",
	ManuallyUnbanReason: "manually_unban_reason",
	ManuallyUnbanAt:     "manually_unban_at",
	BanSupsContribute:   "ban_sups_contribute",
	BanLocationSelect:   "ban_location_select",
	BanSendChat:         "ban_send_chat",
	BanViewChat:         "ban_view_chat",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
	DeletedAt:           "deleted_at",
}

var PlayerBanTableColumns = struct {
	ID                  string
	BanFrom             string
	BattleNumber        string
	BannedPlayerID      string
	BannedByID          string
	Reason              string
	BannedAt            string
	EndAt               string
	RelatedPunishVoteID string
	ManuallyUnbanByID   string
	ManuallyUnbanReason string
	ManuallyUnbanAt     string
	BanSupsContribute   string
	BanLocationSelect   string
	BanSendChat         string
	BanViewChat         string
	CreatedAt           string
	UpdatedAt           string
	DeletedAt           string
}{
	ID:                  "player_bans.id",
	BanFrom:             "player_bans.ban_from",
	BattleNumber:        "player_bans.battle_number",
	BannedPlayerID:      "player_bans.banned_player_id",
	BannedByID:          "player_bans.banned_by_id",
	Reason:              "player_bans.reason",
	BannedAt:            "player_bans.banned_at",
	EndAt:               "player_bans.end_at",
	RelatedPunishVoteID: "player_bans.related_punish_vote_id",
	ManuallyUnbanByID:   "player_bans.manually_unban_by_id",
	ManuallyUnbanReason: "player_bans.manually_unban_reason",
	ManuallyUnbanAt:     "player_bans.manually_unban_at",
	BanSupsContribute:   "player_bans.ban_sups_contribute",
	BanLocationSelect:   "player_bans.ban_location_select",
	BanSendChat:         "player_bans.ban_send_chat",
	BanViewChat:         "player_bans.ban_view_chat",
	CreatedAt:           "player_bans.created_at",
	UpdatedAt:           "player_bans.updated_at",
	DeletedAt:           "player_bans.deleted_at",
}

// Generated where

var PlayerBanWhere = struct {
	ID                  whereHelperstring
	BanFrom             whereHelperstring
	BattleNumber        whereHelpernull_Int
	BannedPlayerID      whereHelperstring
	BannedByID          whereHelperstring
	Reason              whereHelperstring
	BannedAt            whereHelpertime_Time
	EndAt               whereHelpertime_Time
	RelatedPunishVoteID whereHelpernull_String
	ManuallyUnbanByID   whereHelpernull_String
	ManuallyUnbanReason whereHelpernull_String
	ManuallyUnbanAt     whereHelpernull_Time
	BanSupsContribute   whereHelperbool
	BanLocationSelect   whereHelperbool
	BanSendChat         whereHelperbool
	BanViewChat         whereHelperbool
	CreatedAt           whereHelpertime_Time
	UpdatedAt           whereHelpertime_Time
	DeletedAt           whereHelpernull_Time
}{
	ID:                  whereHelperstring{field: "\"player_bans\".\"id\""},
	BanFrom:             whereHelperstring{field: "\"player_bans\".\"ban_from\""},
	BattleNumber:        whereHelpernull_Int{field: "\"player_bans\".\"battle_number\""},
	BannedPlayerID:      whereHelperstring{field: "\"player_bans\".\"banned_player_id\""},
	BannedByID:          whereHelperstring{field: "\"player_bans\".\"banned_by_id\""},
	Reason:              whereHelperstring{field: "\"player_bans\".\"reason\""},
	BannedAt:            whereHelpertime_Time{field: "\"player_bans\".\"banned_at\""},
	EndAt:               whereHelpertime_Time{field: "\"player_bans\".\"end_at\""},
	RelatedPunishVoteID: whereHelpernull_String{field: "\"player_bans\".\"related_punish_vote_id\""},
	ManuallyUnbanByID:   whereHelpernull_String{field: "\"player_bans\".\"manually_unban_by_id\""},
	ManuallyUnbanReason: whereHelpernull_String{field: "\"player_bans\".\"manually_unban_reason\""},
	ManuallyUnbanAt:     whereHelpernull_Time{field: "\"player_bans\".\"manually_unban_at\""},
	BanSupsContribute:   whereHelperbool{field: "\"player_bans\".\"ban_sups_contribute\""},
	BanLocationSelect:   whereHelperbool{field: "\"player_bans\".\"ban_location_select\""},
	BanSendChat:         whereHelperbool{field: "\"player_bans\".\"ban_send_chat\""},
	BanViewChat:         whereHelperbool{field: "\"player_bans\".\"ban_view_chat\""},
	CreatedAt:           whereHelpertime_Time{field: "\"player_bans\".\"created_at\""},
	UpdatedAt:           whereHelpertime_Time{field: "\"player_bans\".\"updated_at\""},
	DeletedAt:           whereHelpernull_Time{field: "\"player_bans\".\"deleted_at\""},
}

// PlayerBanRels is where relationship names are stored.
var PlayerBanRels = struct {
	BannedBy                     string
	BannedPlayer                 string
	RelatedPunishVote            string
	RelatedPlayBanPlayerKillLogs string
}{
	BannedBy:                     "BannedBy",
	BannedPlayer:                 "BannedPlayer",
	RelatedPunishVote:            "RelatedPunishVote",
	RelatedPlayBanPlayerKillLogs: "RelatedPlayBanPlayerKillLogs",
}

// playerBanR is where relationships are stored.
type playerBanR struct {
	BannedBy                     *Player            `boiler:"BannedBy" boil:"BannedBy" json:"BannedBy" toml:"BannedBy" yaml:"BannedBy"`
	BannedPlayer                 *Player            `boiler:"BannedPlayer" boil:"BannedPlayer" json:"BannedPlayer" toml:"BannedPlayer" yaml:"BannedPlayer"`
	RelatedPunishVote            *PunishVote        `boiler:"RelatedPunishVote" boil:"RelatedPunishVote" json:"RelatedPunishVote" toml:"RelatedPunishVote" yaml:"RelatedPunishVote"`
	RelatedPlayBanPlayerKillLogs PlayerKillLogSlice `boiler:"RelatedPlayBanPlayerKillLogs" boil:"RelatedPlayBanPlayerKillLogs" json:"RelatedPlayBanPlayerKillLogs" toml:"RelatedPlayBanPlayerKillLogs" yaml:"RelatedPlayBanPlayerKillLogs"`
}

// NewStruct creates a new relationship struct
func (*playerBanR) NewStruct() *playerBanR {
	return &playerBanR{}
}

// playerBanL is where Load methods for each relationship are stored.
type playerBanL struct{}

var (
	playerBanAllColumns            = []string{"id", "ban_from", "battle_number", "banned_player_id", "banned_by_id", "reason", "banned_at", "end_at", "related_punish_vote_id", "manually_unban_by_id", "manually_unban_reason", "manually_unban_at", "ban_sups_contribute", "ban_location_select", "ban_send_chat", "ban_view_chat", "created_at", "updated_at", "deleted_at"}
	playerBanColumnsWithoutDefault = []string{"ban_from", "banned_player_id", "banned_by_id", "reason", "end_at"}
	playerBanColumnsWithDefault    = []string{"id", "battle_number", "banned_at", "related_punish_vote_id", "manually_unban_by_id", "manually_unban_reason", "manually_unban_at", "ban_sups_contribute", "ban_location_select", "ban_send_chat", "ban_view_chat", "created_at", "updated_at", "deleted_at"}
	playerBanPrimaryKeyColumns     = []string{"id"}
	playerBanGeneratedColumns      = []string{}
)

type (
	// PlayerBanSlice is an alias for a slice of pointers to PlayerBan.
	// This should almost always be used instead of []PlayerBan.
	PlayerBanSlice []*PlayerBan
	// PlayerBanHook is the signature for custom PlayerBan hook methods
	PlayerBanHook func(boil.Executor, *PlayerBan) error

	playerBanQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playerBanType                 = reflect.TypeOf(&PlayerBan{})
	playerBanMapping              = queries.MakeStructMapping(playerBanType)
	playerBanPrimaryKeyMapping, _ = queries.BindMapping(playerBanType, playerBanMapping, playerBanPrimaryKeyColumns)
	playerBanInsertCacheMut       sync.RWMutex
	playerBanInsertCache          = make(map[string]insertCache)
	playerBanUpdateCacheMut       sync.RWMutex
	playerBanUpdateCache          = make(map[string]updateCache)
	playerBanUpsertCacheMut       sync.RWMutex
	playerBanUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var playerBanAfterSelectHooks []PlayerBanHook

var playerBanBeforeInsertHooks []PlayerBanHook
var playerBanAfterInsertHooks []PlayerBanHook

var playerBanBeforeUpdateHooks []PlayerBanHook
var playerBanAfterUpdateHooks []PlayerBanHook

var playerBanBeforeDeleteHooks []PlayerBanHook
var playerBanAfterDeleteHooks []PlayerBanHook

var playerBanBeforeUpsertHooks []PlayerBanHook
var playerBanAfterUpsertHooks []PlayerBanHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PlayerBan) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range playerBanAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PlayerBan) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerBanBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PlayerBan) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerBanAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PlayerBan) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range playerBanBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PlayerBan) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range playerBanAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PlayerBan) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range playerBanBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PlayerBan) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range playerBanAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PlayerBan) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerBanBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PlayerBan) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerBanAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlayerBanHook registers your hook function for all future operations.
func AddPlayerBanHook(hookPoint boil.HookPoint, playerBanHook PlayerBanHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		playerBanAfterSelectHooks = append(playerBanAfterSelectHooks, playerBanHook)
	case boil.BeforeInsertHook:
		playerBanBeforeInsertHooks = append(playerBanBeforeInsertHooks, playerBanHook)
	case boil.AfterInsertHook:
		playerBanAfterInsertHooks = append(playerBanAfterInsertHooks, playerBanHook)
	case boil.BeforeUpdateHook:
		playerBanBeforeUpdateHooks = append(playerBanBeforeUpdateHooks, playerBanHook)
	case boil.AfterUpdateHook:
		playerBanAfterUpdateHooks = append(playerBanAfterUpdateHooks, playerBanHook)
	case boil.BeforeDeleteHook:
		playerBanBeforeDeleteHooks = append(playerBanBeforeDeleteHooks, playerBanHook)
	case boil.AfterDeleteHook:
		playerBanAfterDeleteHooks = append(playerBanAfterDeleteHooks, playerBanHook)
	case boil.BeforeUpsertHook:
		playerBanBeforeUpsertHooks = append(playerBanBeforeUpsertHooks, playerBanHook)
	case boil.AfterUpsertHook:
		playerBanAfterUpsertHooks = append(playerBanAfterUpsertHooks, playerBanHook)
	}
}

// One returns a single playerBan record from the query.
func (q playerBanQuery) One(exec boil.Executor) (*PlayerBan, error) {
	o := &PlayerBan{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for player_bans")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PlayerBan records from the query.
func (q playerBanQuery) All(exec boil.Executor) (PlayerBanSlice, error) {
	var o []*PlayerBan

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to PlayerBan slice")
	}

	if len(playerBanAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PlayerBan records in the query.
func (q playerBanQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count player_bans rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q playerBanQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if player_bans exists")
	}

	return count > 0, nil
}

// BannedBy pointed to by the foreign key.
func (o *PlayerBan) BannedBy(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BannedByID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// BannedPlayer pointed to by the foreign key.
func (o *PlayerBan) BannedPlayer(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BannedPlayerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// RelatedPunishVote pointed to by the foreign key.
func (o *PlayerBan) RelatedPunishVote(mods ...qm.QueryMod) punishVoteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RelatedPunishVoteID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := PunishVotes(queryMods...)
	queries.SetFrom(query.Query, "\"punish_votes\"")

	return query
}

// RelatedPlayBanPlayerKillLogs retrieves all the player_kill_log's PlayerKillLogs with an executor via related_play_ban_id column.
func (o *PlayerBan) RelatedPlayBanPlayerKillLogs(mods ...qm.QueryMod) playerKillLogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"player_kill_log\".\"related_play_ban_id\"=?", o.ID),
	)

	query := PlayerKillLogs(queryMods...)
	queries.SetFrom(query.Query, "\"player_kill_log\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"player_kill_log\".*"})
	}

	return query
}

// LoadBannedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerBanL) LoadBannedBy(e boil.Executor, singular bool, maybePlayerBan interface{}, mods queries.Applicator) error {
	var slice []*PlayerBan
	var object *PlayerBan

	if singular {
		object = maybePlayerBan.(*PlayerBan)
	} else {
		slice = *maybePlayerBan.(*[]*PlayerBan)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerBanR{}
		}
		args = append(args, object.BannedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerBanR{}
			}

			for _, a := range args {
				if a == obj.BannedByID {
					continue Outer
				}
			}

			args = append(args, obj.BannedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(playerBanAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BannedBy = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.BannedByPlayerBans = append(foreign.R.BannedByPlayerBans, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BannedByID == foreign.ID {
				local.R.BannedBy = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.BannedByPlayerBans = append(foreign.R.BannedByPlayerBans, local)
				break
			}
		}
	}

	return nil
}

// LoadBannedPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerBanL) LoadBannedPlayer(e boil.Executor, singular bool, maybePlayerBan interface{}, mods queries.Applicator) error {
	var slice []*PlayerBan
	var object *PlayerBan

	if singular {
		object = maybePlayerBan.(*PlayerBan)
	} else {
		slice = *maybePlayerBan.(*[]*PlayerBan)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerBanR{}
		}
		args = append(args, object.BannedPlayerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerBanR{}
			}

			for _, a := range args {
				if a == obj.BannedPlayerID {
					continue Outer
				}
			}

			args = append(args, obj.BannedPlayerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(playerBanAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BannedPlayer = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.BannedPlayerPlayerBans = append(foreign.R.BannedPlayerPlayerBans, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BannedPlayerID == foreign.ID {
				local.R.BannedPlayer = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.BannedPlayerPlayerBans = append(foreign.R.BannedPlayerPlayerBans, local)
				break
			}
		}
	}

	return nil
}

// LoadRelatedPunishVote allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerBanL) LoadRelatedPunishVote(e boil.Executor, singular bool, maybePlayerBan interface{}, mods queries.Applicator) error {
	var slice []*PlayerBan
	var object *PlayerBan

	if singular {
		object = maybePlayerBan.(*PlayerBan)
	} else {
		slice = *maybePlayerBan.(*[]*PlayerBan)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerBanR{}
		}
		if !queries.IsNil(object.RelatedPunishVoteID) {
			args = append(args, object.RelatedPunishVoteID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerBanR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RelatedPunishVoteID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RelatedPunishVoteID) {
				args = append(args, obj.RelatedPunishVoteID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`punish_votes`),
		qm.WhereIn(`punish_votes.id in ?`, args...),
		qmhelper.WhereIsNull(`punish_votes.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PunishVote")
	}

	var resultSlice []*PunishVote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PunishVote")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for punish_votes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for punish_votes")
	}

	if len(playerBanAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RelatedPunishVote = foreign
		if foreign.R == nil {
			foreign.R = &punishVoteR{}
		}
		foreign.R.RelatedPunishVotePlayerBans = append(foreign.R.RelatedPunishVotePlayerBans, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RelatedPunishVoteID, foreign.ID) {
				local.R.RelatedPunishVote = foreign
				if foreign.R == nil {
					foreign.R = &punishVoteR{}
				}
				foreign.R.RelatedPunishVotePlayerBans = append(foreign.R.RelatedPunishVotePlayerBans, local)
				break
			}
		}
	}

	return nil
}

// LoadRelatedPlayBanPlayerKillLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (playerBanL) LoadRelatedPlayBanPlayerKillLogs(e boil.Executor, singular bool, maybePlayerBan interface{}, mods queries.Applicator) error {
	var slice []*PlayerBan
	var object *PlayerBan

	if singular {
		object = maybePlayerBan.(*PlayerBan)
	} else {
		slice = *maybePlayerBan.(*[]*PlayerBan)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerBanR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerBanR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`player_kill_log`),
		qm.WhereIn(`player_kill_log.related_play_ban_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load player_kill_log")
	}

	var resultSlice []*PlayerKillLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice player_kill_log")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on player_kill_log")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for player_kill_log")
	}

	if len(playerKillLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RelatedPlayBanPlayerKillLogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playerKillLogR{}
			}
			foreign.R.RelatedPlayBan = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RelatedPlayBanID) {
				local.R.RelatedPlayBanPlayerKillLogs = append(local.R.RelatedPlayBanPlayerKillLogs, foreign)
				if foreign.R == nil {
					foreign.R = &playerKillLogR{}
				}
				foreign.R.RelatedPlayBan = local
				break
			}
		}
	}

	return nil
}

// SetBannedBy of the playerBan to the related item.
// Sets o.R.BannedBy to related.
// Adds o to related.R.BannedByPlayerBans.
func (o *PlayerBan) SetBannedBy(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"player_bans\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"banned_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerBanPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BannedByID = related.ID
	if o.R == nil {
		o.R = &playerBanR{
			BannedBy: related,
		}
	} else {
		o.R.BannedBy = related
	}

	if related.R == nil {
		related.R = &playerR{
			BannedByPlayerBans: PlayerBanSlice{o},
		}
	} else {
		related.R.BannedByPlayerBans = append(related.R.BannedByPlayerBans, o)
	}

	return nil
}

// SetBannedPlayer of the playerBan to the related item.
// Sets o.R.BannedPlayer to related.
// Adds o to related.R.BannedPlayerPlayerBans.
func (o *PlayerBan) SetBannedPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"player_bans\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"banned_player_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerBanPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BannedPlayerID = related.ID
	if o.R == nil {
		o.R = &playerBanR{
			BannedPlayer: related,
		}
	} else {
		o.R.BannedPlayer = related
	}

	if related.R == nil {
		related.R = &playerR{
			BannedPlayerPlayerBans: PlayerBanSlice{o},
		}
	} else {
		related.R.BannedPlayerPlayerBans = append(related.R.BannedPlayerPlayerBans, o)
	}

	return nil
}

// SetRelatedPunishVote of the playerBan to the related item.
// Sets o.R.RelatedPunishVote to related.
// Adds o to related.R.RelatedPunishVotePlayerBans.
func (o *PlayerBan) SetRelatedPunishVote(exec boil.Executor, insert bool, related *PunishVote) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"player_bans\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"related_punish_vote_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerBanPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RelatedPunishVoteID, related.ID)
	if o.R == nil {
		o.R = &playerBanR{
			RelatedPunishVote: related,
		}
	} else {
		o.R.RelatedPunishVote = related
	}

	if related.R == nil {
		related.R = &punishVoteR{
			RelatedPunishVotePlayerBans: PlayerBanSlice{o},
		}
	} else {
		related.R.RelatedPunishVotePlayerBans = append(related.R.RelatedPunishVotePlayerBans, o)
	}

	return nil
}

// RemoveRelatedPunishVote relationship.
// Sets o.R.RelatedPunishVote to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *PlayerBan) RemoveRelatedPunishVote(exec boil.Executor, related *PunishVote) error {
	var err error

	queries.SetScanner(&o.RelatedPunishVoteID, nil)
	if _, err = o.Update(exec, boil.Whitelist("related_punish_vote_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.RelatedPunishVote = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RelatedPunishVotePlayerBans {
		if queries.Equal(o.RelatedPunishVoteID, ri.RelatedPunishVoteID) {
			continue
		}

		ln := len(related.R.RelatedPunishVotePlayerBans)
		if ln > 1 && i < ln-1 {
			related.R.RelatedPunishVotePlayerBans[i] = related.R.RelatedPunishVotePlayerBans[ln-1]
		}
		related.R.RelatedPunishVotePlayerBans = related.R.RelatedPunishVotePlayerBans[:ln-1]
		break
	}
	return nil
}

// AddRelatedPlayBanPlayerKillLogs adds the given related objects to the existing relationships
// of the player_ban, optionally inserting them as new records.
// Appends related to o.R.RelatedPlayBanPlayerKillLogs.
// Sets related.R.RelatedPlayBan appropriately.
func (o *PlayerBan) AddRelatedPlayBanPlayerKillLogs(exec boil.Executor, insert bool, related ...*PlayerKillLog) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RelatedPlayBanID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"player_kill_log\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"related_play_ban_id"}),
				strmangle.WhereClause("\"", "\"", 2, playerKillLogPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RelatedPlayBanID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &playerBanR{
			RelatedPlayBanPlayerKillLogs: related,
		}
	} else {
		o.R.RelatedPlayBanPlayerKillLogs = append(o.R.RelatedPlayBanPlayerKillLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playerKillLogR{
				RelatedPlayBan: o,
			}
		} else {
			rel.R.RelatedPlayBan = o
		}
	}
	return nil
}

// SetRelatedPlayBanPlayerKillLogs removes all previously related items of the
// player_ban replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RelatedPlayBan's RelatedPlayBanPlayerKillLogs accordingly.
// Replaces o.R.RelatedPlayBanPlayerKillLogs with related.
// Sets related.R.RelatedPlayBan's RelatedPlayBanPlayerKillLogs accordingly.
func (o *PlayerBan) SetRelatedPlayBanPlayerKillLogs(exec boil.Executor, insert bool, related ...*PlayerKillLog) error {
	query := "update \"player_kill_log\" set \"related_play_ban_id\" = null where \"related_play_ban_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RelatedPlayBanPlayerKillLogs {
			queries.SetScanner(&rel.RelatedPlayBanID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.RelatedPlayBan = nil
		}

		o.R.RelatedPlayBanPlayerKillLogs = nil
	}
	return o.AddRelatedPlayBanPlayerKillLogs(exec, insert, related...)
}

// RemoveRelatedPlayBanPlayerKillLogs relationships from objects passed in.
// Removes related items from R.RelatedPlayBanPlayerKillLogs (uses pointer comparison, removal does not keep order)
// Sets related.R.RelatedPlayBan.
func (o *PlayerBan) RemoveRelatedPlayBanPlayerKillLogs(exec boil.Executor, related ...*PlayerKillLog) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RelatedPlayBanID, nil)
		if rel.R != nil {
			rel.R.RelatedPlayBan = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("related_play_ban_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RelatedPlayBanPlayerKillLogs {
			if rel != ri {
				continue
			}

			ln := len(o.R.RelatedPlayBanPlayerKillLogs)
			if ln > 1 && i < ln-1 {
				o.R.RelatedPlayBanPlayerKillLogs[i] = o.R.RelatedPlayBanPlayerKillLogs[ln-1]
			}
			o.R.RelatedPlayBanPlayerKillLogs = o.R.RelatedPlayBanPlayerKillLogs[:ln-1]
			break
		}
	}

	return nil
}

// PlayerBans retrieves all the records using an executor.
func PlayerBans(mods ...qm.QueryMod) playerBanQuery {
	mods = append(mods, qm.From("\"player_bans\""), qmhelper.WhereIsNull("\"player_bans\".\"deleted_at\""))
	return playerBanQuery{NewQuery(mods...)}
}

// FindPlayerBan retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlayerBan(exec boil.Executor, iD string, selectCols ...string) (*PlayerBan, error) {
	playerBanObj := &PlayerBan{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"player_bans\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, playerBanObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from player_bans")
	}

	if err = playerBanObj.doAfterSelectHooks(exec); err != nil {
		return playerBanObj, err
	}

	return playerBanObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PlayerBan) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no player_bans provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerBanColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	playerBanInsertCacheMut.RLock()
	cache, cached := playerBanInsertCache[key]
	playerBanInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			playerBanAllColumns,
			playerBanColumnsWithDefault,
			playerBanColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(playerBanType, playerBanMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(playerBanType, playerBanMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"player_bans\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"player_bans\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into player_bans")
	}

	if !cached {
		playerBanInsertCacheMut.Lock()
		playerBanInsertCache[key] = cache
		playerBanInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the PlayerBan.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PlayerBan) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	playerBanUpdateCacheMut.RLock()
	cache, cached := playerBanUpdateCache[key]
	playerBanUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			playerBanAllColumns,
			playerBanPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update player_bans, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"player_bans\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, playerBanPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(playerBanType, playerBanMapping, append(wl, playerBanPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update player_bans row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for player_bans")
	}

	if !cached {
		playerBanUpdateCacheMut.Lock()
		playerBanUpdateCache[key] = cache
		playerBanUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q playerBanQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for player_bans")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for player_bans")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlayerBanSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerBanPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"player_bans\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, playerBanPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in playerBan slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all playerBan")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PlayerBan) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no player_bans provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerBanColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	playerBanUpsertCacheMut.RLock()
	cache, cached := playerBanUpsertCache[key]
	playerBanUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			playerBanAllColumns,
			playerBanColumnsWithDefault,
			playerBanColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			playerBanAllColumns,
			playerBanPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert player_bans, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(playerBanPrimaryKeyColumns))
			copy(conflict, playerBanPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"player_bans\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(playerBanType, playerBanMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(playerBanType, playerBanMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert player_bans")
	}

	if !cached {
		playerBanUpsertCacheMut.Lock()
		playerBanUpsertCache[key] = cache
		playerBanUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single PlayerBan record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PlayerBan) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no PlayerBan provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), playerBanPrimaryKeyMapping)
		sql = "DELETE FROM \"player_bans\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"player_bans\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(playerBanType, playerBanMapping, append(wl, playerBanPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from player_bans")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for player_bans")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q playerBanQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no playerBanQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from player_bans")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for player_bans")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlayerBanSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(playerBanBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerBanPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"player_bans\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerBanPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerBanPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"player_bans\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, playerBanPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from playerBan slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for player_bans")
	}

	if len(playerBanAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PlayerBan) Reload(exec boil.Executor) error {
	ret, err := FindPlayerBan(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlayerBanSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlayerBanSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerBanPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"player_bans\".* FROM \"player_bans\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerBanPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in PlayerBanSlice")
	}

	*o = slice

	return nil
}

// PlayerBanExists checks if the PlayerBan row exists.
func PlayerBanExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"player_bans\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if player_bans exists")
	}

	return exists, nil
}
