// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FailedPlayerKeycardsSync is an object representing the database table.
type FailedPlayerKeycardsSync struct {
	ID                 string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	PublicAddress      string    `boiler:"public_address" boil:"public_address" json:"public_address" toml:"public_address" yaml:"public_address"`
	BlueprintKeycardID string    `boiler:"blueprint_keycard_id" boil:"blueprint_keycard_id" json:"blueprint_keycard_id" toml:"blueprint_keycard_id" yaml:"blueprint_keycard_id"`
	Count              int       `boiler:"count" boil:"count" json:"count" toml:"count" yaml:"count"`
	Reason             string    `boiler:"reason" boil:"reason" json:"reason" toml:"reason" yaml:"reason"`
	CreatedAt          time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *failedPlayerKeycardsSyncR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L failedPlayerKeycardsSyncL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FailedPlayerKeycardsSyncColumns = struct {
	ID                 string
	PublicAddress      string
	BlueprintKeycardID string
	Count              string
	Reason             string
	CreatedAt          string
}{
	ID:                 "id",
	PublicAddress:      "public_address",
	BlueprintKeycardID: "blueprint_keycard_id",
	Count:              "count",
	Reason:             "reason",
	CreatedAt:          "created_at",
}

var FailedPlayerKeycardsSyncTableColumns = struct {
	ID                 string
	PublicAddress      string
	BlueprintKeycardID string
	Count              string
	Reason             string
	CreatedAt          string
}{
	ID:                 "failed_player_keycards_sync.id",
	PublicAddress:      "failed_player_keycards_sync.public_address",
	BlueprintKeycardID: "failed_player_keycards_sync.blueprint_keycard_id",
	Count:              "failed_player_keycards_sync.count",
	Reason:             "failed_player_keycards_sync.reason",
	CreatedAt:          "failed_player_keycards_sync.created_at",
}

// Generated where

var FailedPlayerKeycardsSyncWhere = struct {
	ID                 whereHelperstring
	PublicAddress      whereHelperstring
	BlueprintKeycardID whereHelperstring
	Count              whereHelperint
	Reason             whereHelperstring
	CreatedAt          whereHelpertime_Time
}{
	ID:                 whereHelperstring{field: "\"failed_player_keycards_sync\".\"id\""},
	PublicAddress:      whereHelperstring{field: "\"failed_player_keycards_sync\".\"public_address\""},
	BlueprintKeycardID: whereHelperstring{field: "\"failed_player_keycards_sync\".\"blueprint_keycard_id\""},
	Count:              whereHelperint{field: "\"failed_player_keycards_sync\".\"count\""},
	Reason:             whereHelperstring{field: "\"failed_player_keycards_sync\".\"reason\""},
	CreatedAt:          whereHelpertime_Time{field: "\"failed_player_keycards_sync\".\"created_at\""},
}

// FailedPlayerKeycardsSyncRels is where relationship names are stored.
var FailedPlayerKeycardsSyncRels = struct {
	BlueprintKeycard string
}{
	BlueprintKeycard: "BlueprintKeycard",
}

// failedPlayerKeycardsSyncR is where relationships are stored.
type failedPlayerKeycardsSyncR struct {
	BlueprintKeycard *BlueprintKeycard `boiler:"BlueprintKeycard" boil:"BlueprintKeycard" json:"BlueprintKeycard" toml:"BlueprintKeycard" yaml:"BlueprintKeycard"`
}

// NewStruct creates a new relationship struct
func (*failedPlayerKeycardsSyncR) NewStruct() *failedPlayerKeycardsSyncR {
	return &failedPlayerKeycardsSyncR{}
}

// failedPlayerKeycardsSyncL is where Load methods for each relationship are stored.
type failedPlayerKeycardsSyncL struct{}

var (
	failedPlayerKeycardsSyncAllColumns            = []string{"id", "public_address", "blueprint_keycard_id", "count", "reason", "created_at"}
	failedPlayerKeycardsSyncColumnsWithoutDefault = []string{"public_address", "blueprint_keycard_id", "reason"}
	failedPlayerKeycardsSyncColumnsWithDefault    = []string{"id", "count", "created_at"}
	failedPlayerKeycardsSyncPrimaryKeyColumns     = []string{"id"}
	failedPlayerKeycardsSyncGeneratedColumns      = []string{}
)

type (
	// FailedPlayerKeycardsSyncSlice is an alias for a slice of pointers to FailedPlayerKeycardsSync.
	// This should almost always be used instead of []FailedPlayerKeycardsSync.
	FailedPlayerKeycardsSyncSlice []*FailedPlayerKeycardsSync
	// FailedPlayerKeycardsSyncHook is the signature for custom FailedPlayerKeycardsSync hook methods
	FailedPlayerKeycardsSyncHook func(boil.Executor, *FailedPlayerKeycardsSync) error

	failedPlayerKeycardsSyncQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	failedPlayerKeycardsSyncType                 = reflect.TypeOf(&FailedPlayerKeycardsSync{})
	failedPlayerKeycardsSyncMapping              = queries.MakeStructMapping(failedPlayerKeycardsSyncType)
	failedPlayerKeycardsSyncPrimaryKeyMapping, _ = queries.BindMapping(failedPlayerKeycardsSyncType, failedPlayerKeycardsSyncMapping, failedPlayerKeycardsSyncPrimaryKeyColumns)
	failedPlayerKeycardsSyncInsertCacheMut       sync.RWMutex
	failedPlayerKeycardsSyncInsertCache          = make(map[string]insertCache)
	failedPlayerKeycardsSyncUpdateCacheMut       sync.RWMutex
	failedPlayerKeycardsSyncUpdateCache          = make(map[string]updateCache)
	failedPlayerKeycardsSyncUpsertCacheMut       sync.RWMutex
	failedPlayerKeycardsSyncUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var failedPlayerKeycardsSyncAfterSelectHooks []FailedPlayerKeycardsSyncHook

var failedPlayerKeycardsSyncBeforeInsertHooks []FailedPlayerKeycardsSyncHook
var failedPlayerKeycardsSyncAfterInsertHooks []FailedPlayerKeycardsSyncHook

var failedPlayerKeycardsSyncBeforeUpdateHooks []FailedPlayerKeycardsSyncHook
var failedPlayerKeycardsSyncAfterUpdateHooks []FailedPlayerKeycardsSyncHook

var failedPlayerKeycardsSyncBeforeDeleteHooks []FailedPlayerKeycardsSyncHook
var failedPlayerKeycardsSyncAfterDeleteHooks []FailedPlayerKeycardsSyncHook

var failedPlayerKeycardsSyncBeforeUpsertHooks []FailedPlayerKeycardsSyncHook
var failedPlayerKeycardsSyncAfterUpsertHooks []FailedPlayerKeycardsSyncHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FailedPlayerKeycardsSync) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range failedPlayerKeycardsSyncAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FailedPlayerKeycardsSync) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range failedPlayerKeycardsSyncBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FailedPlayerKeycardsSync) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range failedPlayerKeycardsSyncAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FailedPlayerKeycardsSync) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range failedPlayerKeycardsSyncBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FailedPlayerKeycardsSync) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range failedPlayerKeycardsSyncAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FailedPlayerKeycardsSync) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range failedPlayerKeycardsSyncBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FailedPlayerKeycardsSync) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range failedPlayerKeycardsSyncAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FailedPlayerKeycardsSync) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range failedPlayerKeycardsSyncBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FailedPlayerKeycardsSync) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range failedPlayerKeycardsSyncAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFailedPlayerKeycardsSyncHook registers your hook function for all future operations.
func AddFailedPlayerKeycardsSyncHook(hookPoint boil.HookPoint, failedPlayerKeycardsSyncHook FailedPlayerKeycardsSyncHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		failedPlayerKeycardsSyncAfterSelectHooks = append(failedPlayerKeycardsSyncAfterSelectHooks, failedPlayerKeycardsSyncHook)
	case boil.BeforeInsertHook:
		failedPlayerKeycardsSyncBeforeInsertHooks = append(failedPlayerKeycardsSyncBeforeInsertHooks, failedPlayerKeycardsSyncHook)
	case boil.AfterInsertHook:
		failedPlayerKeycardsSyncAfterInsertHooks = append(failedPlayerKeycardsSyncAfterInsertHooks, failedPlayerKeycardsSyncHook)
	case boil.BeforeUpdateHook:
		failedPlayerKeycardsSyncBeforeUpdateHooks = append(failedPlayerKeycardsSyncBeforeUpdateHooks, failedPlayerKeycardsSyncHook)
	case boil.AfterUpdateHook:
		failedPlayerKeycardsSyncAfterUpdateHooks = append(failedPlayerKeycardsSyncAfterUpdateHooks, failedPlayerKeycardsSyncHook)
	case boil.BeforeDeleteHook:
		failedPlayerKeycardsSyncBeforeDeleteHooks = append(failedPlayerKeycardsSyncBeforeDeleteHooks, failedPlayerKeycardsSyncHook)
	case boil.AfterDeleteHook:
		failedPlayerKeycardsSyncAfterDeleteHooks = append(failedPlayerKeycardsSyncAfterDeleteHooks, failedPlayerKeycardsSyncHook)
	case boil.BeforeUpsertHook:
		failedPlayerKeycardsSyncBeforeUpsertHooks = append(failedPlayerKeycardsSyncBeforeUpsertHooks, failedPlayerKeycardsSyncHook)
	case boil.AfterUpsertHook:
		failedPlayerKeycardsSyncAfterUpsertHooks = append(failedPlayerKeycardsSyncAfterUpsertHooks, failedPlayerKeycardsSyncHook)
	}
}

// One returns a single failedPlayerKeycardsSync record from the query.
func (q failedPlayerKeycardsSyncQuery) One(exec boil.Executor) (*FailedPlayerKeycardsSync, error) {
	o := &FailedPlayerKeycardsSync{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for failed_player_keycards_sync")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FailedPlayerKeycardsSync records from the query.
func (q failedPlayerKeycardsSyncQuery) All(exec boil.Executor) (FailedPlayerKeycardsSyncSlice, error) {
	var o []*FailedPlayerKeycardsSync

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to FailedPlayerKeycardsSync slice")
	}

	if len(failedPlayerKeycardsSyncAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FailedPlayerKeycardsSync records in the query.
func (q failedPlayerKeycardsSyncQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count failed_player_keycards_sync rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q failedPlayerKeycardsSyncQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if failed_player_keycards_sync exists")
	}

	return count > 0, nil
}

// BlueprintKeycard pointed to by the foreign key.
func (o *FailedPlayerKeycardsSync) BlueprintKeycard(mods ...qm.QueryMod) blueprintKeycardQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BlueprintKeycardID),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintKeycards(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_keycards\"")

	return query
}

// LoadBlueprintKeycard allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (failedPlayerKeycardsSyncL) LoadBlueprintKeycard(e boil.Executor, singular bool, maybeFailedPlayerKeycardsSync interface{}, mods queries.Applicator) error {
	var slice []*FailedPlayerKeycardsSync
	var object *FailedPlayerKeycardsSync

	if singular {
		object = maybeFailedPlayerKeycardsSync.(*FailedPlayerKeycardsSync)
	} else {
		slice = *maybeFailedPlayerKeycardsSync.(*[]*FailedPlayerKeycardsSync)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &failedPlayerKeycardsSyncR{}
		}
		args = append(args, object.BlueprintKeycardID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &failedPlayerKeycardsSyncR{}
			}

			for _, a := range args {
				if a == obj.BlueprintKeycardID {
					continue Outer
				}
			}

			args = append(args, obj.BlueprintKeycardID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_keycards`),
		qm.WhereIn(`blueprint_keycards.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintKeycard")
	}

	var resultSlice []*BlueprintKeycard
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintKeycard")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_keycards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_keycards")
	}

	if len(failedPlayerKeycardsSyncAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BlueprintKeycard = foreign
		if foreign.R == nil {
			foreign.R = &blueprintKeycardR{}
		}
		foreign.R.FailedPlayerKeycardsSyncs = append(foreign.R.FailedPlayerKeycardsSyncs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlueprintKeycardID == foreign.ID {
				local.R.BlueprintKeycard = foreign
				if foreign.R == nil {
					foreign.R = &blueprintKeycardR{}
				}
				foreign.R.FailedPlayerKeycardsSyncs = append(foreign.R.FailedPlayerKeycardsSyncs, local)
				break
			}
		}
	}

	return nil
}

// SetBlueprintKeycard of the failedPlayerKeycardsSync to the related item.
// Sets o.R.BlueprintKeycard to related.
// Adds o to related.R.FailedPlayerKeycardsSyncs.
func (o *FailedPlayerKeycardsSync) SetBlueprintKeycard(exec boil.Executor, insert bool, related *BlueprintKeycard) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"failed_player_keycards_sync\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_keycard_id"}),
		strmangle.WhereClause("\"", "\"", 2, failedPlayerKeycardsSyncPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlueprintKeycardID = related.ID
	if o.R == nil {
		o.R = &failedPlayerKeycardsSyncR{
			BlueprintKeycard: related,
		}
	} else {
		o.R.BlueprintKeycard = related
	}

	if related.R == nil {
		related.R = &blueprintKeycardR{
			FailedPlayerKeycardsSyncs: FailedPlayerKeycardsSyncSlice{o},
		}
	} else {
		related.R.FailedPlayerKeycardsSyncs = append(related.R.FailedPlayerKeycardsSyncs, o)
	}

	return nil
}

// FailedPlayerKeycardsSyncs retrieves all the records using an executor.
func FailedPlayerKeycardsSyncs(mods ...qm.QueryMod) failedPlayerKeycardsSyncQuery {
	mods = append(mods, qm.From("\"failed_player_keycards_sync\""))
	return failedPlayerKeycardsSyncQuery{NewQuery(mods...)}
}

// FindFailedPlayerKeycardsSync retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFailedPlayerKeycardsSync(exec boil.Executor, iD string, selectCols ...string) (*FailedPlayerKeycardsSync, error) {
	failedPlayerKeycardsSyncObj := &FailedPlayerKeycardsSync{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"failed_player_keycards_sync\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, failedPlayerKeycardsSyncObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from failed_player_keycards_sync")
	}

	if err = failedPlayerKeycardsSyncObj.doAfterSelectHooks(exec); err != nil {
		return failedPlayerKeycardsSyncObj, err
	}

	return failedPlayerKeycardsSyncObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FailedPlayerKeycardsSync) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no failed_player_keycards_sync provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(failedPlayerKeycardsSyncColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	failedPlayerKeycardsSyncInsertCacheMut.RLock()
	cache, cached := failedPlayerKeycardsSyncInsertCache[key]
	failedPlayerKeycardsSyncInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			failedPlayerKeycardsSyncAllColumns,
			failedPlayerKeycardsSyncColumnsWithDefault,
			failedPlayerKeycardsSyncColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(failedPlayerKeycardsSyncType, failedPlayerKeycardsSyncMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(failedPlayerKeycardsSyncType, failedPlayerKeycardsSyncMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"failed_player_keycards_sync\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"failed_player_keycards_sync\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into failed_player_keycards_sync")
	}

	if !cached {
		failedPlayerKeycardsSyncInsertCacheMut.Lock()
		failedPlayerKeycardsSyncInsertCache[key] = cache
		failedPlayerKeycardsSyncInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the FailedPlayerKeycardsSync.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FailedPlayerKeycardsSync) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	failedPlayerKeycardsSyncUpdateCacheMut.RLock()
	cache, cached := failedPlayerKeycardsSyncUpdateCache[key]
	failedPlayerKeycardsSyncUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			failedPlayerKeycardsSyncAllColumns,
			failedPlayerKeycardsSyncPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update failed_player_keycards_sync, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"failed_player_keycards_sync\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, failedPlayerKeycardsSyncPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(failedPlayerKeycardsSyncType, failedPlayerKeycardsSyncMapping, append(wl, failedPlayerKeycardsSyncPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update failed_player_keycards_sync row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for failed_player_keycards_sync")
	}

	if !cached {
		failedPlayerKeycardsSyncUpdateCacheMut.Lock()
		failedPlayerKeycardsSyncUpdateCache[key] = cache
		failedPlayerKeycardsSyncUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q failedPlayerKeycardsSyncQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for failed_player_keycards_sync")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for failed_player_keycards_sync")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FailedPlayerKeycardsSyncSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), failedPlayerKeycardsSyncPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"failed_player_keycards_sync\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, failedPlayerKeycardsSyncPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in failedPlayerKeycardsSync slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all failedPlayerKeycardsSync")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FailedPlayerKeycardsSync) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no failed_player_keycards_sync provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(failedPlayerKeycardsSyncColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	failedPlayerKeycardsSyncUpsertCacheMut.RLock()
	cache, cached := failedPlayerKeycardsSyncUpsertCache[key]
	failedPlayerKeycardsSyncUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			failedPlayerKeycardsSyncAllColumns,
			failedPlayerKeycardsSyncColumnsWithDefault,
			failedPlayerKeycardsSyncColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			failedPlayerKeycardsSyncAllColumns,
			failedPlayerKeycardsSyncPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert failed_player_keycards_sync, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(failedPlayerKeycardsSyncPrimaryKeyColumns))
			copy(conflict, failedPlayerKeycardsSyncPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"failed_player_keycards_sync\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(failedPlayerKeycardsSyncType, failedPlayerKeycardsSyncMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(failedPlayerKeycardsSyncType, failedPlayerKeycardsSyncMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert failed_player_keycards_sync")
	}

	if !cached {
		failedPlayerKeycardsSyncUpsertCacheMut.Lock()
		failedPlayerKeycardsSyncUpsertCache[key] = cache
		failedPlayerKeycardsSyncUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single FailedPlayerKeycardsSync record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FailedPlayerKeycardsSync) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no FailedPlayerKeycardsSync provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), failedPlayerKeycardsSyncPrimaryKeyMapping)
	sql := "DELETE FROM \"failed_player_keycards_sync\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from failed_player_keycards_sync")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for failed_player_keycards_sync")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q failedPlayerKeycardsSyncQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no failedPlayerKeycardsSyncQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from failed_player_keycards_sync")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for failed_player_keycards_sync")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FailedPlayerKeycardsSyncSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(failedPlayerKeycardsSyncBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), failedPlayerKeycardsSyncPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"failed_player_keycards_sync\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, failedPlayerKeycardsSyncPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from failedPlayerKeycardsSync slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for failed_player_keycards_sync")
	}

	if len(failedPlayerKeycardsSyncAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FailedPlayerKeycardsSync) Reload(exec boil.Executor) error {
	ret, err := FindFailedPlayerKeycardsSync(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FailedPlayerKeycardsSyncSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FailedPlayerKeycardsSyncSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), failedPlayerKeycardsSyncPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"failed_player_keycards_sync\".* FROM \"failed_player_keycards_sync\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, failedPlayerKeycardsSyncPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in FailedPlayerKeycardsSyncSlice")
	}

	*o = slice

	return nil
}

// FailedPlayerKeycardsSyncExists checks if the FailedPlayerKeycardsSync row exists.
func FailedPlayerKeycardsSyncExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"failed_player_keycards_sync\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if failed_player_keycards_sync exists")
	}

	return exists, nil
}
