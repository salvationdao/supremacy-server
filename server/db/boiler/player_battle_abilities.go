// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PlayerBattleAbility is an object representing the database table.
type PlayerBattleAbility struct {
	ID            string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	PlayerID      string    `boiler:"player_id" boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	GameAbilityID string    `boiler:"game_ability_id" boil:"game_ability_id" json:"game_ability_id" toml:"game_ability_id" yaml:"game_ability_id"`
	BattleID      string    `boiler:"battle_id" boil:"battle_id" json:"battle_id" toml:"battle_id" yaml:"battle_id"`
	UsedAt        null.Time `boiler:"used_at" boil:"used_at" json:"used_at,omitempty" toml:"used_at" yaml:"used_at,omitempty"`
	DeletedAt     null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt     time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt     time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *playerBattleAbilityR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L playerBattleAbilityL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlayerBattleAbilityColumns = struct {
	ID            string
	PlayerID      string
	GameAbilityID string
	BattleID      string
	UsedAt        string
	DeletedAt     string
	UpdatedAt     string
	CreatedAt     string
}{
	ID:            "id",
	PlayerID:      "player_id",
	GameAbilityID: "game_ability_id",
	BattleID:      "battle_id",
	UsedAt:        "used_at",
	DeletedAt:     "deleted_at",
	UpdatedAt:     "updated_at",
	CreatedAt:     "created_at",
}

var PlayerBattleAbilityTableColumns = struct {
	ID            string
	PlayerID      string
	GameAbilityID string
	BattleID      string
	UsedAt        string
	DeletedAt     string
	UpdatedAt     string
	CreatedAt     string
}{
	ID:            "player_battle_abilities.id",
	PlayerID:      "player_battle_abilities.player_id",
	GameAbilityID: "player_battle_abilities.game_ability_id",
	BattleID:      "player_battle_abilities.battle_id",
	UsedAt:        "player_battle_abilities.used_at",
	DeletedAt:     "player_battle_abilities.deleted_at",
	UpdatedAt:     "player_battle_abilities.updated_at",
	CreatedAt:     "player_battle_abilities.created_at",
}

// Generated where

var PlayerBattleAbilityWhere = struct {
	ID            whereHelperstring
	PlayerID      whereHelperstring
	GameAbilityID whereHelperstring
	BattleID      whereHelperstring
	UsedAt        whereHelpernull_Time
	DeletedAt     whereHelpernull_Time
	UpdatedAt     whereHelpertime_Time
	CreatedAt     whereHelpertime_Time
}{
	ID:            whereHelperstring{field: "\"player_battle_abilities\".\"id\""},
	PlayerID:      whereHelperstring{field: "\"player_battle_abilities\".\"player_id\""},
	GameAbilityID: whereHelperstring{field: "\"player_battle_abilities\".\"game_ability_id\""},
	BattleID:      whereHelperstring{field: "\"player_battle_abilities\".\"battle_id\""},
	UsedAt:        whereHelpernull_Time{field: "\"player_battle_abilities\".\"used_at\""},
	DeletedAt:     whereHelpernull_Time{field: "\"player_battle_abilities\".\"deleted_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"player_battle_abilities\".\"updated_at\""},
	CreatedAt:     whereHelpertime_Time{field: "\"player_battle_abilities\".\"created_at\""},
}

// PlayerBattleAbilityRels is where relationship names are stored.
var PlayerBattleAbilityRels = struct {
	Battle      string
	GameAbility string
	Player      string
}{
	Battle:      "Battle",
	GameAbility: "GameAbility",
	Player:      "Player",
}

// playerBattleAbilityR is where relationships are stored.
type playerBattleAbilityR struct {
	Battle      *Battle      `boiler:"Battle" boil:"Battle" json:"Battle" toml:"Battle" yaml:"Battle"`
	GameAbility *GameAbility `boiler:"GameAbility" boil:"GameAbility" json:"GameAbility" toml:"GameAbility" yaml:"GameAbility"`
	Player      *Player      `boiler:"Player" boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
}

// NewStruct creates a new relationship struct
func (*playerBattleAbilityR) NewStruct() *playerBattleAbilityR {
	return &playerBattleAbilityR{}
}

// playerBattleAbilityL is where Load methods for each relationship are stored.
type playerBattleAbilityL struct{}

var (
	playerBattleAbilityAllColumns            = []string{"id", "player_id", "game_ability_id", "battle_id", "used_at", "deleted_at", "updated_at", "created_at"}
	playerBattleAbilityColumnsWithoutDefault = []string{"player_id", "game_ability_id", "battle_id"}
	playerBattleAbilityColumnsWithDefault    = []string{"id", "used_at", "deleted_at", "updated_at", "created_at"}
	playerBattleAbilityPrimaryKeyColumns     = []string{"id"}
	playerBattleAbilityGeneratedColumns      = []string{}
)

type (
	// PlayerBattleAbilitySlice is an alias for a slice of pointers to PlayerBattleAbility.
	// This should almost always be used instead of []PlayerBattleAbility.
	PlayerBattleAbilitySlice []*PlayerBattleAbility
	// PlayerBattleAbilityHook is the signature for custom PlayerBattleAbility hook methods
	PlayerBattleAbilityHook func(boil.Executor, *PlayerBattleAbility) error

	playerBattleAbilityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playerBattleAbilityType                 = reflect.TypeOf(&PlayerBattleAbility{})
	playerBattleAbilityMapping              = queries.MakeStructMapping(playerBattleAbilityType)
	playerBattleAbilityPrimaryKeyMapping, _ = queries.BindMapping(playerBattleAbilityType, playerBattleAbilityMapping, playerBattleAbilityPrimaryKeyColumns)
	playerBattleAbilityInsertCacheMut       sync.RWMutex
	playerBattleAbilityInsertCache          = make(map[string]insertCache)
	playerBattleAbilityUpdateCacheMut       sync.RWMutex
	playerBattleAbilityUpdateCache          = make(map[string]updateCache)
	playerBattleAbilityUpsertCacheMut       sync.RWMutex
	playerBattleAbilityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var playerBattleAbilityAfterSelectHooks []PlayerBattleAbilityHook

var playerBattleAbilityBeforeInsertHooks []PlayerBattleAbilityHook
var playerBattleAbilityAfterInsertHooks []PlayerBattleAbilityHook

var playerBattleAbilityBeforeUpdateHooks []PlayerBattleAbilityHook
var playerBattleAbilityAfterUpdateHooks []PlayerBattleAbilityHook

var playerBattleAbilityBeforeDeleteHooks []PlayerBattleAbilityHook
var playerBattleAbilityAfterDeleteHooks []PlayerBattleAbilityHook

var playerBattleAbilityBeforeUpsertHooks []PlayerBattleAbilityHook
var playerBattleAbilityAfterUpsertHooks []PlayerBattleAbilityHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PlayerBattleAbility) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range playerBattleAbilityAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PlayerBattleAbility) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerBattleAbilityBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PlayerBattleAbility) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerBattleAbilityAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PlayerBattleAbility) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range playerBattleAbilityBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PlayerBattleAbility) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range playerBattleAbilityAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PlayerBattleAbility) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range playerBattleAbilityBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PlayerBattleAbility) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range playerBattleAbilityAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PlayerBattleAbility) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerBattleAbilityBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PlayerBattleAbility) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerBattleAbilityAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlayerBattleAbilityHook registers your hook function for all future operations.
func AddPlayerBattleAbilityHook(hookPoint boil.HookPoint, playerBattleAbilityHook PlayerBattleAbilityHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		playerBattleAbilityAfterSelectHooks = append(playerBattleAbilityAfterSelectHooks, playerBattleAbilityHook)
	case boil.BeforeInsertHook:
		playerBattleAbilityBeforeInsertHooks = append(playerBattleAbilityBeforeInsertHooks, playerBattleAbilityHook)
	case boil.AfterInsertHook:
		playerBattleAbilityAfterInsertHooks = append(playerBattleAbilityAfterInsertHooks, playerBattleAbilityHook)
	case boil.BeforeUpdateHook:
		playerBattleAbilityBeforeUpdateHooks = append(playerBattleAbilityBeforeUpdateHooks, playerBattleAbilityHook)
	case boil.AfterUpdateHook:
		playerBattleAbilityAfterUpdateHooks = append(playerBattleAbilityAfterUpdateHooks, playerBattleAbilityHook)
	case boil.BeforeDeleteHook:
		playerBattleAbilityBeforeDeleteHooks = append(playerBattleAbilityBeforeDeleteHooks, playerBattleAbilityHook)
	case boil.AfterDeleteHook:
		playerBattleAbilityAfterDeleteHooks = append(playerBattleAbilityAfterDeleteHooks, playerBattleAbilityHook)
	case boil.BeforeUpsertHook:
		playerBattleAbilityBeforeUpsertHooks = append(playerBattleAbilityBeforeUpsertHooks, playerBattleAbilityHook)
	case boil.AfterUpsertHook:
		playerBattleAbilityAfterUpsertHooks = append(playerBattleAbilityAfterUpsertHooks, playerBattleAbilityHook)
	}
}

// One returns a single playerBattleAbility record from the query.
func (q playerBattleAbilityQuery) One(exec boil.Executor) (*PlayerBattleAbility, error) {
	o := &PlayerBattleAbility{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for player_battle_abilities")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PlayerBattleAbility records from the query.
func (q playerBattleAbilityQuery) All(exec boil.Executor) (PlayerBattleAbilitySlice, error) {
	var o []*PlayerBattleAbility

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to PlayerBattleAbility slice")
	}

	if len(playerBattleAbilityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PlayerBattleAbility records in the query.
func (q playerBattleAbilityQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count player_battle_abilities rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q playerBattleAbilityQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if player_battle_abilities exists")
	}

	return count > 0, nil
}

// Battle pointed to by the foreign key.
func (o *PlayerBattleAbility) Battle(mods ...qm.QueryMod) battleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BattleID),
	}

	queryMods = append(queryMods, mods...)

	query := Battles(queryMods...)
	queries.SetFrom(query.Query, "\"battles\"")

	return query
}

// GameAbility pointed to by the foreign key.
func (o *PlayerBattleAbility) GameAbility(mods ...qm.QueryMod) gameAbilityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GameAbilityID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := GameAbilities(queryMods...)
	queries.SetFrom(query.Query, "\"game_abilities\"")

	return query
}

// Player pointed to by the foreign key.
func (o *PlayerBattleAbility) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// LoadBattle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerBattleAbilityL) LoadBattle(e boil.Executor, singular bool, maybePlayerBattleAbility interface{}, mods queries.Applicator) error {
	var slice []*PlayerBattleAbility
	var object *PlayerBattleAbility

	if singular {
		object = maybePlayerBattleAbility.(*PlayerBattleAbility)
	} else {
		slice = *maybePlayerBattleAbility.(*[]*PlayerBattleAbility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerBattleAbilityR{}
		}
		args = append(args, object.BattleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerBattleAbilityR{}
			}

			for _, a := range args {
				if a == obj.BattleID {
					continue Outer
				}
			}

			args = append(args, obj.BattleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battles`),
		qm.WhereIn(`battles.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Battle")
	}

	var resultSlice []*Battle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Battle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battles")
	}

	if len(playerBattleAbilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Battle = foreign
		if foreign.R == nil {
			foreign.R = &battleR{}
		}
		foreign.R.PlayerBattleAbilities = append(foreign.R.PlayerBattleAbilities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BattleID == foreign.ID {
				local.R.Battle = foreign
				if foreign.R == nil {
					foreign.R = &battleR{}
				}
				foreign.R.PlayerBattleAbilities = append(foreign.R.PlayerBattleAbilities, local)
				break
			}
		}
	}

	return nil
}

// LoadGameAbility allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerBattleAbilityL) LoadGameAbility(e boil.Executor, singular bool, maybePlayerBattleAbility interface{}, mods queries.Applicator) error {
	var slice []*PlayerBattleAbility
	var object *PlayerBattleAbility

	if singular {
		object = maybePlayerBattleAbility.(*PlayerBattleAbility)
	} else {
		slice = *maybePlayerBattleAbility.(*[]*PlayerBattleAbility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerBattleAbilityR{}
		}
		args = append(args, object.GameAbilityID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerBattleAbilityR{}
			}

			for _, a := range args {
				if a == obj.GameAbilityID {
					continue Outer
				}
			}

			args = append(args, obj.GameAbilityID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`game_abilities`),
		qm.WhereIn(`game_abilities.id in ?`, args...),
		qmhelper.WhereIsNull(`game_abilities.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GameAbility")
	}

	var resultSlice []*GameAbility
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GameAbility")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for game_abilities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_abilities")
	}

	if len(playerBattleAbilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GameAbility = foreign
		if foreign.R == nil {
			foreign.R = &gameAbilityR{}
		}
		foreign.R.PlayerBattleAbilities = append(foreign.R.PlayerBattleAbilities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GameAbilityID == foreign.ID {
				local.R.GameAbility = foreign
				if foreign.R == nil {
					foreign.R = &gameAbilityR{}
				}
				foreign.R.PlayerBattleAbilities = append(foreign.R.PlayerBattleAbilities, local)
				break
			}
		}
	}

	return nil
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerBattleAbilityL) LoadPlayer(e boil.Executor, singular bool, maybePlayerBattleAbility interface{}, mods queries.Applicator) error {
	var slice []*PlayerBattleAbility
	var object *PlayerBattleAbility

	if singular {
		object = maybePlayerBattleAbility.(*PlayerBattleAbility)
	} else {
		slice = *maybePlayerBattleAbility.(*[]*PlayerBattleAbility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerBattleAbilityR{}
		}
		args = append(args, object.PlayerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerBattleAbilityR{}
			}

			for _, a := range args {
				if a == obj.PlayerID {
					continue Outer
				}
			}

			args = append(args, obj.PlayerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(playerBattleAbilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.PlayerBattleAbilities = append(foreign.R.PlayerBattleAbilities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.ID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.PlayerBattleAbilities = append(foreign.R.PlayerBattleAbilities, local)
				break
			}
		}
	}

	return nil
}

// SetBattle of the playerBattleAbility to the related item.
// Sets o.R.Battle to related.
// Adds o to related.R.PlayerBattleAbilities.
func (o *PlayerBattleAbility) SetBattle(exec boil.Executor, insert bool, related *Battle) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"player_battle_abilities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerBattleAbilityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BattleID = related.ID
	if o.R == nil {
		o.R = &playerBattleAbilityR{
			Battle: related,
		}
	} else {
		o.R.Battle = related
	}

	if related.R == nil {
		related.R = &battleR{
			PlayerBattleAbilities: PlayerBattleAbilitySlice{o},
		}
	} else {
		related.R.PlayerBattleAbilities = append(related.R.PlayerBattleAbilities, o)
	}

	return nil
}

// SetGameAbility of the playerBattleAbility to the related item.
// Sets o.R.GameAbility to related.
// Adds o to related.R.PlayerBattleAbilities.
func (o *PlayerBattleAbility) SetGameAbility(exec boil.Executor, insert bool, related *GameAbility) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"player_battle_abilities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"game_ability_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerBattleAbilityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GameAbilityID = related.ID
	if o.R == nil {
		o.R = &playerBattleAbilityR{
			GameAbility: related,
		}
	} else {
		o.R.GameAbility = related
	}

	if related.R == nil {
		related.R = &gameAbilityR{
			PlayerBattleAbilities: PlayerBattleAbilitySlice{o},
		}
	} else {
		related.R.PlayerBattleAbilities = append(related.R.PlayerBattleAbilities, o)
	}

	return nil
}

// SetPlayer of the playerBattleAbility to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.PlayerBattleAbilities.
func (o *PlayerBattleAbility) SetPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"player_battle_abilities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerBattleAbilityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.ID
	if o.R == nil {
		o.R = &playerBattleAbilityR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			PlayerBattleAbilities: PlayerBattleAbilitySlice{o},
		}
	} else {
		related.R.PlayerBattleAbilities = append(related.R.PlayerBattleAbilities, o)
	}

	return nil
}

// PlayerBattleAbilities retrieves all the records using an executor.
func PlayerBattleAbilities(mods ...qm.QueryMod) playerBattleAbilityQuery {
	mods = append(mods, qm.From("\"player_battle_abilities\""), qmhelper.WhereIsNull("\"player_battle_abilities\".\"deleted_at\""))
	return playerBattleAbilityQuery{NewQuery(mods...)}
}

// FindPlayerBattleAbility retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlayerBattleAbility(exec boil.Executor, iD string, selectCols ...string) (*PlayerBattleAbility, error) {
	playerBattleAbilityObj := &PlayerBattleAbility{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"player_battle_abilities\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, playerBattleAbilityObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from player_battle_abilities")
	}

	if err = playerBattleAbilityObj.doAfterSelectHooks(exec); err != nil {
		return playerBattleAbilityObj, err
	}

	return playerBattleAbilityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PlayerBattleAbility) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no player_battle_abilities provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerBattleAbilityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	playerBattleAbilityInsertCacheMut.RLock()
	cache, cached := playerBattleAbilityInsertCache[key]
	playerBattleAbilityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			playerBattleAbilityAllColumns,
			playerBattleAbilityColumnsWithDefault,
			playerBattleAbilityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(playerBattleAbilityType, playerBattleAbilityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(playerBattleAbilityType, playerBattleAbilityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"player_battle_abilities\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"player_battle_abilities\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into player_battle_abilities")
	}

	if !cached {
		playerBattleAbilityInsertCacheMut.Lock()
		playerBattleAbilityInsertCache[key] = cache
		playerBattleAbilityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the PlayerBattleAbility.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PlayerBattleAbility) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	playerBattleAbilityUpdateCacheMut.RLock()
	cache, cached := playerBattleAbilityUpdateCache[key]
	playerBattleAbilityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			playerBattleAbilityAllColumns,
			playerBattleAbilityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update player_battle_abilities, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"player_battle_abilities\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, playerBattleAbilityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(playerBattleAbilityType, playerBattleAbilityMapping, append(wl, playerBattleAbilityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update player_battle_abilities row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for player_battle_abilities")
	}

	if !cached {
		playerBattleAbilityUpdateCacheMut.Lock()
		playerBattleAbilityUpdateCache[key] = cache
		playerBattleAbilityUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q playerBattleAbilityQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for player_battle_abilities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for player_battle_abilities")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlayerBattleAbilitySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerBattleAbilityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"player_battle_abilities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, playerBattleAbilityPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in playerBattleAbility slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all playerBattleAbility")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PlayerBattleAbility) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no player_battle_abilities provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerBattleAbilityColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	playerBattleAbilityUpsertCacheMut.RLock()
	cache, cached := playerBattleAbilityUpsertCache[key]
	playerBattleAbilityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			playerBattleAbilityAllColumns,
			playerBattleAbilityColumnsWithDefault,
			playerBattleAbilityColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			playerBattleAbilityAllColumns,
			playerBattleAbilityPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert player_battle_abilities, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(playerBattleAbilityPrimaryKeyColumns))
			copy(conflict, playerBattleAbilityPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"player_battle_abilities\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(playerBattleAbilityType, playerBattleAbilityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(playerBattleAbilityType, playerBattleAbilityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert player_battle_abilities")
	}

	if !cached {
		playerBattleAbilityUpsertCacheMut.Lock()
		playerBattleAbilityUpsertCache[key] = cache
		playerBattleAbilityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single PlayerBattleAbility record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PlayerBattleAbility) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no PlayerBattleAbility provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), playerBattleAbilityPrimaryKeyMapping)
		sql = "DELETE FROM \"player_battle_abilities\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"player_battle_abilities\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(playerBattleAbilityType, playerBattleAbilityMapping, append(wl, playerBattleAbilityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from player_battle_abilities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for player_battle_abilities")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q playerBattleAbilityQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no playerBattleAbilityQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from player_battle_abilities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for player_battle_abilities")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlayerBattleAbilitySlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(playerBattleAbilityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerBattleAbilityPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"player_battle_abilities\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerBattleAbilityPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerBattleAbilityPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"player_battle_abilities\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, playerBattleAbilityPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from playerBattleAbility slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for player_battle_abilities")
	}

	if len(playerBattleAbilityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PlayerBattleAbility) Reload(exec boil.Executor) error {
	ret, err := FindPlayerBattleAbility(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlayerBattleAbilitySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlayerBattleAbilitySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerBattleAbilityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"player_battle_abilities\".* FROM \"player_battle_abilities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerBattleAbilityPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in PlayerBattleAbilitySlice")
	}

	*o = slice

	return nil
}

// PlayerBattleAbilityExists checks if the PlayerBattleAbility row exists.
func PlayerBattleAbilityExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"player_battle_abilities\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if player_battle_abilities exists")
	}

	return exists, nil
}
