// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ApplicationVote is an object representing the database table.
type ApplicationVote struct {
	ApplicationID string    `boiler:"application_id" boil:"application_id" json:"application_id" toml:"application_id" yaml:"application_id"`
	VotedByID     string    `boiler:"voted_by_id" boil:"voted_by_id" json:"voted_by_id" toml:"voted_by_id" yaml:"voted_by_id"`
	IsAgreed      bool      `boiler:"is_agreed" boil:"is_agreed" json:"is_agreed" toml:"is_agreed" yaml:"is_agreed"`
	CreatedAt     time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt     null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *applicationVoteR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L applicationVoteL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ApplicationVoteColumns = struct {
	ApplicationID string
	VotedByID     string
	IsAgreed      string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	ApplicationID: "application_id",
	VotedByID:     "voted_by_id",
	IsAgreed:      "is_agreed",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	DeletedAt:     "deleted_at",
}

var ApplicationVoteTableColumns = struct {
	ApplicationID string
	VotedByID     string
	IsAgreed      string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	ApplicationID: "application_votes.application_id",
	VotedByID:     "application_votes.voted_by_id",
	IsAgreed:      "application_votes.is_agreed",
	CreatedAt:     "application_votes.created_at",
	UpdatedAt:     "application_votes.updated_at",
	DeletedAt:     "application_votes.deleted_at",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ApplicationVoteWhere = struct {
	ApplicationID whereHelperstring
	VotedByID     whereHelperstring
	IsAgreed      whereHelperbool
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	DeletedAt     whereHelpernull_Time
}{
	ApplicationID: whereHelperstring{field: "\"application_votes\".\"application_id\""},
	VotedByID:     whereHelperstring{field: "\"application_votes\".\"voted_by_id\""},
	IsAgreed:      whereHelperbool{field: "\"application_votes\".\"is_agreed\""},
	CreatedAt:     whereHelpertime_Time{field: "\"application_votes\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"application_votes\".\"updated_at\""},
	DeletedAt:     whereHelpernull_Time{field: "\"application_votes\".\"deleted_at\""},
}

// ApplicationVoteRels is where relationship names are stored.
var ApplicationVoteRels = struct {
	Application string
	VotedBy     string
}{
	Application: "Application",
	VotedBy:     "VotedBy",
}

// applicationVoteR is where relationships are stored.
type applicationVoteR struct {
	Application *SyndicateJoinApplication `boiler:"Application" boil:"Application" json:"Application" toml:"Application" yaml:"Application"`
	VotedBy     *Player                   `boiler:"VotedBy" boil:"VotedBy" json:"VotedBy" toml:"VotedBy" yaml:"VotedBy"`
}

// NewStruct creates a new relationship struct
func (*applicationVoteR) NewStruct() *applicationVoteR {
	return &applicationVoteR{}
}

// applicationVoteL is where Load methods for each relationship are stored.
type applicationVoteL struct{}

var (
	applicationVoteAllColumns            = []string{"application_id", "voted_by_id", "is_agreed", "created_at", "updated_at", "deleted_at"}
	applicationVoteColumnsWithoutDefault = []string{"application_id", "voted_by_id", "is_agreed"}
	applicationVoteColumnsWithDefault    = []string{"created_at", "updated_at", "deleted_at"}
	applicationVotePrimaryKeyColumns     = []string{"application_id", "voted_by_id"}
	applicationVoteGeneratedColumns      = []string{}
)

type (
	// ApplicationVoteSlice is an alias for a slice of pointers to ApplicationVote.
	// This should almost always be used instead of []ApplicationVote.
	ApplicationVoteSlice []*ApplicationVote
	// ApplicationVoteHook is the signature for custom ApplicationVote hook methods
	ApplicationVoteHook func(boil.Executor, *ApplicationVote) error

	applicationVoteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	applicationVoteType                 = reflect.TypeOf(&ApplicationVote{})
	applicationVoteMapping              = queries.MakeStructMapping(applicationVoteType)
	applicationVotePrimaryKeyMapping, _ = queries.BindMapping(applicationVoteType, applicationVoteMapping, applicationVotePrimaryKeyColumns)
	applicationVoteInsertCacheMut       sync.RWMutex
	applicationVoteInsertCache          = make(map[string]insertCache)
	applicationVoteUpdateCacheMut       sync.RWMutex
	applicationVoteUpdateCache          = make(map[string]updateCache)
	applicationVoteUpsertCacheMut       sync.RWMutex
	applicationVoteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var applicationVoteAfterSelectHooks []ApplicationVoteHook

var applicationVoteBeforeInsertHooks []ApplicationVoteHook
var applicationVoteAfterInsertHooks []ApplicationVoteHook

var applicationVoteBeforeUpdateHooks []ApplicationVoteHook
var applicationVoteAfterUpdateHooks []ApplicationVoteHook

var applicationVoteBeforeDeleteHooks []ApplicationVoteHook
var applicationVoteAfterDeleteHooks []ApplicationVoteHook

var applicationVoteBeforeUpsertHooks []ApplicationVoteHook
var applicationVoteAfterUpsertHooks []ApplicationVoteHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ApplicationVote) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range applicationVoteAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ApplicationVote) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range applicationVoteBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ApplicationVote) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range applicationVoteAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ApplicationVote) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range applicationVoteBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ApplicationVote) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range applicationVoteAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ApplicationVote) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range applicationVoteBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ApplicationVote) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range applicationVoteAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ApplicationVote) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range applicationVoteBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ApplicationVote) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range applicationVoteAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddApplicationVoteHook registers your hook function for all future operations.
func AddApplicationVoteHook(hookPoint boil.HookPoint, applicationVoteHook ApplicationVoteHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		applicationVoteAfterSelectHooks = append(applicationVoteAfterSelectHooks, applicationVoteHook)
	case boil.BeforeInsertHook:
		applicationVoteBeforeInsertHooks = append(applicationVoteBeforeInsertHooks, applicationVoteHook)
	case boil.AfterInsertHook:
		applicationVoteAfterInsertHooks = append(applicationVoteAfterInsertHooks, applicationVoteHook)
	case boil.BeforeUpdateHook:
		applicationVoteBeforeUpdateHooks = append(applicationVoteBeforeUpdateHooks, applicationVoteHook)
	case boil.AfterUpdateHook:
		applicationVoteAfterUpdateHooks = append(applicationVoteAfterUpdateHooks, applicationVoteHook)
	case boil.BeforeDeleteHook:
		applicationVoteBeforeDeleteHooks = append(applicationVoteBeforeDeleteHooks, applicationVoteHook)
	case boil.AfterDeleteHook:
		applicationVoteAfterDeleteHooks = append(applicationVoteAfterDeleteHooks, applicationVoteHook)
	case boil.BeforeUpsertHook:
		applicationVoteBeforeUpsertHooks = append(applicationVoteBeforeUpsertHooks, applicationVoteHook)
	case boil.AfterUpsertHook:
		applicationVoteAfterUpsertHooks = append(applicationVoteAfterUpsertHooks, applicationVoteHook)
	}
}

// One returns a single applicationVote record from the query.
func (q applicationVoteQuery) One(exec boil.Executor) (*ApplicationVote, error) {
	o := &ApplicationVote{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for application_votes")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ApplicationVote records from the query.
func (q applicationVoteQuery) All(exec boil.Executor) (ApplicationVoteSlice, error) {
	var o []*ApplicationVote

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to ApplicationVote slice")
	}

	if len(applicationVoteAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ApplicationVote records in the query.
func (q applicationVoteQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count application_votes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q applicationVoteQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if application_votes exists")
	}

	return count > 0, nil
}

// Application pointed to by the foreign key.
func (o *ApplicationVote) Application(mods ...qm.QueryMod) syndicateJoinApplicationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ApplicationID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := SyndicateJoinApplications(queryMods...)
	queries.SetFrom(query.Query, "\"syndicate_join_applications\"")

	return query
}

// VotedBy pointed to by the foreign key.
func (o *ApplicationVote) VotedBy(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VotedByID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// LoadApplication allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (applicationVoteL) LoadApplication(e boil.Executor, singular bool, maybeApplicationVote interface{}, mods queries.Applicator) error {
	var slice []*ApplicationVote
	var object *ApplicationVote

	if singular {
		object = maybeApplicationVote.(*ApplicationVote)
	} else {
		slice = *maybeApplicationVote.(*[]*ApplicationVote)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &applicationVoteR{}
		}
		args = append(args, object.ApplicationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &applicationVoteR{}
			}

			for _, a := range args {
				if a == obj.ApplicationID {
					continue Outer
				}
			}

			args = append(args, obj.ApplicationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicate_join_applications`),
		qm.WhereIn(`syndicate_join_applications.id in ?`, args...),
		qmhelper.WhereIsNull(`syndicate_join_applications.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SyndicateJoinApplication")
	}

	var resultSlice []*SyndicateJoinApplication
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SyndicateJoinApplication")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for syndicate_join_applications")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicate_join_applications")
	}

	if len(applicationVoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Application = foreign
		if foreign.R == nil {
			foreign.R = &syndicateJoinApplicationR{}
		}
		foreign.R.ApplicationApplicationVotes = append(foreign.R.ApplicationApplicationVotes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ApplicationID == foreign.ID {
				local.R.Application = foreign
				if foreign.R == nil {
					foreign.R = &syndicateJoinApplicationR{}
				}
				foreign.R.ApplicationApplicationVotes = append(foreign.R.ApplicationApplicationVotes, local)
				break
			}
		}
	}

	return nil
}

// LoadVotedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (applicationVoteL) LoadVotedBy(e boil.Executor, singular bool, maybeApplicationVote interface{}, mods queries.Applicator) error {
	var slice []*ApplicationVote
	var object *ApplicationVote

	if singular {
		object = maybeApplicationVote.(*ApplicationVote)
	} else {
		slice = *maybeApplicationVote.(*[]*ApplicationVote)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &applicationVoteR{}
		}
		args = append(args, object.VotedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &applicationVoteR{}
			}

			for _, a := range args {
				if a == obj.VotedByID {
					continue Outer
				}
			}

			args = append(args, obj.VotedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(applicationVoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VotedBy = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.VotedByApplicationVotes = append(foreign.R.VotedByApplicationVotes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VotedByID == foreign.ID {
				local.R.VotedBy = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.VotedByApplicationVotes = append(foreign.R.VotedByApplicationVotes, local)
				break
			}
		}
	}

	return nil
}

// SetApplication of the applicationVote to the related item.
// Sets o.R.Application to related.
// Adds o to related.R.ApplicationApplicationVotes.
func (o *ApplicationVote) SetApplication(exec boil.Executor, insert bool, related *SyndicateJoinApplication) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"application_votes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"application_id"}),
		strmangle.WhereClause("\"", "\"", 2, applicationVotePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ApplicationID, o.VotedByID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ApplicationID = related.ID
	if o.R == nil {
		o.R = &applicationVoteR{
			Application: related,
		}
	} else {
		o.R.Application = related
	}

	if related.R == nil {
		related.R = &syndicateJoinApplicationR{
			ApplicationApplicationVotes: ApplicationVoteSlice{o},
		}
	} else {
		related.R.ApplicationApplicationVotes = append(related.R.ApplicationApplicationVotes, o)
	}

	return nil
}

// SetVotedBy of the applicationVote to the related item.
// Sets o.R.VotedBy to related.
// Adds o to related.R.VotedByApplicationVotes.
func (o *ApplicationVote) SetVotedBy(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"application_votes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"voted_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, applicationVotePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ApplicationID, o.VotedByID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VotedByID = related.ID
	if o.R == nil {
		o.R = &applicationVoteR{
			VotedBy: related,
		}
	} else {
		o.R.VotedBy = related
	}

	if related.R == nil {
		related.R = &playerR{
			VotedByApplicationVotes: ApplicationVoteSlice{o},
		}
	} else {
		related.R.VotedByApplicationVotes = append(related.R.VotedByApplicationVotes, o)
	}

	return nil
}

// ApplicationVotes retrieves all the records using an executor.
func ApplicationVotes(mods ...qm.QueryMod) applicationVoteQuery {
	mods = append(mods, qm.From("\"application_votes\""), qmhelper.WhereIsNull("\"application_votes\".\"deleted_at\""))
	return applicationVoteQuery{NewQuery(mods...)}
}

// FindApplicationVote retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindApplicationVote(exec boil.Executor, applicationID string, votedByID string, selectCols ...string) (*ApplicationVote, error) {
	applicationVoteObj := &ApplicationVote{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"application_votes\" where \"application_id\"=$1 AND \"voted_by_id\"=$2 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, applicationID, votedByID)

	err := q.Bind(nil, exec, applicationVoteObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from application_votes")
	}

	if err = applicationVoteObj.doAfterSelectHooks(exec); err != nil {
		return applicationVoteObj, err
	}

	return applicationVoteObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ApplicationVote) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no application_votes provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(applicationVoteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	applicationVoteInsertCacheMut.RLock()
	cache, cached := applicationVoteInsertCache[key]
	applicationVoteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			applicationVoteAllColumns,
			applicationVoteColumnsWithDefault,
			applicationVoteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(applicationVoteType, applicationVoteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(applicationVoteType, applicationVoteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"application_votes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"application_votes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into application_votes")
	}

	if !cached {
		applicationVoteInsertCacheMut.Lock()
		applicationVoteInsertCache[key] = cache
		applicationVoteInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the ApplicationVote.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ApplicationVote) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	applicationVoteUpdateCacheMut.RLock()
	cache, cached := applicationVoteUpdateCache[key]
	applicationVoteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			applicationVoteAllColumns,
			applicationVotePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update application_votes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"application_votes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, applicationVotePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(applicationVoteType, applicationVoteMapping, append(wl, applicationVotePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update application_votes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for application_votes")
	}

	if !cached {
		applicationVoteUpdateCacheMut.Lock()
		applicationVoteUpdateCache[key] = cache
		applicationVoteUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q applicationVoteQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for application_votes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for application_votes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ApplicationVoteSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), applicationVotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"application_votes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, applicationVotePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in applicationVote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all applicationVote")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ApplicationVote) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no application_votes provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(applicationVoteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	applicationVoteUpsertCacheMut.RLock()
	cache, cached := applicationVoteUpsertCache[key]
	applicationVoteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			applicationVoteAllColumns,
			applicationVoteColumnsWithDefault,
			applicationVoteColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			applicationVoteAllColumns,
			applicationVotePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert application_votes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(applicationVotePrimaryKeyColumns))
			copy(conflict, applicationVotePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"application_votes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(applicationVoteType, applicationVoteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(applicationVoteType, applicationVoteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert application_votes")
	}

	if !cached {
		applicationVoteUpsertCacheMut.Lock()
		applicationVoteUpsertCache[key] = cache
		applicationVoteUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single ApplicationVote record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ApplicationVote) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no ApplicationVote provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), applicationVotePrimaryKeyMapping)
		sql = "DELETE FROM \"application_votes\" WHERE \"application_id\"=$1 AND \"voted_by_id\"=$2"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"application_votes\" SET %s WHERE \"application_id\"=$2 AND \"voted_by_id\"=$3",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(applicationVoteType, applicationVoteMapping, append(wl, applicationVotePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from application_votes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for application_votes")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q applicationVoteQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no applicationVoteQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from application_votes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for application_votes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ApplicationVoteSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(applicationVoteBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), applicationVotePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"application_votes\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, applicationVotePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), applicationVotePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"application_votes\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, applicationVotePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from applicationVote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for application_votes")
	}

	if len(applicationVoteAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ApplicationVote) Reload(exec boil.Executor) error {
	ret, err := FindApplicationVote(exec, o.ApplicationID, o.VotedByID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ApplicationVoteSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ApplicationVoteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), applicationVotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"application_votes\".* FROM \"application_votes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, applicationVotePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in ApplicationVoteSlice")
	}

	*o = slice

	return nil
}

// ApplicationVoteExists checks if the ApplicationVote row exists.
func ApplicationVoteExists(exec boil.Executor, applicationID string, votedByID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"application_votes\" where \"application_id\"=$1 AND \"voted_by_id\"=$2 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, applicationID, votedByID)
	}
	row := exec.QueryRow(sql, applicationID, votedByID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if application_votes exists")
	}

	return exists, nil
}
