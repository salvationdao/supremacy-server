// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShoppingCartItem is an object representing the database table.
type ShoppingCartItem struct {
	ID             string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	ShoppingCartID string    `boiler:"shopping_cart_id" boil:"shopping_cart_id" json:"shopping_cart_id" toml:"shopping_cart_id" yaml:"shopping_cart_id"`
	ProductID      string    `boiler:"product_id" boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	Quantity       int       `boiler:"quantity" boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`
	CreatedAt      time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *shoppingCartItemR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L shoppingCartItemL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShoppingCartItemColumns = struct {
	ID             string
	ShoppingCartID string
	ProductID      string
	Quantity       string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "id",
	ShoppingCartID: "shopping_cart_id",
	ProductID:      "product_id",
	Quantity:       "quantity",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

var ShoppingCartItemTableColumns = struct {
	ID             string
	ShoppingCartID string
	ProductID      string
	Quantity       string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "shopping_cart_items.id",
	ShoppingCartID: "shopping_cart_items.shopping_cart_id",
	ProductID:      "shopping_cart_items.product_id",
	Quantity:       "shopping_cart_items.quantity",
	CreatedAt:      "shopping_cart_items.created_at",
	UpdatedAt:      "shopping_cart_items.updated_at",
}

// Generated where

var ShoppingCartItemWhere = struct {
	ID             whereHelperstring
	ShoppingCartID whereHelperstring
	ProductID      whereHelperstring
	Quantity       whereHelperint
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
}{
	ID:             whereHelperstring{field: "\"shopping_cart_items\".\"id\""},
	ShoppingCartID: whereHelperstring{field: "\"shopping_cart_items\".\"shopping_cart_id\""},
	ProductID:      whereHelperstring{field: "\"shopping_cart_items\".\"product_id\""},
	Quantity:       whereHelperint{field: "\"shopping_cart_items\".\"quantity\""},
	CreatedAt:      whereHelpertime_Time{field: "\"shopping_cart_items\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"shopping_cart_items\".\"updated_at\""},
}

// ShoppingCartItemRels is where relationship names are stored.
var ShoppingCartItemRels = struct {
	Product      string
	ShoppingCart string
}{
	Product:      "Product",
	ShoppingCart: "ShoppingCart",
}

// shoppingCartItemR is where relationships are stored.
type shoppingCartItemR struct {
	Product      *FiatProduct  `boiler:"Product" boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	ShoppingCart *ShoppingCart `boiler:"ShoppingCart" boil:"ShoppingCart" json:"ShoppingCart" toml:"ShoppingCart" yaml:"ShoppingCart"`
}

// NewStruct creates a new relationship struct
func (*shoppingCartItemR) NewStruct() *shoppingCartItemR {
	return &shoppingCartItemR{}
}

// shoppingCartItemL is where Load methods for each relationship are stored.
type shoppingCartItemL struct{}

var (
	shoppingCartItemAllColumns            = []string{"id", "shopping_cart_id", "product_id", "quantity", "created_at", "updated_at"}
	shoppingCartItemColumnsWithoutDefault = []string{"shopping_cart_id", "product_id"}
	shoppingCartItemColumnsWithDefault    = []string{"id", "quantity", "created_at", "updated_at"}
	shoppingCartItemPrimaryKeyColumns     = []string{"id"}
	shoppingCartItemGeneratedColumns      = []string{}
)

type (
	// ShoppingCartItemSlice is an alias for a slice of pointers to ShoppingCartItem.
	// This should almost always be used instead of []ShoppingCartItem.
	ShoppingCartItemSlice []*ShoppingCartItem
	// ShoppingCartItemHook is the signature for custom ShoppingCartItem hook methods
	ShoppingCartItemHook func(boil.Executor, *ShoppingCartItem) error

	shoppingCartItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shoppingCartItemType                 = reflect.TypeOf(&ShoppingCartItem{})
	shoppingCartItemMapping              = queries.MakeStructMapping(shoppingCartItemType)
	shoppingCartItemPrimaryKeyMapping, _ = queries.BindMapping(shoppingCartItemType, shoppingCartItemMapping, shoppingCartItemPrimaryKeyColumns)
	shoppingCartItemInsertCacheMut       sync.RWMutex
	shoppingCartItemInsertCache          = make(map[string]insertCache)
	shoppingCartItemUpdateCacheMut       sync.RWMutex
	shoppingCartItemUpdateCache          = make(map[string]updateCache)
	shoppingCartItemUpsertCacheMut       sync.RWMutex
	shoppingCartItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var shoppingCartItemAfterSelectHooks []ShoppingCartItemHook

var shoppingCartItemBeforeInsertHooks []ShoppingCartItemHook
var shoppingCartItemAfterInsertHooks []ShoppingCartItemHook

var shoppingCartItemBeforeUpdateHooks []ShoppingCartItemHook
var shoppingCartItemAfterUpdateHooks []ShoppingCartItemHook

var shoppingCartItemBeforeDeleteHooks []ShoppingCartItemHook
var shoppingCartItemAfterDeleteHooks []ShoppingCartItemHook

var shoppingCartItemBeforeUpsertHooks []ShoppingCartItemHook
var shoppingCartItemAfterUpsertHooks []ShoppingCartItemHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ShoppingCartItem) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range shoppingCartItemAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ShoppingCartItem) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range shoppingCartItemBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ShoppingCartItem) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range shoppingCartItemAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ShoppingCartItem) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range shoppingCartItemBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ShoppingCartItem) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range shoppingCartItemAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ShoppingCartItem) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range shoppingCartItemBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ShoppingCartItem) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range shoppingCartItemAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ShoppingCartItem) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range shoppingCartItemBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ShoppingCartItem) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range shoppingCartItemAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShoppingCartItemHook registers your hook function for all future operations.
func AddShoppingCartItemHook(hookPoint boil.HookPoint, shoppingCartItemHook ShoppingCartItemHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		shoppingCartItemAfterSelectHooks = append(shoppingCartItemAfterSelectHooks, shoppingCartItemHook)
	case boil.BeforeInsertHook:
		shoppingCartItemBeforeInsertHooks = append(shoppingCartItemBeforeInsertHooks, shoppingCartItemHook)
	case boil.AfterInsertHook:
		shoppingCartItemAfterInsertHooks = append(shoppingCartItemAfterInsertHooks, shoppingCartItemHook)
	case boil.BeforeUpdateHook:
		shoppingCartItemBeforeUpdateHooks = append(shoppingCartItemBeforeUpdateHooks, shoppingCartItemHook)
	case boil.AfterUpdateHook:
		shoppingCartItemAfterUpdateHooks = append(shoppingCartItemAfterUpdateHooks, shoppingCartItemHook)
	case boil.BeforeDeleteHook:
		shoppingCartItemBeforeDeleteHooks = append(shoppingCartItemBeforeDeleteHooks, shoppingCartItemHook)
	case boil.AfterDeleteHook:
		shoppingCartItemAfterDeleteHooks = append(shoppingCartItemAfterDeleteHooks, shoppingCartItemHook)
	case boil.BeforeUpsertHook:
		shoppingCartItemBeforeUpsertHooks = append(shoppingCartItemBeforeUpsertHooks, shoppingCartItemHook)
	case boil.AfterUpsertHook:
		shoppingCartItemAfterUpsertHooks = append(shoppingCartItemAfterUpsertHooks, shoppingCartItemHook)
	}
}

// One returns a single shoppingCartItem record from the query.
func (q shoppingCartItemQuery) One(exec boil.Executor) (*ShoppingCartItem, error) {
	o := &ShoppingCartItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for shopping_cart_items")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ShoppingCartItem records from the query.
func (q shoppingCartItemQuery) All(exec boil.Executor) (ShoppingCartItemSlice, error) {
	var o []*ShoppingCartItem

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to ShoppingCartItem slice")
	}

	if len(shoppingCartItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ShoppingCartItem records in the query.
func (q shoppingCartItemQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count shopping_cart_items rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shoppingCartItemQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if shopping_cart_items exists")
	}

	return count > 0, nil
}

// Product pointed to by the foreign key.
func (o *ShoppingCartItem) Product(mods ...qm.QueryMod) fiatProductQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := FiatProducts(queryMods...)
	queries.SetFrom(query.Query, "\"fiat_products\"")

	return query
}

// ShoppingCart pointed to by the foreign key.
func (o *ShoppingCartItem) ShoppingCart(mods ...qm.QueryMod) shoppingCartQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ShoppingCartID),
	}

	queryMods = append(queryMods, mods...)

	query := ShoppingCarts(queryMods...)
	queries.SetFrom(query.Query, "\"shopping_carts\"")

	return query
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shoppingCartItemL) LoadProduct(e boil.Executor, singular bool, maybeShoppingCartItem interface{}, mods queries.Applicator) error {
	var slice []*ShoppingCartItem
	var object *ShoppingCartItem

	if singular {
		object = maybeShoppingCartItem.(*ShoppingCartItem)
	} else {
		slice = *maybeShoppingCartItem.(*[]*ShoppingCartItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shoppingCartItemR{}
		}
		args = append(args, object.ProductID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shoppingCartItemR{}
			}

			for _, a := range args {
				if a == obj.ProductID {
					continue Outer
				}
			}

			args = append(args, obj.ProductID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`fiat_products`),
		qm.WhereIn(`fiat_products.id in ?`, args...),
		qmhelper.WhereIsNull(`fiat_products.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load FiatProduct")
	}

	var resultSlice []*FiatProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice FiatProduct")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for fiat_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for fiat_products")
	}

	if len(shoppingCartItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &fiatProductR{}
		}
		foreign.R.ProductShoppingCartItems = append(foreign.R.ProductShoppingCartItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ID {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &fiatProductR{}
				}
				foreign.R.ProductShoppingCartItems = append(foreign.R.ProductShoppingCartItems, local)
				break
			}
		}
	}

	return nil
}

// LoadShoppingCart allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shoppingCartItemL) LoadShoppingCart(e boil.Executor, singular bool, maybeShoppingCartItem interface{}, mods queries.Applicator) error {
	var slice []*ShoppingCartItem
	var object *ShoppingCartItem

	if singular {
		object = maybeShoppingCartItem.(*ShoppingCartItem)
	} else {
		slice = *maybeShoppingCartItem.(*[]*ShoppingCartItem)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shoppingCartItemR{}
		}
		args = append(args, object.ShoppingCartID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shoppingCartItemR{}
			}

			for _, a := range args {
				if a == obj.ShoppingCartID {
					continue Outer
				}
			}

			args = append(args, obj.ShoppingCartID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shopping_carts`),
		qm.WhereIn(`shopping_carts.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ShoppingCart")
	}

	var resultSlice []*ShoppingCart
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ShoppingCart")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shopping_carts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shopping_carts")
	}

	if len(shoppingCartItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ShoppingCart = foreign
		if foreign.R == nil {
			foreign.R = &shoppingCartR{}
		}
		foreign.R.ShoppingCartItems = append(foreign.R.ShoppingCartItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ShoppingCartID == foreign.ID {
				local.R.ShoppingCart = foreign
				if foreign.R == nil {
					foreign.R = &shoppingCartR{}
				}
				foreign.R.ShoppingCartItems = append(foreign.R.ShoppingCartItems, local)
				break
			}
		}
	}

	return nil
}

// SetProduct of the shoppingCartItem to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.ProductShoppingCartItems.
func (o *ShoppingCartItem) SetProduct(exec boil.Executor, insert bool, related *FiatProduct) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shopping_cart_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, shoppingCartItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ID
	if o.R == nil {
		o.R = &shoppingCartItemR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &fiatProductR{
			ProductShoppingCartItems: ShoppingCartItemSlice{o},
		}
	} else {
		related.R.ProductShoppingCartItems = append(related.R.ProductShoppingCartItems, o)
	}

	return nil
}

// SetShoppingCart of the shoppingCartItem to the related item.
// Sets o.R.ShoppingCart to related.
// Adds o to related.R.ShoppingCartItems.
func (o *ShoppingCartItem) SetShoppingCart(exec boil.Executor, insert bool, related *ShoppingCart) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shopping_cart_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"shopping_cart_id"}),
		strmangle.WhereClause("\"", "\"", 2, shoppingCartItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ShoppingCartID = related.ID
	if o.R == nil {
		o.R = &shoppingCartItemR{
			ShoppingCart: related,
		}
	} else {
		o.R.ShoppingCart = related
	}

	if related.R == nil {
		related.R = &shoppingCartR{
			ShoppingCartItems: ShoppingCartItemSlice{o},
		}
	} else {
		related.R.ShoppingCartItems = append(related.R.ShoppingCartItems, o)
	}

	return nil
}

// ShoppingCartItems retrieves all the records using an executor.
func ShoppingCartItems(mods ...qm.QueryMod) shoppingCartItemQuery {
	mods = append(mods, qm.From("\"shopping_cart_items\""))
	return shoppingCartItemQuery{NewQuery(mods...)}
}

// FindShoppingCartItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShoppingCartItem(exec boil.Executor, iD string, selectCols ...string) (*ShoppingCartItem, error) {
	shoppingCartItemObj := &ShoppingCartItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shopping_cart_items\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, shoppingCartItemObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from shopping_cart_items")
	}

	if err = shoppingCartItemObj.doAfterSelectHooks(exec); err != nil {
		return shoppingCartItemObj, err
	}

	return shoppingCartItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShoppingCartItem) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no shopping_cart_items provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shoppingCartItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shoppingCartItemInsertCacheMut.RLock()
	cache, cached := shoppingCartItemInsertCache[key]
	shoppingCartItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shoppingCartItemAllColumns,
			shoppingCartItemColumnsWithDefault,
			shoppingCartItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shoppingCartItemType, shoppingCartItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shoppingCartItemType, shoppingCartItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shopping_cart_items\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shopping_cart_items\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into shopping_cart_items")
	}

	if !cached {
		shoppingCartItemInsertCacheMut.Lock()
		shoppingCartItemInsertCache[key] = cache
		shoppingCartItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the ShoppingCartItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShoppingCartItem) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	shoppingCartItemUpdateCacheMut.RLock()
	cache, cached := shoppingCartItemUpdateCache[key]
	shoppingCartItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shoppingCartItemAllColumns,
			shoppingCartItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update shopping_cart_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shopping_cart_items\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shoppingCartItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shoppingCartItemType, shoppingCartItemMapping, append(wl, shoppingCartItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update shopping_cart_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for shopping_cart_items")
	}

	if !cached {
		shoppingCartItemUpdateCacheMut.Lock()
		shoppingCartItemUpdateCache[key] = cache
		shoppingCartItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q shoppingCartItemQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for shopping_cart_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for shopping_cart_items")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShoppingCartItemSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shoppingCartItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shopping_cart_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shoppingCartItemPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in shoppingCartItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all shoppingCartItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShoppingCartItem) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no shopping_cart_items provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shoppingCartItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shoppingCartItemUpsertCacheMut.RLock()
	cache, cached := shoppingCartItemUpsertCache[key]
	shoppingCartItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			shoppingCartItemAllColumns,
			shoppingCartItemColumnsWithDefault,
			shoppingCartItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shoppingCartItemAllColumns,
			shoppingCartItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert shopping_cart_items, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(shoppingCartItemPrimaryKeyColumns))
			copy(conflict, shoppingCartItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shopping_cart_items\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(shoppingCartItemType, shoppingCartItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shoppingCartItemType, shoppingCartItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert shopping_cart_items")
	}

	if !cached {
		shoppingCartItemUpsertCacheMut.Lock()
		shoppingCartItemUpsertCache[key] = cache
		shoppingCartItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single ShoppingCartItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShoppingCartItem) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no ShoppingCartItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shoppingCartItemPrimaryKeyMapping)
	sql := "DELETE FROM \"shopping_cart_items\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from shopping_cart_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for shopping_cart_items")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shoppingCartItemQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no shoppingCartItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from shopping_cart_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for shopping_cart_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShoppingCartItemSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(shoppingCartItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shoppingCartItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shopping_cart_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shoppingCartItemPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from shoppingCartItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for shopping_cart_items")
	}

	if len(shoppingCartItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShoppingCartItem) Reload(exec boil.Executor) error {
	ret, err := FindShoppingCartItem(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShoppingCartItemSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShoppingCartItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shoppingCartItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shopping_cart_items\".* FROM \"shopping_cart_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shoppingCartItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in ShoppingCartItemSlice")
	}

	*o = slice

	return nil
}

// ShoppingCartItemExists checks if the ShoppingCartItem row exists.
func ShoppingCartItemExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shopping_cart_items\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if shopping_cart_items exists")
	}

	return exists, nil
}
