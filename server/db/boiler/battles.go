// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Battle is an object representing the database table.
type Battle struct {
	ID                      string              `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	GameMapID               string              `boiler:"game_map_id" boil:"game_map_id" json:"game_map_id" toml:"game_map_id" yaml:"game_map_id"`
	StartedAt               time.Time           `boiler:"started_at" boil:"started_at" json:"started_at" toml:"started_at" yaml:"started_at"`
	EndedAt                 null.Time           `boiler:"ended_at" boil:"ended_at" json:"ended_at,omitempty" toml:"ended_at" yaml:"ended_at,omitempty"`
	BattleNumber            int                 `boiler:"battle_number" boil:"battle_number" json:"battle_number" toml:"battle_number" yaml:"battle_number"`
	StartedBattleSecondsOld decimal.NullDecimal `boiler:"started_battle_seconds_old" boil:"started_battle_seconds_old" json:"started_battle_seconds_old,omitempty" toml:"started_battle_seconds_old" yaml:"started_battle_seconds_old,omitempty"`
	EndedBattleSecondsOld   decimal.NullDecimal `boiler:"ended_battle_seconds_old" boil:"ended_battle_seconds_old" json:"ended_battle_seconds_old,omitempty" toml:"ended_battle_seconds_old" yaml:"ended_battle_seconds_old,omitempty"`
	ArenaID                 string              `boiler:"arena_id" boil:"arena_id" json:"arena_id" toml:"arena_id" yaml:"arena_id"`

	R *battleR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L battleL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattleColumns = struct {
	ID                      string
	GameMapID               string
	StartedAt               string
	EndedAt                 string
	BattleNumber            string
	StartedBattleSecondsOld string
	EndedBattleSecondsOld   string
	ArenaID                 string
}{
	ID:                      "id",
	GameMapID:               "game_map_id",
	StartedAt:               "started_at",
	EndedAt:                 "ended_at",
	BattleNumber:            "battle_number",
	StartedBattleSecondsOld: "started_battle_seconds_old",
	EndedBattleSecondsOld:   "ended_battle_seconds_old",
	ArenaID:                 "arena_id",
}

var BattleTableColumns = struct {
	ID                      string
	GameMapID               string
	StartedAt               string
	EndedAt                 string
	BattleNumber            string
	StartedBattleSecondsOld string
	EndedBattleSecondsOld   string
	ArenaID                 string
}{
	ID:                      "battles.id",
	GameMapID:               "battles.game_map_id",
	StartedAt:               "battles.started_at",
	EndedAt:                 "battles.ended_at",
	BattleNumber:            "battles.battle_number",
	StartedBattleSecondsOld: "battles.started_battle_seconds_old",
	EndedBattleSecondsOld:   "battles.ended_battle_seconds_old",
	ArenaID:                 "battles.arena_id",
}

// Generated where

type whereHelperdecimal_NullDecimal struct{ field string }

func (w whereHelperdecimal_NullDecimal) EQ(x decimal.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelperdecimal_NullDecimal) NEQ(x decimal.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelperdecimal_NullDecimal) LT(x decimal.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperdecimal_NullDecimal) LTE(x decimal.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperdecimal_NullDecimal) GT(x decimal.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperdecimal_NullDecimal) GTE(x decimal.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelperdecimal_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelperdecimal_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var BattleWhere = struct {
	ID                      whereHelperstring
	GameMapID               whereHelperstring
	StartedAt               whereHelpertime_Time
	EndedAt                 whereHelpernull_Time
	BattleNumber            whereHelperint
	StartedBattleSecondsOld whereHelperdecimal_NullDecimal
	EndedBattleSecondsOld   whereHelperdecimal_NullDecimal
	ArenaID                 whereHelperstring
}{
	ID:                      whereHelperstring{field: "\"battles\".\"id\""},
	GameMapID:               whereHelperstring{field: "\"battles\".\"game_map_id\""},
	StartedAt:               whereHelpertime_Time{field: "\"battles\".\"started_at\""},
	EndedAt:                 whereHelpernull_Time{field: "\"battles\".\"ended_at\""},
	BattleNumber:            whereHelperint{field: "\"battles\".\"battle_number\""},
	StartedBattleSecondsOld: whereHelperdecimal_NullDecimal{field: "\"battles\".\"started_battle_seconds_old\""},
	EndedBattleSecondsOld:   whereHelperdecimal_NullDecimal{field: "\"battles\".\"ended_battle_seconds_old\""},
	ArenaID:                 whereHelperstring{field: "\"battles\".\"arena_id\""},
}

// BattleRels is where relationship names are stored.
var BattleRels = struct {
	Arena                              string
	GameMap                            string
	SpoilsOfWar                        string
	BattleNumberSpoilsOfWar            string
	BattleAbilityOptInLogs             string
	BattleAbilityTriggers              string
	BattleContracts                    string
	BattleContributions                string
	BattleEvents                       string
	BattleHistories                    string
	BattleKills                        string
	AssignedToBattleBattleLobbies      string
	AssignedToBattleBattleLobbiesMechs string
	BattleMechs                        string
	BattleQueueNotifications           string
	BattleQueueOlds                    string
	BattleReplays                      string
	Players                            string
	BattleWins                         string
	ChatHistories                      string
	ConsumedAbilities                  string
	MechMoveCommandLogs                string
	BattleNumberPlayerBans             string
	PlayerKillLogs                     string
	PlayerSpoilsOfWars                 string
}{
	Arena:                              "Arena",
	GameMap:                            "GameMap",
	SpoilsOfWar:                        "SpoilsOfWar",
	BattleNumberSpoilsOfWar:            "BattleNumberSpoilsOfWar",
	BattleAbilityOptInLogs:             "BattleAbilityOptInLogs",
	BattleAbilityTriggers:              "BattleAbilityTriggers",
	BattleContracts:                    "BattleContracts",
	BattleContributions:                "BattleContributions",
	BattleEvents:                       "BattleEvents",
	BattleHistories:                    "BattleHistories",
	BattleKills:                        "BattleKills",
	AssignedToBattleBattleLobbies:      "AssignedToBattleBattleLobbies",
	AssignedToBattleBattleLobbiesMechs: "AssignedToBattleBattleLobbiesMechs",
	BattleMechs:                        "BattleMechs",
	BattleQueueNotifications:           "BattleQueueNotifications",
	BattleQueueOlds:                    "BattleQueueOlds",
	BattleReplays:                      "BattleReplays",
	Players:                            "Players",
	BattleWins:                         "BattleWins",
	ChatHistories:                      "ChatHistories",
	ConsumedAbilities:                  "ConsumedAbilities",
	MechMoveCommandLogs:                "MechMoveCommandLogs",
	BattleNumberPlayerBans:             "BattleNumberPlayerBans",
	PlayerKillLogs:                     "PlayerKillLogs",
	PlayerSpoilsOfWars:                 "PlayerSpoilsOfWars",
}

// battleR is where relationships are stored.
type battleR struct {
	Arena                              *BattleArena                 `boiler:"Arena" boil:"Arena" json:"Arena" toml:"Arena" yaml:"Arena"`
	GameMap                            *GameMap                     `boiler:"GameMap" boil:"GameMap" json:"GameMap" toml:"GameMap" yaml:"GameMap"`
	SpoilsOfWar                        *SpoilsOfWar                 `boiler:"SpoilsOfWar" boil:"SpoilsOfWar" json:"SpoilsOfWar" toml:"SpoilsOfWar" yaml:"SpoilsOfWar"`
	BattleNumberSpoilsOfWar            *SpoilsOfWar                 `boiler:"BattleNumberSpoilsOfWar" boil:"BattleNumberSpoilsOfWar" json:"BattleNumberSpoilsOfWar" toml:"BattleNumberSpoilsOfWar" yaml:"BattleNumberSpoilsOfWar"`
	BattleAbilityOptInLogs             BattleAbilityOptInLogSlice   `boiler:"BattleAbilityOptInLogs" boil:"BattleAbilityOptInLogs" json:"BattleAbilityOptInLogs" toml:"BattleAbilityOptInLogs" yaml:"BattleAbilityOptInLogs"`
	BattleAbilityTriggers              BattleAbilityTriggerSlice    `boiler:"BattleAbilityTriggers" boil:"BattleAbilityTriggers" json:"BattleAbilityTriggers" toml:"BattleAbilityTriggers" yaml:"BattleAbilityTriggers"`
	BattleContracts                    BattleContractSlice          `boiler:"BattleContracts" boil:"BattleContracts" json:"BattleContracts" toml:"BattleContracts" yaml:"BattleContracts"`
	BattleContributions                BattleContributionSlice      `boiler:"BattleContributions" boil:"BattleContributions" json:"BattleContributions" toml:"BattleContributions" yaml:"BattleContributions"`
	BattleEvents                       BattleEventSlice             `boiler:"BattleEvents" boil:"BattleEvents" json:"BattleEvents" toml:"BattleEvents" yaml:"BattleEvents"`
	BattleHistories                    BattleHistorySlice           `boiler:"BattleHistories" boil:"BattleHistories" json:"BattleHistories" toml:"BattleHistories" yaml:"BattleHistories"`
	BattleKills                        BattleKillSlice              `boiler:"BattleKills" boil:"BattleKills" json:"BattleKills" toml:"BattleKills" yaml:"BattleKills"`
	AssignedToBattleBattleLobbies      BattleLobbySlice             `boiler:"AssignedToBattleBattleLobbies" boil:"AssignedToBattleBattleLobbies" json:"AssignedToBattleBattleLobbies" toml:"AssignedToBattleBattleLobbies" yaml:"AssignedToBattleBattleLobbies"`
	AssignedToBattleBattleLobbiesMechs BattleLobbiesMechSlice       `boiler:"AssignedToBattleBattleLobbiesMechs" boil:"AssignedToBattleBattleLobbiesMechs" json:"AssignedToBattleBattleLobbiesMechs" toml:"AssignedToBattleBattleLobbiesMechs" yaml:"AssignedToBattleBattleLobbiesMechs"`
	BattleMechs                        BattleMechSlice              `boiler:"BattleMechs" boil:"BattleMechs" json:"BattleMechs" toml:"BattleMechs" yaml:"BattleMechs"`
	BattleQueueNotifications           BattleQueueNotificationSlice `boiler:"BattleQueueNotifications" boil:"BattleQueueNotifications" json:"BattleQueueNotifications" toml:"BattleQueueNotifications" yaml:"BattleQueueNotifications"`
	BattleQueueOlds                    BattleQueueOldSlice          `boiler:"BattleQueueOlds" boil:"BattleQueueOlds" json:"BattleQueueOlds" toml:"BattleQueueOlds" yaml:"BattleQueueOlds"`
	BattleReplays                      BattleReplaySlice            `boiler:"BattleReplays" boil:"BattleReplays" json:"BattleReplays" toml:"BattleReplays" yaml:"BattleReplays"`
	Players                            PlayerSlice                  `boiler:"Players" boil:"Players" json:"Players" toml:"Players" yaml:"Players"`
	BattleWins                         BattleWinSlice               `boiler:"BattleWins" boil:"BattleWins" json:"BattleWins" toml:"BattleWins" yaml:"BattleWins"`
	ChatHistories                      ChatHistorySlice             `boiler:"ChatHistories" boil:"ChatHistories" json:"ChatHistories" toml:"ChatHistories" yaml:"ChatHistories"`
	ConsumedAbilities                  ConsumedAbilitySlice         `boiler:"ConsumedAbilities" boil:"ConsumedAbilities" json:"ConsumedAbilities" toml:"ConsumedAbilities" yaml:"ConsumedAbilities"`
	MechMoveCommandLogs                MechMoveCommandLogSlice      `boiler:"MechMoveCommandLogs" boil:"MechMoveCommandLogs" json:"MechMoveCommandLogs" toml:"MechMoveCommandLogs" yaml:"MechMoveCommandLogs"`
	BattleNumberPlayerBans             PlayerBanSlice               `boiler:"BattleNumberPlayerBans" boil:"BattleNumberPlayerBans" json:"BattleNumberPlayerBans" toml:"BattleNumberPlayerBans" yaml:"BattleNumberPlayerBans"`
	PlayerKillLogs                     PlayerKillLogSlice           `boiler:"PlayerKillLogs" boil:"PlayerKillLogs" json:"PlayerKillLogs" toml:"PlayerKillLogs" yaml:"PlayerKillLogs"`
	PlayerSpoilsOfWars                 PlayerSpoilsOfWarSlice       `boiler:"PlayerSpoilsOfWars" boil:"PlayerSpoilsOfWars" json:"PlayerSpoilsOfWars" toml:"PlayerSpoilsOfWars" yaml:"PlayerSpoilsOfWars"`
}

// NewStruct creates a new relationship struct
func (*battleR) NewStruct() *battleR {
	return &battleR{}
}

// battleL is where Load methods for each relationship are stored.
type battleL struct{}

var (
	battleAllColumns            = []string{"id", "game_map_id", "started_at", "ended_at", "battle_number", "started_battle_seconds_old", "ended_battle_seconds_old", "arena_id"}
	battleColumnsWithoutDefault = []string{"game_map_id", "arena_id"}
	battleColumnsWithDefault    = []string{"id", "started_at", "ended_at", "battle_number", "started_battle_seconds_old", "ended_battle_seconds_old"}
	battlePrimaryKeyColumns     = []string{"id"}
	battleGeneratedColumns      = []string{}
)

type (
	// BattleSlice is an alias for a slice of pointers to Battle.
	// This should almost always be used instead of []Battle.
	BattleSlice []*Battle
	// BattleHook is the signature for custom Battle hook methods
	BattleHook func(boil.Executor, *Battle) error

	battleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battleType                 = reflect.TypeOf(&Battle{})
	battleMapping              = queries.MakeStructMapping(battleType)
	battlePrimaryKeyMapping, _ = queries.BindMapping(battleType, battleMapping, battlePrimaryKeyColumns)
	battleInsertCacheMut       sync.RWMutex
	battleInsertCache          = make(map[string]insertCache)
	battleUpdateCacheMut       sync.RWMutex
	battleUpdateCache          = make(map[string]updateCache)
	battleUpsertCacheMut       sync.RWMutex
	battleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battleAfterSelectHooks []BattleHook

var battleBeforeInsertHooks []BattleHook
var battleAfterInsertHooks []BattleHook

var battleBeforeUpdateHooks []BattleHook
var battleAfterUpdateHooks []BattleHook

var battleBeforeDeleteHooks []BattleHook
var battleAfterDeleteHooks []BattleHook

var battleBeforeUpsertHooks []BattleHook
var battleAfterUpsertHooks []BattleHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Battle) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range battleAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Battle) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Battle) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Battle) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Battle) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Battle) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Battle) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Battle) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Battle) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattleHook registers your hook function for all future operations.
func AddBattleHook(hookPoint boil.HookPoint, battleHook BattleHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		battleAfterSelectHooks = append(battleAfterSelectHooks, battleHook)
	case boil.BeforeInsertHook:
		battleBeforeInsertHooks = append(battleBeforeInsertHooks, battleHook)
	case boil.AfterInsertHook:
		battleAfterInsertHooks = append(battleAfterInsertHooks, battleHook)
	case boil.BeforeUpdateHook:
		battleBeforeUpdateHooks = append(battleBeforeUpdateHooks, battleHook)
	case boil.AfterUpdateHook:
		battleAfterUpdateHooks = append(battleAfterUpdateHooks, battleHook)
	case boil.BeforeDeleteHook:
		battleBeforeDeleteHooks = append(battleBeforeDeleteHooks, battleHook)
	case boil.AfterDeleteHook:
		battleAfterDeleteHooks = append(battleAfterDeleteHooks, battleHook)
	case boil.BeforeUpsertHook:
		battleBeforeUpsertHooks = append(battleBeforeUpsertHooks, battleHook)
	case boil.AfterUpsertHook:
		battleAfterUpsertHooks = append(battleAfterUpsertHooks, battleHook)
	}
}

// One returns a single battle record from the query.
func (q battleQuery) One(exec boil.Executor) (*Battle, error) {
	o := &Battle{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for battles")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Battle records from the query.
func (q battleQuery) All(exec boil.Executor) (BattleSlice, error) {
	var o []*Battle

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Battle slice")
	}

	if len(battleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Battle records in the query.
func (q battleQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count battles rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battleQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if battles exists")
	}

	return count > 0, nil
}

// Arena pointed to by the foreign key.
func (o *Battle) Arena(mods ...qm.QueryMod) battleArenaQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ArenaID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := BattleArenas(queryMods...)
	queries.SetFrom(query.Query, "\"battle_arena\"")

	return query
}

// GameMap pointed to by the foreign key.
func (o *Battle) GameMap(mods ...qm.QueryMod) gameMapQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GameMapID),
	}

	queryMods = append(queryMods, mods...)

	query := GameMaps(queryMods...)
	queries.SetFrom(query.Query, "\"game_maps\"")

	return query
}

// SpoilsOfWar pointed to by the foreign key.
func (o *Battle) SpoilsOfWar(mods ...qm.QueryMod) spoilsOfWarQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"battle_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := SpoilsOfWars(queryMods...)
	queries.SetFrom(query.Query, "\"spoils_of_war\"")

	return query
}

// BattleNumberSpoilsOfWar pointed to by the foreign key.
func (o *Battle) BattleNumberSpoilsOfWar(mods ...qm.QueryMod) spoilsOfWarQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"battle_number\" = ?", o.BattleNumber),
	}

	queryMods = append(queryMods, mods...)

	query := SpoilsOfWars(queryMods...)
	queries.SetFrom(query.Query, "\"spoils_of_war\"")

	return query
}

// BattleAbilityOptInLogs retrieves all the battle_ability_opt_in_log's BattleAbilityOptInLogs with an executor.
func (o *Battle) BattleAbilityOptInLogs(mods ...qm.QueryMod) battleAbilityOptInLogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_ability_opt_in_logs\".\"battle_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"battle_ability_opt_in_logs\".\"deleted_at\""),
	)

	query := BattleAbilityOptInLogs(queryMods...)
	queries.SetFrom(query.Query, "\"battle_ability_opt_in_logs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_ability_opt_in_logs\".*"})
	}

	return query
}

// BattleAbilityTriggers retrieves all the battle_ability_trigger's BattleAbilityTriggers with an executor.
func (o *Battle) BattleAbilityTriggers(mods ...qm.QueryMod) battleAbilityTriggerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_ability_triggers\".\"battle_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"battle_ability_triggers\".\"deleted_at\""),
	)

	query := BattleAbilityTriggers(queryMods...)
	queries.SetFrom(query.Query, "\"battle_ability_triggers\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_ability_triggers\".*"})
	}

	return query
}

// BattleContracts retrieves all the battle_contract's BattleContracts with an executor.
func (o *Battle) BattleContracts(mods ...qm.QueryMod) battleContractQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_contracts\".\"battle_id\"=?", o.ID),
	)

	query := BattleContracts(queryMods...)
	queries.SetFrom(query.Query, "\"battle_contracts\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_contracts\".*"})
	}

	return query
}

// BattleContributions retrieves all the battle_contribution's BattleContributions with an executor.
func (o *Battle) BattleContributions(mods ...qm.QueryMod) battleContributionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_contributions\".\"battle_id\"=?", o.ID),
	)

	query := BattleContributions(queryMods...)
	queries.SetFrom(query.Query, "\"battle_contributions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_contributions\".*"})
	}

	return query
}

// BattleEvents retrieves all the battle_event's BattleEvents with an executor.
func (o *Battle) BattleEvents(mods ...qm.QueryMod) battleEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_events\".\"battle_id\"=?", o.ID),
	)

	query := BattleEvents(queryMods...)
	queries.SetFrom(query.Query, "\"battle_events\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_events\".*"})
	}

	return query
}

// BattleHistories retrieves all the battle_history's BattleHistories with an executor.
func (o *Battle) BattleHistories(mods ...qm.QueryMod) battleHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_history\".\"battle_id\"=?", o.ID),
	)

	query := BattleHistories(queryMods...)
	queries.SetFrom(query.Query, "\"battle_history\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_history\".*"})
	}

	return query
}

// BattleKills retrieves all the battle_kill's BattleKills with an executor.
func (o *Battle) BattleKills(mods ...qm.QueryMod) battleKillQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_kills\".\"battle_id\"=?", o.ID),
	)

	query := BattleKills(queryMods...)
	queries.SetFrom(query.Query, "\"battle_kills\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_kills\".*"})
	}

	return query
}

// AssignedToBattleBattleLobbies retrieves all the battle_lobby's BattleLobbies with an executor via assigned_to_battle_id column.
func (o *Battle) AssignedToBattleBattleLobbies(mods ...qm.QueryMod) battleLobbyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_lobbies\".\"assigned_to_battle_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"battle_lobbies\".\"deleted_at\""),
	)

	query := BattleLobbies(queryMods...)
	queries.SetFrom(query.Query, "\"battle_lobbies\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_lobbies\".*"})
	}

	return query
}

// AssignedToBattleBattleLobbiesMechs retrieves all the battle_lobbies_mech's BattleLobbiesMechs with an executor via assigned_to_battle_id column.
func (o *Battle) AssignedToBattleBattleLobbiesMechs(mods ...qm.QueryMod) battleLobbiesMechQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_lobbies_mechs\".\"assigned_to_battle_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"battle_lobbies_mechs\".\"deleted_at\""),
	)

	query := BattleLobbiesMechs(queryMods...)
	queries.SetFrom(query.Query, "\"battle_lobbies_mechs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_lobbies_mechs\".*"})
	}

	return query
}

// BattleMechs retrieves all the battle_mech's BattleMechs with an executor.
func (o *Battle) BattleMechs(mods ...qm.QueryMod) battleMechQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_mechs\".\"battle_id\"=?", o.ID),
	)

	query := BattleMechs(queryMods...)
	queries.SetFrom(query.Query, "\"battle_mechs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_mechs\".*"})
	}

	return query
}

// BattleQueueNotifications retrieves all the battle_queue_notification's BattleQueueNotifications with an executor.
func (o *Battle) BattleQueueNotifications(mods ...qm.QueryMod) battleQueueNotificationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_queue_notifications\".\"battle_id\"=?", o.ID),
	)

	query := BattleQueueNotifications(queryMods...)
	queries.SetFrom(query.Query, "\"battle_queue_notifications\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_queue_notifications\".*"})
	}

	return query
}

// BattleQueueOlds retrieves all the battle_queue_old's BattleQueueOlds with an executor.
func (o *Battle) BattleQueueOlds(mods ...qm.QueryMod) battleQueueOldQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_queue_old\".\"battle_id\"=?", o.ID),
	)

	query := BattleQueueOlds(queryMods...)
	queries.SetFrom(query.Query, "\"battle_queue_old\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_queue_old\".*"})
	}

	return query
}

// BattleReplays retrieves all the battle_replay's BattleReplays with an executor.
func (o *Battle) BattleReplays(mods ...qm.QueryMod) battleReplayQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_replays\".\"battle_id\"=?", o.ID),
	)

	query := BattleReplays(queryMods...)
	queries.SetFrom(query.Query, "\"battle_replays\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_replays\".*"})
	}

	return query
}

// Players retrieves all the player's Players with an executor.
func (o *Battle) Players(mods ...qm.QueryMod) playerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"battle_viewers\" on \"players\".\"id\" = \"battle_viewers\".\"player_id\""),
		qm.Where("\"battle_viewers\".\"battle_id\"=?", o.ID),
	)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"players\".*"})
	}

	return query
}

// BattleWins retrieves all the battle_win's BattleWins with an executor.
func (o *Battle) BattleWins(mods ...qm.QueryMod) battleWinQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_wins\".\"battle_id\"=?", o.ID),
	)

	query := BattleWins(queryMods...)
	queries.SetFrom(query.Query, "\"battle_wins\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_wins\".*"})
	}

	return query
}

// ChatHistories retrieves all the chat_history's ChatHistories with an executor.
func (o *Battle) ChatHistories(mods ...qm.QueryMod) chatHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chat_history\".\"battle_id\"=?", o.ID),
	)

	query := ChatHistories(queryMods...)
	queries.SetFrom(query.Query, "\"chat_history\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"chat_history\".*"})
	}

	return query
}

// ConsumedAbilities retrieves all the consumed_ability's ConsumedAbilities with an executor.
func (o *Battle) ConsumedAbilities(mods ...qm.QueryMod) consumedAbilityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"consumed_abilities\".\"battle_id\"=?", o.ID),
	)

	query := ConsumedAbilities(queryMods...)
	queries.SetFrom(query.Query, "\"consumed_abilities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"consumed_abilities\".*"})
	}

	return query
}

// MechMoveCommandLogs retrieves all the mech_move_command_log's MechMoveCommandLogs with an executor.
func (o *Battle) MechMoveCommandLogs(mods ...qm.QueryMod) mechMoveCommandLogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mech_move_command_logs\".\"battle_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"mech_move_command_logs\".\"deleted_at\""),
	)

	query := MechMoveCommandLogs(queryMods...)
	queries.SetFrom(query.Query, "\"mech_move_command_logs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mech_move_command_logs\".*"})
	}

	return query
}

// BattleNumberPlayerBans retrieves all the player_ban's PlayerBans with an executor via battle_number column.
func (o *Battle) BattleNumberPlayerBans(mods ...qm.QueryMod) playerBanQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"player_bans\".\"battle_number\"=?", o.BattleNumber),
		qmhelper.WhereIsNull("\"player_bans\".\"deleted_at\""),
	)

	query := PlayerBans(queryMods...)
	queries.SetFrom(query.Query, "\"player_bans\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"player_bans\".*"})
	}

	return query
}

// PlayerKillLogs retrieves all the player_kill_log's PlayerKillLogs with an executor.
func (o *Battle) PlayerKillLogs(mods ...qm.QueryMod) playerKillLogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"player_kill_log\".\"battle_id\"=?", o.ID),
	)

	query := PlayerKillLogs(queryMods...)
	queries.SetFrom(query.Query, "\"player_kill_log\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"player_kill_log\".*"})
	}

	return query
}

// PlayerSpoilsOfWars retrieves all the player_spoils_of_war's PlayerSpoilsOfWars with an executor.
func (o *Battle) PlayerSpoilsOfWars(mods ...qm.QueryMod) playerSpoilsOfWarQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"player_spoils_of_war\".\"battle_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"player_spoils_of_war\".\"deleted_at\""),
	)

	query := PlayerSpoilsOfWars(queryMods...)
	queries.SetFrom(query.Query, "\"player_spoils_of_war\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"player_spoils_of_war\".*"})
	}

	return query
}

// LoadArena allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleL) LoadArena(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.ArenaID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if a == obj.ArenaID {
					continue Outer
				}
			}

			args = append(args, obj.ArenaID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_arena`),
		qm.WhereIn(`battle_arena.id in ?`, args...),
		qmhelper.WhereIsNull(`battle_arena.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BattleArena")
	}

	var resultSlice []*BattleArena
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BattleArena")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battle_arena")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_arena")
	}

	if len(battleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Arena = foreign
		if foreign.R == nil {
			foreign.R = &battleArenaR{}
		}
		foreign.R.ArenaBattles = append(foreign.R.ArenaBattles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ArenaID == foreign.ID {
				local.R.Arena = foreign
				if foreign.R == nil {
					foreign.R = &battleArenaR{}
				}
				foreign.R.ArenaBattles = append(foreign.R.ArenaBattles, local)
				break
			}
		}
	}

	return nil
}

// LoadGameMap allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleL) LoadGameMap(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.GameMapID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if a == obj.GameMapID {
					continue Outer
				}
			}

			args = append(args, obj.GameMapID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`game_maps`),
		qm.WhereIn(`game_maps.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GameMap")
	}

	var resultSlice []*GameMap
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GameMap")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for game_maps")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_maps")
	}

	if len(battleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GameMap = foreign
		if foreign.R == nil {
			foreign.R = &gameMapR{}
		}
		foreign.R.Battles = append(foreign.R.Battles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GameMapID == foreign.ID {
				local.R.GameMap = foreign
				if foreign.R == nil {
					foreign.R = &gameMapR{}
				}
				foreign.R.Battles = append(foreign.R.Battles, local)
				break
			}
		}
	}

	return nil
}

// LoadSpoilsOfWar allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (battleL) LoadSpoilsOfWar(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`spoils_of_war`),
		qm.WhereIn(`spoils_of_war.battle_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SpoilsOfWar")
	}

	var resultSlice []*SpoilsOfWar
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SpoilsOfWar")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for spoils_of_war")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for spoils_of_war")
	}

	if len(battleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SpoilsOfWar = foreign
		if foreign.R == nil {
			foreign.R = &spoilsOfWarR{}
		}
		foreign.R.Battle = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.BattleID {
				local.R.SpoilsOfWar = foreign
				if foreign.R == nil {
					foreign.R = &spoilsOfWarR{}
				}
				foreign.R.Battle = local
				break
			}
		}
	}

	return nil
}

// LoadBattleNumberSpoilsOfWar allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (battleL) LoadBattleNumberSpoilsOfWar(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.BattleNumber)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if a == obj.BattleNumber {
					continue Outer
				}
			}

			args = append(args, obj.BattleNumber)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`spoils_of_war`),
		qm.WhereIn(`spoils_of_war.battle_number in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SpoilsOfWar")
	}

	var resultSlice []*SpoilsOfWar
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SpoilsOfWar")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for spoils_of_war")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for spoils_of_war")
	}

	if len(battleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BattleNumberSpoilsOfWar = foreign
		if foreign.R == nil {
			foreign.R = &spoilsOfWarR{}
		}
		foreign.R.BattleNumberBattle = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BattleNumber == foreign.BattleNumber {
				local.R.BattleNumberSpoilsOfWar = foreign
				if foreign.R == nil {
					foreign.R = &spoilsOfWarR{}
				}
				foreign.R.BattleNumberBattle = local
				break
			}
		}
	}

	return nil
}

// LoadBattleAbilityOptInLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleL) LoadBattleAbilityOptInLogs(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_ability_opt_in_logs`),
		qm.WhereIn(`battle_ability_opt_in_logs.battle_id in ?`, args...),
		qmhelper.WhereIsNull(`battle_ability_opt_in_logs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_ability_opt_in_logs")
	}

	var resultSlice []*BattleAbilityOptInLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_ability_opt_in_logs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_ability_opt_in_logs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_ability_opt_in_logs")
	}

	if len(battleAbilityOptInLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleAbilityOptInLogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleAbilityOptInLogR{}
			}
			foreign.R.Battle = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BattleID {
				local.R.BattleAbilityOptInLogs = append(local.R.BattleAbilityOptInLogs, foreign)
				if foreign.R == nil {
					foreign.R = &battleAbilityOptInLogR{}
				}
				foreign.R.Battle = local
				break
			}
		}
	}

	return nil
}

// LoadBattleAbilityTriggers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleL) LoadBattleAbilityTriggers(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_ability_triggers`),
		qm.WhereIn(`battle_ability_triggers.battle_id in ?`, args...),
		qmhelper.WhereIsNull(`battle_ability_triggers.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_ability_triggers")
	}

	var resultSlice []*BattleAbilityTrigger
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_ability_triggers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_ability_triggers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_ability_triggers")
	}

	if len(battleAbilityTriggerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleAbilityTriggers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleAbilityTriggerR{}
			}
			foreign.R.Battle = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BattleID {
				local.R.BattleAbilityTriggers = append(local.R.BattleAbilityTriggers, foreign)
				if foreign.R == nil {
					foreign.R = &battleAbilityTriggerR{}
				}
				foreign.R.Battle = local
				break
			}
		}
	}

	return nil
}

// LoadBattleContracts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleL) LoadBattleContracts(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_contracts`),
		qm.WhereIn(`battle_contracts.battle_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_contracts")
	}

	var resultSlice []*BattleContract
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_contracts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_contracts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_contracts")
	}

	if len(battleContractAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleContracts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleContractR{}
			}
			foreign.R.Battle = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BattleID) {
				local.R.BattleContracts = append(local.R.BattleContracts, foreign)
				if foreign.R == nil {
					foreign.R = &battleContractR{}
				}
				foreign.R.Battle = local
				break
			}
		}
	}

	return nil
}

// LoadBattleContributions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleL) LoadBattleContributions(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_contributions`),
		qm.WhereIn(`battle_contributions.battle_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_contributions")
	}

	var resultSlice []*BattleContribution
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_contributions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_contributions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_contributions")
	}

	if len(battleContributionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleContributions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleContributionR{}
			}
			foreign.R.Battle = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BattleID {
				local.R.BattleContributions = append(local.R.BattleContributions, foreign)
				if foreign.R == nil {
					foreign.R = &battleContributionR{}
				}
				foreign.R.Battle = local
				break
			}
		}
	}

	return nil
}

// LoadBattleEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleL) LoadBattleEvents(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_events`),
		qm.WhereIn(`battle_events.battle_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_events")
	}

	var resultSlice []*BattleEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_events")
	}

	if len(battleEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleEventR{}
			}
			foreign.R.Battle = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BattleID) {
				local.R.BattleEvents = append(local.R.BattleEvents, foreign)
				if foreign.R == nil {
					foreign.R = &battleEventR{}
				}
				foreign.R.Battle = local
				break
			}
		}
	}

	return nil
}

// LoadBattleHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleL) LoadBattleHistories(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_history`),
		qm.WhereIn(`battle_history.battle_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_history")
	}

	var resultSlice []*BattleHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_history")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_history")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_history")
	}

	if len(battleHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleHistoryR{}
			}
			foreign.R.Battle = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BattleID {
				local.R.BattleHistories = append(local.R.BattleHistories, foreign)
				if foreign.R == nil {
					foreign.R = &battleHistoryR{}
				}
				foreign.R.Battle = local
				break
			}
		}
	}

	return nil
}

// LoadBattleKills allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleL) LoadBattleKills(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_kills`),
		qm.WhereIn(`battle_kills.battle_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_kills")
	}

	var resultSlice []*BattleKill
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_kills")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_kills")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_kills")
	}

	if len(battleKillAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleKills = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleKillR{}
			}
			foreign.R.Battle = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BattleID {
				local.R.BattleKills = append(local.R.BattleKills, foreign)
				if foreign.R == nil {
					foreign.R = &battleKillR{}
				}
				foreign.R.Battle = local
				break
			}
		}
	}

	return nil
}

// LoadAssignedToBattleBattleLobbies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleL) LoadAssignedToBattleBattleLobbies(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_lobbies`),
		qm.WhereIn(`battle_lobbies.assigned_to_battle_id in ?`, args...),
		qmhelper.WhereIsNull(`battle_lobbies.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_lobbies")
	}

	var resultSlice []*BattleLobby
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_lobbies")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_lobbies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_lobbies")
	}

	if len(battleLobbyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AssignedToBattleBattleLobbies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleLobbyR{}
			}
			foreign.R.AssignedToBattle = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AssignedToBattleID) {
				local.R.AssignedToBattleBattleLobbies = append(local.R.AssignedToBattleBattleLobbies, foreign)
				if foreign.R == nil {
					foreign.R = &battleLobbyR{}
				}
				foreign.R.AssignedToBattle = local
				break
			}
		}
	}

	return nil
}

// LoadAssignedToBattleBattleLobbiesMechs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleL) LoadAssignedToBattleBattleLobbiesMechs(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_lobbies_mechs`),
		qm.WhereIn(`battle_lobbies_mechs.assigned_to_battle_id in ?`, args...),
		qmhelper.WhereIsNull(`battle_lobbies_mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_lobbies_mechs")
	}

	var resultSlice []*BattleLobbiesMech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_lobbies_mechs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_lobbies_mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_lobbies_mechs")
	}

	if len(battleLobbiesMechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AssignedToBattleBattleLobbiesMechs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleLobbiesMechR{}
			}
			foreign.R.AssignedToBattle = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AssignedToBattleID) {
				local.R.AssignedToBattleBattleLobbiesMechs = append(local.R.AssignedToBattleBattleLobbiesMechs, foreign)
				if foreign.R == nil {
					foreign.R = &battleLobbiesMechR{}
				}
				foreign.R.AssignedToBattle = local
				break
			}
		}
	}

	return nil
}

// LoadBattleMechs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleL) LoadBattleMechs(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_mechs`),
		qm.WhereIn(`battle_mechs.battle_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_mechs")
	}

	var resultSlice []*BattleMech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_mechs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_mechs")
	}

	if len(battleMechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleMechs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleMechR{}
			}
			foreign.R.Battle = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BattleID {
				local.R.BattleMechs = append(local.R.BattleMechs, foreign)
				if foreign.R == nil {
					foreign.R = &battleMechR{}
				}
				foreign.R.Battle = local
				break
			}
		}
	}

	return nil
}

// LoadBattleQueueNotifications allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleL) LoadBattleQueueNotifications(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_queue_notifications`),
		qm.WhereIn(`battle_queue_notifications.battle_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_queue_notifications")
	}

	var resultSlice []*BattleQueueNotification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_queue_notifications")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_queue_notifications")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_queue_notifications")
	}

	if len(battleQueueNotificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleQueueNotifications = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleQueueNotificationR{}
			}
			foreign.R.Battle = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BattleID) {
				local.R.BattleQueueNotifications = append(local.R.BattleQueueNotifications, foreign)
				if foreign.R == nil {
					foreign.R = &battleQueueNotificationR{}
				}
				foreign.R.Battle = local
				break
			}
		}
	}

	return nil
}

// LoadBattleQueueOlds allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleL) LoadBattleQueueOlds(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_queue_old`),
		qm.WhereIn(`battle_queue_old.battle_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_queue_old")
	}

	var resultSlice []*BattleQueueOld
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_queue_old")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_queue_old")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_queue_old")
	}

	if len(battleQueueOldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleQueueOlds = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleQueueOldR{}
			}
			foreign.R.Battle = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BattleID) {
				local.R.BattleQueueOlds = append(local.R.BattleQueueOlds, foreign)
				if foreign.R == nil {
					foreign.R = &battleQueueOldR{}
				}
				foreign.R.Battle = local
				break
			}
		}
	}

	return nil
}

// LoadBattleReplays allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleL) LoadBattleReplays(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_replays`),
		qm.WhereIn(`battle_replays.battle_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_replays")
	}

	var resultSlice []*BattleReplay
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_replays")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_replays")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_replays")
	}

	if len(battleReplayAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleReplays = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleReplayR{}
			}
			foreign.R.Battle = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BattleID {
				local.R.BattleReplays = append(local.R.BattleReplays, foreign)
				if foreign.R == nil {
					foreign.R = &battleReplayR{}
				}
				foreign.R.Battle = local
				break
			}
		}
	}

	return nil
}

// LoadPlayers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleL) LoadPlayers(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"players\".id, \"players\".faction_id, \"players\".username, \"players\".public_address, \"players\".is_ai, \"players\".deleted_at, \"players\".updated_at, \"players\".created_at, \"players\".mobile_number, \"players\".issue_punish_fee, \"players\".reported_cost, \"players\".gid, \"players\".rank, \"players\".sent_message_count, \"players\".about_me, \"players\".profile_avatar_id, \"players\".syndicate_id, \"players\".custom_avatar_id, \"players\".stripe_customer_id, \"players\".role_id, \"players\".accepts_marketing, \"a\".\"battle_id\""),
		qm.From("\"players\""),
		qm.InnerJoin("\"battle_viewers\" as \"a\" on \"players\".\"id\" = \"a\".\"player_id\""),
		qm.WhereIn("\"a\".\"battle_id\" in ?", args...),
		qmhelper.WhereIsNull("\"players\".\"deleted_at\""),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load players")
	}

	var resultSlice []*Player

	var localJoinCols []string
	for results.Next() {
		one := new(Player)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.FactionID, &one.Username, &one.PublicAddress, &one.IsAi, &one.DeletedAt, &one.UpdatedAt, &one.CreatedAt, &one.MobileNumber, &one.IssuePunishFee, &one.ReportedCost, &one.Gid, &one.Rank, &one.SentMessageCount, &one.AboutMe, &one.ProfileAvatarID, &one.SyndicateID, &one.CustomAvatarID, &one.StripeCustomerID, &one.RoleID, &one.AcceptsMarketing, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for players")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice players")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(playerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Players = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playerR{}
			}
			foreign.R.Battles = append(foreign.R.Battles, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Players = append(local.R.Players, foreign)
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.Battles = append(foreign.R.Battles, local)
				break
			}
		}
	}

	return nil
}

// LoadBattleWins allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleL) LoadBattleWins(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_wins`),
		qm.WhereIn(`battle_wins.battle_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_wins")
	}

	var resultSlice []*BattleWin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_wins")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_wins")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_wins")
	}

	if len(battleWinAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleWins = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleWinR{}
			}
			foreign.R.Battle = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BattleID {
				local.R.BattleWins = append(local.R.BattleWins, foreign)
				if foreign.R == nil {
					foreign.R = &battleWinR{}
				}
				foreign.R.Battle = local
				break
			}
		}
	}

	return nil
}

// LoadChatHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleL) LoadChatHistories(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chat_history`),
		qm.WhereIn(`chat_history.battle_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chat_history")
	}

	var resultSlice []*ChatHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chat_history")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chat_history")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chat_history")
	}

	if len(chatHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChatHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chatHistoryR{}
			}
			foreign.R.Battle = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BattleID) {
				local.R.ChatHistories = append(local.R.ChatHistories, foreign)
				if foreign.R == nil {
					foreign.R = &chatHistoryR{}
				}
				foreign.R.Battle = local
				break
			}
		}
	}

	return nil
}

// LoadConsumedAbilities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleL) LoadConsumedAbilities(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`consumed_abilities`),
		qm.WhereIn(`consumed_abilities.battle_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load consumed_abilities")
	}

	var resultSlice []*ConsumedAbility
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice consumed_abilities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on consumed_abilities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for consumed_abilities")
	}

	if len(consumedAbilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ConsumedAbilities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &consumedAbilityR{}
			}
			foreign.R.Battle = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BattleID {
				local.R.ConsumedAbilities = append(local.R.ConsumedAbilities, foreign)
				if foreign.R == nil {
					foreign.R = &consumedAbilityR{}
				}
				foreign.R.Battle = local
				break
			}
		}
	}

	return nil
}

// LoadMechMoveCommandLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleL) LoadMechMoveCommandLogs(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_move_command_logs`),
		qm.WhereIn(`mech_move_command_logs.battle_id in ?`, args...),
		qmhelper.WhereIsNull(`mech_move_command_logs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mech_move_command_logs")
	}

	var resultSlice []*MechMoveCommandLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mech_move_command_logs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mech_move_command_logs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_move_command_logs")
	}

	if len(mechMoveCommandLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MechMoveCommandLogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mechMoveCommandLogR{}
			}
			foreign.R.Battle = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BattleID {
				local.R.MechMoveCommandLogs = append(local.R.MechMoveCommandLogs, foreign)
				if foreign.R == nil {
					foreign.R = &mechMoveCommandLogR{}
				}
				foreign.R.Battle = local
				break
			}
		}
	}

	return nil
}

// LoadBattleNumberPlayerBans allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleL) LoadBattleNumberPlayerBans(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.BattleNumber)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BattleNumber) {
					continue Outer
				}
			}

			args = append(args, obj.BattleNumber)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`player_bans`),
		qm.WhereIn(`player_bans.battle_number in ?`, args...),
		qmhelper.WhereIsNull(`player_bans.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load player_bans")
	}

	var resultSlice []*PlayerBan
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice player_bans")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on player_bans")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for player_bans")
	}

	if len(playerBanAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleNumberPlayerBans = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playerBanR{}
			}
			foreign.R.BattleNumberBattle = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BattleNumber, foreign.BattleNumber) {
				local.R.BattleNumberPlayerBans = append(local.R.BattleNumberPlayerBans, foreign)
				if foreign.R == nil {
					foreign.R = &playerBanR{}
				}
				foreign.R.BattleNumberBattle = local
				break
			}
		}
	}

	return nil
}

// LoadPlayerKillLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleL) LoadPlayerKillLogs(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`player_kill_log`),
		qm.WhereIn(`player_kill_log.battle_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load player_kill_log")
	}

	var resultSlice []*PlayerKillLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice player_kill_log")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on player_kill_log")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for player_kill_log")
	}

	if len(playerKillLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PlayerKillLogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playerKillLogR{}
			}
			foreign.R.Battle = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BattleID {
				local.R.PlayerKillLogs = append(local.R.PlayerKillLogs, foreign)
				if foreign.R == nil {
					foreign.R = &playerKillLogR{}
				}
				foreign.R.Battle = local
				break
			}
		}
	}

	return nil
}

// LoadPlayerSpoilsOfWars allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleL) LoadPlayerSpoilsOfWars(e boil.Executor, singular bool, maybeBattle interface{}, mods queries.Applicator) error {
	var slice []*Battle
	var object *Battle

	if singular {
		object = maybeBattle.(*Battle)
	} else {
		slice = *maybeBattle.(*[]*Battle)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`player_spoils_of_war`),
		qm.WhereIn(`player_spoils_of_war.battle_id in ?`, args...),
		qmhelper.WhereIsNull(`player_spoils_of_war.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load player_spoils_of_war")
	}

	var resultSlice []*PlayerSpoilsOfWar
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice player_spoils_of_war")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on player_spoils_of_war")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for player_spoils_of_war")
	}

	if len(playerSpoilsOfWarAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PlayerSpoilsOfWars = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playerSpoilsOfWarR{}
			}
			foreign.R.Battle = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BattleID {
				local.R.PlayerSpoilsOfWars = append(local.R.PlayerSpoilsOfWars, foreign)
				if foreign.R == nil {
					foreign.R = &playerSpoilsOfWarR{}
				}
				foreign.R.Battle = local
				break
			}
		}
	}

	return nil
}

// SetArena of the battle to the related item.
// Sets o.R.Arena to related.
// Adds o to related.R.ArenaBattles.
func (o *Battle) SetArena(exec boil.Executor, insert bool, related *BattleArena) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"arena_id"}),
		strmangle.WhereClause("\"", "\"", 2, battlePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ArenaID = related.ID
	if o.R == nil {
		o.R = &battleR{
			Arena: related,
		}
	} else {
		o.R.Arena = related
	}

	if related.R == nil {
		related.R = &battleArenaR{
			ArenaBattles: BattleSlice{o},
		}
	} else {
		related.R.ArenaBattles = append(related.R.ArenaBattles, o)
	}

	return nil
}

// SetGameMap of the battle to the related item.
// Sets o.R.GameMap to related.
// Adds o to related.R.Battles.
func (o *Battle) SetGameMap(exec boil.Executor, insert bool, related *GameMap) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"game_map_id"}),
		strmangle.WhereClause("\"", "\"", 2, battlePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GameMapID = related.ID
	if o.R == nil {
		o.R = &battleR{
			GameMap: related,
		}
	} else {
		o.R.GameMap = related
	}

	if related.R == nil {
		related.R = &gameMapR{
			Battles: BattleSlice{o},
		}
	} else {
		related.R.Battles = append(related.R.Battles, o)
	}

	return nil
}

// SetSpoilsOfWar of the battle to the related item.
// Sets o.R.SpoilsOfWar to related.
// Adds o to related.R.Battle.
func (o *Battle) SetSpoilsOfWar(exec boil.Executor, insert bool, related *SpoilsOfWar) error {
	var err error

	if insert {
		related.BattleID = o.ID

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"spoils_of_war\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
			strmangle.WhereClause("\"", "\"", 2, spoilsOfWarPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.BattleID = o.ID

	}

	if o.R == nil {
		o.R = &battleR{
			SpoilsOfWar: related,
		}
	} else {
		o.R.SpoilsOfWar = related
	}

	if related.R == nil {
		related.R = &spoilsOfWarR{
			Battle: o,
		}
	} else {
		related.R.Battle = o
	}
	return nil
}

// SetBattleNumberSpoilsOfWar of the battle to the related item.
// Sets o.R.BattleNumberSpoilsOfWar to related.
// Adds o to related.R.BattleNumberBattle.
func (o *Battle) SetBattleNumberSpoilsOfWar(exec boil.Executor, insert bool, related *SpoilsOfWar) error {
	var err error

	if insert {
		related.BattleNumber = o.BattleNumber

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"spoils_of_war\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"battle_number"}),
			strmangle.WhereClause("\"", "\"", 2, spoilsOfWarPrimaryKeyColumns),
		)
		values := []interface{}{o.BattleNumber, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.BattleNumber = o.BattleNumber

	}

	if o.R == nil {
		o.R = &battleR{
			BattleNumberSpoilsOfWar: related,
		}
	} else {
		o.R.BattleNumberSpoilsOfWar = related
	}

	if related.R == nil {
		related.R = &spoilsOfWarR{
			BattleNumberBattle: o,
		}
	} else {
		related.R.BattleNumberBattle = o
	}
	return nil
}

// AddBattleAbilityOptInLogs adds the given related objects to the existing relationships
// of the battle, optionally inserting them as new records.
// Appends related to o.R.BattleAbilityOptInLogs.
// Sets related.R.Battle appropriately.
func (o *Battle) AddBattleAbilityOptInLogs(exec boil.Executor, insert bool, related ...*BattleAbilityOptInLog) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BattleID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_ability_opt_in_logs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleAbilityOptInLogPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BattleID = o.ID
		}
	}

	if o.R == nil {
		o.R = &battleR{
			BattleAbilityOptInLogs: related,
		}
	} else {
		o.R.BattleAbilityOptInLogs = append(o.R.BattleAbilityOptInLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleAbilityOptInLogR{
				Battle: o,
			}
		} else {
			rel.R.Battle = o
		}
	}
	return nil
}

// AddBattleAbilityTriggers adds the given related objects to the existing relationships
// of the battle, optionally inserting them as new records.
// Appends related to o.R.BattleAbilityTriggers.
// Sets related.R.Battle appropriately.
func (o *Battle) AddBattleAbilityTriggers(exec boil.Executor, insert bool, related ...*BattleAbilityTrigger) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BattleID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_ability_triggers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleAbilityTriggerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BattleID = o.ID
		}
	}

	if o.R == nil {
		o.R = &battleR{
			BattleAbilityTriggers: related,
		}
	} else {
		o.R.BattleAbilityTriggers = append(o.R.BattleAbilityTriggers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleAbilityTriggerR{
				Battle: o,
			}
		} else {
			rel.R.Battle = o
		}
	}
	return nil
}

// AddBattleContracts adds the given related objects to the existing relationships
// of the battle, optionally inserting them as new records.
// Appends related to o.R.BattleContracts.
// Sets related.R.Battle appropriately.
func (o *Battle) AddBattleContracts(exec boil.Executor, insert bool, related ...*BattleContract) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BattleID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_contracts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleContractPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BattleID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &battleR{
			BattleContracts: related,
		}
	} else {
		o.R.BattleContracts = append(o.R.BattleContracts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleContractR{
				Battle: o,
			}
		} else {
			rel.R.Battle = o
		}
	}
	return nil
}

// SetBattleContracts removes all previously related items of the
// battle replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Battle's BattleContracts accordingly.
// Replaces o.R.BattleContracts with related.
// Sets related.R.Battle's BattleContracts accordingly.
func (o *Battle) SetBattleContracts(exec boil.Executor, insert bool, related ...*BattleContract) error {
	query := "update \"battle_contracts\" set \"battle_id\" = null where \"battle_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BattleContracts {
			queries.SetScanner(&rel.BattleID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Battle = nil
		}

		o.R.BattleContracts = nil
	}
	return o.AddBattleContracts(exec, insert, related...)
}

// RemoveBattleContracts relationships from objects passed in.
// Removes related items from R.BattleContracts (uses pointer comparison, removal does not keep order)
// Sets related.R.Battle.
func (o *Battle) RemoveBattleContracts(exec boil.Executor, related ...*BattleContract) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BattleID, nil)
		if rel.R != nil {
			rel.R.Battle = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("battle_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BattleContracts {
			if rel != ri {
				continue
			}

			ln := len(o.R.BattleContracts)
			if ln > 1 && i < ln-1 {
				o.R.BattleContracts[i] = o.R.BattleContracts[ln-1]
			}
			o.R.BattleContracts = o.R.BattleContracts[:ln-1]
			break
		}
	}

	return nil
}

// AddBattleContributions adds the given related objects to the existing relationships
// of the battle, optionally inserting them as new records.
// Appends related to o.R.BattleContributions.
// Sets related.R.Battle appropriately.
func (o *Battle) AddBattleContributions(exec boil.Executor, insert bool, related ...*BattleContribution) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BattleID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_contributions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleContributionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BattleID = o.ID
		}
	}

	if o.R == nil {
		o.R = &battleR{
			BattleContributions: related,
		}
	} else {
		o.R.BattleContributions = append(o.R.BattleContributions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleContributionR{
				Battle: o,
			}
		} else {
			rel.R.Battle = o
		}
	}
	return nil
}

// AddBattleEvents adds the given related objects to the existing relationships
// of the battle, optionally inserting them as new records.
// Appends related to o.R.BattleEvents.
// Sets related.R.Battle appropriately.
func (o *Battle) AddBattleEvents(exec boil.Executor, insert bool, related ...*BattleEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BattleID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BattleID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &battleR{
			BattleEvents: related,
		}
	} else {
		o.R.BattleEvents = append(o.R.BattleEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleEventR{
				Battle: o,
			}
		} else {
			rel.R.Battle = o
		}
	}
	return nil
}

// SetBattleEvents removes all previously related items of the
// battle replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Battle's BattleEvents accordingly.
// Replaces o.R.BattleEvents with related.
// Sets related.R.Battle's BattleEvents accordingly.
func (o *Battle) SetBattleEvents(exec boil.Executor, insert bool, related ...*BattleEvent) error {
	query := "update \"battle_events\" set \"battle_id\" = null where \"battle_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BattleEvents {
			queries.SetScanner(&rel.BattleID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Battle = nil
		}

		o.R.BattleEvents = nil
	}
	return o.AddBattleEvents(exec, insert, related...)
}

// RemoveBattleEvents relationships from objects passed in.
// Removes related items from R.BattleEvents (uses pointer comparison, removal does not keep order)
// Sets related.R.Battle.
func (o *Battle) RemoveBattleEvents(exec boil.Executor, related ...*BattleEvent) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BattleID, nil)
		if rel.R != nil {
			rel.R.Battle = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("battle_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BattleEvents {
			if rel != ri {
				continue
			}

			ln := len(o.R.BattleEvents)
			if ln > 1 && i < ln-1 {
				o.R.BattleEvents[i] = o.R.BattleEvents[ln-1]
			}
			o.R.BattleEvents = o.R.BattleEvents[:ln-1]
			break
		}
	}

	return nil
}

// AddBattleHistories adds the given related objects to the existing relationships
// of the battle, optionally inserting them as new records.
// Appends related to o.R.BattleHistories.
// Sets related.R.Battle appropriately.
func (o *Battle) AddBattleHistories(exec boil.Executor, insert bool, related ...*BattleHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BattleID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_history\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BattleID = o.ID
		}
	}

	if o.R == nil {
		o.R = &battleR{
			BattleHistories: related,
		}
	} else {
		o.R.BattleHistories = append(o.R.BattleHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleHistoryR{
				Battle: o,
			}
		} else {
			rel.R.Battle = o
		}
	}
	return nil
}

// AddBattleKills adds the given related objects to the existing relationships
// of the battle, optionally inserting them as new records.
// Appends related to o.R.BattleKills.
// Sets related.R.Battle appropriately.
func (o *Battle) AddBattleKills(exec boil.Executor, insert bool, related ...*BattleKill) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BattleID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_kills\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleKillPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.BattleID, rel.MechID, rel.KilledID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BattleID = o.ID
		}
	}

	if o.R == nil {
		o.R = &battleR{
			BattleKills: related,
		}
	} else {
		o.R.BattleKills = append(o.R.BattleKills, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleKillR{
				Battle: o,
			}
		} else {
			rel.R.Battle = o
		}
	}
	return nil
}

// AddAssignedToBattleBattleLobbies adds the given related objects to the existing relationships
// of the battle, optionally inserting them as new records.
// Appends related to o.R.AssignedToBattleBattleLobbies.
// Sets related.R.AssignedToBattle appropriately.
func (o *Battle) AddAssignedToBattleBattleLobbies(exec boil.Executor, insert bool, related ...*BattleLobby) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AssignedToBattleID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_lobbies\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"assigned_to_battle_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleLobbyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AssignedToBattleID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &battleR{
			AssignedToBattleBattleLobbies: related,
		}
	} else {
		o.R.AssignedToBattleBattleLobbies = append(o.R.AssignedToBattleBattleLobbies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleLobbyR{
				AssignedToBattle: o,
			}
		} else {
			rel.R.AssignedToBattle = o
		}
	}
	return nil
}

// SetAssignedToBattleBattleLobbies removes all previously related items of the
// battle replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AssignedToBattle's AssignedToBattleBattleLobbies accordingly.
// Replaces o.R.AssignedToBattleBattleLobbies with related.
// Sets related.R.AssignedToBattle's AssignedToBattleBattleLobbies accordingly.
func (o *Battle) SetAssignedToBattleBattleLobbies(exec boil.Executor, insert bool, related ...*BattleLobby) error {
	query := "update \"battle_lobbies\" set \"assigned_to_battle_id\" = null where \"assigned_to_battle_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AssignedToBattleBattleLobbies {
			queries.SetScanner(&rel.AssignedToBattleID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AssignedToBattle = nil
		}

		o.R.AssignedToBattleBattleLobbies = nil
	}
	return o.AddAssignedToBattleBattleLobbies(exec, insert, related...)
}

// RemoveAssignedToBattleBattleLobbies relationships from objects passed in.
// Removes related items from R.AssignedToBattleBattleLobbies (uses pointer comparison, removal does not keep order)
// Sets related.R.AssignedToBattle.
func (o *Battle) RemoveAssignedToBattleBattleLobbies(exec boil.Executor, related ...*BattleLobby) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AssignedToBattleID, nil)
		if rel.R != nil {
			rel.R.AssignedToBattle = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("assigned_to_battle_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AssignedToBattleBattleLobbies {
			if rel != ri {
				continue
			}

			ln := len(o.R.AssignedToBattleBattleLobbies)
			if ln > 1 && i < ln-1 {
				o.R.AssignedToBattleBattleLobbies[i] = o.R.AssignedToBattleBattleLobbies[ln-1]
			}
			o.R.AssignedToBattleBattleLobbies = o.R.AssignedToBattleBattleLobbies[:ln-1]
			break
		}
	}

	return nil
}

// AddAssignedToBattleBattleLobbiesMechs adds the given related objects to the existing relationships
// of the battle, optionally inserting them as new records.
// Appends related to o.R.AssignedToBattleBattleLobbiesMechs.
// Sets related.R.AssignedToBattle appropriately.
func (o *Battle) AddAssignedToBattleBattleLobbiesMechs(exec boil.Executor, insert bool, related ...*BattleLobbiesMech) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AssignedToBattleID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_lobbies_mechs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"assigned_to_battle_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleLobbiesMechPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AssignedToBattleID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &battleR{
			AssignedToBattleBattleLobbiesMechs: related,
		}
	} else {
		o.R.AssignedToBattleBattleLobbiesMechs = append(o.R.AssignedToBattleBattleLobbiesMechs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleLobbiesMechR{
				AssignedToBattle: o,
			}
		} else {
			rel.R.AssignedToBattle = o
		}
	}
	return nil
}

// SetAssignedToBattleBattleLobbiesMechs removes all previously related items of the
// battle replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AssignedToBattle's AssignedToBattleBattleLobbiesMechs accordingly.
// Replaces o.R.AssignedToBattleBattleLobbiesMechs with related.
// Sets related.R.AssignedToBattle's AssignedToBattleBattleLobbiesMechs accordingly.
func (o *Battle) SetAssignedToBattleBattleLobbiesMechs(exec boil.Executor, insert bool, related ...*BattleLobbiesMech) error {
	query := "update \"battle_lobbies_mechs\" set \"assigned_to_battle_id\" = null where \"assigned_to_battle_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AssignedToBattleBattleLobbiesMechs {
			queries.SetScanner(&rel.AssignedToBattleID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AssignedToBattle = nil
		}

		o.R.AssignedToBattleBattleLobbiesMechs = nil
	}
	return o.AddAssignedToBattleBattleLobbiesMechs(exec, insert, related...)
}

// RemoveAssignedToBattleBattleLobbiesMechs relationships from objects passed in.
// Removes related items from R.AssignedToBattleBattleLobbiesMechs (uses pointer comparison, removal does not keep order)
// Sets related.R.AssignedToBattle.
func (o *Battle) RemoveAssignedToBattleBattleLobbiesMechs(exec boil.Executor, related ...*BattleLobbiesMech) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AssignedToBattleID, nil)
		if rel.R != nil {
			rel.R.AssignedToBattle = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("assigned_to_battle_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AssignedToBattleBattleLobbiesMechs {
			if rel != ri {
				continue
			}

			ln := len(o.R.AssignedToBattleBattleLobbiesMechs)
			if ln > 1 && i < ln-1 {
				o.R.AssignedToBattleBattleLobbiesMechs[i] = o.R.AssignedToBattleBattleLobbiesMechs[ln-1]
			}
			o.R.AssignedToBattleBattleLobbiesMechs = o.R.AssignedToBattleBattleLobbiesMechs[:ln-1]
			break
		}
	}

	return nil
}

// AddBattleMechs adds the given related objects to the existing relationships
// of the battle, optionally inserting them as new records.
// Appends related to o.R.BattleMechs.
// Sets related.R.Battle appropriately.
func (o *Battle) AddBattleMechs(exec boil.Executor, insert bool, related ...*BattleMech) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BattleID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_mechs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleMechPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.BattleID, rel.MechID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BattleID = o.ID
		}
	}

	if o.R == nil {
		o.R = &battleR{
			BattleMechs: related,
		}
	} else {
		o.R.BattleMechs = append(o.R.BattleMechs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleMechR{
				Battle: o,
			}
		} else {
			rel.R.Battle = o
		}
	}
	return nil
}

// AddBattleQueueNotifications adds the given related objects to the existing relationships
// of the battle, optionally inserting them as new records.
// Appends related to o.R.BattleQueueNotifications.
// Sets related.R.Battle appropriately.
func (o *Battle) AddBattleQueueNotifications(exec boil.Executor, insert bool, related ...*BattleQueueNotification) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BattleID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_queue_notifications\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleQueueNotificationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BattleID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &battleR{
			BattleQueueNotifications: related,
		}
	} else {
		o.R.BattleQueueNotifications = append(o.R.BattleQueueNotifications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleQueueNotificationR{
				Battle: o,
			}
		} else {
			rel.R.Battle = o
		}
	}
	return nil
}

// SetBattleQueueNotifications removes all previously related items of the
// battle replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Battle's BattleQueueNotifications accordingly.
// Replaces o.R.BattleQueueNotifications with related.
// Sets related.R.Battle's BattleQueueNotifications accordingly.
func (o *Battle) SetBattleQueueNotifications(exec boil.Executor, insert bool, related ...*BattleQueueNotification) error {
	query := "update \"battle_queue_notifications\" set \"battle_id\" = null where \"battle_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BattleQueueNotifications {
			queries.SetScanner(&rel.BattleID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Battle = nil
		}

		o.R.BattleQueueNotifications = nil
	}
	return o.AddBattleQueueNotifications(exec, insert, related...)
}

// RemoveBattleQueueNotifications relationships from objects passed in.
// Removes related items from R.BattleQueueNotifications (uses pointer comparison, removal does not keep order)
// Sets related.R.Battle.
func (o *Battle) RemoveBattleQueueNotifications(exec boil.Executor, related ...*BattleQueueNotification) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BattleID, nil)
		if rel.R != nil {
			rel.R.Battle = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("battle_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BattleQueueNotifications {
			if rel != ri {
				continue
			}

			ln := len(o.R.BattleQueueNotifications)
			if ln > 1 && i < ln-1 {
				o.R.BattleQueueNotifications[i] = o.R.BattleQueueNotifications[ln-1]
			}
			o.R.BattleQueueNotifications = o.R.BattleQueueNotifications[:ln-1]
			break
		}
	}

	return nil
}

// AddBattleQueueOlds adds the given related objects to the existing relationships
// of the battle, optionally inserting them as new records.
// Appends related to o.R.BattleQueueOlds.
// Sets related.R.Battle appropriately.
func (o *Battle) AddBattleQueueOlds(exec boil.Executor, insert bool, related ...*BattleQueueOld) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BattleID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_queue_old\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleQueueOldPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.MechID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BattleID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &battleR{
			BattleQueueOlds: related,
		}
	} else {
		o.R.BattleQueueOlds = append(o.R.BattleQueueOlds, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleQueueOldR{
				Battle: o,
			}
		} else {
			rel.R.Battle = o
		}
	}
	return nil
}

// SetBattleQueueOlds removes all previously related items of the
// battle replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Battle's BattleQueueOlds accordingly.
// Replaces o.R.BattleQueueOlds with related.
// Sets related.R.Battle's BattleQueueOlds accordingly.
func (o *Battle) SetBattleQueueOlds(exec boil.Executor, insert bool, related ...*BattleQueueOld) error {
	query := "update \"battle_queue_old\" set \"battle_id\" = null where \"battle_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BattleQueueOlds {
			queries.SetScanner(&rel.BattleID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Battle = nil
		}

		o.R.BattleQueueOlds = nil
	}
	return o.AddBattleQueueOlds(exec, insert, related...)
}

// RemoveBattleQueueOlds relationships from objects passed in.
// Removes related items from R.BattleQueueOlds (uses pointer comparison, removal does not keep order)
// Sets related.R.Battle.
func (o *Battle) RemoveBattleQueueOlds(exec boil.Executor, related ...*BattleQueueOld) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BattleID, nil)
		if rel.R != nil {
			rel.R.Battle = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("battle_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BattleQueueOlds {
			if rel != ri {
				continue
			}

			ln := len(o.R.BattleQueueOlds)
			if ln > 1 && i < ln-1 {
				o.R.BattleQueueOlds[i] = o.R.BattleQueueOlds[ln-1]
			}
			o.R.BattleQueueOlds = o.R.BattleQueueOlds[:ln-1]
			break
		}
	}

	return nil
}

// AddBattleReplays adds the given related objects to the existing relationships
// of the battle, optionally inserting them as new records.
// Appends related to o.R.BattleReplays.
// Sets related.R.Battle appropriately.
func (o *Battle) AddBattleReplays(exec boil.Executor, insert bool, related ...*BattleReplay) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BattleID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_replays\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleReplayPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BattleID = o.ID
		}
	}

	if o.R == nil {
		o.R = &battleR{
			BattleReplays: related,
		}
	} else {
		o.R.BattleReplays = append(o.R.BattleReplays, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleReplayR{
				Battle: o,
			}
		} else {
			rel.R.Battle = o
		}
	}
	return nil
}

// AddPlayers adds the given related objects to the existing relationships
// of the battle, optionally inserting them as new records.
// Appends related to o.R.Players.
// Sets related.R.Battles appropriately.
func (o *Battle) AddPlayers(exec boil.Executor, insert bool, related ...*Player) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"battle_viewers\" (\"battle_id\", \"player_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &battleR{
			Players: related,
		}
	} else {
		o.R.Players = append(o.R.Players, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playerR{
				Battles: BattleSlice{o},
			}
		} else {
			rel.R.Battles = append(rel.R.Battles, o)
		}
	}
	return nil
}

// SetPlayers removes all previously related items of the
// battle replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Battles's Players accordingly.
// Replaces o.R.Players with related.
// Sets related.R.Battles's Players accordingly.
func (o *Battle) SetPlayers(exec boil.Executor, insert bool, related ...*Player) error {
	query := "delete from \"battle_viewers\" where \"battle_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removePlayersFromBattlesSlice(o, related)
	if o.R != nil {
		o.R.Players = nil
	}
	return o.AddPlayers(exec, insert, related...)
}

// RemovePlayers relationships from objects passed in.
// Removes related items from R.Players (uses pointer comparison, removal does not keep order)
// Sets related.R.Battles.
func (o *Battle) RemovePlayers(exec boil.Executor, related ...*Player) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"battle_viewers\" where \"battle_id\" = $1 and \"player_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removePlayersFromBattlesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Players {
			if rel != ri {
				continue
			}

			ln := len(o.R.Players)
			if ln > 1 && i < ln-1 {
				o.R.Players[i] = o.R.Players[ln-1]
			}
			o.R.Players = o.R.Players[:ln-1]
			break
		}
	}

	return nil
}

func removePlayersFromBattlesSlice(o *Battle, related []*Player) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Battles {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Battles)
			if ln > 1 && i < ln-1 {
				rel.R.Battles[i] = rel.R.Battles[ln-1]
			}
			rel.R.Battles = rel.R.Battles[:ln-1]
			break
		}
	}
}

// AddBattleWins adds the given related objects to the existing relationships
// of the battle, optionally inserting them as new records.
// Appends related to o.R.BattleWins.
// Sets related.R.Battle appropriately.
func (o *Battle) AddBattleWins(exec boil.Executor, insert bool, related ...*BattleWin) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BattleID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_wins\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleWinPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.BattleID, rel.MechID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BattleID = o.ID
		}
	}

	if o.R == nil {
		o.R = &battleR{
			BattleWins: related,
		}
	} else {
		o.R.BattleWins = append(o.R.BattleWins, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleWinR{
				Battle: o,
			}
		} else {
			rel.R.Battle = o
		}
	}
	return nil
}

// AddChatHistories adds the given related objects to the existing relationships
// of the battle, optionally inserting them as new records.
// Appends related to o.R.ChatHistories.
// Sets related.R.Battle appropriately.
func (o *Battle) AddChatHistories(exec boil.Executor, insert bool, related ...*ChatHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BattleID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chat_history\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
				strmangle.WhereClause("\"", "\"", 2, chatHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BattleID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &battleR{
			ChatHistories: related,
		}
	} else {
		o.R.ChatHistories = append(o.R.ChatHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chatHistoryR{
				Battle: o,
			}
		} else {
			rel.R.Battle = o
		}
	}
	return nil
}

// SetChatHistories removes all previously related items of the
// battle replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Battle's ChatHistories accordingly.
// Replaces o.R.ChatHistories with related.
// Sets related.R.Battle's ChatHistories accordingly.
func (o *Battle) SetChatHistories(exec boil.Executor, insert bool, related ...*ChatHistory) error {
	query := "update \"chat_history\" set \"battle_id\" = null where \"battle_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ChatHistories {
			queries.SetScanner(&rel.BattleID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Battle = nil
		}

		o.R.ChatHistories = nil
	}
	return o.AddChatHistories(exec, insert, related...)
}

// RemoveChatHistories relationships from objects passed in.
// Removes related items from R.ChatHistories (uses pointer comparison, removal does not keep order)
// Sets related.R.Battle.
func (o *Battle) RemoveChatHistories(exec boil.Executor, related ...*ChatHistory) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BattleID, nil)
		if rel.R != nil {
			rel.R.Battle = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("battle_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ChatHistories {
			if rel != ri {
				continue
			}

			ln := len(o.R.ChatHistories)
			if ln > 1 && i < ln-1 {
				o.R.ChatHistories[i] = o.R.ChatHistories[ln-1]
			}
			o.R.ChatHistories = o.R.ChatHistories[:ln-1]
			break
		}
	}

	return nil
}

// AddConsumedAbilities adds the given related objects to the existing relationships
// of the battle, optionally inserting them as new records.
// Appends related to o.R.ConsumedAbilities.
// Sets related.R.Battle appropriately.
func (o *Battle) AddConsumedAbilities(exec boil.Executor, insert bool, related ...*ConsumedAbility) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BattleID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"consumed_abilities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
				strmangle.WhereClause("\"", "\"", 2, consumedAbilityPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BattleID = o.ID
		}
	}

	if o.R == nil {
		o.R = &battleR{
			ConsumedAbilities: related,
		}
	} else {
		o.R.ConsumedAbilities = append(o.R.ConsumedAbilities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &consumedAbilityR{
				Battle: o,
			}
		} else {
			rel.R.Battle = o
		}
	}
	return nil
}

// AddMechMoveCommandLogs adds the given related objects to the existing relationships
// of the battle, optionally inserting them as new records.
// Appends related to o.R.MechMoveCommandLogs.
// Sets related.R.Battle appropriately.
func (o *Battle) AddMechMoveCommandLogs(exec boil.Executor, insert bool, related ...*MechMoveCommandLog) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BattleID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mech_move_command_logs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
				strmangle.WhereClause("\"", "\"", 2, mechMoveCommandLogPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BattleID = o.ID
		}
	}

	if o.R == nil {
		o.R = &battleR{
			MechMoveCommandLogs: related,
		}
	} else {
		o.R.MechMoveCommandLogs = append(o.R.MechMoveCommandLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mechMoveCommandLogR{
				Battle: o,
			}
		} else {
			rel.R.Battle = o
		}
	}
	return nil
}

// AddBattleNumberPlayerBans adds the given related objects to the existing relationships
// of the battle, optionally inserting them as new records.
// Appends related to o.R.BattleNumberPlayerBans.
// Sets related.R.BattleNumberBattle appropriately.
func (o *Battle) AddBattleNumberPlayerBans(exec boil.Executor, insert bool, related ...*PlayerBan) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BattleNumber, o.BattleNumber)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"player_bans\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"battle_number"}),
				strmangle.WhereClause("\"", "\"", 2, playerBanPrimaryKeyColumns),
			)
			values := []interface{}{o.BattleNumber, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BattleNumber, o.BattleNumber)
		}
	}

	if o.R == nil {
		o.R = &battleR{
			BattleNumberPlayerBans: related,
		}
	} else {
		o.R.BattleNumberPlayerBans = append(o.R.BattleNumberPlayerBans, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playerBanR{
				BattleNumberBattle: o,
			}
		} else {
			rel.R.BattleNumberBattle = o
		}
	}
	return nil
}

// SetBattleNumberPlayerBans removes all previously related items of the
// battle replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BattleNumberBattle's BattleNumberPlayerBans accordingly.
// Replaces o.R.BattleNumberPlayerBans with related.
// Sets related.R.BattleNumberBattle's BattleNumberPlayerBans accordingly.
func (o *Battle) SetBattleNumberPlayerBans(exec boil.Executor, insert bool, related ...*PlayerBan) error {
	query := "update \"player_bans\" set \"battle_number\" = null where \"battle_number\" = $1"
	values := []interface{}{o.BattleNumber}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BattleNumberPlayerBans {
			queries.SetScanner(&rel.BattleNumber, nil)
			if rel.R == nil {
				continue
			}

			rel.R.BattleNumberBattle = nil
		}

		o.R.BattleNumberPlayerBans = nil
	}
	return o.AddBattleNumberPlayerBans(exec, insert, related...)
}

// RemoveBattleNumberPlayerBans relationships from objects passed in.
// Removes related items from R.BattleNumberPlayerBans (uses pointer comparison, removal does not keep order)
// Sets related.R.BattleNumberBattle.
func (o *Battle) RemoveBattleNumberPlayerBans(exec boil.Executor, related ...*PlayerBan) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BattleNumber, nil)
		if rel.R != nil {
			rel.R.BattleNumberBattle = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("battle_number")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BattleNumberPlayerBans {
			if rel != ri {
				continue
			}

			ln := len(o.R.BattleNumberPlayerBans)
			if ln > 1 && i < ln-1 {
				o.R.BattleNumberPlayerBans[i] = o.R.BattleNumberPlayerBans[ln-1]
			}
			o.R.BattleNumberPlayerBans = o.R.BattleNumberPlayerBans[:ln-1]
			break
		}
	}

	return nil
}

// AddPlayerKillLogs adds the given related objects to the existing relationships
// of the battle, optionally inserting them as new records.
// Appends related to o.R.PlayerKillLogs.
// Sets related.R.Battle appropriately.
func (o *Battle) AddPlayerKillLogs(exec boil.Executor, insert bool, related ...*PlayerKillLog) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BattleID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"player_kill_log\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
				strmangle.WhereClause("\"", "\"", 2, playerKillLogPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BattleID = o.ID
		}
	}

	if o.R == nil {
		o.R = &battleR{
			PlayerKillLogs: related,
		}
	} else {
		o.R.PlayerKillLogs = append(o.R.PlayerKillLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playerKillLogR{
				Battle: o,
			}
		} else {
			rel.R.Battle = o
		}
	}
	return nil
}

// AddPlayerSpoilsOfWars adds the given related objects to the existing relationships
// of the battle, optionally inserting them as new records.
// Appends related to o.R.PlayerSpoilsOfWars.
// Sets related.R.Battle appropriately.
func (o *Battle) AddPlayerSpoilsOfWars(exec boil.Executor, insert bool, related ...*PlayerSpoilsOfWar) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BattleID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"player_spoils_of_war\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
				strmangle.WhereClause("\"", "\"", 2, playerSpoilsOfWarPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BattleID = o.ID
		}
	}

	if o.R == nil {
		o.R = &battleR{
			PlayerSpoilsOfWars: related,
		}
	} else {
		o.R.PlayerSpoilsOfWars = append(o.R.PlayerSpoilsOfWars, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playerSpoilsOfWarR{
				Battle: o,
			}
		} else {
			rel.R.Battle = o
		}
	}
	return nil
}

// Battles retrieves all the records using an executor.
func Battles(mods ...qm.QueryMod) battleQuery {
	mods = append(mods, qm.From("\"battles\""))
	return battleQuery{NewQuery(mods...)}
}

// FindBattle retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattle(exec boil.Executor, iD string, selectCols ...string) (*Battle, error) {
	battleObj := &Battle{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battles\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, battleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from battles")
	}

	if err = battleObj.doAfterSelectHooks(exec); err != nil {
		return battleObj, err
	}

	return battleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Battle) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battles provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battleInsertCacheMut.RLock()
	cache, cached := battleInsertCache[key]
	battleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battleAllColumns,
			battleColumnsWithDefault,
			battleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battleType, battleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battleType, battleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battles\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battles\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into battles")
	}

	if !cached {
		battleInsertCacheMut.Lock()
		battleInsertCache[key] = cache
		battleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Battle.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Battle) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battleUpdateCacheMut.RLock()
	cache, cached := battleUpdateCache[key]
	battleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battleAllColumns,
			battlePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update battles, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battles\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battlePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battleType, battleMapping, append(wl, battlePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update battles row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for battles")
	}

	if !cached {
		battleUpdateCacheMut.Lock()
		battleUpdateCache[key] = cache
		battleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battleQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for battles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for battles")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattleSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battlePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in battle slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all battle")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Battle) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battles provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battleUpsertCacheMut.RLock()
	cache, cached := battleUpsertCache[key]
	battleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battleAllColumns,
			battleColumnsWithDefault,
			battleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			battleAllColumns,
			battlePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert battles, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battlePrimaryKeyColumns))
			copy(conflict, battlePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battles\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battleType, battleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battleType, battleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert battles")
	}

	if !cached {
		battleUpsertCacheMut.Lock()
		battleUpsertCache[key] = cache
		battleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Battle record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Battle) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Battle provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battlePrimaryKeyMapping)
	sql := "DELETE FROM \"battles\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from battles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for battles")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battleQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no battleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battles")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattleSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(battleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"battles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battlePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battle slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battles")
	}

	if len(battleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Battle) Reload(exec boil.Executor) error {
	ret, err := FindBattle(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattleSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battles\".* FROM \"battles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battlePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BattleSlice")
	}

	*o = slice

	return nil
}

// BattleExists checks if the Battle row exists.
func BattleExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battles\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if battles exists")
	}

	return exists, nil
}
