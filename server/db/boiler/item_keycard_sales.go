// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ItemKeycardSale is an object representing the database table.
type ItemKeycardSale struct {
	ID             string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	FactionID      string      `boiler:"faction_id" boil:"faction_id" json:"faction_id" toml:"faction_id" yaml:"faction_id"`
	ItemID         string      `boiler:"item_id" boil:"item_id" json:"item_id" toml:"item_id" yaml:"item_id"`
	ListingFeeTXID string      `boiler:"listing_fee_tx_id" boil:"listing_fee_tx_id" json:"listing_fee_tx_id" toml:"listing_fee_tx_id" yaml:"listing_fee_tx_id"`
	OwnerID        string      `boiler:"owner_id" boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	BuyoutPrice    null.String `boiler:"buyout_price" boil:"buyout_price" json:"buyout_price,omitempty" toml:"buyout_price" yaml:"buyout_price,omitempty"`
	EndAt          time.Time   `boiler:"end_at" boil:"end_at" json:"end_at" toml:"end_at" yaml:"end_at"`
	SoldAt         null.Time   `boiler:"sold_at" boil:"sold_at" json:"sold_at,omitempty" toml:"sold_at" yaml:"sold_at,omitempty"`
	SoldFor        null.String `boiler:"sold_for" boil:"sold_for" json:"sold_for,omitempty" toml:"sold_for" yaml:"sold_for,omitempty"`
	SoldBy         null.String `boiler:"sold_by" boil:"sold_by" json:"sold_by,omitempty" toml:"sold_by" yaml:"sold_by,omitempty"`
	SoldTXID       null.String `boiler:"sold_tx_id" boil:"sold_tx_id" json:"sold_tx_id,omitempty" toml:"sold_tx_id" yaml:"sold_tx_id,omitempty"`
	DeletedAt      null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt      time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt      time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *itemKeycardSaleR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L itemKeycardSaleL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ItemKeycardSaleColumns = struct {
	ID             string
	FactionID      string
	ItemID         string
	ListingFeeTXID string
	OwnerID        string
	BuyoutPrice    string
	EndAt          string
	SoldAt         string
	SoldFor        string
	SoldBy         string
	SoldTXID       string
	DeletedAt      string
	UpdatedAt      string
	CreatedAt      string
}{
	ID:             "id",
	FactionID:      "faction_id",
	ItemID:         "item_id",
	ListingFeeTXID: "listing_fee_tx_id",
	OwnerID:        "owner_id",
	BuyoutPrice:    "buyout_price",
	EndAt:          "end_at",
	SoldAt:         "sold_at",
	SoldFor:        "sold_for",
	SoldBy:         "sold_by",
	SoldTXID:       "sold_tx_id",
	DeletedAt:      "deleted_at",
	UpdatedAt:      "updated_at",
	CreatedAt:      "created_at",
}

var ItemKeycardSaleTableColumns = struct {
	ID             string
	FactionID      string
	ItemID         string
	ListingFeeTXID string
	OwnerID        string
	BuyoutPrice    string
	EndAt          string
	SoldAt         string
	SoldFor        string
	SoldBy         string
	SoldTXID       string
	DeletedAt      string
	UpdatedAt      string
	CreatedAt      string
}{
	ID:             "item_keycard_sales.id",
	FactionID:      "item_keycard_sales.faction_id",
	ItemID:         "item_keycard_sales.item_id",
	ListingFeeTXID: "item_keycard_sales.listing_fee_tx_id",
	OwnerID:        "item_keycard_sales.owner_id",
	BuyoutPrice:    "item_keycard_sales.buyout_price",
	EndAt:          "item_keycard_sales.end_at",
	SoldAt:         "item_keycard_sales.sold_at",
	SoldFor:        "item_keycard_sales.sold_for",
	SoldBy:         "item_keycard_sales.sold_by",
	SoldTXID:       "item_keycard_sales.sold_tx_id",
	DeletedAt:      "item_keycard_sales.deleted_at",
	UpdatedAt:      "item_keycard_sales.updated_at",
	CreatedAt:      "item_keycard_sales.created_at",
}

// Generated where

var ItemKeycardSaleWhere = struct {
	ID             whereHelperstring
	FactionID      whereHelperstring
	ItemID         whereHelperstring
	ListingFeeTXID whereHelperstring
	OwnerID        whereHelperstring
	BuyoutPrice    whereHelpernull_String
	EndAt          whereHelpertime_Time
	SoldAt         whereHelpernull_Time
	SoldFor        whereHelpernull_String
	SoldBy         whereHelpernull_String
	SoldTXID       whereHelpernull_String
	DeletedAt      whereHelpernull_Time
	UpdatedAt      whereHelpertime_Time
	CreatedAt      whereHelpertime_Time
}{
	ID:             whereHelperstring{field: "\"item_keycard_sales\".\"id\""},
	FactionID:      whereHelperstring{field: "\"item_keycard_sales\".\"faction_id\""},
	ItemID:         whereHelperstring{field: "\"item_keycard_sales\".\"item_id\""},
	ListingFeeTXID: whereHelperstring{field: "\"item_keycard_sales\".\"listing_fee_tx_id\""},
	OwnerID:        whereHelperstring{field: "\"item_keycard_sales\".\"owner_id\""},
	BuyoutPrice:    whereHelpernull_String{field: "\"item_keycard_sales\".\"buyout_price\""},
	EndAt:          whereHelpertime_Time{field: "\"item_keycard_sales\".\"end_at\""},
	SoldAt:         whereHelpernull_Time{field: "\"item_keycard_sales\".\"sold_at\""},
	SoldFor:        whereHelpernull_String{field: "\"item_keycard_sales\".\"sold_for\""},
	SoldBy:         whereHelpernull_String{field: "\"item_keycard_sales\".\"sold_by\""},
	SoldTXID:       whereHelpernull_String{field: "\"item_keycard_sales\".\"sold_tx_id\""},
	DeletedAt:      whereHelpernull_Time{field: "\"item_keycard_sales\".\"deleted_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"item_keycard_sales\".\"updated_at\""},
	CreatedAt:      whereHelpertime_Time{field: "\"item_keycard_sales\".\"created_at\""},
}

// ItemKeycardSaleRels is where relationship names are stored.
var ItemKeycardSaleRels = struct {
	Faction      string
	Item         string
	Owner        string
	SoldByPlayer string
}{
	Faction:      "Faction",
	Item:         "Item",
	Owner:        "Owner",
	SoldByPlayer: "SoldByPlayer",
}

// itemKeycardSaleR is where relationships are stored.
type itemKeycardSaleR struct {
	Faction      *Faction       `boiler:"Faction" boil:"Faction" json:"Faction" toml:"Faction" yaml:"Faction"`
	Item         *PlayerKeycard `boiler:"Item" boil:"Item" json:"Item" toml:"Item" yaml:"Item"`
	Owner        *Player        `boiler:"Owner" boil:"Owner" json:"Owner" toml:"Owner" yaml:"Owner"`
	SoldByPlayer *Player        `boiler:"SoldByPlayer" boil:"SoldByPlayer" json:"SoldByPlayer" toml:"SoldByPlayer" yaml:"SoldByPlayer"`
}

// NewStruct creates a new relationship struct
func (*itemKeycardSaleR) NewStruct() *itemKeycardSaleR {
	return &itemKeycardSaleR{}
}

// itemKeycardSaleL is where Load methods for each relationship are stored.
type itemKeycardSaleL struct{}

var (
	itemKeycardSaleAllColumns            = []string{"id", "faction_id", "item_id", "listing_fee_tx_id", "owner_id", "buyout_price", "end_at", "sold_at", "sold_for", "sold_by", "sold_tx_id", "deleted_at", "updated_at", "created_at"}
	itemKeycardSaleColumnsWithoutDefault = []string{"faction_id", "item_id", "listing_fee_tx_id", "owner_id", "end_at"}
	itemKeycardSaleColumnsWithDefault    = []string{"id", "buyout_price", "sold_at", "sold_for", "sold_by", "sold_tx_id", "deleted_at", "updated_at", "created_at"}
	itemKeycardSalePrimaryKeyColumns     = []string{"id"}
	itemKeycardSaleGeneratedColumns      = []string{}
)

type (
	// ItemKeycardSaleSlice is an alias for a slice of pointers to ItemKeycardSale.
	// This should almost always be used instead of []ItemKeycardSale.
	ItemKeycardSaleSlice []*ItemKeycardSale
	// ItemKeycardSaleHook is the signature for custom ItemKeycardSale hook methods
	ItemKeycardSaleHook func(boil.Executor, *ItemKeycardSale) error

	itemKeycardSaleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	itemKeycardSaleType                 = reflect.TypeOf(&ItemKeycardSale{})
	itemKeycardSaleMapping              = queries.MakeStructMapping(itemKeycardSaleType)
	itemKeycardSalePrimaryKeyMapping, _ = queries.BindMapping(itemKeycardSaleType, itemKeycardSaleMapping, itemKeycardSalePrimaryKeyColumns)
	itemKeycardSaleInsertCacheMut       sync.RWMutex
	itemKeycardSaleInsertCache          = make(map[string]insertCache)
	itemKeycardSaleUpdateCacheMut       sync.RWMutex
	itemKeycardSaleUpdateCache          = make(map[string]updateCache)
	itemKeycardSaleUpsertCacheMut       sync.RWMutex
	itemKeycardSaleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var itemKeycardSaleAfterSelectHooks []ItemKeycardSaleHook

var itemKeycardSaleBeforeInsertHooks []ItemKeycardSaleHook
var itemKeycardSaleAfterInsertHooks []ItemKeycardSaleHook

var itemKeycardSaleBeforeUpdateHooks []ItemKeycardSaleHook
var itemKeycardSaleAfterUpdateHooks []ItemKeycardSaleHook

var itemKeycardSaleBeforeDeleteHooks []ItemKeycardSaleHook
var itemKeycardSaleAfterDeleteHooks []ItemKeycardSaleHook

var itemKeycardSaleBeforeUpsertHooks []ItemKeycardSaleHook
var itemKeycardSaleAfterUpsertHooks []ItemKeycardSaleHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ItemKeycardSale) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range itemKeycardSaleAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ItemKeycardSale) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range itemKeycardSaleBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ItemKeycardSale) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range itemKeycardSaleAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ItemKeycardSale) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range itemKeycardSaleBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ItemKeycardSale) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range itemKeycardSaleAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ItemKeycardSale) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range itemKeycardSaleBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ItemKeycardSale) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range itemKeycardSaleAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ItemKeycardSale) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range itemKeycardSaleBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ItemKeycardSale) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range itemKeycardSaleAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddItemKeycardSaleHook registers your hook function for all future operations.
func AddItemKeycardSaleHook(hookPoint boil.HookPoint, itemKeycardSaleHook ItemKeycardSaleHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		itemKeycardSaleAfterSelectHooks = append(itemKeycardSaleAfterSelectHooks, itemKeycardSaleHook)
	case boil.BeforeInsertHook:
		itemKeycardSaleBeforeInsertHooks = append(itemKeycardSaleBeforeInsertHooks, itemKeycardSaleHook)
	case boil.AfterInsertHook:
		itemKeycardSaleAfterInsertHooks = append(itemKeycardSaleAfterInsertHooks, itemKeycardSaleHook)
	case boil.BeforeUpdateHook:
		itemKeycardSaleBeforeUpdateHooks = append(itemKeycardSaleBeforeUpdateHooks, itemKeycardSaleHook)
	case boil.AfterUpdateHook:
		itemKeycardSaleAfterUpdateHooks = append(itemKeycardSaleAfterUpdateHooks, itemKeycardSaleHook)
	case boil.BeforeDeleteHook:
		itemKeycardSaleBeforeDeleteHooks = append(itemKeycardSaleBeforeDeleteHooks, itemKeycardSaleHook)
	case boil.AfterDeleteHook:
		itemKeycardSaleAfterDeleteHooks = append(itemKeycardSaleAfterDeleteHooks, itemKeycardSaleHook)
	case boil.BeforeUpsertHook:
		itemKeycardSaleBeforeUpsertHooks = append(itemKeycardSaleBeforeUpsertHooks, itemKeycardSaleHook)
	case boil.AfterUpsertHook:
		itemKeycardSaleAfterUpsertHooks = append(itemKeycardSaleAfterUpsertHooks, itemKeycardSaleHook)
	}
}

// One returns a single itemKeycardSale record from the query.
func (q itemKeycardSaleQuery) One(exec boil.Executor) (*ItemKeycardSale, error) {
	o := &ItemKeycardSale{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for item_keycard_sales")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ItemKeycardSale records from the query.
func (q itemKeycardSaleQuery) All(exec boil.Executor) (ItemKeycardSaleSlice, error) {
	var o []*ItemKeycardSale

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to ItemKeycardSale slice")
	}

	if len(itemKeycardSaleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ItemKeycardSale records in the query.
func (q itemKeycardSaleQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count item_keycard_sales rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q itemKeycardSaleQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if item_keycard_sales exists")
	}

	return count > 0, nil
}

// Faction pointed to by the foreign key.
func (o *ItemKeycardSale) Faction(mods ...qm.QueryMod) factionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FactionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Factions(queryMods...)
	queries.SetFrom(query.Query, "\"factions\"")

	return query
}

// Item pointed to by the foreign key.
func (o *ItemKeycardSale) Item(mods ...qm.QueryMod) playerKeycardQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ItemID),
	}

	queryMods = append(queryMods, mods...)

	query := PlayerKeycards(queryMods...)
	queries.SetFrom(query.Query, "\"player_keycards\"")

	return query
}

// Owner pointed to by the foreign key.
func (o *ItemKeycardSale) Owner(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OwnerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// SoldByPlayer pointed to by the foreign key.
func (o *ItemKeycardSale) SoldByPlayer(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SoldBy),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// LoadFaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (itemKeycardSaleL) LoadFaction(e boil.Executor, singular bool, maybeItemKeycardSale interface{}, mods queries.Applicator) error {
	var slice []*ItemKeycardSale
	var object *ItemKeycardSale

	if singular {
		object = maybeItemKeycardSale.(*ItemKeycardSale)
	} else {
		slice = *maybeItemKeycardSale.(*[]*ItemKeycardSale)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &itemKeycardSaleR{}
		}
		args = append(args, object.FactionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &itemKeycardSaleR{}
			}

			for _, a := range args {
				if a == obj.FactionID {
					continue Outer
				}
			}

			args = append(args, obj.FactionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`factions`),
		qm.WhereIn(`factions.id in ?`, args...),
		qmhelper.WhereIsNull(`factions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Faction")
	}

	var resultSlice []*Faction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Faction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for factions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for factions")
	}

	if len(itemKeycardSaleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Faction = foreign
		if foreign.R == nil {
			foreign.R = &factionR{}
		}
		foreign.R.ItemKeycardSales = append(foreign.R.ItemKeycardSales, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FactionID == foreign.ID {
				local.R.Faction = foreign
				if foreign.R == nil {
					foreign.R = &factionR{}
				}
				foreign.R.ItemKeycardSales = append(foreign.R.ItemKeycardSales, local)
				break
			}
		}
	}

	return nil
}

// LoadItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (itemKeycardSaleL) LoadItem(e boil.Executor, singular bool, maybeItemKeycardSale interface{}, mods queries.Applicator) error {
	var slice []*ItemKeycardSale
	var object *ItemKeycardSale

	if singular {
		object = maybeItemKeycardSale.(*ItemKeycardSale)
	} else {
		slice = *maybeItemKeycardSale.(*[]*ItemKeycardSale)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &itemKeycardSaleR{}
		}
		args = append(args, object.ItemID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &itemKeycardSaleR{}
			}

			for _, a := range args {
				if a == obj.ItemID {
					continue Outer
				}
			}

			args = append(args, obj.ItemID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`player_keycards`),
		qm.WhereIn(`player_keycards.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PlayerKeycard")
	}

	var resultSlice []*PlayerKeycard
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PlayerKeycard")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for player_keycards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for player_keycards")
	}

	if len(itemKeycardSaleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Item = foreign
		if foreign.R == nil {
			foreign.R = &playerKeycardR{}
		}
		foreign.R.ItemItemKeycardSales = append(foreign.R.ItemItemKeycardSales, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ItemID == foreign.ID {
				local.R.Item = foreign
				if foreign.R == nil {
					foreign.R = &playerKeycardR{}
				}
				foreign.R.ItemItemKeycardSales = append(foreign.R.ItemItemKeycardSales, local)
				break
			}
		}
	}

	return nil
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (itemKeycardSaleL) LoadOwner(e boil.Executor, singular bool, maybeItemKeycardSale interface{}, mods queries.Applicator) error {
	var slice []*ItemKeycardSale
	var object *ItemKeycardSale

	if singular {
		object = maybeItemKeycardSale.(*ItemKeycardSale)
	} else {
		slice = *maybeItemKeycardSale.(*[]*ItemKeycardSale)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &itemKeycardSaleR{}
		}
		args = append(args, object.OwnerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &itemKeycardSaleR{}
			}

			for _, a := range args {
				if a == obj.OwnerID {
					continue Outer
				}
			}

			args = append(args, obj.OwnerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(itemKeycardSaleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Owner = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.OwnerItemKeycardSales = append(foreign.R.OwnerItemKeycardSales, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerID == foreign.ID {
				local.R.Owner = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.OwnerItemKeycardSales = append(foreign.R.OwnerItemKeycardSales, local)
				break
			}
		}
	}

	return nil
}

// LoadSoldByPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (itemKeycardSaleL) LoadSoldByPlayer(e boil.Executor, singular bool, maybeItemKeycardSale interface{}, mods queries.Applicator) error {
	var slice []*ItemKeycardSale
	var object *ItemKeycardSale

	if singular {
		object = maybeItemKeycardSale.(*ItemKeycardSale)
	} else {
		slice = *maybeItemKeycardSale.(*[]*ItemKeycardSale)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &itemKeycardSaleR{}
		}
		if !queries.IsNil(object.SoldBy) {
			args = append(args, object.SoldBy)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &itemKeycardSaleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SoldBy) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SoldBy) {
				args = append(args, obj.SoldBy)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(itemKeycardSaleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SoldByPlayer = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.SoldByItemKeycardSales = append(foreign.R.SoldByItemKeycardSales, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SoldBy, foreign.ID) {
				local.R.SoldByPlayer = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.SoldByItemKeycardSales = append(foreign.R.SoldByItemKeycardSales, local)
				break
			}
		}
	}

	return nil
}

// SetFaction of the itemKeycardSale to the related item.
// Sets o.R.Faction to related.
// Adds o to related.R.ItemKeycardSales.
func (o *ItemKeycardSale) SetFaction(exec boil.Executor, insert bool, related *Faction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"item_keycard_sales\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"faction_id"}),
		strmangle.WhereClause("\"", "\"", 2, itemKeycardSalePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FactionID = related.ID
	if o.R == nil {
		o.R = &itemKeycardSaleR{
			Faction: related,
		}
	} else {
		o.R.Faction = related
	}

	if related.R == nil {
		related.R = &factionR{
			ItemKeycardSales: ItemKeycardSaleSlice{o},
		}
	} else {
		related.R.ItemKeycardSales = append(related.R.ItemKeycardSales, o)
	}

	return nil
}

// SetItem of the itemKeycardSale to the related item.
// Sets o.R.Item to related.
// Adds o to related.R.ItemItemKeycardSales.
func (o *ItemKeycardSale) SetItem(exec boil.Executor, insert bool, related *PlayerKeycard) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"item_keycard_sales\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"item_id"}),
		strmangle.WhereClause("\"", "\"", 2, itemKeycardSalePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ItemID = related.ID
	if o.R == nil {
		o.R = &itemKeycardSaleR{
			Item: related,
		}
	} else {
		o.R.Item = related
	}

	if related.R == nil {
		related.R = &playerKeycardR{
			ItemItemKeycardSales: ItemKeycardSaleSlice{o},
		}
	} else {
		related.R.ItemItemKeycardSales = append(related.R.ItemItemKeycardSales, o)
	}

	return nil
}

// SetOwner of the itemKeycardSale to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerItemKeycardSales.
func (o *ItemKeycardSale) SetOwner(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"item_keycard_sales\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
		strmangle.WhereClause("\"", "\"", 2, itemKeycardSalePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerID = related.ID
	if o.R == nil {
		o.R = &itemKeycardSaleR{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &playerR{
			OwnerItemKeycardSales: ItemKeycardSaleSlice{o},
		}
	} else {
		related.R.OwnerItemKeycardSales = append(related.R.OwnerItemKeycardSales, o)
	}

	return nil
}

// SetSoldByPlayer of the itemKeycardSale to the related item.
// Sets o.R.SoldByPlayer to related.
// Adds o to related.R.SoldByItemKeycardSales.
func (o *ItemKeycardSale) SetSoldByPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"item_keycard_sales\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sold_by"}),
		strmangle.WhereClause("\"", "\"", 2, itemKeycardSalePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SoldBy, related.ID)
	if o.R == nil {
		o.R = &itemKeycardSaleR{
			SoldByPlayer: related,
		}
	} else {
		o.R.SoldByPlayer = related
	}

	if related.R == nil {
		related.R = &playerR{
			SoldByItemKeycardSales: ItemKeycardSaleSlice{o},
		}
	} else {
		related.R.SoldByItemKeycardSales = append(related.R.SoldByItemKeycardSales, o)
	}

	return nil
}

// RemoveSoldByPlayer relationship.
// Sets o.R.SoldByPlayer to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *ItemKeycardSale) RemoveSoldByPlayer(exec boil.Executor, related *Player) error {
	var err error

	queries.SetScanner(&o.SoldBy, nil)
	if _, err = o.Update(exec, boil.Whitelist("sold_by")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SoldByPlayer = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SoldByItemKeycardSales {
		if queries.Equal(o.SoldBy, ri.SoldBy) {
			continue
		}

		ln := len(related.R.SoldByItemKeycardSales)
		if ln > 1 && i < ln-1 {
			related.R.SoldByItemKeycardSales[i] = related.R.SoldByItemKeycardSales[ln-1]
		}
		related.R.SoldByItemKeycardSales = related.R.SoldByItemKeycardSales[:ln-1]
		break
	}
	return nil
}

// ItemKeycardSales retrieves all the records using an executor.
func ItemKeycardSales(mods ...qm.QueryMod) itemKeycardSaleQuery {
	mods = append(mods, qm.From("\"item_keycard_sales\""), qmhelper.WhereIsNull("\"item_keycard_sales\".\"deleted_at\""))
	return itemKeycardSaleQuery{NewQuery(mods...)}
}

// FindItemKeycardSale retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindItemKeycardSale(exec boil.Executor, iD string, selectCols ...string) (*ItemKeycardSale, error) {
	itemKeycardSaleObj := &ItemKeycardSale{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"item_keycard_sales\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, itemKeycardSaleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from item_keycard_sales")
	}

	if err = itemKeycardSaleObj.doAfterSelectHooks(exec); err != nil {
		return itemKeycardSaleObj, err
	}

	return itemKeycardSaleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ItemKeycardSale) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no item_keycard_sales provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(itemKeycardSaleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	itemKeycardSaleInsertCacheMut.RLock()
	cache, cached := itemKeycardSaleInsertCache[key]
	itemKeycardSaleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			itemKeycardSaleAllColumns,
			itemKeycardSaleColumnsWithDefault,
			itemKeycardSaleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(itemKeycardSaleType, itemKeycardSaleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(itemKeycardSaleType, itemKeycardSaleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"item_keycard_sales\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"item_keycard_sales\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into item_keycard_sales")
	}

	if !cached {
		itemKeycardSaleInsertCacheMut.Lock()
		itemKeycardSaleInsertCache[key] = cache
		itemKeycardSaleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the ItemKeycardSale.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ItemKeycardSale) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	itemKeycardSaleUpdateCacheMut.RLock()
	cache, cached := itemKeycardSaleUpdateCache[key]
	itemKeycardSaleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			itemKeycardSaleAllColumns,
			itemKeycardSalePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update item_keycard_sales, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"item_keycard_sales\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, itemKeycardSalePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(itemKeycardSaleType, itemKeycardSaleMapping, append(wl, itemKeycardSalePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update item_keycard_sales row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for item_keycard_sales")
	}

	if !cached {
		itemKeycardSaleUpdateCacheMut.Lock()
		itemKeycardSaleUpdateCache[key] = cache
		itemKeycardSaleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q itemKeycardSaleQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for item_keycard_sales")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for item_keycard_sales")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ItemKeycardSaleSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), itemKeycardSalePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"item_keycard_sales\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, itemKeycardSalePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in itemKeycardSale slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all itemKeycardSale")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ItemKeycardSale) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no item_keycard_sales provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(itemKeycardSaleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	itemKeycardSaleUpsertCacheMut.RLock()
	cache, cached := itemKeycardSaleUpsertCache[key]
	itemKeycardSaleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			itemKeycardSaleAllColumns,
			itemKeycardSaleColumnsWithDefault,
			itemKeycardSaleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			itemKeycardSaleAllColumns,
			itemKeycardSalePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert item_keycard_sales, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(itemKeycardSalePrimaryKeyColumns))
			copy(conflict, itemKeycardSalePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"item_keycard_sales\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(itemKeycardSaleType, itemKeycardSaleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(itemKeycardSaleType, itemKeycardSaleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert item_keycard_sales")
	}

	if !cached {
		itemKeycardSaleUpsertCacheMut.Lock()
		itemKeycardSaleUpsertCache[key] = cache
		itemKeycardSaleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single ItemKeycardSale record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ItemKeycardSale) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no ItemKeycardSale provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), itemKeycardSalePrimaryKeyMapping)
		sql = "DELETE FROM \"item_keycard_sales\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"item_keycard_sales\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(itemKeycardSaleType, itemKeycardSaleMapping, append(wl, itemKeycardSalePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from item_keycard_sales")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for item_keycard_sales")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q itemKeycardSaleQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no itemKeycardSaleQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from item_keycard_sales")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for item_keycard_sales")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ItemKeycardSaleSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(itemKeycardSaleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), itemKeycardSalePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"item_keycard_sales\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, itemKeycardSalePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), itemKeycardSalePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"item_keycard_sales\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, itemKeycardSalePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from itemKeycardSale slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for item_keycard_sales")
	}

	if len(itemKeycardSaleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ItemKeycardSale) Reload(exec boil.Executor) error {
	ret, err := FindItemKeycardSale(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ItemKeycardSaleSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ItemKeycardSaleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), itemKeycardSalePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"item_keycard_sales\".* FROM \"item_keycard_sales\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, itemKeycardSalePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in ItemKeycardSaleSlice")
	}

	*o = slice

	return nil
}

// ItemKeycardSaleExists checks if the ItemKeycardSale row exists.
func ItemKeycardSaleExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"item_keycard_sales\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if item_keycard_sales exists")
	}

	return exists, nil
}
