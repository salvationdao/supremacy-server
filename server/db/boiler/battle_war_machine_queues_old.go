// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// BattleWarMachineQueuesOld is an object representing the database table.
type BattleWarMachineQueuesOld struct {
	WarMachineMetadata types.JSON  `boiler:"war_machine_metadata" boil:"war_machine_metadata" json:"war_machine_metadata" toml:"war_machine_metadata" yaml:"war_machine_metadata"`
	QueuedAt           time.Time   `boiler:"queued_at" boil:"queued_at" json:"queued_at" toml:"queued_at" yaml:"queued_at"`
	DeletedAt          null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	IsInsured          bool        `boiler:"is_insured" boil:"is_insured" json:"is_insured" toml:"is_insured" yaml:"is_insured"`
	ContractReward     string      `boiler:"contract_reward" boil:"contract_reward" json:"contract_reward" toml:"contract_reward" yaml:"contract_reward"`
	Fee                string      `boiler:"fee" boil:"fee" json:"fee" toml:"fee" yaml:"fee"`
	WarMachineHash     null.String `boiler:"war_machine_hash" boil:"war_machine_hash" json:"war_machine_hash,omitempty" toml:"war_machine_hash" yaml:"war_machine_hash,omitempty"`
	FactionID          null.String `boiler:"faction_id" boil:"faction_id" json:"faction_id,omitempty" toml:"faction_id" yaml:"faction_id,omitempty"`
	CreatedAt          null.Time   `boiler:"created_at" boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	ID                 string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`

	R *battleWarMachineQueuesOldR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L battleWarMachineQueuesOldL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattleWarMachineQueuesOldColumns = struct {
	WarMachineMetadata string
	QueuedAt           string
	DeletedAt          string
	IsInsured          string
	ContractReward     string
	Fee                string
	WarMachineHash     string
	FactionID          string
	CreatedAt          string
	ID                 string
}{
	WarMachineMetadata: "war_machine_metadata",
	QueuedAt:           "queued_at",
	DeletedAt:          "deleted_at",
	IsInsured:          "is_insured",
	ContractReward:     "contract_reward",
	Fee:                "fee",
	WarMachineHash:     "war_machine_hash",
	FactionID:          "faction_id",
	CreatedAt:          "created_at",
	ID:                 "id",
}

var BattleWarMachineQueuesOldTableColumns = struct {
	WarMachineMetadata string
	QueuedAt           string
	DeletedAt          string
	IsInsured          string
	ContractReward     string
	Fee                string
	WarMachineHash     string
	FactionID          string
	CreatedAt          string
	ID                 string
}{
	WarMachineMetadata: "battle_war_machine_queues_old.war_machine_metadata",
	QueuedAt:           "battle_war_machine_queues_old.queued_at",
	DeletedAt:          "battle_war_machine_queues_old.deleted_at",
	IsInsured:          "battle_war_machine_queues_old.is_insured",
	ContractReward:     "battle_war_machine_queues_old.contract_reward",
	Fee:                "battle_war_machine_queues_old.fee",
	WarMachineHash:     "battle_war_machine_queues_old.war_machine_hash",
	FactionID:          "battle_war_machine_queues_old.faction_id",
	CreatedAt:          "battle_war_machine_queues_old.created_at",
	ID:                 "battle_war_machine_queues_old.id",
}

// Generated where

var BattleWarMachineQueuesOldWhere = struct {
	WarMachineMetadata whereHelpertypes_JSON
	QueuedAt           whereHelpertime_Time
	DeletedAt          whereHelpernull_Time
	IsInsured          whereHelperbool
	ContractReward     whereHelperstring
	Fee                whereHelperstring
	WarMachineHash     whereHelpernull_String
	FactionID          whereHelpernull_String
	CreatedAt          whereHelpernull_Time
	ID                 whereHelperstring
}{
	WarMachineMetadata: whereHelpertypes_JSON{field: "\"battle_war_machine_queues_old\".\"war_machine_metadata\""},
	QueuedAt:           whereHelpertime_Time{field: "\"battle_war_machine_queues_old\".\"queued_at\""},
	DeletedAt:          whereHelpernull_Time{field: "\"battle_war_machine_queues_old\".\"deleted_at\""},
	IsInsured:          whereHelperbool{field: "\"battle_war_machine_queues_old\".\"is_insured\""},
	ContractReward:     whereHelperstring{field: "\"battle_war_machine_queues_old\".\"contract_reward\""},
	Fee:                whereHelperstring{field: "\"battle_war_machine_queues_old\".\"fee\""},
	WarMachineHash:     whereHelpernull_String{field: "\"battle_war_machine_queues_old\".\"war_machine_hash\""},
	FactionID:          whereHelpernull_String{field: "\"battle_war_machine_queues_old\".\"faction_id\""},
	CreatedAt:          whereHelpernull_Time{field: "\"battle_war_machine_queues_old\".\"created_at\""},
	ID:                 whereHelperstring{field: "\"battle_war_machine_queues_old\".\"id\""},
}

// BattleWarMachineQueuesOldRels is where relationship names are stored.
var BattleWarMachineQueuesOldRels = struct {
}{}

// battleWarMachineQueuesOldR is where relationships are stored.
type battleWarMachineQueuesOldR struct {
}

// NewStruct creates a new relationship struct
func (*battleWarMachineQueuesOldR) NewStruct() *battleWarMachineQueuesOldR {
	return &battleWarMachineQueuesOldR{}
}

// battleWarMachineQueuesOldL is where Load methods for each relationship are stored.
type battleWarMachineQueuesOldL struct{}

var (
	battleWarMachineQueuesOldAllColumns            = []string{"war_machine_metadata", "queued_at", "deleted_at", "is_insured", "contract_reward", "fee", "war_machine_hash", "faction_id", "created_at", "id"}
	battleWarMachineQueuesOldColumnsWithoutDefault = []string{"war_machine_metadata"}
	battleWarMachineQueuesOldColumnsWithDefault    = []string{"queued_at", "deleted_at", "is_insured", "contract_reward", "fee", "war_machine_hash", "faction_id", "created_at", "id"}
	battleWarMachineQueuesOldPrimaryKeyColumns     = []string{"id"}
	battleWarMachineQueuesOldGeneratedColumns      = []string{}
)

type (
	// BattleWarMachineQueuesOldSlice is an alias for a slice of pointers to BattleWarMachineQueuesOld.
	// This should almost always be used instead of []BattleWarMachineQueuesOld.
	BattleWarMachineQueuesOldSlice []*BattleWarMachineQueuesOld
	// BattleWarMachineQueuesOldHook is the signature for custom BattleWarMachineQueuesOld hook methods
	BattleWarMachineQueuesOldHook func(boil.Executor, *BattleWarMachineQueuesOld) error

	battleWarMachineQueuesOldQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battleWarMachineQueuesOldType                 = reflect.TypeOf(&BattleWarMachineQueuesOld{})
	battleWarMachineQueuesOldMapping              = queries.MakeStructMapping(battleWarMachineQueuesOldType)
	battleWarMachineQueuesOldPrimaryKeyMapping, _ = queries.BindMapping(battleWarMachineQueuesOldType, battleWarMachineQueuesOldMapping, battleWarMachineQueuesOldPrimaryKeyColumns)
	battleWarMachineQueuesOldInsertCacheMut       sync.RWMutex
	battleWarMachineQueuesOldInsertCache          = make(map[string]insertCache)
	battleWarMachineQueuesOldUpdateCacheMut       sync.RWMutex
	battleWarMachineQueuesOldUpdateCache          = make(map[string]updateCache)
	battleWarMachineQueuesOldUpsertCacheMut       sync.RWMutex
	battleWarMachineQueuesOldUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battleWarMachineQueuesOldAfterSelectHooks []BattleWarMachineQueuesOldHook

var battleWarMachineQueuesOldBeforeInsertHooks []BattleWarMachineQueuesOldHook
var battleWarMachineQueuesOldAfterInsertHooks []BattleWarMachineQueuesOldHook

var battleWarMachineQueuesOldBeforeUpdateHooks []BattleWarMachineQueuesOldHook
var battleWarMachineQueuesOldAfterUpdateHooks []BattleWarMachineQueuesOldHook

var battleWarMachineQueuesOldBeforeDeleteHooks []BattleWarMachineQueuesOldHook
var battleWarMachineQueuesOldAfterDeleteHooks []BattleWarMachineQueuesOldHook

var battleWarMachineQueuesOldBeforeUpsertHooks []BattleWarMachineQueuesOldHook
var battleWarMachineQueuesOldAfterUpsertHooks []BattleWarMachineQueuesOldHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BattleWarMachineQueuesOld) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range battleWarMachineQueuesOldAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BattleWarMachineQueuesOld) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleWarMachineQueuesOldBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BattleWarMachineQueuesOld) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleWarMachineQueuesOldAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BattleWarMachineQueuesOld) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleWarMachineQueuesOldBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BattleWarMachineQueuesOld) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleWarMachineQueuesOldAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BattleWarMachineQueuesOld) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleWarMachineQueuesOldBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BattleWarMachineQueuesOld) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleWarMachineQueuesOldAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BattleWarMachineQueuesOld) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleWarMachineQueuesOldBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BattleWarMachineQueuesOld) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleWarMachineQueuesOldAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattleWarMachineQueuesOldHook registers your hook function for all future operations.
func AddBattleWarMachineQueuesOldHook(hookPoint boil.HookPoint, battleWarMachineQueuesOldHook BattleWarMachineQueuesOldHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		battleWarMachineQueuesOldAfterSelectHooks = append(battleWarMachineQueuesOldAfterSelectHooks, battleWarMachineQueuesOldHook)
	case boil.BeforeInsertHook:
		battleWarMachineQueuesOldBeforeInsertHooks = append(battleWarMachineQueuesOldBeforeInsertHooks, battleWarMachineQueuesOldHook)
	case boil.AfterInsertHook:
		battleWarMachineQueuesOldAfterInsertHooks = append(battleWarMachineQueuesOldAfterInsertHooks, battleWarMachineQueuesOldHook)
	case boil.BeforeUpdateHook:
		battleWarMachineQueuesOldBeforeUpdateHooks = append(battleWarMachineQueuesOldBeforeUpdateHooks, battleWarMachineQueuesOldHook)
	case boil.AfterUpdateHook:
		battleWarMachineQueuesOldAfterUpdateHooks = append(battleWarMachineQueuesOldAfterUpdateHooks, battleWarMachineQueuesOldHook)
	case boil.BeforeDeleteHook:
		battleWarMachineQueuesOldBeforeDeleteHooks = append(battleWarMachineQueuesOldBeforeDeleteHooks, battleWarMachineQueuesOldHook)
	case boil.AfterDeleteHook:
		battleWarMachineQueuesOldAfterDeleteHooks = append(battleWarMachineQueuesOldAfterDeleteHooks, battleWarMachineQueuesOldHook)
	case boil.BeforeUpsertHook:
		battleWarMachineQueuesOldBeforeUpsertHooks = append(battleWarMachineQueuesOldBeforeUpsertHooks, battleWarMachineQueuesOldHook)
	case boil.AfterUpsertHook:
		battleWarMachineQueuesOldAfterUpsertHooks = append(battleWarMachineQueuesOldAfterUpsertHooks, battleWarMachineQueuesOldHook)
	}
}

// One returns a single battleWarMachineQueuesOld record from the query.
func (q battleWarMachineQueuesOldQuery) One(exec boil.Executor) (*BattleWarMachineQueuesOld, error) {
	o := &BattleWarMachineQueuesOld{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for battle_war_machine_queues_old")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BattleWarMachineQueuesOld records from the query.
func (q battleWarMachineQueuesOldQuery) All(exec boil.Executor) (BattleWarMachineQueuesOldSlice, error) {
	var o []*BattleWarMachineQueuesOld

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BattleWarMachineQueuesOld slice")
	}

	if len(battleWarMachineQueuesOldAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BattleWarMachineQueuesOld records in the query.
func (q battleWarMachineQueuesOldQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count battle_war_machine_queues_old rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battleWarMachineQueuesOldQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if battle_war_machine_queues_old exists")
	}

	return count > 0, nil
}

// BattleWarMachineQueuesOlds retrieves all the records using an executor.
func BattleWarMachineQueuesOlds(mods ...qm.QueryMod) battleWarMachineQueuesOldQuery {
	mods = append(mods, qm.From("\"battle_war_machine_queues_old\""), qmhelper.WhereIsNull("\"battle_war_machine_queues_old\".\"deleted_at\""))
	return battleWarMachineQueuesOldQuery{NewQuery(mods...)}
}

// FindBattleWarMachineQueuesOld retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattleWarMachineQueuesOld(exec boil.Executor, iD string, selectCols ...string) (*BattleWarMachineQueuesOld, error) {
	battleWarMachineQueuesOldObj := &BattleWarMachineQueuesOld{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battle_war_machine_queues_old\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, battleWarMachineQueuesOldObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from battle_war_machine_queues_old")
	}

	if err = battleWarMachineQueuesOldObj.doAfterSelectHooks(exec); err != nil {
		return battleWarMachineQueuesOldObj, err
	}

	return battleWarMachineQueuesOldObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BattleWarMachineQueuesOld) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_war_machine_queues_old provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleWarMachineQueuesOldColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battleWarMachineQueuesOldInsertCacheMut.RLock()
	cache, cached := battleWarMachineQueuesOldInsertCache[key]
	battleWarMachineQueuesOldInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battleWarMachineQueuesOldAllColumns,
			battleWarMachineQueuesOldColumnsWithDefault,
			battleWarMachineQueuesOldColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battleWarMachineQueuesOldType, battleWarMachineQueuesOldMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battleWarMachineQueuesOldType, battleWarMachineQueuesOldMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battle_war_machine_queues_old\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battle_war_machine_queues_old\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into battle_war_machine_queues_old")
	}

	if !cached {
		battleWarMachineQueuesOldInsertCacheMut.Lock()
		battleWarMachineQueuesOldInsertCache[key] = cache
		battleWarMachineQueuesOldInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BattleWarMachineQueuesOld.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BattleWarMachineQueuesOld) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battleWarMachineQueuesOldUpdateCacheMut.RLock()
	cache, cached := battleWarMachineQueuesOldUpdateCache[key]
	battleWarMachineQueuesOldUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battleWarMachineQueuesOldAllColumns,
			battleWarMachineQueuesOldPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update battle_war_machine_queues_old, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battle_war_machine_queues_old\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battleWarMachineQueuesOldPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battleWarMachineQueuesOldType, battleWarMachineQueuesOldMapping, append(wl, battleWarMachineQueuesOldPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update battle_war_machine_queues_old row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for battle_war_machine_queues_old")
	}

	if !cached {
		battleWarMachineQueuesOldUpdateCacheMut.Lock()
		battleWarMachineQueuesOldUpdateCache[key] = cache
		battleWarMachineQueuesOldUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battleWarMachineQueuesOldQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for battle_war_machine_queues_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for battle_war_machine_queues_old")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattleWarMachineQueuesOldSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleWarMachineQueuesOldPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battle_war_machine_queues_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battleWarMachineQueuesOldPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in battleWarMachineQueuesOld slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all battleWarMachineQueuesOld")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BattleWarMachineQueuesOld) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_war_machine_queues_old provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleWarMachineQueuesOldColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battleWarMachineQueuesOldUpsertCacheMut.RLock()
	cache, cached := battleWarMachineQueuesOldUpsertCache[key]
	battleWarMachineQueuesOldUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battleWarMachineQueuesOldAllColumns,
			battleWarMachineQueuesOldColumnsWithDefault,
			battleWarMachineQueuesOldColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			battleWarMachineQueuesOldAllColumns,
			battleWarMachineQueuesOldPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert battle_war_machine_queues_old, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battleWarMachineQueuesOldPrimaryKeyColumns))
			copy(conflict, battleWarMachineQueuesOldPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battle_war_machine_queues_old\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battleWarMachineQueuesOldType, battleWarMachineQueuesOldMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battleWarMachineQueuesOldType, battleWarMachineQueuesOldMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert battle_war_machine_queues_old")
	}

	if !cached {
		battleWarMachineQueuesOldUpsertCacheMut.Lock()
		battleWarMachineQueuesOldUpsertCache[key] = cache
		battleWarMachineQueuesOldUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BattleWarMachineQueuesOld record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BattleWarMachineQueuesOld) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BattleWarMachineQueuesOld provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battleWarMachineQueuesOldPrimaryKeyMapping)
		sql = "DELETE FROM \"battle_war_machine_queues_old\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"battle_war_machine_queues_old\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(battleWarMachineQueuesOldType, battleWarMachineQueuesOldMapping, append(wl, battleWarMachineQueuesOldPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from battle_war_machine_queues_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for battle_war_machine_queues_old")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battleWarMachineQueuesOldQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no battleWarMachineQueuesOldQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battle_war_machine_queues_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_war_machine_queues_old")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattleWarMachineQueuesOldSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(battleWarMachineQueuesOldBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleWarMachineQueuesOldPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"battle_war_machine_queues_old\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleWarMachineQueuesOldPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleWarMachineQueuesOldPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"battle_war_machine_queues_old\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, battleWarMachineQueuesOldPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battleWarMachineQueuesOld slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_war_machine_queues_old")
	}

	if len(battleWarMachineQueuesOldAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BattleWarMachineQueuesOld) Reload(exec boil.Executor) error {
	ret, err := FindBattleWarMachineQueuesOld(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattleWarMachineQueuesOldSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattleWarMachineQueuesOldSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleWarMachineQueuesOldPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battle_war_machine_queues_old\".* FROM \"battle_war_machine_queues_old\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleWarMachineQueuesOldPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BattleWarMachineQueuesOldSlice")
	}

	*o = slice

	return nil
}

// BattleWarMachineQueuesOldExists checks if the BattleWarMachineQueuesOld row exists.
func BattleWarMachineQueuesOldExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battle_war_machine_queues_old\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if battle_war_machine_queues_old exists")
	}

	return exists, nil
}
