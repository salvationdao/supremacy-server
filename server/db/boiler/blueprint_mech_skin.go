// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BlueprintMechSkin is an object representing the database table.
type BlueprintMechSkin struct {
	ID           string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Collection   string    `boiler:"collection" boil:"collection" json:"collection" toml:"collection" yaml:"collection"`
	Label        string    `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	Tier         string    `boiler:"tier" boil:"tier" json:"tier" toml:"tier" yaml:"tier"`
	CreatedAt    time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DefaultLevel int       `boiler:"default_level" boil:"default_level" json:"default_level" toml:"default_level" yaml:"default_level"`

	R *blueprintMechSkinR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L blueprintMechSkinL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlueprintMechSkinColumns = struct {
	ID           string
	Collection   string
	Label        string
	Tier         string
	CreatedAt    string
	DefaultLevel string
}{
	ID:           "id",
	Collection:   "collection",
	Label:        "label",
	Tier:         "tier",
	CreatedAt:    "created_at",
	DefaultLevel: "default_level",
}

var BlueprintMechSkinTableColumns = struct {
	ID           string
	Collection   string
	Label        string
	Tier         string
	CreatedAt    string
	DefaultLevel string
}{
	ID:           "blueprint_mech_skin.id",
	Collection:   "blueprint_mech_skin.collection",
	Label:        "blueprint_mech_skin.label",
	Tier:         "blueprint_mech_skin.tier",
	CreatedAt:    "blueprint_mech_skin.created_at",
	DefaultLevel: "blueprint_mech_skin.default_level",
}

// Generated where

var BlueprintMechSkinWhere = struct {
	ID           whereHelperstring
	Collection   whereHelperstring
	Label        whereHelperstring
	Tier         whereHelperstring
	CreatedAt    whereHelpertime_Time
	DefaultLevel whereHelperint
}{
	ID:           whereHelperstring{field: "\"blueprint_mech_skin\".\"id\""},
	Collection:   whereHelperstring{field: "\"blueprint_mech_skin\".\"collection\""},
	Label:        whereHelperstring{field: "\"blueprint_mech_skin\".\"label\""},
	Tier:         whereHelperstring{field: "\"blueprint_mech_skin\".\"tier\""},
	CreatedAt:    whereHelpertime_Time{field: "\"blueprint_mech_skin\".\"created_at\""},
	DefaultLevel: whereHelperint{field: "\"blueprint_mech_skin\".\"default_level\""},
}

// BlueprintMechSkinRels is where relationship names are stored.
var BlueprintMechSkinRels = struct {
	ChassisSkinBlueprintChasses      string
	DefaultChassisSkinBlueprintMechs string
	BlueprintChassisSkins            string
	MechModelSkinCompatibilities     string
}{
	ChassisSkinBlueprintChasses:      "ChassisSkinBlueprintChasses",
	DefaultChassisSkinBlueprintMechs: "DefaultChassisSkinBlueprintMechs",
	BlueprintChassisSkins:            "BlueprintChassisSkins",
	MechModelSkinCompatibilities:     "MechModelSkinCompatibilities",
}

// blueprintMechSkinR is where relationships are stored.
type blueprintMechSkinR struct {
	ChassisSkinBlueprintChasses      BlueprintChassisSlice           `boiler:"ChassisSkinBlueprintChasses" boil:"ChassisSkinBlueprintChasses" json:"ChassisSkinBlueprintChasses" toml:"ChassisSkinBlueprintChasses" yaml:"ChassisSkinBlueprintChasses"`
	DefaultChassisSkinBlueprintMechs BlueprintMechSlice              `boiler:"DefaultChassisSkinBlueprintMechs" boil:"DefaultChassisSkinBlueprintMechs" json:"DefaultChassisSkinBlueprintMechs" toml:"DefaultChassisSkinBlueprintMechs" yaml:"DefaultChassisSkinBlueprintMechs"`
	BlueprintChassisSkins            ChassisSkinSlice                `boiler:"BlueprintChassisSkins" boil:"BlueprintChassisSkins" json:"BlueprintChassisSkins" toml:"BlueprintChassisSkins" yaml:"BlueprintChassisSkins"`
	MechModelSkinCompatibilities     MechModelSkinCompatibilitySlice `boiler:"MechModelSkinCompatibilities" boil:"MechModelSkinCompatibilities" json:"MechModelSkinCompatibilities" toml:"MechModelSkinCompatibilities" yaml:"MechModelSkinCompatibilities"`
}

// NewStruct creates a new relationship struct
func (*blueprintMechSkinR) NewStruct() *blueprintMechSkinR {
	return &blueprintMechSkinR{}
}

// blueprintMechSkinL is where Load methods for each relationship are stored.
type blueprintMechSkinL struct{}

var (
	blueprintMechSkinAllColumns            = []string{"id", "collection", "label", "tier", "created_at", "default_level"}
	blueprintMechSkinColumnsWithoutDefault = []string{"label"}
	blueprintMechSkinColumnsWithDefault    = []string{"id", "collection", "tier", "created_at", "default_level"}
	blueprintMechSkinPrimaryKeyColumns     = []string{"id"}
	blueprintMechSkinGeneratedColumns      = []string{}
)

type (
	// BlueprintMechSkinSlice is an alias for a slice of pointers to BlueprintMechSkin.
	// This should almost always be used instead of []BlueprintMechSkin.
	BlueprintMechSkinSlice []*BlueprintMechSkin
	// BlueprintMechSkinHook is the signature for custom BlueprintMechSkin hook methods
	BlueprintMechSkinHook func(boil.Executor, *BlueprintMechSkin) error

	blueprintMechSkinQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blueprintMechSkinType                 = reflect.TypeOf(&BlueprintMechSkin{})
	blueprintMechSkinMapping              = queries.MakeStructMapping(blueprintMechSkinType)
	blueprintMechSkinPrimaryKeyMapping, _ = queries.BindMapping(blueprintMechSkinType, blueprintMechSkinMapping, blueprintMechSkinPrimaryKeyColumns)
	blueprintMechSkinInsertCacheMut       sync.RWMutex
	blueprintMechSkinInsertCache          = make(map[string]insertCache)
	blueprintMechSkinUpdateCacheMut       sync.RWMutex
	blueprintMechSkinUpdateCache          = make(map[string]updateCache)
	blueprintMechSkinUpsertCacheMut       sync.RWMutex
	blueprintMechSkinUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var blueprintMechSkinAfterSelectHooks []BlueprintMechSkinHook

var blueprintMechSkinBeforeInsertHooks []BlueprintMechSkinHook
var blueprintMechSkinAfterInsertHooks []BlueprintMechSkinHook

var blueprintMechSkinBeforeUpdateHooks []BlueprintMechSkinHook
var blueprintMechSkinAfterUpdateHooks []BlueprintMechSkinHook

var blueprintMechSkinBeforeDeleteHooks []BlueprintMechSkinHook
var blueprintMechSkinAfterDeleteHooks []BlueprintMechSkinHook

var blueprintMechSkinBeforeUpsertHooks []BlueprintMechSkinHook
var blueprintMechSkinAfterUpsertHooks []BlueprintMechSkinHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BlueprintMechSkin) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechSkinAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BlueprintMechSkin) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechSkinBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BlueprintMechSkin) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechSkinAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BlueprintMechSkin) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechSkinBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BlueprintMechSkin) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechSkinAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BlueprintMechSkin) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechSkinBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BlueprintMechSkin) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechSkinAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BlueprintMechSkin) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechSkinBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BlueprintMechSkin) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechSkinAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBlueprintMechSkinHook registers your hook function for all future operations.
func AddBlueprintMechSkinHook(hookPoint boil.HookPoint, blueprintMechSkinHook BlueprintMechSkinHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		blueprintMechSkinAfterSelectHooks = append(blueprintMechSkinAfterSelectHooks, blueprintMechSkinHook)
	case boil.BeforeInsertHook:
		blueprintMechSkinBeforeInsertHooks = append(blueprintMechSkinBeforeInsertHooks, blueprintMechSkinHook)
	case boil.AfterInsertHook:
		blueprintMechSkinAfterInsertHooks = append(blueprintMechSkinAfterInsertHooks, blueprintMechSkinHook)
	case boil.BeforeUpdateHook:
		blueprintMechSkinBeforeUpdateHooks = append(blueprintMechSkinBeforeUpdateHooks, blueprintMechSkinHook)
	case boil.AfterUpdateHook:
		blueprintMechSkinAfterUpdateHooks = append(blueprintMechSkinAfterUpdateHooks, blueprintMechSkinHook)
	case boil.BeforeDeleteHook:
		blueprintMechSkinBeforeDeleteHooks = append(blueprintMechSkinBeforeDeleteHooks, blueprintMechSkinHook)
	case boil.AfterDeleteHook:
		blueprintMechSkinAfterDeleteHooks = append(blueprintMechSkinAfterDeleteHooks, blueprintMechSkinHook)
	case boil.BeforeUpsertHook:
		blueprintMechSkinBeforeUpsertHooks = append(blueprintMechSkinBeforeUpsertHooks, blueprintMechSkinHook)
	case boil.AfterUpsertHook:
		blueprintMechSkinAfterUpsertHooks = append(blueprintMechSkinAfterUpsertHooks, blueprintMechSkinHook)
	}
}

// One returns a single blueprintMechSkin record from the query.
func (q blueprintMechSkinQuery) One(exec boil.Executor) (*BlueprintMechSkin, error) {
	o := &BlueprintMechSkin{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for blueprint_mech_skin")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BlueprintMechSkin records from the query.
func (q blueprintMechSkinQuery) All(exec boil.Executor) (BlueprintMechSkinSlice, error) {
	var o []*BlueprintMechSkin

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BlueprintMechSkin slice")
	}

	if len(blueprintMechSkinAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BlueprintMechSkin records in the query.
func (q blueprintMechSkinQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count blueprint_mech_skin rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q blueprintMechSkinQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if blueprint_mech_skin exists")
	}

	return count > 0, nil
}

// ChassisSkinBlueprintChasses retrieves all the blueprint_chassis's BlueprintChasses with an executor via chassis_skin_id column.
func (o *BlueprintMechSkin) ChassisSkinBlueprintChasses(mods ...qm.QueryMod) blueprintChassisQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"blueprint_chassis\".\"chassis_skin_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"blueprint_chassis\".\"deleted_at\""),
	)

	query := BlueprintChasses(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_chassis\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"blueprint_chassis\".*"})
	}

	return query
}

// DefaultChassisSkinBlueprintMechs retrieves all the blueprint_mech's BlueprintMechs with an executor via default_chassis_skin_id column.
func (o *BlueprintMechSkin) DefaultChassisSkinBlueprintMechs(mods ...qm.QueryMod) blueprintMechQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"blueprint_mechs\".\"default_chassis_skin_id\"=?", o.ID),
	)

	query := BlueprintMechs(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_mechs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"blueprint_mechs\".*"})
	}

	return query
}

// BlueprintChassisSkins retrieves all the chassis_skin's ChassisSkins with an executor via blueprint_id column.
func (o *BlueprintMechSkin) BlueprintChassisSkins(mods ...qm.QueryMod) chassisSkinQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chassis_skin\".\"blueprint_id\"=?", o.ID),
	)

	query := ChassisSkins(queryMods...)
	queries.SetFrom(query.Query, "\"chassis_skin\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"chassis_skin\".*"})
	}

	return query
}

// MechModelSkinCompatibilities retrieves all the mech_model_skin_compatibility's MechModelSkinCompatibilities with an executor.
func (o *BlueprintMechSkin) MechModelSkinCompatibilities(mods ...qm.QueryMod) mechModelSkinCompatibilityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mech_model_skin_compatibilities\".\"blueprint_mech_skin_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"mech_model_skin_compatibilities\".\"deleted_at\""),
	)

	query := MechModelSkinCompatibilities(queryMods...)
	queries.SetFrom(query.Query, "\"mech_model_skin_compatibilities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mech_model_skin_compatibilities\".*"})
	}

	return query
}

// LoadChassisSkinBlueprintChasses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blueprintMechSkinL) LoadChassisSkinBlueprintChasses(e boil.Executor, singular bool, maybeBlueprintMechSkin interface{}, mods queries.Applicator) error {
	var slice []*BlueprintMechSkin
	var object *BlueprintMechSkin

	if singular {
		object = maybeBlueprintMechSkin.(*BlueprintMechSkin)
	} else {
		slice = *maybeBlueprintMechSkin.(*[]*BlueprintMechSkin)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintMechSkinR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintMechSkinR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_chassis`),
		qm.WhereIn(`blueprint_chassis.chassis_skin_id in ?`, args...),
		qmhelper.WhereIsNull(`blueprint_chassis.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blueprint_chassis")
	}

	var resultSlice []*BlueprintChassis
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blueprint_chassis")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blueprint_chassis")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_chassis")
	}

	if len(blueprintChassisAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChassisSkinBlueprintChasses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blueprintChassisR{}
			}
			foreign.R.ChassisSkin = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ChassisSkinID) {
				local.R.ChassisSkinBlueprintChasses = append(local.R.ChassisSkinBlueprintChasses, foreign)
				if foreign.R == nil {
					foreign.R = &blueprintChassisR{}
				}
				foreign.R.ChassisSkin = local
				break
			}
		}
	}

	return nil
}

// LoadDefaultChassisSkinBlueprintMechs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blueprintMechSkinL) LoadDefaultChassisSkinBlueprintMechs(e boil.Executor, singular bool, maybeBlueprintMechSkin interface{}, mods queries.Applicator) error {
	var slice []*BlueprintMechSkin
	var object *BlueprintMechSkin

	if singular {
		object = maybeBlueprintMechSkin.(*BlueprintMechSkin)
	} else {
		slice = *maybeBlueprintMechSkin.(*[]*BlueprintMechSkin)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintMechSkinR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintMechSkinR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_mechs`),
		qm.WhereIn(`blueprint_mechs.default_chassis_skin_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blueprint_mechs")
	}

	var resultSlice []*BlueprintMech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blueprint_mechs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blueprint_mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_mechs")
	}

	if len(blueprintMechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DefaultChassisSkinBlueprintMechs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blueprintMechR{}
			}
			foreign.R.DefaultChassisSkin = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DefaultChassisSkinID {
				local.R.DefaultChassisSkinBlueprintMechs = append(local.R.DefaultChassisSkinBlueprintMechs, foreign)
				if foreign.R == nil {
					foreign.R = &blueprintMechR{}
				}
				foreign.R.DefaultChassisSkin = local
				break
			}
		}
	}

	return nil
}

// LoadBlueprintChassisSkins allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blueprintMechSkinL) LoadBlueprintChassisSkins(e boil.Executor, singular bool, maybeBlueprintMechSkin interface{}, mods queries.Applicator) error {
	var slice []*BlueprintMechSkin
	var object *BlueprintMechSkin

	if singular {
		object = maybeBlueprintMechSkin.(*BlueprintMechSkin)
	} else {
		slice = *maybeBlueprintMechSkin.(*[]*BlueprintMechSkin)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintMechSkinR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintMechSkinR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chassis_skin`),
		qm.WhereIn(`chassis_skin.blueprint_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chassis_skin")
	}

	var resultSlice []*ChassisSkin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chassis_skin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chassis_skin")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chassis_skin")
	}

	if len(chassisSkinAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlueprintChassisSkins = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chassisSkinR{}
			}
			foreign.R.Blueprint = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BlueprintID {
				local.R.BlueprintChassisSkins = append(local.R.BlueprintChassisSkins, foreign)
				if foreign.R == nil {
					foreign.R = &chassisSkinR{}
				}
				foreign.R.Blueprint = local
				break
			}
		}
	}

	return nil
}

// LoadMechModelSkinCompatibilities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blueprintMechSkinL) LoadMechModelSkinCompatibilities(e boil.Executor, singular bool, maybeBlueprintMechSkin interface{}, mods queries.Applicator) error {
	var slice []*BlueprintMechSkin
	var object *BlueprintMechSkin

	if singular {
		object = maybeBlueprintMechSkin.(*BlueprintMechSkin)
	} else {
		slice = *maybeBlueprintMechSkin.(*[]*BlueprintMechSkin)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintMechSkinR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintMechSkinR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_model_skin_compatibilities`),
		qm.WhereIn(`mech_model_skin_compatibilities.blueprint_mech_skin_id in ?`, args...),
		qmhelper.WhereIsNull(`mech_model_skin_compatibilities.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mech_model_skin_compatibilities")
	}

	var resultSlice []*MechModelSkinCompatibility
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mech_model_skin_compatibilities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mech_model_skin_compatibilities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_model_skin_compatibilities")
	}

	if len(mechModelSkinCompatibilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MechModelSkinCompatibilities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mechModelSkinCompatibilityR{}
			}
			foreign.R.BlueprintMechSkin = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BlueprintMechSkinID {
				local.R.MechModelSkinCompatibilities = append(local.R.MechModelSkinCompatibilities, foreign)
				if foreign.R == nil {
					foreign.R = &mechModelSkinCompatibilityR{}
				}
				foreign.R.BlueprintMechSkin = local
				break
			}
		}
	}

	return nil
}

// AddChassisSkinBlueprintChasses adds the given related objects to the existing relationships
// of the blueprint_mech_skin, optionally inserting them as new records.
// Appends related to o.R.ChassisSkinBlueprintChasses.
// Sets related.R.ChassisSkin appropriately.
func (o *BlueprintMechSkin) AddChassisSkinBlueprintChasses(exec boil.Executor, insert bool, related ...*BlueprintChassis) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ChassisSkinID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"blueprint_chassis\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"chassis_skin_id"}),
				strmangle.WhereClause("\"", "\"", 2, blueprintChassisPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ChassisSkinID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &blueprintMechSkinR{
			ChassisSkinBlueprintChasses: related,
		}
	} else {
		o.R.ChassisSkinBlueprintChasses = append(o.R.ChassisSkinBlueprintChasses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blueprintChassisR{
				ChassisSkin: o,
			}
		} else {
			rel.R.ChassisSkin = o
		}
	}
	return nil
}

// SetChassisSkinBlueprintChasses removes all previously related items of the
// blueprint_mech_skin replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ChassisSkin's ChassisSkinBlueprintChasses accordingly.
// Replaces o.R.ChassisSkinBlueprintChasses with related.
// Sets related.R.ChassisSkin's ChassisSkinBlueprintChasses accordingly.
func (o *BlueprintMechSkin) SetChassisSkinBlueprintChasses(exec boil.Executor, insert bool, related ...*BlueprintChassis) error {
	query := "update \"blueprint_chassis\" set \"chassis_skin_id\" = null where \"chassis_skin_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ChassisSkinBlueprintChasses {
			queries.SetScanner(&rel.ChassisSkinID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ChassisSkin = nil
		}

		o.R.ChassisSkinBlueprintChasses = nil
	}
	return o.AddChassisSkinBlueprintChasses(exec, insert, related...)
}

// RemoveChassisSkinBlueprintChasses relationships from objects passed in.
// Removes related items from R.ChassisSkinBlueprintChasses (uses pointer comparison, removal does not keep order)
// Sets related.R.ChassisSkin.
func (o *BlueprintMechSkin) RemoveChassisSkinBlueprintChasses(exec boil.Executor, related ...*BlueprintChassis) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ChassisSkinID, nil)
		if rel.R != nil {
			rel.R.ChassisSkin = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("chassis_skin_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ChassisSkinBlueprintChasses {
			if rel != ri {
				continue
			}

			ln := len(o.R.ChassisSkinBlueprintChasses)
			if ln > 1 && i < ln-1 {
				o.R.ChassisSkinBlueprintChasses[i] = o.R.ChassisSkinBlueprintChasses[ln-1]
			}
			o.R.ChassisSkinBlueprintChasses = o.R.ChassisSkinBlueprintChasses[:ln-1]
			break
		}
	}

	return nil
}

// AddDefaultChassisSkinBlueprintMechs adds the given related objects to the existing relationships
// of the blueprint_mech_skin, optionally inserting them as new records.
// Appends related to o.R.DefaultChassisSkinBlueprintMechs.
// Sets related.R.DefaultChassisSkin appropriately.
func (o *BlueprintMechSkin) AddDefaultChassisSkinBlueprintMechs(exec boil.Executor, insert bool, related ...*BlueprintMech) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DefaultChassisSkinID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"blueprint_mechs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"default_chassis_skin_id"}),
				strmangle.WhereClause("\"", "\"", 2, blueprintMechPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DefaultChassisSkinID = o.ID
		}
	}

	if o.R == nil {
		o.R = &blueprintMechSkinR{
			DefaultChassisSkinBlueprintMechs: related,
		}
	} else {
		o.R.DefaultChassisSkinBlueprintMechs = append(o.R.DefaultChassisSkinBlueprintMechs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blueprintMechR{
				DefaultChassisSkin: o,
			}
		} else {
			rel.R.DefaultChassisSkin = o
		}
	}
	return nil
}

// AddBlueprintChassisSkins adds the given related objects to the existing relationships
// of the blueprint_mech_skin, optionally inserting them as new records.
// Appends related to o.R.BlueprintChassisSkins.
// Sets related.R.Blueprint appropriately.
func (o *BlueprintMechSkin) AddBlueprintChassisSkins(exec boil.Executor, insert bool, related ...*ChassisSkin) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BlueprintID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chassis_skin\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_id"}),
				strmangle.WhereClause("\"", "\"", 2, chassisSkinPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BlueprintID = o.ID
		}
	}

	if o.R == nil {
		o.R = &blueprintMechSkinR{
			BlueprintChassisSkins: related,
		}
	} else {
		o.R.BlueprintChassisSkins = append(o.R.BlueprintChassisSkins, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chassisSkinR{
				Blueprint: o,
			}
		} else {
			rel.R.Blueprint = o
		}
	}
	return nil
}

// AddMechModelSkinCompatibilities adds the given related objects to the existing relationships
// of the blueprint_mech_skin, optionally inserting them as new records.
// Appends related to o.R.MechModelSkinCompatibilities.
// Sets related.R.BlueprintMechSkin appropriately.
func (o *BlueprintMechSkin) AddMechModelSkinCompatibilities(exec boil.Executor, insert bool, related ...*MechModelSkinCompatibility) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BlueprintMechSkinID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mech_model_skin_compatibilities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_mech_skin_id"}),
				strmangle.WhereClause("\"", "\"", 2, mechModelSkinCompatibilityPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.BlueprintMechSkinID, rel.MechModelID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BlueprintMechSkinID = o.ID
		}
	}

	if o.R == nil {
		o.R = &blueprintMechSkinR{
			MechModelSkinCompatibilities: related,
		}
	} else {
		o.R.MechModelSkinCompatibilities = append(o.R.MechModelSkinCompatibilities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mechModelSkinCompatibilityR{
				BlueprintMechSkin: o,
			}
		} else {
			rel.R.BlueprintMechSkin = o
		}
	}
	return nil
}

// BlueprintMechSkins retrieves all the records using an executor.
func BlueprintMechSkins(mods ...qm.QueryMod) blueprintMechSkinQuery {
	mods = append(mods, qm.From("\"blueprint_mech_skin\""))
	return blueprintMechSkinQuery{NewQuery(mods...)}
}

// FindBlueprintMechSkin retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlueprintMechSkin(exec boil.Executor, iD string, selectCols ...string) (*BlueprintMechSkin, error) {
	blueprintMechSkinObj := &BlueprintMechSkin{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"blueprint_mech_skin\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, blueprintMechSkinObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from blueprint_mech_skin")
	}

	if err = blueprintMechSkinObj.doAfterSelectHooks(exec); err != nil {
		return blueprintMechSkinObj, err
	}

	return blueprintMechSkinObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlueprintMechSkin) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_mech_skin provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintMechSkinColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blueprintMechSkinInsertCacheMut.RLock()
	cache, cached := blueprintMechSkinInsertCache[key]
	blueprintMechSkinInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blueprintMechSkinAllColumns,
			blueprintMechSkinColumnsWithDefault,
			blueprintMechSkinColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blueprintMechSkinType, blueprintMechSkinMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blueprintMechSkinType, blueprintMechSkinMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"blueprint_mech_skin\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"blueprint_mech_skin\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into blueprint_mech_skin")
	}

	if !cached {
		blueprintMechSkinInsertCacheMut.Lock()
		blueprintMechSkinInsertCache[key] = cache
		blueprintMechSkinInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BlueprintMechSkin.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlueprintMechSkin) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	blueprintMechSkinUpdateCacheMut.RLock()
	cache, cached := blueprintMechSkinUpdateCache[key]
	blueprintMechSkinUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blueprintMechSkinAllColumns,
			blueprintMechSkinPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update blueprint_mech_skin, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"blueprint_mech_skin\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, blueprintMechSkinPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blueprintMechSkinType, blueprintMechSkinMapping, append(wl, blueprintMechSkinPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update blueprint_mech_skin row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for blueprint_mech_skin")
	}

	if !cached {
		blueprintMechSkinUpdateCacheMut.Lock()
		blueprintMechSkinUpdateCache[key] = cache
		blueprintMechSkinUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q blueprintMechSkinQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for blueprint_mech_skin")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for blueprint_mech_skin")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlueprintMechSkinSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintMechSkinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"blueprint_mech_skin\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, blueprintMechSkinPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in blueprintMechSkin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all blueprintMechSkin")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlueprintMechSkin) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_mech_skin provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintMechSkinColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blueprintMechSkinUpsertCacheMut.RLock()
	cache, cached := blueprintMechSkinUpsertCache[key]
	blueprintMechSkinUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blueprintMechSkinAllColumns,
			blueprintMechSkinColumnsWithDefault,
			blueprintMechSkinColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			blueprintMechSkinAllColumns,
			blueprintMechSkinPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert blueprint_mech_skin, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(blueprintMechSkinPrimaryKeyColumns))
			copy(conflict, blueprintMechSkinPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"blueprint_mech_skin\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(blueprintMechSkinType, blueprintMechSkinMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blueprintMechSkinType, blueprintMechSkinMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert blueprint_mech_skin")
	}

	if !cached {
		blueprintMechSkinUpsertCacheMut.Lock()
		blueprintMechSkinUpsertCache[key] = cache
		blueprintMechSkinUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BlueprintMechSkin record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlueprintMechSkin) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BlueprintMechSkin provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blueprintMechSkinPrimaryKeyMapping)
	sql := "DELETE FROM \"blueprint_mech_skin\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from blueprint_mech_skin")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for blueprint_mech_skin")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q blueprintMechSkinQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no blueprintMechSkinQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprint_mech_skin")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_mech_skin")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlueprintMechSkinSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(blueprintMechSkinBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintMechSkinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"blueprint_mech_skin\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintMechSkinPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprintMechSkin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_mech_skin")
	}

	if len(blueprintMechSkinAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlueprintMechSkin) Reload(exec boil.Executor) error {
	ret, err := FindBlueprintMechSkin(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlueprintMechSkinSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlueprintMechSkinSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintMechSkinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"blueprint_mech_skin\".* FROM \"blueprint_mech_skin\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintMechSkinPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BlueprintMechSkinSlice")
	}

	*o = slice

	return nil
}

// BlueprintMechSkinExists checks if the BlueprintMechSkin row exists.
func BlueprintMechSkinExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"blueprint_mech_skin\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if blueprint_mech_skin exists")
	}

	return exists, nil
}
