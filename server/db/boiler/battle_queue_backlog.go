// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BattleQueueBacklog is an object representing the database table.
type BattleQueueBacklog struct {
	MechID             string      `boiler:"mech_id" boil:"mech_id" json:"mech_id" toml:"mech_id" yaml:"mech_id"`
	FactionID          string      `boiler:"faction_id" boil:"faction_id" json:"faction_id" toml:"faction_id" yaml:"faction_id"`
	OwnerID            string      `boiler:"owner_id" boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	FeeID              null.String `boiler:"fee_id" boil:"fee_id" json:"fee_id,omitempty" toml:"fee_id" yaml:"fee_id,omitempty"`
	QueueFeeTXID       null.String `boiler:"queue_fee_tx_id" boil:"queue_fee_tx_id" json:"queue_fee_tx_id,omitempty" toml:"queue_fee_tx_id" yaml:"queue_fee_tx_id,omitempty"`
	QueueFeeTXIDRefund null.String `boiler:"queue_fee_tx_id_refund" boil:"queue_fee_tx_id_refund" json:"queue_fee_tx_id_refund,omitempty" toml:"queue_fee_tx_id_refund" yaml:"queue_fee_tx_id_refund,omitempty"`
	UpdatedAt          time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	QueuedAt           time.Time   `boiler:"queued_at" boil:"queued_at" json:"queued_at" toml:"queued_at" yaml:"queued_at"`

	R *battleQueueBacklogR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L battleQueueBacklogL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattleQueueBacklogColumns = struct {
	MechID             string
	FactionID          string
	OwnerID            string
	FeeID              string
	QueueFeeTXID       string
	QueueFeeTXIDRefund string
	UpdatedAt          string
	QueuedAt           string
}{
	MechID:             "mech_id",
	FactionID:          "faction_id",
	OwnerID:            "owner_id",
	FeeID:              "fee_id",
	QueueFeeTXID:       "queue_fee_tx_id",
	QueueFeeTXIDRefund: "queue_fee_tx_id_refund",
	UpdatedAt:          "updated_at",
	QueuedAt:           "queued_at",
}

var BattleQueueBacklogTableColumns = struct {
	MechID             string
	FactionID          string
	OwnerID            string
	FeeID              string
	QueueFeeTXID       string
	QueueFeeTXIDRefund string
	UpdatedAt          string
	QueuedAt           string
}{
	MechID:             "battle_queue_backlog.mech_id",
	FactionID:          "battle_queue_backlog.faction_id",
	OwnerID:            "battle_queue_backlog.owner_id",
	FeeID:              "battle_queue_backlog.fee_id",
	QueueFeeTXID:       "battle_queue_backlog.queue_fee_tx_id",
	QueueFeeTXIDRefund: "battle_queue_backlog.queue_fee_tx_id_refund",
	UpdatedAt:          "battle_queue_backlog.updated_at",
	QueuedAt:           "battle_queue_backlog.queued_at",
}

// Generated where

var BattleQueueBacklogWhere = struct {
	MechID             whereHelperstring
	FactionID          whereHelperstring
	OwnerID            whereHelperstring
	FeeID              whereHelpernull_String
	QueueFeeTXID       whereHelpernull_String
	QueueFeeTXIDRefund whereHelpernull_String
	UpdatedAt          whereHelpertime_Time
	QueuedAt           whereHelpertime_Time
}{
	MechID:             whereHelperstring{field: "\"battle_queue_backlog\".\"mech_id\""},
	FactionID:          whereHelperstring{field: "\"battle_queue_backlog\".\"faction_id\""},
	OwnerID:            whereHelperstring{field: "\"battle_queue_backlog\".\"owner_id\""},
	FeeID:              whereHelpernull_String{field: "\"battle_queue_backlog\".\"fee_id\""},
	QueueFeeTXID:       whereHelpernull_String{field: "\"battle_queue_backlog\".\"queue_fee_tx_id\""},
	QueueFeeTXIDRefund: whereHelpernull_String{field: "\"battle_queue_backlog\".\"queue_fee_tx_id_refund\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"battle_queue_backlog\".\"updated_at\""},
	QueuedAt:           whereHelpertime_Time{field: "\"battle_queue_backlog\".\"queued_at\""},
}

// BattleQueueBacklogRels is where relationship names are stored.
var BattleQueueBacklogRels = struct {
	Mech    string
	Faction string
	Fee     string
	Owner   string
}{
	Mech:    "Mech",
	Faction: "Faction",
	Fee:     "Fee",
	Owner:   "Owner",
}

// battleQueueBacklogR is where relationships are stored.
type battleQueueBacklogR struct {
	Mech    *Mech           `boiler:"Mech" boil:"Mech" json:"Mech" toml:"Mech" yaml:"Mech"`
	Faction *Faction        `boiler:"Faction" boil:"Faction" json:"Faction" toml:"Faction" yaml:"Faction"`
	Fee     *BattleQueueFee `boiler:"Fee" boil:"Fee" json:"Fee" toml:"Fee" yaml:"Fee"`
	Owner   *Player         `boiler:"Owner" boil:"Owner" json:"Owner" toml:"Owner" yaml:"Owner"`
}

// NewStruct creates a new relationship struct
func (*battleQueueBacklogR) NewStruct() *battleQueueBacklogR {
	return &battleQueueBacklogR{}
}

// battleQueueBacklogL is where Load methods for each relationship are stored.
type battleQueueBacklogL struct{}

var (
	battleQueueBacklogAllColumns            = []string{"mech_id", "faction_id", "owner_id", "fee_id", "queue_fee_tx_id", "queue_fee_tx_id_refund", "updated_at", "queued_at"}
	battleQueueBacklogColumnsWithoutDefault = []string{"mech_id", "faction_id", "owner_id"}
	battleQueueBacklogColumnsWithDefault    = []string{"fee_id", "queue_fee_tx_id", "queue_fee_tx_id_refund", "updated_at", "queued_at"}
	battleQueueBacklogPrimaryKeyColumns     = []string{"mech_id"}
	battleQueueBacklogGeneratedColumns      = []string{}
)

type (
	// BattleQueueBacklogSlice is an alias for a slice of pointers to BattleQueueBacklog.
	// This should almost always be used instead of []BattleQueueBacklog.
	BattleQueueBacklogSlice []*BattleQueueBacklog
	// BattleQueueBacklogHook is the signature for custom BattleQueueBacklog hook methods
	BattleQueueBacklogHook func(boil.Executor, *BattleQueueBacklog) error

	battleQueueBacklogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battleQueueBacklogType                 = reflect.TypeOf(&BattleQueueBacklog{})
	battleQueueBacklogMapping              = queries.MakeStructMapping(battleQueueBacklogType)
	battleQueueBacklogPrimaryKeyMapping, _ = queries.BindMapping(battleQueueBacklogType, battleQueueBacklogMapping, battleQueueBacklogPrimaryKeyColumns)
	battleQueueBacklogInsertCacheMut       sync.RWMutex
	battleQueueBacklogInsertCache          = make(map[string]insertCache)
	battleQueueBacklogUpdateCacheMut       sync.RWMutex
	battleQueueBacklogUpdateCache          = make(map[string]updateCache)
	battleQueueBacklogUpsertCacheMut       sync.RWMutex
	battleQueueBacklogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battleQueueBacklogAfterSelectHooks []BattleQueueBacklogHook

var battleQueueBacklogBeforeInsertHooks []BattleQueueBacklogHook
var battleQueueBacklogAfterInsertHooks []BattleQueueBacklogHook

var battleQueueBacklogBeforeUpdateHooks []BattleQueueBacklogHook
var battleQueueBacklogAfterUpdateHooks []BattleQueueBacklogHook

var battleQueueBacklogBeforeDeleteHooks []BattleQueueBacklogHook
var battleQueueBacklogAfterDeleteHooks []BattleQueueBacklogHook

var battleQueueBacklogBeforeUpsertHooks []BattleQueueBacklogHook
var battleQueueBacklogAfterUpsertHooks []BattleQueueBacklogHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BattleQueueBacklog) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueBacklogAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BattleQueueBacklog) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueBacklogBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BattleQueueBacklog) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueBacklogAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BattleQueueBacklog) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueBacklogBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BattleQueueBacklog) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueBacklogAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BattleQueueBacklog) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueBacklogBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BattleQueueBacklog) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueBacklogAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BattleQueueBacklog) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueBacklogBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BattleQueueBacklog) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleQueueBacklogAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattleQueueBacklogHook registers your hook function for all future operations.
func AddBattleQueueBacklogHook(hookPoint boil.HookPoint, battleQueueBacklogHook BattleQueueBacklogHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		battleQueueBacklogAfterSelectHooks = append(battleQueueBacklogAfterSelectHooks, battleQueueBacklogHook)
	case boil.BeforeInsertHook:
		battleQueueBacklogBeforeInsertHooks = append(battleQueueBacklogBeforeInsertHooks, battleQueueBacklogHook)
	case boil.AfterInsertHook:
		battleQueueBacklogAfterInsertHooks = append(battleQueueBacklogAfterInsertHooks, battleQueueBacklogHook)
	case boil.BeforeUpdateHook:
		battleQueueBacklogBeforeUpdateHooks = append(battleQueueBacklogBeforeUpdateHooks, battleQueueBacklogHook)
	case boil.AfterUpdateHook:
		battleQueueBacklogAfterUpdateHooks = append(battleQueueBacklogAfterUpdateHooks, battleQueueBacklogHook)
	case boil.BeforeDeleteHook:
		battleQueueBacklogBeforeDeleteHooks = append(battleQueueBacklogBeforeDeleteHooks, battleQueueBacklogHook)
	case boil.AfterDeleteHook:
		battleQueueBacklogAfterDeleteHooks = append(battleQueueBacklogAfterDeleteHooks, battleQueueBacklogHook)
	case boil.BeforeUpsertHook:
		battleQueueBacklogBeforeUpsertHooks = append(battleQueueBacklogBeforeUpsertHooks, battleQueueBacklogHook)
	case boil.AfterUpsertHook:
		battleQueueBacklogAfterUpsertHooks = append(battleQueueBacklogAfterUpsertHooks, battleQueueBacklogHook)
	}
}

// One returns a single battleQueueBacklog record from the query.
func (q battleQueueBacklogQuery) One(exec boil.Executor) (*BattleQueueBacklog, error) {
	o := &BattleQueueBacklog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for battle_queue_backlog")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BattleQueueBacklog records from the query.
func (q battleQueueBacklogQuery) All(exec boil.Executor) (BattleQueueBacklogSlice, error) {
	var o []*BattleQueueBacklog

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BattleQueueBacklog slice")
	}

	if len(battleQueueBacklogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BattleQueueBacklog records in the query.
func (q battleQueueBacklogQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count battle_queue_backlog rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battleQueueBacklogQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if battle_queue_backlog exists")
	}

	return count > 0, nil
}

// Mech pointed to by the foreign key.
func (o *BattleQueueBacklog) Mech(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MechID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// Faction pointed to by the foreign key.
func (o *BattleQueueBacklog) Faction(mods ...qm.QueryMod) factionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FactionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Factions(queryMods...)
	queries.SetFrom(query.Query, "\"factions\"")

	return query
}

// Fee pointed to by the foreign key.
func (o *BattleQueueBacklog) Fee(mods ...qm.QueryMod) battleQueueFeeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FeeID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := BattleQueueFees(queryMods...)
	queries.SetFrom(query.Query, "\"battle_queue_fees\"")

	return query
}

// Owner pointed to by the foreign key.
func (o *BattleQueueBacklog) Owner(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OwnerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// LoadMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleQueueBacklogL) LoadMech(e boil.Executor, singular bool, maybeBattleQueueBacklog interface{}, mods queries.Applicator) error {
	var slice []*BattleQueueBacklog
	var object *BattleQueueBacklog

	if singular {
		object = maybeBattleQueueBacklog.(*BattleQueueBacklog)
	} else {
		slice = *maybeBattleQueueBacklog.(*[]*BattleQueueBacklog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleQueueBacklogR{}
		}
		args = append(args, object.MechID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleQueueBacklogR{}
			}

			for _, a := range args {
				if a == obj.MechID {
					continue Outer
				}
			}

			args = append(args, obj.MechID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(battleQueueBacklogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Mech = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.BattleQueueBacklog = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MechID == foreign.ID {
				local.R.Mech = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.BattleQueueBacklog = local
				break
			}
		}
	}

	return nil
}

// LoadFaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleQueueBacklogL) LoadFaction(e boil.Executor, singular bool, maybeBattleQueueBacklog interface{}, mods queries.Applicator) error {
	var slice []*BattleQueueBacklog
	var object *BattleQueueBacklog

	if singular {
		object = maybeBattleQueueBacklog.(*BattleQueueBacklog)
	} else {
		slice = *maybeBattleQueueBacklog.(*[]*BattleQueueBacklog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleQueueBacklogR{}
		}
		args = append(args, object.FactionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleQueueBacklogR{}
			}

			for _, a := range args {
				if a == obj.FactionID {
					continue Outer
				}
			}

			args = append(args, obj.FactionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`factions`),
		qm.WhereIn(`factions.id in ?`, args...),
		qmhelper.WhereIsNull(`factions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Faction")
	}

	var resultSlice []*Faction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Faction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for factions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for factions")
	}

	if len(battleQueueBacklogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Faction = foreign
		if foreign.R == nil {
			foreign.R = &factionR{}
		}
		foreign.R.BattleQueueBacklogs = append(foreign.R.BattleQueueBacklogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FactionID == foreign.ID {
				local.R.Faction = foreign
				if foreign.R == nil {
					foreign.R = &factionR{}
				}
				foreign.R.BattleQueueBacklogs = append(foreign.R.BattleQueueBacklogs, local)
				break
			}
		}
	}

	return nil
}

// LoadFee allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleQueueBacklogL) LoadFee(e boil.Executor, singular bool, maybeBattleQueueBacklog interface{}, mods queries.Applicator) error {
	var slice []*BattleQueueBacklog
	var object *BattleQueueBacklog

	if singular {
		object = maybeBattleQueueBacklog.(*BattleQueueBacklog)
	} else {
		slice = *maybeBattleQueueBacklog.(*[]*BattleQueueBacklog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleQueueBacklogR{}
		}
		if !queries.IsNil(object.FeeID) {
			args = append(args, object.FeeID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleQueueBacklogR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.FeeID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.FeeID) {
				args = append(args, obj.FeeID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_queue_fees`),
		qm.WhereIn(`battle_queue_fees.id in ?`, args...),
		qmhelper.WhereIsNull(`battle_queue_fees.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BattleQueueFee")
	}

	var resultSlice []*BattleQueueFee
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BattleQueueFee")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battle_queue_fees")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_queue_fees")
	}

	if len(battleQueueBacklogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Fee = foreign
		if foreign.R == nil {
			foreign.R = &battleQueueFeeR{}
		}
		foreign.R.FeeBattleQueueBacklogs = append(foreign.R.FeeBattleQueueBacklogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.FeeID, foreign.ID) {
				local.R.Fee = foreign
				if foreign.R == nil {
					foreign.R = &battleQueueFeeR{}
				}
				foreign.R.FeeBattleQueueBacklogs = append(foreign.R.FeeBattleQueueBacklogs, local)
				break
			}
		}
	}

	return nil
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleQueueBacklogL) LoadOwner(e boil.Executor, singular bool, maybeBattleQueueBacklog interface{}, mods queries.Applicator) error {
	var slice []*BattleQueueBacklog
	var object *BattleQueueBacklog

	if singular {
		object = maybeBattleQueueBacklog.(*BattleQueueBacklog)
	} else {
		slice = *maybeBattleQueueBacklog.(*[]*BattleQueueBacklog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleQueueBacklogR{}
		}
		args = append(args, object.OwnerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleQueueBacklogR{}
			}

			for _, a := range args {
				if a == obj.OwnerID {
					continue Outer
				}
			}

			args = append(args, obj.OwnerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(battleQueueBacklogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Owner = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.OwnerBattleQueueBacklogs = append(foreign.R.OwnerBattleQueueBacklogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerID == foreign.ID {
				local.R.Owner = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.OwnerBattleQueueBacklogs = append(foreign.R.OwnerBattleQueueBacklogs, local)
				break
			}
		}
	}

	return nil
}

// SetMech of the battleQueueBacklog to the related item.
// Sets o.R.Mech to related.
// Adds o to related.R.BattleQueueBacklog.
func (o *BattleQueueBacklog) SetMech(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_queue_backlog\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleQueueBacklogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MechID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MechID = related.ID
	if o.R == nil {
		o.R = &battleQueueBacklogR{
			Mech: related,
		}
	} else {
		o.R.Mech = related
	}

	if related.R == nil {
		related.R = &mechR{
			BattleQueueBacklog: o,
		}
	} else {
		related.R.BattleQueueBacklog = o
	}

	return nil
}

// SetFaction of the battleQueueBacklog to the related item.
// Sets o.R.Faction to related.
// Adds o to related.R.BattleQueueBacklogs.
func (o *BattleQueueBacklog) SetFaction(exec boil.Executor, insert bool, related *Faction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_queue_backlog\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"faction_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleQueueBacklogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MechID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FactionID = related.ID
	if o.R == nil {
		o.R = &battleQueueBacklogR{
			Faction: related,
		}
	} else {
		o.R.Faction = related
	}

	if related.R == nil {
		related.R = &factionR{
			BattleQueueBacklogs: BattleQueueBacklogSlice{o},
		}
	} else {
		related.R.BattleQueueBacklogs = append(related.R.BattleQueueBacklogs, o)
	}

	return nil
}

// SetFee of the battleQueueBacklog to the related item.
// Sets o.R.Fee to related.
// Adds o to related.R.FeeBattleQueueBacklogs.
func (o *BattleQueueBacklog) SetFee(exec boil.Executor, insert bool, related *BattleQueueFee) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_queue_backlog\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"fee_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleQueueBacklogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MechID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.FeeID, related.ID)
	if o.R == nil {
		o.R = &battleQueueBacklogR{
			Fee: related,
		}
	} else {
		o.R.Fee = related
	}

	if related.R == nil {
		related.R = &battleQueueFeeR{
			FeeBattleQueueBacklogs: BattleQueueBacklogSlice{o},
		}
	} else {
		related.R.FeeBattleQueueBacklogs = append(related.R.FeeBattleQueueBacklogs, o)
	}

	return nil
}

// RemoveFee relationship.
// Sets o.R.Fee to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BattleQueueBacklog) RemoveFee(exec boil.Executor, related *BattleQueueFee) error {
	var err error

	queries.SetScanner(&o.FeeID, nil)
	if _, err = o.Update(exec, boil.Whitelist("fee_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Fee = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.FeeBattleQueueBacklogs {
		if queries.Equal(o.FeeID, ri.FeeID) {
			continue
		}

		ln := len(related.R.FeeBattleQueueBacklogs)
		if ln > 1 && i < ln-1 {
			related.R.FeeBattleQueueBacklogs[i] = related.R.FeeBattleQueueBacklogs[ln-1]
		}
		related.R.FeeBattleQueueBacklogs = related.R.FeeBattleQueueBacklogs[:ln-1]
		break
	}
	return nil
}

// SetOwner of the battleQueueBacklog to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerBattleQueueBacklogs.
func (o *BattleQueueBacklog) SetOwner(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_queue_backlog\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleQueueBacklogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MechID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerID = related.ID
	if o.R == nil {
		o.R = &battleQueueBacklogR{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &playerR{
			OwnerBattleQueueBacklogs: BattleQueueBacklogSlice{o},
		}
	} else {
		related.R.OwnerBattleQueueBacklogs = append(related.R.OwnerBattleQueueBacklogs, o)
	}

	return nil
}

// BattleQueueBacklogs retrieves all the records using an executor.
func BattleQueueBacklogs(mods ...qm.QueryMod) battleQueueBacklogQuery {
	mods = append(mods, qm.From("\"battle_queue_backlog\""))
	return battleQueueBacklogQuery{NewQuery(mods...)}
}

// FindBattleQueueBacklog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattleQueueBacklog(exec boil.Executor, mechID string, selectCols ...string) (*BattleQueueBacklog, error) {
	battleQueueBacklogObj := &BattleQueueBacklog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battle_queue_backlog\" where \"mech_id\"=$1", sel,
	)

	q := queries.Raw(query, mechID)

	err := q.Bind(nil, exec, battleQueueBacklogObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from battle_queue_backlog")
	}

	if err = battleQueueBacklogObj.doAfterSelectHooks(exec); err != nil {
		return battleQueueBacklogObj, err
	}

	return battleQueueBacklogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BattleQueueBacklog) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_queue_backlog provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleQueueBacklogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battleQueueBacklogInsertCacheMut.RLock()
	cache, cached := battleQueueBacklogInsertCache[key]
	battleQueueBacklogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battleQueueBacklogAllColumns,
			battleQueueBacklogColumnsWithDefault,
			battleQueueBacklogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battleQueueBacklogType, battleQueueBacklogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battleQueueBacklogType, battleQueueBacklogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battle_queue_backlog\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battle_queue_backlog\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into battle_queue_backlog")
	}

	if !cached {
		battleQueueBacklogInsertCacheMut.Lock()
		battleQueueBacklogInsertCache[key] = cache
		battleQueueBacklogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BattleQueueBacklog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BattleQueueBacklog) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battleQueueBacklogUpdateCacheMut.RLock()
	cache, cached := battleQueueBacklogUpdateCache[key]
	battleQueueBacklogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battleQueueBacklogAllColumns,
			battleQueueBacklogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update battle_queue_backlog, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battle_queue_backlog\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battleQueueBacklogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battleQueueBacklogType, battleQueueBacklogMapping, append(wl, battleQueueBacklogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update battle_queue_backlog row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for battle_queue_backlog")
	}

	if !cached {
		battleQueueBacklogUpdateCacheMut.Lock()
		battleQueueBacklogUpdateCache[key] = cache
		battleQueueBacklogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battleQueueBacklogQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for battle_queue_backlog")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for battle_queue_backlog")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattleQueueBacklogSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleQueueBacklogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battle_queue_backlog\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battleQueueBacklogPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in battleQueueBacklog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all battleQueueBacklog")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BattleQueueBacklog) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_queue_backlog provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleQueueBacklogColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battleQueueBacklogUpsertCacheMut.RLock()
	cache, cached := battleQueueBacklogUpsertCache[key]
	battleQueueBacklogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battleQueueBacklogAllColumns,
			battleQueueBacklogColumnsWithDefault,
			battleQueueBacklogColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			battleQueueBacklogAllColumns,
			battleQueueBacklogPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert battle_queue_backlog, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battleQueueBacklogPrimaryKeyColumns))
			copy(conflict, battleQueueBacklogPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battle_queue_backlog\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battleQueueBacklogType, battleQueueBacklogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battleQueueBacklogType, battleQueueBacklogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert battle_queue_backlog")
	}

	if !cached {
		battleQueueBacklogUpsertCacheMut.Lock()
		battleQueueBacklogUpsertCache[key] = cache
		battleQueueBacklogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BattleQueueBacklog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BattleQueueBacklog) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BattleQueueBacklog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battleQueueBacklogPrimaryKeyMapping)
	sql := "DELETE FROM \"battle_queue_backlog\" WHERE \"mech_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from battle_queue_backlog")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for battle_queue_backlog")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battleQueueBacklogQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no battleQueueBacklogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battle_queue_backlog")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_queue_backlog")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattleQueueBacklogSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(battleQueueBacklogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleQueueBacklogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"battle_queue_backlog\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleQueueBacklogPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battleQueueBacklog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_queue_backlog")
	}

	if len(battleQueueBacklogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BattleQueueBacklog) Reload(exec boil.Executor) error {
	ret, err := FindBattleQueueBacklog(exec, o.MechID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattleQueueBacklogSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattleQueueBacklogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleQueueBacklogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battle_queue_backlog\".* FROM \"battle_queue_backlog\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleQueueBacklogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BattleQueueBacklogSlice")
	}

	*o = slice

	return nil
}

// BattleQueueBacklogExists checks if the BattleQueueBacklog row exists.
func BattleQueueBacklogExists(exec boil.Executor, mechID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battle_queue_backlog\" where \"mech_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, mechID)
	}
	row := exec.QueryRow(sql, mechID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if battle_queue_backlog exists")
	}

	return exists, nil
}
