// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PlayerProfile is an object representing the database table.
type PlayerProfile struct {
	ID                          string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	PlayerID                    string      `boiler:"player_id" boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	Shortcode                   string      `boiler:"shortcode" boil:"shortcode" json:"shortcode" toml:"shortcode" yaml:"shortcode"`
	EnableTelegramNotifications bool        `boiler:"enable_telegram_notifications" boil:"enable_telegram_notifications" json:"enable_telegram_notifications" toml:"enable_telegram_notifications" yaml:"enable_telegram_notifications"`
	EnableSMSNotifications      bool        `boiler:"enable_sms_notifications" boil:"enable_sms_notifications" json:"enable_sms_notifications" toml:"enable_sms_notifications" yaml:"enable_sms_notifications"`
	EnablePushNotifications     bool        `boiler:"enable_push_notifications" boil:"enable_push_notifications" json:"enable_push_notifications" toml:"enable_push_notifications" yaml:"enable_push_notifications"`
	TelegramID                  null.Int64  `boiler:"telegram_id" boil:"telegram_id" json:"telegram_id,omitempty" toml:"telegram_id" yaml:"telegram_id,omitempty"`
	MobileNumber                null.String `boiler:"mobile_number" boil:"mobile_number" json:"mobile_number,omitempty" toml:"mobile_number" yaml:"mobile_number,omitempty"`

	R *playerProfileR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L playerProfileL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlayerProfileColumns = struct {
	ID                          string
	PlayerID                    string
	Shortcode                   string
	EnableTelegramNotifications string
	EnableSMSNotifications      string
	EnablePushNotifications     string
	TelegramID                  string
	MobileNumber                string
}{
	ID:                          "id",
	PlayerID:                    "player_id",
	Shortcode:                   "shortcode",
	EnableTelegramNotifications: "enable_telegram_notifications",
	EnableSMSNotifications:      "enable_sms_notifications",
	EnablePushNotifications:     "enable_push_notifications",
	TelegramID:                  "telegram_id",
	MobileNumber:                "mobile_number",
}

var PlayerProfileTableColumns = struct {
	ID                          string
	PlayerID                    string
	Shortcode                   string
	EnableTelegramNotifications string
	EnableSMSNotifications      string
	EnablePushNotifications     string
	TelegramID                  string
	MobileNumber                string
}{
	ID:                          "player_profile.id",
	PlayerID:                    "player_profile.player_id",
	Shortcode:                   "player_profile.shortcode",
	EnableTelegramNotifications: "player_profile.enable_telegram_notifications",
	EnableSMSNotifications:      "player_profile.enable_sms_notifications",
	EnablePushNotifications:     "player_profile.enable_push_notifications",
	TelegramID:                  "player_profile.telegram_id",
	MobileNumber:                "player_profile.mobile_number",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var PlayerProfileWhere = struct {
	ID                          whereHelperstring
	PlayerID                    whereHelperstring
	Shortcode                   whereHelperstring
	EnableTelegramNotifications whereHelperbool
	EnableSMSNotifications      whereHelperbool
	EnablePushNotifications     whereHelperbool
	TelegramID                  whereHelpernull_Int64
	MobileNumber                whereHelpernull_String
}{
	ID:                          whereHelperstring{field: "\"player_profile\".\"id\""},
	PlayerID:                    whereHelperstring{field: "\"player_profile\".\"player_id\""},
	Shortcode:                   whereHelperstring{field: "\"player_profile\".\"shortcode\""},
	EnableTelegramNotifications: whereHelperbool{field: "\"player_profile\".\"enable_telegram_notifications\""},
	EnableSMSNotifications:      whereHelperbool{field: "\"player_profile\".\"enable_sms_notifications\""},
	EnablePushNotifications:     whereHelperbool{field: "\"player_profile\".\"enable_push_notifications\""},
	TelegramID:                  whereHelpernull_Int64{field: "\"player_profile\".\"telegram_id\""},
	MobileNumber:                whereHelpernull_String{field: "\"player_profile\".\"mobile_number\""},
}

// PlayerProfileRels is where relationship names are stored.
var PlayerProfileRels = struct {
	Player string
}{
	Player: "Player",
}

// playerProfileR is where relationships are stored.
type playerProfileR struct {
	Player *Player `boiler:"Player" boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
}

// NewStruct creates a new relationship struct
func (*playerProfileR) NewStruct() *playerProfileR {
	return &playerProfileR{}
}

// playerProfileL is where Load methods for each relationship are stored.
type playerProfileL struct{}

var (
	playerProfileAllColumns            = []string{"id", "player_id", "shortcode", "enable_telegram_notifications", "enable_sms_notifications", "enable_push_notifications", "telegram_id", "mobile_number"}
	playerProfileColumnsWithoutDefault = []string{"player_id", "shortcode"}
	playerProfileColumnsWithDefault    = []string{"id", "enable_telegram_notifications", "enable_sms_notifications", "enable_push_notifications", "telegram_id", "mobile_number"}
	playerProfilePrimaryKeyColumns     = []string{"id"}
	playerProfileGeneratedColumns      = []string{}
)

type (
	// PlayerProfileSlice is an alias for a slice of pointers to PlayerProfile.
	// This should almost always be used instead of []PlayerProfile.
	PlayerProfileSlice []*PlayerProfile
	// PlayerProfileHook is the signature for custom PlayerProfile hook methods
	PlayerProfileHook func(boil.Executor, *PlayerProfile) error

	playerProfileQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playerProfileType                 = reflect.TypeOf(&PlayerProfile{})
	playerProfileMapping              = queries.MakeStructMapping(playerProfileType)
	playerProfilePrimaryKeyMapping, _ = queries.BindMapping(playerProfileType, playerProfileMapping, playerProfilePrimaryKeyColumns)
	playerProfileInsertCacheMut       sync.RWMutex
	playerProfileInsertCache          = make(map[string]insertCache)
	playerProfileUpdateCacheMut       sync.RWMutex
	playerProfileUpdateCache          = make(map[string]updateCache)
	playerProfileUpsertCacheMut       sync.RWMutex
	playerProfileUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var playerProfileAfterSelectHooks []PlayerProfileHook

var playerProfileBeforeInsertHooks []PlayerProfileHook
var playerProfileAfterInsertHooks []PlayerProfileHook

var playerProfileBeforeUpdateHooks []PlayerProfileHook
var playerProfileAfterUpdateHooks []PlayerProfileHook

var playerProfileBeforeDeleteHooks []PlayerProfileHook
var playerProfileAfterDeleteHooks []PlayerProfileHook

var playerProfileBeforeUpsertHooks []PlayerProfileHook
var playerProfileAfterUpsertHooks []PlayerProfileHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PlayerProfile) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range playerProfileAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PlayerProfile) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerProfileBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PlayerProfile) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerProfileAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PlayerProfile) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range playerProfileBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PlayerProfile) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range playerProfileAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PlayerProfile) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range playerProfileBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PlayerProfile) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range playerProfileAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PlayerProfile) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerProfileBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PlayerProfile) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerProfileAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlayerProfileHook registers your hook function for all future operations.
func AddPlayerProfileHook(hookPoint boil.HookPoint, playerProfileHook PlayerProfileHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		playerProfileAfterSelectHooks = append(playerProfileAfterSelectHooks, playerProfileHook)
	case boil.BeforeInsertHook:
		playerProfileBeforeInsertHooks = append(playerProfileBeforeInsertHooks, playerProfileHook)
	case boil.AfterInsertHook:
		playerProfileAfterInsertHooks = append(playerProfileAfterInsertHooks, playerProfileHook)
	case boil.BeforeUpdateHook:
		playerProfileBeforeUpdateHooks = append(playerProfileBeforeUpdateHooks, playerProfileHook)
	case boil.AfterUpdateHook:
		playerProfileAfterUpdateHooks = append(playerProfileAfterUpdateHooks, playerProfileHook)
	case boil.BeforeDeleteHook:
		playerProfileBeforeDeleteHooks = append(playerProfileBeforeDeleteHooks, playerProfileHook)
	case boil.AfterDeleteHook:
		playerProfileAfterDeleteHooks = append(playerProfileAfterDeleteHooks, playerProfileHook)
	case boil.BeforeUpsertHook:
		playerProfileBeforeUpsertHooks = append(playerProfileBeforeUpsertHooks, playerProfileHook)
	case boil.AfterUpsertHook:
		playerProfileAfterUpsertHooks = append(playerProfileAfterUpsertHooks, playerProfileHook)
	}
}

// One returns a single playerProfile record from the query.
func (q playerProfileQuery) One(exec boil.Executor) (*PlayerProfile, error) {
	o := &PlayerProfile{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for player_profile")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PlayerProfile records from the query.
func (q playerProfileQuery) All(exec boil.Executor) (PlayerProfileSlice, error) {
	var o []*PlayerProfile

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to PlayerProfile slice")
	}

	if len(playerProfileAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PlayerProfile records in the query.
func (q playerProfileQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count player_profile rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q playerProfileQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if player_profile exists")
	}

	return count > 0, nil
}

// Player pointed to by the foreign key.
func (o *PlayerProfile) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerProfileL) LoadPlayer(e boil.Executor, singular bool, maybePlayerProfile interface{}, mods queries.Applicator) error {
	var slice []*PlayerProfile
	var object *PlayerProfile

	if singular {
		object = maybePlayerProfile.(*PlayerProfile)
	} else {
		slice = *maybePlayerProfile.(*[]*PlayerProfile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerProfileR{}
		}
		args = append(args, object.PlayerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerProfileR{}
			}

			for _, a := range args {
				if a == obj.PlayerID {
					continue Outer
				}
			}

			args = append(args, obj.PlayerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(playerProfileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.PlayerProfiles = append(foreign.R.PlayerProfiles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.ID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.PlayerProfiles = append(foreign.R.PlayerProfiles, local)
				break
			}
		}
	}

	return nil
}

// SetPlayer of the playerProfile to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.PlayerProfiles.
func (o *PlayerProfile) SetPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"player_profile\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerProfilePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.ID
	if o.R == nil {
		o.R = &playerProfileR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			PlayerProfiles: PlayerProfileSlice{o},
		}
	} else {
		related.R.PlayerProfiles = append(related.R.PlayerProfiles, o)
	}

	return nil
}

// PlayerProfiles retrieves all the records using an executor.
func PlayerProfiles(mods ...qm.QueryMod) playerProfileQuery {
	mods = append(mods, qm.From("\"player_profile\""))
	return playerProfileQuery{NewQuery(mods...)}
}

// FindPlayerProfile retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlayerProfile(exec boil.Executor, iD string, selectCols ...string) (*PlayerProfile, error) {
	playerProfileObj := &PlayerProfile{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"player_profile\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, playerProfileObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from player_profile")
	}

	if err = playerProfileObj.doAfterSelectHooks(exec); err != nil {
		return playerProfileObj, err
	}

	return playerProfileObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PlayerProfile) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no player_profile provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerProfileColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	playerProfileInsertCacheMut.RLock()
	cache, cached := playerProfileInsertCache[key]
	playerProfileInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			playerProfileAllColumns,
			playerProfileColumnsWithDefault,
			playerProfileColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(playerProfileType, playerProfileMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(playerProfileType, playerProfileMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"player_profile\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"player_profile\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into player_profile")
	}

	if !cached {
		playerProfileInsertCacheMut.Lock()
		playerProfileInsertCache[key] = cache
		playerProfileInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the PlayerProfile.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PlayerProfile) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	playerProfileUpdateCacheMut.RLock()
	cache, cached := playerProfileUpdateCache[key]
	playerProfileUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			playerProfileAllColumns,
			playerProfilePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update player_profile, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"player_profile\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, playerProfilePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(playerProfileType, playerProfileMapping, append(wl, playerProfilePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update player_profile row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for player_profile")
	}

	if !cached {
		playerProfileUpdateCacheMut.Lock()
		playerProfileUpdateCache[key] = cache
		playerProfileUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q playerProfileQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for player_profile")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for player_profile")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlayerProfileSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerProfilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"player_profile\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, playerProfilePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in playerProfile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all playerProfile")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PlayerProfile) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no player_profile provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerProfileColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	playerProfileUpsertCacheMut.RLock()
	cache, cached := playerProfileUpsertCache[key]
	playerProfileUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			playerProfileAllColumns,
			playerProfileColumnsWithDefault,
			playerProfileColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			playerProfileAllColumns,
			playerProfilePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert player_profile, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(playerProfilePrimaryKeyColumns))
			copy(conflict, playerProfilePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"player_profile\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(playerProfileType, playerProfileMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(playerProfileType, playerProfileMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert player_profile")
	}

	if !cached {
		playerProfileUpsertCacheMut.Lock()
		playerProfileUpsertCache[key] = cache
		playerProfileUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single PlayerProfile record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PlayerProfile) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no PlayerProfile provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), playerProfilePrimaryKeyMapping)
	sql := "DELETE FROM \"player_profile\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from player_profile")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for player_profile")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q playerProfileQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no playerProfileQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from player_profile")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for player_profile")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlayerProfileSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(playerProfileBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerProfilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"player_profile\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerProfilePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from playerProfile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for player_profile")
	}

	if len(playerProfileAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PlayerProfile) Reload(exec boil.Executor) error {
	ret, err := FindPlayerProfile(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlayerProfileSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlayerProfileSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerProfilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"player_profile\".* FROM \"player_profile\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerProfilePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in PlayerProfileSlice")
	}

	*o = slice

	return nil
}

// PlayerProfileExists checks if the PlayerProfile row exists.
func PlayerProfileExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"player_profile\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if player_profile exists")
	}

	return exists, nil
}
