// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BlueprintUtilityShieldOld is an object representing the database table.
type BlueprintUtilityShieldOld struct {
	ID                 string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BlueprintUtilityID string    `boiler:"blueprint_utility_id" boil:"blueprint_utility_id" json:"blueprint_utility_id" toml:"blueprint_utility_id" yaml:"blueprint_utility_id"`
	Hitpoints          int       `boiler:"hitpoints" boil:"hitpoints" json:"hitpoints" toml:"hitpoints" yaml:"hitpoints"`
	RechargeRate       int       `boiler:"recharge_rate" boil:"recharge_rate" json:"recharge_rate" toml:"recharge_rate" yaml:"recharge_rate"`
	RechargeEnergyCost int       `boiler:"recharge_energy_cost" boil:"recharge_energy_cost" json:"recharge_energy_cost" toml:"recharge_energy_cost" yaml:"recharge_energy_cost"`
	CreatedAt          time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt          null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *blueprintUtilityShieldOldR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L blueprintUtilityShieldOldL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlueprintUtilityShieldOldColumns = struct {
	ID                 string
	BlueprintUtilityID string
	Hitpoints          string
	RechargeRate       string
	RechargeEnergyCost string
	CreatedAt          string
	DeletedAt          string
}{
	ID:                 "id",
	BlueprintUtilityID: "blueprint_utility_id",
	Hitpoints:          "hitpoints",
	RechargeRate:       "recharge_rate",
	RechargeEnergyCost: "recharge_energy_cost",
	CreatedAt:          "created_at",
	DeletedAt:          "deleted_at",
}

var BlueprintUtilityShieldOldTableColumns = struct {
	ID                 string
	BlueprintUtilityID string
	Hitpoints          string
	RechargeRate       string
	RechargeEnergyCost string
	CreatedAt          string
	DeletedAt          string
}{
	ID:                 "blueprint_utility_shield_old.id",
	BlueprintUtilityID: "blueprint_utility_shield_old.blueprint_utility_id",
	Hitpoints:          "blueprint_utility_shield_old.hitpoints",
	RechargeRate:       "blueprint_utility_shield_old.recharge_rate",
	RechargeEnergyCost: "blueprint_utility_shield_old.recharge_energy_cost",
	CreatedAt:          "blueprint_utility_shield_old.created_at",
	DeletedAt:          "blueprint_utility_shield_old.deleted_at",
}

// Generated where

var BlueprintUtilityShieldOldWhere = struct {
	ID                 whereHelperstring
	BlueprintUtilityID whereHelperstring
	Hitpoints          whereHelperint
	RechargeRate       whereHelperint
	RechargeEnergyCost whereHelperint
	CreatedAt          whereHelpertime_Time
	DeletedAt          whereHelpernull_Time
}{
	ID:                 whereHelperstring{field: "\"blueprint_utility_shield_old\".\"id\""},
	BlueprintUtilityID: whereHelperstring{field: "\"blueprint_utility_shield_old\".\"blueprint_utility_id\""},
	Hitpoints:          whereHelperint{field: "\"blueprint_utility_shield_old\".\"hitpoints\""},
	RechargeRate:       whereHelperint{field: "\"blueprint_utility_shield_old\".\"recharge_rate\""},
	RechargeEnergyCost: whereHelperint{field: "\"blueprint_utility_shield_old\".\"recharge_energy_cost\""},
	CreatedAt:          whereHelpertime_Time{field: "\"blueprint_utility_shield_old\".\"created_at\""},
	DeletedAt:          whereHelpernull_Time{field: "\"blueprint_utility_shield_old\".\"deleted_at\""},
}

// BlueprintUtilityShieldOldRels is where relationship names are stored.
var BlueprintUtilityShieldOldRels = struct {
	BlueprintUtility string
}{
	BlueprintUtility: "BlueprintUtility",
}

// blueprintUtilityShieldOldR is where relationships are stored.
type blueprintUtilityShieldOldR struct {
	BlueprintUtility *BlueprintUtility `boiler:"BlueprintUtility" boil:"BlueprintUtility" json:"BlueprintUtility" toml:"BlueprintUtility" yaml:"BlueprintUtility"`
}

// NewStruct creates a new relationship struct
func (*blueprintUtilityShieldOldR) NewStruct() *blueprintUtilityShieldOldR {
	return &blueprintUtilityShieldOldR{}
}

// blueprintUtilityShieldOldL is where Load methods for each relationship are stored.
type blueprintUtilityShieldOldL struct{}

var (
	blueprintUtilityShieldOldAllColumns            = []string{"id", "blueprint_utility_id", "hitpoints", "recharge_rate", "recharge_energy_cost", "created_at", "deleted_at"}
	blueprintUtilityShieldOldColumnsWithoutDefault = []string{"blueprint_utility_id"}
	blueprintUtilityShieldOldColumnsWithDefault    = []string{"id", "hitpoints", "recharge_rate", "recharge_energy_cost", "created_at", "deleted_at"}
	blueprintUtilityShieldOldPrimaryKeyColumns     = []string{"blueprint_utility_id"}
	blueprintUtilityShieldOldGeneratedColumns      = []string{}
)

type (
	// BlueprintUtilityShieldOldSlice is an alias for a slice of pointers to BlueprintUtilityShieldOld.
	// This should almost always be used instead of []BlueprintUtilityShieldOld.
	BlueprintUtilityShieldOldSlice []*BlueprintUtilityShieldOld
	// BlueprintUtilityShieldOldHook is the signature for custom BlueprintUtilityShieldOld hook methods
	BlueprintUtilityShieldOldHook func(boil.Executor, *BlueprintUtilityShieldOld) error

	blueprintUtilityShieldOldQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blueprintUtilityShieldOldType                 = reflect.TypeOf(&BlueprintUtilityShieldOld{})
	blueprintUtilityShieldOldMapping              = queries.MakeStructMapping(blueprintUtilityShieldOldType)
	blueprintUtilityShieldOldPrimaryKeyMapping, _ = queries.BindMapping(blueprintUtilityShieldOldType, blueprintUtilityShieldOldMapping, blueprintUtilityShieldOldPrimaryKeyColumns)
	blueprintUtilityShieldOldInsertCacheMut       sync.RWMutex
	blueprintUtilityShieldOldInsertCache          = make(map[string]insertCache)
	blueprintUtilityShieldOldUpdateCacheMut       sync.RWMutex
	blueprintUtilityShieldOldUpdateCache          = make(map[string]updateCache)
	blueprintUtilityShieldOldUpsertCacheMut       sync.RWMutex
	blueprintUtilityShieldOldUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var blueprintUtilityShieldOldAfterSelectHooks []BlueprintUtilityShieldOldHook

var blueprintUtilityShieldOldBeforeInsertHooks []BlueprintUtilityShieldOldHook
var blueprintUtilityShieldOldAfterInsertHooks []BlueprintUtilityShieldOldHook

var blueprintUtilityShieldOldBeforeUpdateHooks []BlueprintUtilityShieldOldHook
var blueprintUtilityShieldOldAfterUpdateHooks []BlueprintUtilityShieldOldHook

var blueprintUtilityShieldOldBeforeDeleteHooks []BlueprintUtilityShieldOldHook
var blueprintUtilityShieldOldAfterDeleteHooks []BlueprintUtilityShieldOldHook

var blueprintUtilityShieldOldBeforeUpsertHooks []BlueprintUtilityShieldOldHook
var blueprintUtilityShieldOldAfterUpsertHooks []BlueprintUtilityShieldOldHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BlueprintUtilityShieldOld) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityShieldOldAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BlueprintUtilityShieldOld) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityShieldOldBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BlueprintUtilityShieldOld) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityShieldOldAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BlueprintUtilityShieldOld) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityShieldOldBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BlueprintUtilityShieldOld) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityShieldOldAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BlueprintUtilityShieldOld) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityShieldOldBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BlueprintUtilityShieldOld) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityShieldOldAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BlueprintUtilityShieldOld) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityShieldOldBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BlueprintUtilityShieldOld) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityShieldOldAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBlueprintUtilityShieldOldHook registers your hook function for all future operations.
func AddBlueprintUtilityShieldOldHook(hookPoint boil.HookPoint, blueprintUtilityShieldOldHook BlueprintUtilityShieldOldHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		blueprintUtilityShieldOldAfterSelectHooks = append(blueprintUtilityShieldOldAfterSelectHooks, blueprintUtilityShieldOldHook)
	case boil.BeforeInsertHook:
		blueprintUtilityShieldOldBeforeInsertHooks = append(blueprintUtilityShieldOldBeforeInsertHooks, blueprintUtilityShieldOldHook)
	case boil.AfterInsertHook:
		blueprintUtilityShieldOldAfterInsertHooks = append(blueprintUtilityShieldOldAfterInsertHooks, blueprintUtilityShieldOldHook)
	case boil.BeforeUpdateHook:
		blueprintUtilityShieldOldBeforeUpdateHooks = append(blueprintUtilityShieldOldBeforeUpdateHooks, blueprintUtilityShieldOldHook)
	case boil.AfterUpdateHook:
		blueprintUtilityShieldOldAfterUpdateHooks = append(blueprintUtilityShieldOldAfterUpdateHooks, blueprintUtilityShieldOldHook)
	case boil.BeforeDeleteHook:
		blueprintUtilityShieldOldBeforeDeleteHooks = append(blueprintUtilityShieldOldBeforeDeleteHooks, blueprintUtilityShieldOldHook)
	case boil.AfterDeleteHook:
		blueprintUtilityShieldOldAfterDeleteHooks = append(blueprintUtilityShieldOldAfterDeleteHooks, blueprintUtilityShieldOldHook)
	case boil.BeforeUpsertHook:
		blueprintUtilityShieldOldBeforeUpsertHooks = append(blueprintUtilityShieldOldBeforeUpsertHooks, blueprintUtilityShieldOldHook)
	case boil.AfterUpsertHook:
		blueprintUtilityShieldOldAfterUpsertHooks = append(blueprintUtilityShieldOldAfterUpsertHooks, blueprintUtilityShieldOldHook)
	}
}

// One returns a single blueprintUtilityShieldOld record from the query.
func (q blueprintUtilityShieldOldQuery) One(exec boil.Executor) (*BlueprintUtilityShieldOld, error) {
	o := &BlueprintUtilityShieldOld{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for blueprint_utility_shield_old")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BlueprintUtilityShieldOld records from the query.
func (q blueprintUtilityShieldOldQuery) All(exec boil.Executor) (BlueprintUtilityShieldOldSlice, error) {
	var o []*BlueprintUtilityShieldOld

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BlueprintUtilityShieldOld slice")
	}

	if len(blueprintUtilityShieldOldAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BlueprintUtilityShieldOld records in the query.
func (q blueprintUtilityShieldOldQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count blueprint_utility_shield_old rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q blueprintUtilityShieldOldQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if blueprint_utility_shield_old exists")
	}

	return count > 0, nil
}

// BlueprintUtility pointed to by the foreign key.
func (o *BlueprintUtilityShieldOld) BlueprintUtility(mods ...qm.QueryMod) blueprintUtilityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BlueprintUtilityID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintUtilities(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_utility\"")

	return query
}

// LoadBlueprintUtility allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blueprintUtilityShieldOldL) LoadBlueprintUtility(e boil.Executor, singular bool, maybeBlueprintUtilityShieldOld interface{}, mods queries.Applicator) error {
	var slice []*BlueprintUtilityShieldOld
	var object *BlueprintUtilityShieldOld

	if singular {
		object = maybeBlueprintUtilityShieldOld.(*BlueprintUtilityShieldOld)
	} else {
		slice = *maybeBlueprintUtilityShieldOld.(*[]*BlueprintUtilityShieldOld)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintUtilityShieldOldR{}
		}
		args = append(args, object.BlueprintUtilityID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintUtilityShieldOldR{}
			}

			for _, a := range args {
				if a == obj.BlueprintUtilityID {
					continue Outer
				}
			}

			args = append(args, obj.BlueprintUtilityID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_utility`),
		qm.WhereIn(`blueprint_utility.id in ?`, args...),
		qmhelper.WhereIsNull(`blueprint_utility.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintUtility")
	}

	var resultSlice []*BlueprintUtility
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintUtility")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_utility")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_utility")
	}

	if len(blueprintUtilityShieldOldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BlueprintUtility = foreign
		if foreign.R == nil {
			foreign.R = &blueprintUtilityR{}
		}
		foreign.R.BlueprintUtilityShieldOld = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlueprintUtilityID == foreign.ID {
				local.R.BlueprintUtility = foreign
				if foreign.R == nil {
					foreign.R = &blueprintUtilityR{}
				}
				foreign.R.BlueprintUtilityShieldOld = local
				break
			}
		}
	}

	return nil
}

// SetBlueprintUtility of the blueprintUtilityShieldOld to the related item.
// Sets o.R.BlueprintUtility to related.
// Adds o to related.R.BlueprintUtilityShieldOld.
func (o *BlueprintUtilityShieldOld) SetBlueprintUtility(exec boil.Executor, insert bool, related *BlueprintUtility) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"blueprint_utility_shield_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_utility_id"}),
		strmangle.WhereClause("\"", "\"", 2, blueprintUtilityShieldOldPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.BlueprintUtilityID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlueprintUtilityID = related.ID
	if o.R == nil {
		o.R = &blueprintUtilityShieldOldR{
			BlueprintUtility: related,
		}
	} else {
		o.R.BlueprintUtility = related
	}

	if related.R == nil {
		related.R = &blueprintUtilityR{
			BlueprintUtilityShieldOld: o,
		}
	} else {
		related.R.BlueprintUtilityShieldOld = o
	}

	return nil
}

// BlueprintUtilityShieldOlds retrieves all the records using an executor.
func BlueprintUtilityShieldOlds(mods ...qm.QueryMod) blueprintUtilityShieldOldQuery {
	mods = append(mods, qm.From("\"blueprint_utility_shield_old\""), qmhelper.WhereIsNull("\"blueprint_utility_shield_old\".\"deleted_at\""))
	return blueprintUtilityShieldOldQuery{NewQuery(mods...)}
}

// FindBlueprintUtilityShieldOld retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlueprintUtilityShieldOld(exec boil.Executor, blueprintUtilityID string, selectCols ...string) (*BlueprintUtilityShieldOld, error) {
	blueprintUtilityShieldOldObj := &BlueprintUtilityShieldOld{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"blueprint_utility_shield_old\" where \"blueprint_utility_id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, blueprintUtilityID)

	err := q.Bind(nil, exec, blueprintUtilityShieldOldObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from blueprint_utility_shield_old")
	}

	if err = blueprintUtilityShieldOldObj.doAfterSelectHooks(exec); err != nil {
		return blueprintUtilityShieldOldObj, err
	}

	return blueprintUtilityShieldOldObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlueprintUtilityShieldOld) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_utility_shield_old provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintUtilityShieldOldColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blueprintUtilityShieldOldInsertCacheMut.RLock()
	cache, cached := blueprintUtilityShieldOldInsertCache[key]
	blueprintUtilityShieldOldInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blueprintUtilityShieldOldAllColumns,
			blueprintUtilityShieldOldColumnsWithDefault,
			blueprintUtilityShieldOldColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blueprintUtilityShieldOldType, blueprintUtilityShieldOldMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blueprintUtilityShieldOldType, blueprintUtilityShieldOldMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"blueprint_utility_shield_old\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"blueprint_utility_shield_old\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into blueprint_utility_shield_old")
	}

	if !cached {
		blueprintUtilityShieldOldInsertCacheMut.Lock()
		blueprintUtilityShieldOldInsertCache[key] = cache
		blueprintUtilityShieldOldInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BlueprintUtilityShieldOld.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlueprintUtilityShieldOld) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	blueprintUtilityShieldOldUpdateCacheMut.RLock()
	cache, cached := blueprintUtilityShieldOldUpdateCache[key]
	blueprintUtilityShieldOldUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blueprintUtilityShieldOldAllColumns,
			blueprintUtilityShieldOldPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update blueprint_utility_shield_old, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"blueprint_utility_shield_old\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, blueprintUtilityShieldOldPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blueprintUtilityShieldOldType, blueprintUtilityShieldOldMapping, append(wl, blueprintUtilityShieldOldPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update blueprint_utility_shield_old row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for blueprint_utility_shield_old")
	}

	if !cached {
		blueprintUtilityShieldOldUpdateCacheMut.Lock()
		blueprintUtilityShieldOldUpdateCache[key] = cache
		blueprintUtilityShieldOldUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q blueprintUtilityShieldOldQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for blueprint_utility_shield_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for blueprint_utility_shield_old")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlueprintUtilityShieldOldSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintUtilityShieldOldPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"blueprint_utility_shield_old\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, blueprintUtilityShieldOldPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in blueprintUtilityShieldOld slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all blueprintUtilityShieldOld")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlueprintUtilityShieldOld) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_utility_shield_old provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintUtilityShieldOldColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blueprintUtilityShieldOldUpsertCacheMut.RLock()
	cache, cached := blueprintUtilityShieldOldUpsertCache[key]
	blueprintUtilityShieldOldUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blueprintUtilityShieldOldAllColumns,
			blueprintUtilityShieldOldColumnsWithDefault,
			blueprintUtilityShieldOldColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			blueprintUtilityShieldOldAllColumns,
			blueprintUtilityShieldOldPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert blueprint_utility_shield_old, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(blueprintUtilityShieldOldPrimaryKeyColumns))
			copy(conflict, blueprintUtilityShieldOldPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"blueprint_utility_shield_old\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(blueprintUtilityShieldOldType, blueprintUtilityShieldOldMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blueprintUtilityShieldOldType, blueprintUtilityShieldOldMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert blueprint_utility_shield_old")
	}

	if !cached {
		blueprintUtilityShieldOldUpsertCacheMut.Lock()
		blueprintUtilityShieldOldUpsertCache[key] = cache
		blueprintUtilityShieldOldUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BlueprintUtilityShieldOld record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlueprintUtilityShieldOld) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BlueprintUtilityShieldOld provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blueprintUtilityShieldOldPrimaryKeyMapping)
		sql = "DELETE FROM \"blueprint_utility_shield_old\" WHERE \"blueprint_utility_id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"blueprint_utility_shield_old\" SET %s WHERE \"blueprint_utility_id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(blueprintUtilityShieldOldType, blueprintUtilityShieldOldMapping, append(wl, blueprintUtilityShieldOldPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from blueprint_utility_shield_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for blueprint_utility_shield_old")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q blueprintUtilityShieldOldQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no blueprintUtilityShieldOldQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprint_utility_shield_old")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_utility_shield_old")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlueprintUtilityShieldOldSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(blueprintUtilityShieldOldBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintUtilityShieldOldPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"blueprint_utility_shield_old\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintUtilityShieldOldPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintUtilityShieldOldPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"blueprint_utility_shield_old\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, blueprintUtilityShieldOldPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprintUtilityShieldOld slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_utility_shield_old")
	}

	if len(blueprintUtilityShieldOldAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlueprintUtilityShieldOld) Reload(exec boil.Executor) error {
	ret, err := FindBlueprintUtilityShieldOld(exec, o.BlueprintUtilityID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlueprintUtilityShieldOldSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlueprintUtilityShieldOldSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintUtilityShieldOldPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"blueprint_utility_shield_old\".* FROM \"blueprint_utility_shield_old\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintUtilityShieldOldPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BlueprintUtilityShieldOldSlice")
	}

	*o = slice

	return nil
}

// BlueprintUtilityShieldOldExists checks if the BlueprintUtilityShieldOld row exists.
func BlueprintUtilityShieldOldExists(exec boil.Executor, blueprintUtilityID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"blueprint_utility_shield_old\" where \"blueprint_utility_id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, blueprintUtilityID)
	}
	row := exec.QueryRow(sql, blueprintUtilityID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if blueprint_utility_shield_old exists")
	}

	return exists, nil
}
