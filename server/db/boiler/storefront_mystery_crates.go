// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// StorefrontMysteryCrate is an object representing the database table.
type StorefrontMysteryCrate struct {
	ID               string          `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	MysteryCrateType string          `boiler:"mystery_crate_type" boil:"mystery_crate_type" json:"mystery_crate_type" toml:"mystery_crate_type" yaml:"mystery_crate_type"`
	Price            decimal.Decimal `boiler:"price" boil:"price" json:"price" toml:"price" yaml:"price"`
	Amount           int             `boiler:"amount" boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	AmountSold       int             `boiler:"amount_sold" boil:"amount_sold" json:"amount_sold" toml:"amount_sold" yaml:"amount_sold"`
	FactionID        string          `boiler:"faction_id" boil:"faction_id" json:"faction_id" toml:"faction_id" yaml:"faction_id"`
	DeletedAt        null.Time       `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt        time.Time       `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt        time.Time       `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Label            string          `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	Description      string          `boiler:"description" boil:"description" json:"description" toml:"description" yaml:"description"`
	ImageURL         null.String     `boiler:"image_url" boil:"image_url" json:"image_url,omitempty" toml:"image_url" yaml:"image_url,omitempty"`
	CardAnimationURL null.String     `boiler:"card_animation_url" boil:"card_animation_url" json:"card_animation_url,omitempty" toml:"card_animation_url" yaml:"card_animation_url,omitempty"`
	AvatarURL        null.String     `boiler:"avatar_url" boil:"avatar_url" json:"avatar_url,omitempty" toml:"avatar_url" yaml:"avatar_url,omitempty"`
	LargeImageURL    null.String     `boiler:"large_image_url" boil:"large_image_url" json:"large_image_url,omitempty" toml:"large_image_url" yaml:"large_image_url,omitempty"`
	BackgroundColor  null.String     `boiler:"background_color" boil:"background_color" json:"background_color,omitempty" toml:"background_color" yaml:"background_color,omitempty"`
	AnimationURL     null.String     `boiler:"animation_url" boil:"animation_url" json:"animation_url,omitempty" toml:"animation_url" yaml:"animation_url,omitempty"`
	YoutubeURL       null.String     `boiler:"youtube_url" boil:"youtube_url" json:"youtube_url,omitempty" toml:"youtube_url" yaml:"youtube_url,omitempty"`

	R *storefrontMysteryCrateR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L storefrontMysteryCrateL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StorefrontMysteryCrateColumns = struct {
	ID               string
	MysteryCrateType string
	Price            string
	Amount           string
	AmountSold       string
	FactionID        string
	DeletedAt        string
	UpdatedAt        string
	CreatedAt        string
	Label            string
	Description      string
	ImageURL         string
	CardAnimationURL string
	AvatarURL        string
	LargeImageURL    string
	BackgroundColor  string
	AnimationURL     string
	YoutubeURL       string
}{
	ID:               "id",
	MysteryCrateType: "mystery_crate_type",
	Price:            "price",
	Amount:           "amount",
	AmountSold:       "amount_sold",
	FactionID:        "faction_id",
	DeletedAt:        "deleted_at",
	UpdatedAt:        "updated_at",
	CreatedAt:        "created_at",
	Label:            "label",
	Description:      "description",
	ImageURL:         "image_url",
	CardAnimationURL: "card_animation_url",
	AvatarURL:        "avatar_url",
	LargeImageURL:    "large_image_url",
	BackgroundColor:  "background_color",
	AnimationURL:     "animation_url",
	YoutubeURL:       "youtube_url",
}

var StorefrontMysteryCrateTableColumns = struct {
	ID               string
	MysteryCrateType string
	Price            string
	Amount           string
	AmountSold       string
	FactionID        string
	DeletedAt        string
	UpdatedAt        string
	CreatedAt        string
	Label            string
	Description      string
	ImageURL         string
	CardAnimationURL string
	AvatarURL        string
	LargeImageURL    string
	BackgroundColor  string
	AnimationURL     string
	YoutubeURL       string
}{
	ID:               "storefront_mystery_crates.id",
	MysteryCrateType: "storefront_mystery_crates.mystery_crate_type",
	Price:            "storefront_mystery_crates.price",
	Amount:           "storefront_mystery_crates.amount",
	AmountSold:       "storefront_mystery_crates.amount_sold",
	FactionID:        "storefront_mystery_crates.faction_id",
	DeletedAt:        "storefront_mystery_crates.deleted_at",
	UpdatedAt:        "storefront_mystery_crates.updated_at",
	CreatedAt:        "storefront_mystery_crates.created_at",
	Label:            "storefront_mystery_crates.label",
	Description:      "storefront_mystery_crates.description",
	ImageURL:         "storefront_mystery_crates.image_url",
	CardAnimationURL: "storefront_mystery_crates.card_animation_url",
	AvatarURL:        "storefront_mystery_crates.avatar_url",
	LargeImageURL:    "storefront_mystery_crates.large_image_url",
	BackgroundColor:  "storefront_mystery_crates.background_color",
	AnimationURL:     "storefront_mystery_crates.animation_url",
	YoutubeURL:       "storefront_mystery_crates.youtube_url",
}

// Generated where

var StorefrontMysteryCrateWhere = struct {
	ID               whereHelperstring
	MysteryCrateType whereHelperstring
	Price            whereHelperdecimal_Decimal
	Amount           whereHelperint
	AmountSold       whereHelperint
	FactionID        whereHelperstring
	DeletedAt        whereHelpernull_Time
	UpdatedAt        whereHelpertime_Time
	CreatedAt        whereHelpertime_Time
	Label            whereHelperstring
	Description      whereHelperstring
	ImageURL         whereHelpernull_String
	CardAnimationURL whereHelpernull_String
	AvatarURL        whereHelpernull_String
	LargeImageURL    whereHelpernull_String
	BackgroundColor  whereHelpernull_String
	AnimationURL     whereHelpernull_String
	YoutubeURL       whereHelpernull_String
}{
	ID:               whereHelperstring{field: "\"storefront_mystery_crates\".\"id\""},
	MysteryCrateType: whereHelperstring{field: "\"storefront_mystery_crates\".\"mystery_crate_type\""},
	Price:            whereHelperdecimal_Decimal{field: "\"storefront_mystery_crates\".\"price\""},
	Amount:           whereHelperint{field: "\"storefront_mystery_crates\".\"amount\""},
	AmountSold:       whereHelperint{field: "\"storefront_mystery_crates\".\"amount_sold\""},
	FactionID:        whereHelperstring{field: "\"storefront_mystery_crates\".\"faction_id\""},
	DeletedAt:        whereHelpernull_Time{field: "\"storefront_mystery_crates\".\"deleted_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"storefront_mystery_crates\".\"updated_at\""},
	CreatedAt:        whereHelpertime_Time{field: "\"storefront_mystery_crates\".\"created_at\""},
	Label:            whereHelperstring{field: "\"storefront_mystery_crates\".\"label\""},
	Description:      whereHelperstring{field: "\"storefront_mystery_crates\".\"description\""},
	ImageURL:         whereHelpernull_String{field: "\"storefront_mystery_crates\".\"image_url\""},
	CardAnimationURL: whereHelpernull_String{field: "\"storefront_mystery_crates\".\"card_animation_url\""},
	AvatarURL:        whereHelpernull_String{field: "\"storefront_mystery_crates\".\"avatar_url\""},
	LargeImageURL:    whereHelpernull_String{field: "\"storefront_mystery_crates\".\"large_image_url\""},
	BackgroundColor:  whereHelpernull_String{field: "\"storefront_mystery_crates\".\"background_color\""},
	AnimationURL:     whereHelpernull_String{field: "\"storefront_mystery_crates\".\"animation_url\""},
	YoutubeURL:       whereHelpernull_String{field: "\"storefront_mystery_crates\".\"youtube_url\""},
}

// StorefrontMysteryCrateRels is where relationship names are stored.
var StorefrontMysteryCrateRels = struct {
	Faction string
}{
	Faction: "Faction",
}

// storefrontMysteryCrateR is where relationships are stored.
type storefrontMysteryCrateR struct {
	Faction *Faction `boiler:"Faction" boil:"Faction" json:"Faction" toml:"Faction" yaml:"Faction"`
}

// NewStruct creates a new relationship struct
func (*storefrontMysteryCrateR) NewStruct() *storefrontMysteryCrateR {
	return &storefrontMysteryCrateR{}
}

// storefrontMysteryCrateL is where Load methods for each relationship are stored.
type storefrontMysteryCrateL struct{}

var (
	storefrontMysteryCrateAllColumns            = []string{"id", "mystery_crate_type", "price", "amount", "amount_sold", "faction_id", "deleted_at", "updated_at", "created_at", "label", "description", "image_url", "card_animation_url", "avatar_url", "large_image_url", "background_color", "animation_url", "youtube_url"}
	storefrontMysteryCrateColumnsWithoutDefault = []string{"mystery_crate_type", "price", "amount", "faction_id"}
	storefrontMysteryCrateColumnsWithDefault    = []string{"id", "amount_sold", "deleted_at", "updated_at", "created_at", "label", "description", "image_url", "card_animation_url", "avatar_url", "large_image_url", "background_color", "animation_url", "youtube_url"}
	storefrontMysteryCratePrimaryKeyColumns     = []string{"id"}
	storefrontMysteryCrateGeneratedColumns      = []string{}
)

type (
	// StorefrontMysteryCrateSlice is an alias for a slice of pointers to StorefrontMysteryCrate.
	// This should almost always be used instead of []StorefrontMysteryCrate.
	StorefrontMysteryCrateSlice []*StorefrontMysteryCrate
	// StorefrontMysteryCrateHook is the signature for custom StorefrontMysteryCrate hook methods
	StorefrontMysteryCrateHook func(boil.Executor, *StorefrontMysteryCrate) error

	storefrontMysteryCrateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	storefrontMysteryCrateType                 = reflect.TypeOf(&StorefrontMysteryCrate{})
	storefrontMysteryCrateMapping              = queries.MakeStructMapping(storefrontMysteryCrateType)
	storefrontMysteryCratePrimaryKeyMapping, _ = queries.BindMapping(storefrontMysteryCrateType, storefrontMysteryCrateMapping, storefrontMysteryCratePrimaryKeyColumns)
	storefrontMysteryCrateInsertCacheMut       sync.RWMutex
	storefrontMysteryCrateInsertCache          = make(map[string]insertCache)
	storefrontMysteryCrateUpdateCacheMut       sync.RWMutex
	storefrontMysteryCrateUpdateCache          = make(map[string]updateCache)
	storefrontMysteryCrateUpsertCacheMut       sync.RWMutex
	storefrontMysteryCrateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var storefrontMysteryCrateAfterSelectHooks []StorefrontMysteryCrateHook

var storefrontMysteryCrateBeforeInsertHooks []StorefrontMysteryCrateHook
var storefrontMysteryCrateAfterInsertHooks []StorefrontMysteryCrateHook

var storefrontMysteryCrateBeforeUpdateHooks []StorefrontMysteryCrateHook
var storefrontMysteryCrateAfterUpdateHooks []StorefrontMysteryCrateHook

var storefrontMysteryCrateBeforeDeleteHooks []StorefrontMysteryCrateHook
var storefrontMysteryCrateAfterDeleteHooks []StorefrontMysteryCrateHook

var storefrontMysteryCrateBeforeUpsertHooks []StorefrontMysteryCrateHook
var storefrontMysteryCrateAfterUpsertHooks []StorefrontMysteryCrateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StorefrontMysteryCrate) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range storefrontMysteryCrateAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StorefrontMysteryCrate) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range storefrontMysteryCrateBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StorefrontMysteryCrate) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range storefrontMysteryCrateAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StorefrontMysteryCrate) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range storefrontMysteryCrateBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StorefrontMysteryCrate) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range storefrontMysteryCrateAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StorefrontMysteryCrate) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range storefrontMysteryCrateBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StorefrontMysteryCrate) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range storefrontMysteryCrateAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StorefrontMysteryCrate) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range storefrontMysteryCrateBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StorefrontMysteryCrate) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range storefrontMysteryCrateAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStorefrontMysteryCrateHook registers your hook function for all future operations.
func AddStorefrontMysteryCrateHook(hookPoint boil.HookPoint, storefrontMysteryCrateHook StorefrontMysteryCrateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		storefrontMysteryCrateAfterSelectHooks = append(storefrontMysteryCrateAfterSelectHooks, storefrontMysteryCrateHook)
	case boil.BeforeInsertHook:
		storefrontMysteryCrateBeforeInsertHooks = append(storefrontMysteryCrateBeforeInsertHooks, storefrontMysteryCrateHook)
	case boil.AfterInsertHook:
		storefrontMysteryCrateAfterInsertHooks = append(storefrontMysteryCrateAfterInsertHooks, storefrontMysteryCrateHook)
	case boil.BeforeUpdateHook:
		storefrontMysteryCrateBeforeUpdateHooks = append(storefrontMysteryCrateBeforeUpdateHooks, storefrontMysteryCrateHook)
	case boil.AfterUpdateHook:
		storefrontMysteryCrateAfterUpdateHooks = append(storefrontMysteryCrateAfterUpdateHooks, storefrontMysteryCrateHook)
	case boil.BeforeDeleteHook:
		storefrontMysteryCrateBeforeDeleteHooks = append(storefrontMysteryCrateBeforeDeleteHooks, storefrontMysteryCrateHook)
	case boil.AfterDeleteHook:
		storefrontMysteryCrateAfterDeleteHooks = append(storefrontMysteryCrateAfterDeleteHooks, storefrontMysteryCrateHook)
	case boil.BeforeUpsertHook:
		storefrontMysteryCrateBeforeUpsertHooks = append(storefrontMysteryCrateBeforeUpsertHooks, storefrontMysteryCrateHook)
	case boil.AfterUpsertHook:
		storefrontMysteryCrateAfterUpsertHooks = append(storefrontMysteryCrateAfterUpsertHooks, storefrontMysteryCrateHook)
	}
}

// One returns a single storefrontMysteryCrate record from the query.
func (q storefrontMysteryCrateQuery) One(exec boil.Executor) (*StorefrontMysteryCrate, error) {
	o := &StorefrontMysteryCrate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for storefront_mystery_crates")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StorefrontMysteryCrate records from the query.
func (q storefrontMysteryCrateQuery) All(exec boil.Executor) (StorefrontMysteryCrateSlice, error) {
	var o []*StorefrontMysteryCrate

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to StorefrontMysteryCrate slice")
	}

	if len(storefrontMysteryCrateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StorefrontMysteryCrate records in the query.
func (q storefrontMysteryCrateQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count storefront_mystery_crates rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q storefrontMysteryCrateQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if storefront_mystery_crates exists")
	}

	return count > 0, nil
}

// Faction pointed to by the foreign key.
func (o *StorefrontMysteryCrate) Faction(mods ...qm.QueryMod) factionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FactionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Factions(queryMods...)
	queries.SetFrom(query.Query, "\"factions\"")

	return query
}

// LoadFaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (storefrontMysteryCrateL) LoadFaction(e boil.Executor, singular bool, maybeStorefrontMysteryCrate interface{}, mods queries.Applicator) error {
	var slice []*StorefrontMysteryCrate
	var object *StorefrontMysteryCrate

	if singular {
		object = maybeStorefrontMysteryCrate.(*StorefrontMysteryCrate)
	} else {
		slice = *maybeStorefrontMysteryCrate.(*[]*StorefrontMysteryCrate)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &storefrontMysteryCrateR{}
		}
		args = append(args, object.FactionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storefrontMysteryCrateR{}
			}

			for _, a := range args {
				if a == obj.FactionID {
					continue Outer
				}
			}

			args = append(args, obj.FactionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`factions`),
		qm.WhereIn(`factions.id in ?`, args...),
		qmhelper.WhereIsNull(`factions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Faction")
	}

	var resultSlice []*Faction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Faction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for factions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for factions")
	}

	if len(storefrontMysteryCrateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Faction = foreign
		if foreign.R == nil {
			foreign.R = &factionR{}
		}
		foreign.R.StorefrontMysteryCrates = append(foreign.R.StorefrontMysteryCrates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FactionID == foreign.ID {
				local.R.Faction = foreign
				if foreign.R == nil {
					foreign.R = &factionR{}
				}
				foreign.R.StorefrontMysteryCrates = append(foreign.R.StorefrontMysteryCrates, local)
				break
			}
		}
	}

	return nil
}

// SetFaction of the storefrontMysteryCrate to the related item.
// Sets o.R.Faction to related.
// Adds o to related.R.StorefrontMysteryCrates.
func (o *StorefrontMysteryCrate) SetFaction(exec boil.Executor, insert bool, related *Faction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"storefront_mystery_crates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"faction_id"}),
		strmangle.WhereClause("\"", "\"", 2, storefrontMysteryCratePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FactionID = related.ID
	if o.R == nil {
		o.R = &storefrontMysteryCrateR{
			Faction: related,
		}
	} else {
		o.R.Faction = related
	}

	if related.R == nil {
		related.R = &factionR{
			StorefrontMysteryCrates: StorefrontMysteryCrateSlice{o},
		}
	} else {
		related.R.StorefrontMysteryCrates = append(related.R.StorefrontMysteryCrates, o)
	}

	return nil
}

// StorefrontMysteryCrates retrieves all the records using an executor.
func StorefrontMysteryCrates(mods ...qm.QueryMod) storefrontMysteryCrateQuery {
	mods = append(mods, qm.From("\"storefront_mystery_crates\""), qmhelper.WhereIsNull("\"storefront_mystery_crates\".\"deleted_at\""))
	return storefrontMysteryCrateQuery{NewQuery(mods...)}
}

// FindStorefrontMysteryCrate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStorefrontMysteryCrate(exec boil.Executor, iD string, selectCols ...string) (*StorefrontMysteryCrate, error) {
	storefrontMysteryCrateObj := &StorefrontMysteryCrate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"storefront_mystery_crates\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, storefrontMysteryCrateObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from storefront_mystery_crates")
	}

	if err = storefrontMysteryCrateObj.doAfterSelectHooks(exec); err != nil {
		return storefrontMysteryCrateObj, err
	}

	return storefrontMysteryCrateObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StorefrontMysteryCrate) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no storefront_mystery_crates provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(storefrontMysteryCrateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	storefrontMysteryCrateInsertCacheMut.RLock()
	cache, cached := storefrontMysteryCrateInsertCache[key]
	storefrontMysteryCrateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			storefrontMysteryCrateAllColumns,
			storefrontMysteryCrateColumnsWithDefault,
			storefrontMysteryCrateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(storefrontMysteryCrateType, storefrontMysteryCrateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(storefrontMysteryCrateType, storefrontMysteryCrateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"storefront_mystery_crates\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"storefront_mystery_crates\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into storefront_mystery_crates")
	}

	if !cached {
		storefrontMysteryCrateInsertCacheMut.Lock()
		storefrontMysteryCrateInsertCache[key] = cache
		storefrontMysteryCrateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the StorefrontMysteryCrate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StorefrontMysteryCrate) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	storefrontMysteryCrateUpdateCacheMut.RLock()
	cache, cached := storefrontMysteryCrateUpdateCache[key]
	storefrontMysteryCrateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			storefrontMysteryCrateAllColumns,
			storefrontMysteryCratePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update storefront_mystery_crates, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"storefront_mystery_crates\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, storefrontMysteryCratePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(storefrontMysteryCrateType, storefrontMysteryCrateMapping, append(wl, storefrontMysteryCratePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update storefront_mystery_crates row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for storefront_mystery_crates")
	}

	if !cached {
		storefrontMysteryCrateUpdateCacheMut.Lock()
		storefrontMysteryCrateUpdateCache[key] = cache
		storefrontMysteryCrateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q storefrontMysteryCrateQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for storefront_mystery_crates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for storefront_mystery_crates")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StorefrontMysteryCrateSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storefrontMysteryCratePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"storefront_mystery_crates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, storefrontMysteryCratePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in storefrontMysteryCrate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all storefrontMysteryCrate")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StorefrontMysteryCrate) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no storefront_mystery_crates provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(storefrontMysteryCrateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	storefrontMysteryCrateUpsertCacheMut.RLock()
	cache, cached := storefrontMysteryCrateUpsertCache[key]
	storefrontMysteryCrateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			storefrontMysteryCrateAllColumns,
			storefrontMysteryCrateColumnsWithDefault,
			storefrontMysteryCrateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			storefrontMysteryCrateAllColumns,
			storefrontMysteryCratePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert storefront_mystery_crates, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(storefrontMysteryCratePrimaryKeyColumns))
			copy(conflict, storefrontMysteryCratePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"storefront_mystery_crates\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(storefrontMysteryCrateType, storefrontMysteryCrateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(storefrontMysteryCrateType, storefrontMysteryCrateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert storefront_mystery_crates")
	}

	if !cached {
		storefrontMysteryCrateUpsertCacheMut.Lock()
		storefrontMysteryCrateUpsertCache[key] = cache
		storefrontMysteryCrateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single StorefrontMysteryCrate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StorefrontMysteryCrate) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no StorefrontMysteryCrate provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), storefrontMysteryCratePrimaryKeyMapping)
		sql = "DELETE FROM \"storefront_mystery_crates\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"storefront_mystery_crates\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(storefrontMysteryCrateType, storefrontMysteryCrateMapping, append(wl, storefrontMysteryCratePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from storefront_mystery_crates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for storefront_mystery_crates")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q storefrontMysteryCrateQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no storefrontMysteryCrateQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from storefront_mystery_crates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for storefront_mystery_crates")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StorefrontMysteryCrateSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(storefrontMysteryCrateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storefrontMysteryCratePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"storefront_mystery_crates\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, storefrontMysteryCratePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storefrontMysteryCratePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"storefront_mystery_crates\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, storefrontMysteryCratePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from storefrontMysteryCrate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for storefront_mystery_crates")
	}

	if len(storefrontMysteryCrateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StorefrontMysteryCrate) Reload(exec boil.Executor) error {
	ret, err := FindStorefrontMysteryCrate(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StorefrontMysteryCrateSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StorefrontMysteryCrateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storefrontMysteryCratePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"storefront_mystery_crates\".* FROM \"storefront_mystery_crates\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, storefrontMysteryCratePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in StorefrontMysteryCrateSlice")
	}

	*o = slice

	return nil
}

// StorefrontMysteryCrateExists checks if the StorefrontMysteryCrate row exists.
func StorefrontMysteryCrateExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"storefront_mystery_crates\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if storefront_mystery_crates exists")
	}

	return exists, nil
}
