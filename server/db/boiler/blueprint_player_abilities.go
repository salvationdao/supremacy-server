// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BlueprintPlayerAbility is an object representing the database table.
type BlueprintPlayerAbility struct {
	ID                       string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	GameClientAbilityID      int       `boiler:"game_client_ability_id" boil:"game_client_ability_id" json:"game_client_ability_id" toml:"game_client_ability_id" yaml:"game_client_ability_id"`
	Label                    string    `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	Colour                   string    `boiler:"colour" boil:"colour" json:"colour" toml:"colour" yaml:"colour"`
	ImageURL                 string    `boiler:"image_url" boil:"image_url" json:"image_url" toml:"image_url" yaml:"image_url"`
	Description              string    `boiler:"description" boil:"description" json:"description" toml:"description" yaml:"description"`
	TextColour               string    `boiler:"text_colour" boil:"text_colour" json:"text_colour" toml:"text_colour" yaml:"text_colour"`
	LocationSelectType       string    `boiler:"location_select_type" boil:"location_select_type" json:"location_select_type" toml:"location_select_type" yaml:"location_select_type"`
	CreatedAt                time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	RarityWeight             int       `boiler:"rarity_weight" boil:"rarity_weight" json:"rarity_weight" toml:"rarity_weight" yaml:"rarity_weight"`
	InventoryLimit           int       `boiler:"inventory_limit" boil:"inventory_limit" json:"inventory_limit" toml:"inventory_limit" yaml:"inventory_limit"`
	CooldownSeconds          int       `boiler:"cooldown_seconds" boil:"cooldown_seconds" json:"cooldown_seconds" toml:"cooldown_seconds" yaml:"cooldown_seconds"`
	DisplayOnMiniMap         bool      `boiler:"display_on_mini_map" boil:"display_on_mini_map" json:"display_on_mini_map" toml:"display_on_mini_map" yaml:"display_on_mini_map"`
	LaunchingDelaySeconds    int       `boiler:"launching_delay_seconds" boil:"launching_delay_seconds" json:"launching_delay_seconds" toml:"launching_delay_seconds" yaml:"launching_delay_seconds"`
	MiniMapDisplayEffectType string    `boiler:"mini_map_display_effect_type" boil:"mini_map_display_effect_type" json:"mini_map_display_effect_type" toml:"mini_map_display_effect_type" yaml:"mini_map_display_effect_type"`
	MechDisplayEffectType    string    `boiler:"mech_display_effect_type" boil:"mech_display_effect_type" json:"mech_display_effect_type" toml:"mech_display_effect_type" yaml:"mech_display_effect_type"`
	AnimationDurationSeconds int       `boiler:"animation_duration_seconds" boil:"animation_duration_seconds" json:"animation_duration_seconds" toml:"animation_duration_seconds" yaml:"animation_duration_seconds"`

	R *blueprintPlayerAbilityR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L blueprintPlayerAbilityL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlueprintPlayerAbilityColumns = struct {
	ID                       string
	GameClientAbilityID      string
	Label                    string
	Colour                   string
	ImageURL                 string
	Description              string
	TextColour               string
	LocationSelectType       string
	CreatedAt                string
	RarityWeight             string
	InventoryLimit           string
	CooldownSeconds          string
	DisplayOnMiniMap         string
	LaunchingDelaySeconds    string
	MiniMapDisplayEffectType string
	MechDisplayEffectType    string
	AnimationDurationSeconds string
}{
	ID:                       "id",
	GameClientAbilityID:      "game_client_ability_id",
	Label:                    "label",
	Colour:                   "colour",
	ImageURL:                 "image_url",
	Description:              "description",
	TextColour:               "text_colour",
	LocationSelectType:       "location_select_type",
	CreatedAt:                "created_at",
	RarityWeight:             "rarity_weight",
	InventoryLimit:           "inventory_limit",
	CooldownSeconds:          "cooldown_seconds",
	DisplayOnMiniMap:         "display_on_mini_map",
	LaunchingDelaySeconds:    "launching_delay_seconds",
	MiniMapDisplayEffectType: "mini_map_display_effect_type",
	MechDisplayEffectType:    "mech_display_effect_type",
	AnimationDurationSeconds: "animation_duration_seconds",
}

var BlueprintPlayerAbilityTableColumns = struct {
	ID                       string
	GameClientAbilityID      string
	Label                    string
	Colour                   string
	ImageURL                 string
	Description              string
	TextColour               string
	LocationSelectType       string
	CreatedAt                string
	RarityWeight             string
	InventoryLimit           string
	CooldownSeconds          string
	DisplayOnMiniMap         string
	LaunchingDelaySeconds    string
	MiniMapDisplayEffectType string
	MechDisplayEffectType    string
	AnimationDurationSeconds string
}{
	ID:                       "blueprint_player_abilities.id",
	GameClientAbilityID:      "blueprint_player_abilities.game_client_ability_id",
	Label:                    "blueprint_player_abilities.label",
	Colour:                   "blueprint_player_abilities.colour",
	ImageURL:                 "blueprint_player_abilities.image_url",
	Description:              "blueprint_player_abilities.description",
	TextColour:               "blueprint_player_abilities.text_colour",
	LocationSelectType:       "blueprint_player_abilities.location_select_type",
	CreatedAt:                "blueprint_player_abilities.created_at",
	RarityWeight:             "blueprint_player_abilities.rarity_weight",
	InventoryLimit:           "blueprint_player_abilities.inventory_limit",
	CooldownSeconds:          "blueprint_player_abilities.cooldown_seconds",
	DisplayOnMiniMap:         "blueprint_player_abilities.display_on_mini_map",
	LaunchingDelaySeconds:    "blueprint_player_abilities.launching_delay_seconds",
	MiniMapDisplayEffectType: "blueprint_player_abilities.mini_map_display_effect_type",
	MechDisplayEffectType:    "blueprint_player_abilities.mech_display_effect_type",
	AnimationDurationSeconds: "blueprint_player_abilities.animation_duration_seconds",
}

// Generated where

var BlueprintPlayerAbilityWhere = struct {
	ID                       whereHelperstring
	GameClientAbilityID      whereHelperint
	Label                    whereHelperstring
	Colour                   whereHelperstring
	ImageURL                 whereHelperstring
	Description              whereHelperstring
	TextColour               whereHelperstring
	LocationSelectType       whereHelperstring
	CreatedAt                whereHelpertime_Time
	RarityWeight             whereHelperint
	InventoryLimit           whereHelperint
	CooldownSeconds          whereHelperint
	DisplayOnMiniMap         whereHelperbool
	LaunchingDelaySeconds    whereHelperint
	MiniMapDisplayEffectType whereHelperstring
	MechDisplayEffectType    whereHelperstring
	AnimationDurationSeconds whereHelperint
}{
	ID:                       whereHelperstring{field: "\"blueprint_player_abilities\".\"id\""},
	GameClientAbilityID:      whereHelperint{field: "\"blueprint_player_abilities\".\"game_client_ability_id\""},
	Label:                    whereHelperstring{field: "\"blueprint_player_abilities\".\"label\""},
	Colour:                   whereHelperstring{field: "\"blueprint_player_abilities\".\"colour\""},
	ImageURL:                 whereHelperstring{field: "\"blueprint_player_abilities\".\"image_url\""},
	Description:              whereHelperstring{field: "\"blueprint_player_abilities\".\"description\""},
	TextColour:               whereHelperstring{field: "\"blueprint_player_abilities\".\"text_colour\""},
	LocationSelectType:       whereHelperstring{field: "\"blueprint_player_abilities\".\"location_select_type\""},
	CreatedAt:                whereHelpertime_Time{field: "\"blueprint_player_abilities\".\"created_at\""},
	RarityWeight:             whereHelperint{field: "\"blueprint_player_abilities\".\"rarity_weight\""},
	InventoryLimit:           whereHelperint{field: "\"blueprint_player_abilities\".\"inventory_limit\""},
	CooldownSeconds:          whereHelperint{field: "\"blueprint_player_abilities\".\"cooldown_seconds\""},
	DisplayOnMiniMap:         whereHelperbool{field: "\"blueprint_player_abilities\".\"display_on_mini_map\""},
	LaunchingDelaySeconds:    whereHelperint{field: "\"blueprint_player_abilities\".\"launching_delay_seconds\""},
	MiniMapDisplayEffectType: whereHelperstring{field: "\"blueprint_player_abilities\".\"mini_map_display_effect_type\""},
	MechDisplayEffectType:    whereHelperstring{field: "\"blueprint_player_abilities\".\"mech_display_effect_type\""},
	AnimationDurationSeconds: whereHelperint{field: "\"blueprint_player_abilities\".\"animation_duration_seconds\""},
}

// BlueprintPlayerAbilityRels is where relationship names are stored.
var BlueprintPlayerAbilityRels = struct {
	BlueprintConsumedAbilities   string
	BlueprintPlayerAbilities     string
	BlueprintSalePlayerAbilities string
}{
	BlueprintConsumedAbilities:   "BlueprintConsumedAbilities",
	BlueprintPlayerAbilities:     "BlueprintPlayerAbilities",
	BlueprintSalePlayerAbilities: "BlueprintSalePlayerAbilities",
}

// blueprintPlayerAbilityR is where relationships are stored.
type blueprintPlayerAbilityR struct {
	BlueprintConsumedAbilities   ConsumedAbilitySlice   `boiler:"BlueprintConsumedAbilities" boil:"BlueprintConsumedAbilities" json:"BlueprintConsumedAbilities" toml:"BlueprintConsumedAbilities" yaml:"BlueprintConsumedAbilities"`
	BlueprintPlayerAbilities     PlayerAbilitySlice     `boiler:"BlueprintPlayerAbilities" boil:"BlueprintPlayerAbilities" json:"BlueprintPlayerAbilities" toml:"BlueprintPlayerAbilities" yaml:"BlueprintPlayerAbilities"`
	BlueprintSalePlayerAbilities SalePlayerAbilitySlice `boiler:"BlueprintSalePlayerAbilities" boil:"BlueprintSalePlayerAbilities" json:"BlueprintSalePlayerAbilities" toml:"BlueprintSalePlayerAbilities" yaml:"BlueprintSalePlayerAbilities"`
}

// NewStruct creates a new relationship struct
func (*blueprintPlayerAbilityR) NewStruct() *blueprintPlayerAbilityR {
	return &blueprintPlayerAbilityR{}
}

// blueprintPlayerAbilityL is where Load methods for each relationship are stored.
type blueprintPlayerAbilityL struct{}

var (
	blueprintPlayerAbilityAllColumns            = []string{"id", "game_client_ability_id", "label", "colour", "image_url", "description", "text_colour", "location_select_type", "created_at", "rarity_weight", "inventory_limit", "cooldown_seconds", "display_on_mini_map", "launching_delay_seconds", "mini_map_display_effect_type", "mech_display_effect_type", "animation_duration_seconds"}
	blueprintPlayerAbilityColumnsWithoutDefault = []string{"game_client_ability_id", "label", "colour", "image_url", "description", "text_colour", "location_select_type"}
	blueprintPlayerAbilityColumnsWithDefault    = []string{"id", "created_at", "rarity_weight", "inventory_limit", "cooldown_seconds", "display_on_mini_map", "launching_delay_seconds", "mini_map_display_effect_type", "mech_display_effect_type", "animation_duration_seconds"}
	blueprintPlayerAbilityPrimaryKeyColumns     = []string{"id"}
	blueprintPlayerAbilityGeneratedColumns      = []string{}
)

type (
	// BlueprintPlayerAbilitySlice is an alias for a slice of pointers to BlueprintPlayerAbility.
	// This should almost always be used instead of []BlueprintPlayerAbility.
	BlueprintPlayerAbilitySlice []*BlueprintPlayerAbility
	// BlueprintPlayerAbilityHook is the signature for custom BlueprintPlayerAbility hook methods
	BlueprintPlayerAbilityHook func(boil.Executor, *BlueprintPlayerAbility) error

	blueprintPlayerAbilityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blueprintPlayerAbilityType                 = reflect.TypeOf(&BlueprintPlayerAbility{})
	blueprintPlayerAbilityMapping              = queries.MakeStructMapping(blueprintPlayerAbilityType)
	blueprintPlayerAbilityPrimaryKeyMapping, _ = queries.BindMapping(blueprintPlayerAbilityType, blueprintPlayerAbilityMapping, blueprintPlayerAbilityPrimaryKeyColumns)
	blueprintPlayerAbilityInsertCacheMut       sync.RWMutex
	blueprintPlayerAbilityInsertCache          = make(map[string]insertCache)
	blueprintPlayerAbilityUpdateCacheMut       sync.RWMutex
	blueprintPlayerAbilityUpdateCache          = make(map[string]updateCache)
	blueprintPlayerAbilityUpsertCacheMut       sync.RWMutex
	blueprintPlayerAbilityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var blueprintPlayerAbilityAfterSelectHooks []BlueprintPlayerAbilityHook

var blueprintPlayerAbilityBeforeInsertHooks []BlueprintPlayerAbilityHook
var blueprintPlayerAbilityAfterInsertHooks []BlueprintPlayerAbilityHook

var blueprintPlayerAbilityBeforeUpdateHooks []BlueprintPlayerAbilityHook
var blueprintPlayerAbilityAfterUpdateHooks []BlueprintPlayerAbilityHook

var blueprintPlayerAbilityBeforeDeleteHooks []BlueprintPlayerAbilityHook
var blueprintPlayerAbilityAfterDeleteHooks []BlueprintPlayerAbilityHook

var blueprintPlayerAbilityBeforeUpsertHooks []BlueprintPlayerAbilityHook
var blueprintPlayerAbilityAfterUpsertHooks []BlueprintPlayerAbilityHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BlueprintPlayerAbility) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintPlayerAbilityAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BlueprintPlayerAbility) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintPlayerAbilityBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BlueprintPlayerAbility) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintPlayerAbilityAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BlueprintPlayerAbility) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintPlayerAbilityBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BlueprintPlayerAbility) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintPlayerAbilityAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BlueprintPlayerAbility) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintPlayerAbilityBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BlueprintPlayerAbility) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintPlayerAbilityAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BlueprintPlayerAbility) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintPlayerAbilityBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BlueprintPlayerAbility) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintPlayerAbilityAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBlueprintPlayerAbilityHook registers your hook function for all future operations.
func AddBlueprintPlayerAbilityHook(hookPoint boil.HookPoint, blueprintPlayerAbilityHook BlueprintPlayerAbilityHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		blueprintPlayerAbilityAfterSelectHooks = append(blueprintPlayerAbilityAfterSelectHooks, blueprintPlayerAbilityHook)
	case boil.BeforeInsertHook:
		blueprintPlayerAbilityBeforeInsertHooks = append(blueprintPlayerAbilityBeforeInsertHooks, blueprintPlayerAbilityHook)
	case boil.AfterInsertHook:
		blueprintPlayerAbilityAfterInsertHooks = append(blueprintPlayerAbilityAfterInsertHooks, blueprintPlayerAbilityHook)
	case boil.BeforeUpdateHook:
		blueprintPlayerAbilityBeforeUpdateHooks = append(blueprintPlayerAbilityBeforeUpdateHooks, blueprintPlayerAbilityHook)
	case boil.AfterUpdateHook:
		blueprintPlayerAbilityAfterUpdateHooks = append(blueprintPlayerAbilityAfterUpdateHooks, blueprintPlayerAbilityHook)
	case boil.BeforeDeleteHook:
		blueprintPlayerAbilityBeforeDeleteHooks = append(blueprintPlayerAbilityBeforeDeleteHooks, blueprintPlayerAbilityHook)
	case boil.AfterDeleteHook:
		blueprintPlayerAbilityAfterDeleteHooks = append(blueprintPlayerAbilityAfterDeleteHooks, blueprintPlayerAbilityHook)
	case boil.BeforeUpsertHook:
		blueprintPlayerAbilityBeforeUpsertHooks = append(blueprintPlayerAbilityBeforeUpsertHooks, blueprintPlayerAbilityHook)
	case boil.AfterUpsertHook:
		blueprintPlayerAbilityAfterUpsertHooks = append(blueprintPlayerAbilityAfterUpsertHooks, blueprintPlayerAbilityHook)
	}
}

// One returns a single blueprintPlayerAbility record from the query.
func (q blueprintPlayerAbilityQuery) One(exec boil.Executor) (*BlueprintPlayerAbility, error) {
	o := &BlueprintPlayerAbility{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for blueprint_player_abilities")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BlueprintPlayerAbility records from the query.
func (q blueprintPlayerAbilityQuery) All(exec boil.Executor) (BlueprintPlayerAbilitySlice, error) {
	var o []*BlueprintPlayerAbility

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BlueprintPlayerAbility slice")
	}

	if len(blueprintPlayerAbilityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BlueprintPlayerAbility records in the query.
func (q blueprintPlayerAbilityQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count blueprint_player_abilities rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q blueprintPlayerAbilityQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if blueprint_player_abilities exists")
	}

	return count > 0, nil
}

// BlueprintConsumedAbilities retrieves all the consumed_ability's ConsumedAbilities with an executor via blueprint_id column.
func (o *BlueprintPlayerAbility) BlueprintConsumedAbilities(mods ...qm.QueryMod) consumedAbilityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"consumed_abilities\".\"blueprint_id\"=?", o.ID),
	)

	query := ConsumedAbilities(queryMods...)
	queries.SetFrom(query.Query, "\"consumed_abilities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"consumed_abilities\".*"})
	}

	return query
}

// BlueprintPlayerAbilities retrieves all the player_ability's PlayerAbilities with an executor via blueprint_id column.
func (o *BlueprintPlayerAbility) BlueprintPlayerAbilities(mods ...qm.QueryMod) playerAbilityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"player_abilities\".\"blueprint_id\"=?", o.ID),
	)

	query := PlayerAbilities(queryMods...)
	queries.SetFrom(query.Query, "\"player_abilities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"player_abilities\".*"})
	}

	return query
}

// BlueprintSalePlayerAbilities retrieves all the sale_player_ability's SalePlayerAbilities with an executor via blueprint_id column.
func (o *BlueprintPlayerAbility) BlueprintSalePlayerAbilities(mods ...qm.QueryMod) salePlayerAbilityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sale_player_abilities\".\"blueprint_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"sale_player_abilities\".\"deleted_at\""),
	)

	query := SalePlayerAbilities(queryMods...)
	queries.SetFrom(query.Query, "\"sale_player_abilities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"sale_player_abilities\".*"})
	}

	return query
}

// LoadBlueprintConsumedAbilities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blueprintPlayerAbilityL) LoadBlueprintConsumedAbilities(e boil.Executor, singular bool, maybeBlueprintPlayerAbility interface{}, mods queries.Applicator) error {
	var slice []*BlueprintPlayerAbility
	var object *BlueprintPlayerAbility

	if singular {
		object = maybeBlueprintPlayerAbility.(*BlueprintPlayerAbility)
	} else {
		slice = *maybeBlueprintPlayerAbility.(*[]*BlueprintPlayerAbility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintPlayerAbilityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintPlayerAbilityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`consumed_abilities`),
		qm.WhereIn(`consumed_abilities.blueprint_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load consumed_abilities")
	}

	var resultSlice []*ConsumedAbility
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice consumed_abilities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on consumed_abilities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for consumed_abilities")
	}

	if len(consumedAbilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlueprintConsumedAbilities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &consumedAbilityR{}
			}
			foreign.R.Blueprint = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BlueprintID {
				local.R.BlueprintConsumedAbilities = append(local.R.BlueprintConsumedAbilities, foreign)
				if foreign.R == nil {
					foreign.R = &consumedAbilityR{}
				}
				foreign.R.Blueprint = local
				break
			}
		}
	}

	return nil
}

// LoadBlueprintPlayerAbilities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blueprintPlayerAbilityL) LoadBlueprintPlayerAbilities(e boil.Executor, singular bool, maybeBlueprintPlayerAbility interface{}, mods queries.Applicator) error {
	var slice []*BlueprintPlayerAbility
	var object *BlueprintPlayerAbility

	if singular {
		object = maybeBlueprintPlayerAbility.(*BlueprintPlayerAbility)
	} else {
		slice = *maybeBlueprintPlayerAbility.(*[]*BlueprintPlayerAbility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintPlayerAbilityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintPlayerAbilityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`player_abilities`),
		qm.WhereIn(`player_abilities.blueprint_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load player_abilities")
	}

	var resultSlice []*PlayerAbility
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice player_abilities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on player_abilities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for player_abilities")
	}

	if len(playerAbilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlueprintPlayerAbilities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playerAbilityR{}
			}
			foreign.R.Blueprint = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BlueprintID {
				local.R.BlueprintPlayerAbilities = append(local.R.BlueprintPlayerAbilities, foreign)
				if foreign.R == nil {
					foreign.R = &playerAbilityR{}
				}
				foreign.R.Blueprint = local
				break
			}
		}
	}

	return nil
}

// LoadBlueprintSalePlayerAbilities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blueprintPlayerAbilityL) LoadBlueprintSalePlayerAbilities(e boil.Executor, singular bool, maybeBlueprintPlayerAbility interface{}, mods queries.Applicator) error {
	var slice []*BlueprintPlayerAbility
	var object *BlueprintPlayerAbility

	if singular {
		object = maybeBlueprintPlayerAbility.(*BlueprintPlayerAbility)
	} else {
		slice = *maybeBlueprintPlayerAbility.(*[]*BlueprintPlayerAbility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintPlayerAbilityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintPlayerAbilityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sale_player_abilities`),
		qm.WhereIn(`sale_player_abilities.blueprint_id in ?`, args...),
		qmhelper.WhereIsNull(`sale_player_abilities.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sale_player_abilities")
	}

	var resultSlice []*SalePlayerAbility
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sale_player_abilities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sale_player_abilities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sale_player_abilities")
	}

	if len(salePlayerAbilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlueprintSalePlayerAbilities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &salePlayerAbilityR{}
			}
			foreign.R.Blueprint = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BlueprintID {
				local.R.BlueprintSalePlayerAbilities = append(local.R.BlueprintSalePlayerAbilities, foreign)
				if foreign.R == nil {
					foreign.R = &salePlayerAbilityR{}
				}
				foreign.R.Blueprint = local
				break
			}
		}
	}

	return nil
}

// AddBlueprintConsumedAbilities adds the given related objects to the existing relationships
// of the blueprint_player_ability, optionally inserting them as new records.
// Appends related to o.R.BlueprintConsumedAbilities.
// Sets related.R.Blueprint appropriately.
func (o *BlueprintPlayerAbility) AddBlueprintConsumedAbilities(exec boil.Executor, insert bool, related ...*ConsumedAbility) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BlueprintID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"consumed_abilities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_id"}),
				strmangle.WhereClause("\"", "\"", 2, consumedAbilityPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BlueprintID = o.ID
		}
	}

	if o.R == nil {
		o.R = &blueprintPlayerAbilityR{
			BlueprintConsumedAbilities: related,
		}
	} else {
		o.R.BlueprintConsumedAbilities = append(o.R.BlueprintConsumedAbilities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &consumedAbilityR{
				Blueprint: o,
			}
		} else {
			rel.R.Blueprint = o
		}
	}
	return nil
}

// AddBlueprintPlayerAbilities adds the given related objects to the existing relationships
// of the blueprint_player_ability, optionally inserting them as new records.
// Appends related to o.R.BlueprintPlayerAbilities.
// Sets related.R.Blueprint appropriately.
func (o *BlueprintPlayerAbility) AddBlueprintPlayerAbilities(exec boil.Executor, insert bool, related ...*PlayerAbility) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BlueprintID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"player_abilities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_id"}),
				strmangle.WhereClause("\"", "\"", 2, playerAbilityPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BlueprintID = o.ID
		}
	}

	if o.R == nil {
		o.R = &blueprintPlayerAbilityR{
			BlueprintPlayerAbilities: related,
		}
	} else {
		o.R.BlueprintPlayerAbilities = append(o.R.BlueprintPlayerAbilities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playerAbilityR{
				Blueprint: o,
			}
		} else {
			rel.R.Blueprint = o
		}
	}
	return nil
}

// AddBlueprintSalePlayerAbilities adds the given related objects to the existing relationships
// of the blueprint_player_ability, optionally inserting them as new records.
// Appends related to o.R.BlueprintSalePlayerAbilities.
// Sets related.R.Blueprint appropriately.
func (o *BlueprintPlayerAbility) AddBlueprintSalePlayerAbilities(exec boil.Executor, insert bool, related ...*SalePlayerAbility) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BlueprintID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sale_player_abilities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_id"}),
				strmangle.WhereClause("\"", "\"", 2, salePlayerAbilityPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BlueprintID = o.ID
		}
	}

	if o.R == nil {
		o.R = &blueprintPlayerAbilityR{
			BlueprintSalePlayerAbilities: related,
		}
	} else {
		o.R.BlueprintSalePlayerAbilities = append(o.R.BlueprintSalePlayerAbilities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &salePlayerAbilityR{
				Blueprint: o,
			}
		} else {
			rel.R.Blueprint = o
		}
	}
	return nil
}

// BlueprintPlayerAbilities retrieves all the records using an executor.
func BlueprintPlayerAbilities(mods ...qm.QueryMod) blueprintPlayerAbilityQuery {
	mods = append(mods, qm.From("\"blueprint_player_abilities\""))
	return blueprintPlayerAbilityQuery{NewQuery(mods...)}
}

// FindBlueprintPlayerAbility retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlueprintPlayerAbility(exec boil.Executor, iD string, selectCols ...string) (*BlueprintPlayerAbility, error) {
	blueprintPlayerAbilityObj := &BlueprintPlayerAbility{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"blueprint_player_abilities\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, blueprintPlayerAbilityObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from blueprint_player_abilities")
	}

	if err = blueprintPlayerAbilityObj.doAfterSelectHooks(exec); err != nil {
		return blueprintPlayerAbilityObj, err
	}

	return blueprintPlayerAbilityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlueprintPlayerAbility) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_player_abilities provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintPlayerAbilityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blueprintPlayerAbilityInsertCacheMut.RLock()
	cache, cached := blueprintPlayerAbilityInsertCache[key]
	blueprintPlayerAbilityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blueprintPlayerAbilityAllColumns,
			blueprintPlayerAbilityColumnsWithDefault,
			blueprintPlayerAbilityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blueprintPlayerAbilityType, blueprintPlayerAbilityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blueprintPlayerAbilityType, blueprintPlayerAbilityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"blueprint_player_abilities\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"blueprint_player_abilities\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into blueprint_player_abilities")
	}

	if !cached {
		blueprintPlayerAbilityInsertCacheMut.Lock()
		blueprintPlayerAbilityInsertCache[key] = cache
		blueprintPlayerAbilityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BlueprintPlayerAbility.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlueprintPlayerAbility) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	blueprintPlayerAbilityUpdateCacheMut.RLock()
	cache, cached := blueprintPlayerAbilityUpdateCache[key]
	blueprintPlayerAbilityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blueprintPlayerAbilityAllColumns,
			blueprintPlayerAbilityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update blueprint_player_abilities, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"blueprint_player_abilities\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, blueprintPlayerAbilityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blueprintPlayerAbilityType, blueprintPlayerAbilityMapping, append(wl, blueprintPlayerAbilityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update blueprint_player_abilities row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for blueprint_player_abilities")
	}

	if !cached {
		blueprintPlayerAbilityUpdateCacheMut.Lock()
		blueprintPlayerAbilityUpdateCache[key] = cache
		blueprintPlayerAbilityUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q blueprintPlayerAbilityQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for blueprint_player_abilities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for blueprint_player_abilities")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlueprintPlayerAbilitySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintPlayerAbilityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"blueprint_player_abilities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, blueprintPlayerAbilityPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in blueprintPlayerAbility slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all blueprintPlayerAbility")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlueprintPlayerAbility) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_player_abilities provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintPlayerAbilityColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blueprintPlayerAbilityUpsertCacheMut.RLock()
	cache, cached := blueprintPlayerAbilityUpsertCache[key]
	blueprintPlayerAbilityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blueprintPlayerAbilityAllColumns,
			blueprintPlayerAbilityColumnsWithDefault,
			blueprintPlayerAbilityColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			blueprintPlayerAbilityAllColumns,
			blueprintPlayerAbilityPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert blueprint_player_abilities, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(blueprintPlayerAbilityPrimaryKeyColumns))
			copy(conflict, blueprintPlayerAbilityPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"blueprint_player_abilities\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(blueprintPlayerAbilityType, blueprintPlayerAbilityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blueprintPlayerAbilityType, blueprintPlayerAbilityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert blueprint_player_abilities")
	}

	if !cached {
		blueprintPlayerAbilityUpsertCacheMut.Lock()
		blueprintPlayerAbilityUpsertCache[key] = cache
		blueprintPlayerAbilityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BlueprintPlayerAbility record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlueprintPlayerAbility) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BlueprintPlayerAbility provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blueprintPlayerAbilityPrimaryKeyMapping)
	sql := "DELETE FROM \"blueprint_player_abilities\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from blueprint_player_abilities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for blueprint_player_abilities")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q blueprintPlayerAbilityQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no blueprintPlayerAbilityQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprint_player_abilities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_player_abilities")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlueprintPlayerAbilitySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(blueprintPlayerAbilityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintPlayerAbilityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"blueprint_player_abilities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintPlayerAbilityPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprintPlayerAbility slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_player_abilities")
	}

	if len(blueprintPlayerAbilityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlueprintPlayerAbility) Reload(exec boil.Executor) error {
	ret, err := FindBlueprintPlayerAbility(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlueprintPlayerAbilitySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlueprintPlayerAbilitySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintPlayerAbilityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"blueprint_player_abilities\".* FROM \"blueprint_player_abilities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintPlayerAbilityPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BlueprintPlayerAbilitySlice")
	}

	*o = slice

	return nil
}

// BlueprintPlayerAbilityExists checks if the BlueprintPlayerAbility row exists.
func BlueprintPlayerAbilityExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"blueprint_player_abilities\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if blueprint_player_abilities exists")
	}

	return exists, nil
}
