// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BattleContribution is an object representing the database table.
type BattleContribution struct {
	ID                string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BattleID          string    `boiler:"battle_id" boil:"battle_id" json:"battle_id" toml:"battle_id" yaml:"battle_id"`
	AbilityOfferingID string    `boiler:"ability_offering_id" boil:"ability_offering_id" json:"ability_offering_id" toml:"ability_offering_id" yaml:"ability_offering_id"`
	DidTrigger        bool      `boiler:"did_trigger" boil:"did_trigger" json:"did_trigger" toml:"did_trigger" yaml:"did_trigger"`
	FactionID         string    `boiler:"faction_id" boil:"faction_id" json:"faction_id" toml:"faction_id" yaml:"faction_id"`
	AbilityLabel      string    `boiler:"ability_label" boil:"ability_label" json:"ability_label" toml:"ability_label" yaml:"ability_label"`
	IsAllSyndicates   bool      `boiler:"is_all_syndicates" boil:"is_all_syndicates" json:"is_all_syndicates" toml:"is_all_syndicates" yaml:"is_all_syndicates"`
	ContributedAt     time.Time `boiler:"contributed_at" boil:"contributed_at" json:"contributed_at" toml:"contributed_at" yaml:"contributed_at"`

	R *battleContributionR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L battleContributionL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattleContributionColumns = struct {
	ID                string
	BattleID          string
	AbilityOfferingID string
	DidTrigger        string
	FactionID         string
	AbilityLabel      string
	IsAllSyndicates   string
	ContributedAt     string
}{
	ID:                "id",
	BattleID:          "battle_id",
	AbilityOfferingID: "ability_offering_id",
	DidTrigger:        "did_trigger",
	FactionID:         "faction_id",
	AbilityLabel:      "ability_label",
	IsAllSyndicates:   "is_all_syndicates",
	ContributedAt:     "contributed_at",
}

var BattleContributionTableColumns = struct {
	ID                string
	BattleID          string
	AbilityOfferingID string
	DidTrigger        string
	FactionID         string
	AbilityLabel      string
	IsAllSyndicates   string
	ContributedAt     string
}{
	ID:                "battle_contributions.id",
	BattleID:          "battle_contributions.battle_id",
	AbilityOfferingID: "battle_contributions.ability_offering_id",
	DidTrigger:        "battle_contributions.did_trigger",
	FactionID:         "battle_contributions.faction_id",
	AbilityLabel:      "battle_contributions.ability_label",
	IsAllSyndicates:   "battle_contributions.is_all_syndicates",
	ContributedAt:     "battle_contributions.contributed_at",
}

// Generated where

var BattleContributionWhere = struct {
	ID                whereHelperstring
	BattleID          whereHelperstring
	AbilityOfferingID whereHelperstring
	DidTrigger        whereHelperbool
	FactionID         whereHelperstring
	AbilityLabel      whereHelperstring
	IsAllSyndicates   whereHelperbool
	ContributedAt     whereHelpertime_Time
}{
	ID:                whereHelperstring{field: "\"battle_contributions\".\"id\""},
	BattleID:          whereHelperstring{field: "\"battle_contributions\".\"battle_id\""},
	AbilityOfferingID: whereHelperstring{field: "\"battle_contributions\".\"ability_offering_id\""},
	DidTrigger:        whereHelperbool{field: "\"battle_contributions\".\"did_trigger\""},
	FactionID:         whereHelperstring{field: "\"battle_contributions\".\"faction_id\""},
	AbilityLabel:      whereHelperstring{field: "\"battle_contributions\".\"ability_label\""},
	IsAllSyndicates:   whereHelperbool{field: "\"battle_contributions\".\"is_all_syndicates\""},
	ContributedAt:     whereHelpertime_Time{field: "\"battle_contributions\".\"contributed_at\""},
}

// BattleContributionRels is where relationship names are stored.
var BattleContributionRels = struct {
	Battle  string
	Faction string
}{
	Battle:  "Battle",
	Faction: "Faction",
}

// battleContributionR is where relationships are stored.
type battleContributionR struct {
	Battle  *Battle  `boiler:"Battle" boil:"Battle" json:"Battle" toml:"Battle" yaml:"Battle"`
	Faction *Faction `boiler:"Faction" boil:"Faction" json:"Faction" toml:"Faction" yaml:"Faction"`
}

// NewStruct creates a new relationship struct
func (*battleContributionR) NewStruct() *battleContributionR {
	return &battleContributionR{}
}

// battleContributionL is where Load methods for each relationship are stored.
type battleContributionL struct{}

var (
	battleContributionAllColumns            = []string{"id", "battle_id", "ability_offering_id", "did_trigger", "faction_id", "ability_label", "is_all_syndicates", "contributed_at"}
	battleContributionColumnsWithoutDefault = []string{"battle_id", "ability_offering_id", "faction_id", "ability_label"}
	battleContributionColumnsWithDefault    = []string{"id", "did_trigger", "is_all_syndicates", "contributed_at"}
	battleContributionPrimaryKeyColumns     = []string{"id"}
	battleContributionGeneratedColumns      = []string{}
)

type (
	// BattleContributionSlice is an alias for a slice of pointers to BattleContribution.
	// This should almost always be used instead of []BattleContribution.
	BattleContributionSlice []*BattleContribution
	// BattleContributionHook is the signature for custom BattleContribution hook methods
	BattleContributionHook func(boil.Executor, *BattleContribution) error

	battleContributionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battleContributionType                 = reflect.TypeOf(&BattleContribution{})
	battleContributionMapping              = queries.MakeStructMapping(battleContributionType)
	battleContributionPrimaryKeyMapping, _ = queries.BindMapping(battleContributionType, battleContributionMapping, battleContributionPrimaryKeyColumns)
	battleContributionInsertCacheMut       sync.RWMutex
	battleContributionInsertCache          = make(map[string]insertCache)
	battleContributionUpdateCacheMut       sync.RWMutex
	battleContributionUpdateCache          = make(map[string]updateCache)
	battleContributionUpsertCacheMut       sync.RWMutex
	battleContributionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battleContributionAfterSelectHooks []BattleContributionHook

var battleContributionBeforeInsertHooks []BattleContributionHook
var battleContributionAfterInsertHooks []BattleContributionHook

var battleContributionBeforeUpdateHooks []BattleContributionHook
var battleContributionAfterUpdateHooks []BattleContributionHook

var battleContributionBeforeDeleteHooks []BattleContributionHook
var battleContributionAfterDeleteHooks []BattleContributionHook

var battleContributionBeforeUpsertHooks []BattleContributionHook
var battleContributionAfterUpsertHooks []BattleContributionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BattleContribution) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range battleContributionAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BattleContribution) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleContributionBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BattleContribution) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleContributionAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BattleContribution) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleContributionBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BattleContribution) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleContributionAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BattleContribution) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleContributionBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BattleContribution) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleContributionAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BattleContribution) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleContributionBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BattleContribution) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleContributionAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattleContributionHook registers your hook function for all future operations.
func AddBattleContributionHook(hookPoint boil.HookPoint, battleContributionHook BattleContributionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		battleContributionAfterSelectHooks = append(battleContributionAfterSelectHooks, battleContributionHook)
	case boil.BeforeInsertHook:
		battleContributionBeforeInsertHooks = append(battleContributionBeforeInsertHooks, battleContributionHook)
	case boil.AfterInsertHook:
		battleContributionAfterInsertHooks = append(battleContributionAfterInsertHooks, battleContributionHook)
	case boil.BeforeUpdateHook:
		battleContributionBeforeUpdateHooks = append(battleContributionBeforeUpdateHooks, battleContributionHook)
	case boil.AfterUpdateHook:
		battleContributionAfterUpdateHooks = append(battleContributionAfterUpdateHooks, battleContributionHook)
	case boil.BeforeDeleteHook:
		battleContributionBeforeDeleteHooks = append(battleContributionBeforeDeleteHooks, battleContributionHook)
	case boil.AfterDeleteHook:
		battleContributionAfterDeleteHooks = append(battleContributionAfterDeleteHooks, battleContributionHook)
	case boil.BeforeUpsertHook:
		battleContributionBeforeUpsertHooks = append(battleContributionBeforeUpsertHooks, battleContributionHook)
	case boil.AfterUpsertHook:
		battleContributionAfterUpsertHooks = append(battleContributionAfterUpsertHooks, battleContributionHook)
	}
}

// One returns a single battleContribution record from the query.
func (q battleContributionQuery) One(exec boil.Executor) (*BattleContribution, error) {
	o := &BattleContribution{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for battle_contributions")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BattleContribution records from the query.
func (q battleContributionQuery) All(exec boil.Executor) (BattleContributionSlice, error) {
	var o []*BattleContribution

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BattleContribution slice")
	}

	if len(battleContributionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BattleContribution records in the query.
func (q battleContributionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count battle_contributions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battleContributionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if battle_contributions exists")
	}

	return count > 0, nil
}

// Battle pointed to by the foreign key.
func (o *BattleContribution) Battle(mods ...qm.QueryMod) battleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BattleID),
	}

	queryMods = append(queryMods, mods...)

	query := Battles(queryMods...)
	queries.SetFrom(query.Query, "\"battles\"")

	return query
}

// Faction pointed to by the foreign key.
func (o *BattleContribution) Faction(mods ...qm.QueryMod) factionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FactionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Factions(queryMods...)
	queries.SetFrom(query.Query, "\"factions\"")

	return query
}

// LoadBattle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleContributionL) LoadBattle(e boil.Executor, singular bool, maybeBattleContribution interface{}, mods queries.Applicator) error {
	var slice []*BattleContribution
	var object *BattleContribution

	if singular {
		object = maybeBattleContribution.(*BattleContribution)
	} else {
		slice = *maybeBattleContribution.(*[]*BattleContribution)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleContributionR{}
		}
		args = append(args, object.BattleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleContributionR{}
			}

			for _, a := range args {
				if a == obj.BattleID {
					continue Outer
				}
			}

			args = append(args, obj.BattleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battles`),
		qm.WhereIn(`battles.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Battle")
	}

	var resultSlice []*Battle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Battle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battles")
	}

	if len(battleContributionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Battle = foreign
		if foreign.R == nil {
			foreign.R = &battleR{}
		}
		foreign.R.BattleContributions = append(foreign.R.BattleContributions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BattleID == foreign.ID {
				local.R.Battle = foreign
				if foreign.R == nil {
					foreign.R = &battleR{}
				}
				foreign.R.BattleContributions = append(foreign.R.BattleContributions, local)
				break
			}
		}
	}

	return nil
}

// LoadFaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleContributionL) LoadFaction(e boil.Executor, singular bool, maybeBattleContribution interface{}, mods queries.Applicator) error {
	var slice []*BattleContribution
	var object *BattleContribution

	if singular {
		object = maybeBattleContribution.(*BattleContribution)
	} else {
		slice = *maybeBattleContribution.(*[]*BattleContribution)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleContributionR{}
		}
		args = append(args, object.FactionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleContributionR{}
			}

			for _, a := range args {
				if a == obj.FactionID {
					continue Outer
				}
			}

			args = append(args, obj.FactionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`factions`),
		qm.WhereIn(`factions.id in ?`, args...),
		qmhelper.WhereIsNull(`factions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Faction")
	}

	var resultSlice []*Faction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Faction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for factions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for factions")
	}

	if len(battleContributionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Faction = foreign
		if foreign.R == nil {
			foreign.R = &factionR{}
		}
		foreign.R.BattleContributions = append(foreign.R.BattleContributions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FactionID == foreign.ID {
				local.R.Faction = foreign
				if foreign.R == nil {
					foreign.R = &factionR{}
				}
				foreign.R.BattleContributions = append(foreign.R.BattleContributions, local)
				break
			}
		}
	}

	return nil
}

// SetBattle of the battleContribution to the related item.
// Sets o.R.Battle to related.
// Adds o to related.R.BattleContributions.
func (o *BattleContribution) SetBattle(exec boil.Executor, insert bool, related *Battle) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_contributions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleContributionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BattleID = related.ID
	if o.R == nil {
		o.R = &battleContributionR{
			Battle: related,
		}
	} else {
		o.R.Battle = related
	}

	if related.R == nil {
		related.R = &battleR{
			BattleContributions: BattleContributionSlice{o},
		}
	} else {
		related.R.BattleContributions = append(related.R.BattleContributions, o)
	}

	return nil
}

// SetFaction of the battleContribution to the related item.
// Sets o.R.Faction to related.
// Adds o to related.R.BattleContributions.
func (o *BattleContribution) SetFaction(exec boil.Executor, insert bool, related *Faction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_contributions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"faction_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleContributionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FactionID = related.ID
	if o.R == nil {
		o.R = &battleContributionR{
			Faction: related,
		}
	} else {
		o.R.Faction = related
	}

	if related.R == nil {
		related.R = &factionR{
			BattleContributions: BattleContributionSlice{o},
		}
	} else {
		related.R.BattleContributions = append(related.R.BattleContributions, o)
	}

	return nil
}

// BattleContributions retrieves all the records using an executor.
func BattleContributions(mods ...qm.QueryMod) battleContributionQuery {
	mods = append(mods, qm.From("\"battle_contributions\""))
	return battleContributionQuery{NewQuery(mods...)}
}

// FindBattleContribution retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattleContribution(exec boil.Executor, iD string, selectCols ...string) (*BattleContribution, error) {
	battleContributionObj := &BattleContribution{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battle_contributions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, battleContributionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from battle_contributions")
	}

	if err = battleContributionObj.doAfterSelectHooks(exec); err != nil {
		return battleContributionObj, err
	}

	return battleContributionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BattleContribution) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_contributions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleContributionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battleContributionInsertCacheMut.RLock()
	cache, cached := battleContributionInsertCache[key]
	battleContributionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battleContributionAllColumns,
			battleContributionColumnsWithDefault,
			battleContributionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battleContributionType, battleContributionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battleContributionType, battleContributionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battle_contributions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battle_contributions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into battle_contributions")
	}

	if !cached {
		battleContributionInsertCacheMut.Lock()
		battleContributionInsertCache[key] = cache
		battleContributionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BattleContribution.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BattleContribution) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battleContributionUpdateCacheMut.RLock()
	cache, cached := battleContributionUpdateCache[key]
	battleContributionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battleContributionAllColumns,
			battleContributionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update battle_contributions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battle_contributions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battleContributionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battleContributionType, battleContributionMapping, append(wl, battleContributionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update battle_contributions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for battle_contributions")
	}

	if !cached {
		battleContributionUpdateCacheMut.Lock()
		battleContributionUpdateCache[key] = cache
		battleContributionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battleContributionQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for battle_contributions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for battle_contributions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattleContributionSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleContributionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battle_contributions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battleContributionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in battleContribution slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all battleContribution")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BattleContribution) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_contributions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleContributionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battleContributionUpsertCacheMut.RLock()
	cache, cached := battleContributionUpsertCache[key]
	battleContributionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battleContributionAllColumns,
			battleContributionColumnsWithDefault,
			battleContributionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			battleContributionAllColumns,
			battleContributionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert battle_contributions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battleContributionPrimaryKeyColumns))
			copy(conflict, battleContributionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battle_contributions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battleContributionType, battleContributionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battleContributionType, battleContributionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert battle_contributions")
	}

	if !cached {
		battleContributionUpsertCacheMut.Lock()
		battleContributionUpsertCache[key] = cache
		battleContributionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BattleContribution record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BattleContribution) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BattleContribution provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battleContributionPrimaryKeyMapping)
	sql := "DELETE FROM \"battle_contributions\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from battle_contributions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for battle_contributions")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battleContributionQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no battleContributionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battle_contributions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_contributions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattleContributionSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(battleContributionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleContributionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"battle_contributions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleContributionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battleContribution slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_contributions")
	}

	if len(battleContributionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BattleContribution) Reload(exec boil.Executor) error {
	ret, err := FindBattleContribution(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattleContributionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattleContributionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleContributionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battle_contributions\".* FROM \"battle_contributions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleContributionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BattleContributionSlice")
	}

	*o = slice

	return nil
}

// BattleContributionExists checks if the BattleContribution row exists.
func BattleContributionExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battle_contributions\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if battle_contributions exists")
	}

	return exists, nil
}
