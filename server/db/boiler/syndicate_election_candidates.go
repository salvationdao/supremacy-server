// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SyndicateElectionCandidate is an object representing the database table.
type SyndicateElectionCandidate struct {
	SyndicateElectionID string    `boiler:"syndicate_election_id" boil:"syndicate_election_id" json:"syndicate_election_id" toml:"syndicate_election_id" yaml:"syndicate_election_id"`
	CandidateID         string    `boiler:"candidate_id" boil:"candidate_id" json:"candidate_id" toml:"candidate_id" yaml:"candidate_id"`
	SyndicateID         string    `boiler:"syndicate_id" boil:"syndicate_id" json:"syndicate_id" toml:"syndicate_id" yaml:"syndicate_id"`
	ResignedAt          null.Time `boiler:"resigned_at" boil:"resigned_at" json:"resigned_at,omitempty" toml:"resigned_at" yaml:"resigned_at,omitempty"`
	CreatedAt           time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt           time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt           null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *syndicateElectionCandidateR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L syndicateElectionCandidateL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SyndicateElectionCandidateColumns = struct {
	SyndicateElectionID string
	CandidateID         string
	SyndicateID         string
	ResignedAt          string
	CreatedAt           string
	UpdatedAt           string
	DeletedAt           string
}{
	SyndicateElectionID: "syndicate_election_id",
	CandidateID:         "candidate_id",
	SyndicateID:         "syndicate_id",
	ResignedAt:          "resigned_at",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
	DeletedAt:           "deleted_at",
}

var SyndicateElectionCandidateTableColumns = struct {
	SyndicateElectionID string
	CandidateID         string
	SyndicateID         string
	ResignedAt          string
	CreatedAt           string
	UpdatedAt           string
	DeletedAt           string
}{
	SyndicateElectionID: "syndicate_election_candidates.syndicate_election_id",
	CandidateID:         "syndicate_election_candidates.candidate_id",
	SyndicateID:         "syndicate_election_candidates.syndicate_id",
	ResignedAt:          "syndicate_election_candidates.resigned_at",
	CreatedAt:           "syndicate_election_candidates.created_at",
	UpdatedAt:           "syndicate_election_candidates.updated_at",
	DeletedAt:           "syndicate_election_candidates.deleted_at",
}

// Generated where

var SyndicateElectionCandidateWhere = struct {
	SyndicateElectionID whereHelperstring
	CandidateID         whereHelperstring
	SyndicateID         whereHelperstring
	ResignedAt          whereHelpernull_Time
	CreatedAt           whereHelpertime_Time
	UpdatedAt           whereHelpertime_Time
	DeletedAt           whereHelpernull_Time
}{
	SyndicateElectionID: whereHelperstring{field: "\"syndicate_election_candidates\".\"syndicate_election_id\""},
	CandidateID:         whereHelperstring{field: "\"syndicate_election_candidates\".\"candidate_id\""},
	SyndicateID:         whereHelperstring{field: "\"syndicate_election_candidates\".\"syndicate_id\""},
	ResignedAt:          whereHelpernull_Time{field: "\"syndicate_election_candidates\".\"resigned_at\""},
	CreatedAt:           whereHelpertime_Time{field: "\"syndicate_election_candidates\".\"created_at\""},
	UpdatedAt:           whereHelpertime_Time{field: "\"syndicate_election_candidates\".\"updated_at\""},
	DeletedAt:           whereHelpernull_Time{field: "\"syndicate_election_candidates\".\"deleted_at\""},
}

// SyndicateElectionCandidateRels is where relationship names are stored.
var SyndicateElectionCandidateRels = struct {
	Candidate         string
	SyndicateElection string
	Syndicate         string
}{
	Candidate:         "Candidate",
	SyndicateElection: "SyndicateElection",
	Syndicate:         "Syndicate",
}

// syndicateElectionCandidateR is where relationships are stored.
type syndicateElectionCandidateR struct {
	Candidate         *Player            `boiler:"Candidate" boil:"Candidate" json:"Candidate" toml:"Candidate" yaml:"Candidate"`
	SyndicateElection *SyndicateElection `boiler:"SyndicateElection" boil:"SyndicateElection" json:"SyndicateElection" toml:"SyndicateElection" yaml:"SyndicateElection"`
	Syndicate         *Syndicate         `boiler:"Syndicate" boil:"Syndicate" json:"Syndicate" toml:"Syndicate" yaml:"Syndicate"`
}

// NewStruct creates a new relationship struct
func (*syndicateElectionCandidateR) NewStruct() *syndicateElectionCandidateR {
	return &syndicateElectionCandidateR{}
}

// syndicateElectionCandidateL is where Load methods for each relationship are stored.
type syndicateElectionCandidateL struct{}

var (
	syndicateElectionCandidateAllColumns            = []string{"syndicate_election_id", "candidate_id", "syndicate_id", "resigned_at", "created_at", "updated_at", "deleted_at"}
	syndicateElectionCandidateColumnsWithoutDefault = []string{"syndicate_election_id", "candidate_id", "syndicate_id"}
	syndicateElectionCandidateColumnsWithDefault    = []string{"resigned_at", "created_at", "updated_at", "deleted_at"}
	syndicateElectionCandidatePrimaryKeyColumns     = []string{"syndicate_election_id", "candidate_id"}
	syndicateElectionCandidateGeneratedColumns      = []string{}
)

type (
	// SyndicateElectionCandidateSlice is an alias for a slice of pointers to SyndicateElectionCandidate.
	// This should almost always be used instead of []SyndicateElectionCandidate.
	SyndicateElectionCandidateSlice []*SyndicateElectionCandidate
	// SyndicateElectionCandidateHook is the signature for custom SyndicateElectionCandidate hook methods
	SyndicateElectionCandidateHook func(boil.Executor, *SyndicateElectionCandidate) error

	syndicateElectionCandidateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	syndicateElectionCandidateType                 = reflect.TypeOf(&SyndicateElectionCandidate{})
	syndicateElectionCandidateMapping              = queries.MakeStructMapping(syndicateElectionCandidateType)
	syndicateElectionCandidatePrimaryKeyMapping, _ = queries.BindMapping(syndicateElectionCandidateType, syndicateElectionCandidateMapping, syndicateElectionCandidatePrimaryKeyColumns)
	syndicateElectionCandidateInsertCacheMut       sync.RWMutex
	syndicateElectionCandidateInsertCache          = make(map[string]insertCache)
	syndicateElectionCandidateUpdateCacheMut       sync.RWMutex
	syndicateElectionCandidateUpdateCache          = make(map[string]updateCache)
	syndicateElectionCandidateUpsertCacheMut       sync.RWMutex
	syndicateElectionCandidateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var syndicateElectionCandidateAfterSelectHooks []SyndicateElectionCandidateHook

var syndicateElectionCandidateBeforeInsertHooks []SyndicateElectionCandidateHook
var syndicateElectionCandidateAfterInsertHooks []SyndicateElectionCandidateHook

var syndicateElectionCandidateBeforeUpdateHooks []SyndicateElectionCandidateHook
var syndicateElectionCandidateAfterUpdateHooks []SyndicateElectionCandidateHook

var syndicateElectionCandidateBeforeDeleteHooks []SyndicateElectionCandidateHook
var syndicateElectionCandidateAfterDeleteHooks []SyndicateElectionCandidateHook

var syndicateElectionCandidateBeforeUpsertHooks []SyndicateElectionCandidateHook
var syndicateElectionCandidateAfterUpsertHooks []SyndicateElectionCandidateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SyndicateElectionCandidate) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateElectionCandidateAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SyndicateElectionCandidate) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateElectionCandidateBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SyndicateElectionCandidate) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateElectionCandidateAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SyndicateElectionCandidate) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateElectionCandidateBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SyndicateElectionCandidate) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateElectionCandidateAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SyndicateElectionCandidate) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateElectionCandidateBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SyndicateElectionCandidate) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateElectionCandidateAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SyndicateElectionCandidate) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateElectionCandidateBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SyndicateElectionCandidate) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateElectionCandidateAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSyndicateElectionCandidateHook registers your hook function for all future operations.
func AddSyndicateElectionCandidateHook(hookPoint boil.HookPoint, syndicateElectionCandidateHook SyndicateElectionCandidateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		syndicateElectionCandidateAfterSelectHooks = append(syndicateElectionCandidateAfterSelectHooks, syndicateElectionCandidateHook)
	case boil.BeforeInsertHook:
		syndicateElectionCandidateBeforeInsertHooks = append(syndicateElectionCandidateBeforeInsertHooks, syndicateElectionCandidateHook)
	case boil.AfterInsertHook:
		syndicateElectionCandidateAfterInsertHooks = append(syndicateElectionCandidateAfterInsertHooks, syndicateElectionCandidateHook)
	case boil.BeforeUpdateHook:
		syndicateElectionCandidateBeforeUpdateHooks = append(syndicateElectionCandidateBeforeUpdateHooks, syndicateElectionCandidateHook)
	case boil.AfterUpdateHook:
		syndicateElectionCandidateAfterUpdateHooks = append(syndicateElectionCandidateAfterUpdateHooks, syndicateElectionCandidateHook)
	case boil.BeforeDeleteHook:
		syndicateElectionCandidateBeforeDeleteHooks = append(syndicateElectionCandidateBeforeDeleteHooks, syndicateElectionCandidateHook)
	case boil.AfterDeleteHook:
		syndicateElectionCandidateAfterDeleteHooks = append(syndicateElectionCandidateAfterDeleteHooks, syndicateElectionCandidateHook)
	case boil.BeforeUpsertHook:
		syndicateElectionCandidateBeforeUpsertHooks = append(syndicateElectionCandidateBeforeUpsertHooks, syndicateElectionCandidateHook)
	case boil.AfterUpsertHook:
		syndicateElectionCandidateAfterUpsertHooks = append(syndicateElectionCandidateAfterUpsertHooks, syndicateElectionCandidateHook)
	}
}

// One returns a single syndicateElectionCandidate record from the query.
func (q syndicateElectionCandidateQuery) One(exec boil.Executor) (*SyndicateElectionCandidate, error) {
	o := &SyndicateElectionCandidate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for syndicate_election_candidates")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SyndicateElectionCandidate records from the query.
func (q syndicateElectionCandidateQuery) All(exec boil.Executor) (SyndicateElectionCandidateSlice, error) {
	var o []*SyndicateElectionCandidate

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to SyndicateElectionCandidate slice")
	}

	if len(syndicateElectionCandidateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SyndicateElectionCandidate records in the query.
func (q syndicateElectionCandidateQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count syndicate_election_candidates rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q syndicateElectionCandidateQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if syndicate_election_candidates exists")
	}

	return count > 0, nil
}

// Candidate pointed to by the foreign key.
func (o *SyndicateElectionCandidate) Candidate(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CandidateID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// SyndicateElection pointed to by the foreign key.
func (o *SyndicateElectionCandidate) SyndicateElection(mods ...qm.QueryMod) syndicateElectionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SyndicateElectionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := SyndicateElections(queryMods...)
	queries.SetFrom(query.Query, "\"syndicate_elections\"")

	return query
}

// Syndicate pointed to by the foreign key.
func (o *SyndicateElectionCandidate) Syndicate(mods ...qm.QueryMod) syndicateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SyndicateID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Syndicates(queryMods...)
	queries.SetFrom(query.Query, "\"syndicates\"")

	return query
}

// LoadCandidate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateElectionCandidateL) LoadCandidate(e boil.Executor, singular bool, maybeSyndicateElectionCandidate interface{}, mods queries.Applicator) error {
	var slice []*SyndicateElectionCandidate
	var object *SyndicateElectionCandidate

	if singular {
		object = maybeSyndicateElectionCandidate.(*SyndicateElectionCandidate)
	} else {
		slice = *maybeSyndicateElectionCandidate.(*[]*SyndicateElectionCandidate)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateElectionCandidateR{}
		}
		args = append(args, object.CandidateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateElectionCandidateR{}
			}

			for _, a := range args {
				if a == obj.CandidateID {
					continue Outer
				}
			}

			args = append(args, obj.CandidateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(syndicateElectionCandidateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Candidate = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.CandidateSyndicateElectionCandidates = append(foreign.R.CandidateSyndicateElectionCandidates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CandidateID == foreign.ID {
				local.R.Candidate = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.CandidateSyndicateElectionCandidates = append(foreign.R.CandidateSyndicateElectionCandidates, local)
				break
			}
		}
	}

	return nil
}

// LoadSyndicateElection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateElectionCandidateL) LoadSyndicateElection(e boil.Executor, singular bool, maybeSyndicateElectionCandidate interface{}, mods queries.Applicator) error {
	var slice []*SyndicateElectionCandidate
	var object *SyndicateElectionCandidate

	if singular {
		object = maybeSyndicateElectionCandidate.(*SyndicateElectionCandidate)
	} else {
		slice = *maybeSyndicateElectionCandidate.(*[]*SyndicateElectionCandidate)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateElectionCandidateR{}
		}
		args = append(args, object.SyndicateElectionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateElectionCandidateR{}
			}

			for _, a := range args {
				if a == obj.SyndicateElectionID {
					continue Outer
				}
			}

			args = append(args, obj.SyndicateElectionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicate_elections`),
		qm.WhereIn(`syndicate_elections.id in ?`, args...),
		qmhelper.WhereIsNull(`syndicate_elections.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SyndicateElection")
	}

	var resultSlice []*SyndicateElection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SyndicateElection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for syndicate_elections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicate_elections")
	}

	if len(syndicateElectionCandidateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SyndicateElection = foreign
		if foreign.R == nil {
			foreign.R = &syndicateElectionR{}
		}
		foreign.R.SyndicateElectionCandidates = append(foreign.R.SyndicateElectionCandidates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SyndicateElectionID == foreign.ID {
				local.R.SyndicateElection = foreign
				if foreign.R == nil {
					foreign.R = &syndicateElectionR{}
				}
				foreign.R.SyndicateElectionCandidates = append(foreign.R.SyndicateElectionCandidates, local)
				break
			}
		}
	}

	return nil
}

// LoadSyndicate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateElectionCandidateL) LoadSyndicate(e boil.Executor, singular bool, maybeSyndicateElectionCandidate interface{}, mods queries.Applicator) error {
	var slice []*SyndicateElectionCandidate
	var object *SyndicateElectionCandidate

	if singular {
		object = maybeSyndicateElectionCandidate.(*SyndicateElectionCandidate)
	} else {
		slice = *maybeSyndicateElectionCandidate.(*[]*SyndicateElectionCandidate)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateElectionCandidateR{}
		}
		args = append(args, object.SyndicateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateElectionCandidateR{}
			}

			for _, a := range args {
				if a == obj.SyndicateID {
					continue Outer
				}
			}

			args = append(args, obj.SyndicateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicates`),
		qm.WhereIn(`syndicates.id in ?`, args...),
		qmhelper.WhereIsNull(`syndicates.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Syndicate")
	}

	var resultSlice []*Syndicate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Syndicate")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for syndicates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicates")
	}

	if len(syndicateElectionCandidateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Syndicate = foreign
		if foreign.R == nil {
			foreign.R = &syndicateR{}
		}
		foreign.R.SyndicateElectionCandidates = append(foreign.R.SyndicateElectionCandidates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SyndicateID == foreign.ID {
				local.R.Syndicate = foreign
				if foreign.R == nil {
					foreign.R = &syndicateR{}
				}
				foreign.R.SyndicateElectionCandidates = append(foreign.R.SyndicateElectionCandidates, local)
				break
			}
		}
	}

	return nil
}

// SetCandidate of the syndicateElectionCandidate to the related item.
// Sets o.R.Candidate to related.
// Adds o to related.R.CandidateSyndicateElectionCandidates.
func (o *SyndicateElectionCandidate) SetCandidate(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicate_election_candidates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"candidate_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicateElectionCandidatePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.SyndicateElectionID, o.CandidateID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CandidateID = related.ID
	if o.R == nil {
		o.R = &syndicateElectionCandidateR{
			Candidate: related,
		}
	} else {
		o.R.Candidate = related
	}

	if related.R == nil {
		related.R = &playerR{
			CandidateSyndicateElectionCandidates: SyndicateElectionCandidateSlice{o},
		}
	} else {
		related.R.CandidateSyndicateElectionCandidates = append(related.R.CandidateSyndicateElectionCandidates, o)
	}

	return nil
}

// SetSyndicateElection of the syndicateElectionCandidate to the related item.
// Sets o.R.SyndicateElection to related.
// Adds o to related.R.SyndicateElectionCandidates.
func (o *SyndicateElectionCandidate) SetSyndicateElection(exec boil.Executor, insert bool, related *SyndicateElection) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicate_election_candidates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"syndicate_election_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicateElectionCandidatePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.SyndicateElectionID, o.CandidateID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SyndicateElectionID = related.ID
	if o.R == nil {
		o.R = &syndicateElectionCandidateR{
			SyndicateElection: related,
		}
	} else {
		o.R.SyndicateElection = related
	}

	if related.R == nil {
		related.R = &syndicateElectionR{
			SyndicateElectionCandidates: SyndicateElectionCandidateSlice{o},
		}
	} else {
		related.R.SyndicateElectionCandidates = append(related.R.SyndicateElectionCandidates, o)
	}

	return nil
}

// SetSyndicate of the syndicateElectionCandidate to the related item.
// Sets o.R.Syndicate to related.
// Adds o to related.R.SyndicateElectionCandidates.
func (o *SyndicateElectionCandidate) SetSyndicate(exec boil.Executor, insert bool, related *Syndicate) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicate_election_candidates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"syndicate_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicateElectionCandidatePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.SyndicateElectionID, o.CandidateID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SyndicateID = related.ID
	if o.R == nil {
		o.R = &syndicateElectionCandidateR{
			Syndicate: related,
		}
	} else {
		o.R.Syndicate = related
	}

	if related.R == nil {
		related.R = &syndicateR{
			SyndicateElectionCandidates: SyndicateElectionCandidateSlice{o},
		}
	} else {
		related.R.SyndicateElectionCandidates = append(related.R.SyndicateElectionCandidates, o)
	}

	return nil
}

// SyndicateElectionCandidates retrieves all the records using an executor.
func SyndicateElectionCandidates(mods ...qm.QueryMod) syndicateElectionCandidateQuery {
	mods = append(mods, qm.From("\"syndicate_election_candidates\""), qmhelper.WhereIsNull("\"syndicate_election_candidates\".\"deleted_at\""))
	return syndicateElectionCandidateQuery{NewQuery(mods...)}
}

// FindSyndicateElectionCandidate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSyndicateElectionCandidate(exec boil.Executor, syndicateElectionID string, candidateID string, selectCols ...string) (*SyndicateElectionCandidate, error) {
	syndicateElectionCandidateObj := &SyndicateElectionCandidate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"syndicate_election_candidates\" where \"syndicate_election_id\"=$1 AND \"candidate_id\"=$2 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, syndicateElectionID, candidateID)

	err := q.Bind(nil, exec, syndicateElectionCandidateObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from syndicate_election_candidates")
	}

	if err = syndicateElectionCandidateObj.doAfterSelectHooks(exec); err != nil {
		return syndicateElectionCandidateObj, err
	}

	return syndicateElectionCandidateObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SyndicateElectionCandidate) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no syndicate_election_candidates provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syndicateElectionCandidateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	syndicateElectionCandidateInsertCacheMut.RLock()
	cache, cached := syndicateElectionCandidateInsertCache[key]
	syndicateElectionCandidateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			syndicateElectionCandidateAllColumns,
			syndicateElectionCandidateColumnsWithDefault,
			syndicateElectionCandidateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(syndicateElectionCandidateType, syndicateElectionCandidateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(syndicateElectionCandidateType, syndicateElectionCandidateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"syndicate_election_candidates\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"syndicate_election_candidates\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into syndicate_election_candidates")
	}

	if !cached {
		syndicateElectionCandidateInsertCacheMut.Lock()
		syndicateElectionCandidateInsertCache[key] = cache
		syndicateElectionCandidateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the SyndicateElectionCandidate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SyndicateElectionCandidate) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	syndicateElectionCandidateUpdateCacheMut.RLock()
	cache, cached := syndicateElectionCandidateUpdateCache[key]
	syndicateElectionCandidateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			syndicateElectionCandidateAllColumns,
			syndicateElectionCandidatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update syndicate_election_candidates, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"syndicate_election_candidates\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, syndicateElectionCandidatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(syndicateElectionCandidateType, syndicateElectionCandidateMapping, append(wl, syndicateElectionCandidatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update syndicate_election_candidates row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for syndicate_election_candidates")
	}

	if !cached {
		syndicateElectionCandidateUpdateCacheMut.Lock()
		syndicateElectionCandidateUpdateCache[key] = cache
		syndicateElectionCandidateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q syndicateElectionCandidateQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for syndicate_election_candidates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for syndicate_election_candidates")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SyndicateElectionCandidateSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateElectionCandidatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"syndicate_election_candidates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, syndicateElectionCandidatePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in syndicateElectionCandidate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all syndicateElectionCandidate")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SyndicateElectionCandidate) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no syndicate_election_candidates provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syndicateElectionCandidateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	syndicateElectionCandidateUpsertCacheMut.RLock()
	cache, cached := syndicateElectionCandidateUpsertCache[key]
	syndicateElectionCandidateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			syndicateElectionCandidateAllColumns,
			syndicateElectionCandidateColumnsWithDefault,
			syndicateElectionCandidateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			syndicateElectionCandidateAllColumns,
			syndicateElectionCandidatePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert syndicate_election_candidates, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(syndicateElectionCandidatePrimaryKeyColumns))
			copy(conflict, syndicateElectionCandidatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"syndicate_election_candidates\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(syndicateElectionCandidateType, syndicateElectionCandidateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(syndicateElectionCandidateType, syndicateElectionCandidateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert syndicate_election_candidates")
	}

	if !cached {
		syndicateElectionCandidateUpsertCacheMut.Lock()
		syndicateElectionCandidateUpsertCache[key] = cache
		syndicateElectionCandidateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single SyndicateElectionCandidate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SyndicateElectionCandidate) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no SyndicateElectionCandidate provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), syndicateElectionCandidatePrimaryKeyMapping)
		sql = "DELETE FROM \"syndicate_election_candidates\" WHERE \"syndicate_election_id\"=$1 AND \"candidate_id\"=$2"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"syndicate_election_candidates\" SET %s WHERE \"syndicate_election_id\"=$2 AND \"candidate_id\"=$3",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(syndicateElectionCandidateType, syndicateElectionCandidateMapping, append(wl, syndicateElectionCandidatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from syndicate_election_candidates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for syndicate_election_candidates")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q syndicateElectionCandidateQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no syndicateElectionCandidateQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from syndicate_election_candidates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for syndicate_election_candidates")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SyndicateElectionCandidateSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(syndicateElectionCandidateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateElectionCandidatePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"syndicate_election_candidates\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syndicateElectionCandidatePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateElectionCandidatePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"syndicate_election_candidates\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, syndicateElectionCandidatePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from syndicateElectionCandidate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for syndicate_election_candidates")
	}

	if len(syndicateElectionCandidateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SyndicateElectionCandidate) Reload(exec boil.Executor) error {
	ret, err := FindSyndicateElectionCandidate(exec, o.SyndicateElectionID, o.CandidateID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SyndicateElectionCandidateSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SyndicateElectionCandidateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateElectionCandidatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"syndicate_election_candidates\".* FROM \"syndicate_election_candidates\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syndicateElectionCandidatePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in SyndicateElectionCandidateSlice")
	}

	*o = slice

	return nil
}

// SyndicateElectionCandidateExists checks if the SyndicateElectionCandidate row exists.
func SyndicateElectionCandidateExists(exec boil.Executor, syndicateElectionID string, candidateID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"syndicate_election_candidates\" where \"syndicate_election_id\"=$1 AND \"candidate_id\"=$2 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, syndicateElectionID, candidateID)
	}
	row := exec.QueryRow(sql, syndicateElectionID, candidateID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if syndicate_election_candidates exists")
	}

	return exists, nil
}
