// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BattleMapQueue is an object representing the database table.
type BattleMapQueue struct {
	ID        string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	MapID     string    `boiler:"map_id" boil:"map_id" json:"map_id" toml:"map_id" yaml:"map_id"`
	CreatedAt time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *battleMapQueueR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L battleMapQueueL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattleMapQueueColumns = struct {
	ID        string
	MapID     string
	CreatedAt string
}{
	ID:        "id",
	MapID:     "map_id",
	CreatedAt: "created_at",
}

var BattleMapQueueTableColumns = struct {
	ID        string
	MapID     string
	CreatedAt string
}{
	ID:        "battle_map_queue.id",
	MapID:     "battle_map_queue.map_id",
	CreatedAt: "battle_map_queue.created_at",
}

// Generated where

var BattleMapQueueWhere = struct {
	ID        whereHelperstring
	MapID     whereHelperstring
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"battle_map_queue\".\"id\""},
	MapID:     whereHelperstring{field: "\"battle_map_queue\".\"map_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"battle_map_queue\".\"created_at\""},
}

// BattleMapQueueRels is where relationship names are stored.
var BattleMapQueueRels = struct {
	Map string
}{
	Map: "Map",
}

// battleMapQueueR is where relationships are stored.
type battleMapQueueR struct {
	Map *GameMap `boiler:"Map" boil:"Map" json:"Map" toml:"Map" yaml:"Map"`
}

// NewStruct creates a new relationship struct
func (*battleMapQueueR) NewStruct() *battleMapQueueR {
	return &battleMapQueueR{}
}

// battleMapQueueL is where Load methods for each relationship are stored.
type battleMapQueueL struct{}

var (
	battleMapQueueAllColumns            = []string{"id", "map_id", "created_at"}
	battleMapQueueColumnsWithoutDefault = []string{"map_id"}
	battleMapQueueColumnsWithDefault    = []string{"id", "created_at"}
	battleMapQueuePrimaryKeyColumns     = []string{"id"}
	battleMapQueueGeneratedColumns      = []string{}
)

type (
	// BattleMapQueueSlice is an alias for a slice of pointers to BattleMapQueue.
	// This should almost always be used instead of []BattleMapQueue.
	BattleMapQueueSlice []*BattleMapQueue
	// BattleMapQueueHook is the signature for custom BattleMapQueue hook methods
	BattleMapQueueHook func(boil.Executor, *BattleMapQueue) error

	battleMapQueueQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battleMapQueueType                 = reflect.TypeOf(&BattleMapQueue{})
	battleMapQueueMapping              = queries.MakeStructMapping(battleMapQueueType)
	battleMapQueuePrimaryKeyMapping, _ = queries.BindMapping(battleMapQueueType, battleMapQueueMapping, battleMapQueuePrimaryKeyColumns)
	battleMapQueueInsertCacheMut       sync.RWMutex
	battleMapQueueInsertCache          = make(map[string]insertCache)
	battleMapQueueUpdateCacheMut       sync.RWMutex
	battleMapQueueUpdateCache          = make(map[string]updateCache)
	battleMapQueueUpsertCacheMut       sync.RWMutex
	battleMapQueueUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battleMapQueueAfterSelectHooks []BattleMapQueueHook

var battleMapQueueBeforeInsertHooks []BattleMapQueueHook
var battleMapQueueAfterInsertHooks []BattleMapQueueHook

var battleMapQueueBeforeUpdateHooks []BattleMapQueueHook
var battleMapQueueAfterUpdateHooks []BattleMapQueueHook

var battleMapQueueBeforeDeleteHooks []BattleMapQueueHook
var battleMapQueueAfterDeleteHooks []BattleMapQueueHook

var battleMapQueueBeforeUpsertHooks []BattleMapQueueHook
var battleMapQueueAfterUpsertHooks []BattleMapQueueHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BattleMapQueue) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range battleMapQueueAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BattleMapQueue) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleMapQueueBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BattleMapQueue) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleMapQueueAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BattleMapQueue) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleMapQueueBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BattleMapQueue) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleMapQueueAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BattleMapQueue) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleMapQueueBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BattleMapQueue) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleMapQueueAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BattleMapQueue) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleMapQueueBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BattleMapQueue) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleMapQueueAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattleMapQueueHook registers your hook function for all future operations.
func AddBattleMapQueueHook(hookPoint boil.HookPoint, battleMapQueueHook BattleMapQueueHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		battleMapQueueAfterSelectHooks = append(battleMapQueueAfterSelectHooks, battleMapQueueHook)
	case boil.BeforeInsertHook:
		battleMapQueueBeforeInsertHooks = append(battleMapQueueBeforeInsertHooks, battleMapQueueHook)
	case boil.AfterInsertHook:
		battleMapQueueAfterInsertHooks = append(battleMapQueueAfterInsertHooks, battleMapQueueHook)
	case boil.BeforeUpdateHook:
		battleMapQueueBeforeUpdateHooks = append(battleMapQueueBeforeUpdateHooks, battleMapQueueHook)
	case boil.AfterUpdateHook:
		battleMapQueueAfterUpdateHooks = append(battleMapQueueAfterUpdateHooks, battleMapQueueHook)
	case boil.BeforeDeleteHook:
		battleMapQueueBeforeDeleteHooks = append(battleMapQueueBeforeDeleteHooks, battleMapQueueHook)
	case boil.AfterDeleteHook:
		battleMapQueueAfterDeleteHooks = append(battleMapQueueAfterDeleteHooks, battleMapQueueHook)
	case boil.BeforeUpsertHook:
		battleMapQueueBeforeUpsertHooks = append(battleMapQueueBeforeUpsertHooks, battleMapQueueHook)
	case boil.AfterUpsertHook:
		battleMapQueueAfterUpsertHooks = append(battleMapQueueAfterUpsertHooks, battleMapQueueHook)
	}
}

// One returns a single battleMapQueue record from the query.
func (q battleMapQueueQuery) One(exec boil.Executor) (*BattleMapQueue, error) {
	o := &BattleMapQueue{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for battle_map_queue")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BattleMapQueue records from the query.
func (q battleMapQueueQuery) All(exec boil.Executor) (BattleMapQueueSlice, error) {
	var o []*BattleMapQueue

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BattleMapQueue slice")
	}

	if len(battleMapQueueAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BattleMapQueue records in the query.
func (q battleMapQueueQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count battle_map_queue rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battleMapQueueQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if battle_map_queue exists")
	}

	return count > 0, nil
}

// Map pointed to by the foreign key.
func (o *BattleMapQueue) Map(mods ...qm.QueryMod) gameMapQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MapID),
	}

	queryMods = append(queryMods, mods...)

	query := GameMaps(queryMods...)
	queries.SetFrom(query.Query, "\"game_maps\"")

	return query
}

// LoadMap allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleMapQueueL) LoadMap(e boil.Executor, singular bool, maybeBattleMapQueue interface{}, mods queries.Applicator) error {
	var slice []*BattleMapQueue
	var object *BattleMapQueue

	if singular {
		object = maybeBattleMapQueue.(*BattleMapQueue)
	} else {
		slice = *maybeBattleMapQueue.(*[]*BattleMapQueue)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleMapQueueR{}
		}
		args = append(args, object.MapID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleMapQueueR{}
			}

			for _, a := range args {
				if a == obj.MapID {
					continue Outer
				}
			}

			args = append(args, obj.MapID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`game_maps`),
		qm.WhereIn(`game_maps.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GameMap")
	}

	var resultSlice []*GameMap
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GameMap")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for game_maps")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game_maps")
	}

	if len(battleMapQueueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Map = foreign
		if foreign.R == nil {
			foreign.R = &gameMapR{}
		}
		foreign.R.MapBattleMapQueues = append(foreign.R.MapBattleMapQueues, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MapID == foreign.ID {
				local.R.Map = foreign
				if foreign.R == nil {
					foreign.R = &gameMapR{}
				}
				foreign.R.MapBattleMapQueues = append(foreign.R.MapBattleMapQueues, local)
				break
			}
		}
	}

	return nil
}

// SetMap of the battleMapQueue to the related item.
// Sets o.R.Map to related.
// Adds o to related.R.MapBattleMapQueues.
func (o *BattleMapQueue) SetMap(exec boil.Executor, insert bool, related *GameMap) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_map_queue\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"map_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleMapQueuePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MapID = related.ID
	if o.R == nil {
		o.R = &battleMapQueueR{
			Map: related,
		}
	} else {
		o.R.Map = related
	}

	if related.R == nil {
		related.R = &gameMapR{
			MapBattleMapQueues: BattleMapQueueSlice{o},
		}
	} else {
		related.R.MapBattleMapQueues = append(related.R.MapBattleMapQueues, o)
	}

	return nil
}

// BattleMapQueues retrieves all the records using an executor.
func BattleMapQueues(mods ...qm.QueryMod) battleMapQueueQuery {
	mods = append(mods, qm.From("\"battle_map_queue\""))
	return battleMapQueueQuery{NewQuery(mods...)}
}

// FindBattleMapQueue retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattleMapQueue(exec boil.Executor, iD string, selectCols ...string) (*BattleMapQueue, error) {
	battleMapQueueObj := &BattleMapQueue{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battle_map_queue\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, battleMapQueueObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from battle_map_queue")
	}

	if err = battleMapQueueObj.doAfterSelectHooks(exec); err != nil {
		return battleMapQueueObj, err
	}

	return battleMapQueueObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BattleMapQueue) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_map_queue provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleMapQueueColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battleMapQueueInsertCacheMut.RLock()
	cache, cached := battleMapQueueInsertCache[key]
	battleMapQueueInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battleMapQueueAllColumns,
			battleMapQueueColumnsWithDefault,
			battleMapQueueColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battleMapQueueType, battleMapQueueMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battleMapQueueType, battleMapQueueMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battle_map_queue\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battle_map_queue\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into battle_map_queue")
	}

	if !cached {
		battleMapQueueInsertCacheMut.Lock()
		battleMapQueueInsertCache[key] = cache
		battleMapQueueInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BattleMapQueue.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BattleMapQueue) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battleMapQueueUpdateCacheMut.RLock()
	cache, cached := battleMapQueueUpdateCache[key]
	battleMapQueueUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battleMapQueueAllColumns,
			battleMapQueuePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update battle_map_queue, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battle_map_queue\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battleMapQueuePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battleMapQueueType, battleMapQueueMapping, append(wl, battleMapQueuePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update battle_map_queue row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for battle_map_queue")
	}

	if !cached {
		battleMapQueueUpdateCacheMut.Lock()
		battleMapQueueUpdateCache[key] = cache
		battleMapQueueUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battleMapQueueQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for battle_map_queue")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for battle_map_queue")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattleMapQueueSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleMapQueuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battle_map_queue\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battleMapQueuePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in battleMapQueue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all battleMapQueue")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BattleMapQueue) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_map_queue provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleMapQueueColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battleMapQueueUpsertCacheMut.RLock()
	cache, cached := battleMapQueueUpsertCache[key]
	battleMapQueueUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battleMapQueueAllColumns,
			battleMapQueueColumnsWithDefault,
			battleMapQueueColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			battleMapQueueAllColumns,
			battleMapQueuePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert battle_map_queue, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battleMapQueuePrimaryKeyColumns))
			copy(conflict, battleMapQueuePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battle_map_queue\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battleMapQueueType, battleMapQueueMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battleMapQueueType, battleMapQueueMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert battle_map_queue")
	}

	if !cached {
		battleMapQueueUpsertCacheMut.Lock()
		battleMapQueueUpsertCache[key] = cache
		battleMapQueueUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BattleMapQueue record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BattleMapQueue) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BattleMapQueue provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battleMapQueuePrimaryKeyMapping)
	sql := "DELETE FROM \"battle_map_queue\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from battle_map_queue")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for battle_map_queue")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battleMapQueueQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no battleMapQueueQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battle_map_queue")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_map_queue")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattleMapQueueSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(battleMapQueueBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleMapQueuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"battle_map_queue\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleMapQueuePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battleMapQueue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_map_queue")
	}

	if len(battleMapQueueAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BattleMapQueue) Reload(exec boil.Executor) error {
	ret, err := FindBattleMapQueue(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattleMapQueueSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattleMapQueueSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleMapQueuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battle_map_queue\".* FROM \"battle_map_queue\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleMapQueuePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BattleMapQueueSlice")
	}

	*o = slice

	return nil
}

// BattleMapQueueExists checks if the BattleMapQueue row exists.
func BattleMapQueueExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battle_map_queue\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if battle_map_queue exists")
	}

	return exists, nil
}
