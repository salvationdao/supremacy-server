// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// QuestionnaireAnswer is an object representing the database table.
type QuestionnaireAnswer struct {
	ID                     string            `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	SyndicateJoinRequestID null.String       `boiler:"syndicate_join_request_id" boil:"syndicate_join_request_id" json:"syndicate_join_request_id,omitempty" toml:"syndicate_join_request_id" yaml:"syndicate_join_request_id,omitempty"`
	Question               string            `boiler:"question" boil:"question" json:"question" toml:"question" yaml:"question"`
	Answer                 null.String       `boiler:"answer" boil:"answer" json:"answer,omitempty" toml:"answer" yaml:"answer,omitempty"`
	Selections             types.StringArray `boiler:"selections" boil:"selections" json:"selections,omitempty" toml:"selections" yaml:"selections,omitempty"`
	CreatedAt              time.Time         `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt              time.Time         `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt              null.Time         `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *questionnaireAnswerR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L questionnaireAnswerL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var QuestionnaireAnswerColumns = struct {
	ID                     string
	SyndicateJoinRequestID string
	Question               string
	Answer                 string
	Selections             string
	CreatedAt              string
	UpdatedAt              string
	DeletedAt              string
}{
	ID:                     "id",
	SyndicateJoinRequestID: "syndicate_join_request_id",
	Question:               "question",
	Answer:                 "answer",
	Selections:             "selections",
	CreatedAt:              "created_at",
	UpdatedAt:              "updated_at",
	DeletedAt:              "deleted_at",
}

var QuestionnaireAnswerTableColumns = struct {
	ID                     string
	SyndicateJoinRequestID string
	Question               string
	Answer                 string
	Selections             string
	CreatedAt              string
	UpdatedAt              string
	DeletedAt              string
}{
	ID:                     "questionnaire_answer.id",
	SyndicateJoinRequestID: "questionnaire_answer.syndicate_join_request_id",
	Question:               "questionnaire_answer.question",
	Answer:                 "questionnaire_answer.answer",
	Selections:             "questionnaire_answer.selections",
	CreatedAt:              "questionnaire_answer.created_at",
	UpdatedAt:              "questionnaire_answer.updated_at",
	DeletedAt:              "questionnaire_answer.deleted_at",
}

// Generated where

var QuestionnaireAnswerWhere = struct {
	ID                     whereHelperstring
	SyndicateJoinRequestID whereHelpernull_String
	Question               whereHelperstring
	Answer                 whereHelpernull_String
	Selections             whereHelpertypes_StringArray
	CreatedAt              whereHelpertime_Time
	UpdatedAt              whereHelpertime_Time
	DeletedAt              whereHelpernull_Time
}{
	ID:                     whereHelperstring{field: "\"questionnaire_answer\".\"id\""},
	SyndicateJoinRequestID: whereHelpernull_String{field: "\"questionnaire_answer\".\"syndicate_join_request_id\""},
	Question:               whereHelperstring{field: "\"questionnaire_answer\".\"question\""},
	Answer:                 whereHelpernull_String{field: "\"questionnaire_answer\".\"answer\""},
	Selections:             whereHelpertypes_StringArray{field: "\"questionnaire_answer\".\"selections\""},
	CreatedAt:              whereHelpertime_Time{field: "\"questionnaire_answer\".\"created_at\""},
	UpdatedAt:              whereHelpertime_Time{field: "\"questionnaire_answer\".\"updated_at\""},
	DeletedAt:              whereHelpernull_Time{field: "\"questionnaire_answer\".\"deleted_at\""},
}

// QuestionnaireAnswerRels is where relationship names are stored.
var QuestionnaireAnswerRels = struct {
	SyndicateJoinRequest string
}{
	SyndicateJoinRequest: "SyndicateJoinRequest",
}

// questionnaireAnswerR is where relationships are stored.
type questionnaireAnswerR struct {
	SyndicateJoinRequest *SyndicateJoinRequest `boiler:"SyndicateJoinRequest" boil:"SyndicateJoinRequest" json:"SyndicateJoinRequest" toml:"SyndicateJoinRequest" yaml:"SyndicateJoinRequest"`
}

// NewStruct creates a new relationship struct
func (*questionnaireAnswerR) NewStruct() *questionnaireAnswerR {
	return &questionnaireAnswerR{}
}

// questionnaireAnswerL is where Load methods for each relationship are stored.
type questionnaireAnswerL struct{}

var (
	questionnaireAnswerAllColumns            = []string{"id", "syndicate_join_request_id", "question", "answer", "selections", "created_at", "updated_at", "deleted_at"}
	questionnaireAnswerColumnsWithoutDefault = []string{"question"}
	questionnaireAnswerColumnsWithDefault    = []string{"id", "syndicate_join_request_id", "answer", "selections", "created_at", "updated_at", "deleted_at"}
	questionnaireAnswerPrimaryKeyColumns     = []string{"id"}
	questionnaireAnswerGeneratedColumns      = []string{}
)

type (
	// QuestionnaireAnswerSlice is an alias for a slice of pointers to QuestionnaireAnswer.
	// This should almost always be used instead of []QuestionnaireAnswer.
	QuestionnaireAnswerSlice []*QuestionnaireAnswer
	// QuestionnaireAnswerHook is the signature for custom QuestionnaireAnswer hook methods
	QuestionnaireAnswerHook func(boil.Executor, *QuestionnaireAnswer) error

	questionnaireAnswerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	questionnaireAnswerType                 = reflect.TypeOf(&QuestionnaireAnswer{})
	questionnaireAnswerMapping              = queries.MakeStructMapping(questionnaireAnswerType)
	questionnaireAnswerPrimaryKeyMapping, _ = queries.BindMapping(questionnaireAnswerType, questionnaireAnswerMapping, questionnaireAnswerPrimaryKeyColumns)
	questionnaireAnswerInsertCacheMut       sync.RWMutex
	questionnaireAnswerInsertCache          = make(map[string]insertCache)
	questionnaireAnswerUpdateCacheMut       sync.RWMutex
	questionnaireAnswerUpdateCache          = make(map[string]updateCache)
	questionnaireAnswerUpsertCacheMut       sync.RWMutex
	questionnaireAnswerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var questionnaireAnswerAfterSelectHooks []QuestionnaireAnswerHook

var questionnaireAnswerBeforeInsertHooks []QuestionnaireAnswerHook
var questionnaireAnswerAfterInsertHooks []QuestionnaireAnswerHook

var questionnaireAnswerBeforeUpdateHooks []QuestionnaireAnswerHook
var questionnaireAnswerAfterUpdateHooks []QuestionnaireAnswerHook

var questionnaireAnswerBeforeDeleteHooks []QuestionnaireAnswerHook
var questionnaireAnswerAfterDeleteHooks []QuestionnaireAnswerHook

var questionnaireAnswerBeforeUpsertHooks []QuestionnaireAnswerHook
var questionnaireAnswerAfterUpsertHooks []QuestionnaireAnswerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *QuestionnaireAnswer) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range questionnaireAnswerAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *QuestionnaireAnswer) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range questionnaireAnswerBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *QuestionnaireAnswer) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range questionnaireAnswerAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *QuestionnaireAnswer) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range questionnaireAnswerBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *QuestionnaireAnswer) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range questionnaireAnswerAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *QuestionnaireAnswer) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range questionnaireAnswerBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *QuestionnaireAnswer) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range questionnaireAnswerAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *QuestionnaireAnswer) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range questionnaireAnswerBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *QuestionnaireAnswer) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range questionnaireAnswerAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddQuestionnaireAnswerHook registers your hook function for all future operations.
func AddQuestionnaireAnswerHook(hookPoint boil.HookPoint, questionnaireAnswerHook QuestionnaireAnswerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		questionnaireAnswerAfterSelectHooks = append(questionnaireAnswerAfterSelectHooks, questionnaireAnswerHook)
	case boil.BeforeInsertHook:
		questionnaireAnswerBeforeInsertHooks = append(questionnaireAnswerBeforeInsertHooks, questionnaireAnswerHook)
	case boil.AfterInsertHook:
		questionnaireAnswerAfterInsertHooks = append(questionnaireAnswerAfterInsertHooks, questionnaireAnswerHook)
	case boil.BeforeUpdateHook:
		questionnaireAnswerBeforeUpdateHooks = append(questionnaireAnswerBeforeUpdateHooks, questionnaireAnswerHook)
	case boil.AfterUpdateHook:
		questionnaireAnswerAfterUpdateHooks = append(questionnaireAnswerAfterUpdateHooks, questionnaireAnswerHook)
	case boil.BeforeDeleteHook:
		questionnaireAnswerBeforeDeleteHooks = append(questionnaireAnswerBeforeDeleteHooks, questionnaireAnswerHook)
	case boil.AfterDeleteHook:
		questionnaireAnswerAfterDeleteHooks = append(questionnaireAnswerAfterDeleteHooks, questionnaireAnswerHook)
	case boil.BeforeUpsertHook:
		questionnaireAnswerBeforeUpsertHooks = append(questionnaireAnswerBeforeUpsertHooks, questionnaireAnswerHook)
	case boil.AfterUpsertHook:
		questionnaireAnswerAfterUpsertHooks = append(questionnaireAnswerAfterUpsertHooks, questionnaireAnswerHook)
	}
}

// One returns a single questionnaireAnswer record from the query.
func (q questionnaireAnswerQuery) One(exec boil.Executor) (*QuestionnaireAnswer, error) {
	o := &QuestionnaireAnswer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for questionnaire_answer")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all QuestionnaireAnswer records from the query.
func (q questionnaireAnswerQuery) All(exec boil.Executor) (QuestionnaireAnswerSlice, error) {
	var o []*QuestionnaireAnswer

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to QuestionnaireAnswer slice")
	}

	if len(questionnaireAnswerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all QuestionnaireAnswer records in the query.
func (q questionnaireAnswerQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count questionnaire_answer rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q questionnaireAnswerQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if questionnaire_answer exists")
	}

	return count > 0, nil
}

// SyndicateJoinRequest pointed to by the foreign key.
func (o *QuestionnaireAnswer) SyndicateJoinRequest(mods ...qm.QueryMod) syndicateJoinRequestQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SyndicateJoinRequestID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := SyndicateJoinRequests(queryMods...)
	queries.SetFrom(query.Query, "\"syndicate_join_requests\"")

	return query
}

// LoadSyndicateJoinRequest allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (questionnaireAnswerL) LoadSyndicateJoinRequest(e boil.Executor, singular bool, maybeQuestionnaireAnswer interface{}, mods queries.Applicator) error {
	var slice []*QuestionnaireAnswer
	var object *QuestionnaireAnswer

	if singular {
		object = maybeQuestionnaireAnswer.(*QuestionnaireAnswer)
	} else {
		slice = *maybeQuestionnaireAnswer.(*[]*QuestionnaireAnswer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &questionnaireAnswerR{}
		}
		if !queries.IsNil(object.SyndicateJoinRequestID) {
			args = append(args, object.SyndicateJoinRequestID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &questionnaireAnswerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SyndicateJoinRequestID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SyndicateJoinRequestID) {
				args = append(args, obj.SyndicateJoinRequestID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicate_join_requests`),
		qm.WhereIn(`syndicate_join_requests.id in ?`, args...),
		qmhelper.WhereIsNull(`syndicate_join_requests.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SyndicateJoinRequest")
	}

	var resultSlice []*SyndicateJoinRequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SyndicateJoinRequest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for syndicate_join_requests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicate_join_requests")
	}

	if len(questionnaireAnswerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SyndicateJoinRequest = foreign
		if foreign.R == nil {
			foreign.R = &syndicateJoinRequestR{}
		}
		foreign.R.QuestionnaireAnswers = append(foreign.R.QuestionnaireAnswers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SyndicateJoinRequestID, foreign.ID) {
				local.R.SyndicateJoinRequest = foreign
				if foreign.R == nil {
					foreign.R = &syndicateJoinRequestR{}
				}
				foreign.R.QuestionnaireAnswers = append(foreign.R.QuestionnaireAnswers, local)
				break
			}
		}
	}

	return nil
}

// SetSyndicateJoinRequest of the questionnaireAnswer to the related item.
// Sets o.R.SyndicateJoinRequest to related.
// Adds o to related.R.QuestionnaireAnswers.
func (o *QuestionnaireAnswer) SetSyndicateJoinRequest(exec boil.Executor, insert bool, related *SyndicateJoinRequest) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"questionnaire_answer\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"syndicate_join_request_id"}),
		strmangle.WhereClause("\"", "\"", 2, questionnaireAnswerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SyndicateJoinRequestID, related.ID)
	if o.R == nil {
		o.R = &questionnaireAnswerR{
			SyndicateJoinRequest: related,
		}
	} else {
		o.R.SyndicateJoinRequest = related
	}

	if related.R == nil {
		related.R = &syndicateJoinRequestR{
			QuestionnaireAnswers: QuestionnaireAnswerSlice{o},
		}
	} else {
		related.R.QuestionnaireAnswers = append(related.R.QuestionnaireAnswers, o)
	}

	return nil
}

// RemoveSyndicateJoinRequest relationship.
// Sets o.R.SyndicateJoinRequest to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *QuestionnaireAnswer) RemoveSyndicateJoinRequest(exec boil.Executor, related *SyndicateJoinRequest) error {
	var err error

	queries.SetScanner(&o.SyndicateJoinRequestID, nil)
	if _, err = o.Update(exec, boil.Whitelist("syndicate_join_request_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SyndicateJoinRequest = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.QuestionnaireAnswers {
		if queries.Equal(o.SyndicateJoinRequestID, ri.SyndicateJoinRequestID) {
			continue
		}

		ln := len(related.R.QuestionnaireAnswers)
		if ln > 1 && i < ln-1 {
			related.R.QuestionnaireAnswers[i] = related.R.QuestionnaireAnswers[ln-1]
		}
		related.R.QuestionnaireAnswers = related.R.QuestionnaireAnswers[:ln-1]
		break
	}
	return nil
}

// QuestionnaireAnswers retrieves all the records using an executor.
func QuestionnaireAnswers(mods ...qm.QueryMod) questionnaireAnswerQuery {
	mods = append(mods, qm.From("\"questionnaire_answer\""), qmhelper.WhereIsNull("\"questionnaire_answer\".\"deleted_at\""))
	return questionnaireAnswerQuery{NewQuery(mods...)}
}

// FindQuestionnaireAnswer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindQuestionnaireAnswer(exec boil.Executor, iD string, selectCols ...string) (*QuestionnaireAnswer, error) {
	questionnaireAnswerObj := &QuestionnaireAnswer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"questionnaire_answer\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, questionnaireAnswerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from questionnaire_answer")
	}

	if err = questionnaireAnswerObj.doAfterSelectHooks(exec); err != nil {
		return questionnaireAnswerObj, err
	}

	return questionnaireAnswerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *QuestionnaireAnswer) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no questionnaire_answer provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(questionnaireAnswerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	questionnaireAnswerInsertCacheMut.RLock()
	cache, cached := questionnaireAnswerInsertCache[key]
	questionnaireAnswerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			questionnaireAnswerAllColumns,
			questionnaireAnswerColumnsWithDefault,
			questionnaireAnswerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(questionnaireAnswerType, questionnaireAnswerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(questionnaireAnswerType, questionnaireAnswerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"questionnaire_answer\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"questionnaire_answer\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into questionnaire_answer")
	}

	if !cached {
		questionnaireAnswerInsertCacheMut.Lock()
		questionnaireAnswerInsertCache[key] = cache
		questionnaireAnswerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the QuestionnaireAnswer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *QuestionnaireAnswer) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	questionnaireAnswerUpdateCacheMut.RLock()
	cache, cached := questionnaireAnswerUpdateCache[key]
	questionnaireAnswerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			questionnaireAnswerAllColumns,
			questionnaireAnswerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update questionnaire_answer, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"questionnaire_answer\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, questionnaireAnswerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(questionnaireAnswerType, questionnaireAnswerMapping, append(wl, questionnaireAnswerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update questionnaire_answer row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for questionnaire_answer")
	}

	if !cached {
		questionnaireAnswerUpdateCacheMut.Lock()
		questionnaireAnswerUpdateCache[key] = cache
		questionnaireAnswerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q questionnaireAnswerQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for questionnaire_answer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for questionnaire_answer")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o QuestionnaireAnswerSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), questionnaireAnswerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"questionnaire_answer\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, questionnaireAnswerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in questionnaireAnswer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all questionnaireAnswer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *QuestionnaireAnswer) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no questionnaire_answer provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(questionnaireAnswerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	questionnaireAnswerUpsertCacheMut.RLock()
	cache, cached := questionnaireAnswerUpsertCache[key]
	questionnaireAnswerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			questionnaireAnswerAllColumns,
			questionnaireAnswerColumnsWithDefault,
			questionnaireAnswerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			questionnaireAnswerAllColumns,
			questionnaireAnswerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert questionnaire_answer, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(questionnaireAnswerPrimaryKeyColumns))
			copy(conflict, questionnaireAnswerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"questionnaire_answer\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(questionnaireAnswerType, questionnaireAnswerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(questionnaireAnswerType, questionnaireAnswerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert questionnaire_answer")
	}

	if !cached {
		questionnaireAnswerUpsertCacheMut.Lock()
		questionnaireAnswerUpsertCache[key] = cache
		questionnaireAnswerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single QuestionnaireAnswer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *QuestionnaireAnswer) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no QuestionnaireAnswer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), questionnaireAnswerPrimaryKeyMapping)
		sql = "DELETE FROM \"questionnaire_answer\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"questionnaire_answer\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(questionnaireAnswerType, questionnaireAnswerMapping, append(wl, questionnaireAnswerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from questionnaire_answer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for questionnaire_answer")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q questionnaireAnswerQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no questionnaireAnswerQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from questionnaire_answer")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for questionnaire_answer")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o QuestionnaireAnswerSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(questionnaireAnswerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), questionnaireAnswerPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"questionnaire_answer\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, questionnaireAnswerPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), questionnaireAnswerPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"questionnaire_answer\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, questionnaireAnswerPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from questionnaireAnswer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for questionnaire_answer")
	}

	if len(questionnaireAnswerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *QuestionnaireAnswer) Reload(exec boil.Executor) error {
	ret, err := FindQuestionnaireAnswer(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *QuestionnaireAnswerSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := QuestionnaireAnswerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), questionnaireAnswerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"questionnaire_answer\".* FROM \"questionnaire_answer\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, questionnaireAnswerPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in QuestionnaireAnswerSlice")
	}

	*o = slice

	return nil
}

// QuestionnaireAnswerExists checks if the QuestionnaireAnswer row exists.
func QuestionnaireAnswerExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"questionnaire_answer\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if questionnaire_answer exists")
	}

	return exists, nil
}
