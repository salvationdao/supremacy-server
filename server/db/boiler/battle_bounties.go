// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BattleBounty is an object representing the database table.
type BattleBounty struct {
	ID             string          `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BattleLobbyID  string          `boiler:"battle_lobby_id" boil:"battle_lobby_id" json:"battle_lobby_id" toml:"battle_lobby_id" yaml:"battle_lobby_id"`
	OfferedByID    string          `boiler:"offered_by_id" boil:"offered_by_id" json:"offered_by_id" toml:"offered_by_id" yaml:"offered_by_id"`
	TargetedMechID string          `boiler:"targeted_mech_id" boil:"targeted_mech_id" json:"targeted_mech_id" toml:"targeted_mech_id" yaml:"targeted_mech_id"`
	Amount         decimal.Decimal `boiler:"amount" boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	PaidTXID       null.String     `boiler:"paid_tx_id" boil:"paid_tx_id" json:"paid_tx_id,omitempty" toml:"paid_tx_id" yaml:"paid_tx_id,omitempty"`
	PayoutTXID     null.String     `boiler:"payout_tx_id" boil:"payout_tx_id" json:"payout_tx_id,omitempty" toml:"payout_tx_id" yaml:"payout_tx_id,omitempty"`
	RefundTXID     null.String     `boiler:"refund_tx_id" boil:"refund_tx_id" json:"refund_tx_id,omitempty" toml:"refund_tx_id" yaml:"refund_tx_id,omitempty"`
	CreatedAt      time.Time       `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time       `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt      null.Time       `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *battleBountyR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L battleBountyL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattleBountyColumns = struct {
	ID             string
	BattleLobbyID  string
	OfferedByID    string
	TargetedMechID string
	Amount         string
	PaidTXID       string
	PayoutTXID     string
	RefundTXID     string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ID:             "id",
	BattleLobbyID:  "battle_lobby_id",
	OfferedByID:    "offered_by_id",
	TargetedMechID: "targeted_mech_id",
	Amount:         "amount",
	PaidTXID:       "paid_tx_id",
	PayoutTXID:     "payout_tx_id",
	RefundTXID:     "refund_tx_id",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
}

var BattleBountyTableColumns = struct {
	ID             string
	BattleLobbyID  string
	OfferedByID    string
	TargetedMechID string
	Amount         string
	PaidTXID       string
	PayoutTXID     string
	RefundTXID     string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ID:             "battle_bounties.id",
	BattleLobbyID:  "battle_bounties.battle_lobby_id",
	OfferedByID:    "battle_bounties.offered_by_id",
	TargetedMechID: "battle_bounties.targeted_mech_id",
	Amount:         "battle_bounties.amount",
	PaidTXID:       "battle_bounties.paid_tx_id",
	PayoutTXID:     "battle_bounties.payout_tx_id",
	RefundTXID:     "battle_bounties.refund_tx_id",
	CreatedAt:      "battle_bounties.created_at",
	UpdatedAt:      "battle_bounties.updated_at",
	DeletedAt:      "battle_bounties.deleted_at",
}

// Generated where

type whereHelperdecimal_Decimal struct{ field string }

func (w whereHelperdecimal_Decimal) EQ(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperdecimal_Decimal) NEQ(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperdecimal_Decimal) LT(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperdecimal_Decimal) LTE(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperdecimal_Decimal) GT(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperdecimal_Decimal) GTE(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var BattleBountyWhere = struct {
	ID             whereHelperstring
	BattleLobbyID  whereHelperstring
	OfferedByID    whereHelperstring
	TargetedMechID whereHelperstring
	Amount         whereHelperdecimal_Decimal
	PaidTXID       whereHelpernull_String
	PayoutTXID     whereHelpernull_String
	RefundTXID     whereHelpernull_String
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	DeletedAt      whereHelpernull_Time
}{
	ID:             whereHelperstring{field: "\"battle_bounties\".\"id\""},
	BattleLobbyID:  whereHelperstring{field: "\"battle_bounties\".\"battle_lobby_id\""},
	OfferedByID:    whereHelperstring{field: "\"battle_bounties\".\"offered_by_id\""},
	TargetedMechID: whereHelperstring{field: "\"battle_bounties\".\"targeted_mech_id\""},
	Amount:         whereHelperdecimal_Decimal{field: "\"battle_bounties\".\"amount\""},
	PaidTXID:       whereHelpernull_String{field: "\"battle_bounties\".\"paid_tx_id\""},
	PayoutTXID:     whereHelpernull_String{field: "\"battle_bounties\".\"payout_tx_id\""},
	RefundTXID:     whereHelpernull_String{field: "\"battle_bounties\".\"refund_tx_id\""},
	CreatedAt:      whereHelpertime_Time{field: "\"battle_bounties\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"battle_bounties\".\"updated_at\""},
	DeletedAt:      whereHelpernull_Time{field: "\"battle_bounties\".\"deleted_at\""},
}

// BattleBountyRels is where relationship names are stored.
var BattleBountyRels = struct {
	BattleLobby  string
	OfferedBy    string
	TargetedMech string
}{
	BattleLobby:  "BattleLobby",
	OfferedBy:    "OfferedBy",
	TargetedMech: "TargetedMech",
}

// battleBountyR is where relationships are stored.
type battleBountyR struct {
	BattleLobby  *BattleLobby `boiler:"BattleLobby" boil:"BattleLobby" json:"BattleLobby" toml:"BattleLobby" yaml:"BattleLobby"`
	OfferedBy    *Player      `boiler:"OfferedBy" boil:"OfferedBy" json:"OfferedBy" toml:"OfferedBy" yaml:"OfferedBy"`
	TargetedMech *Mech        `boiler:"TargetedMech" boil:"TargetedMech" json:"TargetedMech" toml:"TargetedMech" yaml:"TargetedMech"`
}

// NewStruct creates a new relationship struct
func (*battleBountyR) NewStruct() *battleBountyR {
	return &battleBountyR{}
}

// battleBountyL is where Load methods for each relationship are stored.
type battleBountyL struct{}

var (
	battleBountyAllColumns            = []string{"id", "battle_lobby_id", "offered_by_id", "targeted_mech_id", "amount", "paid_tx_id", "payout_tx_id", "refund_tx_id", "created_at", "updated_at", "deleted_at"}
	battleBountyColumnsWithoutDefault = []string{"battle_lobby_id", "offered_by_id", "targeted_mech_id"}
	battleBountyColumnsWithDefault    = []string{"id", "amount", "paid_tx_id", "payout_tx_id", "refund_tx_id", "created_at", "updated_at", "deleted_at"}
	battleBountyPrimaryKeyColumns     = []string{"id"}
	battleBountyGeneratedColumns      = []string{}
)

type (
	// BattleBountySlice is an alias for a slice of pointers to BattleBounty.
	// This should almost always be used instead of []BattleBounty.
	BattleBountySlice []*BattleBounty
	// BattleBountyHook is the signature for custom BattleBounty hook methods
	BattleBountyHook func(boil.Executor, *BattleBounty) error

	battleBountyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battleBountyType                 = reflect.TypeOf(&BattleBounty{})
	battleBountyMapping              = queries.MakeStructMapping(battleBountyType)
	battleBountyPrimaryKeyMapping, _ = queries.BindMapping(battleBountyType, battleBountyMapping, battleBountyPrimaryKeyColumns)
	battleBountyInsertCacheMut       sync.RWMutex
	battleBountyInsertCache          = make(map[string]insertCache)
	battleBountyUpdateCacheMut       sync.RWMutex
	battleBountyUpdateCache          = make(map[string]updateCache)
	battleBountyUpsertCacheMut       sync.RWMutex
	battleBountyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battleBountyAfterSelectHooks []BattleBountyHook

var battleBountyBeforeInsertHooks []BattleBountyHook
var battleBountyAfterInsertHooks []BattleBountyHook

var battleBountyBeforeUpdateHooks []BattleBountyHook
var battleBountyAfterUpdateHooks []BattleBountyHook

var battleBountyBeforeDeleteHooks []BattleBountyHook
var battleBountyAfterDeleteHooks []BattleBountyHook

var battleBountyBeforeUpsertHooks []BattleBountyHook
var battleBountyAfterUpsertHooks []BattleBountyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BattleBounty) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range battleBountyAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BattleBounty) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleBountyBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BattleBounty) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleBountyAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BattleBounty) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleBountyBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BattleBounty) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleBountyAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BattleBounty) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleBountyBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BattleBounty) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleBountyAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BattleBounty) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleBountyBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BattleBounty) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleBountyAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattleBountyHook registers your hook function for all future operations.
func AddBattleBountyHook(hookPoint boil.HookPoint, battleBountyHook BattleBountyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		battleBountyAfterSelectHooks = append(battleBountyAfterSelectHooks, battleBountyHook)
	case boil.BeforeInsertHook:
		battleBountyBeforeInsertHooks = append(battleBountyBeforeInsertHooks, battleBountyHook)
	case boil.AfterInsertHook:
		battleBountyAfterInsertHooks = append(battleBountyAfterInsertHooks, battleBountyHook)
	case boil.BeforeUpdateHook:
		battleBountyBeforeUpdateHooks = append(battleBountyBeforeUpdateHooks, battleBountyHook)
	case boil.AfterUpdateHook:
		battleBountyAfterUpdateHooks = append(battleBountyAfterUpdateHooks, battleBountyHook)
	case boil.BeforeDeleteHook:
		battleBountyBeforeDeleteHooks = append(battleBountyBeforeDeleteHooks, battleBountyHook)
	case boil.AfterDeleteHook:
		battleBountyAfterDeleteHooks = append(battleBountyAfterDeleteHooks, battleBountyHook)
	case boil.BeforeUpsertHook:
		battleBountyBeforeUpsertHooks = append(battleBountyBeforeUpsertHooks, battleBountyHook)
	case boil.AfterUpsertHook:
		battleBountyAfterUpsertHooks = append(battleBountyAfterUpsertHooks, battleBountyHook)
	}
}

// One returns a single battleBounty record from the query.
func (q battleBountyQuery) One(exec boil.Executor) (*BattleBounty, error) {
	o := &BattleBounty{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for battle_bounties")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BattleBounty records from the query.
func (q battleBountyQuery) All(exec boil.Executor) (BattleBountySlice, error) {
	var o []*BattleBounty

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BattleBounty slice")
	}

	if len(battleBountyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BattleBounty records in the query.
func (q battleBountyQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count battle_bounties rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battleBountyQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if battle_bounties exists")
	}

	return count > 0, nil
}

// BattleLobby pointed to by the foreign key.
func (o *BattleBounty) BattleLobby(mods ...qm.QueryMod) battleLobbyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BattleLobbyID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := BattleLobbies(queryMods...)
	queries.SetFrom(query.Query, "\"battle_lobbies\"")

	return query
}

// OfferedBy pointed to by the foreign key.
func (o *BattleBounty) OfferedBy(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OfferedByID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// TargetedMech pointed to by the foreign key.
func (o *BattleBounty) TargetedMech(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TargetedMechID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// LoadBattleLobby allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleBountyL) LoadBattleLobby(e boil.Executor, singular bool, maybeBattleBounty interface{}, mods queries.Applicator) error {
	var slice []*BattleBounty
	var object *BattleBounty

	if singular {
		object = maybeBattleBounty.(*BattleBounty)
	} else {
		slice = *maybeBattleBounty.(*[]*BattleBounty)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleBountyR{}
		}
		args = append(args, object.BattleLobbyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleBountyR{}
			}

			for _, a := range args {
				if a == obj.BattleLobbyID {
					continue Outer
				}
			}

			args = append(args, obj.BattleLobbyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_lobbies`),
		qm.WhereIn(`battle_lobbies.id in ?`, args...),
		qmhelper.WhereIsNull(`battle_lobbies.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BattleLobby")
	}

	var resultSlice []*BattleLobby
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BattleLobby")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battle_lobbies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_lobbies")
	}

	if len(battleBountyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BattleLobby = foreign
		if foreign.R == nil {
			foreign.R = &battleLobbyR{}
		}
		foreign.R.BattleBounties = append(foreign.R.BattleBounties, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BattleLobbyID == foreign.ID {
				local.R.BattleLobby = foreign
				if foreign.R == nil {
					foreign.R = &battleLobbyR{}
				}
				foreign.R.BattleBounties = append(foreign.R.BattleBounties, local)
				break
			}
		}
	}

	return nil
}

// LoadOfferedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleBountyL) LoadOfferedBy(e boil.Executor, singular bool, maybeBattleBounty interface{}, mods queries.Applicator) error {
	var slice []*BattleBounty
	var object *BattleBounty

	if singular {
		object = maybeBattleBounty.(*BattleBounty)
	} else {
		slice = *maybeBattleBounty.(*[]*BattleBounty)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleBountyR{}
		}
		args = append(args, object.OfferedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleBountyR{}
			}

			for _, a := range args {
				if a == obj.OfferedByID {
					continue Outer
				}
			}

			args = append(args, obj.OfferedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(battleBountyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OfferedBy = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.OfferedByBattleBounties = append(foreign.R.OfferedByBattleBounties, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OfferedByID == foreign.ID {
				local.R.OfferedBy = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.OfferedByBattleBounties = append(foreign.R.OfferedByBattleBounties, local)
				break
			}
		}
	}

	return nil
}

// LoadTargetedMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleBountyL) LoadTargetedMech(e boil.Executor, singular bool, maybeBattleBounty interface{}, mods queries.Applicator) error {
	var slice []*BattleBounty
	var object *BattleBounty

	if singular {
		object = maybeBattleBounty.(*BattleBounty)
	} else {
		slice = *maybeBattleBounty.(*[]*BattleBounty)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleBountyR{}
		}
		args = append(args, object.TargetedMechID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleBountyR{}
			}

			for _, a := range args {
				if a == obj.TargetedMechID {
					continue Outer
				}
			}

			args = append(args, obj.TargetedMechID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(battleBountyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TargetedMech = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.TargetedMechBattleBounties = append(foreign.R.TargetedMechBattleBounties, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TargetedMechID == foreign.ID {
				local.R.TargetedMech = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.TargetedMechBattleBounties = append(foreign.R.TargetedMechBattleBounties, local)
				break
			}
		}
	}

	return nil
}

// SetBattleLobby of the battleBounty to the related item.
// Sets o.R.BattleLobby to related.
// Adds o to related.R.BattleBounties.
func (o *BattleBounty) SetBattleLobby(exec boil.Executor, insert bool, related *BattleLobby) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_bounties\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"battle_lobby_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleBountyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BattleLobbyID = related.ID
	if o.R == nil {
		o.R = &battleBountyR{
			BattleLobby: related,
		}
	} else {
		o.R.BattleLobby = related
	}

	if related.R == nil {
		related.R = &battleLobbyR{
			BattleBounties: BattleBountySlice{o},
		}
	} else {
		related.R.BattleBounties = append(related.R.BattleBounties, o)
	}

	return nil
}

// SetOfferedBy of the battleBounty to the related item.
// Sets o.R.OfferedBy to related.
// Adds o to related.R.OfferedByBattleBounties.
func (o *BattleBounty) SetOfferedBy(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_bounties\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"offered_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleBountyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OfferedByID = related.ID
	if o.R == nil {
		o.R = &battleBountyR{
			OfferedBy: related,
		}
	} else {
		o.R.OfferedBy = related
	}

	if related.R == nil {
		related.R = &playerR{
			OfferedByBattleBounties: BattleBountySlice{o},
		}
	} else {
		related.R.OfferedByBattleBounties = append(related.R.OfferedByBattleBounties, o)
	}

	return nil
}

// SetTargetedMech of the battleBounty to the related item.
// Sets o.R.TargetedMech to related.
// Adds o to related.R.TargetedMechBattleBounties.
func (o *BattleBounty) SetTargetedMech(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_bounties\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"targeted_mech_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleBountyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TargetedMechID = related.ID
	if o.R == nil {
		o.R = &battleBountyR{
			TargetedMech: related,
		}
	} else {
		o.R.TargetedMech = related
	}

	if related.R == nil {
		related.R = &mechR{
			TargetedMechBattleBounties: BattleBountySlice{o},
		}
	} else {
		related.R.TargetedMechBattleBounties = append(related.R.TargetedMechBattleBounties, o)
	}

	return nil
}

// BattleBounties retrieves all the records using an executor.
func BattleBounties(mods ...qm.QueryMod) battleBountyQuery {
	mods = append(mods, qm.From("\"battle_bounties\""), qmhelper.WhereIsNull("\"battle_bounties\".\"deleted_at\""))
	return battleBountyQuery{NewQuery(mods...)}
}

// FindBattleBounty retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattleBounty(exec boil.Executor, iD string, selectCols ...string) (*BattleBounty, error) {
	battleBountyObj := &BattleBounty{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battle_bounties\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, battleBountyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from battle_bounties")
	}

	if err = battleBountyObj.doAfterSelectHooks(exec); err != nil {
		return battleBountyObj, err
	}

	return battleBountyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BattleBounty) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_bounties provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleBountyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battleBountyInsertCacheMut.RLock()
	cache, cached := battleBountyInsertCache[key]
	battleBountyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battleBountyAllColumns,
			battleBountyColumnsWithDefault,
			battleBountyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battleBountyType, battleBountyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battleBountyType, battleBountyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battle_bounties\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battle_bounties\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into battle_bounties")
	}

	if !cached {
		battleBountyInsertCacheMut.Lock()
		battleBountyInsertCache[key] = cache
		battleBountyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BattleBounty.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BattleBounty) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battleBountyUpdateCacheMut.RLock()
	cache, cached := battleBountyUpdateCache[key]
	battleBountyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battleBountyAllColumns,
			battleBountyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update battle_bounties, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battle_bounties\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battleBountyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battleBountyType, battleBountyMapping, append(wl, battleBountyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update battle_bounties row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for battle_bounties")
	}

	if !cached {
		battleBountyUpdateCacheMut.Lock()
		battleBountyUpdateCache[key] = cache
		battleBountyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battleBountyQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for battle_bounties")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for battle_bounties")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattleBountySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleBountyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battle_bounties\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battleBountyPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in battleBounty slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all battleBounty")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BattleBounty) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_bounties provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleBountyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battleBountyUpsertCacheMut.RLock()
	cache, cached := battleBountyUpsertCache[key]
	battleBountyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battleBountyAllColumns,
			battleBountyColumnsWithDefault,
			battleBountyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			battleBountyAllColumns,
			battleBountyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert battle_bounties, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battleBountyPrimaryKeyColumns))
			copy(conflict, battleBountyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battle_bounties\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battleBountyType, battleBountyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battleBountyType, battleBountyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert battle_bounties")
	}

	if !cached {
		battleBountyUpsertCacheMut.Lock()
		battleBountyUpsertCache[key] = cache
		battleBountyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BattleBounty record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BattleBounty) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BattleBounty provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battleBountyPrimaryKeyMapping)
		sql = "DELETE FROM \"battle_bounties\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"battle_bounties\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(battleBountyType, battleBountyMapping, append(wl, battleBountyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from battle_bounties")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for battle_bounties")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battleBountyQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no battleBountyQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battle_bounties")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_bounties")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattleBountySlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(battleBountyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleBountyPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"battle_bounties\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleBountyPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleBountyPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"battle_bounties\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, battleBountyPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battleBounty slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_bounties")
	}

	if len(battleBountyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BattleBounty) Reload(exec boil.Executor) error {
	ret, err := FindBattleBounty(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattleBountySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattleBountySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleBountyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battle_bounties\".* FROM \"battle_bounties\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleBountyPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BattleBountySlice")
	}

	*o = slice

	return nil
}

// BattleBountyExists checks if the BattleBounty row exists.
func BattleBountyExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battle_bounties\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if battle_bounties exists")
	}

	return exists, nil
}
