// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BattleLobbiesBounty is an object representing the database table.
type BattleLobbiesBounty struct {
	BattleLobbyID string          `boiler:"battle_lobby_id" boil:"battle_lobby_id" json:"battle_lobby_id" toml:"battle_lobby_id" yaml:"battle_lobby_id"`
	OfferedByID   string          `boiler:"offered_by_id" boil:"offered_by_id" json:"offered_by_id" toml:"offered_by_id" yaml:"offered_by_id"`
	TargetMechID  string          `boiler:"target_mech_id" boil:"target_mech_id" json:"target_mech_id" toml:"target_mech_id" yaml:"target_mech_id"`
	Amount        decimal.Decimal `boiler:"amount" boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	PaidTXID      null.String     `boiler:"paid_tx_id" boil:"paid_tx_id" json:"paid_tx_id,omitempty" toml:"paid_tx_id" yaml:"paid_tx_id,omitempty"`
	CreatedAt     time.Time       `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time       `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt     null.Time       `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *battleLobbiesBountyR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L battleLobbiesBountyL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattleLobbiesBountyColumns = struct {
	BattleLobbyID string
	OfferedByID   string
	TargetMechID  string
	Amount        string
	PaidTXID      string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	BattleLobbyID: "battle_lobby_id",
	OfferedByID:   "offered_by_id",
	TargetMechID:  "target_mech_id",
	Amount:        "amount",
	PaidTXID:      "paid_tx_id",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	DeletedAt:     "deleted_at",
}

var BattleLobbiesBountyTableColumns = struct {
	BattleLobbyID string
	OfferedByID   string
	TargetMechID  string
	Amount        string
	PaidTXID      string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	BattleLobbyID: "battle_lobbies_bounties.battle_lobby_id",
	OfferedByID:   "battle_lobbies_bounties.offered_by_id",
	TargetMechID:  "battle_lobbies_bounties.target_mech_id",
	Amount:        "battle_lobbies_bounties.amount",
	PaidTXID:      "battle_lobbies_bounties.paid_tx_id",
	CreatedAt:     "battle_lobbies_bounties.created_at",
	UpdatedAt:     "battle_lobbies_bounties.updated_at",
	DeletedAt:     "battle_lobbies_bounties.deleted_at",
}

// Generated where

var BattleLobbiesBountyWhere = struct {
	BattleLobbyID whereHelperstring
	OfferedByID   whereHelperstring
	TargetMechID  whereHelperstring
	Amount        whereHelperdecimal_Decimal
	PaidTXID      whereHelpernull_String
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	DeletedAt     whereHelpernull_Time
}{
	BattleLobbyID: whereHelperstring{field: "\"battle_lobbies_bounties\".\"battle_lobby_id\""},
	OfferedByID:   whereHelperstring{field: "\"battle_lobbies_bounties\".\"offered_by_id\""},
	TargetMechID:  whereHelperstring{field: "\"battle_lobbies_bounties\".\"target_mech_id\""},
	Amount:        whereHelperdecimal_Decimal{field: "\"battle_lobbies_bounties\".\"amount\""},
	PaidTXID:      whereHelpernull_String{field: "\"battle_lobbies_bounties\".\"paid_tx_id\""},
	CreatedAt:     whereHelpertime_Time{field: "\"battle_lobbies_bounties\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"battle_lobbies_bounties\".\"updated_at\""},
	DeletedAt:     whereHelpernull_Time{field: "\"battle_lobbies_bounties\".\"deleted_at\""},
}

// BattleLobbiesBountyRels is where relationship names are stored.
var BattleLobbiesBountyRels = struct {
	BattleLobby string
	OfferedBy   string
	TargetMech  string
}{
	BattleLobby: "BattleLobby",
	OfferedBy:   "OfferedBy",
	TargetMech:  "TargetMech",
}

// battleLobbiesBountyR is where relationships are stored.
type battleLobbiesBountyR struct {
	BattleLobby *BattleLobby `boiler:"BattleLobby" boil:"BattleLobby" json:"BattleLobby" toml:"BattleLobby" yaml:"BattleLobby"`
	OfferedBy   *Player      `boiler:"OfferedBy" boil:"OfferedBy" json:"OfferedBy" toml:"OfferedBy" yaml:"OfferedBy"`
	TargetMech  *Mech        `boiler:"TargetMech" boil:"TargetMech" json:"TargetMech" toml:"TargetMech" yaml:"TargetMech"`
}

// NewStruct creates a new relationship struct
func (*battleLobbiesBountyR) NewStruct() *battleLobbiesBountyR {
	return &battleLobbiesBountyR{}
}

// battleLobbiesBountyL is where Load methods for each relationship are stored.
type battleLobbiesBountyL struct{}

var (
	battleLobbiesBountyAllColumns            = []string{"battle_lobby_id", "offered_by_id", "target_mech_id", "amount", "paid_tx_id", "created_at", "updated_at", "deleted_at"}
	battleLobbiesBountyColumnsWithoutDefault = []string{"battle_lobby_id", "offered_by_id", "target_mech_id"}
	battleLobbiesBountyColumnsWithDefault    = []string{"amount", "paid_tx_id", "created_at", "updated_at", "deleted_at"}
	battleLobbiesBountyPrimaryKeyColumns     = []string{"battle_lobby_id", "offered_by_id", "target_mech_id"}
	battleLobbiesBountyGeneratedColumns      = []string{}
)

type (
	// BattleLobbiesBountySlice is an alias for a slice of pointers to BattleLobbiesBounty.
	// This should almost always be used instead of []BattleLobbiesBounty.
	BattleLobbiesBountySlice []*BattleLobbiesBounty
	// BattleLobbiesBountyHook is the signature for custom BattleLobbiesBounty hook methods
	BattleLobbiesBountyHook func(boil.Executor, *BattleLobbiesBounty) error

	battleLobbiesBountyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battleLobbiesBountyType                 = reflect.TypeOf(&BattleLobbiesBounty{})
	battleLobbiesBountyMapping              = queries.MakeStructMapping(battleLobbiesBountyType)
	battleLobbiesBountyPrimaryKeyMapping, _ = queries.BindMapping(battleLobbiesBountyType, battleLobbiesBountyMapping, battleLobbiesBountyPrimaryKeyColumns)
	battleLobbiesBountyInsertCacheMut       sync.RWMutex
	battleLobbiesBountyInsertCache          = make(map[string]insertCache)
	battleLobbiesBountyUpdateCacheMut       sync.RWMutex
	battleLobbiesBountyUpdateCache          = make(map[string]updateCache)
	battleLobbiesBountyUpsertCacheMut       sync.RWMutex
	battleLobbiesBountyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battleLobbiesBountyAfterSelectHooks []BattleLobbiesBountyHook

var battleLobbiesBountyBeforeInsertHooks []BattleLobbiesBountyHook
var battleLobbiesBountyAfterInsertHooks []BattleLobbiesBountyHook

var battleLobbiesBountyBeforeUpdateHooks []BattleLobbiesBountyHook
var battleLobbiesBountyAfterUpdateHooks []BattleLobbiesBountyHook

var battleLobbiesBountyBeforeDeleteHooks []BattleLobbiesBountyHook
var battleLobbiesBountyAfterDeleteHooks []BattleLobbiesBountyHook

var battleLobbiesBountyBeforeUpsertHooks []BattleLobbiesBountyHook
var battleLobbiesBountyAfterUpsertHooks []BattleLobbiesBountyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BattleLobbiesBounty) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbiesBountyAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BattleLobbiesBounty) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbiesBountyBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BattleLobbiesBounty) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbiesBountyAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BattleLobbiesBounty) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbiesBountyBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BattleLobbiesBounty) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbiesBountyAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BattleLobbiesBounty) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbiesBountyBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BattleLobbiesBounty) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbiesBountyAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BattleLobbiesBounty) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbiesBountyBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BattleLobbiesBounty) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbiesBountyAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattleLobbiesBountyHook registers your hook function for all future operations.
func AddBattleLobbiesBountyHook(hookPoint boil.HookPoint, battleLobbiesBountyHook BattleLobbiesBountyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		battleLobbiesBountyAfterSelectHooks = append(battleLobbiesBountyAfterSelectHooks, battleLobbiesBountyHook)
	case boil.BeforeInsertHook:
		battleLobbiesBountyBeforeInsertHooks = append(battleLobbiesBountyBeforeInsertHooks, battleLobbiesBountyHook)
	case boil.AfterInsertHook:
		battleLobbiesBountyAfterInsertHooks = append(battleLobbiesBountyAfterInsertHooks, battleLobbiesBountyHook)
	case boil.BeforeUpdateHook:
		battleLobbiesBountyBeforeUpdateHooks = append(battleLobbiesBountyBeforeUpdateHooks, battleLobbiesBountyHook)
	case boil.AfterUpdateHook:
		battleLobbiesBountyAfterUpdateHooks = append(battleLobbiesBountyAfterUpdateHooks, battleLobbiesBountyHook)
	case boil.BeforeDeleteHook:
		battleLobbiesBountyBeforeDeleteHooks = append(battleLobbiesBountyBeforeDeleteHooks, battleLobbiesBountyHook)
	case boil.AfterDeleteHook:
		battleLobbiesBountyAfterDeleteHooks = append(battleLobbiesBountyAfterDeleteHooks, battleLobbiesBountyHook)
	case boil.BeforeUpsertHook:
		battleLobbiesBountyBeforeUpsertHooks = append(battleLobbiesBountyBeforeUpsertHooks, battleLobbiesBountyHook)
	case boil.AfterUpsertHook:
		battleLobbiesBountyAfterUpsertHooks = append(battleLobbiesBountyAfterUpsertHooks, battleLobbiesBountyHook)
	}
}

// One returns a single battleLobbiesBounty record from the query.
func (q battleLobbiesBountyQuery) One(exec boil.Executor) (*BattleLobbiesBounty, error) {
	o := &BattleLobbiesBounty{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for battle_lobbies_bounties")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BattleLobbiesBounty records from the query.
func (q battleLobbiesBountyQuery) All(exec boil.Executor) (BattleLobbiesBountySlice, error) {
	var o []*BattleLobbiesBounty

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BattleLobbiesBounty slice")
	}

	if len(battleLobbiesBountyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BattleLobbiesBounty records in the query.
func (q battleLobbiesBountyQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count battle_lobbies_bounties rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battleLobbiesBountyQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if battle_lobbies_bounties exists")
	}

	return count > 0, nil
}

// BattleLobby pointed to by the foreign key.
func (o *BattleLobbiesBounty) BattleLobby(mods ...qm.QueryMod) battleLobbyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BattleLobbyID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := BattleLobbies(queryMods...)
	queries.SetFrom(query.Query, "\"battle_lobbies\"")

	return query
}

// OfferedBy pointed to by the foreign key.
func (o *BattleLobbiesBounty) OfferedBy(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OfferedByID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// TargetMech pointed to by the foreign key.
func (o *BattleLobbiesBounty) TargetMech(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TargetMechID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// LoadBattleLobby allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleLobbiesBountyL) LoadBattleLobby(e boil.Executor, singular bool, maybeBattleLobbiesBounty interface{}, mods queries.Applicator) error {
	var slice []*BattleLobbiesBounty
	var object *BattleLobbiesBounty

	if singular {
		object = maybeBattleLobbiesBounty.(*BattleLobbiesBounty)
	} else {
		slice = *maybeBattleLobbiesBounty.(*[]*BattleLobbiesBounty)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleLobbiesBountyR{}
		}
		args = append(args, object.BattleLobbyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleLobbiesBountyR{}
			}

			for _, a := range args {
				if a == obj.BattleLobbyID {
					continue Outer
				}
			}

			args = append(args, obj.BattleLobbyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_lobbies`),
		qm.WhereIn(`battle_lobbies.id in ?`, args...),
		qmhelper.WhereIsNull(`battle_lobbies.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BattleLobby")
	}

	var resultSlice []*BattleLobby
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BattleLobby")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battle_lobbies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_lobbies")
	}

	if len(battleLobbiesBountyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BattleLobby = foreign
		if foreign.R == nil {
			foreign.R = &battleLobbyR{}
		}
		foreign.R.BattleLobbiesBounties = append(foreign.R.BattleLobbiesBounties, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BattleLobbyID == foreign.ID {
				local.R.BattleLobby = foreign
				if foreign.R == nil {
					foreign.R = &battleLobbyR{}
				}
				foreign.R.BattleLobbiesBounties = append(foreign.R.BattleLobbiesBounties, local)
				break
			}
		}
	}

	return nil
}

// LoadOfferedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleLobbiesBountyL) LoadOfferedBy(e boil.Executor, singular bool, maybeBattleLobbiesBounty interface{}, mods queries.Applicator) error {
	var slice []*BattleLobbiesBounty
	var object *BattleLobbiesBounty

	if singular {
		object = maybeBattleLobbiesBounty.(*BattleLobbiesBounty)
	} else {
		slice = *maybeBattleLobbiesBounty.(*[]*BattleLobbiesBounty)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleLobbiesBountyR{}
		}
		args = append(args, object.OfferedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleLobbiesBountyR{}
			}

			for _, a := range args {
				if a == obj.OfferedByID {
					continue Outer
				}
			}

			args = append(args, obj.OfferedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(battleLobbiesBountyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OfferedBy = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.OfferedByBattleLobbiesBounties = append(foreign.R.OfferedByBattleLobbiesBounties, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OfferedByID == foreign.ID {
				local.R.OfferedBy = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.OfferedByBattleLobbiesBounties = append(foreign.R.OfferedByBattleLobbiesBounties, local)
				break
			}
		}
	}

	return nil
}

// LoadTargetMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleLobbiesBountyL) LoadTargetMech(e boil.Executor, singular bool, maybeBattleLobbiesBounty interface{}, mods queries.Applicator) error {
	var slice []*BattleLobbiesBounty
	var object *BattleLobbiesBounty

	if singular {
		object = maybeBattleLobbiesBounty.(*BattleLobbiesBounty)
	} else {
		slice = *maybeBattleLobbiesBounty.(*[]*BattleLobbiesBounty)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleLobbiesBountyR{}
		}
		args = append(args, object.TargetMechID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleLobbiesBountyR{}
			}

			for _, a := range args {
				if a == obj.TargetMechID {
					continue Outer
				}
			}

			args = append(args, obj.TargetMechID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(battleLobbiesBountyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TargetMech = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.TargetMechBattleLobbiesBounties = append(foreign.R.TargetMechBattleLobbiesBounties, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TargetMechID == foreign.ID {
				local.R.TargetMech = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.TargetMechBattleLobbiesBounties = append(foreign.R.TargetMechBattleLobbiesBounties, local)
				break
			}
		}
	}

	return nil
}

// SetBattleLobby of the battleLobbiesBounty to the related item.
// Sets o.R.BattleLobby to related.
// Adds o to related.R.BattleLobbiesBounties.
func (o *BattleLobbiesBounty) SetBattleLobby(exec boil.Executor, insert bool, related *BattleLobby) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_lobbies_bounties\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"battle_lobby_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleLobbiesBountyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.BattleLobbyID, o.OfferedByID, o.TargetMechID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BattleLobbyID = related.ID
	if o.R == nil {
		o.R = &battleLobbiesBountyR{
			BattleLobby: related,
		}
	} else {
		o.R.BattleLobby = related
	}

	if related.R == nil {
		related.R = &battleLobbyR{
			BattleLobbiesBounties: BattleLobbiesBountySlice{o},
		}
	} else {
		related.R.BattleLobbiesBounties = append(related.R.BattleLobbiesBounties, o)
	}

	return nil
}

// SetOfferedBy of the battleLobbiesBounty to the related item.
// Sets o.R.OfferedBy to related.
// Adds o to related.R.OfferedByBattleLobbiesBounties.
func (o *BattleLobbiesBounty) SetOfferedBy(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_lobbies_bounties\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"offered_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleLobbiesBountyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.BattleLobbyID, o.OfferedByID, o.TargetMechID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OfferedByID = related.ID
	if o.R == nil {
		o.R = &battleLobbiesBountyR{
			OfferedBy: related,
		}
	} else {
		o.R.OfferedBy = related
	}

	if related.R == nil {
		related.R = &playerR{
			OfferedByBattleLobbiesBounties: BattleLobbiesBountySlice{o},
		}
	} else {
		related.R.OfferedByBattleLobbiesBounties = append(related.R.OfferedByBattleLobbiesBounties, o)
	}

	return nil
}

// SetTargetMech of the battleLobbiesBounty to the related item.
// Sets o.R.TargetMech to related.
// Adds o to related.R.TargetMechBattleLobbiesBounties.
func (o *BattleLobbiesBounty) SetTargetMech(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_lobbies_bounties\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"target_mech_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleLobbiesBountyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.BattleLobbyID, o.OfferedByID, o.TargetMechID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TargetMechID = related.ID
	if o.R == nil {
		o.R = &battleLobbiesBountyR{
			TargetMech: related,
		}
	} else {
		o.R.TargetMech = related
	}

	if related.R == nil {
		related.R = &mechR{
			TargetMechBattleLobbiesBounties: BattleLobbiesBountySlice{o},
		}
	} else {
		related.R.TargetMechBattleLobbiesBounties = append(related.R.TargetMechBattleLobbiesBounties, o)
	}

	return nil
}

// BattleLobbiesBounties retrieves all the records using an executor.
func BattleLobbiesBounties(mods ...qm.QueryMod) battleLobbiesBountyQuery {
	mods = append(mods, qm.From("\"battle_lobbies_bounties\""), qmhelper.WhereIsNull("\"battle_lobbies_bounties\".\"deleted_at\""))
	return battleLobbiesBountyQuery{NewQuery(mods...)}
}

// FindBattleLobbiesBounty retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattleLobbiesBounty(exec boil.Executor, battleLobbyID string, offeredByID string, targetMechID string, selectCols ...string) (*BattleLobbiesBounty, error) {
	battleLobbiesBountyObj := &BattleLobbiesBounty{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battle_lobbies_bounties\" where \"battle_lobby_id\"=$1 AND \"offered_by_id\"=$2 AND \"target_mech_id\"=$3 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, battleLobbyID, offeredByID, targetMechID)

	err := q.Bind(nil, exec, battleLobbiesBountyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from battle_lobbies_bounties")
	}

	if err = battleLobbiesBountyObj.doAfterSelectHooks(exec); err != nil {
		return battleLobbiesBountyObj, err
	}

	return battleLobbiesBountyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BattleLobbiesBounty) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_lobbies_bounties provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleLobbiesBountyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battleLobbiesBountyInsertCacheMut.RLock()
	cache, cached := battleLobbiesBountyInsertCache[key]
	battleLobbiesBountyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battleLobbiesBountyAllColumns,
			battleLobbiesBountyColumnsWithDefault,
			battleLobbiesBountyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battleLobbiesBountyType, battleLobbiesBountyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battleLobbiesBountyType, battleLobbiesBountyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battle_lobbies_bounties\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battle_lobbies_bounties\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into battle_lobbies_bounties")
	}

	if !cached {
		battleLobbiesBountyInsertCacheMut.Lock()
		battleLobbiesBountyInsertCache[key] = cache
		battleLobbiesBountyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BattleLobbiesBounty.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BattleLobbiesBounty) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battleLobbiesBountyUpdateCacheMut.RLock()
	cache, cached := battleLobbiesBountyUpdateCache[key]
	battleLobbiesBountyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battleLobbiesBountyAllColumns,
			battleLobbiesBountyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update battle_lobbies_bounties, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battle_lobbies_bounties\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battleLobbiesBountyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battleLobbiesBountyType, battleLobbiesBountyMapping, append(wl, battleLobbiesBountyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update battle_lobbies_bounties row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for battle_lobbies_bounties")
	}

	if !cached {
		battleLobbiesBountyUpdateCacheMut.Lock()
		battleLobbiesBountyUpdateCache[key] = cache
		battleLobbiesBountyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battleLobbiesBountyQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for battle_lobbies_bounties")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for battle_lobbies_bounties")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattleLobbiesBountySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleLobbiesBountyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battle_lobbies_bounties\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battleLobbiesBountyPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in battleLobbiesBounty slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all battleLobbiesBounty")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BattleLobbiesBounty) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_lobbies_bounties provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleLobbiesBountyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battleLobbiesBountyUpsertCacheMut.RLock()
	cache, cached := battleLobbiesBountyUpsertCache[key]
	battleLobbiesBountyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battleLobbiesBountyAllColumns,
			battleLobbiesBountyColumnsWithDefault,
			battleLobbiesBountyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			battleLobbiesBountyAllColumns,
			battleLobbiesBountyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert battle_lobbies_bounties, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battleLobbiesBountyPrimaryKeyColumns))
			copy(conflict, battleLobbiesBountyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battle_lobbies_bounties\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battleLobbiesBountyType, battleLobbiesBountyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battleLobbiesBountyType, battleLobbiesBountyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert battle_lobbies_bounties")
	}

	if !cached {
		battleLobbiesBountyUpsertCacheMut.Lock()
		battleLobbiesBountyUpsertCache[key] = cache
		battleLobbiesBountyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BattleLobbiesBounty record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BattleLobbiesBounty) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BattleLobbiesBounty provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battleLobbiesBountyPrimaryKeyMapping)
		sql = "DELETE FROM \"battle_lobbies_bounties\" WHERE \"battle_lobby_id\"=$1 AND \"offered_by_id\"=$2 AND \"target_mech_id\"=$3"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"battle_lobbies_bounties\" SET %s WHERE \"battle_lobby_id\"=$2 AND \"offered_by_id\"=$3 AND \"target_mech_id\"=$4",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(battleLobbiesBountyType, battleLobbiesBountyMapping, append(wl, battleLobbiesBountyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from battle_lobbies_bounties")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for battle_lobbies_bounties")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battleLobbiesBountyQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no battleLobbiesBountyQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battle_lobbies_bounties")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_lobbies_bounties")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattleLobbiesBountySlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(battleLobbiesBountyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleLobbiesBountyPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"battle_lobbies_bounties\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleLobbiesBountyPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleLobbiesBountyPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"battle_lobbies_bounties\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, battleLobbiesBountyPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battleLobbiesBounty slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_lobbies_bounties")
	}

	if len(battleLobbiesBountyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BattleLobbiesBounty) Reload(exec boil.Executor) error {
	ret, err := FindBattleLobbiesBounty(exec, o.BattleLobbyID, o.OfferedByID, o.TargetMechID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattleLobbiesBountySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattleLobbiesBountySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleLobbiesBountyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battle_lobbies_bounties\".* FROM \"battle_lobbies_bounties\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleLobbiesBountyPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BattleLobbiesBountySlice")
	}

	*o = slice

	return nil
}

// BattleLobbiesBountyExists checks if the BattleLobbiesBounty row exists.
func BattleLobbiesBountyExists(exec boil.Executor, battleLobbyID string, offeredByID string, targetMechID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battle_lobbies_bounties\" where \"battle_lobby_id\"=$1 AND \"offered_by_id\"=$2 AND \"target_mech_id\"=$3 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, battleLobbyID, offeredByID, targetMechID)
	}
	row := exec.QueryRow(sql, battleLobbyID, offeredByID, targetMechID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if battle_lobbies_bounties exists")
	}

	return exists, nil
}
