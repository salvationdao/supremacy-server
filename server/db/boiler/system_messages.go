// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SystemMessage is an object representing the database table.
type SystemMessage struct {
	ID       string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	PlayerID string      `boiler:"player_id" boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	Message  string      `boiler:"message" boil:"message" json:"message" toml:"message" yaml:"message"`
	Data     null.JSON   `boiler:"data" boil:"data" json:"data,omitempty" toml:"data" yaml:"data,omitempty"`
	SentAt   time.Time   `boiler:"sent_at" boil:"sent_at" json:"sent_at" toml:"sent_at" yaml:"sent_at"`
	Title    string      `boiler:"title" boil:"title" json:"title" toml:"title" yaml:"title"`
	DataType null.String `boiler:"data_type" boil:"data_type" json:"data_type,omitempty" toml:"data_type" yaml:"data_type,omitempty"`
	ReadAt   null.Time   `boiler:"read_at" boil:"read_at" json:"read_at,omitempty" toml:"read_at" yaml:"read_at,omitempty"`

	R *systemMessageR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L systemMessageL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SystemMessageColumns = struct {
	ID       string
	PlayerID string
	Message  string
	Data     string
	SentAt   string
	Title    string
	DataType string
	ReadAt   string
}{
	ID:       "id",
	PlayerID: "player_id",
	Message:  "message",
	Data:     "data",
	SentAt:   "sent_at",
	Title:    "title",
	DataType: "data_type",
	ReadAt:   "read_at",
}

var SystemMessageTableColumns = struct {
	ID       string
	PlayerID string
	Message  string
	Data     string
	SentAt   string
	Title    string
	DataType string
	ReadAt   string
}{
	ID:       "system_messages.id",
	PlayerID: "system_messages.player_id",
	Message:  "system_messages.message",
	Data:     "system_messages.data",
	SentAt:   "system_messages.sent_at",
	Title:    "system_messages.title",
	DataType: "system_messages.data_type",
	ReadAt:   "system_messages.read_at",
}

// Generated where

var SystemMessageWhere = struct {
	ID       whereHelperstring
	PlayerID whereHelperstring
	Message  whereHelperstring
	Data     whereHelpernull_JSON
	SentAt   whereHelpertime_Time
	Title    whereHelperstring
	DataType whereHelpernull_String
	ReadAt   whereHelpernull_Time
}{
	ID:       whereHelperstring{field: "\"system_messages\".\"id\""},
	PlayerID: whereHelperstring{field: "\"system_messages\".\"player_id\""},
	Message:  whereHelperstring{field: "\"system_messages\".\"message\""},
	Data:     whereHelpernull_JSON{field: "\"system_messages\".\"data\""},
	SentAt:   whereHelpertime_Time{field: "\"system_messages\".\"sent_at\""},
	Title:    whereHelperstring{field: "\"system_messages\".\"title\""},
	DataType: whereHelpernull_String{field: "\"system_messages\".\"data_type\""},
	ReadAt:   whereHelpernull_Time{field: "\"system_messages\".\"read_at\""},
}

// SystemMessageRels is where relationship names are stored.
var SystemMessageRels = struct {
	Player string
}{
	Player: "Player",
}

// systemMessageR is where relationships are stored.
type systemMessageR struct {
	Player *Player `boiler:"Player" boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
}

// NewStruct creates a new relationship struct
func (*systemMessageR) NewStruct() *systemMessageR {
	return &systemMessageR{}
}

// systemMessageL is where Load methods for each relationship are stored.
type systemMessageL struct{}

var (
	systemMessageAllColumns            = []string{"id", "player_id", "message", "data", "sent_at", "title", "data_type", "read_at"}
	systemMessageColumnsWithoutDefault = []string{"player_id", "message", "title"}
	systemMessageColumnsWithDefault    = []string{"id", "data", "sent_at", "data_type", "read_at"}
	systemMessagePrimaryKeyColumns     = []string{"id"}
	systemMessageGeneratedColumns      = []string{}
)

type (
	// SystemMessageSlice is an alias for a slice of pointers to SystemMessage.
	// This should almost always be used instead of []SystemMessage.
	SystemMessageSlice []*SystemMessage
	// SystemMessageHook is the signature for custom SystemMessage hook methods
	SystemMessageHook func(boil.Executor, *SystemMessage) error

	systemMessageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	systemMessageType                 = reflect.TypeOf(&SystemMessage{})
	systemMessageMapping              = queries.MakeStructMapping(systemMessageType)
	systemMessagePrimaryKeyMapping, _ = queries.BindMapping(systemMessageType, systemMessageMapping, systemMessagePrimaryKeyColumns)
	systemMessageInsertCacheMut       sync.RWMutex
	systemMessageInsertCache          = make(map[string]insertCache)
	systemMessageUpdateCacheMut       sync.RWMutex
	systemMessageUpdateCache          = make(map[string]updateCache)
	systemMessageUpsertCacheMut       sync.RWMutex
	systemMessageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var systemMessageAfterSelectHooks []SystemMessageHook

var systemMessageBeforeInsertHooks []SystemMessageHook
var systemMessageAfterInsertHooks []SystemMessageHook

var systemMessageBeforeUpdateHooks []SystemMessageHook
var systemMessageAfterUpdateHooks []SystemMessageHook

var systemMessageBeforeDeleteHooks []SystemMessageHook
var systemMessageAfterDeleteHooks []SystemMessageHook

var systemMessageBeforeUpsertHooks []SystemMessageHook
var systemMessageAfterUpsertHooks []SystemMessageHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SystemMessage) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range systemMessageAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SystemMessage) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range systemMessageBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SystemMessage) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range systemMessageAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SystemMessage) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range systemMessageBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SystemMessage) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range systemMessageAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SystemMessage) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range systemMessageBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SystemMessage) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range systemMessageAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SystemMessage) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range systemMessageBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SystemMessage) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range systemMessageAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSystemMessageHook registers your hook function for all future operations.
func AddSystemMessageHook(hookPoint boil.HookPoint, systemMessageHook SystemMessageHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		systemMessageAfterSelectHooks = append(systemMessageAfterSelectHooks, systemMessageHook)
	case boil.BeforeInsertHook:
		systemMessageBeforeInsertHooks = append(systemMessageBeforeInsertHooks, systemMessageHook)
	case boil.AfterInsertHook:
		systemMessageAfterInsertHooks = append(systemMessageAfterInsertHooks, systemMessageHook)
	case boil.BeforeUpdateHook:
		systemMessageBeforeUpdateHooks = append(systemMessageBeforeUpdateHooks, systemMessageHook)
	case boil.AfterUpdateHook:
		systemMessageAfterUpdateHooks = append(systemMessageAfterUpdateHooks, systemMessageHook)
	case boil.BeforeDeleteHook:
		systemMessageBeforeDeleteHooks = append(systemMessageBeforeDeleteHooks, systemMessageHook)
	case boil.AfterDeleteHook:
		systemMessageAfterDeleteHooks = append(systemMessageAfterDeleteHooks, systemMessageHook)
	case boil.BeforeUpsertHook:
		systemMessageBeforeUpsertHooks = append(systemMessageBeforeUpsertHooks, systemMessageHook)
	case boil.AfterUpsertHook:
		systemMessageAfterUpsertHooks = append(systemMessageAfterUpsertHooks, systemMessageHook)
	}
}

// One returns a single systemMessage record from the query.
func (q systemMessageQuery) One(exec boil.Executor) (*SystemMessage, error) {
	o := &SystemMessage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for system_messages")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SystemMessage records from the query.
func (q systemMessageQuery) All(exec boil.Executor) (SystemMessageSlice, error) {
	var o []*SystemMessage

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to SystemMessage slice")
	}

	if len(systemMessageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SystemMessage records in the query.
func (q systemMessageQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count system_messages rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q systemMessageQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if system_messages exists")
	}

	return count > 0, nil
}

// Player pointed to by the foreign key.
func (o *SystemMessage) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (systemMessageL) LoadPlayer(e boil.Executor, singular bool, maybeSystemMessage interface{}, mods queries.Applicator) error {
	var slice []*SystemMessage
	var object *SystemMessage

	if singular {
		object = maybeSystemMessage.(*SystemMessage)
	} else {
		slice = *maybeSystemMessage.(*[]*SystemMessage)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &systemMessageR{}
		}
		args = append(args, object.PlayerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &systemMessageR{}
			}

			for _, a := range args {
				if a == obj.PlayerID {
					continue Outer
				}
			}

			args = append(args, obj.PlayerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(systemMessageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.SystemMessages = append(foreign.R.SystemMessages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.ID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.SystemMessages = append(foreign.R.SystemMessages, local)
				break
			}
		}
	}

	return nil
}

// SetPlayer of the systemMessage to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.SystemMessages.
func (o *SystemMessage) SetPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"system_messages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, systemMessagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.ID
	if o.R == nil {
		o.R = &systemMessageR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			SystemMessages: SystemMessageSlice{o},
		}
	} else {
		related.R.SystemMessages = append(related.R.SystemMessages, o)
	}

	return nil
}

// SystemMessages retrieves all the records using an executor.
func SystemMessages(mods ...qm.QueryMod) systemMessageQuery {
	mods = append(mods, qm.From("\"system_messages\""))
	return systemMessageQuery{NewQuery(mods...)}
}

// FindSystemMessage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSystemMessage(exec boil.Executor, iD string, selectCols ...string) (*SystemMessage, error) {
	systemMessageObj := &SystemMessage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"system_messages\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, systemMessageObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from system_messages")
	}

	if err = systemMessageObj.doAfterSelectHooks(exec); err != nil {
		return systemMessageObj, err
	}

	return systemMessageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SystemMessage) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no system_messages provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(systemMessageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	systemMessageInsertCacheMut.RLock()
	cache, cached := systemMessageInsertCache[key]
	systemMessageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			systemMessageAllColumns,
			systemMessageColumnsWithDefault,
			systemMessageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(systemMessageType, systemMessageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(systemMessageType, systemMessageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"system_messages\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"system_messages\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into system_messages")
	}

	if !cached {
		systemMessageInsertCacheMut.Lock()
		systemMessageInsertCache[key] = cache
		systemMessageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the SystemMessage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SystemMessage) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	systemMessageUpdateCacheMut.RLock()
	cache, cached := systemMessageUpdateCache[key]
	systemMessageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			systemMessageAllColumns,
			systemMessagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update system_messages, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"system_messages\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, systemMessagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(systemMessageType, systemMessageMapping, append(wl, systemMessagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update system_messages row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for system_messages")
	}

	if !cached {
		systemMessageUpdateCacheMut.Lock()
		systemMessageUpdateCache[key] = cache
		systemMessageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q systemMessageQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for system_messages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for system_messages")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SystemMessageSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), systemMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"system_messages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, systemMessagePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in systemMessage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all systemMessage")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SystemMessage) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no system_messages provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(systemMessageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	systemMessageUpsertCacheMut.RLock()
	cache, cached := systemMessageUpsertCache[key]
	systemMessageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			systemMessageAllColumns,
			systemMessageColumnsWithDefault,
			systemMessageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			systemMessageAllColumns,
			systemMessagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert system_messages, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(systemMessagePrimaryKeyColumns))
			copy(conflict, systemMessagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"system_messages\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(systemMessageType, systemMessageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(systemMessageType, systemMessageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert system_messages")
	}

	if !cached {
		systemMessageUpsertCacheMut.Lock()
		systemMessageUpsertCache[key] = cache
		systemMessageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single SystemMessage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SystemMessage) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no SystemMessage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), systemMessagePrimaryKeyMapping)
	sql := "DELETE FROM \"system_messages\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from system_messages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for system_messages")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q systemMessageQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no systemMessageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from system_messages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for system_messages")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SystemMessageSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(systemMessageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), systemMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"system_messages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, systemMessagePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from systemMessage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for system_messages")
	}

	if len(systemMessageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SystemMessage) Reload(exec boil.Executor) error {
	ret, err := FindSystemMessage(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SystemMessageSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SystemMessageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), systemMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"system_messages\".* FROM \"system_messages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, systemMessagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in SystemMessageSlice")
	}

	*o = slice

	return nil
}

// SystemMessageExists checks if the SystemMessage row exists.
func SystemMessageExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"system_messages\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if system_messages exists")
	}

	return exists, nil
}
