// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// StaticMigration is an object representing the database table.
type StaticMigration struct {
	Version int64 `boiler:"version" boil:"version" json:"version" toml:"version" yaml:"version"`
	Dirty   bool  `boiler:"dirty" boil:"dirty" json:"dirty" toml:"dirty" yaml:"dirty"`

	R *staticMigrationR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L staticMigrationL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StaticMigrationColumns = struct {
	Version string
	Dirty   string
}{
	Version: "version",
	Dirty:   "dirty",
}

var StaticMigrationTableColumns = struct {
	Version string
	Dirty   string
}{
	Version: "static_migrations.version",
	Dirty:   "static_migrations.dirty",
}

// Generated where

var StaticMigrationWhere = struct {
	Version whereHelperint64
	Dirty   whereHelperbool
}{
	Version: whereHelperint64{field: "\"static_migrations\".\"version\""},
	Dirty:   whereHelperbool{field: "\"static_migrations\".\"dirty\""},
}

// StaticMigrationRels is where relationship names are stored.
var StaticMigrationRels = struct {
}{}

// staticMigrationR is where relationships are stored.
type staticMigrationR struct {
}

// NewStruct creates a new relationship struct
func (*staticMigrationR) NewStruct() *staticMigrationR {
	return &staticMigrationR{}
}

// staticMigrationL is where Load methods for each relationship are stored.
type staticMigrationL struct{}

var (
	staticMigrationAllColumns            = []string{"version", "dirty"}
	staticMigrationColumnsWithoutDefault = []string{"version", "dirty"}
	staticMigrationColumnsWithDefault    = []string{}
	staticMigrationPrimaryKeyColumns     = []string{"version"}
	staticMigrationGeneratedColumns      = []string{}
)

type (
	// StaticMigrationSlice is an alias for a slice of pointers to StaticMigration.
	// This should almost always be used instead of []StaticMigration.
	StaticMigrationSlice []*StaticMigration
	// StaticMigrationHook is the signature for custom StaticMigration hook methods
	StaticMigrationHook func(boil.Executor, *StaticMigration) error

	staticMigrationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	staticMigrationType                 = reflect.TypeOf(&StaticMigration{})
	staticMigrationMapping              = queries.MakeStructMapping(staticMigrationType)
	staticMigrationPrimaryKeyMapping, _ = queries.BindMapping(staticMigrationType, staticMigrationMapping, staticMigrationPrimaryKeyColumns)
	staticMigrationInsertCacheMut       sync.RWMutex
	staticMigrationInsertCache          = make(map[string]insertCache)
	staticMigrationUpdateCacheMut       sync.RWMutex
	staticMigrationUpdateCache          = make(map[string]updateCache)
	staticMigrationUpsertCacheMut       sync.RWMutex
	staticMigrationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var staticMigrationAfterSelectHooks []StaticMigrationHook

var staticMigrationBeforeInsertHooks []StaticMigrationHook
var staticMigrationAfterInsertHooks []StaticMigrationHook

var staticMigrationBeforeUpdateHooks []StaticMigrationHook
var staticMigrationAfterUpdateHooks []StaticMigrationHook

var staticMigrationBeforeDeleteHooks []StaticMigrationHook
var staticMigrationAfterDeleteHooks []StaticMigrationHook

var staticMigrationBeforeUpsertHooks []StaticMigrationHook
var staticMigrationAfterUpsertHooks []StaticMigrationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StaticMigration) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range staticMigrationAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StaticMigration) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range staticMigrationBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StaticMigration) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range staticMigrationAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StaticMigration) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range staticMigrationBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StaticMigration) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range staticMigrationAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StaticMigration) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range staticMigrationBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StaticMigration) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range staticMigrationAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StaticMigration) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range staticMigrationBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StaticMigration) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range staticMigrationAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStaticMigrationHook registers your hook function for all future operations.
func AddStaticMigrationHook(hookPoint boil.HookPoint, staticMigrationHook StaticMigrationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		staticMigrationAfterSelectHooks = append(staticMigrationAfterSelectHooks, staticMigrationHook)
	case boil.BeforeInsertHook:
		staticMigrationBeforeInsertHooks = append(staticMigrationBeforeInsertHooks, staticMigrationHook)
	case boil.AfterInsertHook:
		staticMigrationAfterInsertHooks = append(staticMigrationAfterInsertHooks, staticMigrationHook)
	case boil.BeforeUpdateHook:
		staticMigrationBeforeUpdateHooks = append(staticMigrationBeforeUpdateHooks, staticMigrationHook)
	case boil.AfterUpdateHook:
		staticMigrationAfterUpdateHooks = append(staticMigrationAfterUpdateHooks, staticMigrationHook)
	case boil.BeforeDeleteHook:
		staticMigrationBeforeDeleteHooks = append(staticMigrationBeforeDeleteHooks, staticMigrationHook)
	case boil.AfterDeleteHook:
		staticMigrationAfterDeleteHooks = append(staticMigrationAfterDeleteHooks, staticMigrationHook)
	case boil.BeforeUpsertHook:
		staticMigrationBeforeUpsertHooks = append(staticMigrationBeforeUpsertHooks, staticMigrationHook)
	case boil.AfterUpsertHook:
		staticMigrationAfterUpsertHooks = append(staticMigrationAfterUpsertHooks, staticMigrationHook)
	}
}

// One returns a single staticMigration record from the query.
func (q staticMigrationQuery) One(exec boil.Executor) (*StaticMigration, error) {
	o := &StaticMigration{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for static_migrations")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StaticMigration records from the query.
func (q staticMigrationQuery) All(exec boil.Executor) (StaticMigrationSlice, error) {
	var o []*StaticMigration

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to StaticMigration slice")
	}

	if len(staticMigrationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StaticMigration records in the query.
func (q staticMigrationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count static_migrations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q staticMigrationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if static_migrations exists")
	}

	return count > 0, nil
}

// StaticMigrations retrieves all the records using an executor.
func StaticMigrations(mods ...qm.QueryMod) staticMigrationQuery {
	mods = append(mods, qm.From("\"static_migrations\""))
	return staticMigrationQuery{NewQuery(mods...)}
}

// FindStaticMigration retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStaticMigration(exec boil.Executor, version int64, selectCols ...string) (*StaticMigration, error) {
	staticMigrationObj := &StaticMigration{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"static_migrations\" where \"version\"=$1", sel,
	)

	q := queries.Raw(query, version)

	err := q.Bind(nil, exec, staticMigrationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from static_migrations")
	}

	if err = staticMigrationObj.doAfterSelectHooks(exec); err != nil {
		return staticMigrationObj, err
	}

	return staticMigrationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StaticMigration) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no static_migrations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(staticMigrationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	staticMigrationInsertCacheMut.RLock()
	cache, cached := staticMigrationInsertCache[key]
	staticMigrationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			staticMigrationAllColumns,
			staticMigrationColumnsWithDefault,
			staticMigrationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(staticMigrationType, staticMigrationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(staticMigrationType, staticMigrationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"static_migrations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"static_migrations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into static_migrations")
	}

	if !cached {
		staticMigrationInsertCacheMut.Lock()
		staticMigrationInsertCache[key] = cache
		staticMigrationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the StaticMigration.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StaticMigration) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	staticMigrationUpdateCacheMut.RLock()
	cache, cached := staticMigrationUpdateCache[key]
	staticMigrationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			staticMigrationAllColumns,
			staticMigrationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update static_migrations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"static_migrations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, staticMigrationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(staticMigrationType, staticMigrationMapping, append(wl, staticMigrationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update static_migrations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for static_migrations")
	}

	if !cached {
		staticMigrationUpdateCacheMut.Lock()
		staticMigrationUpdateCache[key] = cache
		staticMigrationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q staticMigrationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for static_migrations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for static_migrations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StaticMigrationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staticMigrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"static_migrations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, staticMigrationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in staticMigration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all staticMigration")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StaticMigration) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no static_migrations provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(staticMigrationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	staticMigrationUpsertCacheMut.RLock()
	cache, cached := staticMigrationUpsertCache[key]
	staticMigrationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			staticMigrationAllColumns,
			staticMigrationColumnsWithDefault,
			staticMigrationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			staticMigrationAllColumns,
			staticMigrationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert static_migrations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(staticMigrationPrimaryKeyColumns))
			copy(conflict, staticMigrationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"static_migrations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(staticMigrationType, staticMigrationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(staticMigrationType, staticMigrationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert static_migrations")
	}

	if !cached {
		staticMigrationUpsertCacheMut.Lock()
		staticMigrationUpsertCache[key] = cache
		staticMigrationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single StaticMigration record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StaticMigration) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no StaticMigration provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), staticMigrationPrimaryKeyMapping)
	sql := "DELETE FROM \"static_migrations\" WHERE \"version\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from static_migrations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for static_migrations")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q staticMigrationQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no staticMigrationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from static_migrations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for static_migrations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StaticMigrationSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(staticMigrationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staticMigrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"static_migrations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, staticMigrationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from staticMigration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for static_migrations")
	}

	if len(staticMigrationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StaticMigration) Reload(exec boil.Executor) error {
	ret, err := FindStaticMigration(exec, o.Version)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StaticMigrationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StaticMigrationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staticMigrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"static_migrations\".* FROM \"static_migrations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, staticMigrationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in StaticMigrationSlice")
	}

	*o = slice

	return nil
}

// StaticMigrationExists checks if the StaticMigration row exists.
func StaticMigrationExists(exec boil.Executor, version int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"static_migrations\" where \"version\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, version)
	}
	row := exec.QueryRow(sql, version)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if static_migrations exists")
	}

	return exists, nil
}
