// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ChassisSkin is an object representing the database table.
type ChassisSkin struct {
	ID                    string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BlueprintID           string      `boiler:"blueprint_id" boil:"blueprint_id" json:"blueprint_id" toml:"blueprint_id" yaml:"blueprint_id"`
	GenesisTokenID        null.Int64  `boiler:"genesis_token_id" boil:"genesis_token_id" json:"genesis_token_id,omitempty" toml:"genesis_token_id" yaml:"genesis_token_id,omitempty"`
	LimitedReleaseTokenID null.Int64  `boiler:"limited_release_token_id" boil:"limited_release_token_id" json:"limited_release_token_id,omitempty" toml:"limited_release_token_id" yaml:"limited_release_token_id,omitempty"`
	Label                 string      `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	MechModel             string      `boiler:"mech_model" boil:"mech_model" json:"mech_model" toml:"mech_model" yaml:"mech_model"`
	EquippedOn            null.String `boiler:"equipped_on" boil:"equipped_on" json:"equipped_on,omitempty" toml:"equipped_on" yaml:"equipped_on,omitempty"`
	ImageURL              null.String `boiler:"image_url" boil:"image_url" json:"image_url,omitempty" toml:"image_url" yaml:"image_url,omitempty"`
	AnimationURL          null.String `boiler:"animation_url" boil:"animation_url" json:"animation_url,omitempty" toml:"animation_url" yaml:"animation_url,omitempty"`
	CardAnimationURL      null.String `boiler:"card_animation_url" boil:"card_animation_url" json:"card_animation_url,omitempty" toml:"card_animation_url" yaml:"card_animation_url,omitempty"`
	AvatarURL             null.String `boiler:"avatar_url" boil:"avatar_url" json:"avatar_url,omitempty" toml:"avatar_url" yaml:"avatar_url,omitempty"`
	LargeImageURL         null.String `boiler:"large_image_url" boil:"large_image_url" json:"large_image_url,omitempty" toml:"large_image_url" yaml:"large_image_url,omitempty"`
	CreatedAt             time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *chassisSkinR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L chassisSkinL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChassisSkinColumns = struct {
	ID                    string
	BlueprintID           string
	GenesisTokenID        string
	LimitedReleaseTokenID string
	Label                 string
	MechModel             string
	EquippedOn            string
	ImageURL              string
	AnimationURL          string
	CardAnimationURL      string
	AvatarURL             string
	LargeImageURL         string
	CreatedAt             string
}{
	ID:                    "id",
	BlueprintID:           "blueprint_id",
	GenesisTokenID:        "genesis_token_id",
	LimitedReleaseTokenID: "limited_release_token_id",
	Label:                 "label",
	MechModel:             "mech_model",
	EquippedOn:            "equipped_on",
	ImageURL:              "image_url",
	AnimationURL:          "animation_url",
	CardAnimationURL:      "card_animation_url",
	AvatarURL:             "avatar_url",
	LargeImageURL:         "large_image_url",
	CreatedAt:             "created_at",
}

var ChassisSkinTableColumns = struct {
	ID                    string
	BlueprintID           string
	GenesisTokenID        string
	LimitedReleaseTokenID string
	Label                 string
	MechModel             string
	EquippedOn            string
	ImageURL              string
	AnimationURL          string
	CardAnimationURL      string
	AvatarURL             string
	LargeImageURL         string
	CreatedAt             string
}{
	ID:                    "chassis_skin.id",
	BlueprintID:           "chassis_skin.blueprint_id",
	GenesisTokenID:        "chassis_skin.genesis_token_id",
	LimitedReleaseTokenID: "chassis_skin.limited_release_token_id",
	Label:                 "chassis_skin.label",
	MechModel:             "chassis_skin.mech_model",
	EquippedOn:            "chassis_skin.equipped_on",
	ImageURL:              "chassis_skin.image_url",
	AnimationURL:          "chassis_skin.animation_url",
	CardAnimationURL:      "chassis_skin.card_animation_url",
	AvatarURL:             "chassis_skin.avatar_url",
	LargeImageURL:         "chassis_skin.large_image_url",
	CreatedAt:             "chassis_skin.created_at",
}

// Generated where

var ChassisSkinWhere = struct {
	ID                    whereHelperstring
	BlueprintID           whereHelperstring
	GenesisTokenID        whereHelpernull_Int64
	LimitedReleaseTokenID whereHelpernull_Int64
	Label                 whereHelperstring
	MechModel             whereHelperstring
	EquippedOn            whereHelpernull_String
	ImageURL              whereHelpernull_String
	AnimationURL          whereHelpernull_String
	CardAnimationURL      whereHelpernull_String
	AvatarURL             whereHelpernull_String
	LargeImageURL         whereHelpernull_String
	CreatedAt             whereHelpertime_Time
}{
	ID:                    whereHelperstring{field: "\"chassis_skin\".\"id\""},
	BlueprintID:           whereHelperstring{field: "\"chassis_skin\".\"blueprint_id\""},
	GenesisTokenID:        whereHelpernull_Int64{field: "\"chassis_skin\".\"genesis_token_id\""},
	LimitedReleaseTokenID: whereHelpernull_Int64{field: "\"chassis_skin\".\"limited_release_token_id\""},
	Label:                 whereHelperstring{field: "\"chassis_skin\".\"label\""},
	MechModel:             whereHelperstring{field: "\"chassis_skin\".\"mech_model\""},
	EquippedOn:            whereHelpernull_String{field: "\"chassis_skin\".\"equipped_on\""},
	ImageURL:              whereHelpernull_String{field: "\"chassis_skin\".\"image_url\""},
	AnimationURL:          whereHelpernull_String{field: "\"chassis_skin\".\"animation_url\""},
	CardAnimationURL:      whereHelpernull_String{field: "\"chassis_skin\".\"card_animation_url\""},
	AvatarURL:             whereHelpernull_String{field: "\"chassis_skin\".\"avatar_url\""},
	LargeImageURL:         whereHelpernull_String{field: "\"chassis_skin\".\"large_image_url\""},
	CreatedAt:             whereHelpertime_Time{field: "\"chassis_skin\".\"created_at\""},
}

// ChassisSkinRels is where relationship names are stored.
var ChassisSkinRels = struct {
	Blueprint              string
	EquippedOnChassis      string
	MechModelBlueprintMech string
	Chasses                string
}{
	Blueprint:              "Blueprint",
	EquippedOnChassis:      "EquippedOnChassis",
	MechModelBlueprintMech: "MechModelBlueprintMech",
	Chasses:                "Chasses",
}

// chassisSkinR is where relationships are stored.
type chassisSkinR struct {
	Blueprint              *BlueprintMechSkin `boiler:"Blueprint" boil:"Blueprint" json:"Blueprint" toml:"Blueprint" yaml:"Blueprint"`
	EquippedOnChassis      *Chassis           `boiler:"EquippedOnChassis" boil:"EquippedOnChassis" json:"EquippedOnChassis" toml:"EquippedOnChassis" yaml:"EquippedOnChassis"`
	MechModelBlueprintMech *BlueprintMech     `boiler:"MechModelBlueprintMech" boil:"MechModelBlueprintMech" json:"MechModelBlueprintMech" toml:"MechModelBlueprintMech" yaml:"MechModelBlueprintMech"`
	Chasses                ChassisSlice       `boiler:"Chasses" boil:"Chasses" json:"Chasses" toml:"Chasses" yaml:"Chasses"`
}

// NewStruct creates a new relationship struct
func (*chassisSkinR) NewStruct() *chassisSkinR {
	return &chassisSkinR{}
}

// chassisSkinL is where Load methods for each relationship are stored.
type chassisSkinL struct{}

var (
	chassisSkinAllColumns            = []string{"id", "blueprint_id", "genesis_token_id", "limited_release_token_id", "label", "mech_model", "equipped_on", "image_url", "animation_url", "card_animation_url", "avatar_url", "large_image_url", "created_at"}
	chassisSkinColumnsWithoutDefault = []string{"blueprint_id", "label", "mech_model"}
	chassisSkinColumnsWithDefault    = []string{"id", "genesis_token_id", "limited_release_token_id", "equipped_on", "image_url", "animation_url", "card_animation_url", "avatar_url", "large_image_url", "created_at"}
	chassisSkinPrimaryKeyColumns     = []string{"id"}
	chassisSkinGeneratedColumns      = []string{}
)

type (
	// ChassisSkinSlice is an alias for a slice of pointers to ChassisSkin.
	// This should almost always be used instead of []ChassisSkin.
	ChassisSkinSlice []*ChassisSkin
	// ChassisSkinHook is the signature for custom ChassisSkin hook methods
	ChassisSkinHook func(boil.Executor, *ChassisSkin) error

	chassisSkinQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chassisSkinType                 = reflect.TypeOf(&ChassisSkin{})
	chassisSkinMapping              = queries.MakeStructMapping(chassisSkinType)
	chassisSkinPrimaryKeyMapping, _ = queries.BindMapping(chassisSkinType, chassisSkinMapping, chassisSkinPrimaryKeyColumns)
	chassisSkinInsertCacheMut       sync.RWMutex
	chassisSkinInsertCache          = make(map[string]insertCache)
	chassisSkinUpdateCacheMut       sync.RWMutex
	chassisSkinUpdateCache          = make(map[string]updateCache)
	chassisSkinUpsertCacheMut       sync.RWMutex
	chassisSkinUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var chassisSkinAfterSelectHooks []ChassisSkinHook

var chassisSkinBeforeInsertHooks []ChassisSkinHook
var chassisSkinAfterInsertHooks []ChassisSkinHook

var chassisSkinBeforeUpdateHooks []ChassisSkinHook
var chassisSkinAfterUpdateHooks []ChassisSkinHook

var chassisSkinBeforeDeleteHooks []ChassisSkinHook
var chassisSkinAfterDeleteHooks []ChassisSkinHook

var chassisSkinBeforeUpsertHooks []ChassisSkinHook
var chassisSkinAfterUpsertHooks []ChassisSkinHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ChassisSkin) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range chassisSkinAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ChassisSkin) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range chassisSkinBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ChassisSkin) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range chassisSkinAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ChassisSkin) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range chassisSkinBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ChassisSkin) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range chassisSkinAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ChassisSkin) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range chassisSkinBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ChassisSkin) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range chassisSkinAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ChassisSkin) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range chassisSkinBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ChassisSkin) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range chassisSkinAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChassisSkinHook registers your hook function for all future operations.
func AddChassisSkinHook(hookPoint boil.HookPoint, chassisSkinHook ChassisSkinHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		chassisSkinAfterSelectHooks = append(chassisSkinAfterSelectHooks, chassisSkinHook)
	case boil.BeforeInsertHook:
		chassisSkinBeforeInsertHooks = append(chassisSkinBeforeInsertHooks, chassisSkinHook)
	case boil.AfterInsertHook:
		chassisSkinAfterInsertHooks = append(chassisSkinAfterInsertHooks, chassisSkinHook)
	case boil.BeforeUpdateHook:
		chassisSkinBeforeUpdateHooks = append(chassisSkinBeforeUpdateHooks, chassisSkinHook)
	case boil.AfterUpdateHook:
		chassisSkinAfterUpdateHooks = append(chassisSkinAfterUpdateHooks, chassisSkinHook)
	case boil.BeforeDeleteHook:
		chassisSkinBeforeDeleteHooks = append(chassisSkinBeforeDeleteHooks, chassisSkinHook)
	case boil.AfterDeleteHook:
		chassisSkinAfterDeleteHooks = append(chassisSkinAfterDeleteHooks, chassisSkinHook)
	case boil.BeforeUpsertHook:
		chassisSkinBeforeUpsertHooks = append(chassisSkinBeforeUpsertHooks, chassisSkinHook)
	case boil.AfterUpsertHook:
		chassisSkinAfterUpsertHooks = append(chassisSkinAfterUpsertHooks, chassisSkinHook)
	}
}

// One returns a single chassisSkin record from the query.
func (q chassisSkinQuery) One(exec boil.Executor) (*ChassisSkin, error) {
	o := &ChassisSkin{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for chassis_skin")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ChassisSkin records from the query.
func (q chassisSkinQuery) All(exec boil.Executor) (ChassisSkinSlice, error) {
	var o []*ChassisSkin

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to ChassisSkin slice")
	}

	if len(chassisSkinAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ChassisSkin records in the query.
func (q chassisSkinQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count chassis_skin rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q chassisSkinQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if chassis_skin exists")
	}

	return count > 0, nil
}

// Blueprint pointed to by the foreign key.
func (o *ChassisSkin) Blueprint(mods ...qm.QueryMod) blueprintMechSkinQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BlueprintID),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintMechSkins(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_mech_skin\"")

	return query
}

// EquippedOnChassis pointed to by the foreign key.
func (o *ChassisSkin) EquippedOnChassis(mods ...qm.QueryMod) chassisQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EquippedOn),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Chasses(queryMods...)
	queries.SetFrom(query.Query, "\"chassis\"")

	return query
}

// MechModelBlueprintMech pointed to by the foreign key.
func (o *ChassisSkin) MechModelBlueprintMech(mods ...qm.QueryMod) blueprintMechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MechModel),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintMechs(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_mechs\"")

	return query
}

// Chasses retrieves all the chassis's Chasses with an executor.
func (o *ChassisSkin) Chasses(mods ...qm.QueryMod) chassisQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chassis\".\"chassis_skin_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"chassis\".\"deleted_at\""),
	)

	query := Chasses(queryMods...)
	queries.SetFrom(query.Query, "\"chassis\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"chassis\".*"})
	}

	return query
}

// LoadBlueprint allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chassisSkinL) LoadBlueprint(e boil.Executor, singular bool, maybeChassisSkin interface{}, mods queries.Applicator) error {
	var slice []*ChassisSkin
	var object *ChassisSkin

	if singular {
		object = maybeChassisSkin.(*ChassisSkin)
	} else {
		slice = *maybeChassisSkin.(*[]*ChassisSkin)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chassisSkinR{}
		}
		args = append(args, object.BlueprintID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chassisSkinR{}
			}

			for _, a := range args {
				if a == obj.BlueprintID {
					continue Outer
				}
			}

			args = append(args, obj.BlueprintID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_mech_skin`),
		qm.WhereIn(`blueprint_mech_skin.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintMechSkin")
	}

	var resultSlice []*BlueprintMechSkin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintMechSkin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_mech_skin")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_mech_skin")
	}

	if len(chassisSkinAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Blueprint = foreign
		if foreign.R == nil {
			foreign.R = &blueprintMechSkinR{}
		}
		foreign.R.BlueprintChassisSkins = append(foreign.R.BlueprintChassisSkins, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlueprintID == foreign.ID {
				local.R.Blueprint = foreign
				if foreign.R == nil {
					foreign.R = &blueprintMechSkinR{}
				}
				foreign.R.BlueprintChassisSkins = append(foreign.R.BlueprintChassisSkins, local)
				break
			}
		}
	}

	return nil
}

// LoadEquippedOnChassis allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chassisSkinL) LoadEquippedOnChassis(e boil.Executor, singular bool, maybeChassisSkin interface{}, mods queries.Applicator) error {
	var slice []*ChassisSkin
	var object *ChassisSkin

	if singular {
		object = maybeChassisSkin.(*ChassisSkin)
	} else {
		slice = *maybeChassisSkin.(*[]*ChassisSkin)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chassisSkinR{}
		}
		if !queries.IsNil(object.EquippedOn) {
			args = append(args, object.EquippedOn)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chassisSkinR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.EquippedOn) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.EquippedOn) {
				args = append(args, obj.EquippedOn)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chassis`),
		qm.WhereIn(`chassis.id in ?`, args...),
		qmhelper.WhereIsNull(`chassis.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Chassis")
	}

	var resultSlice []*Chassis
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Chassis")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for chassis")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chassis")
	}

	if len(chassisSkinAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EquippedOnChassis = foreign
		if foreign.R == nil {
			foreign.R = &chassisR{}
		}
		foreign.R.EquippedOnChassisSkins = append(foreign.R.EquippedOnChassisSkins, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.EquippedOn, foreign.ID) {
				local.R.EquippedOnChassis = foreign
				if foreign.R == nil {
					foreign.R = &chassisR{}
				}
				foreign.R.EquippedOnChassisSkins = append(foreign.R.EquippedOnChassisSkins, local)
				break
			}
		}
	}

	return nil
}

// LoadMechModelBlueprintMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chassisSkinL) LoadMechModelBlueprintMech(e boil.Executor, singular bool, maybeChassisSkin interface{}, mods queries.Applicator) error {
	var slice []*ChassisSkin
	var object *ChassisSkin

	if singular {
		object = maybeChassisSkin.(*ChassisSkin)
	} else {
		slice = *maybeChassisSkin.(*[]*ChassisSkin)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chassisSkinR{}
		}
		args = append(args, object.MechModel)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chassisSkinR{}
			}

			for _, a := range args {
				if a == obj.MechModel {
					continue Outer
				}
			}

			args = append(args, obj.MechModel)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_mechs`),
		qm.WhereIn(`blueprint_mechs.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintMech")
	}

	var resultSlice []*BlueprintMech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintMech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_mechs")
	}

	if len(chassisSkinAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MechModelBlueprintMech = foreign
		if foreign.R == nil {
			foreign.R = &blueprintMechR{}
		}
		foreign.R.MechModelChassisSkins = append(foreign.R.MechModelChassisSkins, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MechModel == foreign.ID {
				local.R.MechModelBlueprintMech = foreign
				if foreign.R == nil {
					foreign.R = &blueprintMechR{}
				}
				foreign.R.MechModelChassisSkins = append(foreign.R.MechModelChassisSkins, local)
				break
			}
		}
	}

	return nil
}

// LoadChasses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chassisSkinL) LoadChasses(e boil.Executor, singular bool, maybeChassisSkin interface{}, mods queries.Applicator) error {
	var slice []*ChassisSkin
	var object *ChassisSkin

	if singular {
		object = maybeChassisSkin.(*ChassisSkin)
	} else {
		slice = *maybeChassisSkin.(*[]*ChassisSkin)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chassisSkinR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chassisSkinR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chassis`),
		qm.WhereIn(`chassis.chassis_skin_id in ?`, args...),
		qmhelper.WhereIsNull(`chassis.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chassis")
	}

	var resultSlice []*Chassis
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chassis")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chassis")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chassis")
	}

	if len(chassisAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Chasses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chassisR{}
			}
			foreign.R.ChassisSkin = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ChassisSkinID) {
				local.R.Chasses = append(local.R.Chasses, foreign)
				if foreign.R == nil {
					foreign.R = &chassisR{}
				}
				foreign.R.ChassisSkin = local
				break
			}
		}
	}

	return nil
}

// SetBlueprint of the chassisSkin to the related item.
// Sets o.R.Blueprint to related.
// Adds o to related.R.BlueprintChassisSkins.
func (o *ChassisSkin) SetBlueprint(exec boil.Executor, insert bool, related *BlueprintMechSkin) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chassis_skin\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_id"}),
		strmangle.WhereClause("\"", "\"", 2, chassisSkinPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlueprintID = related.ID
	if o.R == nil {
		o.R = &chassisSkinR{
			Blueprint: related,
		}
	} else {
		o.R.Blueprint = related
	}

	if related.R == nil {
		related.R = &blueprintMechSkinR{
			BlueprintChassisSkins: ChassisSkinSlice{o},
		}
	} else {
		related.R.BlueprintChassisSkins = append(related.R.BlueprintChassisSkins, o)
	}

	return nil
}

// SetEquippedOnChassis of the chassisSkin to the related item.
// Sets o.R.EquippedOnChassis to related.
// Adds o to related.R.EquippedOnChassisSkins.
func (o *ChassisSkin) SetEquippedOnChassis(exec boil.Executor, insert bool, related *Chassis) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chassis_skin\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"equipped_on"}),
		strmangle.WhereClause("\"", "\"", 2, chassisSkinPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.EquippedOn, related.ID)
	if o.R == nil {
		o.R = &chassisSkinR{
			EquippedOnChassis: related,
		}
	} else {
		o.R.EquippedOnChassis = related
	}

	if related.R == nil {
		related.R = &chassisR{
			EquippedOnChassisSkins: ChassisSkinSlice{o},
		}
	} else {
		related.R.EquippedOnChassisSkins = append(related.R.EquippedOnChassisSkins, o)
	}

	return nil
}

// RemoveEquippedOnChassis relationship.
// Sets o.R.EquippedOnChassis to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *ChassisSkin) RemoveEquippedOnChassis(exec boil.Executor, related *Chassis) error {
	var err error

	queries.SetScanner(&o.EquippedOn, nil)
	if _, err = o.Update(exec, boil.Whitelist("equipped_on")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.EquippedOnChassis = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.EquippedOnChassisSkins {
		if queries.Equal(o.EquippedOn, ri.EquippedOn) {
			continue
		}

		ln := len(related.R.EquippedOnChassisSkins)
		if ln > 1 && i < ln-1 {
			related.R.EquippedOnChassisSkins[i] = related.R.EquippedOnChassisSkins[ln-1]
		}
		related.R.EquippedOnChassisSkins = related.R.EquippedOnChassisSkins[:ln-1]
		break
	}
	return nil
}

// SetMechModelBlueprintMech of the chassisSkin to the related item.
// Sets o.R.MechModelBlueprintMech to related.
// Adds o to related.R.MechModelChassisSkins.
func (o *ChassisSkin) SetMechModelBlueprintMech(exec boil.Executor, insert bool, related *BlueprintMech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"chassis_skin\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mech_model"}),
		strmangle.WhereClause("\"", "\"", 2, chassisSkinPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MechModel = related.ID
	if o.R == nil {
		o.R = &chassisSkinR{
			MechModelBlueprintMech: related,
		}
	} else {
		o.R.MechModelBlueprintMech = related
	}

	if related.R == nil {
		related.R = &blueprintMechR{
			MechModelChassisSkins: ChassisSkinSlice{o},
		}
	} else {
		related.R.MechModelChassisSkins = append(related.R.MechModelChassisSkins, o)
	}

	return nil
}

// AddChasses adds the given related objects to the existing relationships
// of the chassis_skin, optionally inserting them as new records.
// Appends related to o.R.Chasses.
// Sets related.R.ChassisSkin appropriately.
func (o *ChassisSkin) AddChasses(exec boil.Executor, insert bool, related ...*Chassis) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ChassisSkinID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chassis\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"chassis_skin_id"}),
				strmangle.WhereClause("\"", "\"", 2, chassisPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ChassisSkinID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &chassisSkinR{
			Chasses: related,
		}
	} else {
		o.R.Chasses = append(o.R.Chasses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chassisR{
				ChassisSkin: o,
			}
		} else {
			rel.R.ChassisSkin = o
		}
	}
	return nil
}

// SetChasses removes all previously related items of the
// chassis_skin replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ChassisSkin's Chasses accordingly.
// Replaces o.R.Chasses with related.
// Sets related.R.ChassisSkin's Chasses accordingly.
func (o *ChassisSkin) SetChasses(exec boil.Executor, insert bool, related ...*Chassis) error {
	query := "update \"chassis\" set \"chassis_skin_id\" = null where \"chassis_skin_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Chasses {
			queries.SetScanner(&rel.ChassisSkinID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ChassisSkin = nil
		}

		o.R.Chasses = nil
	}
	return o.AddChasses(exec, insert, related...)
}

// RemoveChasses relationships from objects passed in.
// Removes related items from R.Chasses (uses pointer comparison, removal does not keep order)
// Sets related.R.ChassisSkin.
func (o *ChassisSkin) RemoveChasses(exec boil.Executor, related ...*Chassis) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ChassisSkinID, nil)
		if rel.R != nil {
			rel.R.ChassisSkin = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("chassis_skin_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Chasses {
			if rel != ri {
				continue
			}

			ln := len(o.R.Chasses)
			if ln > 1 && i < ln-1 {
				o.R.Chasses[i] = o.R.Chasses[ln-1]
			}
			o.R.Chasses = o.R.Chasses[:ln-1]
			break
		}
	}

	return nil
}

// ChassisSkins retrieves all the records using an executor.
func ChassisSkins(mods ...qm.QueryMod) chassisSkinQuery {
	mods = append(mods, qm.From("\"chassis_skin\""))
	return chassisSkinQuery{NewQuery(mods...)}
}

// FindChassisSkin retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChassisSkin(exec boil.Executor, iD string, selectCols ...string) (*ChassisSkin, error) {
	chassisSkinObj := &ChassisSkin{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"chassis_skin\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, chassisSkinObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from chassis_skin")
	}

	if err = chassisSkinObj.doAfterSelectHooks(exec); err != nil {
		return chassisSkinObj, err
	}

	return chassisSkinObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ChassisSkin) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no chassis_skin provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chassisSkinColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	chassisSkinInsertCacheMut.RLock()
	cache, cached := chassisSkinInsertCache[key]
	chassisSkinInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			chassisSkinAllColumns,
			chassisSkinColumnsWithDefault,
			chassisSkinColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(chassisSkinType, chassisSkinMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chassisSkinType, chassisSkinMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"chassis_skin\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"chassis_skin\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into chassis_skin")
	}

	if !cached {
		chassisSkinInsertCacheMut.Lock()
		chassisSkinInsertCache[key] = cache
		chassisSkinInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the ChassisSkin.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ChassisSkin) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	chassisSkinUpdateCacheMut.RLock()
	cache, cached := chassisSkinUpdateCache[key]
	chassisSkinUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			chassisSkinAllColumns,
			chassisSkinPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update chassis_skin, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"chassis_skin\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, chassisSkinPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chassisSkinType, chassisSkinMapping, append(wl, chassisSkinPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update chassis_skin row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for chassis_skin")
	}

	if !cached {
		chassisSkinUpdateCacheMut.Lock()
		chassisSkinUpdateCache[key] = cache
		chassisSkinUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q chassisSkinQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for chassis_skin")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for chassis_skin")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChassisSkinSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chassisSkinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"chassis_skin\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, chassisSkinPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in chassisSkin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all chassisSkin")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ChassisSkin) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no chassis_skin provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chassisSkinColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chassisSkinUpsertCacheMut.RLock()
	cache, cached := chassisSkinUpsertCache[key]
	chassisSkinUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			chassisSkinAllColumns,
			chassisSkinColumnsWithDefault,
			chassisSkinColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			chassisSkinAllColumns,
			chassisSkinPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert chassis_skin, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(chassisSkinPrimaryKeyColumns))
			copy(conflict, chassisSkinPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"chassis_skin\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(chassisSkinType, chassisSkinMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chassisSkinType, chassisSkinMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert chassis_skin")
	}

	if !cached {
		chassisSkinUpsertCacheMut.Lock()
		chassisSkinUpsertCache[key] = cache
		chassisSkinUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single ChassisSkin record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ChassisSkin) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no ChassisSkin provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chassisSkinPrimaryKeyMapping)
	sql := "DELETE FROM \"chassis_skin\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from chassis_skin")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for chassis_skin")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q chassisSkinQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no chassisSkinQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from chassis_skin")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for chassis_skin")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChassisSkinSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(chassisSkinBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chassisSkinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"chassis_skin\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chassisSkinPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from chassisSkin slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for chassis_skin")
	}

	if len(chassisSkinAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ChassisSkin) Reload(exec boil.Executor) error {
	ret, err := FindChassisSkin(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChassisSkinSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChassisSkinSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chassisSkinPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"chassis_skin\".* FROM \"chassis_skin\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chassisSkinPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in ChassisSkinSlice")
	}

	*o = slice

	return nil
}

// ChassisSkinExists checks if the ChassisSkin row exists.
func ChassisSkinExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"chassis_skin\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if chassis_skin exists")
	}

	return exists, nil
}
