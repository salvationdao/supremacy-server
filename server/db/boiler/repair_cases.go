// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RepairCase is an object representing the database table.
type RepairCase struct {
	ID                   string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	MechID               string    `boiler:"mech_id" boil:"mech_id" json:"mech_id" toml:"mech_id" yaml:"mech_id"`
	BlocksRequiredRepair int       `boiler:"blocks_required_repair" boil:"blocks_required_repair" json:"blocks_required_repair" toml:"blocks_required_repair" yaml:"blocks_required_repair"`
	BlocksRepaired       int       `boiler:"blocks_repaired" boil:"blocks_repaired" json:"blocks_repaired" toml:"blocks_repaired" yaml:"blocks_repaired"`
	CompletedAt          null.Time `boiler:"completed_at" boil:"completed_at" json:"completed_at,omitempty" toml:"completed_at" yaml:"completed_at,omitempty"`
	CreatedAt            time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt            time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt            null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *repairCaseR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L repairCaseL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RepairCaseColumns = struct {
	ID                   string
	MechID               string
	BlocksRequiredRepair string
	BlocksRepaired       string
	CompletedAt          string
	CreatedAt            string
	UpdatedAt            string
	DeletedAt            string
}{
	ID:                   "id",
	MechID:               "mech_id",
	BlocksRequiredRepair: "blocks_required_repair",
	BlocksRepaired:       "blocks_repaired",
	CompletedAt:          "completed_at",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
	DeletedAt:            "deleted_at",
}

var RepairCaseTableColumns = struct {
	ID                   string
	MechID               string
	BlocksRequiredRepair string
	BlocksRepaired       string
	CompletedAt          string
	CreatedAt            string
	UpdatedAt            string
	DeletedAt            string
}{
	ID:                   "repair_cases.id",
	MechID:               "repair_cases.mech_id",
	BlocksRequiredRepair: "repair_cases.blocks_required_repair",
	BlocksRepaired:       "repair_cases.blocks_repaired",
	CompletedAt:          "repair_cases.completed_at",
	CreatedAt:            "repair_cases.created_at",
	UpdatedAt:            "repair_cases.updated_at",
	DeletedAt:            "repair_cases.deleted_at",
}

// Generated where

var RepairCaseWhere = struct {
	ID                   whereHelperstring
	MechID               whereHelperstring
	BlocksRequiredRepair whereHelperint
	BlocksRepaired       whereHelperint
	CompletedAt          whereHelpernull_Time
	CreatedAt            whereHelpertime_Time
	UpdatedAt            whereHelpertime_Time
	DeletedAt            whereHelpernull_Time
}{
	ID:                   whereHelperstring{field: "\"repair_cases\".\"id\""},
	MechID:               whereHelperstring{field: "\"repair_cases\".\"mech_id\""},
	BlocksRequiredRepair: whereHelperint{field: "\"repair_cases\".\"blocks_required_repair\""},
	BlocksRepaired:       whereHelperint{field: "\"repair_cases\".\"blocks_repaired\""},
	CompletedAt:          whereHelpernull_Time{field: "\"repair_cases\".\"completed_at\""},
	CreatedAt:            whereHelpertime_Time{field: "\"repair_cases\".\"created_at\""},
	UpdatedAt:            whereHelpertime_Time{field: "\"repair_cases\".\"updated_at\""},
	DeletedAt:            whereHelpernull_Time{field: "\"repair_cases\".\"deleted_at\""},
}

// RepairCaseRels is where relationship names are stored.
var RepairCaseRels = struct {
	Mech                 string
	PlayerMechRepairBays string
	RepairAgents         string
	RepairBlocks         string
	RepairOffers         string
}{
	Mech:                 "Mech",
	PlayerMechRepairBays: "PlayerMechRepairBays",
	RepairAgents:         "RepairAgents",
	RepairBlocks:         "RepairBlocks",
	RepairOffers:         "RepairOffers",
}

// repairCaseR is where relationships are stored.
type repairCaseR struct {
	Mech                 *Mech                    `boiler:"Mech" boil:"Mech" json:"Mech" toml:"Mech" yaml:"Mech"`
	PlayerMechRepairBays PlayerMechRepairBaySlice `boiler:"PlayerMechRepairBays" boil:"PlayerMechRepairBays" json:"PlayerMechRepairBays" toml:"PlayerMechRepairBays" yaml:"PlayerMechRepairBays"`
	RepairAgents         RepairAgentSlice         `boiler:"RepairAgents" boil:"RepairAgents" json:"RepairAgents" toml:"RepairAgents" yaml:"RepairAgents"`
	RepairBlocks         RepairBlockSlice         `boiler:"RepairBlocks" boil:"RepairBlocks" json:"RepairBlocks" toml:"RepairBlocks" yaml:"RepairBlocks"`
	RepairOffers         RepairOfferSlice         `boiler:"RepairOffers" boil:"RepairOffers" json:"RepairOffers" toml:"RepairOffers" yaml:"RepairOffers"`
}

// NewStruct creates a new relationship struct
func (*repairCaseR) NewStruct() *repairCaseR {
	return &repairCaseR{}
}

// repairCaseL is where Load methods for each relationship are stored.
type repairCaseL struct{}

var (
	repairCaseAllColumns            = []string{"id", "mech_id", "blocks_required_repair", "blocks_repaired", "completed_at", "created_at", "updated_at", "deleted_at"}
	repairCaseColumnsWithoutDefault = []string{"mech_id", "blocks_required_repair"}
	repairCaseColumnsWithDefault    = []string{"id", "blocks_repaired", "completed_at", "created_at", "updated_at", "deleted_at"}
	repairCasePrimaryKeyColumns     = []string{"id"}
	repairCaseGeneratedColumns      = []string{}
)

type (
	// RepairCaseSlice is an alias for a slice of pointers to RepairCase.
	// This should almost always be used instead of []RepairCase.
	RepairCaseSlice []*RepairCase
	// RepairCaseHook is the signature for custom RepairCase hook methods
	RepairCaseHook func(boil.Executor, *RepairCase) error

	repairCaseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	repairCaseType                 = reflect.TypeOf(&RepairCase{})
	repairCaseMapping              = queries.MakeStructMapping(repairCaseType)
	repairCasePrimaryKeyMapping, _ = queries.BindMapping(repairCaseType, repairCaseMapping, repairCasePrimaryKeyColumns)
	repairCaseInsertCacheMut       sync.RWMutex
	repairCaseInsertCache          = make(map[string]insertCache)
	repairCaseUpdateCacheMut       sync.RWMutex
	repairCaseUpdateCache          = make(map[string]updateCache)
	repairCaseUpsertCacheMut       sync.RWMutex
	repairCaseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var repairCaseAfterSelectHooks []RepairCaseHook

var repairCaseBeforeInsertHooks []RepairCaseHook
var repairCaseAfterInsertHooks []RepairCaseHook

var repairCaseBeforeUpdateHooks []RepairCaseHook
var repairCaseAfterUpdateHooks []RepairCaseHook

var repairCaseBeforeDeleteHooks []RepairCaseHook
var repairCaseAfterDeleteHooks []RepairCaseHook

var repairCaseBeforeUpsertHooks []RepairCaseHook
var repairCaseAfterUpsertHooks []RepairCaseHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RepairCase) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range repairCaseAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RepairCase) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range repairCaseBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RepairCase) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range repairCaseAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RepairCase) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range repairCaseBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RepairCase) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range repairCaseAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RepairCase) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range repairCaseBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RepairCase) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range repairCaseAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RepairCase) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range repairCaseBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RepairCase) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range repairCaseAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRepairCaseHook registers your hook function for all future operations.
func AddRepairCaseHook(hookPoint boil.HookPoint, repairCaseHook RepairCaseHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		repairCaseAfterSelectHooks = append(repairCaseAfterSelectHooks, repairCaseHook)
	case boil.BeforeInsertHook:
		repairCaseBeforeInsertHooks = append(repairCaseBeforeInsertHooks, repairCaseHook)
	case boil.AfterInsertHook:
		repairCaseAfterInsertHooks = append(repairCaseAfterInsertHooks, repairCaseHook)
	case boil.BeforeUpdateHook:
		repairCaseBeforeUpdateHooks = append(repairCaseBeforeUpdateHooks, repairCaseHook)
	case boil.AfterUpdateHook:
		repairCaseAfterUpdateHooks = append(repairCaseAfterUpdateHooks, repairCaseHook)
	case boil.BeforeDeleteHook:
		repairCaseBeforeDeleteHooks = append(repairCaseBeforeDeleteHooks, repairCaseHook)
	case boil.AfterDeleteHook:
		repairCaseAfterDeleteHooks = append(repairCaseAfterDeleteHooks, repairCaseHook)
	case boil.BeforeUpsertHook:
		repairCaseBeforeUpsertHooks = append(repairCaseBeforeUpsertHooks, repairCaseHook)
	case boil.AfterUpsertHook:
		repairCaseAfterUpsertHooks = append(repairCaseAfterUpsertHooks, repairCaseHook)
	}
}

// One returns a single repairCase record from the query.
func (q repairCaseQuery) One(exec boil.Executor) (*RepairCase, error) {
	o := &RepairCase{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for repair_cases")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RepairCase records from the query.
func (q repairCaseQuery) All(exec boil.Executor) (RepairCaseSlice, error) {
	var o []*RepairCase

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to RepairCase slice")
	}

	if len(repairCaseAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RepairCase records in the query.
func (q repairCaseQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count repair_cases rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q repairCaseQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if repair_cases exists")
	}

	return count > 0, nil
}

// Mech pointed to by the foreign key.
func (o *RepairCase) Mech(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MechID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// PlayerMechRepairBays retrieves all the player_mech_repair_bay's PlayerMechRepairBays with an executor.
func (o *RepairCase) PlayerMechRepairBays(mods ...qm.QueryMod) playerMechRepairBayQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"player_mech_repair_bays\".\"repair_case_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"player_mech_repair_bays\".\"deleted_at\""),
	)

	query := PlayerMechRepairBays(queryMods...)
	queries.SetFrom(query.Query, "\"player_mech_repair_bays\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"player_mech_repair_bays\".*"})
	}

	return query
}

// RepairAgents retrieves all the repair_agent's RepairAgents with an executor.
func (o *RepairCase) RepairAgents(mods ...qm.QueryMod) repairAgentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"repair_agents\".\"repair_case_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"repair_agents\".\"deleted_at\""),
	)

	query := RepairAgents(queryMods...)
	queries.SetFrom(query.Query, "\"repair_agents\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"repair_agents\".*"})
	}

	return query
}

// RepairBlocks retrieves all the repair_block's RepairBlocks with an executor.
func (o *RepairCase) RepairBlocks(mods ...qm.QueryMod) repairBlockQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"repair_blocks\".\"repair_case_id\"=?", o.ID),
	)

	query := RepairBlocks(queryMods...)
	queries.SetFrom(query.Query, "\"repair_blocks\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"repair_blocks\".*"})
	}

	return query
}

// RepairOffers retrieves all the repair_offer's RepairOffers with an executor.
func (o *RepairCase) RepairOffers(mods ...qm.QueryMod) repairOfferQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"repair_offers\".\"repair_case_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"repair_offers\".\"deleted_at\""),
	)

	query := RepairOffers(queryMods...)
	queries.SetFrom(query.Query, "\"repair_offers\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"repair_offers\".*"})
	}

	return query
}

// LoadMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (repairCaseL) LoadMech(e boil.Executor, singular bool, maybeRepairCase interface{}, mods queries.Applicator) error {
	var slice []*RepairCase
	var object *RepairCase

	if singular {
		object = maybeRepairCase.(*RepairCase)
	} else {
		slice = *maybeRepairCase.(*[]*RepairCase)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &repairCaseR{}
		}
		args = append(args, object.MechID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &repairCaseR{}
			}

			for _, a := range args {
				if a == obj.MechID {
					continue Outer
				}
			}

			args = append(args, obj.MechID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(repairCaseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Mech = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.RepairCases = append(foreign.R.RepairCases, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MechID == foreign.ID {
				local.R.Mech = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.RepairCases = append(foreign.R.RepairCases, local)
				break
			}
		}
	}

	return nil
}

// LoadPlayerMechRepairBays allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (repairCaseL) LoadPlayerMechRepairBays(e boil.Executor, singular bool, maybeRepairCase interface{}, mods queries.Applicator) error {
	var slice []*RepairCase
	var object *RepairCase

	if singular {
		object = maybeRepairCase.(*RepairCase)
	} else {
		slice = *maybeRepairCase.(*[]*RepairCase)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &repairCaseR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &repairCaseR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`player_mech_repair_bays`),
		qm.WhereIn(`player_mech_repair_bays.repair_case_id in ?`, args...),
		qmhelper.WhereIsNull(`player_mech_repair_bays.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load player_mech_repair_bays")
	}

	var resultSlice []*PlayerMechRepairBay
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice player_mech_repair_bays")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on player_mech_repair_bays")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for player_mech_repair_bays")
	}

	if len(playerMechRepairBayAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PlayerMechRepairBays = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playerMechRepairBayR{}
			}
			foreign.R.RepairCase = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RepairCaseID {
				local.R.PlayerMechRepairBays = append(local.R.PlayerMechRepairBays, foreign)
				if foreign.R == nil {
					foreign.R = &playerMechRepairBayR{}
				}
				foreign.R.RepairCase = local
				break
			}
		}
	}

	return nil
}

// LoadRepairAgents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (repairCaseL) LoadRepairAgents(e boil.Executor, singular bool, maybeRepairCase interface{}, mods queries.Applicator) error {
	var slice []*RepairCase
	var object *RepairCase

	if singular {
		object = maybeRepairCase.(*RepairCase)
	} else {
		slice = *maybeRepairCase.(*[]*RepairCase)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &repairCaseR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &repairCaseR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`repair_agents`),
		qm.WhereIn(`repair_agents.repair_case_id in ?`, args...),
		qmhelper.WhereIsNull(`repair_agents.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load repair_agents")
	}

	var resultSlice []*RepairAgent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice repair_agents")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on repair_agents")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for repair_agents")
	}

	if len(repairAgentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RepairAgents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &repairAgentR{}
			}
			foreign.R.RepairCase = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RepairCaseID {
				local.R.RepairAgents = append(local.R.RepairAgents, foreign)
				if foreign.R == nil {
					foreign.R = &repairAgentR{}
				}
				foreign.R.RepairCase = local
				break
			}
		}
	}

	return nil
}

// LoadRepairBlocks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (repairCaseL) LoadRepairBlocks(e boil.Executor, singular bool, maybeRepairCase interface{}, mods queries.Applicator) error {
	var slice []*RepairCase
	var object *RepairCase

	if singular {
		object = maybeRepairCase.(*RepairCase)
	} else {
		slice = *maybeRepairCase.(*[]*RepairCase)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &repairCaseR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &repairCaseR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`repair_blocks`),
		qm.WhereIn(`repair_blocks.repair_case_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load repair_blocks")
	}

	var resultSlice []*RepairBlock
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice repair_blocks")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on repair_blocks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for repair_blocks")
	}

	if len(repairBlockAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RepairBlocks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &repairBlockR{}
			}
			foreign.R.RepairCase = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RepairCaseID {
				local.R.RepairBlocks = append(local.R.RepairBlocks, foreign)
				if foreign.R == nil {
					foreign.R = &repairBlockR{}
				}
				foreign.R.RepairCase = local
				break
			}
		}
	}

	return nil
}

// LoadRepairOffers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (repairCaseL) LoadRepairOffers(e boil.Executor, singular bool, maybeRepairCase interface{}, mods queries.Applicator) error {
	var slice []*RepairCase
	var object *RepairCase

	if singular {
		object = maybeRepairCase.(*RepairCase)
	} else {
		slice = *maybeRepairCase.(*[]*RepairCase)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &repairCaseR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &repairCaseR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`repair_offers`),
		qm.WhereIn(`repair_offers.repair_case_id in ?`, args...),
		qmhelper.WhereIsNull(`repair_offers.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load repair_offers")
	}

	var resultSlice []*RepairOffer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice repair_offers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on repair_offers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for repair_offers")
	}

	if len(repairOfferAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RepairOffers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &repairOfferR{}
			}
			foreign.R.RepairCase = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RepairCaseID {
				local.R.RepairOffers = append(local.R.RepairOffers, foreign)
				if foreign.R == nil {
					foreign.R = &repairOfferR{}
				}
				foreign.R.RepairCase = local
				break
			}
		}
	}

	return nil
}

// SetMech of the repairCase to the related item.
// Sets o.R.Mech to related.
// Adds o to related.R.RepairCases.
func (o *RepairCase) SetMech(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"repair_cases\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
		strmangle.WhereClause("\"", "\"", 2, repairCasePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MechID = related.ID
	if o.R == nil {
		o.R = &repairCaseR{
			Mech: related,
		}
	} else {
		o.R.Mech = related
	}

	if related.R == nil {
		related.R = &mechR{
			RepairCases: RepairCaseSlice{o},
		}
	} else {
		related.R.RepairCases = append(related.R.RepairCases, o)
	}

	return nil
}

// AddPlayerMechRepairBays adds the given related objects to the existing relationships
// of the repair_case, optionally inserting them as new records.
// Appends related to o.R.PlayerMechRepairBays.
// Sets related.R.RepairCase appropriately.
func (o *RepairCase) AddPlayerMechRepairBays(exec boil.Executor, insert bool, related ...*PlayerMechRepairBay) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RepairCaseID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"player_mech_repair_bays\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"repair_case_id"}),
				strmangle.WhereClause("\"", "\"", 2, playerMechRepairBayPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RepairCaseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &repairCaseR{
			PlayerMechRepairBays: related,
		}
	} else {
		o.R.PlayerMechRepairBays = append(o.R.PlayerMechRepairBays, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playerMechRepairBayR{
				RepairCase: o,
			}
		} else {
			rel.R.RepairCase = o
		}
	}
	return nil
}

// AddRepairAgents adds the given related objects to the existing relationships
// of the repair_case, optionally inserting them as new records.
// Appends related to o.R.RepairAgents.
// Sets related.R.RepairCase appropriately.
func (o *RepairCase) AddRepairAgents(exec boil.Executor, insert bool, related ...*RepairAgent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RepairCaseID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"repair_agents\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"repair_case_id"}),
				strmangle.WhereClause("\"", "\"", 2, repairAgentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RepairCaseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &repairCaseR{
			RepairAgents: related,
		}
	} else {
		o.R.RepairAgents = append(o.R.RepairAgents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &repairAgentR{
				RepairCase: o,
			}
		} else {
			rel.R.RepairCase = o
		}
	}
	return nil
}

// AddRepairBlocks adds the given related objects to the existing relationships
// of the repair_case, optionally inserting them as new records.
// Appends related to o.R.RepairBlocks.
// Sets related.R.RepairCase appropriately.
func (o *RepairCase) AddRepairBlocks(exec boil.Executor, insert bool, related ...*RepairBlock) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RepairCaseID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"repair_blocks\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"repair_case_id"}),
				strmangle.WhereClause("\"", "\"", 2, repairBlockPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RepairCaseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &repairCaseR{
			RepairBlocks: related,
		}
	} else {
		o.R.RepairBlocks = append(o.R.RepairBlocks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &repairBlockR{
				RepairCase: o,
			}
		} else {
			rel.R.RepairCase = o
		}
	}
	return nil
}

// AddRepairOffers adds the given related objects to the existing relationships
// of the repair_case, optionally inserting them as new records.
// Appends related to o.R.RepairOffers.
// Sets related.R.RepairCase appropriately.
func (o *RepairCase) AddRepairOffers(exec boil.Executor, insert bool, related ...*RepairOffer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RepairCaseID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"repair_offers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"repair_case_id"}),
				strmangle.WhereClause("\"", "\"", 2, repairOfferPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RepairCaseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &repairCaseR{
			RepairOffers: related,
		}
	} else {
		o.R.RepairOffers = append(o.R.RepairOffers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &repairOfferR{
				RepairCase: o,
			}
		} else {
			rel.R.RepairCase = o
		}
	}
	return nil
}

// RepairCases retrieves all the records using an executor.
func RepairCases(mods ...qm.QueryMod) repairCaseQuery {
	mods = append(mods, qm.From("\"repair_cases\""), qmhelper.WhereIsNull("\"repair_cases\".\"deleted_at\""))
	return repairCaseQuery{NewQuery(mods...)}
}

// FindRepairCase retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRepairCase(exec boil.Executor, iD string, selectCols ...string) (*RepairCase, error) {
	repairCaseObj := &RepairCase{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"repair_cases\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, repairCaseObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from repair_cases")
	}

	if err = repairCaseObj.doAfterSelectHooks(exec); err != nil {
		return repairCaseObj, err
	}

	return repairCaseObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RepairCase) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no repair_cases provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(repairCaseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	repairCaseInsertCacheMut.RLock()
	cache, cached := repairCaseInsertCache[key]
	repairCaseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			repairCaseAllColumns,
			repairCaseColumnsWithDefault,
			repairCaseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(repairCaseType, repairCaseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(repairCaseType, repairCaseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"repair_cases\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"repair_cases\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into repair_cases")
	}

	if !cached {
		repairCaseInsertCacheMut.Lock()
		repairCaseInsertCache[key] = cache
		repairCaseInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the RepairCase.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RepairCase) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	repairCaseUpdateCacheMut.RLock()
	cache, cached := repairCaseUpdateCache[key]
	repairCaseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			repairCaseAllColumns,
			repairCasePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update repair_cases, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"repair_cases\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, repairCasePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(repairCaseType, repairCaseMapping, append(wl, repairCasePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update repair_cases row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for repair_cases")
	}

	if !cached {
		repairCaseUpdateCacheMut.Lock()
		repairCaseUpdateCache[key] = cache
		repairCaseUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q repairCaseQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for repair_cases")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for repair_cases")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RepairCaseSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repairCasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"repair_cases\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, repairCasePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in repairCase slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all repairCase")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RepairCase) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no repair_cases provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(repairCaseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	repairCaseUpsertCacheMut.RLock()
	cache, cached := repairCaseUpsertCache[key]
	repairCaseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			repairCaseAllColumns,
			repairCaseColumnsWithDefault,
			repairCaseColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			repairCaseAllColumns,
			repairCasePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert repair_cases, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(repairCasePrimaryKeyColumns))
			copy(conflict, repairCasePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"repair_cases\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(repairCaseType, repairCaseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(repairCaseType, repairCaseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert repair_cases")
	}

	if !cached {
		repairCaseUpsertCacheMut.Lock()
		repairCaseUpsertCache[key] = cache
		repairCaseUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single RepairCase record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RepairCase) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no RepairCase provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), repairCasePrimaryKeyMapping)
		sql = "DELETE FROM \"repair_cases\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"repair_cases\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(repairCaseType, repairCaseMapping, append(wl, repairCasePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from repair_cases")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for repair_cases")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q repairCaseQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no repairCaseQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from repair_cases")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for repair_cases")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RepairCaseSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(repairCaseBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repairCasePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"repair_cases\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, repairCasePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repairCasePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"repair_cases\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, repairCasePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from repairCase slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for repair_cases")
	}

	if len(repairCaseAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RepairCase) Reload(exec boil.Executor) error {
	ret, err := FindRepairCase(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RepairCaseSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RepairCaseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repairCasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"repair_cases\".* FROM \"repair_cases\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, repairCasePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in RepairCaseSlice")
	}

	*o = slice

	return nil
}

// RepairCaseExists checks if the RepairCase row exists.
func RepairCaseExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"repair_cases\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if repair_cases exists")
	}

	return exists, nil
}
