// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Utility is an object representing the database table.
type Utility struct {
	ID                    string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BrandID               null.String `boiler:"brand_id" boil:"brand_id" json:"brand_id,omitempty" toml:"brand_id" yaml:"brand_id,omitempty"`
	Label                 string      `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	DeletedAt             null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt             time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt             time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	BlueprintID           string      `boiler:"blueprint_id" boil:"blueprint_id" json:"blueprint_id" toml:"blueprint_id" yaml:"blueprint_id"`
	GenesisTokenID        null.Int64  `boiler:"genesis_token_id" boil:"genesis_token_id" json:"genesis_token_id,omitempty" toml:"genesis_token_id" yaml:"genesis_token_id,omitempty"`
	LimitedReleaseTokenID null.Int64  `boiler:"limited_release_token_id" boil:"limited_release_token_id" json:"limited_release_token_id,omitempty" toml:"limited_release_token_id" yaml:"limited_release_token_id,omitempty"`
	EquippedOn            null.String `boiler:"equipped_on" boil:"equipped_on" json:"equipped_on,omitempty" toml:"equipped_on" yaml:"equipped_on,omitempty"`
	Type                  string      `boiler:"type" boil:"type" json:"type" toml:"type" yaml:"type"`
	LockedToMech          bool        `boiler:"locked_to_mech" boil:"locked_to_mech" json:"locked_to_mech" toml:"locked_to_mech" yaml:"locked_to_mech"`

	R *utilityR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L utilityL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UtilityColumns = struct {
	ID                    string
	BrandID               string
	Label                 string
	DeletedAt             string
	UpdatedAt             string
	CreatedAt             string
	BlueprintID           string
	GenesisTokenID        string
	LimitedReleaseTokenID string
	EquippedOn            string
	Type                  string
	LockedToMech          string
}{
	ID:                    "id",
	BrandID:               "brand_id",
	Label:                 "label",
	DeletedAt:             "deleted_at",
	UpdatedAt:             "updated_at",
	CreatedAt:             "created_at",
	BlueprintID:           "blueprint_id",
	GenesisTokenID:        "genesis_token_id",
	LimitedReleaseTokenID: "limited_release_token_id",
	EquippedOn:            "equipped_on",
	Type:                  "type",
	LockedToMech:          "locked_to_mech",
}

var UtilityTableColumns = struct {
	ID                    string
	BrandID               string
	Label                 string
	DeletedAt             string
	UpdatedAt             string
	CreatedAt             string
	BlueprintID           string
	GenesisTokenID        string
	LimitedReleaseTokenID string
	EquippedOn            string
	Type                  string
	LockedToMech          string
}{
	ID:                    "utility.id",
	BrandID:               "utility.brand_id",
	Label:                 "utility.label",
	DeletedAt:             "utility.deleted_at",
	UpdatedAt:             "utility.updated_at",
	CreatedAt:             "utility.created_at",
	BlueprintID:           "utility.blueprint_id",
	GenesisTokenID:        "utility.genesis_token_id",
	LimitedReleaseTokenID: "utility.limited_release_token_id",
	EquippedOn:            "utility.equipped_on",
	Type:                  "utility.type",
	LockedToMech:          "utility.locked_to_mech",
}

// Generated where

var UtilityWhere = struct {
	ID                    whereHelperstring
	BrandID               whereHelpernull_String
	Label                 whereHelperstring
	DeletedAt             whereHelpernull_Time
	UpdatedAt             whereHelpertime_Time
	CreatedAt             whereHelpertime_Time
	BlueprintID           whereHelperstring
	GenesisTokenID        whereHelpernull_Int64
	LimitedReleaseTokenID whereHelpernull_Int64
	EquippedOn            whereHelpernull_String
	Type                  whereHelperstring
	LockedToMech          whereHelperbool
}{
	ID:                    whereHelperstring{field: "\"utility\".\"id\""},
	BrandID:               whereHelpernull_String{field: "\"utility\".\"brand_id\""},
	Label:                 whereHelperstring{field: "\"utility\".\"label\""},
	DeletedAt:             whereHelpernull_Time{field: "\"utility\".\"deleted_at\""},
	UpdatedAt:             whereHelpertime_Time{field: "\"utility\".\"updated_at\""},
	CreatedAt:             whereHelpertime_Time{field: "\"utility\".\"created_at\""},
	BlueprintID:           whereHelperstring{field: "\"utility\".\"blueprint_id\""},
	GenesisTokenID:        whereHelpernull_Int64{field: "\"utility\".\"genesis_token_id\""},
	LimitedReleaseTokenID: whereHelpernull_Int64{field: "\"utility\".\"limited_release_token_id\""},
	EquippedOn:            whereHelpernull_String{field: "\"utility\".\"equipped_on\""},
	Type:                  whereHelperstring{field: "\"utility\".\"type\""},
	LockedToMech:          whereHelperbool{field: "\"utility\".\"locked_to_mech\""},
}

// UtilityRels is where relationship names are stored.
var UtilityRels = struct {
	Brand              string
	Blueprint          string
	EquippedOnMech     string
	MechUtility        string
	UtilityAccelerator string
	UtilityAntiMissile string
	UtilityAttackDrone string
	UtilityRepairDrone string
	UtilityShield      string
}{
	Brand:              "Brand",
	Blueprint:          "Blueprint",
	EquippedOnMech:     "EquippedOnMech",
	MechUtility:        "MechUtility",
	UtilityAccelerator: "UtilityAccelerator",
	UtilityAntiMissile: "UtilityAntiMissile",
	UtilityAttackDrone: "UtilityAttackDrone",
	UtilityRepairDrone: "UtilityRepairDrone",
	UtilityShield:      "UtilityShield",
}

// utilityR is where relationships are stored.
type utilityR struct {
	Brand              *Brand              `boiler:"Brand" boil:"Brand" json:"Brand" toml:"Brand" yaml:"Brand"`
	Blueprint          *BlueprintUtility   `boiler:"Blueprint" boil:"Blueprint" json:"Blueprint" toml:"Blueprint" yaml:"Blueprint"`
	EquippedOnMech     *Mech               `boiler:"EquippedOnMech" boil:"EquippedOnMech" json:"EquippedOnMech" toml:"EquippedOnMech" yaml:"EquippedOnMech"`
	MechUtility        *MechUtility        `boiler:"MechUtility" boil:"MechUtility" json:"MechUtility" toml:"MechUtility" yaml:"MechUtility"`
	UtilityAccelerator *UtilityAccelerator `boiler:"UtilityAccelerator" boil:"UtilityAccelerator" json:"UtilityAccelerator" toml:"UtilityAccelerator" yaml:"UtilityAccelerator"`
	UtilityAntiMissile *UtilityAntiMissile `boiler:"UtilityAntiMissile" boil:"UtilityAntiMissile" json:"UtilityAntiMissile" toml:"UtilityAntiMissile" yaml:"UtilityAntiMissile"`
	UtilityAttackDrone *UtilityAttackDrone `boiler:"UtilityAttackDrone" boil:"UtilityAttackDrone" json:"UtilityAttackDrone" toml:"UtilityAttackDrone" yaml:"UtilityAttackDrone"`
	UtilityRepairDrone *UtilityRepairDrone `boiler:"UtilityRepairDrone" boil:"UtilityRepairDrone" json:"UtilityRepairDrone" toml:"UtilityRepairDrone" yaml:"UtilityRepairDrone"`
	UtilityShield      *UtilityShield      `boiler:"UtilityShield" boil:"UtilityShield" json:"UtilityShield" toml:"UtilityShield" yaml:"UtilityShield"`
}

// NewStruct creates a new relationship struct
func (*utilityR) NewStruct() *utilityR {
	return &utilityR{}
}

// utilityL is where Load methods for each relationship are stored.
type utilityL struct{}

var (
	utilityAllColumns            = []string{"id", "brand_id", "label", "deleted_at", "updated_at", "created_at", "blueprint_id", "genesis_token_id", "limited_release_token_id", "equipped_on", "type", "locked_to_mech"}
	utilityColumnsWithoutDefault = []string{"label", "blueprint_id", "type"}
	utilityColumnsWithDefault    = []string{"id", "brand_id", "deleted_at", "updated_at", "created_at", "genesis_token_id", "limited_release_token_id", "equipped_on", "locked_to_mech"}
	utilityPrimaryKeyColumns     = []string{"id"}
	utilityGeneratedColumns      = []string{}
)

type (
	// UtilitySlice is an alias for a slice of pointers to Utility.
	// This should almost always be used instead of []Utility.
	UtilitySlice []*Utility
	// UtilityHook is the signature for custom Utility hook methods
	UtilityHook func(boil.Executor, *Utility) error

	utilityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	utilityType                 = reflect.TypeOf(&Utility{})
	utilityMapping              = queries.MakeStructMapping(utilityType)
	utilityPrimaryKeyMapping, _ = queries.BindMapping(utilityType, utilityMapping, utilityPrimaryKeyColumns)
	utilityInsertCacheMut       sync.RWMutex
	utilityInsertCache          = make(map[string]insertCache)
	utilityUpdateCacheMut       sync.RWMutex
	utilityUpdateCache          = make(map[string]updateCache)
	utilityUpsertCacheMut       sync.RWMutex
	utilityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var utilityAfterSelectHooks []UtilityHook

var utilityBeforeInsertHooks []UtilityHook
var utilityAfterInsertHooks []UtilityHook

var utilityBeforeUpdateHooks []UtilityHook
var utilityAfterUpdateHooks []UtilityHook

var utilityBeforeDeleteHooks []UtilityHook
var utilityAfterDeleteHooks []UtilityHook

var utilityBeforeUpsertHooks []UtilityHook
var utilityAfterUpsertHooks []UtilityHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Utility) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range utilityAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Utility) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range utilityBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Utility) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range utilityAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Utility) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range utilityBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Utility) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range utilityAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Utility) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range utilityBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Utility) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range utilityAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Utility) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range utilityBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Utility) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range utilityAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUtilityHook registers your hook function for all future operations.
func AddUtilityHook(hookPoint boil.HookPoint, utilityHook UtilityHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		utilityAfterSelectHooks = append(utilityAfterSelectHooks, utilityHook)
	case boil.BeforeInsertHook:
		utilityBeforeInsertHooks = append(utilityBeforeInsertHooks, utilityHook)
	case boil.AfterInsertHook:
		utilityAfterInsertHooks = append(utilityAfterInsertHooks, utilityHook)
	case boil.BeforeUpdateHook:
		utilityBeforeUpdateHooks = append(utilityBeforeUpdateHooks, utilityHook)
	case boil.AfterUpdateHook:
		utilityAfterUpdateHooks = append(utilityAfterUpdateHooks, utilityHook)
	case boil.BeforeDeleteHook:
		utilityBeforeDeleteHooks = append(utilityBeforeDeleteHooks, utilityHook)
	case boil.AfterDeleteHook:
		utilityAfterDeleteHooks = append(utilityAfterDeleteHooks, utilityHook)
	case boil.BeforeUpsertHook:
		utilityBeforeUpsertHooks = append(utilityBeforeUpsertHooks, utilityHook)
	case boil.AfterUpsertHook:
		utilityAfterUpsertHooks = append(utilityAfterUpsertHooks, utilityHook)
	}
}

// One returns a single utility record from the query.
func (q utilityQuery) One(exec boil.Executor) (*Utility, error) {
	o := &Utility{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for utility")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Utility records from the query.
func (q utilityQuery) All(exec boil.Executor) (UtilitySlice, error) {
	var o []*Utility

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Utility slice")
	}

	if len(utilityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Utility records in the query.
func (q utilityQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count utility rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q utilityQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if utility exists")
	}

	return count > 0, nil
}

// Brand pointed to by the foreign key.
func (o *Utility) Brand(mods ...qm.QueryMod) brandQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BrandID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Brands(queryMods...)
	queries.SetFrom(query.Query, "\"brands\"")

	return query
}

// Blueprint pointed to by the foreign key.
func (o *Utility) Blueprint(mods ...qm.QueryMod) blueprintUtilityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BlueprintID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintUtilities(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_utility\"")

	return query
}

// EquippedOnMech pointed to by the foreign key.
func (o *Utility) EquippedOnMech(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EquippedOn),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// MechUtility pointed to by the foreign key.
func (o *Utility) MechUtility(mods ...qm.QueryMod) mechUtilityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"utility_id\" = ?", o.ID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := MechUtilities(queryMods...)
	queries.SetFrom(query.Query, "\"mech_utility\"")

	return query
}

// UtilityAccelerator pointed to by the foreign key.
func (o *Utility) UtilityAccelerator(mods ...qm.QueryMod) utilityAcceleratorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"utility_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := UtilityAccelerators(queryMods...)
	queries.SetFrom(query.Query, "\"utility_accelerator\"")

	return query
}

// UtilityAntiMissile pointed to by the foreign key.
func (o *Utility) UtilityAntiMissile(mods ...qm.QueryMod) utilityAntiMissileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"utility_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := UtilityAntiMissiles(queryMods...)
	queries.SetFrom(query.Query, "\"utility_anti_missile\"")

	return query
}

// UtilityAttackDrone pointed to by the foreign key.
func (o *Utility) UtilityAttackDrone(mods ...qm.QueryMod) utilityAttackDroneQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"utility_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := UtilityAttackDrones(queryMods...)
	queries.SetFrom(query.Query, "\"utility_attack_drone\"")

	return query
}

// UtilityRepairDrone pointed to by the foreign key.
func (o *Utility) UtilityRepairDrone(mods ...qm.QueryMod) utilityRepairDroneQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"utility_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := UtilityRepairDrones(queryMods...)
	queries.SetFrom(query.Query, "\"utility_repair_drone\"")

	return query
}

// UtilityShield pointed to by the foreign key.
func (o *Utility) UtilityShield(mods ...qm.QueryMod) utilityShieldQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"utility_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := UtilityShields(queryMods...)
	queries.SetFrom(query.Query, "\"utility_shield\"")

	return query
}

// LoadBrand allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (utilityL) LoadBrand(e boil.Executor, singular bool, maybeUtility interface{}, mods queries.Applicator) error {
	var slice []*Utility
	var object *Utility

	if singular {
		object = maybeUtility.(*Utility)
	} else {
		slice = *maybeUtility.(*[]*Utility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &utilityR{}
		}
		if !queries.IsNil(object.BrandID) {
			args = append(args, object.BrandID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &utilityR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BrandID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BrandID) {
				args = append(args, obj.BrandID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`brands`),
		qm.WhereIn(`brands.id in ?`, args...),
		qmhelper.WhereIsNull(`brands.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Brand")
	}

	var resultSlice []*Brand
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Brand")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for brands")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for brands")
	}

	if len(utilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Brand = foreign
		if foreign.R == nil {
			foreign.R = &brandR{}
		}
		foreign.R.Utilities = append(foreign.R.Utilities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BrandID, foreign.ID) {
				local.R.Brand = foreign
				if foreign.R == nil {
					foreign.R = &brandR{}
				}
				foreign.R.Utilities = append(foreign.R.Utilities, local)
				break
			}
		}
	}

	return nil
}

// LoadBlueprint allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (utilityL) LoadBlueprint(e boil.Executor, singular bool, maybeUtility interface{}, mods queries.Applicator) error {
	var slice []*Utility
	var object *Utility

	if singular {
		object = maybeUtility.(*Utility)
	} else {
		slice = *maybeUtility.(*[]*Utility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &utilityR{}
		}
		args = append(args, object.BlueprintID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &utilityR{}
			}

			for _, a := range args {
				if a == obj.BlueprintID {
					continue Outer
				}
			}

			args = append(args, obj.BlueprintID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_utility`),
		qm.WhereIn(`blueprint_utility.id in ?`, args...),
		qmhelper.WhereIsNull(`blueprint_utility.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintUtility")
	}

	var resultSlice []*BlueprintUtility
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintUtility")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_utility")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_utility")
	}

	if len(utilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Blueprint = foreign
		if foreign.R == nil {
			foreign.R = &blueprintUtilityR{}
		}
		foreign.R.BlueprintUtilities = append(foreign.R.BlueprintUtilities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlueprintID == foreign.ID {
				local.R.Blueprint = foreign
				if foreign.R == nil {
					foreign.R = &blueprintUtilityR{}
				}
				foreign.R.BlueprintUtilities = append(foreign.R.BlueprintUtilities, local)
				break
			}
		}
	}

	return nil
}

// LoadEquippedOnMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (utilityL) LoadEquippedOnMech(e boil.Executor, singular bool, maybeUtility interface{}, mods queries.Applicator) error {
	var slice []*Utility
	var object *Utility

	if singular {
		object = maybeUtility.(*Utility)
	} else {
		slice = *maybeUtility.(*[]*Utility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &utilityR{}
		}
		if !queries.IsNil(object.EquippedOn) {
			args = append(args, object.EquippedOn)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &utilityR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.EquippedOn) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.EquippedOn) {
				args = append(args, obj.EquippedOn)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(utilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EquippedOnMech = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.EquippedOnUtilities = append(foreign.R.EquippedOnUtilities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.EquippedOn, foreign.ID) {
				local.R.EquippedOnMech = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.EquippedOnUtilities = append(foreign.R.EquippedOnUtilities, local)
				break
			}
		}
	}

	return nil
}

// LoadMechUtility allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (utilityL) LoadMechUtility(e boil.Executor, singular bool, maybeUtility interface{}, mods queries.Applicator) error {
	var slice []*Utility
	var object *Utility

	if singular {
		object = maybeUtility.(*Utility)
	} else {
		slice = *maybeUtility.(*[]*Utility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &utilityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &utilityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_utility`),
		qm.WhereIn(`mech_utility.utility_id in ?`, args...),
		qmhelper.WhereIsNull(`mech_utility.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MechUtility")
	}

	var resultSlice []*MechUtility
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MechUtility")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mech_utility")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_utility")
	}

	if len(utilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MechUtility = foreign
		if foreign.R == nil {
			foreign.R = &mechUtilityR{}
		}
		foreign.R.Utility = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.UtilityID {
				local.R.MechUtility = foreign
				if foreign.R == nil {
					foreign.R = &mechUtilityR{}
				}
				foreign.R.Utility = local
				break
			}
		}
	}

	return nil
}

// LoadUtilityAccelerator allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (utilityL) LoadUtilityAccelerator(e boil.Executor, singular bool, maybeUtility interface{}, mods queries.Applicator) error {
	var slice []*Utility
	var object *Utility

	if singular {
		object = maybeUtility.(*Utility)
	} else {
		slice = *maybeUtility.(*[]*Utility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &utilityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &utilityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`utility_accelerator`),
		qm.WhereIn(`utility_accelerator.utility_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UtilityAccelerator")
	}

	var resultSlice []*UtilityAccelerator
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UtilityAccelerator")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for utility_accelerator")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for utility_accelerator")
	}

	if len(utilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UtilityAccelerator = foreign
		if foreign.R == nil {
			foreign.R = &utilityAcceleratorR{}
		}
		foreign.R.Utility = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.UtilityID {
				local.R.UtilityAccelerator = foreign
				if foreign.R == nil {
					foreign.R = &utilityAcceleratorR{}
				}
				foreign.R.Utility = local
				break
			}
		}
	}

	return nil
}

// LoadUtilityAntiMissile allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (utilityL) LoadUtilityAntiMissile(e boil.Executor, singular bool, maybeUtility interface{}, mods queries.Applicator) error {
	var slice []*Utility
	var object *Utility

	if singular {
		object = maybeUtility.(*Utility)
	} else {
		slice = *maybeUtility.(*[]*Utility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &utilityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &utilityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`utility_anti_missile`),
		qm.WhereIn(`utility_anti_missile.utility_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UtilityAntiMissile")
	}

	var resultSlice []*UtilityAntiMissile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UtilityAntiMissile")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for utility_anti_missile")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for utility_anti_missile")
	}

	if len(utilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UtilityAntiMissile = foreign
		if foreign.R == nil {
			foreign.R = &utilityAntiMissileR{}
		}
		foreign.R.Utility = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.UtilityID {
				local.R.UtilityAntiMissile = foreign
				if foreign.R == nil {
					foreign.R = &utilityAntiMissileR{}
				}
				foreign.R.Utility = local
				break
			}
		}
	}

	return nil
}

// LoadUtilityAttackDrone allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (utilityL) LoadUtilityAttackDrone(e boil.Executor, singular bool, maybeUtility interface{}, mods queries.Applicator) error {
	var slice []*Utility
	var object *Utility

	if singular {
		object = maybeUtility.(*Utility)
	} else {
		slice = *maybeUtility.(*[]*Utility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &utilityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &utilityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`utility_attack_drone`),
		qm.WhereIn(`utility_attack_drone.utility_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UtilityAttackDrone")
	}

	var resultSlice []*UtilityAttackDrone
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UtilityAttackDrone")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for utility_attack_drone")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for utility_attack_drone")
	}

	if len(utilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UtilityAttackDrone = foreign
		if foreign.R == nil {
			foreign.R = &utilityAttackDroneR{}
		}
		foreign.R.Utility = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.UtilityID {
				local.R.UtilityAttackDrone = foreign
				if foreign.R == nil {
					foreign.R = &utilityAttackDroneR{}
				}
				foreign.R.Utility = local
				break
			}
		}
	}

	return nil
}

// LoadUtilityRepairDrone allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (utilityL) LoadUtilityRepairDrone(e boil.Executor, singular bool, maybeUtility interface{}, mods queries.Applicator) error {
	var slice []*Utility
	var object *Utility

	if singular {
		object = maybeUtility.(*Utility)
	} else {
		slice = *maybeUtility.(*[]*Utility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &utilityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &utilityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`utility_repair_drone`),
		qm.WhereIn(`utility_repair_drone.utility_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UtilityRepairDrone")
	}

	var resultSlice []*UtilityRepairDrone
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UtilityRepairDrone")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for utility_repair_drone")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for utility_repair_drone")
	}

	if len(utilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UtilityRepairDrone = foreign
		if foreign.R == nil {
			foreign.R = &utilityRepairDroneR{}
		}
		foreign.R.Utility = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.UtilityID {
				local.R.UtilityRepairDrone = foreign
				if foreign.R == nil {
					foreign.R = &utilityRepairDroneR{}
				}
				foreign.R.Utility = local
				break
			}
		}
	}

	return nil
}

// LoadUtilityShield allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (utilityL) LoadUtilityShield(e boil.Executor, singular bool, maybeUtility interface{}, mods queries.Applicator) error {
	var slice []*Utility
	var object *Utility

	if singular {
		object = maybeUtility.(*Utility)
	} else {
		slice = *maybeUtility.(*[]*Utility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &utilityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &utilityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`utility_shield`),
		qm.WhereIn(`utility_shield.utility_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UtilityShield")
	}

	var resultSlice []*UtilityShield
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UtilityShield")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for utility_shield")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for utility_shield")
	}

	if len(utilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UtilityShield = foreign
		if foreign.R == nil {
			foreign.R = &utilityShieldR{}
		}
		foreign.R.Utility = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.UtilityID {
				local.R.UtilityShield = foreign
				if foreign.R == nil {
					foreign.R = &utilityShieldR{}
				}
				foreign.R.Utility = local
				break
			}
		}
	}

	return nil
}

// SetBrand of the utility to the related item.
// Sets o.R.Brand to related.
// Adds o to related.R.Utilities.
func (o *Utility) SetBrand(exec boil.Executor, insert bool, related *Brand) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"utility\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"brand_id"}),
		strmangle.WhereClause("\"", "\"", 2, utilityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BrandID, related.ID)
	if o.R == nil {
		o.R = &utilityR{
			Brand: related,
		}
	} else {
		o.R.Brand = related
	}

	if related.R == nil {
		related.R = &brandR{
			Utilities: UtilitySlice{o},
		}
	} else {
		related.R.Utilities = append(related.R.Utilities, o)
	}

	return nil
}

// RemoveBrand relationship.
// Sets o.R.Brand to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Utility) RemoveBrand(exec boil.Executor, related *Brand) error {
	var err error

	queries.SetScanner(&o.BrandID, nil)
	if _, err = o.Update(exec, boil.Whitelist("brand_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Brand = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Utilities {
		if queries.Equal(o.BrandID, ri.BrandID) {
			continue
		}

		ln := len(related.R.Utilities)
		if ln > 1 && i < ln-1 {
			related.R.Utilities[i] = related.R.Utilities[ln-1]
		}
		related.R.Utilities = related.R.Utilities[:ln-1]
		break
	}
	return nil
}

// SetBlueprint of the utility to the related item.
// Sets o.R.Blueprint to related.
// Adds o to related.R.BlueprintUtilities.
func (o *Utility) SetBlueprint(exec boil.Executor, insert bool, related *BlueprintUtility) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"utility\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_id"}),
		strmangle.WhereClause("\"", "\"", 2, utilityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlueprintID = related.ID
	if o.R == nil {
		o.R = &utilityR{
			Blueprint: related,
		}
	} else {
		o.R.Blueprint = related
	}

	if related.R == nil {
		related.R = &blueprintUtilityR{
			BlueprintUtilities: UtilitySlice{o},
		}
	} else {
		related.R.BlueprintUtilities = append(related.R.BlueprintUtilities, o)
	}

	return nil
}

// SetEquippedOnMech of the utility to the related item.
// Sets o.R.EquippedOnMech to related.
// Adds o to related.R.EquippedOnUtilities.
func (o *Utility) SetEquippedOnMech(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"utility\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"equipped_on"}),
		strmangle.WhereClause("\"", "\"", 2, utilityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.EquippedOn, related.ID)
	if o.R == nil {
		o.R = &utilityR{
			EquippedOnMech: related,
		}
	} else {
		o.R.EquippedOnMech = related
	}

	if related.R == nil {
		related.R = &mechR{
			EquippedOnUtilities: UtilitySlice{o},
		}
	} else {
		related.R.EquippedOnUtilities = append(related.R.EquippedOnUtilities, o)
	}

	return nil
}

// RemoveEquippedOnMech relationship.
// Sets o.R.EquippedOnMech to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Utility) RemoveEquippedOnMech(exec boil.Executor, related *Mech) error {
	var err error

	queries.SetScanner(&o.EquippedOn, nil)
	if _, err = o.Update(exec, boil.Whitelist("equipped_on")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.EquippedOnMech = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.EquippedOnUtilities {
		if queries.Equal(o.EquippedOn, ri.EquippedOn) {
			continue
		}

		ln := len(related.R.EquippedOnUtilities)
		if ln > 1 && i < ln-1 {
			related.R.EquippedOnUtilities[i] = related.R.EquippedOnUtilities[ln-1]
		}
		related.R.EquippedOnUtilities = related.R.EquippedOnUtilities[:ln-1]
		break
	}
	return nil
}

// SetMechUtility of the utility to the related item.
// Sets o.R.MechUtility to related.
// Adds o to related.R.Utility.
func (o *Utility) SetMechUtility(exec boil.Executor, insert bool, related *MechUtility) error {
	var err error

	if insert {
		related.UtilityID = o.ID

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"mech_utility\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"utility_id"}),
			strmangle.WhereClause("\"", "\"", 2, mechUtilityPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.UtilityID = o.ID

	}

	if o.R == nil {
		o.R = &utilityR{
			MechUtility: related,
		}
	} else {
		o.R.MechUtility = related
	}

	if related.R == nil {
		related.R = &mechUtilityR{
			Utility: o,
		}
	} else {
		related.R.Utility = o
	}
	return nil
}

// SetUtilityAccelerator of the utility to the related item.
// Sets o.R.UtilityAccelerator to related.
// Adds o to related.R.Utility.
func (o *Utility) SetUtilityAccelerator(exec boil.Executor, insert bool, related *UtilityAccelerator) error {
	var err error

	if insert {
		related.UtilityID = o.ID

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"utility_accelerator\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"utility_id"}),
			strmangle.WhereClause("\"", "\"", 2, utilityAcceleratorPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.UtilityID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.UtilityID = o.ID

	}

	if o.R == nil {
		o.R = &utilityR{
			UtilityAccelerator: related,
		}
	} else {
		o.R.UtilityAccelerator = related
	}

	if related.R == nil {
		related.R = &utilityAcceleratorR{
			Utility: o,
		}
	} else {
		related.R.Utility = o
	}
	return nil
}

// SetUtilityAntiMissile of the utility to the related item.
// Sets o.R.UtilityAntiMissile to related.
// Adds o to related.R.Utility.
func (o *Utility) SetUtilityAntiMissile(exec boil.Executor, insert bool, related *UtilityAntiMissile) error {
	var err error

	if insert {
		related.UtilityID = o.ID

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"utility_anti_missile\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"utility_id"}),
			strmangle.WhereClause("\"", "\"", 2, utilityAntiMissilePrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.UtilityID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.UtilityID = o.ID

	}

	if o.R == nil {
		o.R = &utilityR{
			UtilityAntiMissile: related,
		}
	} else {
		o.R.UtilityAntiMissile = related
	}

	if related.R == nil {
		related.R = &utilityAntiMissileR{
			Utility: o,
		}
	} else {
		related.R.Utility = o
	}
	return nil
}

// SetUtilityAttackDrone of the utility to the related item.
// Sets o.R.UtilityAttackDrone to related.
// Adds o to related.R.Utility.
func (o *Utility) SetUtilityAttackDrone(exec boil.Executor, insert bool, related *UtilityAttackDrone) error {
	var err error

	if insert {
		related.UtilityID = o.ID

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"utility_attack_drone\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"utility_id"}),
			strmangle.WhereClause("\"", "\"", 2, utilityAttackDronePrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.UtilityID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.UtilityID = o.ID

	}

	if o.R == nil {
		o.R = &utilityR{
			UtilityAttackDrone: related,
		}
	} else {
		o.R.UtilityAttackDrone = related
	}

	if related.R == nil {
		related.R = &utilityAttackDroneR{
			Utility: o,
		}
	} else {
		related.R.Utility = o
	}
	return nil
}

// SetUtilityRepairDrone of the utility to the related item.
// Sets o.R.UtilityRepairDrone to related.
// Adds o to related.R.Utility.
func (o *Utility) SetUtilityRepairDrone(exec boil.Executor, insert bool, related *UtilityRepairDrone) error {
	var err error

	if insert {
		related.UtilityID = o.ID

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"utility_repair_drone\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"utility_id"}),
			strmangle.WhereClause("\"", "\"", 2, utilityRepairDronePrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.UtilityID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.UtilityID = o.ID

	}

	if o.R == nil {
		o.R = &utilityR{
			UtilityRepairDrone: related,
		}
	} else {
		o.R.UtilityRepairDrone = related
	}

	if related.R == nil {
		related.R = &utilityRepairDroneR{
			Utility: o,
		}
	} else {
		related.R.Utility = o
	}
	return nil
}

// SetUtilityShield of the utility to the related item.
// Sets o.R.UtilityShield to related.
// Adds o to related.R.Utility.
func (o *Utility) SetUtilityShield(exec boil.Executor, insert bool, related *UtilityShield) error {
	var err error

	if insert {
		related.UtilityID = o.ID

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"utility_shield\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"utility_id"}),
			strmangle.WhereClause("\"", "\"", 2, utilityShieldPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.UtilityID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.UtilityID = o.ID

	}

	if o.R == nil {
		o.R = &utilityR{
			UtilityShield: related,
		}
	} else {
		o.R.UtilityShield = related
	}

	if related.R == nil {
		related.R = &utilityShieldR{
			Utility: o,
		}
	} else {
		related.R.Utility = o
	}
	return nil
}

// Utilities retrieves all the records using an executor.
func Utilities(mods ...qm.QueryMod) utilityQuery {
	mods = append(mods, qm.From("\"utility\""), qmhelper.WhereIsNull("\"utility\".\"deleted_at\""))
	return utilityQuery{NewQuery(mods...)}
}

// FindUtility retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUtility(exec boil.Executor, iD string, selectCols ...string) (*Utility, error) {
	utilityObj := &Utility{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"utility\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, utilityObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from utility")
	}

	if err = utilityObj.doAfterSelectHooks(exec); err != nil {
		return utilityObj, err
	}

	return utilityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Utility) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no utility provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(utilityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	utilityInsertCacheMut.RLock()
	cache, cached := utilityInsertCache[key]
	utilityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			utilityAllColumns,
			utilityColumnsWithDefault,
			utilityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(utilityType, utilityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(utilityType, utilityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"utility\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"utility\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into utility")
	}

	if !cached {
		utilityInsertCacheMut.Lock()
		utilityInsertCache[key] = cache
		utilityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Utility.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Utility) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	utilityUpdateCacheMut.RLock()
	cache, cached := utilityUpdateCache[key]
	utilityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			utilityAllColumns,
			utilityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update utility, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"utility\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, utilityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(utilityType, utilityMapping, append(wl, utilityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update utility row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for utility")
	}

	if !cached {
		utilityUpdateCacheMut.Lock()
		utilityUpdateCache[key] = cache
		utilityUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q utilityQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for utility")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for utility")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UtilitySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), utilityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"utility\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, utilityPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in utility slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all utility")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Utility) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no utility provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(utilityColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	utilityUpsertCacheMut.RLock()
	cache, cached := utilityUpsertCache[key]
	utilityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			utilityAllColumns,
			utilityColumnsWithDefault,
			utilityColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			utilityAllColumns,
			utilityPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert utility, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(utilityPrimaryKeyColumns))
			copy(conflict, utilityPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"utility\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(utilityType, utilityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(utilityType, utilityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert utility")
	}

	if !cached {
		utilityUpsertCacheMut.Lock()
		utilityUpsertCache[key] = cache
		utilityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Utility record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Utility) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Utility provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), utilityPrimaryKeyMapping)
		sql = "DELETE FROM \"utility\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"utility\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(utilityType, utilityMapping, append(wl, utilityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from utility")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for utility")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q utilityQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no utilityQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from utility")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for utility")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UtilitySlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(utilityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), utilityPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"utility\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, utilityPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), utilityPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"utility\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, utilityPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from utility slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for utility")
	}

	if len(utilityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Utility) Reload(exec boil.Executor) error {
	ret, err := FindUtility(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UtilitySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UtilitySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), utilityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"utility\".* FROM \"utility\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, utilityPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in UtilitySlice")
	}

	*o = slice

	return nil
}

// UtilityExists checks if the Utility row exists.
func UtilityExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"utility\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if utility exists")
	}

	return exists, nil
}
