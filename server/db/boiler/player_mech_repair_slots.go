// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PlayerMechRepairSlot is an object representing the database table.
type PlayerMechRepairSlot struct {
	ID             string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	PlayerID       string    `boiler:"player_id" boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	MechID         string    `boiler:"mech_id" boil:"mech_id" json:"mech_id" toml:"mech_id" yaml:"mech_id"`
	RepairCaseID   string    `boiler:"repair_case_id" boil:"repair_case_id" json:"repair_case_id" toml:"repair_case_id" yaml:"repair_case_id"`
	Status         string    `boiler:"status" boil:"status" json:"status" toml:"status" yaml:"status"`
	NextRepairTime null.Time `boiler:"next_repair_time" boil:"next_repair_time" json:"next_repair_time,omitempty" toml:"next_repair_time" yaml:"next_repair_time,omitempty"`
	SlotNumber     int       `boiler:"slot_number" boil:"slot_number" json:"slot_number" toml:"slot_number" yaml:"slot_number"`
	CreatedAt      time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt      null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *playerMechRepairSlotR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L playerMechRepairSlotL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlayerMechRepairSlotColumns = struct {
	ID             string
	PlayerID       string
	MechID         string
	RepairCaseID   string
	Status         string
	NextRepairTime string
	SlotNumber     string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ID:             "id",
	PlayerID:       "player_id",
	MechID:         "mech_id",
	RepairCaseID:   "repair_case_id",
	Status:         "status",
	NextRepairTime: "next_repair_time",
	SlotNumber:     "slot_number",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
}

var PlayerMechRepairSlotTableColumns = struct {
	ID             string
	PlayerID       string
	MechID         string
	RepairCaseID   string
	Status         string
	NextRepairTime string
	SlotNumber     string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ID:             "player_mech_repair_slots.id",
	PlayerID:       "player_mech_repair_slots.player_id",
	MechID:         "player_mech_repair_slots.mech_id",
	RepairCaseID:   "player_mech_repair_slots.repair_case_id",
	Status:         "player_mech_repair_slots.status",
	NextRepairTime: "player_mech_repair_slots.next_repair_time",
	SlotNumber:     "player_mech_repair_slots.slot_number",
	CreatedAt:      "player_mech_repair_slots.created_at",
	UpdatedAt:      "player_mech_repair_slots.updated_at",
	DeletedAt:      "player_mech_repair_slots.deleted_at",
}

// Generated where

var PlayerMechRepairSlotWhere = struct {
	ID             whereHelperstring
	PlayerID       whereHelperstring
	MechID         whereHelperstring
	RepairCaseID   whereHelperstring
	Status         whereHelperstring
	NextRepairTime whereHelpernull_Time
	SlotNumber     whereHelperint
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	DeletedAt      whereHelpernull_Time
}{
	ID:             whereHelperstring{field: "\"player_mech_repair_slots\".\"id\""},
	PlayerID:       whereHelperstring{field: "\"player_mech_repair_slots\".\"player_id\""},
	MechID:         whereHelperstring{field: "\"player_mech_repair_slots\".\"mech_id\""},
	RepairCaseID:   whereHelperstring{field: "\"player_mech_repair_slots\".\"repair_case_id\""},
	Status:         whereHelperstring{field: "\"player_mech_repair_slots\".\"status\""},
	NextRepairTime: whereHelpernull_Time{field: "\"player_mech_repair_slots\".\"next_repair_time\""},
	SlotNumber:     whereHelperint{field: "\"player_mech_repair_slots\".\"slot_number\""},
	CreatedAt:      whereHelpertime_Time{field: "\"player_mech_repair_slots\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"player_mech_repair_slots\".\"updated_at\""},
	DeletedAt:      whereHelpernull_Time{field: "\"player_mech_repair_slots\".\"deleted_at\""},
}

// PlayerMechRepairSlotRels is where relationship names are stored.
var PlayerMechRepairSlotRels = struct {
	Mech       string
	Player     string
	RepairCase string
}{
	Mech:       "Mech",
	Player:     "Player",
	RepairCase: "RepairCase",
}

// playerMechRepairSlotR is where relationships are stored.
type playerMechRepairSlotR struct {
	Mech       *Mech       `boiler:"Mech" boil:"Mech" json:"Mech" toml:"Mech" yaml:"Mech"`
	Player     *Player     `boiler:"Player" boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
	RepairCase *RepairCase `boiler:"RepairCase" boil:"RepairCase" json:"RepairCase" toml:"RepairCase" yaml:"RepairCase"`
}

// NewStruct creates a new relationship struct
func (*playerMechRepairSlotR) NewStruct() *playerMechRepairSlotR {
	return &playerMechRepairSlotR{}
}

// playerMechRepairSlotL is where Load methods for each relationship are stored.
type playerMechRepairSlotL struct{}

var (
	playerMechRepairSlotAllColumns            = []string{"id", "player_id", "mech_id", "repair_case_id", "status", "next_repair_time", "slot_number", "created_at", "updated_at", "deleted_at"}
	playerMechRepairSlotColumnsWithoutDefault = []string{"player_id", "mech_id", "repair_case_id"}
	playerMechRepairSlotColumnsWithDefault    = []string{"id", "status", "next_repair_time", "slot_number", "created_at", "updated_at", "deleted_at"}
	playerMechRepairSlotPrimaryKeyColumns     = []string{"id"}
	playerMechRepairSlotGeneratedColumns      = []string{}
)

type (
	// PlayerMechRepairSlotSlice is an alias for a slice of pointers to PlayerMechRepairSlot.
	// This should almost always be used instead of []PlayerMechRepairSlot.
	PlayerMechRepairSlotSlice []*PlayerMechRepairSlot
	// PlayerMechRepairSlotHook is the signature for custom PlayerMechRepairSlot hook methods
	PlayerMechRepairSlotHook func(boil.Executor, *PlayerMechRepairSlot) error

	playerMechRepairSlotQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playerMechRepairSlotType                 = reflect.TypeOf(&PlayerMechRepairSlot{})
	playerMechRepairSlotMapping              = queries.MakeStructMapping(playerMechRepairSlotType)
	playerMechRepairSlotPrimaryKeyMapping, _ = queries.BindMapping(playerMechRepairSlotType, playerMechRepairSlotMapping, playerMechRepairSlotPrimaryKeyColumns)
	playerMechRepairSlotInsertCacheMut       sync.RWMutex
	playerMechRepairSlotInsertCache          = make(map[string]insertCache)
	playerMechRepairSlotUpdateCacheMut       sync.RWMutex
	playerMechRepairSlotUpdateCache          = make(map[string]updateCache)
	playerMechRepairSlotUpsertCacheMut       sync.RWMutex
	playerMechRepairSlotUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var playerMechRepairSlotAfterSelectHooks []PlayerMechRepairSlotHook

var playerMechRepairSlotBeforeInsertHooks []PlayerMechRepairSlotHook
var playerMechRepairSlotAfterInsertHooks []PlayerMechRepairSlotHook

var playerMechRepairSlotBeforeUpdateHooks []PlayerMechRepairSlotHook
var playerMechRepairSlotAfterUpdateHooks []PlayerMechRepairSlotHook

var playerMechRepairSlotBeforeDeleteHooks []PlayerMechRepairSlotHook
var playerMechRepairSlotAfterDeleteHooks []PlayerMechRepairSlotHook

var playerMechRepairSlotBeforeUpsertHooks []PlayerMechRepairSlotHook
var playerMechRepairSlotAfterUpsertHooks []PlayerMechRepairSlotHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PlayerMechRepairSlot) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range playerMechRepairSlotAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PlayerMechRepairSlot) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerMechRepairSlotBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PlayerMechRepairSlot) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerMechRepairSlotAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PlayerMechRepairSlot) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range playerMechRepairSlotBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PlayerMechRepairSlot) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range playerMechRepairSlotAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PlayerMechRepairSlot) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range playerMechRepairSlotBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PlayerMechRepairSlot) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range playerMechRepairSlotAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PlayerMechRepairSlot) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerMechRepairSlotBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PlayerMechRepairSlot) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerMechRepairSlotAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlayerMechRepairSlotHook registers your hook function for all future operations.
func AddPlayerMechRepairSlotHook(hookPoint boil.HookPoint, playerMechRepairSlotHook PlayerMechRepairSlotHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		playerMechRepairSlotAfterSelectHooks = append(playerMechRepairSlotAfterSelectHooks, playerMechRepairSlotHook)
	case boil.BeforeInsertHook:
		playerMechRepairSlotBeforeInsertHooks = append(playerMechRepairSlotBeforeInsertHooks, playerMechRepairSlotHook)
	case boil.AfterInsertHook:
		playerMechRepairSlotAfterInsertHooks = append(playerMechRepairSlotAfterInsertHooks, playerMechRepairSlotHook)
	case boil.BeforeUpdateHook:
		playerMechRepairSlotBeforeUpdateHooks = append(playerMechRepairSlotBeforeUpdateHooks, playerMechRepairSlotHook)
	case boil.AfterUpdateHook:
		playerMechRepairSlotAfterUpdateHooks = append(playerMechRepairSlotAfterUpdateHooks, playerMechRepairSlotHook)
	case boil.BeforeDeleteHook:
		playerMechRepairSlotBeforeDeleteHooks = append(playerMechRepairSlotBeforeDeleteHooks, playerMechRepairSlotHook)
	case boil.AfterDeleteHook:
		playerMechRepairSlotAfterDeleteHooks = append(playerMechRepairSlotAfterDeleteHooks, playerMechRepairSlotHook)
	case boil.BeforeUpsertHook:
		playerMechRepairSlotBeforeUpsertHooks = append(playerMechRepairSlotBeforeUpsertHooks, playerMechRepairSlotHook)
	case boil.AfterUpsertHook:
		playerMechRepairSlotAfterUpsertHooks = append(playerMechRepairSlotAfterUpsertHooks, playerMechRepairSlotHook)
	}
}

// One returns a single playerMechRepairSlot record from the query.
func (q playerMechRepairSlotQuery) One(exec boil.Executor) (*PlayerMechRepairSlot, error) {
	o := &PlayerMechRepairSlot{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for player_mech_repair_slots")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PlayerMechRepairSlot records from the query.
func (q playerMechRepairSlotQuery) All(exec boil.Executor) (PlayerMechRepairSlotSlice, error) {
	var o []*PlayerMechRepairSlot

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to PlayerMechRepairSlot slice")
	}

	if len(playerMechRepairSlotAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PlayerMechRepairSlot records in the query.
func (q playerMechRepairSlotQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count player_mech_repair_slots rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q playerMechRepairSlotQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if player_mech_repair_slots exists")
	}

	return count > 0, nil
}

// Mech pointed to by the foreign key.
func (o *PlayerMechRepairSlot) Mech(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MechID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// Player pointed to by the foreign key.
func (o *PlayerMechRepairSlot) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// RepairCase pointed to by the foreign key.
func (o *PlayerMechRepairSlot) RepairCase(mods ...qm.QueryMod) repairCaseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RepairCaseID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := RepairCases(queryMods...)
	queries.SetFrom(query.Query, "\"repair_cases\"")

	return query
}

// LoadMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerMechRepairSlotL) LoadMech(e boil.Executor, singular bool, maybePlayerMechRepairSlot interface{}, mods queries.Applicator) error {
	var slice []*PlayerMechRepairSlot
	var object *PlayerMechRepairSlot

	if singular {
		object = maybePlayerMechRepairSlot.(*PlayerMechRepairSlot)
	} else {
		slice = *maybePlayerMechRepairSlot.(*[]*PlayerMechRepairSlot)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerMechRepairSlotR{}
		}
		args = append(args, object.MechID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerMechRepairSlotR{}
			}

			for _, a := range args {
				if a == obj.MechID {
					continue Outer
				}
			}

			args = append(args, obj.MechID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(playerMechRepairSlotAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Mech = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.PlayerMechRepairSlots = append(foreign.R.PlayerMechRepairSlots, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MechID == foreign.ID {
				local.R.Mech = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.PlayerMechRepairSlots = append(foreign.R.PlayerMechRepairSlots, local)
				break
			}
		}
	}

	return nil
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerMechRepairSlotL) LoadPlayer(e boil.Executor, singular bool, maybePlayerMechRepairSlot interface{}, mods queries.Applicator) error {
	var slice []*PlayerMechRepairSlot
	var object *PlayerMechRepairSlot

	if singular {
		object = maybePlayerMechRepairSlot.(*PlayerMechRepairSlot)
	} else {
		slice = *maybePlayerMechRepairSlot.(*[]*PlayerMechRepairSlot)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerMechRepairSlotR{}
		}
		args = append(args, object.PlayerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerMechRepairSlotR{}
			}

			for _, a := range args {
				if a == obj.PlayerID {
					continue Outer
				}
			}

			args = append(args, obj.PlayerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(playerMechRepairSlotAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.PlayerMechRepairSlots = append(foreign.R.PlayerMechRepairSlots, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.ID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.PlayerMechRepairSlots = append(foreign.R.PlayerMechRepairSlots, local)
				break
			}
		}
	}

	return nil
}

// LoadRepairCase allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerMechRepairSlotL) LoadRepairCase(e boil.Executor, singular bool, maybePlayerMechRepairSlot interface{}, mods queries.Applicator) error {
	var slice []*PlayerMechRepairSlot
	var object *PlayerMechRepairSlot

	if singular {
		object = maybePlayerMechRepairSlot.(*PlayerMechRepairSlot)
	} else {
		slice = *maybePlayerMechRepairSlot.(*[]*PlayerMechRepairSlot)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerMechRepairSlotR{}
		}
		args = append(args, object.RepairCaseID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerMechRepairSlotR{}
			}

			for _, a := range args {
				if a == obj.RepairCaseID {
					continue Outer
				}
			}

			args = append(args, obj.RepairCaseID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`repair_cases`),
		qm.WhereIn(`repair_cases.id in ?`, args...),
		qmhelper.WhereIsNull(`repair_cases.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RepairCase")
	}

	var resultSlice []*RepairCase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RepairCase")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for repair_cases")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for repair_cases")
	}

	if len(playerMechRepairSlotAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RepairCase = foreign
		if foreign.R == nil {
			foreign.R = &repairCaseR{}
		}
		foreign.R.PlayerMechRepairSlots = append(foreign.R.PlayerMechRepairSlots, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RepairCaseID == foreign.ID {
				local.R.RepairCase = foreign
				if foreign.R == nil {
					foreign.R = &repairCaseR{}
				}
				foreign.R.PlayerMechRepairSlots = append(foreign.R.PlayerMechRepairSlots, local)
				break
			}
		}
	}

	return nil
}

// SetMech of the playerMechRepairSlot to the related item.
// Sets o.R.Mech to related.
// Adds o to related.R.PlayerMechRepairSlots.
func (o *PlayerMechRepairSlot) SetMech(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"player_mech_repair_slots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerMechRepairSlotPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MechID = related.ID
	if o.R == nil {
		o.R = &playerMechRepairSlotR{
			Mech: related,
		}
	} else {
		o.R.Mech = related
	}

	if related.R == nil {
		related.R = &mechR{
			PlayerMechRepairSlots: PlayerMechRepairSlotSlice{o},
		}
	} else {
		related.R.PlayerMechRepairSlots = append(related.R.PlayerMechRepairSlots, o)
	}

	return nil
}

// SetPlayer of the playerMechRepairSlot to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.PlayerMechRepairSlots.
func (o *PlayerMechRepairSlot) SetPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"player_mech_repair_slots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerMechRepairSlotPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.ID
	if o.R == nil {
		o.R = &playerMechRepairSlotR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			PlayerMechRepairSlots: PlayerMechRepairSlotSlice{o},
		}
	} else {
		related.R.PlayerMechRepairSlots = append(related.R.PlayerMechRepairSlots, o)
	}

	return nil
}

// SetRepairCase of the playerMechRepairSlot to the related item.
// Sets o.R.RepairCase to related.
// Adds o to related.R.PlayerMechRepairSlots.
func (o *PlayerMechRepairSlot) SetRepairCase(exec boil.Executor, insert bool, related *RepairCase) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"player_mech_repair_slots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"repair_case_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerMechRepairSlotPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RepairCaseID = related.ID
	if o.R == nil {
		o.R = &playerMechRepairSlotR{
			RepairCase: related,
		}
	} else {
		o.R.RepairCase = related
	}

	if related.R == nil {
		related.R = &repairCaseR{
			PlayerMechRepairSlots: PlayerMechRepairSlotSlice{o},
		}
	} else {
		related.R.PlayerMechRepairSlots = append(related.R.PlayerMechRepairSlots, o)
	}

	return nil
}

// PlayerMechRepairSlots retrieves all the records using an executor.
func PlayerMechRepairSlots(mods ...qm.QueryMod) playerMechRepairSlotQuery {
	mods = append(mods, qm.From("\"player_mech_repair_slots\""), qmhelper.WhereIsNull("\"player_mech_repair_slots\".\"deleted_at\""))
	return playerMechRepairSlotQuery{NewQuery(mods...)}
}

// FindPlayerMechRepairSlot retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlayerMechRepairSlot(exec boil.Executor, iD string, selectCols ...string) (*PlayerMechRepairSlot, error) {
	playerMechRepairSlotObj := &PlayerMechRepairSlot{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"player_mech_repair_slots\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, playerMechRepairSlotObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from player_mech_repair_slots")
	}

	if err = playerMechRepairSlotObj.doAfterSelectHooks(exec); err != nil {
		return playerMechRepairSlotObj, err
	}

	return playerMechRepairSlotObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PlayerMechRepairSlot) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no player_mech_repair_slots provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerMechRepairSlotColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	playerMechRepairSlotInsertCacheMut.RLock()
	cache, cached := playerMechRepairSlotInsertCache[key]
	playerMechRepairSlotInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			playerMechRepairSlotAllColumns,
			playerMechRepairSlotColumnsWithDefault,
			playerMechRepairSlotColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(playerMechRepairSlotType, playerMechRepairSlotMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(playerMechRepairSlotType, playerMechRepairSlotMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"player_mech_repair_slots\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"player_mech_repair_slots\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into player_mech_repair_slots")
	}

	if !cached {
		playerMechRepairSlotInsertCacheMut.Lock()
		playerMechRepairSlotInsertCache[key] = cache
		playerMechRepairSlotInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the PlayerMechRepairSlot.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PlayerMechRepairSlot) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	playerMechRepairSlotUpdateCacheMut.RLock()
	cache, cached := playerMechRepairSlotUpdateCache[key]
	playerMechRepairSlotUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			playerMechRepairSlotAllColumns,
			playerMechRepairSlotPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update player_mech_repair_slots, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"player_mech_repair_slots\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, playerMechRepairSlotPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(playerMechRepairSlotType, playerMechRepairSlotMapping, append(wl, playerMechRepairSlotPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update player_mech_repair_slots row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for player_mech_repair_slots")
	}

	if !cached {
		playerMechRepairSlotUpdateCacheMut.Lock()
		playerMechRepairSlotUpdateCache[key] = cache
		playerMechRepairSlotUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q playerMechRepairSlotQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for player_mech_repair_slots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for player_mech_repair_slots")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlayerMechRepairSlotSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerMechRepairSlotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"player_mech_repair_slots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, playerMechRepairSlotPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in playerMechRepairSlot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all playerMechRepairSlot")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PlayerMechRepairSlot) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no player_mech_repair_slots provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerMechRepairSlotColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	playerMechRepairSlotUpsertCacheMut.RLock()
	cache, cached := playerMechRepairSlotUpsertCache[key]
	playerMechRepairSlotUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			playerMechRepairSlotAllColumns,
			playerMechRepairSlotColumnsWithDefault,
			playerMechRepairSlotColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			playerMechRepairSlotAllColumns,
			playerMechRepairSlotPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert player_mech_repair_slots, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(playerMechRepairSlotPrimaryKeyColumns))
			copy(conflict, playerMechRepairSlotPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"player_mech_repair_slots\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(playerMechRepairSlotType, playerMechRepairSlotMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(playerMechRepairSlotType, playerMechRepairSlotMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert player_mech_repair_slots")
	}

	if !cached {
		playerMechRepairSlotUpsertCacheMut.Lock()
		playerMechRepairSlotUpsertCache[key] = cache
		playerMechRepairSlotUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single PlayerMechRepairSlot record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PlayerMechRepairSlot) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no PlayerMechRepairSlot provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), playerMechRepairSlotPrimaryKeyMapping)
		sql = "DELETE FROM \"player_mech_repair_slots\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"player_mech_repair_slots\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(playerMechRepairSlotType, playerMechRepairSlotMapping, append(wl, playerMechRepairSlotPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from player_mech_repair_slots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for player_mech_repair_slots")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q playerMechRepairSlotQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no playerMechRepairSlotQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from player_mech_repair_slots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for player_mech_repair_slots")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlayerMechRepairSlotSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(playerMechRepairSlotBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerMechRepairSlotPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"player_mech_repair_slots\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerMechRepairSlotPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerMechRepairSlotPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"player_mech_repair_slots\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, playerMechRepairSlotPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from playerMechRepairSlot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for player_mech_repair_slots")
	}

	if len(playerMechRepairSlotAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PlayerMechRepairSlot) Reload(exec boil.Executor) error {
	ret, err := FindPlayerMechRepairSlot(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlayerMechRepairSlotSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlayerMechRepairSlotSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerMechRepairSlotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"player_mech_repair_slots\".* FROM \"player_mech_repair_slots\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerMechRepairSlotPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in PlayerMechRepairSlotSlice")
	}

	*o = slice

	return nil
}

// PlayerMechRepairSlotExists checks if the PlayerMechRepairSlot row exists.
func PlayerMechRepairSlotExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"player_mech_repair_slots\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if player_mech_repair_slots exists")
	}

	return exists, nil
}
