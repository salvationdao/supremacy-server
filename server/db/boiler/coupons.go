// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Coupon is an object representing the database table.
type Coupon struct {
	ID         string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Code       null.String `boiler:"code" boil:"code" json:"code,omitempty" toml:"code" yaml:"code,omitempty"`
	Redeemed   bool        `boiler:"redeemed" boil:"redeemed" json:"redeemed" toml:"redeemed" yaml:"redeemed"`
	ExpiryDate time.Time   `boiler:"expiry_date" boil:"expiry_date" json:"expiry_date" toml:"expiry_date" yaml:"expiry_date"`
	CreatedAt  time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *couponR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L couponL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CouponColumns = struct {
	ID         string
	Code       string
	Redeemed   string
	ExpiryDate string
	CreatedAt  string
}{
	ID:         "id",
	Code:       "code",
	Redeemed:   "redeemed",
	ExpiryDate: "expiry_date",
	CreatedAt:  "created_at",
}

var CouponTableColumns = struct {
	ID         string
	Code       string
	Redeemed   string
	ExpiryDate string
	CreatedAt  string
}{
	ID:         "coupons.id",
	Code:       "coupons.code",
	Redeemed:   "coupons.redeemed",
	ExpiryDate: "coupons.expiry_date",
	CreatedAt:  "coupons.created_at",
}

// Generated where

var CouponWhere = struct {
	ID         whereHelperstring
	Code       whereHelpernull_String
	Redeemed   whereHelperbool
	ExpiryDate whereHelpertime_Time
	CreatedAt  whereHelpertime_Time
}{
	ID:         whereHelperstring{field: "\"coupons\".\"id\""},
	Code:       whereHelpernull_String{field: "\"coupons\".\"code\""},
	Redeemed:   whereHelperbool{field: "\"coupons\".\"redeemed\""},
	ExpiryDate: whereHelpertime_Time{field: "\"coupons\".\"expiry_date\""},
	CreatedAt:  whereHelpertime_Time{field: "\"coupons\".\"created_at\""},
}

// CouponRels is where relationship names are stored.
var CouponRels = struct {
	CouponItems string
}{
	CouponItems: "CouponItems",
}

// couponR is where relationships are stored.
type couponR struct {
	CouponItems CouponItemSlice `boiler:"CouponItems" boil:"CouponItems" json:"CouponItems" toml:"CouponItems" yaml:"CouponItems"`
}

// NewStruct creates a new relationship struct
func (*couponR) NewStruct() *couponR {
	return &couponR{}
}

// couponL is where Load methods for each relationship are stored.
type couponL struct{}

var (
	couponAllColumns            = []string{"id", "code", "redeemed", "expiry_date", "created_at"}
	couponColumnsWithoutDefault = []string{}
	couponColumnsWithDefault    = []string{"id", "code", "redeemed", "expiry_date", "created_at"}
	couponPrimaryKeyColumns     = []string{"id"}
	couponGeneratedColumns      = []string{}
)

type (
	// CouponSlice is an alias for a slice of pointers to Coupon.
	// This should almost always be used instead of []Coupon.
	CouponSlice []*Coupon
	// CouponHook is the signature for custom Coupon hook methods
	CouponHook func(boil.Executor, *Coupon) error

	couponQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	couponType                 = reflect.TypeOf(&Coupon{})
	couponMapping              = queries.MakeStructMapping(couponType)
	couponPrimaryKeyMapping, _ = queries.BindMapping(couponType, couponMapping, couponPrimaryKeyColumns)
	couponInsertCacheMut       sync.RWMutex
	couponInsertCache          = make(map[string]insertCache)
	couponUpdateCacheMut       sync.RWMutex
	couponUpdateCache          = make(map[string]updateCache)
	couponUpsertCacheMut       sync.RWMutex
	couponUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var couponAfterSelectHooks []CouponHook

var couponBeforeInsertHooks []CouponHook
var couponAfterInsertHooks []CouponHook

var couponBeforeUpdateHooks []CouponHook
var couponAfterUpdateHooks []CouponHook

var couponBeforeDeleteHooks []CouponHook
var couponAfterDeleteHooks []CouponHook

var couponBeforeUpsertHooks []CouponHook
var couponAfterUpsertHooks []CouponHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Coupon) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range couponAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Coupon) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range couponBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Coupon) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range couponAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Coupon) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range couponBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Coupon) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range couponAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Coupon) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range couponBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Coupon) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range couponAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Coupon) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range couponBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Coupon) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range couponAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCouponHook registers your hook function for all future operations.
func AddCouponHook(hookPoint boil.HookPoint, couponHook CouponHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		couponAfterSelectHooks = append(couponAfterSelectHooks, couponHook)
	case boil.BeforeInsertHook:
		couponBeforeInsertHooks = append(couponBeforeInsertHooks, couponHook)
	case boil.AfterInsertHook:
		couponAfterInsertHooks = append(couponAfterInsertHooks, couponHook)
	case boil.BeforeUpdateHook:
		couponBeforeUpdateHooks = append(couponBeforeUpdateHooks, couponHook)
	case boil.AfterUpdateHook:
		couponAfterUpdateHooks = append(couponAfterUpdateHooks, couponHook)
	case boil.BeforeDeleteHook:
		couponBeforeDeleteHooks = append(couponBeforeDeleteHooks, couponHook)
	case boil.AfterDeleteHook:
		couponAfterDeleteHooks = append(couponAfterDeleteHooks, couponHook)
	case boil.BeforeUpsertHook:
		couponBeforeUpsertHooks = append(couponBeforeUpsertHooks, couponHook)
	case boil.AfterUpsertHook:
		couponAfterUpsertHooks = append(couponAfterUpsertHooks, couponHook)
	}
}

// One returns a single coupon record from the query.
func (q couponQuery) One(exec boil.Executor) (*Coupon, error) {
	o := &Coupon{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for coupons")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Coupon records from the query.
func (q couponQuery) All(exec boil.Executor) (CouponSlice, error) {
	var o []*Coupon

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Coupon slice")
	}

	if len(couponAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Coupon records in the query.
func (q couponQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count coupons rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q couponQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if coupons exists")
	}

	return count > 0, nil
}

// CouponItems retrieves all the coupon_item's CouponItems with an executor.
func (o *Coupon) CouponItems(mods ...qm.QueryMod) couponItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"coupon_items\".\"coupon_id\"=?", o.ID),
	)

	query := CouponItems(queryMods...)
	queries.SetFrom(query.Query, "\"coupon_items\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"coupon_items\".*"})
	}

	return query
}

// LoadCouponItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (couponL) LoadCouponItems(e boil.Executor, singular bool, maybeCoupon interface{}, mods queries.Applicator) error {
	var slice []*Coupon
	var object *Coupon

	if singular {
		object = maybeCoupon.(*Coupon)
	} else {
		slice = *maybeCoupon.(*[]*Coupon)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &couponR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &couponR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`coupon_items`),
		qm.WhereIn(`coupon_items.coupon_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load coupon_items")
	}

	var resultSlice []*CouponItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice coupon_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on coupon_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for coupon_items")
	}

	if len(couponItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CouponItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &couponItemR{}
			}
			foreign.R.Coupon = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CouponID {
				local.R.CouponItems = append(local.R.CouponItems, foreign)
				if foreign.R == nil {
					foreign.R = &couponItemR{}
				}
				foreign.R.Coupon = local
				break
			}
		}
	}

	return nil
}

// AddCouponItems adds the given related objects to the existing relationships
// of the coupon, optionally inserting them as new records.
// Appends related to o.R.CouponItems.
// Sets related.R.Coupon appropriately.
func (o *Coupon) AddCouponItems(exec boil.Executor, insert bool, related ...*CouponItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CouponID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"coupon_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"coupon_id"}),
				strmangle.WhereClause("\"", "\"", 2, couponItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CouponID = o.ID
		}
	}

	if o.R == nil {
		o.R = &couponR{
			CouponItems: related,
		}
	} else {
		o.R.CouponItems = append(o.R.CouponItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &couponItemR{
				Coupon: o,
			}
		} else {
			rel.R.Coupon = o
		}
	}
	return nil
}

// Coupons retrieves all the records using an executor.
func Coupons(mods ...qm.QueryMod) couponQuery {
	mods = append(mods, qm.From("\"coupons\""))
	return couponQuery{NewQuery(mods...)}
}

// FindCoupon retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCoupon(exec boil.Executor, iD string, selectCols ...string) (*Coupon, error) {
	couponObj := &Coupon{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"coupons\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, couponObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from coupons")
	}

	if err = couponObj.doAfterSelectHooks(exec); err != nil {
		return couponObj, err
	}

	return couponObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Coupon) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no coupons provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(couponColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	couponInsertCacheMut.RLock()
	cache, cached := couponInsertCache[key]
	couponInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			couponAllColumns,
			couponColumnsWithDefault,
			couponColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(couponType, couponMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(couponType, couponMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"coupons\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"coupons\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into coupons")
	}

	if !cached {
		couponInsertCacheMut.Lock()
		couponInsertCache[key] = cache
		couponInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Coupon.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Coupon) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	couponUpdateCacheMut.RLock()
	cache, cached := couponUpdateCache[key]
	couponUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			couponAllColumns,
			couponPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update coupons, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"coupons\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, couponPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(couponType, couponMapping, append(wl, couponPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update coupons row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for coupons")
	}

	if !cached {
		couponUpdateCacheMut.Lock()
		couponUpdateCache[key] = cache
		couponUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q couponQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for coupons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for coupons")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CouponSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), couponPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"coupons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, couponPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in coupon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all coupon")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Coupon) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no coupons provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(couponColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	couponUpsertCacheMut.RLock()
	cache, cached := couponUpsertCache[key]
	couponUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			couponAllColumns,
			couponColumnsWithDefault,
			couponColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			couponAllColumns,
			couponPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert coupons, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(couponPrimaryKeyColumns))
			copy(conflict, couponPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"coupons\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(couponType, couponMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(couponType, couponMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert coupons")
	}

	if !cached {
		couponUpsertCacheMut.Lock()
		couponUpsertCache[key] = cache
		couponUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Coupon record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Coupon) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Coupon provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), couponPrimaryKeyMapping)
	sql := "DELETE FROM \"coupons\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from coupons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for coupons")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q couponQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no couponQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from coupons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for coupons")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CouponSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(couponBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), couponPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"coupons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, couponPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from coupon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for coupons")
	}

	if len(couponAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Coupon) Reload(exec boil.Executor) error {
	ret, err := FindCoupon(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CouponSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CouponSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), couponPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"coupons\".* FROM \"coupons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, couponPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in CouponSlice")
	}

	*o = slice

	return nil
}

// CouponExists checks if the Coupon row exists.
func CouponExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"coupons\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if coupons exists")
	}

	return exists, nil
}
