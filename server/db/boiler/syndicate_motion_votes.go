// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SyndicateMotionVote is an object representing the database table.
type SyndicateMotionVote struct {
	ID        string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	MotionID  string    `boiler:"motion_id" boil:"motion_id" json:"motion_id" toml:"motion_id" yaml:"motion_id"`
	VoteByID  string    `boiler:"vote_by_id" boil:"vote_by_id" json:"vote_by_id" toml:"vote_by_id" yaml:"vote_by_id"`
	IsAgreed  bool      `boiler:"is_agreed" boil:"is_agreed" json:"is_agreed" toml:"is_agreed" yaml:"is_agreed"`
	CreatedAt time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *syndicateMotionVoteR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L syndicateMotionVoteL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SyndicateMotionVoteColumns = struct {
	ID        string
	MotionID  string
	VoteByID  string
	IsAgreed  string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	MotionID:  "motion_id",
	VoteByID:  "vote_by_id",
	IsAgreed:  "is_agreed",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var SyndicateMotionVoteTableColumns = struct {
	ID        string
	MotionID  string
	VoteByID  string
	IsAgreed  string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "syndicate_motion_votes.id",
	MotionID:  "syndicate_motion_votes.motion_id",
	VoteByID:  "syndicate_motion_votes.vote_by_id",
	IsAgreed:  "syndicate_motion_votes.is_agreed",
	CreatedAt: "syndicate_motion_votes.created_at",
	UpdatedAt: "syndicate_motion_votes.updated_at",
	DeletedAt: "syndicate_motion_votes.deleted_at",
}

// Generated where

var SyndicateMotionVoteWhere = struct {
	ID        whereHelperstring
	MotionID  whereHelperstring
	VoteByID  whereHelperstring
	IsAgreed  whereHelperbool
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperstring{field: "\"syndicate_motion_votes\".\"id\""},
	MotionID:  whereHelperstring{field: "\"syndicate_motion_votes\".\"motion_id\""},
	VoteByID:  whereHelperstring{field: "\"syndicate_motion_votes\".\"vote_by_id\""},
	IsAgreed:  whereHelperbool{field: "\"syndicate_motion_votes\".\"is_agreed\""},
	CreatedAt: whereHelpertime_Time{field: "\"syndicate_motion_votes\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"syndicate_motion_votes\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"syndicate_motion_votes\".\"deleted_at\""},
}

// SyndicateMotionVoteRels is where relationship names are stored.
var SyndicateMotionVoteRels = struct {
	Motion string
	VoteBy string
}{
	Motion: "Motion",
	VoteBy: "VoteBy",
}

// syndicateMotionVoteR is where relationships are stored.
type syndicateMotionVoteR struct {
	Motion *SyndicateMotion `boiler:"Motion" boil:"Motion" json:"Motion" toml:"Motion" yaml:"Motion"`
	VoteBy *Player          `boiler:"VoteBy" boil:"VoteBy" json:"VoteBy" toml:"VoteBy" yaml:"VoteBy"`
}

// NewStruct creates a new relationship struct
func (*syndicateMotionVoteR) NewStruct() *syndicateMotionVoteR {
	return &syndicateMotionVoteR{}
}

// syndicateMotionVoteL is where Load methods for each relationship are stored.
type syndicateMotionVoteL struct{}

var (
	syndicateMotionVoteAllColumns            = []string{"id", "motion_id", "vote_by_id", "is_agreed", "created_at", "updated_at", "deleted_at"}
	syndicateMotionVoteColumnsWithoutDefault = []string{"motion_id", "vote_by_id", "is_agreed"}
	syndicateMotionVoteColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at"}
	syndicateMotionVotePrimaryKeyColumns     = []string{"id"}
	syndicateMotionVoteGeneratedColumns      = []string{}
)

type (
	// SyndicateMotionVoteSlice is an alias for a slice of pointers to SyndicateMotionVote.
	// This should almost always be used instead of []SyndicateMotionVote.
	SyndicateMotionVoteSlice []*SyndicateMotionVote
	// SyndicateMotionVoteHook is the signature for custom SyndicateMotionVote hook methods
	SyndicateMotionVoteHook func(boil.Executor, *SyndicateMotionVote) error

	syndicateMotionVoteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	syndicateMotionVoteType                 = reflect.TypeOf(&SyndicateMotionVote{})
	syndicateMotionVoteMapping              = queries.MakeStructMapping(syndicateMotionVoteType)
	syndicateMotionVotePrimaryKeyMapping, _ = queries.BindMapping(syndicateMotionVoteType, syndicateMotionVoteMapping, syndicateMotionVotePrimaryKeyColumns)
	syndicateMotionVoteInsertCacheMut       sync.RWMutex
	syndicateMotionVoteInsertCache          = make(map[string]insertCache)
	syndicateMotionVoteUpdateCacheMut       sync.RWMutex
	syndicateMotionVoteUpdateCache          = make(map[string]updateCache)
	syndicateMotionVoteUpsertCacheMut       sync.RWMutex
	syndicateMotionVoteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var syndicateMotionVoteAfterSelectHooks []SyndicateMotionVoteHook

var syndicateMotionVoteBeforeInsertHooks []SyndicateMotionVoteHook
var syndicateMotionVoteAfterInsertHooks []SyndicateMotionVoteHook

var syndicateMotionVoteBeforeUpdateHooks []SyndicateMotionVoteHook
var syndicateMotionVoteAfterUpdateHooks []SyndicateMotionVoteHook

var syndicateMotionVoteBeforeDeleteHooks []SyndicateMotionVoteHook
var syndicateMotionVoteAfterDeleteHooks []SyndicateMotionVoteHook

var syndicateMotionVoteBeforeUpsertHooks []SyndicateMotionVoteHook
var syndicateMotionVoteAfterUpsertHooks []SyndicateMotionVoteHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SyndicateMotionVote) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateMotionVoteAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SyndicateMotionVote) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateMotionVoteBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SyndicateMotionVote) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateMotionVoteAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SyndicateMotionVote) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateMotionVoteBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SyndicateMotionVote) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateMotionVoteAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SyndicateMotionVote) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateMotionVoteBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SyndicateMotionVote) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateMotionVoteAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SyndicateMotionVote) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateMotionVoteBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SyndicateMotionVote) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateMotionVoteAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSyndicateMotionVoteHook registers your hook function for all future operations.
func AddSyndicateMotionVoteHook(hookPoint boil.HookPoint, syndicateMotionVoteHook SyndicateMotionVoteHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		syndicateMotionVoteAfterSelectHooks = append(syndicateMotionVoteAfterSelectHooks, syndicateMotionVoteHook)
	case boil.BeforeInsertHook:
		syndicateMotionVoteBeforeInsertHooks = append(syndicateMotionVoteBeforeInsertHooks, syndicateMotionVoteHook)
	case boil.AfterInsertHook:
		syndicateMotionVoteAfterInsertHooks = append(syndicateMotionVoteAfterInsertHooks, syndicateMotionVoteHook)
	case boil.BeforeUpdateHook:
		syndicateMotionVoteBeforeUpdateHooks = append(syndicateMotionVoteBeforeUpdateHooks, syndicateMotionVoteHook)
	case boil.AfterUpdateHook:
		syndicateMotionVoteAfterUpdateHooks = append(syndicateMotionVoteAfterUpdateHooks, syndicateMotionVoteHook)
	case boil.BeforeDeleteHook:
		syndicateMotionVoteBeforeDeleteHooks = append(syndicateMotionVoteBeforeDeleteHooks, syndicateMotionVoteHook)
	case boil.AfterDeleteHook:
		syndicateMotionVoteAfterDeleteHooks = append(syndicateMotionVoteAfterDeleteHooks, syndicateMotionVoteHook)
	case boil.BeforeUpsertHook:
		syndicateMotionVoteBeforeUpsertHooks = append(syndicateMotionVoteBeforeUpsertHooks, syndicateMotionVoteHook)
	case boil.AfterUpsertHook:
		syndicateMotionVoteAfterUpsertHooks = append(syndicateMotionVoteAfterUpsertHooks, syndicateMotionVoteHook)
	}
}

// One returns a single syndicateMotionVote record from the query.
func (q syndicateMotionVoteQuery) One(exec boil.Executor) (*SyndicateMotionVote, error) {
	o := &SyndicateMotionVote{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for syndicate_motion_votes")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SyndicateMotionVote records from the query.
func (q syndicateMotionVoteQuery) All(exec boil.Executor) (SyndicateMotionVoteSlice, error) {
	var o []*SyndicateMotionVote

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to SyndicateMotionVote slice")
	}

	if len(syndicateMotionVoteAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SyndicateMotionVote records in the query.
func (q syndicateMotionVoteQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count syndicate_motion_votes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q syndicateMotionVoteQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if syndicate_motion_votes exists")
	}

	return count > 0, nil
}

// Motion pointed to by the foreign key.
func (o *SyndicateMotionVote) Motion(mods ...qm.QueryMod) syndicateMotionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MotionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := SyndicateMotions(queryMods...)
	queries.SetFrom(query.Query, "\"syndicate_motions\"")

	return query
}

// VoteBy pointed to by the foreign key.
func (o *SyndicateMotionVote) VoteBy(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VoteByID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// LoadMotion allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateMotionVoteL) LoadMotion(e boil.Executor, singular bool, maybeSyndicateMotionVote interface{}, mods queries.Applicator) error {
	var slice []*SyndicateMotionVote
	var object *SyndicateMotionVote

	if singular {
		object = maybeSyndicateMotionVote.(*SyndicateMotionVote)
	} else {
		slice = *maybeSyndicateMotionVote.(*[]*SyndicateMotionVote)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateMotionVoteR{}
		}
		args = append(args, object.MotionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateMotionVoteR{}
			}

			for _, a := range args {
				if a == obj.MotionID {
					continue Outer
				}
			}

			args = append(args, obj.MotionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicate_motions`),
		qm.WhereIn(`syndicate_motions.id in ?`, args...),
		qmhelper.WhereIsNull(`syndicate_motions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SyndicateMotion")
	}

	var resultSlice []*SyndicateMotion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SyndicateMotion")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for syndicate_motions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicate_motions")
	}

	if len(syndicateMotionVoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Motion = foreign
		if foreign.R == nil {
			foreign.R = &syndicateMotionR{}
		}
		foreign.R.MotionSyndicateMotionVotes = append(foreign.R.MotionSyndicateMotionVotes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MotionID == foreign.ID {
				local.R.Motion = foreign
				if foreign.R == nil {
					foreign.R = &syndicateMotionR{}
				}
				foreign.R.MotionSyndicateMotionVotes = append(foreign.R.MotionSyndicateMotionVotes, local)
				break
			}
		}
	}

	return nil
}

// LoadVoteBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateMotionVoteL) LoadVoteBy(e boil.Executor, singular bool, maybeSyndicateMotionVote interface{}, mods queries.Applicator) error {
	var slice []*SyndicateMotionVote
	var object *SyndicateMotionVote

	if singular {
		object = maybeSyndicateMotionVote.(*SyndicateMotionVote)
	} else {
		slice = *maybeSyndicateMotionVote.(*[]*SyndicateMotionVote)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateMotionVoteR{}
		}
		args = append(args, object.VoteByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateMotionVoteR{}
			}

			for _, a := range args {
				if a == obj.VoteByID {
					continue Outer
				}
			}

			args = append(args, obj.VoteByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(syndicateMotionVoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VoteBy = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.VoteBySyndicateMotionVotes = append(foreign.R.VoteBySyndicateMotionVotes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VoteByID == foreign.ID {
				local.R.VoteBy = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.VoteBySyndicateMotionVotes = append(foreign.R.VoteBySyndicateMotionVotes, local)
				break
			}
		}
	}

	return nil
}

// SetMotion of the syndicateMotionVote to the related item.
// Sets o.R.Motion to related.
// Adds o to related.R.MotionSyndicateMotionVotes.
func (o *SyndicateMotionVote) SetMotion(exec boil.Executor, insert bool, related *SyndicateMotion) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicate_motion_votes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"motion_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicateMotionVotePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MotionID = related.ID
	if o.R == nil {
		o.R = &syndicateMotionVoteR{
			Motion: related,
		}
	} else {
		o.R.Motion = related
	}

	if related.R == nil {
		related.R = &syndicateMotionR{
			MotionSyndicateMotionVotes: SyndicateMotionVoteSlice{o},
		}
	} else {
		related.R.MotionSyndicateMotionVotes = append(related.R.MotionSyndicateMotionVotes, o)
	}

	return nil
}

// SetVoteBy of the syndicateMotionVote to the related item.
// Sets o.R.VoteBy to related.
// Adds o to related.R.VoteBySyndicateMotionVotes.
func (o *SyndicateMotionVote) SetVoteBy(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicate_motion_votes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"vote_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicateMotionVotePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VoteByID = related.ID
	if o.R == nil {
		o.R = &syndicateMotionVoteR{
			VoteBy: related,
		}
	} else {
		o.R.VoteBy = related
	}

	if related.R == nil {
		related.R = &playerR{
			VoteBySyndicateMotionVotes: SyndicateMotionVoteSlice{o},
		}
	} else {
		related.R.VoteBySyndicateMotionVotes = append(related.R.VoteBySyndicateMotionVotes, o)
	}

	return nil
}

// SyndicateMotionVotes retrieves all the records using an executor.
func SyndicateMotionVotes(mods ...qm.QueryMod) syndicateMotionVoteQuery {
	mods = append(mods, qm.From("\"syndicate_motion_votes\""), qmhelper.WhereIsNull("\"syndicate_motion_votes\".\"deleted_at\""))
	return syndicateMotionVoteQuery{NewQuery(mods...)}
}

// FindSyndicateMotionVote retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSyndicateMotionVote(exec boil.Executor, iD string, selectCols ...string) (*SyndicateMotionVote, error) {
	syndicateMotionVoteObj := &SyndicateMotionVote{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"syndicate_motion_votes\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, syndicateMotionVoteObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from syndicate_motion_votes")
	}

	if err = syndicateMotionVoteObj.doAfterSelectHooks(exec); err != nil {
		return syndicateMotionVoteObj, err
	}

	return syndicateMotionVoteObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SyndicateMotionVote) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no syndicate_motion_votes provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syndicateMotionVoteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	syndicateMotionVoteInsertCacheMut.RLock()
	cache, cached := syndicateMotionVoteInsertCache[key]
	syndicateMotionVoteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			syndicateMotionVoteAllColumns,
			syndicateMotionVoteColumnsWithDefault,
			syndicateMotionVoteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(syndicateMotionVoteType, syndicateMotionVoteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(syndicateMotionVoteType, syndicateMotionVoteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"syndicate_motion_votes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"syndicate_motion_votes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into syndicate_motion_votes")
	}

	if !cached {
		syndicateMotionVoteInsertCacheMut.Lock()
		syndicateMotionVoteInsertCache[key] = cache
		syndicateMotionVoteInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the SyndicateMotionVote.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SyndicateMotionVote) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	syndicateMotionVoteUpdateCacheMut.RLock()
	cache, cached := syndicateMotionVoteUpdateCache[key]
	syndicateMotionVoteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			syndicateMotionVoteAllColumns,
			syndicateMotionVotePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update syndicate_motion_votes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"syndicate_motion_votes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, syndicateMotionVotePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(syndicateMotionVoteType, syndicateMotionVoteMapping, append(wl, syndicateMotionVotePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update syndicate_motion_votes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for syndicate_motion_votes")
	}

	if !cached {
		syndicateMotionVoteUpdateCacheMut.Lock()
		syndicateMotionVoteUpdateCache[key] = cache
		syndicateMotionVoteUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q syndicateMotionVoteQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for syndicate_motion_votes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for syndicate_motion_votes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SyndicateMotionVoteSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateMotionVotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"syndicate_motion_votes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, syndicateMotionVotePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in syndicateMotionVote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all syndicateMotionVote")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SyndicateMotionVote) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no syndicate_motion_votes provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syndicateMotionVoteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	syndicateMotionVoteUpsertCacheMut.RLock()
	cache, cached := syndicateMotionVoteUpsertCache[key]
	syndicateMotionVoteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			syndicateMotionVoteAllColumns,
			syndicateMotionVoteColumnsWithDefault,
			syndicateMotionVoteColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			syndicateMotionVoteAllColumns,
			syndicateMotionVotePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert syndicate_motion_votes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(syndicateMotionVotePrimaryKeyColumns))
			copy(conflict, syndicateMotionVotePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"syndicate_motion_votes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(syndicateMotionVoteType, syndicateMotionVoteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(syndicateMotionVoteType, syndicateMotionVoteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert syndicate_motion_votes")
	}

	if !cached {
		syndicateMotionVoteUpsertCacheMut.Lock()
		syndicateMotionVoteUpsertCache[key] = cache
		syndicateMotionVoteUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single SyndicateMotionVote record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SyndicateMotionVote) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no SyndicateMotionVote provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), syndicateMotionVotePrimaryKeyMapping)
		sql = "DELETE FROM \"syndicate_motion_votes\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"syndicate_motion_votes\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(syndicateMotionVoteType, syndicateMotionVoteMapping, append(wl, syndicateMotionVotePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from syndicate_motion_votes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for syndicate_motion_votes")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q syndicateMotionVoteQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no syndicateMotionVoteQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from syndicate_motion_votes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for syndicate_motion_votes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SyndicateMotionVoteSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(syndicateMotionVoteBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateMotionVotePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"syndicate_motion_votes\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syndicateMotionVotePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateMotionVotePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"syndicate_motion_votes\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, syndicateMotionVotePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from syndicateMotionVote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for syndicate_motion_votes")
	}

	if len(syndicateMotionVoteAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SyndicateMotionVote) Reload(exec boil.Executor) error {
	ret, err := FindSyndicateMotionVote(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SyndicateMotionVoteSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SyndicateMotionVoteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateMotionVotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"syndicate_motion_votes\".* FROM \"syndicate_motion_votes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syndicateMotionVotePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in SyndicateMotionVoteSlice")
	}

	*o = slice

	return nil
}

// SyndicateMotionVoteExists checks if the SyndicateMotionVote row exists.
func SyndicateMotionVoteExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"syndicate_motion_votes\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if syndicate_motion_votes exists")
	}

	return exists, nil
}
