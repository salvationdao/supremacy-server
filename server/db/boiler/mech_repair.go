// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MechRepair is an object representing the database table.
type MechRepair struct {
	ID               string          `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	RepairCompleteAt time.Time       `boiler:"repair_complete_at" boil:"repair_complete_at" json:"repair_complete_at" toml:"repair_complete_at" yaml:"repair_complete_at"`
	FullRepairFee    decimal.Decimal `boiler:"full_repair_fee" boil:"full_repair_fee" json:"full_repair_fee" toml:"full_repair_fee" yaml:"full_repair_fee"`
	PayToRepairTXID  null.String     `boiler:"pay_to_repair_tx_id" boil:"pay_to_repair_tx_id" json:"pay_to_repair_tx_id,omitempty" toml:"pay_to_repair_tx_id" yaml:"pay_to_repair_tx_id,omitempty"`
	CreatedAt        time.Time       `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	MechID           string          `boiler:"mech_id" boil:"mech_id" json:"mech_id" toml:"mech_id" yaml:"mech_id"`

	R *mechRepairR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L mechRepairL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MechRepairColumns = struct {
	ID               string
	RepairCompleteAt string
	FullRepairFee    string
	PayToRepairTXID  string
	CreatedAt        string
	MechID           string
}{
	ID:               "id",
	RepairCompleteAt: "repair_complete_at",
	FullRepairFee:    "full_repair_fee",
	PayToRepairTXID:  "pay_to_repair_tx_id",
	CreatedAt:        "created_at",
	MechID:           "mech_id",
}

var MechRepairTableColumns = struct {
	ID               string
	RepairCompleteAt string
	FullRepairFee    string
	PayToRepairTXID  string
	CreatedAt        string
	MechID           string
}{
	ID:               "mech_repair.id",
	RepairCompleteAt: "mech_repair.repair_complete_at",
	FullRepairFee:    "mech_repair.full_repair_fee",
	PayToRepairTXID:  "mech_repair.pay_to_repair_tx_id",
	CreatedAt:        "mech_repair.created_at",
	MechID:           "mech_repair.mech_id",
}

// Generated where

var MechRepairWhere = struct {
	ID               whereHelperstring
	RepairCompleteAt whereHelpertime_Time
	FullRepairFee    whereHelperdecimal_Decimal
	PayToRepairTXID  whereHelpernull_String
	CreatedAt        whereHelpertime_Time
	MechID           whereHelperstring
}{
	ID:               whereHelperstring{field: "\"mech_repair\".\"id\""},
	RepairCompleteAt: whereHelpertime_Time{field: "\"mech_repair\".\"repair_complete_at\""},
	FullRepairFee:    whereHelperdecimal_Decimal{field: "\"mech_repair\".\"full_repair_fee\""},
	PayToRepairTXID:  whereHelpernull_String{field: "\"mech_repair\".\"pay_to_repair_tx_id\""},
	CreatedAt:        whereHelpertime_Time{field: "\"mech_repair\".\"created_at\""},
	MechID:           whereHelperstring{field: "\"mech_repair\".\"mech_id\""},
}

// MechRepairRels is where relationship names are stored.
var MechRepairRels = struct {
	Mech string
}{
	Mech: "Mech",
}

// mechRepairR is where relationships are stored.
type mechRepairR struct {
	Mech *Mech `boiler:"Mech" boil:"Mech" json:"Mech" toml:"Mech" yaml:"Mech"`
}

// NewStruct creates a new relationship struct
func (*mechRepairR) NewStruct() *mechRepairR {
	return &mechRepairR{}
}

// mechRepairL is where Load methods for each relationship are stored.
type mechRepairL struct{}

var (
	mechRepairAllColumns            = []string{"id", "repair_complete_at", "full_repair_fee", "pay_to_repair_tx_id", "created_at", "mech_id"}
	mechRepairColumnsWithoutDefault = []string{"repair_complete_at", "full_repair_fee", "mech_id"}
	mechRepairColumnsWithDefault    = []string{"id", "pay_to_repair_tx_id", "created_at"}
	mechRepairPrimaryKeyColumns     = []string{"id"}
	mechRepairGeneratedColumns      = []string{}
)

type (
	// MechRepairSlice is an alias for a slice of pointers to MechRepair.
	// This should almost always be used instead of []MechRepair.
	MechRepairSlice []*MechRepair
	// MechRepairHook is the signature for custom MechRepair hook methods
	MechRepairHook func(boil.Executor, *MechRepair) error

	mechRepairQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mechRepairType                 = reflect.TypeOf(&MechRepair{})
	mechRepairMapping              = queries.MakeStructMapping(mechRepairType)
	mechRepairPrimaryKeyMapping, _ = queries.BindMapping(mechRepairType, mechRepairMapping, mechRepairPrimaryKeyColumns)
	mechRepairInsertCacheMut       sync.RWMutex
	mechRepairInsertCache          = make(map[string]insertCache)
	mechRepairUpdateCacheMut       sync.RWMutex
	mechRepairUpdateCache          = make(map[string]updateCache)
	mechRepairUpsertCacheMut       sync.RWMutex
	mechRepairUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mechRepairAfterSelectHooks []MechRepairHook

var mechRepairBeforeInsertHooks []MechRepairHook
var mechRepairAfterInsertHooks []MechRepairHook

var mechRepairBeforeUpdateHooks []MechRepairHook
var mechRepairAfterUpdateHooks []MechRepairHook

var mechRepairBeforeDeleteHooks []MechRepairHook
var mechRepairAfterDeleteHooks []MechRepairHook

var mechRepairBeforeUpsertHooks []MechRepairHook
var mechRepairAfterUpsertHooks []MechRepairHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MechRepair) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range mechRepairAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MechRepair) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechRepairBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MechRepair) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechRepairAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MechRepair) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechRepairBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MechRepair) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechRepairAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MechRepair) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechRepairBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MechRepair) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechRepairAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MechRepair) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechRepairBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MechRepair) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechRepairAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMechRepairHook registers your hook function for all future operations.
func AddMechRepairHook(hookPoint boil.HookPoint, mechRepairHook MechRepairHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mechRepairAfterSelectHooks = append(mechRepairAfterSelectHooks, mechRepairHook)
	case boil.BeforeInsertHook:
		mechRepairBeforeInsertHooks = append(mechRepairBeforeInsertHooks, mechRepairHook)
	case boil.AfterInsertHook:
		mechRepairAfterInsertHooks = append(mechRepairAfterInsertHooks, mechRepairHook)
	case boil.BeforeUpdateHook:
		mechRepairBeforeUpdateHooks = append(mechRepairBeforeUpdateHooks, mechRepairHook)
	case boil.AfterUpdateHook:
		mechRepairAfterUpdateHooks = append(mechRepairAfterUpdateHooks, mechRepairHook)
	case boil.BeforeDeleteHook:
		mechRepairBeforeDeleteHooks = append(mechRepairBeforeDeleteHooks, mechRepairHook)
	case boil.AfterDeleteHook:
		mechRepairAfterDeleteHooks = append(mechRepairAfterDeleteHooks, mechRepairHook)
	case boil.BeforeUpsertHook:
		mechRepairBeforeUpsertHooks = append(mechRepairBeforeUpsertHooks, mechRepairHook)
	case boil.AfterUpsertHook:
		mechRepairAfterUpsertHooks = append(mechRepairAfterUpsertHooks, mechRepairHook)
	}
}

// One returns a single mechRepair record from the query.
func (q mechRepairQuery) One(exec boil.Executor) (*MechRepair, error) {
	o := &MechRepair{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for mech_repair")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MechRepair records from the query.
func (q mechRepairQuery) All(exec boil.Executor) (MechRepairSlice, error) {
	var o []*MechRepair

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to MechRepair slice")
	}

	if len(mechRepairAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MechRepair records in the query.
func (q mechRepairQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count mech_repair rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mechRepairQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if mech_repair exists")
	}

	return count > 0, nil
}

// Mech pointed to by the foreign key.
func (o *MechRepair) Mech(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MechID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// LoadMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechRepairL) LoadMech(e boil.Executor, singular bool, maybeMechRepair interface{}, mods queries.Applicator) error {
	var slice []*MechRepair
	var object *MechRepair

	if singular {
		object = maybeMechRepair.(*MechRepair)
	} else {
		slice = *maybeMechRepair.(*[]*MechRepair)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechRepairR{}
		}
		args = append(args, object.MechID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechRepairR{}
			}

			for _, a := range args {
				if a == obj.MechID {
					continue Outer
				}
			}

			args = append(args, obj.MechID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(mechRepairAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Mech = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.MechRepairs = append(foreign.R.MechRepairs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MechID == foreign.ID {
				local.R.Mech = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.MechRepairs = append(foreign.R.MechRepairs, local)
				break
			}
		}
	}

	return nil
}

// SetMech of the mechRepair to the related item.
// Sets o.R.Mech to related.
// Adds o to related.R.MechRepairs.
func (o *MechRepair) SetMech(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mech_repair\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechRepairPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MechID = related.ID
	if o.R == nil {
		o.R = &mechRepairR{
			Mech: related,
		}
	} else {
		o.R.Mech = related
	}

	if related.R == nil {
		related.R = &mechR{
			MechRepairs: MechRepairSlice{o},
		}
	} else {
		related.R.MechRepairs = append(related.R.MechRepairs, o)
	}

	return nil
}

// MechRepairs retrieves all the records using an executor.
func MechRepairs(mods ...qm.QueryMod) mechRepairQuery {
	mods = append(mods, qm.From("\"mech_repair\""))
	return mechRepairQuery{NewQuery(mods...)}
}

// FindMechRepair retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMechRepair(exec boil.Executor, iD string, selectCols ...string) (*MechRepair, error) {
	mechRepairObj := &MechRepair{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mech_repair\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, mechRepairObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from mech_repair")
	}

	if err = mechRepairObj.doAfterSelectHooks(exec); err != nil {
		return mechRepairObj, err
	}

	return mechRepairObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MechRepair) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mech_repair provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechRepairColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mechRepairInsertCacheMut.RLock()
	cache, cached := mechRepairInsertCache[key]
	mechRepairInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mechRepairAllColumns,
			mechRepairColumnsWithDefault,
			mechRepairColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mechRepairType, mechRepairMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mechRepairType, mechRepairMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mech_repair\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mech_repair\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into mech_repair")
	}

	if !cached {
		mechRepairInsertCacheMut.Lock()
		mechRepairInsertCache[key] = cache
		mechRepairInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the MechRepair.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MechRepair) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mechRepairUpdateCacheMut.RLock()
	cache, cached := mechRepairUpdateCache[key]
	mechRepairUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mechRepairAllColumns,
			mechRepairPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update mech_repair, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mech_repair\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mechRepairPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mechRepairType, mechRepairMapping, append(wl, mechRepairPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update mech_repair row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for mech_repair")
	}

	if !cached {
		mechRepairUpdateCacheMut.Lock()
		mechRepairUpdateCache[key] = cache
		mechRepairUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mechRepairQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for mech_repair")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for mech_repair")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MechRepairSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechRepairPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mech_repair\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mechRepairPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in mechRepair slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all mechRepair")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MechRepair) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mech_repair provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechRepairColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mechRepairUpsertCacheMut.RLock()
	cache, cached := mechRepairUpsertCache[key]
	mechRepairUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mechRepairAllColumns,
			mechRepairColumnsWithDefault,
			mechRepairColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mechRepairAllColumns,
			mechRepairPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert mech_repair, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mechRepairPrimaryKeyColumns))
			copy(conflict, mechRepairPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mech_repair\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mechRepairType, mechRepairMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mechRepairType, mechRepairMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert mech_repair")
	}

	if !cached {
		mechRepairUpsertCacheMut.Lock()
		mechRepairUpsertCache[key] = cache
		mechRepairUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single MechRepair record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MechRepair) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no MechRepair provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mechRepairPrimaryKeyMapping)
	sql := "DELETE FROM \"mech_repair\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from mech_repair")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for mech_repair")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mechRepairQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no mechRepairQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mech_repair")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mech_repair")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MechRepairSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mechRepairBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechRepairPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"mech_repair\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechRepairPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mechRepair slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mech_repair")
	}

	if len(mechRepairAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MechRepair) Reload(exec boil.Executor) error {
	ret, err := FindMechRepair(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MechRepairSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MechRepairSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechRepairPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mech_repair\".* FROM \"mech_repair\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechRepairPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in MechRepairSlice")
	}

	*o = slice

	return nil
}

// MechRepairExists checks if the MechRepair row exists.
func MechRepairExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mech_repair\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if mech_repair exists")
	}

	return exists, nil
}
