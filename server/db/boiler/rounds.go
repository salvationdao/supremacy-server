// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Round is an object representing the database table.
type Round struct {
	ID          string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        string      `boiler:"name" boil:"name" json:"name" toml:"name" yaml:"name"`
	StartedAt   time.Time   `boiler:"started_at" boil:"started_at" json:"started_at" toml:"started_at" yaml:"started_at"`
	Endat       time.Time   `boiler:"endat" boil:"endat" json:"endat" toml:"endat" yaml:"endat"`
	LastForDays int         `boiler:"last_for_days" boil:"last_for_days" json:"last_for_days" toml:"last_for_days" yaml:"last_for_days"`
	Repeatable  bool        `boiler:"repeatable" boil:"repeatable" json:"repeatable" toml:"repeatable" yaml:"repeatable"`
	NextRoundID null.String `boiler:"next_round_id" boil:"next_round_id" json:"next_round_id,omitempty" toml:"next_round_id" yaml:"next_round_id,omitempty"`
	IsInit      bool        `boiler:"is_init" boil:"is_init" json:"is_init" toml:"is_init" yaml:"is_init"`
	CreatedAt   time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt   null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *roundR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L roundL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoundColumns = struct {
	ID          string
	Name        string
	StartedAt   string
	Endat       string
	LastForDays string
	Repeatable  string
	NextRoundID string
	IsInit      string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "id",
	Name:        "name",
	StartedAt:   "started_at",
	Endat:       "endat",
	LastForDays: "last_for_days",
	Repeatable:  "repeatable",
	NextRoundID: "next_round_id",
	IsInit:      "is_init",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
}

var RoundTableColumns = struct {
	ID          string
	Name        string
	StartedAt   string
	Endat       string
	LastForDays string
	Repeatable  string
	NextRoundID string
	IsInit      string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "rounds.id",
	Name:        "rounds.name",
	StartedAt:   "rounds.started_at",
	Endat:       "rounds.endat",
	LastForDays: "rounds.last_for_days",
	Repeatable:  "rounds.repeatable",
	NextRoundID: "rounds.next_round_id",
	IsInit:      "rounds.is_init",
	CreatedAt:   "rounds.created_at",
	UpdatedAt:   "rounds.updated_at",
	DeletedAt:   "rounds.deleted_at",
}

// Generated where

var RoundWhere = struct {
	ID          whereHelperstring
	Name        whereHelperstring
	StartedAt   whereHelpertime_Time
	Endat       whereHelpertime_Time
	LastForDays whereHelperint
	Repeatable  whereHelperbool
	NextRoundID whereHelpernull_String
	IsInit      whereHelperbool
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	DeletedAt   whereHelpernull_Time
}{
	ID:          whereHelperstring{field: "\"rounds\".\"id\""},
	Name:        whereHelperstring{field: "\"rounds\".\"name\""},
	StartedAt:   whereHelpertime_Time{field: "\"rounds\".\"started_at\""},
	Endat:       whereHelpertime_Time{field: "\"rounds\".\"endat\""},
	LastForDays: whereHelperint{field: "\"rounds\".\"last_for_days\""},
	Repeatable:  whereHelperbool{field: "\"rounds\".\"repeatable\""},
	NextRoundID: whereHelpernull_String{field: "\"rounds\".\"next_round_id\""},
	IsInit:      whereHelperbool{field: "\"rounds\".\"is_init\""},
	CreatedAt:   whereHelpertime_Time{field: "\"rounds\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"rounds\".\"updated_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"rounds\".\"deleted_at\""},
}

// RoundRels is where relationship names are stored.
var RoundRels = struct {
	NextRound       string
	Quests          string
	NextRoundRounds string
}{
	NextRound:       "NextRound",
	Quests:          "Quests",
	NextRoundRounds: "NextRoundRounds",
}

// roundR is where relationships are stored.
type roundR struct {
	NextRound       *Round     `boiler:"NextRound" boil:"NextRound" json:"NextRound" toml:"NextRound" yaml:"NextRound"`
	Quests          QuestSlice `boiler:"Quests" boil:"Quests" json:"Quests" toml:"Quests" yaml:"Quests"`
	NextRoundRounds RoundSlice `boiler:"NextRoundRounds" boil:"NextRoundRounds" json:"NextRoundRounds" toml:"NextRoundRounds" yaml:"NextRoundRounds"`
}

// NewStruct creates a new relationship struct
func (*roundR) NewStruct() *roundR {
	return &roundR{}
}

// roundL is where Load methods for each relationship are stored.
type roundL struct{}

var (
	roundAllColumns            = []string{"id", "name", "started_at", "endat", "last_for_days", "repeatable", "next_round_id", "is_init", "created_at", "updated_at", "deleted_at"}
	roundColumnsWithoutDefault = []string{"name", "started_at", "endat", "last_for_days"}
	roundColumnsWithDefault    = []string{"id", "repeatable", "next_round_id", "is_init", "created_at", "updated_at", "deleted_at"}
	roundPrimaryKeyColumns     = []string{"id"}
	roundGeneratedColumns      = []string{}
)

type (
	// RoundSlice is an alias for a slice of pointers to Round.
	// This should almost always be used instead of []Round.
	RoundSlice []*Round
	// RoundHook is the signature for custom Round hook methods
	RoundHook func(boil.Executor, *Round) error

	roundQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	roundType                 = reflect.TypeOf(&Round{})
	roundMapping              = queries.MakeStructMapping(roundType)
	roundPrimaryKeyMapping, _ = queries.BindMapping(roundType, roundMapping, roundPrimaryKeyColumns)
	roundInsertCacheMut       sync.RWMutex
	roundInsertCache          = make(map[string]insertCache)
	roundUpdateCacheMut       sync.RWMutex
	roundUpdateCache          = make(map[string]updateCache)
	roundUpsertCacheMut       sync.RWMutex
	roundUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var roundAfterSelectHooks []RoundHook

var roundBeforeInsertHooks []RoundHook
var roundAfterInsertHooks []RoundHook

var roundBeforeUpdateHooks []RoundHook
var roundAfterUpdateHooks []RoundHook

var roundBeforeDeleteHooks []RoundHook
var roundAfterDeleteHooks []RoundHook

var roundBeforeUpsertHooks []RoundHook
var roundAfterUpsertHooks []RoundHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Round) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range roundAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Round) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range roundBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Round) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range roundAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Round) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range roundBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Round) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range roundAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Round) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range roundBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Round) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range roundAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Round) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range roundBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Round) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range roundAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRoundHook registers your hook function for all future operations.
func AddRoundHook(hookPoint boil.HookPoint, roundHook RoundHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		roundAfterSelectHooks = append(roundAfterSelectHooks, roundHook)
	case boil.BeforeInsertHook:
		roundBeforeInsertHooks = append(roundBeforeInsertHooks, roundHook)
	case boil.AfterInsertHook:
		roundAfterInsertHooks = append(roundAfterInsertHooks, roundHook)
	case boil.BeforeUpdateHook:
		roundBeforeUpdateHooks = append(roundBeforeUpdateHooks, roundHook)
	case boil.AfterUpdateHook:
		roundAfterUpdateHooks = append(roundAfterUpdateHooks, roundHook)
	case boil.BeforeDeleteHook:
		roundBeforeDeleteHooks = append(roundBeforeDeleteHooks, roundHook)
	case boil.AfterDeleteHook:
		roundAfterDeleteHooks = append(roundAfterDeleteHooks, roundHook)
	case boil.BeforeUpsertHook:
		roundBeforeUpsertHooks = append(roundBeforeUpsertHooks, roundHook)
	case boil.AfterUpsertHook:
		roundAfterUpsertHooks = append(roundAfterUpsertHooks, roundHook)
	}
}

// One returns a single round record from the query.
func (q roundQuery) One(exec boil.Executor) (*Round, error) {
	o := &Round{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for rounds")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Round records from the query.
func (q roundQuery) All(exec boil.Executor) (RoundSlice, error) {
	var o []*Round

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Round slice")
	}

	if len(roundAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Round records in the query.
func (q roundQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count rounds rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q roundQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if rounds exists")
	}

	return count > 0, nil
}

// NextRound pointed to by the foreign key.
func (o *Round) NextRound(mods ...qm.QueryMod) roundQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.NextRoundID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Rounds(queryMods...)
	queries.SetFrom(query.Query, "\"rounds\"")

	return query
}

// Quests retrieves all the quest's Quests with an executor.
func (o *Round) Quests(mods ...qm.QueryMod) questQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"quests\".\"round_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"quests\".\"deleted_at\""),
	)

	query := Quests(queryMods...)
	queries.SetFrom(query.Query, "\"quests\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"quests\".*"})
	}

	return query
}

// NextRoundRounds retrieves all the round's Rounds with an executor via next_round_id column.
func (o *Round) NextRoundRounds(mods ...qm.QueryMod) roundQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"rounds\".\"next_round_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"rounds\".\"deleted_at\""),
	)

	query := Rounds(queryMods...)
	queries.SetFrom(query.Query, "\"rounds\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"rounds\".*"})
	}

	return query
}

// LoadNextRound allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roundL) LoadNextRound(e boil.Executor, singular bool, maybeRound interface{}, mods queries.Applicator) error {
	var slice []*Round
	var object *Round

	if singular {
		object = maybeRound.(*Round)
	} else {
		slice = *maybeRound.(*[]*Round)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roundR{}
		}
		if !queries.IsNil(object.NextRoundID) {
			args = append(args, object.NextRoundID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roundR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.NextRoundID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.NextRoundID) {
				args = append(args, obj.NextRoundID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`rounds`),
		qm.WhereIn(`rounds.id in ?`, args...),
		qmhelper.WhereIsNull(`rounds.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Round")
	}

	var resultSlice []*Round
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Round")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for rounds")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for rounds")
	}

	if len(roundAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.NextRound = foreign
		if foreign.R == nil {
			foreign.R = &roundR{}
		}
		foreign.R.NextRoundRounds = append(foreign.R.NextRoundRounds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.NextRoundID, foreign.ID) {
				local.R.NextRound = foreign
				if foreign.R == nil {
					foreign.R = &roundR{}
				}
				foreign.R.NextRoundRounds = append(foreign.R.NextRoundRounds, local)
				break
			}
		}
	}

	return nil
}

// LoadQuests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (roundL) LoadQuests(e boil.Executor, singular bool, maybeRound interface{}, mods queries.Applicator) error {
	var slice []*Round
	var object *Round

	if singular {
		object = maybeRound.(*Round)
	} else {
		slice = *maybeRound.(*[]*Round)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roundR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roundR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`quests`),
		qm.WhereIn(`quests.round_id in ?`, args...),
		qmhelper.WhereIsNull(`quests.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load quests")
	}

	var resultSlice []*Quest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice quests")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on quests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for quests")
	}

	if len(questAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Quests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &questR{}
			}
			foreign.R.Round = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RoundID {
				local.R.Quests = append(local.R.Quests, foreign)
				if foreign.R == nil {
					foreign.R = &questR{}
				}
				foreign.R.Round = local
				break
			}
		}
	}

	return nil
}

// LoadNextRoundRounds allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (roundL) LoadNextRoundRounds(e boil.Executor, singular bool, maybeRound interface{}, mods queries.Applicator) error {
	var slice []*Round
	var object *Round

	if singular {
		object = maybeRound.(*Round)
	} else {
		slice = *maybeRound.(*[]*Round)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roundR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roundR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`rounds`),
		qm.WhereIn(`rounds.next_round_id in ?`, args...),
		qmhelper.WhereIsNull(`rounds.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load rounds")
	}

	var resultSlice []*Round
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice rounds")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on rounds")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for rounds")
	}

	if len(roundAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.NextRoundRounds = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &roundR{}
			}
			foreign.R.NextRound = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.NextRoundID) {
				local.R.NextRoundRounds = append(local.R.NextRoundRounds, foreign)
				if foreign.R == nil {
					foreign.R = &roundR{}
				}
				foreign.R.NextRound = local
				break
			}
		}
	}

	return nil
}

// SetNextRound of the round to the related item.
// Sets o.R.NextRound to related.
// Adds o to related.R.NextRoundRounds.
func (o *Round) SetNextRound(exec boil.Executor, insert bool, related *Round) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"rounds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"next_round_id"}),
		strmangle.WhereClause("\"", "\"", 2, roundPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.NextRoundID, related.ID)
	if o.R == nil {
		o.R = &roundR{
			NextRound: related,
		}
	} else {
		o.R.NextRound = related
	}

	if related.R == nil {
		related.R = &roundR{
			NextRoundRounds: RoundSlice{o},
		}
	} else {
		related.R.NextRoundRounds = append(related.R.NextRoundRounds, o)
	}

	return nil
}

// RemoveNextRound relationship.
// Sets o.R.NextRound to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Round) RemoveNextRound(exec boil.Executor, related *Round) error {
	var err error

	queries.SetScanner(&o.NextRoundID, nil)
	if _, err = o.Update(exec, boil.Whitelist("next_round_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.NextRound = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.NextRoundRounds {
		if queries.Equal(o.NextRoundID, ri.NextRoundID) {
			continue
		}

		ln := len(related.R.NextRoundRounds)
		if ln > 1 && i < ln-1 {
			related.R.NextRoundRounds[i] = related.R.NextRoundRounds[ln-1]
		}
		related.R.NextRoundRounds = related.R.NextRoundRounds[:ln-1]
		break
	}
	return nil
}

// AddQuests adds the given related objects to the existing relationships
// of the round, optionally inserting them as new records.
// Appends related to o.R.Quests.
// Sets related.R.Round appropriately.
func (o *Round) AddQuests(exec boil.Executor, insert bool, related ...*Quest) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RoundID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"quests\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"round_id"}),
				strmangle.WhereClause("\"", "\"", 2, questPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RoundID = o.ID
		}
	}

	if o.R == nil {
		o.R = &roundR{
			Quests: related,
		}
	} else {
		o.R.Quests = append(o.R.Quests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &questR{
				Round: o,
			}
		} else {
			rel.R.Round = o
		}
	}
	return nil
}

// AddNextRoundRounds adds the given related objects to the existing relationships
// of the round, optionally inserting them as new records.
// Appends related to o.R.NextRoundRounds.
// Sets related.R.NextRound appropriately.
func (o *Round) AddNextRoundRounds(exec boil.Executor, insert bool, related ...*Round) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.NextRoundID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"rounds\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"next_round_id"}),
				strmangle.WhereClause("\"", "\"", 2, roundPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.NextRoundID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &roundR{
			NextRoundRounds: related,
		}
	} else {
		o.R.NextRoundRounds = append(o.R.NextRoundRounds, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &roundR{
				NextRound: o,
			}
		} else {
			rel.R.NextRound = o
		}
	}
	return nil
}

// SetNextRoundRounds removes all previously related items of the
// round replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.NextRound's NextRoundRounds accordingly.
// Replaces o.R.NextRoundRounds with related.
// Sets related.R.NextRound's NextRoundRounds accordingly.
func (o *Round) SetNextRoundRounds(exec boil.Executor, insert bool, related ...*Round) error {
	query := "update \"rounds\" set \"next_round_id\" = null where \"next_round_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.NextRoundRounds {
			queries.SetScanner(&rel.NextRoundID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.NextRound = nil
		}

		o.R.NextRoundRounds = nil
	}
	return o.AddNextRoundRounds(exec, insert, related...)
}

// RemoveNextRoundRounds relationships from objects passed in.
// Removes related items from R.NextRoundRounds (uses pointer comparison, removal does not keep order)
// Sets related.R.NextRound.
func (o *Round) RemoveNextRoundRounds(exec boil.Executor, related ...*Round) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.NextRoundID, nil)
		if rel.R != nil {
			rel.R.NextRound = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("next_round_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.NextRoundRounds {
			if rel != ri {
				continue
			}

			ln := len(o.R.NextRoundRounds)
			if ln > 1 && i < ln-1 {
				o.R.NextRoundRounds[i] = o.R.NextRoundRounds[ln-1]
			}
			o.R.NextRoundRounds = o.R.NextRoundRounds[:ln-1]
			break
		}
	}

	return nil
}

// Rounds retrieves all the records using an executor.
func Rounds(mods ...qm.QueryMod) roundQuery {
	mods = append(mods, qm.From("\"rounds\""), qmhelper.WhereIsNull("\"rounds\".\"deleted_at\""))
	return roundQuery{NewQuery(mods...)}
}

// FindRound retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRound(exec boil.Executor, iD string, selectCols ...string) (*Round, error) {
	roundObj := &Round{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"rounds\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, roundObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from rounds")
	}

	if err = roundObj.doAfterSelectHooks(exec); err != nil {
		return roundObj, err
	}

	return roundObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Round) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no rounds provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roundColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	roundInsertCacheMut.RLock()
	cache, cached := roundInsertCache[key]
	roundInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			roundAllColumns,
			roundColumnsWithDefault,
			roundColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(roundType, roundMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(roundType, roundMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"rounds\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"rounds\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into rounds")
	}

	if !cached {
		roundInsertCacheMut.Lock()
		roundInsertCache[key] = cache
		roundInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Round.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Round) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	roundUpdateCacheMut.RLock()
	cache, cached := roundUpdateCache[key]
	roundUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			roundAllColumns,
			roundPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update rounds, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"rounds\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, roundPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(roundType, roundMapping, append(wl, roundPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update rounds row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for rounds")
	}

	if !cached {
		roundUpdateCacheMut.Lock()
		roundUpdateCache[key] = cache
		roundUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q roundQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for rounds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for rounds")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoundSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roundPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"rounds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, roundPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in round slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all round")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Round) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no rounds provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roundColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	roundUpsertCacheMut.RLock()
	cache, cached := roundUpsertCache[key]
	roundUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			roundAllColumns,
			roundColumnsWithDefault,
			roundColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			roundAllColumns,
			roundPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert rounds, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(roundPrimaryKeyColumns))
			copy(conflict, roundPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"rounds\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(roundType, roundMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(roundType, roundMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert rounds")
	}

	if !cached {
		roundUpsertCacheMut.Lock()
		roundUpsertCache[key] = cache
		roundUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Round record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Round) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Round provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), roundPrimaryKeyMapping)
		sql = "DELETE FROM \"rounds\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"rounds\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(roundType, roundMapping, append(wl, roundPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from rounds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for rounds")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q roundQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no roundQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from rounds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for rounds")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoundSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(roundBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roundPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"rounds\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roundPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roundPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"rounds\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, roundPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from round slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for rounds")
	}

	if len(roundAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Round) Reload(exec boil.Executor) error {
	ret, err := FindRound(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoundSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RoundSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roundPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"rounds\".* FROM \"rounds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roundPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in RoundSlice")
	}

	*o = slice

	return nil
}

// RoundExists checks if the Round row exists.
func RoundExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"rounds\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if rounds exists")
	}

	return exists, nil
}
