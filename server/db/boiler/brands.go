// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Brand is an object representing the database table.
type Brand struct {
	ID          string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	SyndicateID string    `boiler:"syndicate_id" boil:"syndicate_id" json:"syndicateID" toml:"syndicateID" yaml:"syndicateID"`
	Label       string    `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	DeletedAt   null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deletedAt,omitempty" toml:"deletedAt" yaml:"deletedAt,omitempty"`
	UpdatedAt   time.Time `boiler:"updated_at" boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	CreatedAt   time.Time `boiler:"created_at" boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`

	R *brandR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L brandL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BrandColumns = struct {
	ID          string
	SyndicateID string
	Label       string
	DeletedAt   string
	UpdatedAt   string
	CreatedAt   string
}{
	ID:          "id",
	SyndicateID: "syndicate_id",
	Label:       "label",
	DeletedAt:   "deleted_at",
	UpdatedAt:   "updated_at",
	CreatedAt:   "created_at",
}

var BrandTableColumns = struct {
	ID          string
	SyndicateID string
	Label       string
	DeletedAt   string
	UpdatedAt   string
	CreatedAt   string
}{
	ID:          "brands.id",
	SyndicateID: "brands.syndicate_id",
	Label:       "brands.label",
	DeletedAt:   "brands.deleted_at",
	UpdatedAt:   "brands.updated_at",
	CreatedAt:   "brands.created_at",
}

// Generated where

var BrandWhere = struct {
	ID          whereHelperstring
	SyndicateID whereHelperstring
	Label       whereHelperstring
	DeletedAt   whereHelpernull_Time
	UpdatedAt   whereHelpertime_Time
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperstring{field: "\"brands\".\"id\""},
	SyndicateID: whereHelperstring{field: "\"brands\".\"syndicate_id\""},
	Label:       whereHelperstring{field: "\"brands\".\"label\""},
	DeletedAt:   whereHelpernull_Time{field: "\"brands\".\"deleted_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"brands\".\"updated_at\""},
	CreatedAt:   whereHelpertime_Time{field: "\"brands\".\"created_at\""},
}

// BrandRels is where relationship names are stored.
var BrandRels = struct {
	Syndicate        string
	BlueprintChasses string
	BlueprintModules string
	BlueprintWeapons string
	Chasses          string
	Mechs            string
	Modules          string
	Weapons          string
}{
	Syndicate:        "Syndicate",
	BlueprintChasses: "BlueprintChasses",
	BlueprintModules: "BlueprintModules",
	BlueprintWeapons: "BlueprintWeapons",
	Chasses:          "Chasses",
	Mechs:            "Mechs",
	Modules:          "Modules",
	Weapons:          "Weapons",
}

// brandR is where relationships are stored.
type brandR struct {
	Syndicate        *Syndicate            `boiler:"Syndicate" boil:"Syndicate" json:"Syndicate" toml:"Syndicate" yaml:"Syndicate"`
	BlueprintChasses BlueprintChassisSlice `boiler:"BlueprintChasses" boil:"BlueprintChasses" json:"BlueprintChasses" toml:"BlueprintChasses" yaml:"BlueprintChasses"`
	BlueprintModules BlueprintModuleSlice  `boiler:"BlueprintModules" boil:"BlueprintModules" json:"BlueprintModules" toml:"BlueprintModules" yaml:"BlueprintModules"`
	BlueprintWeapons BlueprintWeaponSlice  `boiler:"BlueprintWeapons" boil:"BlueprintWeapons" json:"BlueprintWeapons" toml:"BlueprintWeapons" yaml:"BlueprintWeapons"`
	Chasses          ChassisSlice          `boiler:"Chasses" boil:"Chasses" json:"Chasses" toml:"Chasses" yaml:"Chasses"`
	Mechs            MechSlice             `boiler:"Mechs" boil:"Mechs" json:"Mechs" toml:"Mechs" yaml:"Mechs"`
	Modules          ModuleSlice           `boiler:"Modules" boil:"Modules" json:"Modules" toml:"Modules" yaml:"Modules"`
	Weapons          WeaponSlice           `boiler:"Weapons" boil:"Weapons" json:"Weapons" toml:"Weapons" yaml:"Weapons"`
}

// NewStruct creates a new relationship struct
func (*brandR) NewStruct() *brandR {
	return &brandR{}
}

// brandL is where Load methods for each relationship are stored.
type brandL struct{}

var (
	brandAllColumns            = []string{"id", "syndicate_id", "label", "deleted_at", "updated_at", "created_at"}
	brandColumnsWithoutDefault = []string{"syndicate_id", "label"}
	brandColumnsWithDefault    = []string{"id", "deleted_at", "updated_at", "created_at"}
	brandPrimaryKeyColumns     = []string{"id"}
	brandGeneratedColumns      = []string{}
)

type (
	// BrandSlice is an alias for a slice of pointers to Brand.
	// This should almost always be used instead of []Brand.
	BrandSlice []*Brand
	// BrandHook is the signature for custom Brand hook methods
	BrandHook func(boil.Executor, *Brand) error

	brandQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	brandType                 = reflect.TypeOf(&Brand{})
	brandMapping              = queries.MakeStructMapping(brandType)
	brandPrimaryKeyMapping, _ = queries.BindMapping(brandType, brandMapping, brandPrimaryKeyColumns)
	brandInsertCacheMut       sync.RWMutex
	brandInsertCache          = make(map[string]insertCache)
	brandUpdateCacheMut       sync.RWMutex
	brandUpdateCache          = make(map[string]updateCache)
	brandUpsertCacheMut       sync.RWMutex
	brandUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var brandAfterSelectHooks []BrandHook

var brandBeforeInsertHooks []BrandHook
var brandAfterInsertHooks []BrandHook

var brandBeforeUpdateHooks []BrandHook
var brandAfterUpdateHooks []BrandHook

var brandBeforeDeleteHooks []BrandHook
var brandAfterDeleteHooks []BrandHook

var brandBeforeUpsertHooks []BrandHook
var brandAfterUpsertHooks []BrandHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Brand) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range brandAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Brand) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range brandBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Brand) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range brandAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Brand) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range brandBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Brand) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range brandAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Brand) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range brandBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Brand) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range brandAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Brand) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range brandBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Brand) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range brandAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBrandHook registers your hook function for all future operations.
func AddBrandHook(hookPoint boil.HookPoint, brandHook BrandHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		brandAfterSelectHooks = append(brandAfterSelectHooks, brandHook)
	case boil.BeforeInsertHook:
		brandBeforeInsertHooks = append(brandBeforeInsertHooks, brandHook)
	case boil.AfterInsertHook:
		brandAfterInsertHooks = append(brandAfterInsertHooks, brandHook)
	case boil.BeforeUpdateHook:
		brandBeforeUpdateHooks = append(brandBeforeUpdateHooks, brandHook)
	case boil.AfterUpdateHook:
		brandAfterUpdateHooks = append(brandAfterUpdateHooks, brandHook)
	case boil.BeforeDeleteHook:
		brandBeforeDeleteHooks = append(brandBeforeDeleteHooks, brandHook)
	case boil.AfterDeleteHook:
		brandAfterDeleteHooks = append(brandAfterDeleteHooks, brandHook)
	case boil.BeforeUpsertHook:
		brandBeforeUpsertHooks = append(brandBeforeUpsertHooks, brandHook)
	case boil.AfterUpsertHook:
		brandAfterUpsertHooks = append(brandAfterUpsertHooks, brandHook)
	}
}

// One returns a single brand record from the query.
func (q brandQuery) One(exec boil.Executor) (*Brand, error) {
	o := &Brand{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for brands")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Brand records from the query.
func (q brandQuery) All(exec boil.Executor) (BrandSlice, error) {
	var o []*Brand

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Brand slice")
	}

	if len(brandAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Brand records in the query.
func (q brandQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count brands rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q brandQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if brands exists")
	}

	return count > 0, nil
}

// Syndicate pointed to by the foreign key.
func (o *Brand) Syndicate(mods ...qm.QueryMod) syndicateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SyndicateID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Syndicates(queryMods...)
	queries.SetFrom(query.Query, "\"syndicates\"")

	return query
}

// BlueprintChasses retrieves all the blueprint_chassis's BlueprintChasses with an executor.
func (o *Brand) BlueprintChasses(mods ...qm.QueryMod) blueprintChassisQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"blueprint_chassis\".\"brand_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"blueprint_chassis\".\"deleted_at\""),
	)

	query := BlueprintChasses(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_chassis\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"blueprint_chassis\".*"})
	}

	return query
}

// BlueprintModules retrieves all the blueprint_module's BlueprintModules with an executor.
func (o *Brand) BlueprintModules(mods ...qm.QueryMod) blueprintModuleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"blueprint_modules\".\"brand_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"blueprint_modules\".\"deleted_at\""),
	)

	query := BlueprintModules(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_modules\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"blueprint_modules\".*"})
	}

	return query
}

// BlueprintWeapons retrieves all the blueprint_weapon's BlueprintWeapons with an executor.
func (o *Brand) BlueprintWeapons(mods ...qm.QueryMod) blueprintWeaponQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"blueprint_weapons\".\"brand_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"blueprint_weapons\".\"deleted_at\""),
	)

	query := BlueprintWeapons(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_weapons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"blueprint_weapons\".*"})
	}

	return query
}

// Chasses retrieves all the chassis's Chasses with an executor.
func (o *Brand) Chasses(mods ...qm.QueryMod) chassisQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"chassis\".\"brand_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"chassis\".\"deleted_at\""),
	)

	query := Chasses(queryMods...)
	queries.SetFrom(query.Query, "\"chassis\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"chassis\".*"})
	}

	return query
}

// Mechs retrieves all the mech's Mechs with an executor.
func (o *Brand) Mechs(mods ...qm.QueryMod) mechQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mechs\".\"brand_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"mechs\".\"deleted_at\""),
	)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mechs\".*"})
	}

	return query
}

// Modules retrieves all the module's Modules with an executor.
func (o *Brand) Modules(mods ...qm.QueryMod) moduleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"modules\".\"brand_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"modules\".\"deleted_at\""),
	)

	query := Modules(queryMods...)
	queries.SetFrom(query.Query, "\"modules\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"modules\".*"})
	}

	return query
}

// Weapons retrieves all the weapon's Weapons with an executor.
func (o *Brand) Weapons(mods ...qm.QueryMod) weaponQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"weapons\".\"brand_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"weapons\".\"deleted_at\""),
	)

	query := Weapons(queryMods...)
	queries.SetFrom(query.Query, "\"weapons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"weapons\".*"})
	}

	return query
}

// LoadSyndicate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (brandL) LoadSyndicate(e boil.Executor, singular bool, maybeBrand interface{}, mods queries.Applicator) error {
	var slice []*Brand
	var object *Brand

	if singular {
		object = maybeBrand.(*Brand)
	} else {
		slice = *maybeBrand.(*[]*Brand)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &brandR{}
		}
		args = append(args, object.SyndicateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &brandR{}
			}

			for _, a := range args {
				if a == obj.SyndicateID {
					continue Outer
				}
			}

			args = append(args, obj.SyndicateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicates`),
		qm.WhereIn(`syndicates.id in ?`, args...),
		qmhelper.WhereIsNull(`syndicates.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Syndicate")
	}

	var resultSlice []*Syndicate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Syndicate")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for syndicates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicates")
	}

	if len(brandAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Syndicate = foreign
		if foreign.R == nil {
			foreign.R = &syndicateR{}
		}
		foreign.R.Brands = append(foreign.R.Brands, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SyndicateID == foreign.ID {
				local.R.Syndicate = foreign
				if foreign.R == nil {
					foreign.R = &syndicateR{}
				}
				foreign.R.Brands = append(foreign.R.Brands, local)
				break
			}
		}
	}

	return nil
}

// LoadBlueprintChasses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (brandL) LoadBlueprintChasses(e boil.Executor, singular bool, maybeBrand interface{}, mods queries.Applicator) error {
	var slice []*Brand
	var object *Brand

	if singular {
		object = maybeBrand.(*Brand)
	} else {
		slice = *maybeBrand.(*[]*Brand)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &brandR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &brandR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_chassis`),
		qm.WhereIn(`blueprint_chassis.brand_id in ?`, args...),
		qmhelper.WhereIsNull(`blueprint_chassis.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blueprint_chassis")
	}

	var resultSlice []*BlueprintChassis
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blueprint_chassis")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blueprint_chassis")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_chassis")
	}

	if len(blueprintChassisAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlueprintChasses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blueprintChassisR{}
			}
			foreign.R.Brand = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BrandID) {
				local.R.BlueprintChasses = append(local.R.BlueprintChasses, foreign)
				if foreign.R == nil {
					foreign.R = &blueprintChassisR{}
				}
				foreign.R.Brand = local
				break
			}
		}
	}

	return nil
}

// LoadBlueprintModules allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (brandL) LoadBlueprintModules(e boil.Executor, singular bool, maybeBrand interface{}, mods queries.Applicator) error {
	var slice []*Brand
	var object *Brand

	if singular {
		object = maybeBrand.(*Brand)
	} else {
		slice = *maybeBrand.(*[]*Brand)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &brandR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &brandR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_modules`),
		qm.WhereIn(`blueprint_modules.brand_id in ?`, args...),
		qmhelper.WhereIsNull(`blueprint_modules.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blueprint_modules")
	}

	var resultSlice []*BlueprintModule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blueprint_modules")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blueprint_modules")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_modules")
	}

	if len(blueprintModuleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlueprintModules = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blueprintModuleR{}
			}
			foreign.R.Brand = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BrandID) {
				local.R.BlueprintModules = append(local.R.BlueprintModules, foreign)
				if foreign.R == nil {
					foreign.R = &blueprintModuleR{}
				}
				foreign.R.Brand = local
				break
			}
		}
	}

	return nil
}

// LoadBlueprintWeapons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (brandL) LoadBlueprintWeapons(e boil.Executor, singular bool, maybeBrand interface{}, mods queries.Applicator) error {
	var slice []*Brand
	var object *Brand

	if singular {
		object = maybeBrand.(*Brand)
	} else {
		slice = *maybeBrand.(*[]*Brand)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &brandR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &brandR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_weapons`),
		qm.WhereIn(`blueprint_weapons.brand_id in ?`, args...),
		qmhelper.WhereIsNull(`blueprint_weapons.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blueprint_weapons")
	}

	var resultSlice []*BlueprintWeapon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blueprint_weapons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blueprint_weapons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_weapons")
	}

	if len(blueprintWeaponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlueprintWeapons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blueprintWeaponR{}
			}
			foreign.R.Brand = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BrandID) {
				local.R.BlueprintWeapons = append(local.R.BlueprintWeapons, foreign)
				if foreign.R == nil {
					foreign.R = &blueprintWeaponR{}
				}
				foreign.R.Brand = local
				break
			}
		}
	}

	return nil
}

// LoadChasses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (brandL) LoadChasses(e boil.Executor, singular bool, maybeBrand interface{}, mods queries.Applicator) error {
	var slice []*Brand
	var object *Brand

	if singular {
		object = maybeBrand.(*Brand)
	} else {
		slice = *maybeBrand.(*[]*Brand)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &brandR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &brandR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chassis`),
		qm.WhereIn(`chassis.brand_id in ?`, args...),
		qmhelper.WhereIsNull(`chassis.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chassis")
	}

	var resultSlice []*Chassis
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chassis")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chassis")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chassis")
	}

	if len(chassisAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Chasses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chassisR{}
			}
			foreign.R.Brand = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BrandID) {
				local.R.Chasses = append(local.R.Chasses, foreign)
				if foreign.R == nil {
					foreign.R = &chassisR{}
				}
				foreign.R.Brand = local
				break
			}
		}
	}

	return nil
}

// LoadMechs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (brandL) LoadMechs(e boil.Executor, singular bool, maybeBrand interface{}, mods queries.Applicator) error {
	var slice []*Brand
	var object *Brand

	if singular {
		object = maybeBrand.(*Brand)
	} else {
		slice = *maybeBrand.(*[]*Brand)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &brandR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &brandR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.brand_id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mechs")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mechs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Mechs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mechR{}
			}
			foreign.R.Brand = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BrandID) {
				local.R.Mechs = append(local.R.Mechs, foreign)
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.Brand = local
				break
			}
		}
	}

	return nil
}

// LoadModules allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (brandL) LoadModules(e boil.Executor, singular bool, maybeBrand interface{}, mods queries.Applicator) error {
	var slice []*Brand
	var object *Brand

	if singular {
		object = maybeBrand.(*Brand)
	} else {
		slice = *maybeBrand.(*[]*Brand)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &brandR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &brandR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`modules`),
		qm.WhereIn(`modules.brand_id in ?`, args...),
		qmhelper.WhereIsNull(`modules.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load modules")
	}

	var resultSlice []*Module
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice modules")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on modules")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for modules")
	}

	if len(moduleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Modules = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &moduleR{}
			}
			foreign.R.Brand = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BrandID) {
				local.R.Modules = append(local.R.Modules, foreign)
				if foreign.R == nil {
					foreign.R = &moduleR{}
				}
				foreign.R.Brand = local
				break
			}
		}
	}

	return nil
}

// LoadWeapons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (brandL) LoadWeapons(e boil.Executor, singular bool, maybeBrand interface{}, mods queries.Applicator) error {
	var slice []*Brand
	var object *Brand

	if singular {
		object = maybeBrand.(*Brand)
	} else {
		slice = *maybeBrand.(*[]*Brand)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &brandR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &brandR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`weapons`),
		qm.WhereIn(`weapons.brand_id in ?`, args...),
		qmhelper.WhereIsNull(`weapons.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load weapons")
	}

	var resultSlice []*Weapon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice weapons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on weapons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for weapons")
	}

	if len(weaponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Weapons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &weaponR{}
			}
			foreign.R.Brand = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BrandID) {
				local.R.Weapons = append(local.R.Weapons, foreign)
				if foreign.R == nil {
					foreign.R = &weaponR{}
				}
				foreign.R.Brand = local
				break
			}
		}
	}

	return nil
}

// SetSyndicate of the brand to the related item.
// Sets o.R.Syndicate to related.
// Adds o to related.R.Brands.
func (o *Brand) SetSyndicate(exec boil.Executor, insert bool, related *Syndicate) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"brands\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"syndicate_id"}),
		strmangle.WhereClause("\"", "\"", 2, brandPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SyndicateID = related.ID
	if o.R == nil {
		o.R = &brandR{
			Syndicate: related,
		}
	} else {
		o.R.Syndicate = related
	}

	if related.R == nil {
		related.R = &syndicateR{
			Brands: BrandSlice{o},
		}
	} else {
		related.R.Brands = append(related.R.Brands, o)
	}

	return nil
}

// AddBlueprintChasses adds the given related objects to the existing relationships
// of the brand, optionally inserting them as new records.
// Appends related to o.R.BlueprintChasses.
// Sets related.R.Brand appropriately.
func (o *Brand) AddBlueprintChasses(exec boil.Executor, insert bool, related ...*BlueprintChassis) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BrandID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"blueprint_chassis\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"brand_id"}),
				strmangle.WhereClause("\"", "\"", 2, blueprintChassisPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BrandID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &brandR{
			BlueprintChasses: related,
		}
	} else {
		o.R.BlueprintChasses = append(o.R.BlueprintChasses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blueprintChassisR{
				Brand: o,
			}
		} else {
			rel.R.Brand = o
		}
	}
	return nil
}

// SetBlueprintChasses removes all previously related items of the
// brand replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Brand's BlueprintChasses accordingly.
// Replaces o.R.BlueprintChasses with related.
// Sets related.R.Brand's BlueprintChasses accordingly.
func (o *Brand) SetBlueprintChasses(exec boil.Executor, insert bool, related ...*BlueprintChassis) error {
	query := "update \"blueprint_chassis\" set \"brand_id\" = null where \"brand_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BlueprintChasses {
			queries.SetScanner(&rel.BrandID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Brand = nil
		}

		o.R.BlueprintChasses = nil
	}
	return o.AddBlueprintChasses(exec, insert, related...)
}

// RemoveBlueprintChasses relationships from objects passed in.
// Removes related items from R.BlueprintChasses (uses pointer comparison, removal does not keep order)
// Sets related.R.Brand.
func (o *Brand) RemoveBlueprintChasses(exec boil.Executor, related ...*BlueprintChassis) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BrandID, nil)
		if rel.R != nil {
			rel.R.Brand = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("brand_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BlueprintChasses {
			if rel != ri {
				continue
			}

			ln := len(o.R.BlueprintChasses)
			if ln > 1 && i < ln-1 {
				o.R.BlueprintChasses[i] = o.R.BlueprintChasses[ln-1]
			}
			o.R.BlueprintChasses = o.R.BlueprintChasses[:ln-1]
			break
		}
	}

	return nil
}

// AddBlueprintModules adds the given related objects to the existing relationships
// of the brand, optionally inserting them as new records.
// Appends related to o.R.BlueprintModules.
// Sets related.R.Brand appropriately.
func (o *Brand) AddBlueprintModules(exec boil.Executor, insert bool, related ...*BlueprintModule) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BrandID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"blueprint_modules\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"brand_id"}),
				strmangle.WhereClause("\"", "\"", 2, blueprintModulePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BrandID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &brandR{
			BlueprintModules: related,
		}
	} else {
		o.R.BlueprintModules = append(o.R.BlueprintModules, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blueprintModuleR{
				Brand: o,
			}
		} else {
			rel.R.Brand = o
		}
	}
	return nil
}

// SetBlueprintModules removes all previously related items of the
// brand replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Brand's BlueprintModules accordingly.
// Replaces o.R.BlueprintModules with related.
// Sets related.R.Brand's BlueprintModules accordingly.
func (o *Brand) SetBlueprintModules(exec boil.Executor, insert bool, related ...*BlueprintModule) error {
	query := "update \"blueprint_modules\" set \"brand_id\" = null where \"brand_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BlueprintModules {
			queries.SetScanner(&rel.BrandID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Brand = nil
		}

		o.R.BlueprintModules = nil
	}
	return o.AddBlueprintModules(exec, insert, related...)
}

// RemoveBlueprintModules relationships from objects passed in.
// Removes related items from R.BlueprintModules (uses pointer comparison, removal does not keep order)
// Sets related.R.Brand.
func (o *Brand) RemoveBlueprintModules(exec boil.Executor, related ...*BlueprintModule) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BrandID, nil)
		if rel.R != nil {
			rel.R.Brand = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("brand_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BlueprintModules {
			if rel != ri {
				continue
			}

			ln := len(o.R.BlueprintModules)
			if ln > 1 && i < ln-1 {
				o.R.BlueprintModules[i] = o.R.BlueprintModules[ln-1]
			}
			o.R.BlueprintModules = o.R.BlueprintModules[:ln-1]
			break
		}
	}

	return nil
}

// AddBlueprintWeapons adds the given related objects to the existing relationships
// of the brand, optionally inserting them as new records.
// Appends related to o.R.BlueprintWeapons.
// Sets related.R.Brand appropriately.
func (o *Brand) AddBlueprintWeapons(exec boil.Executor, insert bool, related ...*BlueprintWeapon) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BrandID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"blueprint_weapons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"brand_id"}),
				strmangle.WhereClause("\"", "\"", 2, blueprintWeaponPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BrandID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &brandR{
			BlueprintWeapons: related,
		}
	} else {
		o.R.BlueprintWeapons = append(o.R.BlueprintWeapons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blueprintWeaponR{
				Brand: o,
			}
		} else {
			rel.R.Brand = o
		}
	}
	return nil
}

// SetBlueprintWeapons removes all previously related items of the
// brand replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Brand's BlueprintWeapons accordingly.
// Replaces o.R.BlueprintWeapons with related.
// Sets related.R.Brand's BlueprintWeapons accordingly.
func (o *Brand) SetBlueprintWeapons(exec boil.Executor, insert bool, related ...*BlueprintWeapon) error {
	query := "update \"blueprint_weapons\" set \"brand_id\" = null where \"brand_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BlueprintWeapons {
			queries.SetScanner(&rel.BrandID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Brand = nil
		}

		o.R.BlueprintWeapons = nil
	}
	return o.AddBlueprintWeapons(exec, insert, related...)
}

// RemoveBlueprintWeapons relationships from objects passed in.
// Removes related items from R.BlueprintWeapons (uses pointer comparison, removal does not keep order)
// Sets related.R.Brand.
func (o *Brand) RemoveBlueprintWeapons(exec boil.Executor, related ...*BlueprintWeapon) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BrandID, nil)
		if rel.R != nil {
			rel.R.Brand = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("brand_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BlueprintWeapons {
			if rel != ri {
				continue
			}

			ln := len(o.R.BlueprintWeapons)
			if ln > 1 && i < ln-1 {
				o.R.BlueprintWeapons[i] = o.R.BlueprintWeapons[ln-1]
			}
			o.R.BlueprintWeapons = o.R.BlueprintWeapons[:ln-1]
			break
		}
	}

	return nil
}

// AddChasses adds the given related objects to the existing relationships
// of the brand, optionally inserting them as new records.
// Appends related to o.R.Chasses.
// Sets related.R.Brand appropriately.
func (o *Brand) AddChasses(exec boil.Executor, insert bool, related ...*Chassis) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BrandID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"chassis\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"brand_id"}),
				strmangle.WhereClause("\"", "\"", 2, chassisPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BrandID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &brandR{
			Chasses: related,
		}
	} else {
		o.R.Chasses = append(o.R.Chasses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chassisR{
				Brand: o,
			}
		} else {
			rel.R.Brand = o
		}
	}
	return nil
}

// SetChasses removes all previously related items of the
// brand replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Brand's Chasses accordingly.
// Replaces o.R.Chasses with related.
// Sets related.R.Brand's Chasses accordingly.
func (o *Brand) SetChasses(exec boil.Executor, insert bool, related ...*Chassis) error {
	query := "update \"chassis\" set \"brand_id\" = null where \"brand_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Chasses {
			queries.SetScanner(&rel.BrandID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Brand = nil
		}

		o.R.Chasses = nil
	}
	return o.AddChasses(exec, insert, related...)
}

// RemoveChasses relationships from objects passed in.
// Removes related items from R.Chasses (uses pointer comparison, removal does not keep order)
// Sets related.R.Brand.
func (o *Brand) RemoveChasses(exec boil.Executor, related ...*Chassis) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BrandID, nil)
		if rel.R != nil {
			rel.R.Brand = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("brand_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Chasses {
			if rel != ri {
				continue
			}

			ln := len(o.R.Chasses)
			if ln > 1 && i < ln-1 {
				o.R.Chasses[i] = o.R.Chasses[ln-1]
			}
			o.R.Chasses = o.R.Chasses[:ln-1]
			break
		}
	}

	return nil
}

// AddMechs adds the given related objects to the existing relationships
// of the brand, optionally inserting them as new records.
// Appends related to o.R.Mechs.
// Sets related.R.Brand appropriately.
func (o *Brand) AddMechs(exec boil.Executor, insert bool, related ...*Mech) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BrandID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mechs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"brand_id"}),
				strmangle.WhereClause("\"", "\"", 2, mechPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BrandID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &brandR{
			Mechs: related,
		}
	} else {
		o.R.Mechs = append(o.R.Mechs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mechR{
				Brand: o,
			}
		} else {
			rel.R.Brand = o
		}
	}
	return nil
}

// SetMechs removes all previously related items of the
// brand replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Brand's Mechs accordingly.
// Replaces o.R.Mechs with related.
// Sets related.R.Brand's Mechs accordingly.
func (o *Brand) SetMechs(exec boil.Executor, insert bool, related ...*Mech) error {
	query := "update \"mechs\" set \"brand_id\" = null where \"brand_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Mechs {
			queries.SetScanner(&rel.BrandID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Brand = nil
		}

		o.R.Mechs = nil
	}
	return o.AddMechs(exec, insert, related...)
}

// RemoveMechs relationships from objects passed in.
// Removes related items from R.Mechs (uses pointer comparison, removal does not keep order)
// Sets related.R.Brand.
func (o *Brand) RemoveMechs(exec boil.Executor, related ...*Mech) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BrandID, nil)
		if rel.R != nil {
			rel.R.Brand = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("brand_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Mechs {
			if rel != ri {
				continue
			}

			ln := len(o.R.Mechs)
			if ln > 1 && i < ln-1 {
				o.R.Mechs[i] = o.R.Mechs[ln-1]
			}
			o.R.Mechs = o.R.Mechs[:ln-1]
			break
		}
	}

	return nil
}

// AddModules adds the given related objects to the existing relationships
// of the brand, optionally inserting them as new records.
// Appends related to o.R.Modules.
// Sets related.R.Brand appropriately.
func (o *Brand) AddModules(exec boil.Executor, insert bool, related ...*Module) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BrandID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"modules\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"brand_id"}),
				strmangle.WhereClause("\"", "\"", 2, modulePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BrandID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &brandR{
			Modules: related,
		}
	} else {
		o.R.Modules = append(o.R.Modules, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &moduleR{
				Brand: o,
			}
		} else {
			rel.R.Brand = o
		}
	}
	return nil
}

// SetModules removes all previously related items of the
// brand replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Brand's Modules accordingly.
// Replaces o.R.Modules with related.
// Sets related.R.Brand's Modules accordingly.
func (o *Brand) SetModules(exec boil.Executor, insert bool, related ...*Module) error {
	query := "update \"modules\" set \"brand_id\" = null where \"brand_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Modules {
			queries.SetScanner(&rel.BrandID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Brand = nil
		}

		o.R.Modules = nil
	}
	return o.AddModules(exec, insert, related...)
}

// RemoveModules relationships from objects passed in.
// Removes related items from R.Modules (uses pointer comparison, removal does not keep order)
// Sets related.R.Brand.
func (o *Brand) RemoveModules(exec boil.Executor, related ...*Module) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BrandID, nil)
		if rel.R != nil {
			rel.R.Brand = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("brand_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Modules {
			if rel != ri {
				continue
			}

			ln := len(o.R.Modules)
			if ln > 1 && i < ln-1 {
				o.R.Modules[i] = o.R.Modules[ln-1]
			}
			o.R.Modules = o.R.Modules[:ln-1]
			break
		}
	}

	return nil
}

// AddWeapons adds the given related objects to the existing relationships
// of the brand, optionally inserting them as new records.
// Appends related to o.R.Weapons.
// Sets related.R.Brand appropriately.
func (o *Brand) AddWeapons(exec boil.Executor, insert bool, related ...*Weapon) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BrandID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"weapons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"brand_id"}),
				strmangle.WhereClause("\"", "\"", 2, weaponPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BrandID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &brandR{
			Weapons: related,
		}
	} else {
		o.R.Weapons = append(o.R.Weapons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &weaponR{
				Brand: o,
			}
		} else {
			rel.R.Brand = o
		}
	}
	return nil
}

// SetWeapons removes all previously related items of the
// brand replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Brand's Weapons accordingly.
// Replaces o.R.Weapons with related.
// Sets related.R.Brand's Weapons accordingly.
func (o *Brand) SetWeapons(exec boil.Executor, insert bool, related ...*Weapon) error {
	query := "update \"weapons\" set \"brand_id\" = null where \"brand_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Weapons {
			queries.SetScanner(&rel.BrandID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Brand = nil
		}

		o.R.Weapons = nil
	}
	return o.AddWeapons(exec, insert, related...)
}

// RemoveWeapons relationships from objects passed in.
// Removes related items from R.Weapons (uses pointer comparison, removal does not keep order)
// Sets related.R.Brand.
func (o *Brand) RemoveWeapons(exec boil.Executor, related ...*Weapon) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BrandID, nil)
		if rel.R != nil {
			rel.R.Brand = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("brand_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Weapons {
			if rel != ri {
				continue
			}

			ln := len(o.R.Weapons)
			if ln > 1 && i < ln-1 {
				o.R.Weapons[i] = o.R.Weapons[ln-1]
			}
			o.R.Weapons = o.R.Weapons[:ln-1]
			break
		}
	}

	return nil
}

// Brands retrieves all the records using an executor.
func Brands(mods ...qm.QueryMod) brandQuery {
	mods = append(mods, qm.From("\"brands\""), qmhelper.WhereIsNull("\"brands\".\"deleted_at\""))
	return brandQuery{NewQuery(mods...)}
}

// FindBrand retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBrand(exec boil.Executor, iD string, selectCols ...string) (*Brand, error) {
	brandObj := &Brand{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"brands\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, brandObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from brands")
	}

	if err = brandObj.doAfterSelectHooks(exec); err != nil {
		return brandObj, err
	}

	return brandObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Brand) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no brands provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(brandColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	brandInsertCacheMut.RLock()
	cache, cached := brandInsertCache[key]
	brandInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			brandAllColumns,
			brandColumnsWithDefault,
			brandColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(brandType, brandMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(brandType, brandMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"brands\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"brands\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into brands")
	}

	if !cached {
		brandInsertCacheMut.Lock()
		brandInsertCache[key] = cache
		brandInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Brand.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Brand) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	brandUpdateCacheMut.RLock()
	cache, cached := brandUpdateCache[key]
	brandUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			brandAllColumns,
			brandPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update brands, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"brands\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, brandPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(brandType, brandMapping, append(wl, brandPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update brands row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for brands")
	}

	if !cached {
		brandUpdateCacheMut.Lock()
		brandUpdateCache[key] = cache
		brandUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q brandQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for brands")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for brands")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BrandSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), brandPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"brands\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, brandPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in brand slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all brand")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Brand) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no brands provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(brandColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	brandUpsertCacheMut.RLock()
	cache, cached := brandUpsertCache[key]
	brandUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			brandAllColumns,
			brandColumnsWithDefault,
			brandColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			brandAllColumns,
			brandPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert brands, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(brandPrimaryKeyColumns))
			copy(conflict, brandPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"brands\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(brandType, brandMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(brandType, brandMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert brands")
	}

	if !cached {
		brandUpsertCacheMut.Lock()
		brandUpsertCache[key] = cache
		brandUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Brand record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Brand) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Brand provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), brandPrimaryKeyMapping)
		sql = "DELETE FROM \"brands\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"brands\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(brandType, brandMapping, append(wl, brandPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from brands")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for brands")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q brandQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no brandQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from brands")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for brands")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BrandSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(brandBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), brandPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"brands\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, brandPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), brandPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"brands\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, brandPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from brand slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for brands")
	}

	if len(brandAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Brand) Reload(exec boil.Executor) error {
	ret, err := FindBrand(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BrandSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BrandSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), brandPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"brands\".* FROM \"brands\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, brandPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BrandSlice")
	}

	*o = slice

	return nil
}

// BrandExists checks if the Brand row exists.
func BrandExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"brands\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if brands exists")
	}

	return exists, nil
}
