// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Quest is an object representing the database table.
type Quest struct {
	ID            string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Name          string      `boiler:"name" boil:"name" json:"name" toml:"name" yaml:"name"`
	Key           string      `boiler:"key" boil:"key" json:"key" toml:"key" yaml:"key"`
	Description   string      `boiler:"description" boil:"description" json:"description" toml:"description" yaml:"description"`
	RequestAmount int         `boiler:"request_amount" boil:"request_amount" json:"request_amount" toml:"request_amount" yaml:"request_amount"`
	EndedAt       null.Time   `boiler:"ended_at" boil:"ended_at" json:"ended_at,omitempty" toml:"ended_at" yaml:"ended_at,omitempty"`
	NextQuestID   null.String `boiler:"next_quest_id" boil:"next_quest_id" json:"next_quest_id,omitempty" toml:"next_quest_id" yaml:"next_quest_id,omitempty"`
	CreatedAt     time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt     null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *questR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L questL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var QuestColumns = struct {
	ID            string
	Name          string
	Key           string
	Description   string
	RequestAmount string
	EndedAt       string
	NextQuestID   string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	ID:            "id",
	Name:          "name",
	Key:           "key",
	Description:   "description",
	RequestAmount: "request_amount",
	EndedAt:       "ended_at",
	NextQuestID:   "next_quest_id",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	DeletedAt:     "deleted_at",
}

var QuestTableColumns = struct {
	ID            string
	Name          string
	Key           string
	Description   string
	RequestAmount string
	EndedAt       string
	NextQuestID   string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	ID:            "quests.id",
	Name:          "quests.name",
	Key:           "quests.key",
	Description:   "quests.description",
	RequestAmount: "quests.request_amount",
	EndedAt:       "quests.ended_at",
	NextQuestID:   "quests.next_quest_id",
	CreatedAt:     "quests.created_at",
	UpdatedAt:     "quests.updated_at",
	DeletedAt:     "quests.deleted_at",
}

// Generated where

var QuestWhere = struct {
	ID            whereHelperstring
	Name          whereHelperstring
	Key           whereHelperstring
	Description   whereHelperstring
	RequestAmount whereHelperint
	EndedAt       whereHelpernull_Time
	NextQuestID   whereHelpernull_String
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	DeletedAt     whereHelpernull_Time
}{
	ID:            whereHelperstring{field: "\"quests\".\"id\""},
	Name:          whereHelperstring{field: "\"quests\".\"name\""},
	Key:           whereHelperstring{field: "\"quests\".\"key\""},
	Description:   whereHelperstring{field: "\"quests\".\"description\""},
	RequestAmount: whereHelperint{field: "\"quests\".\"request_amount\""},
	EndedAt:       whereHelpernull_Time{field: "\"quests\".\"ended_at\""},
	NextQuestID:   whereHelpernull_String{field: "\"quests\".\"next_quest_id\""},
	CreatedAt:     whereHelpertime_Time{field: "\"quests\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"quests\".\"updated_at\""},
	DeletedAt:     whereHelpernull_Time{field: "\"quests\".\"deleted_at\""},
}

// QuestRels is where relationship names are stored.
var QuestRels = struct {
	NextQuest       string
	PlayersQuests   string
	NextQuestQuests string
}{
	NextQuest:       "NextQuest",
	PlayersQuests:   "PlayersQuests",
	NextQuestQuests: "NextQuestQuests",
}

// questR is where relationships are stored.
type questR struct {
	NextQuest       *Quest            `boiler:"NextQuest" boil:"NextQuest" json:"NextQuest" toml:"NextQuest" yaml:"NextQuest"`
	PlayersQuests   PlayersQuestSlice `boiler:"PlayersQuests" boil:"PlayersQuests" json:"PlayersQuests" toml:"PlayersQuests" yaml:"PlayersQuests"`
	NextQuestQuests QuestSlice        `boiler:"NextQuestQuests" boil:"NextQuestQuests" json:"NextQuestQuests" toml:"NextQuestQuests" yaml:"NextQuestQuests"`
}

// NewStruct creates a new relationship struct
func (*questR) NewStruct() *questR {
	return &questR{}
}

// questL is where Load methods for each relationship are stored.
type questL struct{}

var (
	questAllColumns            = []string{"id", "name", "key", "description", "request_amount", "ended_at", "next_quest_id", "created_at", "updated_at", "deleted_at"}
	questColumnsWithoutDefault = []string{"name", "key", "description", "request_amount"}
	questColumnsWithDefault    = []string{"id", "ended_at", "next_quest_id", "created_at", "updated_at", "deleted_at"}
	questPrimaryKeyColumns     = []string{"id"}
	questGeneratedColumns      = []string{}
)

type (
	// QuestSlice is an alias for a slice of pointers to Quest.
	// This should almost always be used instead of []Quest.
	QuestSlice []*Quest
	// QuestHook is the signature for custom Quest hook methods
	QuestHook func(boil.Executor, *Quest) error

	questQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	questType                 = reflect.TypeOf(&Quest{})
	questMapping              = queries.MakeStructMapping(questType)
	questPrimaryKeyMapping, _ = queries.BindMapping(questType, questMapping, questPrimaryKeyColumns)
	questInsertCacheMut       sync.RWMutex
	questInsertCache          = make(map[string]insertCache)
	questUpdateCacheMut       sync.RWMutex
	questUpdateCache          = make(map[string]updateCache)
	questUpsertCacheMut       sync.RWMutex
	questUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var questAfterSelectHooks []QuestHook

var questBeforeInsertHooks []QuestHook
var questAfterInsertHooks []QuestHook

var questBeforeUpdateHooks []QuestHook
var questAfterUpdateHooks []QuestHook

var questBeforeDeleteHooks []QuestHook
var questAfterDeleteHooks []QuestHook

var questBeforeUpsertHooks []QuestHook
var questAfterUpsertHooks []QuestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Quest) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range questAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Quest) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range questBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Quest) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range questAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Quest) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range questBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Quest) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range questAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Quest) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range questBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Quest) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range questAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Quest) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range questBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Quest) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range questAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddQuestHook registers your hook function for all future operations.
func AddQuestHook(hookPoint boil.HookPoint, questHook QuestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		questAfterSelectHooks = append(questAfterSelectHooks, questHook)
	case boil.BeforeInsertHook:
		questBeforeInsertHooks = append(questBeforeInsertHooks, questHook)
	case boil.AfterInsertHook:
		questAfterInsertHooks = append(questAfterInsertHooks, questHook)
	case boil.BeforeUpdateHook:
		questBeforeUpdateHooks = append(questBeforeUpdateHooks, questHook)
	case boil.AfterUpdateHook:
		questAfterUpdateHooks = append(questAfterUpdateHooks, questHook)
	case boil.BeforeDeleteHook:
		questBeforeDeleteHooks = append(questBeforeDeleteHooks, questHook)
	case boil.AfterDeleteHook:
		questAfterDeleteHooks = append(questAfterDeleteHooks, questHook)
	case boil.BeforeUpsertHook:
		questBeforeUpsertHooks = append(questBeforeUpsertHooks, questHook)
	case boil.AfterUpsertHook:
		questAfterUpsertHooks = append(questAfterUpsertHooks, questHook)
	}
}

// One returns a single quest record from the query.
func (q questQuery) One(exec boil.Executor) (*Quest, error) {
	o := &Quest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for quests")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Quest records from the query.
func (q questQuery) All(exec boil.Executor) (QuestSlice, error) {
	var o []*Quest

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Quest slice")
	}

	if len(questAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Quest records in the query.
func (q questQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count quests rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q questQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if quests exists")
	}

	return count > 0, nil
}

// NextQuest pointed to by the foreign key.
func (o *Quest) NextQuest(mods ...qm.QueryMod) questQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.NextQuestID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Quests(queryMods...)
	queries.SetFrom(query.Query, "\"quests\"")

	return query
}

// PlayersQuests retrieves all the players_quest's PlayersQuests with an executor.
func (o *Quest) PlayersQuests(mods ...qm.QueryMod) playersQuestQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"players_quests\".\"quest_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"players_quests\".\"deleted_at\""),
	)

	query := PlayersQuests(queryMods...)
	queries.SetFrom(query.Query, "\"players_quests\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"players_quests\".*"})
	}

	return query
}

// NextQuestQuests retrieves all the quest's Quests with an executor via next_quest_id column.
func (o *Quest) NextQuestQuests(mods ...qm.QueryMod) questQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"quests\".\"next_quest_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"quests\".\"deleted_at\""),
	)

	query := Quests(queryMods...)
	queries.SetFrom(query.Query, "\"quests\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"quests\".*"})
	}

	return query
}

// LoadNextQuest allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (questL) LoadNextQuest(e boil.Executor, singular bool, maybeQuest interface{}, mods queries.Applicator) error {
	var slice []*Quest
	var object *Quest

	if singular {
		object = maybeQuest.(*Quest)
	} else {
		slice = *maybeQuest.(*[]*Quest)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &questR{}
		}
		if !queries.IsNil(object.NextQuestID) {
			args = append(args, object.NextQuestID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &questR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.NextQuestID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.NextQuestID) {
				args = append(args, obj.NextQuestID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`quests`),
		qm.WhereIn(`quests.id in ?`, args...),
		qmhelper.WhereIsNull(`quests.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Quest")
	}

	var resultSlice []*Quest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Quest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for quests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for quests")
	}

	if len(questAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.NextQuest = foreign
		if foreign.R == nil {
			foreign.R = &questR{}
		}
		foreign.R.NextQuestQuests = append(foreign.R.NextQuestQuests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.NextQuestID, foreign.ID) {
				local.R.NextQuest = foreign
				if foreign.R == nil {
					foreign.R = &questR{}
				}
				foreign.R.NextQuestQuests = append(foreign.R.NextQuestQuests, local)
				break
			}
		}
	}

	return nil
}

// LoadPlayersQuests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (questL) LoadPlayersQuests(e boil.Executor, singular bool, maybeQuest interface{}, mods queries.Applicator) error {
	var slice []*Quest
	var object *Quest

	if singular {
		object = maybeQuest.(*Quest)
	} else {
		slice = *maybeQuest.(*[]*Quest)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &questR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &questR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players_quests`),
		qm.WhereIn(`players_quests.quest_id in ?`, args...),
		qmhelper.WhereIsNull(`players_quests.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load players_quests")
	}

	var resultSlice []*PlayersQuest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice players_quests")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on players_quests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players_quests")
	}

	if len(playersQuestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PlayersQuests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playersQuestR{}
			}
			foreign.R.Quest = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.QuestID {
				local.R.PlayersQuests = append(local.R.PlayersQuests, foreign)
				if foreign.R == nil {
					foreign.R = &playersQuestR{}
				}
				foreign.R.Quest = local
				break
			}
		}
	}

	return nil
}

// LoadNextQuestQuests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (questL) LoadNextQuestQuests(e boil.Executor, singular bool, maybeQuest interface{}, mods queries.Applicator) error {
	var slice []*Quest
	var object *Quest

	if singular {
		object = maybeQuest.(*Quest)
	} else {
		slice = *maybeQuest.(*[]*Quest)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &questR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &questR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`quests`),
		qm.WhereIn(`quests.next_quest_id in ?`, args...),
		qmhelper.WhereIsNull(`quests.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load quests")
	}

	var resultSlice []*Quest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice quests")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on quests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for quests")
	}

	if len(questAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.NextQuestQuests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &questR{}
			}
			foreign.R.NextQuest = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.NextQuestID) {
				local.R.NextQuestQuests = append(local.R.NextQuestQuests, foreign)
				if foreign.R == nil {
					foreign.R = &questR{}
				}
				foreign.R.NextQuest = local
				break
			}
		}
	}

	return nil
}

// SetNextQuest of the quest to the related item.
// Sets o.R.NextQuest to related.
// Adds o to related.R.NextQuestQuests.
func (o *Quest) SetNextQuest(exec boil.Executor, insert bool, related *Quest) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"quests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"next_quest_id"}),
		strmangle.WhereClause("\"", "\"", 2, questPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.NextQuestID, related.ID)
	if o.R == nil {
		o.R = &questR{
			NextQuest: related,
		}
	} else {
		o.R.NextQuest = related
	}

	if related.R == nil {
		related.R = &questR{
			NextQuestQuests: QuestSlice{o},
		}
	} else {
		related.R.NextQuestQuests = append(related.R.NextQuestQuests, o)
	}

	return nil
}

// RemoveNextQuest relationship.
// Sets o.R.NextQuest to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Quest) RemoveNextQuest(exec boil.Executor, related *Quest) error {
	var err error

	queries.SetScanner(&o.NextQuestID, nil)
	if _, err = o.Update(exec, boil.Whitelist("next_quest_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.NextQuest = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.NextQuestQuests {
		if queries.Equal(o.NextQuestID, ri.NextQuestID) {
			continue
		}

		ln := len(related.R.NextQuestQuests)
		if ln > 1 && i < ln-1 {
			related.R.NextQuestQuests[i] = related.R.NextQuestQuests[ln-1]
		}
		related.R.NextQuestQuests = related.R.NextQuestQuests[:ln-1]
		break
	}
	return nil
}

// AddPlayersQuests adds the given related objects to the existing relationships
// of the quest, optionally inserting them as new records.
// Appends related to o.R.PlayersQuests.
// Sets related.R.Quest appropriately.
func (o *Quest) AddPlayersQuests(exec boil.Executor, insert bool, related ...*PlayersQuest) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.QuestID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"players_quests\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"quest_id"}),
				strmangle.WhereClause("\"", "\"", 2, playersQuestPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.PlayerID, rel.QuestID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.QuestID = o.ID
		}
	}

	if o.R == nil {
		o.R = &questR{
			PlayersQuests: related,
		}
	} else {
		o.R.PlayersQuests = append(o.R.PlayersQuests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playersQuestR{
				Quest: o,
			}
		} else {
			rel.R.Quest = o
		}
	}
	return nil
}

// AddNextQuestQuests adds the given related objects to the existing relationships
// of the quest, optionally inserting them as new records.
// Appends related to o.R.NextQuestQuests.
// Sets related.R.NextQuest appropriately.
func (o *Quest) AddNextQuestQuests(exec boil.Executor, insert bool, related ...*Quest) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.NextQuestID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"quests\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"next_quest_id"}),
				strmangle.WhereClause("\"", "\"", 2, questPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.NextQuestID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &questR{
			NextQuestQuests: related,
		}
	} else {
		o.R.NextQuestQuests = append(o.R.NextQuestQuests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &questR{
				NextQuest: o,
			}
		} else {
			rel.R.NextQuest = o
		}
	}
	return nil
}

// SetNextQuestQuests removes all previously related items of the
// quest replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.NextQuest's NextQuestQuests accordingly.
// Replaces o.R.NextQuestQuests with related.
// Sets related.R.NextQuest's NextQuestQuests accordingly.
func (o *Quest) SetNextQuestQuests(exec boil.Executor, insert bool, related ...*Quest) error {
	query := "update \"quests\" set \"next_quest_id\" = null where \"next_quest_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.NextQuestQuests {
			queries.SetScanner(&rel.NextQuestID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.NextQuest = nil
		}

		o.R.NextQuestQuests = nil
	}
	return o.AddNextQuestQuests(exec, insert, related...)
}

// RemoveNextQuestQuests relationships from objects passed in.
// Removes related items from R.NextQuestQuests (uses pointer comparison, removal does not keep order)
// Sets related.R.NextQuest.
func (o *Quest) RemoveNextQuestQuests(exec boil.Executor, related ...*Quest) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.NextQuestID, nil)
		if rel.R != nil {
			rel.R.NextQuest = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("next_quest_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.NextQuestQuests {
			if rel != ri {
				continue
			}

			ln := len(o.R.NextQuestQuests)
			if ln > 1 && i < ln-1 {
				o.R.NextQuestQuests[i] = o.R.NextQuestQuests[ln-1]
			}
			o.R.NextQuestQuests = o.R.NextQuestQuests[:ln-1]
			break
		}
	}

	return nil
}

// Quests retrieves all the records using an executor.
func Quests(mods ...qm.QueryMod) questQuery {
	mods = append(mods, qm.From("\"quests\""), qmhelper.WhereIsNull("\"quests\".\"deleted_at\""))
	return questQuery{NewQuery(mods...)}
}

// FindQuest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindQuest(exec boil.Executor, iD string, selectCols ...string) (*Quest, error) {
	questObj := &Quest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"quests\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, questObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from quests")
	}

	if err = questObj.doAfterSelectHooks(exec); err != nil {
		return questObj, err
	}

	return questObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Quest) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no quests provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(questColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	questInsertCacheMut.RLock()
	cache, cached := questInsertCache[key]
	questInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			questAllColumns,
			questColumnsWithDefault,
			questColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(questType, questMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(questType, questMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"quests\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"quests\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into quests")
	}

	if !cached {
		questInsertCacheMut.Lock()
		questInsertCache[key] = cache
		questInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Quest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Quest) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	questUpdateCacheMut.RLock()
	cache, cached := questUpdateCache[key]
	questUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			questAllColumns,
			questPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update quests, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"quests\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, questPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(questType, questMapping, append(wl, questPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update quests row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for quests")
	}

	if !cached {
		questUpdateCacheMut.Lock()
		questUpdateCache[key] = cache
		questUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q questQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for quests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for quests")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o QuestSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), questPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"quests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, questPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in quest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all quest")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Quest) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no quests provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(questColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	questUpsertCacheMut.RLock()
	cache, cached := questUpsertCache[key]
	questUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			questAllColumns,
			questColumnsWithDefault,
			questColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			questAllColumns,
			questPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert quests, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(questPrimaryKeyColumns))
			copy(conflict, questPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"quests\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(questType, questMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(questType, questMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert quests")
	}

	if !cached {
		questUpsertCacheMut.Lock()
		questUpsertCache[key] = cache
		questUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Quest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Quest) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Quest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), questPrimaryKeyMapping)
		sql = "DELETE FROM \"quests\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"quests\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(questType, questMapping, append(wl, questPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from quests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for quests")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q questQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no questQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from quests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for quests")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o QuestSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(questBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), questPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"quests\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, questPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), questPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"quests\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, questPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from quest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for quests")
	}

	if len(questAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Quest) Reload(exec boil.Executor) error {
	ret, err := FindQuest(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *QuestSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := QuestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), questPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"quests\".* FROM \"quests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, questPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in QuestSlice")
	}

	*o = slice

	return nil
}

// QuestExists checks if the Quest row exists.
func QuestExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"quests\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if quests exists")
	}

	return exists, nil
}
