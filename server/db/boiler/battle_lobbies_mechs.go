// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BattleLobbiesMech is an object representing the database table.
type BattleLobbiesMech struct {
	ID                 string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BattleLobbyID      string      `boiler:"battle_lobby_id" boil:"battle_lobby_id" json:"battle_lobby_id" toml:"battle_lobby_id" yaml:"battle_lobby_id"`
	MechID             string      `boiler:"mech_id" boil:"mech_id" json:"mech_id" toml:"mech_id" yaml:"mech_id"`
	PaidTXID           null.String `boiler:"paid_tx_id" boil:"paid_tx_id" json:"paid_tx_id,omitempty" toml:"paid_tx_id" yaml:"paid_tx_id,omitempty"`
	RefundTXID         null.String `boiler:"refund_tx_id" boil:"refund_tx_id" json:"refund_tx_id,omitempty" toml:"refund_tx_id" yaml:"refund_tx_id,omitempty"`
	QueuedByID         string      `boiler:"queued_by_id" boil:"queued_by_id" json:"queued_by_id" toml:"queued_by_id" yaml:"queued_by_id"`
	FactionID          string      `boiler:"faction_id" boil:"faction_id" json:"faction_id" toml:"faction_id" yaml:"faction_id"`
	IsNotified         bool        `boiler:"is_notified" boil:"is_notified" json:"is_notified" toml:"is_notified" yaml:"is_notified"`
	NotifiedTXID       null.String `boiler:"notified_tx_id" boil:"notified_tx_id" json:"notified_tx_id,omitempty" toml:"notified_tx_id" yaml:"notified_tx_id,omitempty"`
	BonusSupsTXID      null.String `boiler:"bonus_sups_tx_id" boil:"bonus_sups_tx_id" json:"bonus_sups_tx_id,omitempty" toml:"bonus_sups_tx_id" yaml:"bonus_sups_tx_id,omitempty"`
	PayoutTXID         null.String `boiler:"payout_tx_id" boil:"payout_tx_id" json:"payout_tx_id,omitempty" toml:"payout_tx_id" yaml:"payout_tx_id,omitempty"`
	TaxTXID            null.String `boiler:"tax_tx_id" boil:"tax_tx_id" json:"tax_tx_id,omitempty" toml:"tax_tx_id" yaml:"tax_tx_id,omitempty"`
	ChallengeFundTXID  null.String `boiler:"challenge_fund_tx_id" boil:"challenge_fund_tx_id" json:"challenge_fund_tx_id,omitempty" toml:"challenge_fund_tx_id" yaml:"challenge_fund_tx_id,omitempty"`
	LockedAt           null.Time   `boiler:"locked_at" boil:"locked_at" json:"locked_at,omitempty" toml:"locked_at" yaml:"locked_at,omitempty"`
	EndedAt            null.Time   `boiler:"ended_at" boil:"ended_at" json:"ended_at,omitempty" toml:"ended_at" yaml:"ended_at,omitempty"`
	AssignedToBattleID null.String `boiler:"assigned_to_battle_id" boil:"assigned_to_battle_id" json:"assigned_to_battle_id,omitempty" toml:"assigned_to_battle_id" yaml:"assigned_to_battle_id,omitempty"`
	CreatedAt          time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt          null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *battleLobbiesMechR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L battleLobbiesMechL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattleLobbiesMechColumns = struct {
	ID                 string
	BattleLobbyID      string
	MechID             string
	PaidTXID           string
	RefundTXID         string
	QueuedByID         string
	FactionID          string
	IsNotified         string
	NotifiedTXID       string
	BonusSupsTXID      string
	PayoutTXID         string
	TaxTXID            string
	ChallengeFundTXID  string
	LockedAt           string
	EndedAt            string
	AssignedToBattleID string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "id",
	BattleLobbyID:      "battle_lobby_id",
	MechID:             "mech_id",
	PaidTXID:           "paid_tx_id",
	RefundTXID:         "refund_tx_id",
	QueuedByID:         "queued_by_id",
	FactionID:          "faction_id",
	IsNotified:         "is_notified",
	NotifiedTXID:       "notified_tx_id",
	BonusSupsTXID:      "bonus_sups_tx_id",
	PayoutTXID:         "payout_tx_id",
	TaxTXID:            "tax_tx_id",
	ChallengeFundTXID:  "challenge_fund_tx_id",
	LockedAt:           "locked_at",
	EndedAt:            "ended_at",
	AssignedToBattleID: "assigned_to_battle_id",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	DeletedAt:          "deleted_at",
}

var BattleLobbiesMechTableColumns = struct {
	ID                 string
	BattleLobbyID      string
	MechID             string
	PaidTXID           string
	RefundTXID         string
	QueuedByID         string
	FactionID          string
	IsNotified         string
	NotifiedTXID       string
	BonusSupsTXID      string
	PayoutTXID         string
	TaxTXID            string
	ChallengeFundTXID  string
	LockedAt           string
	EndedAt            string
	AssignedToBattleID string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "battle_lobbies_mechs.id",
	BattleLobbyID:      "battle_lobbies_mechs.battle_lobby_id",
	MechID:             "battle_lobbies_mechs.mech_id",
	PaidTXID:           "battle_lobbies_mechs.paid_tx_id",
	RefundTXID:         "battle_lobbies_mechs.refund_tx_id",
	QueuedByID:         "battle_lobbies_mechs.queued_by_id",
	FactionID:          "battle_lobbies_mechs.faction_id",
	IsNotified:         "battle_lobbies_mechs.is_notified",
	NotifiedTXID:       "battle_lobbies_mechs.notified_tx_id",
	BonusSupsTXID:      "battle_lobbies_mechs.bonus_sups_tx_id",
	PayoutTXID:         "battle_lobbies_mechs.payout_tx_id",
	TaxTXID:            "battle_lobbies_mechs.tax_tx_id",
	ChallengeFundTXID:  "battle_lobbies_mechs.challenge_fund_tx_id",
	LockedAt:           "battle_lobbies_mechs.locked_at",
	EndedAt:            "battle_lobbies_mechs.ended_at",
	AssignedToBattleID: "battle_lobbies_mechs.assigned_to_battle_id",
	CreatedAt:          "battle_lobbies_mechs.created_at",
	UpdatedAt:          "battle_lobbies_mechs.updated_at",
	DeletedAt:          "battle_lobbies_mechs.deleted_at",
}

// Generated where

var BattleLobbiesMechWhere = struct {
	ID                 whereHelperstring
	BattleLobbyID      whereHelperstring
	MechID             whereHelperstring
	PaidTXID           whereHelpernull_String
	RefundTXID         whereHelpernull_String
	QueuedByID         whereHelperstring
	FactionID          whereHelperstring
	IsNotified         whereHelperbool
	NotifiedTXID       whereHelpernull_String
	BonusSupsTXID      whereHelpernull_String
	PayoutTXID         whereHelpernull_String
	TaxTXID            whereHelpernull_String
	ChallengeFundTXID  whereHelpernull_String
	LockedAt           whereHelpernull_Time
	EndedAt            whereHelpernull_Time
	AssignedToBattleID whereHelpernull_String
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
	DeletedAt          whereHelpernull_Time
}{
	ID:                 whereHelperstring{field: "\"battle_lobbies_mechs\".\"id\""},
	BattleLobbyID:      whereHelperstring{field: "\"battle_lobbies_mechs\".\"battle_lobby_id\""},
	MechID:             whereHelperstring{field: "\"battle_lobbies_mechs\".\"mech_id\""},
	PaidTXID:           whereHelpernull_String{field: "\"battle_lobbies_mechs\".\"paid_tx_id\""},
	RefundTXID:         whereHelpernull_String{field: "\"battle_lobbies_mechs\".\"refund_tx_id\""},
	QueuedByID:         whereHelperstring{field: "\"battle_lobbies_mechs\".\"queued_by_id\""},
	FactionID:          whereHelperstring{field: "\"battle_lobbies_mechs\".\"faction_id\""},
	IsNotified:         whereHelperbool{field: "\"battle_lobbies_mechs\".\"is_notified\""},
	NotifiedTXID:       whereHelpernull_String{field: "\"battle_lobbies_mechs\".\"notified_tx_id\""},
	BonusSupsTXID:      whereHelpernull_String{field: "\"battle_lobbies_mechs\".\"bonus_sups_tx_id\""},
	PayoutTXID:         whereHelpernull_String{field: "\"battle_lobbies_mechs\".\"payout_tx_id\""},
	TaxTXID:            whereHelpernull_String{field: "\"battle_lobbies_mechs\".\"tax_tx_id\""},
	ChallengeFundTXID:  whereHelpernull_String{field: "\"battle_lobbies_mechs\".\"challenge_fund_tx_id\""},
	LockedAt:           whereHelpernull_Time{field: "\"battle_lobbies_mechs\".\"locked_at\""},
	EndedAt:            whereHelpernull_Time{field: "\"battle_lobbies_mechs\".\"ended_at\""},
	AssignedToBattleID: whereHelpernull_String{field: "\"battle_lobbies_mechs\".\"assigned_to_battle_id\""},
	CreatedAt:          whereHelpertime_Time{field: "\"battle_lobbies_mechs\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"battle_lobbies_mechs\".\"updated_at\""},
	DeletedAt:          whereHelpernull_Time{field: "\"battle_lobbies_mechs\".\"deleted_at\""},
}

// BattleLobbiesMechRels is where relationship names are stored.
var BattleLobbiesMechRels = struct {
	AssignedToBattle string
	BattleLobby      string
	Faction          string
	Mech             string
	QueuedBy         string
}{
	AssignedToBattle: "AssignedToBattle",
	BattleLobby:      "BattleLobby",
	Faction:          "Faction",
	Mech:             "Mech",
	QueuedBy:         "QueuedBy",
}

// battleLobbiesMechR is where relationships are stored.
type battleLobbiesMechR struct {
	AssignedToBattle *Battle      `boiler:"AssignedToBattle" boil:"AssignedToBattle" json:"AssignedToBattle" toml:"AssignedToBattle" yaml:"AssignedToBattle"`
	BattleLobby      *BattleLobby `boiler:"BattleLobby" boil:"BattleLobby" json:"BattleLobby" toml:"BattleLobby" yaml:"BattleLobby"`
	Faction          *Faction     `boiler:"Faction" boil:"Faction" json:"Faction" toml:"Faction" yaml:"Faction"`
	Mech             *Mech        `boiler:"Mech" boil:"Mech" json:"Mech" toml:"Mech" yaml:"Mech"`
	QueuedBy         *Player      `boiler:"QueuedBy" boil:"QueuedBy" json:"QueuedBy" toml:"QueuedBy" yaml:"QueuedBy"`
}

// NewStruct creates a new relationship struct
func (*battleLobbiesMechR) NewStruct() *battleLobbiesMechR {
	return &battleLobbiesMechR{}
}

// battleLobbiesMechL is where Load methods for each relationship are stored.
type battleLobbiesMechL struct{}

var (
	battleLobbiesMechAllColumns            = []string{"id", "battle_lobby_id", "mech_id", "paid_tx_id", "refund_tx_id", "queued_by_id", "faction_id", "is_notified", "notified_tx_id", "bonus_sups_tx_id", "payout_tx_id", "tax_tx_id", "challenge_fund_tx_id", "locked_at", "ended_at", "assigned_to_battle_id", "created_at", "updated_at", "deleted_at"}
	battleLobbiesMechColumnsWithoutDefault = []string{"battle_lobby_id", "mech_id", "queued_by_id", "faction_id"}
	battleLobbiesMechColumnsWithDefault    = []string{"id", "paid_tx_id", "refund_tx_id", "is_notified", "notified_tx_id", "bonus_sups_tx_id", "payout_tx_id", "tax_tx_id", "challenge_fund_tx_id", "locked_at", "ended_at", "assigned_to_battle_id", "created_at", "updated_at", "deleted_at"}
	battleLobbiesMechPrimaryKeyColumns     = []string{"id"}
	battleLobbiesMechGeneratedColumns      = []string{}
)

type (
	// BattleLobbiesMechSlice is an alias for a slice of pointers to BattleLobbiesMech.
	// This should almost always be used instead of []BattleLobbiesMech.
	BattleLobbiesMechSlice []*BattleLobbiesMech
	// BattleLobbiesMechHook is the signature for custom BattleLobbiesMech hook methods
	BattleLobbiesMechHook func(boil.Executor, *BattleLobbiesMech) error

	battleLobbiesMechQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battleLobbiesMechType                 = reflect.TypeOf(&BattleLobbiesMech{})
	battleLobbiesMechMapping              = queries.MakeStructMapping(battleLobbiesMechType)
	battleLobbiesMechPrimaryKeyMapping, _ = queries.BindMapping(battleLobbiesMechType, battleLobbiesMechMapping, battleLobbiesMechPrimaryKeyColumns)
	battleLobbiesMechInsertCacheMut       sync.RWMutex
	battleLobbiesMechInsertCache          = make(map[string]insertCache)
	battleLobbiesMechUpdateCacheMut       sync.RWMutex
	battleLobbiesMechUpdateCache          = make(map[string]updateCache)
	battleLobbiesMechUpsertCacheMut       sync.RWMutex
	battleLobbiesMechUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battleLobbiesMechAfterSelectHooks []BattleLobbiesMechHook

var battleLobbiesMechBeforeInsertHooks []BattleLobbiesMechHook
var battleLobbiesMechAfterInsertHooks []BattleLobbiesMechHook

var battleLobbiesMechBeforeUpdateHooks []BattleLobbiesMechHook
var battleLobbiesMechAfterUpdateHooks []BattleLobbiesMechHook

var battleLobbiesMechBeforeDeleteHooks []BattleLobbiesMechHook
var battleLobbiesMechAfterDeleteHooks []BattleLobbiesMechHook

var battleLobbiesMechBeforeUpsertHooks []BattleLobbiesMechHook
var battleLobbiesMechAfterUpsertHooks []BattleLobbiesMechHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BattleLobbiesMech) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbiesMechAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BattleLobbiesMech) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbiesMechBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BattleLobbiesMech) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbiesMechAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BattleLobbiesMech) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbiesMechBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BattleLobbiesMech) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbiesMechAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BattleLobbiesMech) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbiesMechBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BattleLobbiesMech) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbiesMechAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BattleLobbiesMech) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbiesMechBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BattleLobbiesMech) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbiesMechAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattleLobbiesMechHook registers your hook function for all future operations.
func AddBattleLobbiesMechHook(hookPoint boil.HookPoint, battleLobbiesMechHook BattleLobbiesMechHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		battleLobbiesMechAfterSelectHooks = append(battleLobbiesMechAfterSelectHooks, battleLobbiesMechHook)
	case boil.BeforeInsertHook:
		battleLobbiesMechBeforeInsertHooks = append(battleLobbiesMechBeforeInsertHooks, battleLobbiesMechHook)
	case boil.AfterInsertHook:
		battleLobbiesMechAfterInsertHooks = append(battleLobbiesMechAfterInsertHooks, battleLobbiesMechHook)
	case boil.BeforeUpdateHook:
		battleLobbiesMechBeforeUpdateHooks = append(battleLobbiesMechBeforeUpdateHooks, battleLobbiesMechHook)
	case boil.AfterUpdateHook:
		battleLobbiesMechAfterUpdateHooks = append(battleLobbiesMechAfterUpdateHooks, battleLobbiesMechHook)
	case boil.BeforeDeleteHook:
		battleLobbiesMechBeforeDeleteHooks = append(battleLobbiesMechBeforeDeleteHooks, battleLobbiesMechHook)
	case boil.AfterDeleteHook:
		battleLobbiesMechAfterDeleteHooks = append(battleLobbiesMechAfterDeleteHooks, battleLobbiesMechHook)
	case boil.BeforeUpsertHook:
		battleLobbiesMechBeforeUpsertHooks = append(battleLobbiesMechBeforeUpsertHooks, battleLobbiesMechHook)
	case boil.AfterUpsertHook:
		battleLobbiesMechAfterUpsertHooks = append(battleLobbiesMechAfterUpsertHooks, battleLobbiesMechHook)
	}
}

// One returns a single battleLobbiesMech record from the query.
func (q battleLobbiesMechQuery) One(exec boil.Executor) (*BattleLobbiesMech, error) {
	o := &BattleLobbiesMech{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for battle_lobbies_mechs")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BattleLobbiesMech records from the query.
func (q battleLobbiesMechQuery) All(exec boil.Executor) (BattleLobbiesMechSlice, error) {
	var o []*BattleLobbiesMech

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BattleLobbiesMech slice")
	}

	if len(battleLobbiesMechAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BattleLobbiesMech records in the query.
func (q battleLobbiesMechQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count battle_lobbies_mechs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battleLobbiesMechQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if battle_lobbies_mechs exists")
	}

	return count > 0, nil
}

// AssignedToBattle pointed to by the foreign key.
func (o *BattleLobbiesMech) AssignedToBattle(mods ...qm.QueryMod) battleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AssignedToBattleID),
	}

	queryMods = append(queryMods, mods...)

	query := Battles(queryMods...)
	queries.SetFrom(query.Query, "\"battles\"")

	return query
}

// BattleLobby pointed to by the foreign key.
func (o *BattleLobbiesMech) BattleLobby(mods ...qm.QueryMod) battleLobbyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BattleLobbyID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := BattleLobbies(queryMods...)
	queries.SetFrom(query.Query, "\"battle_lobbies\"")

	return query
}

// Faction pointed to by the foreign key.
func (o *BattleLobbiesMech) Faction(mods ...qm.QueryMod) factionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FactionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Factions(queryMods...)
	queries.SetFrom(query.Query, "\"factions\"")

	return query
}

// Mech pointed to by the foreign key.
func (o *BattleLobbiesMech) Mech(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MechID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// QueuedBy pointed to by the foreign key.
func (o *BattleLobbiesMech) QueuedBy(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.QueuedByID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// LoadAssignedToBattle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleLobbiesMechL) LoadAssignedToBattle(e boil.Executor, singular bool, maybeBattleLobbiesMech interface{}, mods queries.Applicator) error {
	var slice []*BattleLobbiesMech
	var object *BattleLobbiesMech

	if singular {
		object = maybeBattleLobbiesMech.(*BattleLobbiesMech)
	} else {
		slice = *maybeBattleLobbiesMech.(*[]*BattleLobbiesMech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleLobbiesMechR{}
		}
		if !queries.IsNil(object.AssignedToBattleID) {
			args = append(args, object.AssignedToBattleID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleLobbiesMechR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AssignedToBattleID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AssignedToBattleID) {
				args = append(args, obj.AssignedToBattleID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battles`),
		qm.WhereIn(`battles.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Battle")
	}

	var resultSlice []*Battle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Battle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battles")
	}

	if len(battleLobbiesMechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AssignedToBattle = foreign
		if foreign.R == nil {
			foreign.R = &battleR{}
		}
		foreign.R.AssignedToBattleBattleLobbiesMechs = append(foreign.R.AssignedToBattleBattleLobbiesMechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AssignedToBattleID, foreign.ID) {
				local.R.AssignedToBattle = foreign
				if foreign.R == nil {
					foreign.R = &battleR{}
				}
				foreign.R.AssignedToBattleBattleLobbiesMechs = append(foreign.R.AssignedToBattleBattleLobbiesMechs, local)
				break
			}
		}
	}

	return nil
}

// LoadBattleLobby allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleLobbiesMechL) LoadBattleLobby(e boil.Executor, singular bool, maybeBattleLobbiesMech interface{}, mods queries.Applicator) error {
	var slice []*BattleLobbiesMech
	var object *BattleLobbiesMech

	if singular {
		object = maybeBattleLobbiesMech.(*BattleLobbiesMech)
	} else {
		slice = *maybeBattleLobbiesMech.(*[]*BattleLobbiesMech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleLobbiesMechR{}
		}
		args = append(args, object.BattleLobbyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleLobbiesMechR{}
			}

			for _, a := range args {
				if a == obj.BattleLobbyID {
					continue Outer
				}
			}

			args = append(args, obj.BattleLobbyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_lobbies`),
		qm.WhereIn(`battle_lobbies.id in ?`, args...),
		qmhelper.WhereIsNull(`battle_lobbies.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BattleLobby")
	}

	var resultSlice []*BattleLobby
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BattleLobby")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battle_lobbies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_lobbies")
	}

	if len(battleLobbiesMechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BattleLobby = foreign
		if foreign.R == nil {
			foreign.R = &battleLobbyR{}
		}
		foreign.R.BattleLobbiesMechs = append(foreign.R.BattleLobbiesMechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BattleLobbyID == foreign.ID {
				local.R.BattleLobby = foreign
				if foreign.R == nil {
					foreign.R = &battleLobbyR{}
				}
				foreign.R.BattleLobbiesMechs = append(foreign.R.BattleLobbiesMechs, local)
				break
			}
		}
	}

	return nil
}

// LoadFaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleLobbiesMechL) LoadFaction(e boil.Executor, singular bool, maybeBattleLobbiesMech interface{}, mods queries.Applicator) error {
	var slice []*BattleLobbiesMech
	var object *BattleLobbiesMech

	if singular {
		object = maybeBattleLobbiesMech.(*BattleLobbiesMech)
	} else {
		slice = *maybeBattleLobbiesMech.(*[]*BattleLobbiesMech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleLobbiesMechR{}
		}
		args = append(args, object.FactionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleLobbiesMechR{}
			}

			for _, a := range args {
				if a == obj.FactionID {
					continue Outer
				}
			}

			args = append(args, obj.FactionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`factions`),
		qm.WhereIn(`factions.id in ?`, args...),
		qmhelper.WhereIsNull(`factions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Faction")
	}

	var resultSlice []*Faction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Faction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for factions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for factions")
	}

	if len(battleLobbiesMechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Faction = foreign
		if foreign.R == nil {
			foreign.R = &factionR{}
		}
		foreign.R.BattleLobbiesMechs = append(foreign.R.BattleLobbiesMechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FactionID == foreign.ID {
				local.R.Faction = foreign
				if foreign.R == nil {
					foreign.R = &factionR{}
				}
				foreign.R.BattleLobbiesMechs = append(foreign.R.BattleLobbiesMechs, local)
				break
			}
		}
	}

	return nil
}

// LoadMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleLobbiesMechL) LoadMech(e boil.Executor, singular bool, maybeBattleLobbiesMech interface{}, mods queries.Applicator) error {
	var slice []*BattleLobbiesMech
	var object *BattleLobbiesMech

	if singular {
		object = maybeBattleLobbiesMech.(*BattleLobbiesMech)
	} else {
		slice = *maybeBattleLobbiesMech.(*[]*BattleLobbiesMech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleLobbiesMechR{}
		}
		args = append(args, object.MechID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleLobbiesMechR{}
			}

			for _, a := range args {
				if a == obj.MechID {
					continue Outer
				}
			}

			args = append(args, obj.MechID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(battleLobbiesMechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Mech = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.BattleLobbiesMechs = append(foreign.R.BattleLobbiesMechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MechID == foreign.ID {
				local.R.Mech = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.BattleLobbiesMechs = append(foreign.R.BattleLobbiesMechs, local)
				break
			}
		}
	}

	return nil
}

// LoadQueuedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleLobbiesMechL) LoadQueuedBy(e boil.Executor, singular bool, maybeBattleLobbiesMech interface{}, mods queries.Applicator) error {
	var slice []*BattleLobbiesMech
	var object *BattleLobbiesMech

	if singular {
		object = maybeBattleLobbiesMech.(*BattleLobbiesMech)
	} else {
		slice = *maybeBattleLobbiesMech.(*[]*BattleLobbiesMech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleLobbiesMechR{}
		}
		args = append(args, object.QueuedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleLobbiesMechR{}
			}

			for _, a := range args {
				if a == obj.QueuedByID {
					continue Outer
				}
			}

			args = append(args, obj.QueuedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(battleLobbiesMechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.QueuedBy = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.QueuedByBattleLobbiesMechs = append(foreign.R.QueuedByBattleLobbiesMechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.QueuedByID == foreign.ID {
				local.R.QueuedBy = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.QueuedByBattleLobbiesMechs = append(foreign.R.QueuedByBattleLobbiesMechs, local)
				break
			}
		}
	}

	return nil
}

// SetAssignedToBattle of the battleLobbiesMech to the related item.
// Sets o.R.AssignedToBattle to related.
// Adds o to related.R.AssignedToBattleBattleLobbiesMechs.
func (o *BattleLobbiesMech) SetAssignedToBattle(exec boil.Executor, insert bool, related *Battle) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_lobbies_mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"assigned_to_battle_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleLobbiesMechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AssignedToBattleID, related.ID)
	if o.R == nil {
		o.R = &battleLobbiesMechR{
			AssignedToBattle: related,
		}
	} else {
		o.R.AssignedToBattle = related
	}

	if related.R == nil {
		related.R = &battleR{
			AssignedToBattleBattleLobbiesMechs: BattleLobbiesMechSlice{o},
		}
	} else {
		related.R.AssignedToBattleBattleLobbiesMechs = append(related.R.AssignedToBattleBattleLobbiesMechs, o)
	}

	return nil
}

// RemoveAssignedToBattle relationship.
// Sets o.R.AssignedToBattle to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BattleLobbiesMech) RemoveAssignedToBattle(exec boil.Executor, related *Battle) error {
	var err error

	queries.SetScanner(&o.AssignedToBattleID, nil)
	if _, err = o.Update(exec, boil.Whitelist("assigned_to_battle_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AssignedToBattle = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AssignedToBattleBattleLobbiesMechs {
		if queries.Equal(o.AssignedToBattleID, ri.AssignedToBattleID) {
			continue
		}

		ln := len(related.R.AssignedToBattleBattleLobbiesMechs)
		if ln > 1 && i < ln-1 {
			related.R.AssignedToBattleBattleLobbiesMechs[i] = related.R.AssignedToBattleBattleLobbiesMechs[ln-1]
		}
		related.R.AssignedToBattleBattleLobbiesMechs = related.R.AssignedToBattleBattleLobbiesMechs[:ln-1]
		break
	}
	return nil
}

// SetBattleLobby of the battleLobbiesMech to the related item.
// Sets o.R.BattleLobby to related.
// Adds o to related.R.BattleLobbiesMechs.
func (o *BattleLobbiesMech) SetBattleLobby(exec boil.Executor, insert bool, related *BattleLobby) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_lobbies_mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"battle_lobby_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleLobbiesMechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BattleLobbyID = related.ID
	if o.R == nil {
		o.R = &battleLobbiesMechR{
			BattleLobby: related,
		}
	} else {
		o.R.BattleLobby = related
	}

	if related.R == nil {
		related.R = &battleLobbyR{
			BattleLobbiesMechs: BattleLobbiesMechSlice{o},
		}
	} else {
		related.R.BattleLobbiesMechs = append(related.R.BattleLobbiesMechs, o)
	}

	return nil
}

// SetFaction of the battleLobbiesMech to the related item.
// Sets o.R.Faction to related.
// Adds o to related.R.BattleLobbiesMechs.
func (o *BattleLobbiesMech) SetFaction(exec boil.Executor, insert bool, related *Faction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_lobbies_mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"faction_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleLobbiesMechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FactionID = related.ID
	if o.R == nil {
		o.R = &battleLobbiesMechR{
			Faction: related,
		}
	} else {
		o.R.Faction = related
	}

	if related.R == nil {
		related.R = &factionR{
			BattleLobbiesMechs: BattleLobbiesMechSlice{o},
		}
	} else {
		related.R.BattleLobbiesMechs = append(related.R.BattleLobbiesMechs, o)
	}

	return nil
}

// SetMech of the battleLobbiesMech to the related item.
// Sets o.R.Mech to related.
// Adds o to related.R.BattleLobbiesMechs.
func (o *BattleLobbiesMech) SetMech(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_lobbies_mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleLobbiesMechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MechID = related.ID
	if o.R == nil {
		o.R = &battleLobbiesMechR{
			Mech: related,
		}
	} else {
		o.R.Mech = related
	}

	if related.R == nil {
		related.R = &mechR{
			BattleLobbiesMechs: BattleLobbiesMechSlice{o},
		}
	} else {
		related.R.BattleLobbiesMechs = append(related.R.BattleLobbiesMechs, o)
	}

	return nil
}

// SetQueuedBy of the battleLobbiesMech to the related item.
// Sets o.R.QueuedBy to related.
// Adds o to related.R.QueuedByBattleLobbiesMechs.
func (o *BattleLobbiesMech) SetQueuedBy(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_lobbies_mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"queued_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleLobbiesMechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.QueuedByID = related.ID
	if o.R == nil {
		o.R = &battleLobbiesMechR{
			QueuedBy: related,
		}
	} else {
		o.R.QueuedBy = related
	}

	if related.R == nil {
		related.R = &playerR{
			QueuedByBattleLobbiesMechs: BattleLobbiesMechSlice{o},
		}
	} else {
		related.R.QueuedByBattleLobbiesMechs = append(related.R.QueuedByBattleLobbiesMechs, o)
	}

	return nil
}

// BattleLobbiesMechs retrieves all the records using an executor.
func BattleLobbiesMechs(mods ...qm.QueryMod) battleLobbiesMechQuery {
	mods = append(mods, qm.From("\"battle_lobbies_mechs\""), qmhelper.WhereIsNull("\"battle_lobbies_mechs\".\"deleted_at\""))
	return battleLobbiesMechQuery{NewQuery(mods...)}
}

// FindBattleLobbiesMech retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattleLobbiesMech(exec boil.Executor, iD string, selectCols ...string) (*BattleLobbiesMech, error) {
	battleLobbiesMechObj := &BattleLobbiesMech{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battle_lobbies_mechs\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, battleLobbiesMechObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from battle_lobbies_mechs")
	}

	if err = battleLobbiesMechObj.doAfterSelectHooks(exec); err != nil {
		return battleLobbiesMechObj, err
	}

	return battleLobbiesMechObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BattleLobbiesMech) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_lobbies_mechs provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleLobbiesMechColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battleLobbiesMechInsertCacheMut.RLock()
	cache, cached := battleLobbiesMechInsertCache[key]
	battleLobbiesMechInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battleLobbiesMechAllColumns,
			battleLobbiesMechColumnsWithDefault,
			battleLobbiesMechColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battleLobbiesMechType, battleLobbiesMechMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battleLobbiesMechType, battleLobbiesMechMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battle_lobbies_mechs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battle_lobbies_mechs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into battle_lobbies_mechs")
	}

	if !cached {
		battleLobbiesMechInsertCacheMut.Lock()
		battleLobbiesMechInsertCache[key] = cache
		battleLobbiesMechInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BattleLobbiesMech.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BattleLobbiesMech) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battleLobbiesMechUpdateCacheMut.RLock()
	cache, cached := battleLobbiesMechUpdateCache[key]
	battleLobbiesMechUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battleLobbiesMechAllColumns,
			battleLobbiesMechPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update battle_lobbies_mechs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battle_lobbies_mechs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battleLobbiesMechPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battleLobbiesMechType, battleLobbiesMechMapping, append(wl, battleLobbiesMechPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update battle_lobbies_mechs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for battle_lobbies_mechs")
	}

	if !cached {
		battleLobbiesMechUpdateCacheMut.Lock()
		battleLobbiesMechUpdateCache[key] = cache
		battleLobbiesMechUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battleLobbiesMechQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for battle_lobbies_mechs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for battle_lobbies_mechs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattleLobbiesMechSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleLobbiesMechPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battle_lobbies_mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battleLobbiesMechPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in battleLobbiesMech slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all battleLobbiesMech")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BattleLobbiesMech) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_lobbies_mechs provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleLobbiesMechColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battleLobbiesMechUpsertCacheMut.RLock()
	cache, cached := battleLobbiesMechUpsertCache[key]
	battleLobbiesMechUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battleLobbiesMechAllColumns,
			battleLobbiesMechColumnsWithDefault,
			battleLobbiesMechColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			battleLobbiesMechAllColumns,
			battleLobbiesMechPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert battle_lobbies_mechs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battleLobbiesMechPrimaryKeyColumns))
			copy(conflict, battleLobbiesMechPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battle_lobbies_mechs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battleLobbiesMechType, battleLobbiesMechMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battleLobbiesMechType, battleLobbiesMechMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert battle_lobbies_mechs")
	}

	if !cached {
		battleLobbiesMechUpsertCacheMut.Lock()
		battleLobbiesMechUpsertCache[key] = cache
		battleLobbiesMechUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BattleLobbiesMech record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BattleLobbiesMech) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BattleLobbiesMech provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battleLobbiesMechPrimaryKeyMapping)
		sql = "DELETE FROM \"battle_lobbies_mechs\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"battle_lobbies_mechs\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(battleLobbiesMechType, battleLobbiesMechMapping, append(wl, battleLobbiesMechPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from battle_lobbies_mechs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for battle_lobbies_mechs")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battleLobbiesMechQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no battleLobbiesMechQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battle_lobbies_mechs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_lobbies_mechs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattleLobbiesMechSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(battleLobbiesMechBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleLobbiesMechPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"battle_lobbies_mechs\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleLobbiesMechPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleLobbiesMechPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"battle_lobbies_mechs\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, battleLobbiesMechPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battleLobbiesMech slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_lobbies_mechs")
	}

	if len(battleLobbiesMechAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BattleLobbiesMech) Reload(exec boil.Executor) error {
	ret, err := FindBattleLobbiesMech(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattleLobbiesMechSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattleLobbiesMechSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleLobbiesMechPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battle_lobbies_mechs\".* FROM \"battle_lobbies_mechs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleLobbiesMechPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BattleLobbiesMechSlice")
	}

	*o = slice

	return nil
}

// BattleLobbiesMechExists checks if the BattleLobbiesMech row exists.
func BattleLobbiesMechExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battle_lobbies_mechs\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if battle_lobbies_mechs exists")
	}

	return exists, nil
}
