// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BlueprintUtilityAttackDrone is an object representing the database table.
type BlueprintUtilityAttackDrone struct {
	ID                 string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BlueprintUtilityID string    `boiler:"blueprint_utility_id" boil:"blueprint_utility_id" json:"blueprint_utility_id" toml:"blueprint_utility_id" yaml:"blueprint_utility_id"`
	Damage             int       `boiler:"damage" boil:"damage" json:"damage" toml:"damage" yaml:"damage"`
	RateOfFire         int       `boiler:"rate_of_fire" boil:"rate_of_fire" json:"rate_of_fire" toml:"rate_of_fire" yaml:"rate_of_fire"`
	Hitpoints          int       `boiler:"hitpoints" boil:"hitpoints" json:"hitpoints" toml:"hitpoints" yaml:"hitpoints"`
	LifespanSeconds    int       `boiler:"lifespan_seconds" boil:"lifespan_seconds" json:"lifespan_seconds" toml:"lifespan_seconds" yaml:"lifespan_seconds"`
	DeployEnergyCost   int       `boiler:"deploy_energy_cost" boil:"deploy_energy_cost" json:"deploy_energy_cost" toml:"deploy_energy_cost" yaml:"deploy_energy_cost"`
	CreatedAt          time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *blueprintUtilityAttackDroneR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L blueprintUtilityAttackDroneL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlueprintUtilityAttackDroneColumns = struct {
	ID                 string
	BlueprintUtilityID string
	Damage             string
	RateOfFire         string
	Hitpoints          string
	LifespanSeconds    string
	DeployEnergyCost   string
	CreatedAt          string
}{
	ID:                 "id",
	BlueprintUtilityID: "blueprint_utility_id",
	Damage:             "damage",
	RateOfFire:         "rate_of_fire",
	Hitpoints:          "hitpoints",
	LifespanSeconds:    "lifespan_seconds",
	DeployEnergyCost:   "deploy_energy_cost",
	CreatedAt:          "created_at",
}

var BlueprintUtilityAttackDroneTableColumns = struct {
	ID                 string
	BlueprintUtilityID string
	Damage             string
	RateOfFire         string
	Hitpoints          string
	LifespanSeconds    string
	DeployEnergyCost   string
	CreatedAt          string
}{
	ID:                 "blueprint_utility_attack_drone.id",
	BlueprintUtilityID: "blueprint_utility_attack_drone.blueprint_utility_id",
	Damage:             "blueprint_utility_attack_drone.damage",
	RateOfFire:         "blueprint_utility_attack_drone.rate_of_fire",
	Hitpoints:          "blueprint_utility_attack_drone.hitpoints",
	LifespanSeconds:    "blueprint_utility_attack_drone.lifespan_seconds",
	DeployEnergyCost:   "blueprint_utility_attack_drone.deploy_energy_cost",
	CreatedAt:          "blueprint_utility_attack_drone.created_at",
}

// Generated where

var BlueprintUtilityAttackDroneWhere = struct {
	ID                 whereHelperstring
	BlueprintUtilityID whereHelperstring
	Damage             whereHelperint
	RateOfFire         whereHelperint
	Hitpoints          whereHelperint
	LifespanSeconds    whereHelperint
	DeployEnergyCost   whereHelperint
	CreatedAt          whereHelpertime_Time
}{
	ID:                 whereHelperstring{field: "\"blueprint_utility_attack_drone\".\"id\""},
	BlueprintUtilityID: whereHelperstring{field: "\"blueprint_utility_attack_drone\".\"blueprint_utility_id\""},
	Damage:             whereHelperint{field: "\"blueprint_utility_attack_drone\".\"damage\""},
	RateOfFire:         whereHelperint{field: "\"blueprint_utility_attack_drone\".\"rate_of_fire\""},
	Hitpoints:          whereHelperint{field: "\"blueprint_utility_attack_drone\".\"hitpoints\""},
	LifespanSeconds:    whereHelperint{field: "\"blueprint_utility_attack_drone\".\"lifespan_seconds\""},
	DeployEnergyCost:   whereHelperint{field: "\"blueprint_utility_attack_drone\".\"deploy_energy_cost\""},
	CreatedAt:          whereHelpertime_Time{field: "\"blueprint_utility_attack_drone\".\"created_at\""},
}

// BlueprintUtilityAttackDroneRels is where relationship names are stored.
var BlueprintUtilityAttackDroneRels = struct {
	BlueprintUtility string
}{
	BlueprintUtility: "BlueprintUtility",
}

// blueprintUtilityAttackDroneR is where relationships are stored.
type blueprintUtilityAttackDroneR struct {
	BlueprintUtility *BlueprintUtility `boiler:"BlueprintUtility" boil:"BlueprintUtility" json:"BlueprintUtility" toml:"BlueprintUtility" yaml:"BlueprintUtility"`
}

// NewStruct creates a new relationship struct
func (*blueprintUtilityAttackDroneR) NewStruct() *blueprintUtilityAttackDroneR {
	return &blueprintUtilityAttackDroneR{}
}

// blueprintUtilityAttackDroneL is where Load methods for each relationship are stored.
type blueprintUtilityAttackDroneL struct{}

var (
	blueprintUtilityAttackDroneAllColumns            = []string{"id", "blueprint_utility_id", "damage", "rate_of_fire", "hitpoints", "lifespan_seconds", "deploy_energy_cost", "created_at"}
	blueprintUtilityAttackDroneColumnsWithoutDefault = []string{"blueprint_utility_id", "damage", "rate_of_fire", "hitpoints", "lifespan_seconds", "deploy_energy_cost"}
	blueprintUtilityAttackDroneColumnsWithDefault    = []string{"id", "created_at"}
	blueprintUtilityAttackDronePrimaryKeyColumns     = []string{"id"}
	blueprintUtilityAttackDroneGeneratedColumns      = []string{}
)

type (
	// BlueprintUtilityAttackDroneSlice is an alias for a slice of pointers to BlueprintUtilityAttackDrone.
	// This should almost always be used instead of []BlueprintUtilityAttackDrone.
	BlueprintUtilityAttackDroneSlice []*BlueprintUtilityAttackDrone
	// BlueprintUtilityAttackDroneHook is the signature for custom BlueprintUtilityAttackDrone hook methods
	BlueprintUtilityAttackDroneHook func(boil.Executor, *BlueprintUtilityAttackDrone) error

	blueprintUtilityAttackDroneQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blueprintUtilityAttackDroneType                 = reflect.TypeOf(&BlueprintUtilityAttackDrone{})
	blueprintUtilityAttackDroneMapping              = queries.MakeStructMapping(blueprintUtilityAttackDroneType)
	blueprintUtilityAttackDronePrimaryKeyMapping, _ = queries.BindMapping(blueprintUtilityAttackDroneType, blueprintUtilityAttackDroneMapping, blueprintUtilityAttackDronePrimaryKeyColumns)
	blueprintUtilityAttackDroneInsertCacheMut       sync.RWMutex
	blueprintUtilityAttackDroneInsertCache          = make(map[string]insertCache)
	blueprintUtilityAttackDroneUpdateCacheMut       sync.RWMutex
	blueprintUtilityAttackDroneUpdateCache          = make(map[string]updateCache)
	blueprintUtilityAttackDroneUpsertCacheMut       sync.RWMutex
	blueprintUtilityAttackDroneUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var blueprintUtilityAttackDroneAfterSelectHooks []BlueprintUtilityAttackDroneHook

var blueprintUtilityAttackDroneBeforeInsertHooks []BlueprintUtilityAttackDroneHook
var blueprintUtilityAttackDroneAfterInsertHooks []BlueprintUtilityAttackDroneHook

var blueprintUtilityAttackDroneBeforeUpdateHooks []BlueprintUtilityAttackDroneHook
var blueprintUtilityAttackDroneAfterUpdateHooks []BlueprintUtilityAttackDroneHook

var blueprintUtilityAttackDroneBeforeDeleteHooks []BlueprintUtilityAttackDroneHook
var blueprintUtilityAttackDroneAfterDeleteHooks []BlueprintUtilityAttackDroneHook

var blueprintUtilityAttackDroneBeforeUpsertHooks []BlueprintUtilityAttackDroneHook
var blueprintUtilityAttackDroneAfterUpsertHooks []BlueprintUtilityAttackDroneHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BlueprintUtilityAttackDrone) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityAttackDroneAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BlueprintUtilityAttackDrone) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityAttackDroneBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BlueprintUtilityAttackDrone) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityAttackDroneAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BlueprintUtilityAttackDrone) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityAttackDroneBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BlueprintUtilityAttackDrone) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityAttackDroneAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BlueprintUtilityAttackDrone) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityAttackDroneBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BlueprintUtilityAttackDrone) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityAttackDroneAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BlueprintUtilityAttackDrone) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityAttackDroneBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BlueprintUtilityAttackDrone) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintUtilityAttackDroneAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBlueprintUtilityAttackDroneHook registers your hook function for all future operations.
func AddBlueprintUtilityAttackDroneHook(hookPoint boil.HookPoint, blueprintUtilityAttackDroneHook BlueprintUtilityAttackDroneHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		blueprintUtilityAttackDroneAfterSelectHooks = append(blueprintUtilityAttackDroneAfterSelectHooks, blueprintUtilityAttackDroneHook)
	case boil.BeforeInsertHook:
		blueprintUtilityAttackDroneBeforeInsertHooks = append(blueprintUtilityAttackDroneBeforeInsertHooks, blueprintUtilityAttackDroneHook)
	case boil.AfterInsertHook:
		blueprintUtilityAttackDroneAfterInsertHooks = append(blueprintUtilityAttackDroneAfterInsertHooks, blueprintUtilityAttackDroneHook)
	case boil.BeforeUpdateHook:
		blueprintUtilityAttackDroneBeforeUpdateHooks = append(blueprintUtilityAttackDroneBeforeUpdateHooks, blueprintUtilityAttackDroneHook)
	case boil.AfterUpdateHook:
		blueprintUtilityAttackDroneAfterUpdateHooks = append(blueprintUtilityAttackDroneAfterUpdateHooks, blueprintUtilityAttackDroneHook)
	case boil.BeforeDeleteHook:
		blueprintUtilityAttackDroneBeforeDeleteHooks = append(blueprintUtilityAttackDroneBeforeDeleteHooks, blueprintUtilityAttackDroneHook)
	case boil.AfterDeleteHook:
		blueprintUtilityAttackDroneAfterDeleteHooks = append(blueprintUtilityAttackDroneAfterDeleteHooks, blueprintUtilityAttackDroneHook)
	case boil.BeforeUpsertHook:
		blueprintUtilityAttackDroneBeforeUpsertHooks = append(blueprintUtilityAttackDroneBeforeUpsertHooks, blueprintUtilityAttackDroneHook)
	case boil.AfterUpsertHook:
		blueprintUtilityAttackDroneAfterUpsertHooks = append(blueprintUtilityAttackDroneAfterUpsertHooks, blueprintUtilityAttackDroneHook)
	}
}

// One returns a single blueprintUtilityAttackDrone record from the query.
func (q blueprintUtilityAttackDroneQuery) One(exec boil.Executor) (*BlueprintUtilityAttackDrone, error) {
	o := &BlueprintUtilityAttackDrone{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for blueprint_utility_attack_drone")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BlueprintUtilityAttackDrone records from the query.
func (q blueprintUtilityAttackDroneQuery) All(exec boil.Executor) (BlueprintUtilityAttackDroneSlice, error) {
	var o []*BlueprintUtilityAttackDrone

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BlueprintUtilityAttackDrone slice")
	}

	if len(blueprintUtilityAttackDroneAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BlueprintUtilityAttackDrone records in the query.
func (q blueprintUtilityAttackDroneQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count blueprint_utility_attack_drone rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q blueprintUtilityAttackDroneQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if blueprint_utility_attack_drone exists")
	}

	return count > 0, nil
}

// BlueprintUtility pointed to by the foreign key.
func (o *BlueprintUtilityAttackDrone) BlueprintUtility(mods ...qm.QueryMod) blueprintUtilityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BlueprintUtilityID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintUtilities(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_utility\"")

	return query
}

// LoadBlueprintUtility allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blueprintUtilityAttackDroneL) LoadBlueprintUtility(e boil.Executor, singular bool, maybeBlueprintUtilityAttackDrone interface{}, mods queries.Applicator) error {
	var slice []*BlueprintUtilityAttackDrone
	var object *BlueprintUtilityAttackDrone

	if singular {
		object = maybeBlueprintUtilityAttackDrone.(*BlueprintUtilityAttackDrone)
	} else {
		slice = *maybeBlueprintUtilityAttackDrone.(*[]*BlueprintUtilityAttackDrone)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintUtilityAttackDroneR{}
		}
		args = append(args, object.BlueprintUtilityID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintUtilityAttackDroneR{}
			}

			for _, a := range args {
				if a == obj.BlueprintUtilityID {
					continue Outer
				}
			}

			args = append(args, obj.BlueprintUtilityID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_utility`),
		qm.WhereIn(`blueprint_utility.id in ?`, args...),
		qmhelper.WhereIsNull(`blueprint_utility.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintUtility")
	}

	var resultSlice []*BlueprintUtility
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintUtility")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_utility")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_utility")
	}

	if len(blueprintUtilityAttackDroneAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BlueprintUtility = foreign
		if foreign.R == nil {
			foreign.R = &blueprintUtilityR{}
		}
		foreign.R.BlueprintUtilityAttackDrones = append(foreign.R.BlueprintUtilityAttackDrones, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlueprintUtilityID == foreign.ID {
				local.R.BlueprintUtility = foreign
				if foreign.R == nil {
					foreign.R = &blueprintUtilityR{}
				}
				foreign.R.BlueprintUtilityAttackDrones = append(foreign.R.BlueprintUtilityAttackDrones, local)
				break
			}
		}
	}

	return nil
}

// SetBlueprintUtility of the blueprintUtilityAttackDrone to the related item.
// Sets o.R.BlueprintUtility to related.
// Adds o to related.R.BlueprintUtilityAttackDrones.
func (o *BlueprintUtilityAttackDrone) SetBlueprintUtility(exec boil.Executor, insert bool, related *BlueprintUtility) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"blueprint_utility_attack_drone\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_utility_id"}),
		strmangle.WhereClause("\"", "\"", 2, blueprintUtilityAttackDronePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlueprintUtilityID = related.ID
	if o.R == nil {
		o.R = &blueprintUtilityAttackDroneR{
			BlueprintUtility: related,
		}
	} else {
		o.R.BlueprintUtility = related
	}

	if related.R == nil {
		related.R = &blueprintUtilityR{
			BlueprintUtilityAttackDrones: BlueprintUtilityAttackDroneSlice{o},
		}
	} else {
		related.R.BlueprintUtilityAttackDrones = append(related.R.BlueprintUtilityAttackDrones, o)
	}

	return nil
}

// BlueprintUtilityAttackDrones retrieves all the records using an executor.
func BlueprintUtilityAttackDrones(mods ...qm.QueryMod) blueprintUtilityAttackDroneQuery {
	mods = append(mods, qm.From("\"blueprint_utility_attack_drone\""))
	return blueprintUtilityAttackDroneQuery{NewQuery(mods...)}
}

// FindBlueprintUtilityAttackDrone retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlueprintUtilityAttackDrone(exec boil.Executor, iD string, selectCols ...string) (*BlueprintUtilityAttackDrone, error) {
	blueprintUtilityAttackDroneObj := &BlueprintUtilityAttackDrone{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"blueprint_utility_attack_drone\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, blueprintUtilityAttackDroneObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from blueprint_utility_attack_drone")
	}

	if err = blueprintUtilityAttackDroneObj.doAfterSelectHooks(exec); err != nil {
		return blueprintUtilityAttackDroneObj, err
	}

	return blueprintUtilityAttackDroneObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlueprintUtilityAttackDrone) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_utility_attack_drone provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintUtilityAttackDroneColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blueprintUtilityAttackDroneInsertCacheMut.RLock()
	cache, cached := blueprintUtilityAttackDroneInsertCache[key]
	blueprintUtilityAttackDroneInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blueprintUtilityAttackDroneAllColumns,
			blueprintUtilityAttackDroneColumnsWithDefault,
			blueprintUtilityAttackDroneColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blueprintUtilityAttackDroneType, blueprintUtilityAttackDroneMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blueprintUtilityAttackDroneType, blueprintUtilityAttackDroneMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"blueprint_utility_attack_drone\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"blueprint_utility_attack_drone\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into blueprint_utility_attack_drone")
	}

	if !cached {
		blueprintUtilityAttackDroneInsertCacheMut.Lock()
		blueprintUtilityAttackDroneInsertCache[key] = cache
		blueprintUtilityAttackDroneInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BlueprintUtilityAttackDrone.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlueprintUtilityAttackDrone) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	blueprintUtilityAttackDroneUpdateCacheMut.RLock()
	cache, cached := blueprintUtilityAttackDroneUpdateCache[key]
	blueprintUtilityAttackDroneUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blueprintUtilityAttackDroneAllColumns,
			blueprintUtilityAttackDronePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update blueprint_utility_attack_drone, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"blueprint_utility_attack_drone\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, blueprintUtilityAttackDronePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blueprintUtilityAttackDroneType, blueprintUtilityAttackDroneMapping, append(wl, blueprintUtilityAttackDronePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update blueprint_utility_attack_drone row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for blueprint_utility_attack_drone")
	}

	if !cached {
		blueprintUtilityAttackDroneUpdateCacheMut.Lock()
		blueprintUtilityAttackDroneUpdateCache[key] = cache
		blueprintUtilityAttackDroneUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q blueprintUtilityAttackDroneQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for blueprint_utility_attack_drone")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for blueprint_utility_attack_drone")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlueprintUtilityAttackDroneSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintUtilityAttackDronePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"blueprint_utility_attack_drone\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, blueprintUtilityAttackDronePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in blueprintUtilityAttackDrone slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all blueprintUtilityAttackDrone")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlueprintUtilityAttackDrone) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_utility_attack_drone provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintUtilityAttackDroneColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blueprintUtilityAttackDroneUpsertCacheMut.RLock()
	cache, cached := blueprintUtilityAttackDroneUpsertCache[key]
	blueprintUtilityAttackDroneUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blueprintUtilityAttackDroneAllColumns,
			blueprintUtilityAttackDroneColumnsWithDefault,
			blueprintUtilityAttackDroneColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			blueprintUtilityAttackDroneAllColumns,
			blueprintUtilityAttackDronePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert blueprint_utility_attack_drone, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(blueprintUtilityAttackDronePrimaryKeyColumns))
			copy(conflict, blueprintUtilityAttackDronePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"blueprint_utility_attack_drone\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(blueprintUtilityAttackDroneType, blueprintUtilityAttackDroneMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blueprintUtilityAttackDroneType, blueprintUtilityAttackDroneMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert blueprint_utility_attack_drone")
	}

	if !cached {
		blueprintUtilityAttackDroneUpsertCacheMut.Lock()
		blueprintUtilityAttackDroneUpsertCache[key] = cache
		blueprintUtilityAttackDroneUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BlueprintUtilityAttackDrone record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlueprintUtilityAttackDrone) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BlueprintUtilityAttackDrone provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blueprintUtilityAttackDronePrimaryKeyMapping)
	sql := "DELETE FROM \"blueprint_utility_attack_drone\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from blueprint_utility_attack_drone")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for blueprint_utility_attack_drone")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q blueprintUtilityAttackDroneQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no blueprintUtilityAttackDroneQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprint_utility_attack_drone")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_utility_attack_drone")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlueprintUtilityAttackDroneSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(blueprintUtilityAttackDroneBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintUtilityAttackDronePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"blueprint_utility_attack_drone\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintUtilityAttackDronePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprintUtilityAttackDrone slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_utility_attack_drone")
	}

	if len(blueprintUtilityAttackDroneAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlueprintUtilityAttackDrone) Reload(exec boil.Executor) error {
	ret, err := FindBlueprintUtilityAttackDrone(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlueprintUtilityAttackDroneSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlueprintUtilityAttackDroneSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintUtilityAttackDronePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"blueprint_utility_attack_drone\".* FROM \"blueprint_utility_attack_drone\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintUtilityAttackDronePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BlueprintUtilityAttackDroneSlice")
	}

	*o = slice

	return nil
}

// BlueprintUtilityAttackDroneExists checks if the BlueprintUtilityAttackDrone row exists.
func BlueprintUtilityAttackDroneExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"blueprint_utility_attack_drone\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if blueprint_utility_attack_drone exists")
	}

	return exists, nil
}
