// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("boiler: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

// Enum values for AbilityTypeEnum
const (
	AbilityTypeEnumAIRSTRIKE      = "AIRSTRIKE"
	AbilityTypeEnumNUKE           = "NUKE"
	AbilityTypeEnumREPAIR         = "REPAIR"
	AbilityTypeEnumROB            = "ROB"
	AbilityTypeEnumREINFORCEMENTS = "REINFORCEMENTS"
	AbilityTypeEnumROBOTDOGS      = "ROBOT DOGS"
	AbilityTypeEnumOVERCHARGE     = "OVERCHARGE"
	AbilityTypeEnumFIREWORKS      = "FIREWORKS"
)

// Enum values for BattleEvent
const (
	BattleEventKilled           = "killed"
	BattleEventSpawnedAi        = "spawned_ai"
	BattleEventKill             = "kill"
	BattleEventAbilityTriggered = "ability_triggered"
	BattleEventPickup           = "pickup"
)

// Enum values for WeaponType
const (
	WeaponTypeGrenadeLauncher = "Grenade Launcher"
	WeaponTypeCannon          = "Cannon"
	WeaponTypeMinigun         = "Minigun"
	WeaponTypePlasmaGun       = "Plasma Gun"
	WeaponTypeFlak            = "Flak"
	WeaponTypeMachineGun      = "Machine Gun"
	WeaponTypeFlamethrower    = "Flamethrower"
	WeaponTypeMissileLauncher = "Missile Launcher"
	WeaponTypeLaserBeam       = "Laser Beam"
	WeaponTypeLightningGun    = "Lightning Gun"
	WeaponTypeBFG             = "BFG"
	WeaponTypeRifle           = "Rifle"
	WeaponTypeSniperRifle     = "Sniper Rifle"
	WeaponTypeSword           = "Sword"
)

// Enum values for  are not proper Go identifiers, cannot emit constants
// Enum values for  are not proper Go identifiers, cannot emit constants
// Enum values for  are not proper Go identifiers, cannot emit constants
// Enum values for  are not proper Go identifiers, cannot emit constants

// Enum values for MechType
const (
	MechTypeHUMANOID = "HUMANOID"
	MechTypePLATFORM = "PLATFORM"
)

// Enum values for  are not proper Go identifiers, cannot emit constants
// Enum values for  are not proper Go identifiers, cannot emit constants

// Enum values for UtilityType
const (
	UtilityTypeSHIELD      = "SHIELD"
	UtilityTypeATTACKDRONE = "ATTACK DRONE"
	UtilityTypeREPAIRDRONE = "REPAIR DRONE"
	UtilityTypeANTIMISSILE = "ANTI MISSILE"
	UtilityTypeACCELERATOR = "ACCELERATOR"
)

// Enum values for  are not proper Go identifiers, cannot emit constants
// Enum values for  are not proper Go identifiers, cannot emit constants

// Enum values for DamageType
const (
	DamageTypeKinetic   = "Kinetic"
	DamageTypeEnergy    = "Energy"
	DamageTypeExplosive = "Explosive"
)

// Enum values for ChatMSGTypeEnum
const (
	ChatMSGTypeEnumTEXT        = "TEXT"
	ChatMSGTypeEnumPUNISH_VOTE = "PUNISH_VOTE"
)

// Enum values for  are not proper Go identifiers, cannot emit constants

// Enum values for ItemType
const (
	ItemTypeUtility       = "utility"
	ItemTypeWeapon        = "weapon"
	ItemTypeMech          = "mech"
	ItemTypeMechSkin      = "mech_skin"
	ItemTypeMechAnimation = "mech_animation"
	ItemTypePowerCore     = "power_core"
	ItemTypeMysteryCrate  = "mystery_crate"
)

// Enum values for CouponItemType
const (
	CouponItemTypeSUPS         = "SUPS"
	CouponItemTypeWEAPON_CRATE = "WEAPON_CRATE"
	CouponItemTypeMECH_CRATE   = "MECH_CRATE"
	CouponItemTypeGENESIS_MECH = "GENESIS_MECH"
)

// Enum values for AbilityLevel
const (
	AbilityLevelMECH    = "MECH"
	AbilityLevelFACTION = "FACTION"
	AbilityLevelPLAYER  = "PLAYER"
)

// Enum values for MarketplaceEvent
const (
	MarketplaceEventBid       = "bid"
	MarketplaceEventBidRefund = "bid_refund"
	MarketplaceEventPurchase  = "purchase"
)

// Enum values for MultiplierTypeEnum
const (
	MultiplierTypeEnumSpendAverage = "spend_average"
	MultiplierTypeEnumMostSupsLost = "most_sups_lost"
	MultiplierTypeEnumGabAbility   = "gab_ability"
	MultiplierTypeEnumComboBreaker = "combo_breaker"
	MultiplierTypeEnumPlayerMech   = "player_mech"
	MultiplierTypeEnumHoursOnline  = "hours_online"
	MultiplierTypeEnumSyndicateWin = "syndicate_win"
	MultiplierTypeEnumContribute   = "contribute"
)

// Enum values for CrateType
const (
	CrateTypeMECH   = "MECH"
	CrateTypeWEAPON = "WEAPON"
)

// Enum values for TemplateItemType
const (
	TemplateItemTypeMECH           = "MECH"
	TemplateItemTypeMECH_ANIMATION = "MECH_ANIMATION"
	TemplateItemTypeMECH_SKIN      = "MECH_SKIN"
	TemplateItemTypeUTILITY        = "UTILITY"
	TemplateItemTypeWEAPON         = "WEAPON"
	TemplateItemTypeAMMO           = "AMMO"
	TemplateItemTypePOWER_CORE     = "POWER_CORE"
	TemplateItemTypeWEAPON_SKIN    = "WEAPON_SKIN"
	TemplateItemTypePLAYER_ABILITY = "PLAYER_ABILITY"
)

// Enum values for PlayerRankEnum
const (
	PlayerRankEnumGENERAL     = "GENERAL"
	PlayerRankEnumCORPORAL    = "CORPORAL"
	PlayerRankEnumPRIVATE     = "PRIVATE"
	PlayerRankEnumNEW_RECRUIT = "NEW_RECRUIT"
)
