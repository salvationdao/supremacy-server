// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BattleContract is an object representing the database table.
type BattleContract struct {
	ID             string          `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	PlayerID       string          `boiler:"player_id" boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	FactionID      string          `boiler:"faction_id" boil:"faction_id" json:"faction_id" toml:"faction_id" yaml:"faction_id"`
	BattleID       null.String     `boiler:"battle_id" boil:"battle_id" json:"battle_id,omitempty" toml:"battle_id" yaml:"battle_id,omitempty"`
	ContractReward decimal.Decimal `boiler:"contract_reward" boil:"contract_reward" json:"contract_reward" toml:"contract_reward" yaml:"contract_reward"`
	Fee            decimal.Decimal `boiler:"fee" boil:"fee" json:"fee" toml:"fee" yaml:"fee"`
	DidWin         null.Bool       `boiler:"did_win" boil:"did_win" json:"did_win,omitempty" toml:"did_win" yaml:"did_win,omitempty"`
	PaidOut        bool            `boiler:"paid_out" boil:"paid_out" json:"paid_out" toml:"paid_out" yaml:"paid_out"`
	QueuedAt       time.Time       `boiler:"queued_at" boil:"queued_at" json:"queued_at" toml:"queued_at" yaml:"queued_at"`
	Cancelled      null.Bool       `boiler:"cancelled" boil:"cancelled" json:"cancelled,omitempty" toml:"cancelled" yaml:"cancelled,omitempty"`
	TransactionID  null.String     `boiler:"transaction_id" boil:"transaction_id" json:"transaction_id,omitempty" toml:"transaction_id" yaml:"transaction_id,omitempty"`
	MechID         null.String     `boiler:"mech_id" boil:"mech_id" json:"mech_id,omitempty" toml:"mech_id" yaml:"mech_id,omitempty"`

	R *battleContractR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L battleContractL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattleContractColumns = struct {
	ID             string
	PlayerID       string
	FactionID      string
	BattleID       string
	ContractReward string
	Fee            string
	DidWin         string
	PaidOut        string
	QueuedAt       string
	Cancelled      string
	TransactionID  string
	MechID         string
}{
	ID:             "id",
	PlayerID:       "player_id",
	FactionID:      "faction_id",
	BattleID:       "battle_id",
	ContractReward: "contract_reward",
	Fee:            "fee",
	DidWin:         "did_win",
	PaidOut:        "paid_out",
	QueuedAt:       "queued_at",
	Cancelled:      "cancelled",
	TransactionID:  "transaction_id",
	MechID:         "mech_id",
}

var BattleContractTableColumns = struct {
	ID             string
	PlayerID       string
	FactionID      string
	BattleID       string
	ContractReward string
	Fee            string
	DidWin         string
	PaidOut        string
	QueuedAt       string
	Cancelled      string
	TransactionID  string
	MechID         string
}{
	ID:             "battle_contracts.id",
	PlayerID:       "battle_contracts.player_id",
	FactionID:      "battle_contracts.faction_id",
	BattleID:       "battle_contracts.battle_id",
	ContractReward: "battle_contracts.contract_reward",
	Fee:            "battle_contracts.fee",
	DidWin:         "battle_contracts.did_win",
	PaidOut:        "battle_contracts.paid_out",
	QueuedAt:       "battle_contracts.queued_at",
	Cancelled:      "battle_contracts.cancelled",
	TransactionID:  "battle_contracts.transaction_id",
	MechID:         "battle_contracts.mech_id",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var BattleContractWhere = struct {
	ID             whereHelperstring
	PlayerID       whereHelperstring
	FactionID      whereHelperstring
	BattleID       whereHelpernull_String
	ContractReward whereHelperdecimal_Decimal
	Fee            whereHelperdecimal_Decimal
	DidWin         whereHelpernull_Bool
	PaidOut        whereHelperbool
	QueuedAt       whereHelpertime_Time
	Cancelled      whereHelpernull_Bool
	TransactionID  whereHelpernull_String
	MechID         whereHelpernull_String
}{
	ID:             whereHelperstring{field: "\"battle_contracts\".\"id\""},
	PlayerID:       whereHelperstring{field: "\"battle_contracts\".\"player_id\""},
	FactionID:      whereHelperstring{field: "\"battle_contracts\".\"faction_id\""},
	BattleID:       whereHelpernull_String{field: "\"battle_contracts\".\"battle_id\""},
	ContractReward: whereHelperdecimal_Decimal{field: "\"battle_contracts\".\"contract_reward\""},
	Fee:            whereHelperdecimal_Decimal{field: "\"battle_contracts\".\"fee\""},
	DidWin:         whereHelpernull_Bool{field: "\"battle_contracts\".\"did_win\""},
	PaidOut:        whereHelperbool{field: "\"battle_contracts\".\"paid_out\""},
	QueuedAt:       whereHelpertime_Time{field: "\"battle_contracts\".\"queued_at\""},
	Cancelled:      whereHelpernull_Bool{field: "\"battle_contracts\".\"cancelled\""},
	TransactionID:  whereHelpernull_String{field: "\"battle_contracts\".\"transaction_id\""},
	MechID:         whereHelpernull_String{field: "\"battle_contracts\".\"mech_id\""},
}

// BattleContractRels is where relationship names are stored.
var BattleContractRels = struct {
	Battle  string
	Mech    string
	Faction string
	Player  string
}{
	Battle:  "Battle",
	Mech:    "Mech",
	Faction: "Faction",
	Player:  "Player",
}

// battleContractR is where relationships are stored.
type battleContractR struct {
	Battle  *Battle  `boiler:"Battle" boil:"Battle" json:"Battle" toml:"Battle" yaml:"Battle"`
	Mech    *Mech    `boiler:"Mech" boil:"Mech" json:"Mech" toml:"Mech" yaml:"Mech"`
	Faction *Faction `boiler:"Faction" boil:"Faction" json:"Faction" toml:"Faction" yaml:"Faction"`
	Player  *Player  `boiler:"Player" boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
}

// NewStruct creates a new relationship struct
func (*battleContractR) NewStruct() *battleContractR {
	return &battleContractR{}
}

// battleContractL is where Load methods for each relationship are stored.
type battleContractL struct{}

var (
	battleContractAllColumns            = []string{"id", "player_id", "faction_id", "battle_id", "contract_reward", "fee", "did_win", "paid_out", "queued_at", "cancelled", "transaction_id", "mech_id"}
	battleContractColumnsWithoutDefault = []string{"player_id", "faction_id", "contract_reward", "fee"}
	battleContractColumnsWithDefault    = []string{"id", "battle_id", "did_win", "paid_out", "queued_at", "cancelled", "transaction_id", "mech_id"}
	battleContractPrimaryKeyColumns     = []string{"id"}
	battleContractGeneratedColumns      = []string{}
)

type (
	// BattleContractSlice is an alias for a slice of pointers to BattleContract.
	// This should almost always be used instead of []BattleContract.
	BattleContractSlice []*BattleContract
	// BattleContractHook is the signature for custom BattleContract hook methods
	BattleContractHook func(boil.Executor, *BattleContract) error

	battleContractQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battleContractType                 = reflect.TypeOf(&BattleContract{})
	battleContractMapping              = queries.MakeStructMapping(battleContractType)
	battleContractPrimaryKeyMapping, _ = queries.BindMapping(battleContractType, battleContractMapping, battleContractPrimaryKeyColumns)
	battleContractInsertCacheMut       sync.RWMutex
	battleContractInsertCache          = make(map[string]insertCache)
	battleContractUpdateCacheMut       sync.RWMutex
	battleContractUpdateCache          = make(map[string]updateCache)
	battleContractUpsertCacheMut       sync.RWMutex
	battleContractUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battleContractAfterSelectHooks []BattleContractHook

var battleContractBeforeInsertHooks []BattleContractHook
var battleContractAfterInsertHooks []BattleContractHook

var battleContractBeforeUpdateHooks []BattleContractHook
var battleContractAfterUpdateHooks []BattleContractHook

var battleContractBeforeDeleteHooks []BattleContractHook
var battleContractAfterDeleteHooks []BattleContractHook

var battleContractBeforeUpsertHooks []BattleContractHook
var battleContractAfterUpsertHooks []BattleContractHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BattleContract) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range battleContractAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BattleContract) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleContractBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BattleContract) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleContractAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BattleContract) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleContractBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BattleContract) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleContractAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BattleContract) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleContractBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BattleContract) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleContractAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BattleContract) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleContractBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BattleContract) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleContractAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattleContractHook registers your hook function for all future operations.
func AddBattleContractHook(hookPoint boil.HookPoint, battleContractHook BattleContractHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		battleContractAfterSelectHooks = append(battleContractAfterSelectHooks, battleContractHook)
	case boil.BeforeInsertHook:
		battleContractBeforeInsertHooks = append(battleContractBeforeInsertHooks, battleContractHook)
	case boil.AfterInsertHook:
		battleContractAfterInsertHooks = append(battleContractAfterInsertHooks, battleContractHook)
	case boil.BeforeUpdateHook:
		battleContractBeforeUpdateHooks = append(battleContractBeforeUpdateHooks, battleContractHook)
	case boil.AfterUpdateHook:
		battleContractAfterUpdateHooks = append(battleContractAfterUpdateHooks, battleContractHook)
	case boil.BeforeDeleteHook:
		battleContractBeforeDeleteHooks = append(battleContractBeforeDeleteHooks, battleContractHook)
	case boil.AfterDeleteHook:
		battleContractAfterDeleteHooks = append(battleContractAfterDeleteHooks, battleContractHook)
	case boil.BeforeUpsertHook:
		battleContractBeforeUpsertHooks = append(battleContractBeforeUpsertHooks, battleContractHook)
	case boil.AfterUpsertHook:
		battleContractAfterUpsertHooks = append(battleContractAfterUpsertHooks, battleContractHook)
	}
}

// One returns a single battleContract record from the query.
func (q battleContractQuery) One(exec boil.Executor) (*BattleContract, error) {
	o := &BattleContract{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for battle_contracts")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BattleContract records from the query.
func (q battleContractQuery) All(exec boil.Executor) (BattleContractSlice, error) {
	var o []*BattleContract

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BattleContract slice")
	}

	if len(battleContractAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BattleContract records in the query.
func (q battleContractQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count battle_contracts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battleContractQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if battle_contracts exists")
	}

	return count > 0, nil
}

// Battle pointed to by the foreign key.
func (o *BattleContract) Battle(mods ...qm.QueryMod) battleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BattleID),
	}

	queryMods = append(queryMods, mods...)

	query := Battles(queryMods...)
	queries.SetFrom(query.Query, "\"battles\"")

	return query
}

// Mech pointed to by the foreign key.
func (o *BattleContract) Mech(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MechID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// Faction pointed to by the foreign key.
func (o *BattleContract) Faction(mods ...qm.QueryMod) factionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FactionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Factions(queryMods...)
	queries.SetFrom(query.Query, "\"factions\"")

	return query
}

// Player pointed to by the foreign key.
func (o *BattleContract) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// LoadBattle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleContractL) LoadBattle(e boil.Executor, singular bool, maybeBattleContract interface{}, mods queries.Applicator) error {
	var slice []*BattleContract
	var object *BattleContract

	if singular {
		object = maybeBattleContract.(*BattleContract)
	} else {
		slice = *maybeBattleContract.(*[]*BattleContract)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleContractR{}
		}
		if !queries.IsNil(object.BattleID) {
			args = append(args, object.BattleID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleContractR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BattleID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BattleID) {
				args = append(args, obj.BattleID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battles`),
		qm.WhereIn(`battles.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Battle")
	}

	var resultSlice []*Battle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Battle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battles")
	}

	if len(battleContractAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Battle = foreign
		if foreign.R == nil {
			foreign.R = &battleR{}
		}
		foreign.R.BattleContracts = append(foreign.R.BattleContracts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BattleID, foreign.ID) {
				local.R.Battle = foreign
				if foreign.R == nil {
					foreign.R = &battleR{}
				}
				foreign.R.BattleContracts = append(foreign.R.BattleContracts, local)
				break
			}
		}
	}

	return nil
}

// LoadMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleContractL) LoadMech(e boil.Executor, singular bool, maybeBattleContract interface{}, mods queries.Applicator) error {
	var slice []*BattleContract
	var object *BattleContract

	if singular {
		object = maybeBattleContract.(*BattleContract)
	} else {
		slice = *maybeBattleContract.(*[]*BattleContract)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleContractR{}
		}
		if !queries.IsNil(object.MechID) {
			args = append(args, object.MechID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleContractR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.MechID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.MechID) {
				args = append(args, obj.MechID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(battleContractAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Mech = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.BattleContracts = append(foreign.R.BattleContracts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MechID, foreign.ID) {
				local.R.Mech = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.BattleContracts = append(foreign.R.BattleContracts, local)
				break
			}
		}
	}

	return nil
}

// LoadFaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleContractL) LoadFaction(e boil.Executor, singular bool, maybeBattleContract interface{}, mods queries.Applicator) error {
	var slice []*BattleContract
	var object *BattleContract

	if singular {
		object = maybeBattleContract.(*BattleContract)
	} else {
		slice = *maybeBattleContract.(*[]*BattleContract)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleContractR{}
		}
		args = append(args, object.FactionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleContractR{}
			}

			for _, a := range args {
				if a == obj.FactionID {
					continue Outer
				}
			}

			args = append(args, obj.FactionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`factions`),
		qm.WhereIn(`factions.id in ?`, args...),
		qmhelper.WhereIsNull(`factions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Faction")
	}

	var resultSlice []*Faction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Faction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for factions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for factions")
	}

	if len(battleContractAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Faction = foreign
		if foreign.R == nil {
			foreign.R = &factionR{}
		}
		foreign.R.BattleContracts = append(foreign.R.BattleContracts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FactionID == foreign.ID {
				local.R.Faction = foreign
				if foreign.R == nil {
					foreign.R = &factionR{}
				}
				foreign.R.BattleContracts = append(foreign.R.BattleContracts, local)
				break
			}
		}
	}

	return nil
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleContractL) LoadPlayer(e boil.Executor, singular bool, maybeBattleContract interface{}, mods queries.Applicator) error {
	var slice []*BattleContract
	var object *BattleContract

	if singular {
		object = maybeBattleContract.(*BattleContract)
	} else {
		slice = *maybeBattleContract.(*[]*BattleContract)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleContractR{}
		}
		args = append(args, object.PlayerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleContractR{}
			}

			for _, a := range args {
				if a == obj.PlayerID {
					continue Outer
				}
			}

			args = append(args, obj.PlayerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(battleContractAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.BattleContracts = append(foreign.R.BattleContracts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.ID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.BattleContracts = append(foreign.R.BattleContracts, local)
				break
			}
		}
	}

	return nil
}

// SetBattle of the battleContract to the related item.
// Sets o.R.Battle to related.
// Adds o to related.R.BattleContracts.
func (o *BattleContract) SetBattle(exec boil.Executor, insert bool, related *Battle) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_contracts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleContractPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BattleID, related.ID)
	if o.R == nil {
		o.R = &battleContractR{
			Battle: related,
		}
	} else {
		o.R.Battle = related
	}

	if related.R == nil {
		related.R = &battleR{
			BattleContracts: BattleContractSlice{o},
		}
	} else {
		related.R.BattleContracts = append(related.R.BattleContracts, o)
	}

	return nil
}

// RemoveBattle relationship.
// Sets o.R.Battle to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BattleContract) RemoveBattle(exec boil.Executor, related *Battle) error {
	var err error

	queries.SetScanner(&o.BattleID, nil)
	if _, err = o.Update(exec, boil.Whitelist("battle_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Battle = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BattleContracts {
		if queries.Equal(o.BattleID, ri.BattleID) {
			continue
		}

		ln := len(related.R.BattleContracts)
		if ln > 1 && i < ln-1 {
			related.R.BattleContracts[i] = related.R.BattleContracts[ln-1]
		}
		related.R.BattleContracts = related.R.BattleContracts[:ln-1]
		break
	}
	return nil
}

// SetMech of the battleContract to the related item.
// Sets o.R.Mech to related.
// Adds o to related.R.BattleContracts.
func (o *BattleContract) SetMech(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_contracts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleContractPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MechID, related.ID)
	if o.R == nil {
		o.R = &battleContractR{
			Mech: related,
		}
	} else {
		o.R.Mech = related
	}

	if related.R == nil {
		related.R = &mechR{
			BattleContracts: BattleContractSlice{o},
		}
	} else {
		related.R.BattleContracts = append(related.R.BattleContracts, o)
	}

	return nil
}

// RemoveMech relationship.
// Sets o.R.Mech to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BattleContract) RemoveMech(exec boil.Executor, related *Mech) error {
	var err error

	queries.SetScanner(&o.MechID, nil)
	if _, err = o.Update(exec, boil.Whitelist("mech_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Mech = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BattleContracts {
		if queries.Equal(o.MechID, ri.MechID) {
			continue
		}

		ln := len(related.R.BattleContracts)
		if ln > 1 && i < ln-1 {
			related.R.BattleContracts[i] = related.R.BattleContracts[ln-1]
		}
		related.R.BattleContracts = related.R.BattleContracts[:ln-1]
		break
	}
	return nil
}

// SetFaction of the battleContract to the related item.
// Sets o.R.Faction to related.
// Adds o to related.R.BattleContracts.
func (o *BattleContract) SetFaction(exec boil.Executor, insert bool, related *Faction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_contracts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"faction_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleContractPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FactionID = related.ID
	if o.R == nil {
		o.R = &battleContractR{
			Faction: related,
		}
	} else {
		o.R.Faction = related
	}

	if related.R == nil {
		related.R = &factionR{
			BattleContracts: BattleContractSlice{o},
		}
	} else {
		related.R.BattleContracts = append(related.R.BattleContracts, o)
	}

	return nil
}

// SetPlayer of the battleContract to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.BattleContracts.
func (o *BattleContract) SetPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_contracts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleContractPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.ID
	if o.R == nil {
		o.R = &battleContractR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			BattleContracts: BattleContractSlice{o},
		}
	} else {
		related.R.BattleContracts = append(related.R.BattleContracts, o)
	}

	return nil
}

// BattleContracts retrieves all the records using an executor.
func BattleContracts(mods ...qm.QueryMod) battleContractQuery {
	mods = append(mods, qm.From("\"battle_contracts\""))
	return battleContractQuery{NewQuery(mods...)}
}

// FindBattleContract retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattleContract(exec boil.Executor, iD string, selectCols ...string) (*BattleContract, error) {
	battleContractObj := &BattleContract{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battle_contracts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, battleContractObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from battle_contracts")
	}

	if err = battleContractObj.doAfterSelectHooks(exec); err != nil {
		return battleContractObj, err
	}

	return battleContractObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BattleContract) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_contracts provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleContractColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battleContractInsertCacheMut.RLock()
	cache, cached := battleContractInsertCache[key]
	battleContractInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battleContractAllColumns,
			battleContractColumnsWithDefault,
			battleContractColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battleContractType, battleContractMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battleContractType, battleContractMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battle_contracts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battle_contracts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into battle_contracts")
	}

	if !cached {
		battleContractInsertCacheMut.Lock()
		battleContractInsertCache[key] = cache
		battleContractInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BattleContract.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BattleContract) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battleContractUpdateCacheMut.RLock()
	cache, cached := battleContractUpdateCache[key]
	battleContractUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battleContractAllColumns,
			battleContractPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update battle_contracts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battle_contracts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battleContractPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battleContractType, battleContractMapping, append(wl, battleContractPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update battle_contracts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for battle_contracts")
	}

	if !cached {
		battleContractUpdateCacheMut.Lock()
		battleContractUpdateCache[key] = cache
		battleContractUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battleContractQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for battle_contracts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for battle_contracts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattleContractSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleContractPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battle_contracts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battleContractPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in battleContract slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all battleContract")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BattleContract) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_contracts provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleContractColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battleContractUpsertCacheMut.RLock()
	cache, cached := battleContractUpsertCache[key]
	battleContractUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battleContractAllColumns,
			battleContractColumnsWithDefault,
			battleContractColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			battleContractAllColumns,
			battleContractPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert battle_contracts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battleContractPrimaryKeyColumns))
			copy(conflict, battleContractPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battle_contracts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battleContractType, battleContractMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battleContractType, battleContractMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert battle_contracts")
	}

	if !cached {
		battleContractUpsertCacheMut.Lock()
		battleContractUpsertCache[key] = cache
		battleContractUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BattleContract record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BattleContract) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BattleContract provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battleContractPrimaryKeyMapping)
	sql := "DELETE FROM \"battle_contracts\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from battle_contracts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for battle_contracts")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battleContractQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no battleContractQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battle_contracts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_contracts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattleContractSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(battleContractBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleContractPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"battle_contracts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleContractPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battleContract slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_contracts")
	}

	if len(battleContractAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BattleContract) Reload(exec boil.Executor) error {
	ret, err := FindBattleContract(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattleContractSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattleContractSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleContractPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battle_contracts\".* FROM \"battle_contracts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleContractPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BattleContractSlice")
	}

	*o = slice

	return nil
}

// BattleContractExists checks if the BattleContract row exists.
func BattleContractExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battle_contracts\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if battle_contracts exists")
	}

	return exists, nil
}
