// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BlueprintMech is an object representing the database table.
type BlueprintMech struct {
	ID               string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BrandID          string      `boiler:"brand_id" boil:"brand_id" json:"brand_id" toml:"brand_id" yaml:"brand_id"`
	Label            string      `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	Slug             string      `boiler:"slug" boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	WeaponHardpoints int         `boiler:"weapon_hardpoints" boil:"weapon_hardpoints" json:"weapon_hardpoints" toml:"weapon_hardpoints" yaml:"weapon_hardpoints"`
	UtilitySlots     int         `boiler:"utility_slots" boil:"utility_slots" json:"utility_slots" toml:"utility_slots" yaml:"utility_slots"`
	Speed            int         `boiler:"speed" boil:"speed" json:"speed" toml:"speed" yaml:"speed"`
	MaxHitpoints     int         `boiler:"max_hitpoints" boil:"max_hitpoints" json:"max_hitpoints" toml:"max_hitpoints" yaml:"max_hitpoints"`
	DeletedAt        null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt        time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt        time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ModelID          string      `boiler:"model_id" boil:"model_id" json:"model_id" toml:"model_id" yaml:"model_id"`
	Collection       string      `boiler:"collection" boil:"collection" json:"collection" toml:"collection" yaml:"collection"`
	PowerCoreSize    string      `boiler:"power_core_size" boil:"power_core_size" json:"power_core_size" toml:"power_core_size" yaml:"power_core_size"`
	Tier             string      `boiler:"tier" boil:"tier" json:"tier" toml:"tier" yaml:"tier"`
	AvailabilityID   null.String `boiler:"availability_id" boil:"availability_id" json:"availability_id,omitempty" toml:"availability_id" yaml:"availability_id,omitempty"`

	R *blueprintMechR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L blueprintMechL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlueprintMechColumns = struct {
	ID               string
	BrandID          string
	Label            string
	Slug             string
	WeaponHardpoints string
	UtilitySlots     string
	Speed            string
	MaxHitpoints     string
	DeletedAt        string
	UpdatedAt        string
	CreatedAt        string
	ModelID          string
	Collection       string
	PowerCoreSize    string
	Tier             string
	AvailabilityID   string
}{
	ID:               "id",
	BrandID:          "brand_id",
	Label:            "label",
	Slug:             "slug",
	WeaponHardpoints: "weapon_hardpoints",
	UtilitySlots:     "utility_slots",
	Speed:            "speed",
	MaxHitpoints:     "max_hitpoints",
	DeletedAt:        "deleted_at",
	UpdatedAt:        "updated_at",
	CreatedAt:        "created_at",
	ModelID:          "model_id",
	Collection:       "collection",
	PowerCoreSize:    "power_core_size",
	Tier:             "tier",
	AvailabilityID:   "availability_id",
}

var BlueprintMechTableColumns = struct {
	ID               string
	BrandID          string
	Label            string
	Slug             string
	WeaponHardpoints string
	UtilitySlots     string
	Speed            string
	MaxHitpoints     string
	DeletedAt        string
	UpdatedAt        string
	CreatedAt        string
	ModelID          string
	Collection       string
	PowerCoreSize    string
	Tier             string
	AvailabilityID   string
}{
	ID:               "blueprint_mechs.id",
	BrandID:          "blueprint_mechs.brand_id",
	Label:            "blueprint_mechs.label",
	Slug:             "blueprint_mechs.slug",
	WeaponHardpoints: "blueprint_mechs.weapon_hardpoints",
	UtilitySlots:     "blueprint_mechs.utility_slots",
	Speed:            "blueprint_mechs.speed",
	MaxHitpoints:     "blueprint_mechs.max_hitpoints",
	DeletedAt:        "blueprint_mechs.deleted_at",
	UpdatedAt:        "blueprint_mechs.updated_at",
	CreatedAt:        "blueprint_mechs.created_at",
	ModelID:          "blueprint_mechs.model_id",
	Collection:       "blueprint_mechs.collection",
	PowerCoreSize:    "blueprint_mechs.power_core_size",
	Tier:             "blueprint_mechs.tier",
	AvailabilityID:   "blueprint_mechs.availability_id",
}

// Generated where

var BlueprintMechWhere = struct {
	ID               whereHelperstring
	BrandID          whereHelperstring
	Label            whereHelperstring
	Slug             whereHelperstring
	WeaponHardpoints whereHelperint
	UtilitySlots     whereHelperint
	Speed            whereHelperint
	MaxHitpoints     whereHelperint
	DeletedAt        whereHelpernull_Time
	UpdatedAt        whereHelpertime_Time
	CreatedAt        whereHelpertime_Time
	ModelID          whereHelperstring
	Collection       whereHelperstring
	PowerCoreSize    whereHelperstring
	Tier             whereHelperstring
	AvailabilityID   whereHelpernull_String
}{
	ID:               whereHelperstring{field: "\"blueprint_mechs\".\"id\""},
	BrandID:          whereHelperstring{field: "\"blueprint_mechs\".\"brand_id\""},
	Label:            whereHelperstring{field: "\"blueprint_mechs\".\"label\""},
	Slug:             whereHelperstring{field: "\"blueprint_mechs\".\"slug\""},
	WeaponHardpoints: whereHelperint{field: "\"blueprint_mechs\".\"weapon_hardpoints\""},
	UtilitySlots:     whereHelperint{field: "\"blueprint_mechs\".\"utility_slots\""},
	Speed:            whereHelperint{field: "\"blueprint_mechs\".\"speed\""},
	MaxHitpoints:     whereHelperint{field: "\"blueprint_mechs\".\"max_hitpoints\""},
	DeletedAt:        whereHelpernull_Time{field: "\"blueprint_mechs\".\"deleted_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"blueprint_mechs\".\"updated_at\""},
	CreatedAt:        whereHelpertime_Time{field: "\"blueprint_mechs\".\"created_at\""},
	ModelID:          whereHelperstring{field: "\"blueprint_mechs\".\"model_id\""},
	Collection:       whereHelperstring{field: "\"blueprint_mechs\".\"collection\""},
	PowerCoreSize:    whereHelperstring{field: "\"blueprint_mechs\".\"power_core_size\""},
	Tier:             whereHelperstring{field: "\"blueprint_mechs\".\"tier\""},
	AvailabilityID:   whereHelpernull_String{field: "\"blueprint_mechs\".\"availability_id\""},
}

// BlueprintMechRels is where relationship names are stored.
var BlueprintMechRels = struct {
	Availability   string
	Model          string
	BlueprintMechs string
}{
	Availability:   "Availability",
	Model:          "Model",
	BlueprintMechs: "BlueprintMechs",
}

// blueprintMechR is where relationships are stored.
type blueprintMechR struct {
	Availability   *Availability `boiler:"Availability" boil:"Availability" json:"Availability" toml:"Availability" yaml:"Availability"`
	Model          *MechModel    `boiler:"Model" boil:"Model" json:"Model" toml:"Model" yaml:"Model"`
	BlueprintMechs MechSlice     `boiler:"BlueprintMechs" boil:"BlueprintMechs" json:"BlueprintMechs" toml:"BlueprintMechs" yaml:"BlueprintMechs"`
}

// NewStruct creates a new relationship struct
func (*blueprintMechR) NewStruct() *blueprintMechR {
	return &blueprintMechR{}
}

// blueprintMechL is where Load methods for each relationship are stored.
type blueprintMechL struct{}

var (
	blueprintMechAllColumns            = []string{"id", "brand_id", "label", "slug", "weapon_hardpoints", "utility_slots", "speed", "max_hitpoints", "deleted_at", "updated_at", "created_at", "model_id", "collection", "power_core_size", "tier", "availability_id"}
	blueprintMechColumnsWithoutDefault = []string{"brand_id", "label", "slug", "weapon_hardpoints", "utility_slots", "speed", "max_hitpoints", "model_id"}
	blueprintMechColumnsWithDefault    = []string{"id", "deleted_at", "updated_at", "created_at", "collection", "power_core_size", "tier", "availability_id"}
	blueprintMechPrimaryKeyColumns     = []string{"id"}
	blueprintMechGeneratedColumns      = []string{}
)

type (
	// BlueprintMechSlice is an alias for a slice of pointers to BlueprintMech.
	// This should almost always be used instead of []BlueprintMech.
	BlueprintMechSlice []*BlueprintMech
	// BlueprintMechHook is the signature for custom BlueprintMech hook methods
	BlueprintMechHook func(boil.Executor, *BlueprintMech) error

	blueprintMechQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blueprintMechType                 = reflect.TypeOf(&BlueprintMech{})
	blueprintMechMapping              = queries.MakeStructMapping(blueprintMechType)
	blueprintMechPrimaryKeyMapping, _ = queries.BindMapping(blueprintMechType, blueprintMechMapping, blueprintMechPrimaryKeyColumns)
	blueprintMechInsertCacheMut       sync.RWMutex
	blueprintMechInsertCache          = make(map[string]insertCache)
	blueprintMechUpdateCacheMut       sync.RWMutex
	blueprintMechUpdateCache          = make(map[string]updateCache)
	blueprintMechUpsertCacheMut       sync.RWMutex
	blueprintMechUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var blueprintMechAfterSelectHooks []BlueprintMechHook

var blueprintMechBeforeInsertHooks []BlueprintMechHook
var blueprintMechAfterInsertHooks []BlueprintMechHook

var blueprintMechBeforeUpdateHooks []BlueprintMechHook
var blueprintMechAfterUpdateHooks []BlueprintMechHook

var blueprintMechBeforeDeleteHooks []BlueprintMechHook
var blueprintMechAfterDeleteHooks []BlueprintMechHook

var blueprintMechBeforeUpsertHooks []BlueprintMechHook
var blueprintMechAfterUpsertHooks []BlueprintMechHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BlueprintMech) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BlueprintMech) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BlueprintMech) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BlueprintMech) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BlueprintMech) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BlueprintMech) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BlueprintMech) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BlueprintMech) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BlueprintMech) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBlueprintMechHook registers your hook function for all future operations.
func AddBlueprintMechHook(hookPoint boil.HookPoint, blueprintMechHook BlueprintMechHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		blueprintMechAfterSelectHooks = append(blueprintMechAfterSelectHooks, blueprintMechHook)
	case boil.BeforeInsertHook:
		blueprintMechBeforeInsertHooks = append(blueprintMechBeforeInsertHooks, blueprintMechHook)
	case boil.AfterInsertHook:
		blueprintMechAfterInsertHooks = append(blueprintMechAfterInsertHooks, blueprintMechHook)
	case boil.BeforeUpdateHook:
		blueprintMechBeforeUpdateHooks = append(blueprintMechBeforeUpdateHooks, blueprintMechHook)
	case boil.AfterUpdateHook:
		blueprintMechAfterUpdateHooks = append(blueprintMechAfterUpdateHooks, blueprintMechHook)
	case boil.BeforeDeleteHook:
		blueprintMechBeforeDeleteHooks = append(blueprintMechBeforeDeleteHooks, blueprintMechHook)
	case boil.AfterDeleteHook:
		blueprintMechAfterDeleteHooks = append(blueprintMechAfterDeleteHooks, blueprintMechHook)
	case boil.BeforeUpsertHook:
		blueprintMechBeforeUpsertHooks = append(blueprintMechBeforeUpsertHooks, blueprintMechHook)
	case boil.AfterUpsertHook:
		blueprintMechAfterUpsertHooks = append(blueprintMechAfterUpsertHooks, blueprintMechHook)
	}
}

// One returns a single blueprintMech record from the query.
func (q blueprintMechQuery) One(exec boil.Executor) (*BlueprintMech, error) {
	o := &BlueprintMech{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for blueprint_mechs")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BlueprintMech records from the query.
func (q blueprintMechQuery) All(exec boil.Executor) (BlueprintMechSlice, error) {
	var o []*BlueprintMech

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BlueprintMech slice")
	}

	if len(blueprintMechAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BlueprintMech records in the query.
func (q blueprintMechQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count blueprint_mechs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q blueprintMechQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if blueprint_mechs exists")
	}

	return count > 0, nil
}

// Availability pointed to by the foreign key.
func (o *BlueprintMech) Availability(mods ...qm.QueryMod) availabilityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AvailabilityID),
	}

	queryMods = append(queryMods, mods...)

	query := Availabilities(queryMods...)
	queries.SetFrom(query.Query, "\"availabilities\"")

	return query
}

// Model pointed to by the foreign key.
func (o *BlueprintMech) Model(mods ...qm.QueryMod) mechModelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ModelID),
	}

	queryMods = append(queryMods, mods...)

	query := MechModels(queryMods...)
	queries.SetFrom(query.Query, "\"mech_models\"")

	return query
}

// BlueprintMechs retrieves all the mech's Mechs with an executor via blueprint_id column.
func (o *BlueprintMech) BlueprintMechs(mods ...qm.QueryMod) mechQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mechs\".\"blueprint_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"mechs\".\"deleted_at\""),
	)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mechs\".*"})
	}

	return query
}

// LoadAvailability allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blueprintMechL) LoadAvailability(e boil.Executor, singular bool, maybeBlueprintMech interface{}, mods queries.Applicator) error {
	var slice []*BlueprintMech
	var object *BlueprintMech

	if singular {
		object = maybeBlueprintMech.(*BlueprintMech)
	} else {
		slice = *maybeBlueprintMech.(*[]*BlueprintMech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintMechR{}
		}
		if !queries.IsNil(object.AvailabilityID) {
			args = append(args, object.AvailabilityID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintMechR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AvailabilityID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AvailabilityID) {
				args = append(args, obj.AvailabilityID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`availabilities`),
		qm.WhereIn(`availabilities.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Availability")
	}

	var resultSlice []*Availability
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Availability")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for availabilities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for availabilities")
	}

	if len(blueprintMechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Availability = foreign
		if foreign.R == nil {
			foreign.R = &availabilityR{}
		}
		foreign.R.BlueprintMechs = append(foreign.R.BlueprintMechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AvailabilityID, foreign.ID) {
				local.R.Availability = foreign
				if foreign.R == nil {
					foreign.R = &availabilityR{}
				}
				foreign.R.BlueprintMechs = append(foreign.R.BlueprintMechs, local)
				break
			}
		}
	}

	return nil
}

// LoadModel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blueprintMechL) LoadModel(e boil.Executor, singular bool, maybeBlueprintMech interface{}, mods queries.Applicator) error {
	var slice []*BlueprintMech
	var object *BlueprintMech

	if singular {
		object = maybeBlueprintMech.(*BlueprintMech)
	} else {
		slice = *maybeBlueprintMech.(*[]*BlueprintMech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintMechR{}
		}
		args = append(args, object.ModelID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintMechR{}
			}

			for _, a := range args {
				if a == obj.ModelID {
					continue Outer
				}
			}

			args = append(args, obj.ModelID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_models`),
		qm.WhereIn(`mech_models.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MechModel")
	}

	var resultSlice []*MechModel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MechModel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mech_models")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_models")
	}

	if len(blueprintMechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Model = foreign
		if foreign.R == nil {
			foreign.R = &mechModelR{}
		}
		foreign.R.ModelBlueprintMechs = append(foreign.R.ModelBlueprintMechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ModelID == foreign.ID {
				local.R.Model = foreign
				if foreign.R == nil {
					foreign.R = &mechModelR{}
				}
				foreign.R.ModelBlueprintMechs = append(foreign.R.ModelBlueprintMechs, local)
				break
			}
		}
	}

	return nil
}

// LoadBlueprintMechs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blueprintMechL) LoadBlueprintMechs(e boil.Executor, singular bool, maybeBlueprintMech interface{}, mods queries.Applicator) error {
	var slice []*BlueprintMech
	var object *BlueprintMech

	if singular {
		object = maybeBlueprintMech.(*BlueprintMech)
	} else {
		slice = *maybeBlueprintMech.(*[]*BlueprintMech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintMechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintMechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.blueprint_id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mechs")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mechs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlueprintMechs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mechR{}
			}
			foreign.R.Blueprint = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BlueprintID {
				local.R.BlueprintMechs = append(local.R.BlueprintMechs, foreign)
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.Blueprint = local
				break
			}
		}
	}

	return nil
}

// SetAvailability of the blueprintMech to the related item.
// Sets o.R.Availability to related.
// Adds o to related.R.BlueprintMechs.
func (o *BlueprintMech) SetAvailability(exec boil.Executor, insert bool, related *Availability) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"blueprint_mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"availability_id"}),
		strmangle.WhereClause("\"", "\"", 2, blueprintMechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AvailabilityID, related.ID)
	if o.R == nil {
		o.R = &blueprintMechR{
			Availability: related,
		}
	} else {
		o.R.Availability = related
	}

	if related.R == nil {
		related.R = &availabilityR{
			BlueprintMechs: BlueprintMechSlice{o},
		}
	} else {
		related.R.BlueprintMechs = append(related.R.BlueprintMechs, o)
	}

	return nil
}

// RemoveAvailability relationship.
// Sets o.R.Availability to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BlueprintMech) RemoveAvailability(exec boil.Executor, related *Availability) error {
	var err error

	queries.SetScanner(&o.AvailabilityID, nil)
	if _, err = o.Update(exec, boil.Whitelist("availability_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Availability = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BlueprintMechs {
		if queries.Equal(o.AvailabilityID, ri.AvailabilityID) {
			continue
		}

		ln := len(related.R.BlueprintMechs)
		if ln > 1 && i < ln-1 {
			related.R.BlueprintMechs[i] = related.R.BlueprintMechs[ln-1]
		}
		related.R.BlueprintMechs = related.R.BlueprintMechs[:ln-1]
		break
	}
	return nil
}

// SetModel of the blueprintMech to the related item.
// Sets o.R.Model to related.
// Adds o to related.R.ModelBlueprintMechs.
func (o *BlueprintMech) SetModel(exec boil.Executor, insert bool, related *MechModel) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"blueprint_mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"model_id"}),
		strmangle.WhereClause("\"", "\"", 2, blueprintMechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ModelID = related.ID
	if o.R == nil {
		o.R = &blueprintMechR{
			Model: related,
		}
	} else {
		o.R.Model = related
	}

	if related.R == nil {
		related.R = &mechModelR{
			ModelBlueprintMechs: BlueprintMechSlice{o},
		}
	} else {
		related.R.ModelBlueprintMechs = append(related.R.ModelBlueprintMechs, o)
	}

	return nil
}

// AddBlueprintMechs adds the given related objects to the existing relationships
// of the blueprint_mech, optionally inserting them as new records.
// Appends related to o.R.BlueprintMechs.
// Sets related.R.Blueprint appropriately.
func (o *BlueprintMech) AddBlueprintMechs(exec boil.Executor, insert bool, related ...*Mech) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BlueprintID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mechs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_id"}),
				strmangle.WhereClause("\"", "\"", 2, mechPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BlueprintID = o.ID
		}
	}

	if o.R == nil {
		o.R = &blueprintMechR{
			BlueprintMechs: related,
		}
	} else {
		o.R.BlueprintMechs = append(o.R.BlueprintMechs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mechR{
				Blueprint: o,
			}
		} else {
			rel.R.Blueprint = o
		}
	}
	return nil
}

// BlueprintMechs retrieves all the records using an executor.
func BlueprintMechs(mods ...qm.QueryMod) blueprintMechQuery {
	mods = append(mods, qm.From("\"blueprint_mechs\""), qmhelper.WhereIsNull("\"blueprint_mechs\".\"deleted_at\""))
	return blueprintMechQuery{NewQuery(mods...)}
}

// FindBlueprintMech retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlueprintMech(exec boil.Executor, iD string, selectCols ...string) (*BlueprintMech, error) {
	blueprintMechObj := &BlueprintMech{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"blueprint_mechs\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, blueprintMechObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from blueprint_mechs")
	}

	if err = blueprintMechObj.doAfterSelectHooks(exec); err != nil {
		return blueprintMechObj, err
	}

	return blueprintMechObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlueprintMech) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_mechs provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintMechColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blueprintMechInsertCacheMut.RLock()
	cache, cached := blueprintMechInsertCache[key]
	blueprintMechInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blueprintMechAllColumns,
			blueprintMechColumnsWithDefault,
			blueprintMechColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blueprintMechType, blueprintMechMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blueprintMechType, blueprintMechMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"blueprint_mechs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"blueprint_mechs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into blueprint_mechs")
	}

	if !cached {
		blueprintMechInsertCacheMut.Lock()
		blueprintMechInsertCache[key] = cache
		blueprintMechInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BlueprintMech.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlueprintMech) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	blueprintMechUpdateCacheMut.RLock()
	cache, cached := blueprintMechUpdateCache[key]
	blueprintMechUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blueprintMechAllColumns,
			blueprintMechPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update blueprint_mechs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"blueprint_mechs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, blueprintMechPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blueprintMechType, blueprintMechMapping, append(wl, blueprintMechPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update blueprint_mechs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for blueprint_mechs")
	}

	if !cached {
		blueprintMechUpdateCacheMut.Lock()
		blueprintMechUpdateCache[key] = cache
		blueprintMechUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q blueprintMechQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for blueprint_mechs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for blueprint_mechs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlueprintMechSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintMechPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"blueprint_mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, blueprintMechPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in blueprintMech slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all blueprintMech")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlueprintMech) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_mechs provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintMechColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blueprintMechUpsertCacheMut.RLock()
	cache, cached := blueprintMechUpsertCache[key]
	blueprintMechUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blueprintMechAllColumns,
			blueprintMechColumnsWithDefault,
			blueprintMechColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			blueprintMechAllColumns,
			blueprintMechPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert blueprint_mechs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(blueprintMechPrimaryKeyColumns))
			copy(conflict, blueprintMechPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"blueprint_mechs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(blueprintMechType, blueprintMechMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blueprintMechType, blueprintMechMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert blueprint_mechs")
	}

	if !cached {
		blueprintMechUpsertCacheMut.Lock()
		blueprintMechUpsertCache[key] = cache
		blueprintMechUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BlueprintMech record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlueprintMech) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BlueprintMech provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blueprintMechPrimaryKeyMapping)
		sql = "DELETE FROM \"blueprint_mechs\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"blueprint_mechs\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(blueprintMechType, blueprintMechMapping, append(wl, blueprintMechPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from blueprint_mechs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for blueprint_mechs")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q blueprintMechQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no blueprintMechQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprint_mechs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_mechs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlueprintMechSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(blueprintMechBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintMechPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"blueprint_mechs\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintMechPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintMechPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"blueprint_mechs\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, blueprintMechPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprintMech slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_mechs")
	}

	if len(blueprintMechAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlueprintMech) Reload(exec boil.Executor) error {
	ret, err := FindBlueprintMech(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlueprintMechSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlueprintMechSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintMechPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"blueprint_mechs\".* FROM \"blueprint_mechs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintMechPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BlueprintMechSlice")
	}

	*o = slice

	return nil
}

// BlueprintMechExists checks if the BlueprintMech row exists.
func BlueprintMechExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"blueprint_mechs\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if blueprint_mechs exists")
	}

	return exists, nil
}
