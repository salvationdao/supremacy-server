// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SyndicatePendingMotion is an object representing the database table.
type SyndicatePendingMotion struct {
	ID            string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	SyndicateID   string      `boiler:"syndicate_id" boil:"syndicate_id" json:"syndicate_id" toml:"syndicate_id" yaml:"syndicate_id"`
	MotionID      string      `boiler:"motion_id" boil:"motion_id" json:"motion_id" toml:"motion_id" yaml:"motion_id"`
	FinalDecision null.String `boiler:"final_decision" boil:"final_decision" json:"final_decision,omitempty" toml:"final_decision" yaml:"final_decision,omitempty"`
	CreatedAt     time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt     null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *syndicatePendingMotionR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L syndicatePendingMotionL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SyndicatePendingMotionColumns = struct {
	ID            string
	SyndicateID   string
	MotionID      string
	FinalDecision string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	ID:            "id",
	SyndicateID:   "syndicate_id",
	MotionID:      "motion_id",
	FinalDecision: "final_decision",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	DeletedAt:     "deleted_at",
}

var SyndicatePendingMotionTableColumns = struct {
	ID            string
	SyndicateID   string
	MotionID      string
	FinalDecision string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	ID:            "syndicate_pending_motions.id",
	SyndicateID:   "syndicate_pending_motions.syndicate_id",
	MotionID:      "syndicate_pending_motions.motion_id",
	FinalDecision: "syndicate_pending_motions.final_decision",
	CreatedAt:     "syndicate_pending_motions.created_at",
	UpdatedAt:     "syndicate_pending_motions.updated_at",
	DeletedAt:     "syndicate_pending_motions.deleted_at",
}

// Generated where

var SyndicatePendingMotionWhere = struct {
	ID            whereHelperstring
	SyndicateID   whereHelperstring
	MotionID      whereHelperstring
	FinalDecision whereHelpernull_String
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	DeletedAt     whereHelpernull_Time
}{
	ID:            whereHelperstring{field: "\"syndicate_pending_motions\".\"id\""},
	SyndicateID:   whereHelperstring{field: "\"syndicate_pending_motions\".\"syndicate_id\""},
	MotionID:      whereHelperstring{field: "\"syndicate_pending_motions\".\"motion_id\""},
	FinalDecision: whereHelpernull_String{field: "\"syndicate_pending_motions\".\"final_decision\""},
	CreatedAt:     whereHelpertime_Time{field: "\"syndicate_pending_motions\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"syndicate_pending_motions\".\"updated_at\""},
	DeletedAt:     whereHelpernull_Time{field: "\"syndicate_pending_motions\".\"deleted_at\""},
}

// SyndicatePendingMotionRels is where relationship names are stored.
var SyndicatePendingMotionRels = struct {
	Motion    string
	Syndicate string
}{
	Motion:    "Motion",
	Syndicate: "Syndicate",
}

// syndicatePendingMotionR is where relationships are stored.
type syndicatePendingMotionR struct {
	Motion    *SyndicateMotion `boiler:"Motion" boil:"Motion" json:"Motion" toml:"Motion" yaml:"Motion"`
	Syndicate *Syndicate       `boiler:"Syndicate" boil:"Syndicate" json:"Syndicate" toml:"Syndicate" yaml:"Syndicate"`
}

// NewStruct creates a new relationship struct
func (*syndicatePendingMotionR) NewStruct() *syndicatePendingMotionR {
	return &syndicatePendingMotionR{}
}

// syndicatePendingMotionL is where Load methods for each relationship are stored.
type syndicatePendingMotionL struct{}

var (
	syndicatePendingMotionAllColumns            = []string{"id", "syndicate_id", "motion_id", "final_decision", "created_at", "updated_at", "deleted_at"}
	syndicatePendingMotionColumnsWithoutDefault = []string{"syndicate_id", "motion_id"}
	syndicatePendingMotionColumnsWithDefault    = []string{"id", "final_decision", "created_at", "updated_at", "deleted_at"}
	syndicatePendingMotionPrimaryKeyColumns     = []string{"id"}
	syndicatePendingMotionGeneratedColumns      = []string{}
)

type (
	// SyndicatePendingMotionSlice is an alias for a slice of pointers to SyndicatePendingMotion.
	// This should almost always be used instead of []SyndicatePendingMotion.
	SyndicatePendingMotionSlice []*SyndicatePendingMotion
	// SyndicatePendingMotionHook is the signature for custom SyndicatePendingMotion hook methods
	SyndicatePendingMotionHook func(boil.Executor, *SyndicatePendingMotion) error

	syndicatePendingMotionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	syndicatePendingMotionType                 = reflect.TypeOf(&SyndicatePendingMotion{})
	syndicatePendingMotionMapping              = queries.MakeStructMapping(syndicatePendingMotionType)
	syndicatePendingMotionPrimaryKeyMapping, _ = queries.BindMapping(syndicatePendingMotionType, syndicatePendingMotionMapping, syndicatePendingMotionPrimaryKeyColumns)
	syndicatePendingMotionInsertCacheMut       sync.RWMutex
	syndicatePendingMotionInsertCache          = make(map[string]insertCache)
	syndicatePendingMotionUpdateCacheMut       sync.RWMutex
	syndicatePendingMotionUpdateCache          = make(map[string]updateCache)
	syndicatePendingMotionUpsertCacheMut       sync.RWMutex
	syndicatePendingMotionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var syndicatePendingMotionAfterSelectHooks []SyndicatePendingMotionHook

var syndicatePendingMotionBeforeInsertHooks []SyndicatePendingMotionHook
var syndicatePendingMotionAfterInsertHooks []SyndicatePendingMotionHook

var syndicatePendingMotionBeforeUpdateHooks []SyndicatePendingMotionHook
var syndicatePendingMotionAfterUpdateHooks []SyndicatePendingMotionHook

var syndicatePendingMotionBeforeDeleteHooks []SyndicatePendingMotionHook
var syndicatePendingMotionAfterDeleteHooks []SyndicatePendingMotionHook

var syndicatePendingMotionBeforeUpsertHooks []SyndicatePendingMotionHook
var syndicatePendingMotionAfterUpsertHooks []SyndicatePendingMotionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SyndicatePendingMotion) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicatePendingMotionAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SyndicatePendingMotion) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicatePendingMotionBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SyndicatePendingMotion) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicatePendingMotionAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SyndicatePendingMotion) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicatePendingMotionBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SyndicatePendingMotion) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicatePendingMotionAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SyndicatePendingMotion) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicatePendingMotionBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SyndicatePendingMotion) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicatePendingMotionAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SyndicatePendingMotion) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicatePendingMotionBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SyndicatePendingMotion) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicatePendingMotionAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSyndicatePendingMotionHook registers your hook function for all future operations.
func AddSyndicatePendingMotionHook(hookPoint boil.HookPoint, syndicatePendingMotionHook SyndicatePendingMotionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		syndicatePendingMotionAfterSelectHooks = append(syndicatePendingMotionAfterSelectHooks, syndicatePendingMotionHook)
	case boil.BeforeInsertHook:
		syndicatePendingMotionBeforeInsertHooks = append(syndicatePendingMotionBeforeInsertHooks, syndicatePendingMotionHook)
	case boil.AfterInsertHook:
		syndicatePendingMotionAfterInsertHooks = append(syndicatePendingMotionAfterInsertHooks, syndicatePendingMotionHook)
	case boil.BeforeUpdateHook:
		syndicatePendingMotionBeforeUpdateHooks = append(syndicatePendingMotionBeforeUpdateHooks, syndicatePendingMotionHook)
	case boil.AfterUpdateHook:
		syndicatePendingMotionAfterUpdateHooks = append(syndicatePendingMotionAfterUpdateHooks, syndicatePendingMotionHook)
	case boil.BeforeDeleteHook:
		syndicatePendingMotionBeforeDeleteHooks = append(syndicatePendingMotionBeforeDeleteHooks, syndicatePendingMotionHook)
	case boil.AfterDeleteHook:
		syndicatePendingMotionAfterDeleteHooks = append(syndicatePendingMotionAfterDeleteHooks, syndicatePendingMotionHook)
	case boil.BeforeUpsertHook:
		syndicatePendingMotionBeforeUpsertHooks = append(syndicatePendingMotionBeforeUpsertHooks, syndicatePendingMotionHook)
	case boil.AfterUpsertHook:
		syndicatePendingMotionAfterUpsertHooks = append(syndicatePendingMotionAfterUpsertHooks, syndicatePendingMotionHook)
	}
}

// One returns a single syndicatePendingMotion record from the query.
func (q syndicatePendingMotionQuery) One(exec boil.Executor) (*SyndicatePendingMotion, error) {
	o := &SyndicatePendingMotion{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for syndicate_pending_motions")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SyndicatePendingMotion records from the query.
func (q syndicatePendingMotionQuery) All(exec boil.Executor) (SyndicatePendingMotionSlice, error) {
	var o []*SyndicatePendingMotion

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to SyndicatePendingMotion slice")
	}

	if len(syndicatePendingMotionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SyndicatePendingMotion records in the query.
func (q syndicatePendingMotionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count syndicate_pending_motions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q syndicatePendingMotionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if syndicate_pending_motions exists")
	}

	return count > 0, nil
}

// Motion pointed to by the foreign key.
func (o *SyndicatePendingMotion) Motion(mods ...qm.QueryMod) syndicateMotionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MotionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := SyndicateMotions(queryMods...)
	queries.SetFrom(query.Query, "\"syndicate_motions\"")

	return query
}

// Syndicate pointed to by the foreign key.
func (o *SyndicatePendingMotion) Syndicate(mods ...qm.QueryMod) syndicateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SyndicateID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Syndicates(queryMods...)
	queries.SetFrom(query.Query, "\"syndicates\"")

	return query
}

// LoadMotion allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicatePendingMotionL) LoadMotion(e boil.Executor, singular bool, maybeSyndicatePendingMotion interface{}, mods queries.Applicator) error {
	var slice []*SyndicatePendingMotion
	var object *SyndicatePendingMotion

	if singular {
		object = maybeSyndicatePendingMotion.(*SyndicatePendingMotion)
	} else {
		slice = *maybeSyndicatePendingMotion.(*[]*SyndicatePendingMotion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicatePendingMotionR{}
		}
		args = append(args, object.MotionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicatePendingMotionR{}
			}

			for _, a := range args {
				if a == obj.MotionID {
					continue Outer
				}
			}

			args = append(args, obj.MotionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicate_motions`),
		qm.WhereIn(`syndicate_motions.id in ?`, args...),
		qmhelper.WhereIsNull(`syndicate_motions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SyndicateMotion")
	}

	var resultSlice []*SyndicateMotion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SyndicateMotion")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for syndicate_motions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicate_motions")
	}

	if len(syndicatePendingMotionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Motion = foreign
		if foreign.R == nil {
			foreign.R = &syndicateMotionR{}
		}
		foreign.R.MotionSyndicatePendingMotions = append(foreign.R.MotionSyndicatePendingMotions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MotionID == foreign.ID {
				local.R.Motion = foreign
				if foreign.R == nil {
					foreign.R = &syndicateMotionR{}
				}
				foreign.R.MotionSyndicatePendingMotions = append(foreign.R.MotionSyndicatePendingMotions, local)
				break
			}
		}
	}

	return nil
}

// LoadSyndicate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicatePendingMotionL) LoadSyndicate(e boil.Executor, singular bool, maybeSyndicatePendingMotion interface{}, mods queries.Applicator) error {
	var slice []*SyndicatePendingMotion
	var object *SyndicatePendingMotion

	if singular {
		object = maybeSyndicatePendingMotion.(*SyndicatePendingMotion)
	} else {
		slice = *maybeSyndicatePendingMotion.(*[]*SyndicatePendingMotion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicatePendingMotionR{}
		}
		args = append(args, object.SyndicateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicatePendingMotionR{}
			}

			for _, a := range args {
				if a == obj.SyndicateID {
					continue Outer
				}
			}

			args = append(args, obj.SyndicateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicates`),
		qm.WhereIn(`syndicates.id in ?`, args...),
		qmhelper.WhereIsNull(`syndicates.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Syndicate")
	}

	var resultSlice []*Syndicate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Syndicate")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for syndicates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicates")
	}

	if len(syndicatePendingMotionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Syndicate = foreign
		if foreign.R == nil {
			foreign.R = &syndicateR{}
		}
		foreign.R.SyndicatePendingMotions = append(foreign.R.SyndicatePendingMotions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SyndicateID == foreign.ID {
				local.R.Syndicate = foreign
				if foreign.R == nil {
					foreign.R = &syndicateR{}
				}
				foreign.R.SyndicatePendingMotions = append(foreign.R.SyndicatePendingMotions, local)
				break
			}
		}
	}

	return nil
}

// SetMotion of the syndicatePendingMotion to the related item.
// Sets o.R.Motion to related.
// Adds o to related.R.MotionSyndicatePendingMotions.
func (o *SyndicatePendingMotion) SetMotion(exec boil.Executor, insert bool, related *SyndicateMotion) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicate_pending_motions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"motion_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicatePendingMotionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MotionID = related.ID
	if o.R == nil {
		o.R = &syndicatePendingMotionR{
			Motion: related,
		}
	} else {
		o.R.Motion = related
	}

	if related.R == nil {
		related.R = &syndicateMotionR{
			MotionSyndicatePendingMotions: SyndicatePendingMotionSlice{o},
		}
	} else {
		related.R.MotionSyndicatePendingMotions = append(related.R.MotionSyndicatePendingMotions, o)
	}

	return nil
}

// SetSyndicate of the syndicatePendingMotion to the related item.
// Sets o.R.Syndicate to related.
// Adds o to related.R.SyndicatePendingMotions.
func (o *SyndicatePendingMotion) SetSyndicate(exec boil.Executor, insert bool, related *Syndicate) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicate_pending_motions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"syndicate_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicatePendingMotionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SyndicateID = related.ID
	if o.R == nil {
		o.R = &syndicatePendingMotionR{
			Syndicate: related,
		}
	} else {
		o.R.Syndicate = related
	}

	if related.R == nil {
		related.R = &syndicateR{
			SyndicatePendingMotions: SyndicatePendingMotionSlice{o},
		}
	} else {
		related.R.SyndicatePendingMotions = append(related.R.SyndicatePendingMotions, o)
	}

	return nil
}

// SyndicatePendingMotions retrieves all the records using an executor.
func SyndicatePendingMotions(mods ...qm.QueryMod) syndicatePendingMotionQuery {
	mods = append(mods, qm.From("\"syndicate_pending_motions\""), qmhelper.WhereIsNull("\"syndicate_pending_motions\".\"deleted_at\""))
	return syndicatePendingMotionQuery{NewQuery(mods...)}
}

// FindSyndicatePendingMotion retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSyndicatePendingMotion(exec boil.Executor, iD string, selectCols ...string) (*SyndicatePendingMotion, error) {
	syndicatePendingMotionObj := &SyndicatePendingMotion{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"syndicate_pending_motions\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, syndicatePendingMotionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from syndicate_pending_motions")
	}

	if err = syndicatePendingMotionObj.doAfterSelectHooks(exec); err != nil {
		return syndicatePendingMotionObj, err
	}

	return syndicatePendingMotionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SyndicatePendingMotion) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no syndicate_pending_motions provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syndicatePendingMotionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	syndicatePendingMotionInsertCacheMut.RLock()
	cache, cached := syndicatePendingMotionInsertCache[key]
	syndicatePendingMotionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			syndicatePendingMotionAllColumns,
			syndicatePendingMotionColumnsWithDefault,
			syndicatePendingMotionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(syndicatePendingMotionType, syndicatePendingMotionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(syndicatePendingMotionType, syndicatePendingMotionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"syndicate_pending_motions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"syndicate_pending_motions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into syndicate_pending_motions")
	}

	if !cached {
		syndicatePendingMotionInsertCacheMut.Lock()
		syndicatePendingMotionInsertCache[key] = cache
		syndicatePendingMotionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the SyndicatePendingMotion.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SyndicatePendingMotion) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	syndicatePendingMotionUpdateCacheMut.RLock()
	cache, cached := syndicatePendingMotionUpdateCache[key]
	syndicatePendingMotionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			syndicatePendingMotionAllColumns,
			syndicatePendingMotionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update syndicate_pending_motions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"syndicate_pending_motions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, syndicatePendingMotionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(syndicatePendingMotionType, syndicatePendingMotionMapping, append(wl, syndicatePendingMotionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update syndicate_pending_motions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for syndicate_pending_motions")
	}

	if !cached {
		syndicatePendingMotionUpdateCacheMut.Lock()
		syndicatePendingMotionUpdateCache[key] = cache
		syndicatePendingMotionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q syndicatePendingMotionQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for syndicate_pending_motions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for syndicate_pending_motions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SyndicatePendingMotionSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicatePendingMotionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"syndicate_pending_motions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, syndicatePendingMotionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in syndicatePendingMotion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all syndicatePendingMotion")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SyndicatePendingMotion) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no syndicate_pending_motions provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syndicatePendingMotionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	syndicatePendingMotionUpsertCacheMut.RLock()
	cache, cached := syndicatePendingMotionUpsertCache[key]
	syndicatePendingMotionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			syndicatePendingMotionAllColumns,
			syndicatePendingMotionColumnsWithDefault,
			syndicatePendingMotionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			syndicatePendingMotionAllColumns,
			syndicatePendingMotionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert syndicate_pending_motions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(syndicatePendingMotionPrimaryKeyColumns))
			copy(conflict, syndicatePendingMotionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"syndicate_pending_motions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(syndicatePendingMotionType, syndicatePendingMotionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(syndicatePendingMotionType, syndicatePendingMotionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert syndicate_pending_motions")
	}

	if !cached {
		syndicatePendingMotionUpsertCacheMut.Lock()
		syndicatePendingMotionUpsertCache[key] = cache
		syndicatePendingMotionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single SyndicatePendingMotion record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SyndicatePendingMotion) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no SyndicatePendingMotion provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), syndicatePendingMotionPrimaryKeyMapping)
		sql = "DELETE FROM \"syndicate_pending_motions\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"syndicate_pending_motions\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(syndicatePendingMotionType, syndicatePendingMotionMapping, append(wl, syndicatePendingMotionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from syndicate_pending_motions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for syndicate_pending_motions")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q syndicatePendingMotionQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no syndicatePendingMotionQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from syndicate_pending_motions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for syndicate_pending_motions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SyndicatePendingMotionSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(syndicatePendingMotionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicatePendingMotionPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"syndicate_pending_motions\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syndicatePendingMotionPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicatePendingMotionPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"syndicate_pending_motions\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, syndicatePendingMotionPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from syndicatePendingMotion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for syndicate_pending_motions")
	}

	if len(syndicatePendingMotionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SyndicatePendingMotion) Reload(exec boil.Executor) error {
	ret, err := FindSyndicatePendingMotion(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SyndicatePendingMotionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SyndicatePendingMotionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicatePendingMotionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"syndicate_pending_motions\".* FROM \"syndicate_pending_motions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syndicatePendingMotionPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in SyndicatePendingMotionSlice")
	}

	*o = slice

	return nil
}

// SyndicatePendingMotionExists checks if the SyndicatePendingMotion row exists.
func SyndicatePendingMotionExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"syndicate_pending_motions\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if syndicate_pending_motions exists")
	}

	return exists, nil
}
