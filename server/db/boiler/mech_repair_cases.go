// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MechRepairCase is an object representing the database table.
type MechRepairCase struct {
	ID                  string          `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	MechID              string          `boiler:"mech_id" boil:"mech_id" json:"mech_id" toml:"mech_id" yaml:"mech_id"`
	Fee                 decimal.Decimal `boiler:"fee" boil:"fee" json:"fee" toml:"fee" yaml:"fee"`
	FastRepairFee       decimal.Decimal `boiler:"fast_repair_fee" boil:"fast_repair_fee" json:"fast_repair_fee" toml:"fast_repair_fee" yaml:"fast_repair_fee"`
	FastRepairTXID      null.String     `boiler:"fast_repair_tx_id" boil:"fast_repair_tx_id" json:"fast_repair_tx_id,omitempty" toml:"fast_repair_tx_id" yaml:"fast_repair_tx_id,omitempty"`
	Status              string          `boiler:"status" boil:"status" json:"status" toml:"status" yaml:"status"`
	RepairPeriodMinutes int             `boiler:"repair_period_minutes" boil:"repair_period_minutes" json:"repair_period_minutes" toml:"repair_period_minutes" yaml:"repair_period_minutes"`
	MaxHealth           decimal.Decimal `boiler:"max_health" boil:"max_health" json:"max_health" toml:"max_health" yaml:"max_health"`
	RemainHealth        decimal.Decimal `boiler:"remain_health" boil:"remain_health" json:"remain_health" toml:"remain_health" yaml:"remain_health"`
	StartedAt           null.Time       `boiler:"started_at" boil:"started_at" json:"started_at,omitempty" toml:"started_at" yaml:"started_at,omitempty"`
	ExpectedEndAt       null.Time       `boiler:"expected_end_at" boil:"expected_end_at" json:"expected_end_at,omitempty" toml:"expected_end_at" yaml:"expected_end_at,omitempty"`
	EndedAt             null.Time       `boiler:"ended_at" boil:"ended_at" json:"ended_at,omitempty" toml:"ended_at" yaml:"ended_at,omitempty"`
	CreatedAt           time.Time       `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt           time.Time       `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *mechRepairCaseR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L mechRepairCaseL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MechRepairCaseColumns = struct {
	ID                  string
	MechID              string
	Fee                 string
	FastRepairFee       string
	FastRepairTXID      string
	Status              string
	RepairPeriodMinutes string
	MaxHealth           string
	RemainHealth        string
	StartedAt           string
	ExpectedEndAt       string
	EndedAt             string
	CreatedAt           string
	UpdatedAt           string
}{
	ID:                  "id",
	MechID:              "mech_id",
	Fee:                 "fee",
	FastRepairFee:       "fast_repair_fee",
	FastRepairTXID:      "fast_repair_tx_id",
	Status:              "status",
	RepairPeriodMinutes: "repair_period_minutes",
	MaxHealth:           "max_health",
	RemainHealth:        "remain_health",
	StartedAt:           "started_at",
	ExpectedEndAt:       "expected_end_at",
	EndedAt:             "ended_at",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
}

var MechRepairCaseTableColumns = struct {
	ID                  string
	MechID              string
	Fee                 string
	FastRepairFee       string
	FastRepairTXID      string
	Status              string
	RepairPeriodMinutes string
	MaxHealth           string
	RemainHealth        string
	StartedAt           string
	ExpectedEndAt       string
	EndedAt             string
	CreatedAt           string
	UpdatedAt           string
}{
	ID:                  "mech_repair_cases.id",
	MechID:              "mech_repair_cases.mech_id",
	Fee:                 "mech_repair_cases.fee",
	FastRepairFee:       "mech_repair_cases.fast_repair_fee",
	FastRepairTXID:      "mech_repair_cases.fast_repair_tx_id",
	Status:              "mech_repair_cases.status",
	RepairPeriodMinutes: "mech_repair_cases.repair_period_minutes",
	MaxHealth:           "mech_repair_cases.max_health",
	RemainHealth:        "mech_repair_cases.remain_health",
	StartedAt:           "mech_repair_cases.started_at",
	ExpectedEndAt:       "mech_repair_cases.expected_end_at",
	EndedAt:             "mech_repair_cases.ended_at",
	CreatedAt:           "mech_repair_cases.created_at",
	UpdatedAt:           "mech_repair_cases.updated_at",
}

// Generated where

var MechRepairCaseWhere = struct {
	ID                  whereHelperstring
	MechID              whereHelperstring
	Fee                 whereHelperdecimal_Decimal
	FastRepairFee       whereHelperdecimal_Decimal
	FastRepairTXID      whereHelpernull_String
	Status              whereHelperstring
	RepairPeriodMinutes whereHelperint
	MaxHealth           whereHelperdecimal_Decimal
	RemainHealth        whereHelperdecimal_Decimal
	StartedAt           whereHelpernull_Time
	ExpectedEndAt       whereHelpernull_Time
	EndedAt             whereHelpernull_Time
	CreatedAt           whereHelpertime_Time
	UpdatedAt           whereHelpertime_Time
}{
	ID:                  whereHelperstring{field: "\"mech_repair_cases\".\"id\""},
	MechID:              whereHelperstring{field: "\"mech_repair_cases\".\"mech_id\""},
	Fee:                 whereHelperdecimal_Decimal{field: "\"mech_repair_cases\".\"fee\""},
	FastRepairFee:       whereHelperdecimal_Decimal{field: "\"mech_repair_cases\".\"fast_repair_fee\""},
	FastRepairTXID:      whereHelpernull_String{field: "\"mech_repair_cases\".\"fast_repair_tx_id\""},
	Status:              whereHelperstring{field: "\"mech_repair_cases\".\"status\""},
	RepairPeriodMinutes: whereHelperint{field: "\"mech_repair_cases\".\"repair_period_minutes\""},
	MaxHealth:           whereHelperdecimal_Decimal{field: "\"mech_repair_cases\".\"max_health\""},
	RemainHealth:        whereHelperdecimal_Decimal{field: "\"mech_repair_cases\".\"remain_health\""},
	StartedAt:           whereHelpernull_Time{field: "\"mech_repair_cases\".\"started_at\""},
	ExpectedEndAt:       whereHelpernull_Time{field: "\"mech_repair_cases\".\"expected_end_at\""},
	EndedAt:             whereHelpernull_Time{field: "\"mech_repair_cases\".\"ended_at\""},
	CreatedAt:           whereHelpertime_Time{field: "\"mech_repair_cases\".\"created_at\""},
	UpdatedAt:           whereHelpertime_Time{field: "\"mech_repair_cases\".\"updated_at\""},
}

// MechRepairCaseRels is where relationship names are stored.
var MechRepairCaseRels = struct {
	Mech string
}{
	Mech: "Mech",
}

// mechRepairCaseR is where relationships are stored.
type mechRepairCaseR struct {
	Mech *Mech `boiler:"Mech" boil:"Mech" json:"Mech" toml:"Mech" yaml:"Mech"`
}

// NewStruct creates a new relationship struct
func (*mechRepairCaseR) NewStruct() *mechRepairCaseR {
	return &mechRepairCaseR{}
}

// mechRepairCaseL is where Load methods for each relationship are stored.
type mechRepairCaseL struct{}

var (
	mechRepairCaseAllColumns            = []string{"id", "mech_id", "fee", "fast_repair_fee", "fast_repair_tx_id", "status", "repair_period_minutes", "max_health", "remain_health", "started_at", "expected_end_at", "ended_at", "created_at", "updated_at"}
	mechRepairCaseColumnsWithoutDefault = []string{"mech_id", "fee", "fast_repair_fee", "repair_period_minutes", "max_health", "remain_health"}
	mechRepairCaseColumnsWithDefault    = []string{"id", "fast_repair_tx_id", "status", "started_at", "expected_end_at", "ended_at", "created_at", "updated_at"}
	mechRepairCasePrimaryKeyColumns     = []string{"id"}
	mechRepairCaseGeneratedColumns      = []string{}
)

type (
	// MechRepairCaseSlice is an alias for a slice of pointers to MechRepairCase.
	// This should almost always be used instead of []MechRepairCase.
	MechRepairCaseSlice []*MechRepairCase
	// MechRepairCaseHook is the signature for custom MechRepairCase hook methods
	MechRepairCaseHook func(boil.Executor, *MechRepairCase) error

	mechRepairCaseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mechRepairCaseType                 = reflect.TypeOf(&MechRepairCase{})
	mechRepairCaseMapping              = queries.MakeStructMapping(mechRepairCaseType)
	mechRepairCasePrimaryKeyMapping, _ = queries.BindMapping(mechRepairCaseType, mechRepairCaseMapping, mechRepairCasePrimaryKeyColumns)
	mechRepairCaseInsertCacheMut       sync.RWMutex
	mechRepairCaseInsertCache          = make(map[string]insertCache)
	mechRepairCaseUpdateCacheMut       sync.RWMutex
	mechRepairCaseUpdateCache          = make(map[string]updateCache)
	mechRepairCaseUpsertCacheMut       sync.RWMutex
	mechRepairCaseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mechRepairCaseAfterSelectHooks []MechRepairCaseHook

var mechRepairCaseBeforeInsertHooks []MechRepairCaseHook
var mechRepairCaseAfterInsertHooks []MechRepairCaseHook

var mechRepairCaseBeforeUpdateHooks []MechRepairCaseHook
var mechRepairCaseAfterUpdateHooks []MechRepairCaseHook

var mechRepairCaseBeforeDeleteHooks []MechRepairCaseHook
var mechRepairCaseAfterDeleteHooks []MechRepairCaseHook

var mechRepairCaseBeforeUpsertHooks []MechRepairCaseHook
var mechRepairCaseAfterUpsertHooks []MechRepairCaseHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MechRepairCase) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range mechRepairCaseAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MechRepairCase) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechRepairCaseBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MechRepairCase) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechRepairCaseAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MechRepairCase) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechRepairCaseBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MechRepairCase) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechRepairCaseAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MechRepairCase) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechRepairCaseBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MechRepairCase) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechRepairCaseAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MechRepairCase) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechRepairCaseBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MechRepairCase) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechRepairCaseAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMechRepairCaseHook registers your hook function for all future operations.
func AddMechRepairCaseHook(hookPoint boil.HookPoint, mechRepairCaseHook MechRepairCaseHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mechRepairCaseAfterSelectHooks = append(mechRepairCaseAfterSelectHooks, mechRepairCaseHook)
	case boil.BeforeInsertHook:
		mechRepairCaseBeforeInsertHooks = append(mechRepairCaseBeforeInsertHooks, mechRepairCaseHook)
	case boil.AfterInsertHook:
		mechRepairCaseAfterInsertHooks = append(mechRepairCaseAfterInsertHooks, mechRepairCaseHook)
	case boil.BeforeUpdateHook:
		mechRepairCaseBeforeUpdateHooks = append(mechRepairCaseBeforeUpdateHooks, mechRepairCaseHook)
	case boil.AfterUpdateHook:
		mechRepairCaseAfterUpdateHooks = append(mechRepairCaseAfterUpdateHooks, mechRepairCaseHook)
	case boil.BeforeDeleteHook:
		mechRepairCaseBeforeDeleteHooks = append(mechRepairCaseBeforeDeleteHooks, mechRepairCaseHook)
	case boil.AfterDeleteHook:
		mechRepairCaseAfterDeleteHooks = append(mechRepairCaseAfterDeleteHooks, mechRepairCaseHook)
	case boil.BeforeUpsertHook:
		mechRepairCaseBeforeUpsertHooks = append(mechRepairCaseBeforeUpsertHooks, mechRepairCaseHook)
	case boil.AfterUpsertHook:
		mechRepairCaseAfterUpsertHooks = append(mechRepairCaseAfterUpsertHooks, mechRepairCaseHook)
	}
}

// One returns a single mechRepairCase record from the query.
func (q mechRepairCaseQuery) One(exec boil.Executor) (*MechRepairCase, error) {
	o := &MechRepairCase{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for mech_repair_cases")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MechRepairCase records from the query.
func (q mechRepairCaseQuery) All(exec boil.Executor) (MechRepairCaseSlice, error) {
	var o []*MechRepairCase

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to MechRepairCase slice")
	}

	if len(mechRepairCaseAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MechRepairCase records in the query.
func (q mechRepairCaseQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count mech_repair_cases rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mechRepairCaseQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if mech_repair_cases exists")
	}

	return count > 0, nil
}

// Mech pointed to by the foreign key.
func (o *MechRepairCase) Mech(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MechID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// LoadMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechRepairCaseL) LoadMech(e boil.Executor, singular bool, maybeMechRepairCase interface{}, mods queries.Applicator) error {
	var slice []*MechRepairCase
	var object *MechRepairCase

	if singular {
		object = maybeMechRepairCase.(*MechRepairCase)
	} else {
		slice = *maybeMechRepairCase.(*[]*MechRepairCase)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechRepairCaseR{}
		}
		args = append(args, object.MechID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechRepairCaseR{}
			}

			for _, a := range args {
				if a == obj.MechID {
					continue Outer
				}
			}

			args = append(args, obj.MechID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(mechRepairCaseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Mech = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.MechRepairCases = append(foreign.R.MechRepairCases, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MechID == foreign.ID {
				local.R.Mech = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.MechRepairCases = append(foreign.R.MechRepairCases, local)
				break
			}
		}
	}

	return nil
}

// SetMech of the mechRepairCase to the related item.
// Sets o.R.Mech to related.
// Adds o to related.R.MechRepairCases.
func (o *MechRepairCase) SetMech(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mech_repair_cases\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechRepairCasePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MechID = related.ID
	if o.R == nil {
		o.R = &mechRepairCaseR{
			Mech: related,
		}
	} else {
		o.R.Mech = related
	}

	if related.R == nil {
		related.R = &mechR{
			MechRepairCases: MechRepairCaseSlice{o},
		}
	} else {
		related.R.MechRepairCases = append(related.R.MechRepairCases, o)
	}

	return nil
}

// MechRepairCases retrieves all the records using an executor.
func MechRepairCases(mods ...qm.QueryMod) mechRepairCaseQuery {
	mods = append(mods, qm.From("\"mech_repair_cases\""))
	return mechRepairCaseQuery{NewQuery(mods...)}
}

// FindMechRepairCase retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMechRepairCase(exec boil.Executor, iD string, selectCols ...string) (*MechRepairCase, error) {
	mechRepairCaseObj := &MechRepairCase{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mech_repair_cases\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, mechRepairCaseObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from mech_repair_cases")
	}

	if err = mechRepairCaseObj.doAfterSelectHooks(exec); err != nil {
		return mechRepairCaseObj, err
	}

	return mechRepairCaseObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MechRepairCase) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mech_repair_cases provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechRepairCaseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mechRepairCaseInsertCacheMut.RLock()
	cache, cached := mechRepairCaseInsertCache[key]
	mechRepairCaseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mechRepairCaseAllColumns,
			mechRepairCaseColumnsWithDefault,
			mechRepairCaseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mechRepairCaseType, mechRepairCaseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mechRepairCaseType, mechRepairCaseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mech_repair_cases\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mech_repair_cases\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into mech_repair_cases")
	}

	if !cached {
		mechRepairCaseInsertCacheMut.Lock()
		mechRepairCaseInsertCache[key] = cache
		mechRepairCaseInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the MechRepairCase.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MechRepairCase) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mechRepairCaseUpdateCacheMut.RLock()
	cache, cached := mechRepairCaseUpdateCache[key]
	mechRepairCaseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mechRepairCaseAllColumns,
			mechRepairCasePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update mech_repair_cases, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mech_repair_cases\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mechRepairCasePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mechRepairCaseType, mechRepairCaseMapping, append(wl, mechRepairCasePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update mech_repair_cases row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for mech_repair_cases")
	}

	if !cached {
		mechRepairCaseUpdateCacheMut.Lock()
		mechRepairCaseUpdateCache[key] = cache
		mechRepairCaseUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mechRepairCaseQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for mech_repair_cases")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for mech_repair_cases")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MechRepairCaseSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechRepairCasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mech_repair_cases\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mechRepairCasePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in mechRepairCase slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all mechRepairCase")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MechRepairCase) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mech_repair_cases provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechRepairCaseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mechRepairCaseUpsertCacheMut.RLock()
	cache, cached := mechRepairCaseUpsertCache[key]
	mechRepairCaseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mechRepairCaseAllColumns,
			mechRepairCaseColumnsWithDefault,
			mechRepairCaseColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mechRepairCaseAllColumns,
			mechRepairCasePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert mech_repair_cases, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mechRepairCasePrimaryKeyColumns))
			copy(conflict, mechRepairCasePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mech_repair_cases\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mechRepairCaseType, mechRepairCaseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mechRepairCaseType, mechRepairCaseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert mech_repair_cases")
	}

	if !cached {
		mechRepairCaseUpsertCacheMut.Lock()
		mechRepairCaseUpsertCache[key] = cache
		mechRepairCaseUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single MechRepairCase record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MechRepairCase) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no MechRepairCase provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mechRepairCasePrimaryKeyMapping)
	sql := "DELETE FROM \"mech_repair_cases\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from mech_repair_cases")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for mech_repair_cases")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mechRepairCaseQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no mechRepairCaseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mech_repair_cases")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mech_repair_cases")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MechRepairCaseSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mechRepairCaseBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechRepairCasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"mech_repair_cases\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechRepairCasePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mechRepairCase slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mech_repair_cases")
	}

	if len(mechRepairCaseAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MechRepairCase) Reload(exec boil.Executor) error {
	ret, err := FindMechRepairCase(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MechRepairCaseSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MechRepairCaseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechRepairCasePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mech_repair_cases\".* FROM \"mech_repair_cases\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechRepairCasePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in MechRepairCaseSlice")
	}

	*o = slice

	return nil
}

// MechRepairCaseExists checks if the MechRepairCase row exists.
func MechRepairCaseExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mech_repair_cases\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if mech_repair_cases exists")
	}

	return exists, nil
}
