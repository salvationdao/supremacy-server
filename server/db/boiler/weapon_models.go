// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// WeaponModel is an object representing the database table.
type WeaponModel struct {
	ID            string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BrandID       null.String `boiler:"brand_id" boil:"brand_id" json:"brand_id,omitempty" toml:"brand_id" yaml:"brand_id,omitempty"`
	Label         string      `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	WeaponType    string      `boiler:"weapon_type" boil:"weapon_type" json:"weapon_type" toml:"weapon_type" yaml:"weapon_type"`
	DefaultSkinID string      `boiler:"default_skin_id" boil:"default_skin_id" json:"default_skin_id" toml:"default_skin_id" yaml:"default_skin_id"`
	CreatedAt     time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *weaponModelR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L weaponModelL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WeaponModelColumns = struct {
	ID            string
	BrandID       string
	Label         string
	WeaponType    string
	DefaultSkinID string
	CreatedAt     string
}{
	ID:            "id",
	BrandID:       "brand_id",
	Label:         "label",
	WeaponType:    "weapon_type",
	DefaultSkinID: "default_skin_id",
	CreatedAt:     "created_at",
}

var WeaponModelTableColumns = struct {
	ID            string
	BrandID       string
	Label         string
	WeaponType    string
	DefaultSkinID string
	CreatedAt     string
}{
	ID:            "weapon_models.id",
	BrandID:       "weapon_models.brand_id",
	Label:         "weapon_models.label",
	WeaponType:    "weapon_models.weapon_type",
	DefaultSkinID: "weapon_models.default_skin_id",
	CreatedAt:     "weapon_models.created_at",
}

// Generated where

var WeaponModelWhere = struct {
	ID            whereHelperstring
	BrandID       whereHelpernull_String
	Label         whereHelperstring
	WeaponType    whereHelperstring
	DefaultSkinID whereHelperstring
	CreatedAt     whereHelpertime_Time
}{
	ID:            whereHelperstring{field: "\"weapon_models\".\"id\""},
	BrandID:       whereHelpernull_String{field: "\"weapon_models\".\"brand_id\""},
	Label:         whereHelperstring{field: "\"weapon_models\".\"label\""},
	WeaponType:    whereHelperstring{field: "\"weapon_models\".\"weapon_type\""},
	DefaultSkinID: whereHelperstring{field: "\"weapon_models\".\"default_skin_id\""},
	CreatedAt:     whereHelpertime_Time{field: "\"weapon_models\".\"created_at\""},
}

// WeaponModelRels is where relationship names are stored.
var WeaponModelRels = struct {
	Brand                string
	BlueprintWeaponSkins string
	BlueprintWeapons     string
	WeaponSkins          string
	Weapons              string
}{
	Brand:                "Brand",
	BlueprintWeaponSkins: "BlueprintWeaponSkins",
	BlueprintWeapons:     "BlueprintWeapons",
	WeaponSkins:          "WeaponSkins",
	Weapons:              "Weapons",
}

// weaponModelR is where relationships are stored.
type weaponModelR struct {
	Brand                *Brand                   `boiler:"Brand" boil:"Brand" json:"Brand" toml:"Brand" yaml:"Brand"`
	BlueprintWeaponSkins BlueprintWeaponSkinSlice `boiler:"BlueprintWeaponSkins" boil:"BlueprintWeaponSkins" json:"BlueprintWeaponSkins" toml:"BlueprintWeaponSkins" yaml:"BlueprintWeaponSkins"`
	BlueprintWeapons     BlueprintWeaponSlice     `boiler:"BlueprintWeapons" boil:"BlueprintWeapons" json:"BlueprintWeapons" toml:"BlueprintWeapons" yaml:"BlueprintWeapons"`
	WeaponSkins          WeaponSkinSlice          `boiler:"WeaponSkins" boil:"WeaponSkins" json:"WeaponSkins" toml:"WeaponSkins" yaml:"WeaponSkins"`
	Weapons              WeaponSlice              `boiler:"Weapons" boil:"Weapons" json:"Weapons" toml:"Weapons" yaml:"Weapons"`
}

// NewStruct creates a new relationship struct
func (*weaponModelR) NewStruct() *weaponModelR {
	return &weaponModelR{}
}

// weaponModelL is where Load methods for each relationship are stored.
type weaponModelL struct{}

var (
	weaponModelAllColumns            = []string{"id", "brand_id", "label", "weapon_type", "default_skin_id", "created_at"}
	weaponModelColumnsWithoutDefault = []string{"label", "weapon_type", "default_skin_id"}
	weaponModelColumnsWithDefault    = []string{"id", "brand_id", "created_at"}
	weaponModelPrimaryKeyColumns     = []string{"id"}
	weaponModelGeneratedColumns      = []string{}
)

type (
	// WeaponModelSlice is an alias for a slice of pointers to WeaponModel.
	// This should almost always be used instead of []WeaponModel.
	WeaponModelSlice []*WeaponModel
	// WeaponModelHook is the signature for custom WeaponModel hook methods
	WeaponModelHook func(boil.Executor, *WeaponModel) error

	weaponModelQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	weaponModelType                 = reflect.TypeOf(&WeaponModel{})
	weaponModelMapping              = queries.MakeStructMapping(weaponModelType)
	weaponModelPrimaryKeyMapping, _ = queries.BindMapping(weaponModelType, weaponModelMapping, weaponModelPrimaryKeyColumns)
	weaponModelInsertCacheMut       sync.RWMutex
	weaponModelInsertCache          = make(map[string]insertCache)
	weaponModelUpdateCacheMut       sync.RWMutex
	weaponModelUpdateCache          = make(map[string]updateCache)
	weaponModelUpsertCacheMut       sync.RWMutex
	weaponModelUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var weaponModelAfterSelectHooks []WeaponModelHook

var weaponModelBeforeInsertHooks []WeaponModelHook
var weaponModelAfterInsertHooks []WeaponModelHook

var weaponModelBeforeUpdateHooks []WeaponModelHook
var weaponModelAfterUpdateHooks []WeaponModelHook

var weaponModelBeforeDeleteHooks []WeaponModelHook
var weaponModelAfterDeleteHooks []WeaponModelHook

var weaponModelBeforeUpsertHooks []WeaponModelHook
var weaponModelAfterUpsertHooks []WeaponModelHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *WeaponModel) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponModelAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *WeaponModel) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponModelBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *WeaponModel) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponModelAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *WeaponModel) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponModelBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *WeaponModel) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponModelAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *WeaponModel) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponModelBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *WeaponModel) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponModelAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *WeaponModel) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponModelBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *WeaponModel) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponModelAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWeaponModelHook registers your hook function for all future operations.
func AddWeaponModelHook(hookPoint boil.HookPoint, weaponModelHook WeaponModelHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		weaponModelAfterSelectHooks = append(weaponModelAfterSelectHooks, weaponModelHook)
	case boil.BeforeInsertHook:
		weaponModelBeforeInsertHooks = append(weaponModelBeforeInsertHooks, weaponModelHook)
	case boil.AfterInsertHook:
		weaponModelAfterInsertHooks = append(weaponModelAfterInsertHooks, weaponModelHook)
	case boil.BeforeUpdateHook:
		weaponModelBeforeUpdateHooks = append(weaponModelBeforeUpdateHooks, weaponModelHook)
	case boil.AfterUpdateHook:
		weaponModelAfterUpdateHooks = append(weaponModelAfterUpdateHooks, weaponModelHook)
	case boil.BeforeDeleteHook:
		weaponModelBeforeDeleteHooks = append(weaponModelBeforeDeleteHooks, weaponModelHook)
	case boil.AfterDeleteHook:
		weaponModelAfterDeleteHooks = append(weaponModelAfterDeleteHooks, weaponModelHook)
	case boil.BeforeUpsertHook:
		weaponModelBeforeUpsertHooks = append(weaponModelBeforeUpsertHooks, weaponModelHook)
	case boil.AfterUpsertHook:
		weaponModelAfterUpsertHooks = append(weaponModelAfterUpsertHooks, weaponModelHook)
	}
}

// One returns a single weaponModel record from the query.
func (q weaponModelQuery) One(exec boil.Executor) (*WeaponModel, error) {
	o := &WeaponModel{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for weapon_models")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all WeaponModel records from the query.
func (q weaponModelQuery) All(exec boil.Executor) (WeaponModelSlice, error) {
	var o []*WeaponModel

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to WeaponModel slice")
	}

	if len(weaponModelAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all WeaponModel records in the query.
func (q weaponModelQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count weapon_models rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q weaponModelQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if weapon_models exists")
	}

	return count > 0, nil
}

// Brand pointed to by the foreign key.
func (o *WeaponModel) Brand(mods ...qm.QueryMod) brandQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BrandID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Brands(queryMods...)
	queries.SetFrom(query.Query, "\"brands\"")

	return query
}

// BlueprintWeaponSkins retrieves all the blueprint_weapon_skin's BlueprintWeaponSkins with an executor.
func (o *WeaponModel) BlueprintWeaponSkins(mods ...qm.QueryMod) blueprintWeaponSkinQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"blueprint_weapon_skin\".\"weapon_model_id\"=?", o.ID),
	)

	query := BlueprintWeaponSkins(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_weapon_skin\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"blueprint_weapon_skin\".*"})
	}

	return query
}

// BlueprintWeapons retrieves all the blueprint_weapon's BlueprintWeapons with an executor.
func (o *WeaponModel) BlueprintWeapons(mods ...qm.QueryMod) blueprintWeaponQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"blueprint_weapons\".\"weapon_model_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"blueprint_weapons\".\"deleted_at\""),
	)

	query := BlueprintWeapons(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_weapons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"blueprint_weapons\".*"})
	}

	return query
}

// WeaponSkins retrieves all the weapon_skin's WeaponSkins with an executor.
func (o *WeaponModel) WeaponSkins(mods ...qm.QueryMod) weaponSkinQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"weapon_skin\".\"weapon_model_id\"=?", o.ID),
	)

	query := WeaponSkins(queryMods...)
	queries.SetFrom(query.Query, "\"weapon_skin\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"weapon_skin\".*"})
	}

	return query
}

// Weapons retrieves all the weapon's Weapons with an executor.
func (o *WeaponModel) Weapons(mods ...qm.QueryMod) weaponQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"weapons\".\"weapon_model_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"weapons\".\"deleted_at\""),
	)

	query := Weapons(queryMods...)
	queries.SetFrom(query.Query, "\"weapons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"weapons\".*"})
	}

	return query
}

// LoadBrand allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (weaponModelL) LoadBrand(e boil.Executor, singular bool, maybeWeaponModel interface{}, mods queries.Applicator) error {
	var slice []*WeaponModel
	var object *WeaponModel

	if singular {
		object = maybeWeaponModel.(*WeaponModel)
	} else {
		slice = *maybeWeaponModel.(*[]*WeaponModel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &weaponModelR{}
		}
		if !queries.IsNil(object.BrandID) {
			args = append(args, object.BrandID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &weaponModelR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BrandID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BrandID) {
				args = append(args, obj.BrandID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`brands`),
		qm.WhereIn(`brands.id in ?`, args...),
		qmhelper.WhereIsNull(`brands.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Brand")
	}

	var resultSlice []*Brand
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Brand")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for brands")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for brands")
	}

	if len(weaponModelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Brand = foreign
		if foreign.R == nil {
			foreign.R = &brandR{}
		}
		foreign.R.WeaponModels = append(foreign.R.WeaponModels, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BrandID, foreign.ID) {
				local.R.Brand = foreign
				if foreign.R == nil {
					foreign.R = &brandR{}
				}
				foreign.R.WeaponModels = append(foreign.R.WeaponModels, local)
				break
			}
		}
	}

	return nil
}

// LoadBlueprintWeaponSkins allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (weaponModelL) LoadBlueprintWeaponSkins(e boil.Executor, singular bool, maybeWeaponModel interface{}, mods queries.Applicator) error {
	var slice []*WeaponModel
	var object *WeaponModel

	if singular {
		object = maybeWeaponModel.(*WeaponModel)
	} else {
		slice = *maybeWeaponModel.(*[]*WeaponModel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &weaponModelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &weaponModelR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_weapon_skin`),
		qm.WhereIn(`blueprint_weapon_skin.weapon_model_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blueprint_weapon_skin")
	}

	var resultSlice []*BlueprintWeaponSkin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blueprint_weapon_skin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blueprint_weapon_skin")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_weapon_skin")
	}

	if len(blueprintWeaponSkinAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlueprintWeaponSkins = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blueprintWeaponSkinR{}
			}
			foreign.R.WeaponModel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.WeaponModelID {
				local.R.BlueprintWeaponSkins = append(local.R.BlueprintWeaponSkins, foreign)
				if foreign.R == nil {
					foreign.R = &blueprintWeaponSkinR{}
				}
				foreign.R.WeaponModel = local
				break
			}
		}
	}

	return nil
}

// LoadBlueprintWeapons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (weaponModelL) LoadBlueprintWeapons(e boil.Executor, singular bool, maybeWeaponModel interface{}, mods queries.Applicator) error {
	var slice []*WeaponModel
	var object *WeaponModel

	if singular {
		object = maybeWeaponModel.(*WeaponModel)
	} else {
		slice = *maybeWeaponModel.(*[]*WeaponModel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &weaponModelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &weaponModelR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_weapons`),
		qm.WhereIn(`blueprint_weapons.weapon_model_id in ?`, args...),
		qmhelper.WhereIsNull(`blueprint_weapons.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blueprint_weapons")
	}

	var resultSlice []*BlueprintWeapon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blueprint_weapons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blueprint_weapons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_weapons")
	}

	if len(blueprintWeaponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlueprintWeapons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blueprintWeaponR{}
			}
			foreign.R.WeaponModel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.WeaponModelID {
				local.R.BlueprintWeapons = append(local.R.BlueprintWeapons, foreign)
				if foreign.R == nil {
					foreign.R = &blueprintWeaponR{}
				}
				foreign.R.WeaponModel = local
				break
			}
		}
	}

	return nil
}

// LoadWeaponSkins allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (weaponModelL) LoadWeaponSkins(e boil.Executor, singular bool, maybeWeaponModel interface{}, mods queries.Applicator) error {
	var slice []*WeaponModel
	var object *WeaponModel

	if singular {
		object = maybeWeaponModel.(*WeaponModel)
	} else {
		slice = *maybeWeaponModel.(*[]*WeaponModel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &weaponModelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &weaponModelR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`weapon_skin`),
		qm.WhereIn(`weapon_skin.weapon_model_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load weapon_skin")
	}

	var resultSlice []*WeaponSkin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice weapon_skin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on weapon_skin")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for weapon_skin")
	}

	if len(weaponSkinAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WeaponSkins = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &weaponSkinR{}
			}
			foreign.R.WeaponModel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.WeaponModelID {
				local.R.WeaponSkins = append(local.R.WeaponSkins, foreign)
				if foreign.R == nil {
					foreign.R = &weaponSkinR{}
				}
				foreign.R.WeaponModel = local
				break
			}
		}
	}

	return nil
}

// LoadWeapons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (weaponModelL) LoadWeapons(e boil.Executor, singular bool, maybeWeaponModel interface{}, mods queries.Applicator) error {
	var slice []*WeaponModel
	var object *WeaponModel

	if singular {
		object = maybeWeaponModel.(*WeaponModel)
	} else {
		slice = *maybeWeaponModel.(*[]*WeaponModel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &weaponModelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &weaponModelR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`weapons`),
		qm.WhereIn(`weapons.weapon_model_id in ?`, args...),
		qmhelper.WhereIsNull(`weapons.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load weapons")
	}

	var resultSlice []*Weapon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice weapons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on weapons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for weapons")
	}

	if len(weaponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Weapons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &weaponR{}
			}
			foreign.R.WeaponModel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.WeaponModelID) {
				local.R.Weapons = append(local.R.Weapons, foreign)
				if foreign.R == nil {
					foreign.R = &weaponR{}
				}
				foreign.R.WeaponModel = local
				break
			}
		}
	}

	return nil
}

// SetBrand of the weaponModel to the related item.
// Sets o.R.Brand to related.
// Adds o to related.R.WeaponModels.
func (o *WeaponModel) SetBrand(exec boil.Executor, insert bool, related *Brand) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"weapon_models\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"brand_id"}),
		strmangle.WhereClause("\"", "\"", 2, weaponModelPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BrandID, related.ID)
	if o.R == nil {
		o.R = &weaponModelR{
			Brand: related,
		}
	} else {
		o.R.Brand = related
	}

	if related.R == nil {
		related.R = &brandR{
			WeaponModels: WeaponModelSlice{o},
		}
	} else {
		related.R.WeaponModels = append(related.R.WeaponModels, o)
	}

	return nil
}

// RemoveBrand relationship.
// Sets o.R.Brand to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *WeaponModel) RemoveBrand(exec boil.Executor, related *Brand) error {
	var err error

	queries.SetScanner(&o.BrandID, nil)
	if _, err = o.Update(exec, boil.Whitelist("brand_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Brand = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.WeaponModels {
		if queries.Equal(o.BrandID, ri.BrandID) {
			continue
		}

		ln := len(related.R.WeaponModels)
		if ln > 1 && i < ln-1 {
			related.R.WeaponModels[i] = related.R.WeaponModels[ln-1]
		}
		related.R.WeaponModels = related.R.WeaponModels[:ln-1]
		break
	}
	return nil
}

// AddBlueprintWeaponSkins adds the given related objects to the existing relationships
// of the weapon_model, optionally inserting them as new records.
// Appends related to o.R.BlueprintWeaponSkins.
// Sets related.R.WeaponModel appropriately.
func (o *WeaponModel) AddBlueprintWeaponSkins(exec boil.Executor, insert bool, related ...*BlueprintWeaponSkin) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.WeaponModelID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"blueprint_weapon_skin\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"weapon_model_id"}),
				strmangle.WhereClause("\"", "\"", 2, blueprintWeaponSkinPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.WeaponModelID = o.ID
		}
	}

	if o.R == nil {
		o.R = &weaponModelR{
			BlueprintWeaponSkins: related,
		}
	} else {
		o.R.BlueprintWeaponSkins = append(o.R.BlueprintWeaponSkins, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blueprintWeaponSkinR{
				WeaponModel: o,
			}
		} else {
			rel.R.WeaponModel = o
		}
	}
	return nil
}

// AddBlueprintWeapons adds the given related objects to the existing relationships
// of the weapon_model, optionally inserting them as new records.
// Appends related to o.R.BlueprintWeapons.
// Sets related.R.WeaponModel appropriately.
func (o *WeaponModel) AddBlueprintWeapons(exec boil.Executor, insert bool, related ...*BlueprintWeapon) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.WeaponModelID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"blueprint_weapons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"weapon_model_id"}),
				strmangle.WhereClause("\"", "\"", 2, blueprintWeaponPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.WeaponModelID = o.ID
		}
	}

	if o.R == nil {
		o.R = &weaponModelR{
			BlueprintWeapons: related,
		}
	} else {
		o.R.BlueprintWeapons = append(o.R.BlueprintWeapons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blueprintWeaponR{
				WeaponModel: o,
			}
		} else {
			rel.R.WeaponModel = o
		}
	}
	return nil
}

// AddWeaponSkins adds the given related objects to the existing relationships
// of the weapon_model, optionally inserting them as new records.
// Appends related to o.R.WeaponSkins.
// Sets related.R.WeaponModel appropriately.
func (o *WeaponModel) AddWeaponSkins(exec boil.Executor, insert bool, related ...*WeaponSkin) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.WeaponModelID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"weapon_skin\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"weapon_model_id"}),
				strmangle.WhereClause("\"", "\"", 2, weaponSkinPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.WeaponModelID = o.ID
		}
	}

	if o.R == nil {
		o.R = &weaponModelR{
			WeaponSkins: related,
		}
	} else {
		o.R.WeaponSkins = append(o.R.WeaponSkins, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &weaponSkinR{
				WeaponModel: o,
			}
		} else {
			rel.R.WeaponModel = o
		}
	}
	return nil
}

// AddWeapons adds the given related objects to the existing relationships
// of the weapon_model, optionally inserting them as new records.
// Appends related to o.R.Weapons.
// Sets related.R.WeaponModel appropriately.
func (o *WeaponModel) AddWeapons(exec boil.Executor, insert bool, related ...*Weapon) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.WeaponModelID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"weapons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"weapon_model_id"}),
				strmangle.WhereClause("\"", "\"", 2, weaponPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.WeaponModelID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &weaponModelR{
			Weapons: related,
		}
	} else {
		o.R.Weapons = append(o.R.Weapons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &weaponR{
				WeaponModel: o,
			}
		} else {
			rel.R.WeaponModel = o
		}
	}
	return nil
}

// SetWeapons removes all previously related items of the
// weapon_model replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.WeaponModel's Weapons accordingly.
// Replaces o.R.Weapons with related.
// Sets related.R.WeaponModel's Weapons accordingly.
func (o *WeaponModel) SetWeapons(exec boil.Executor, insert bool, related ...*Weapon) error {
	query := "update \"weapons\" set \"weapon_model_id\" = null where \"weapon_model_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Weapons {
			queries.SetScanner(&rel.WeaponModelID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.WeaponModel = nil
		}

		o.R.Weapons = nil
	}
	return o.AddWeapons(exec, insert, related...)
}

// RemoveWeapons relationships from objects passed in.
// Removes related items from R.Weapons (uses pointer comparison, removal does not keep order)
// Sets related.R.WeaponModel.
func (o *WeaponModel) RemoveWeapons(exec boil.Executor, related ...*Weapon) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.WeaponModelID, nil)
		if rel.R != nil {
			rel.R.WeaponModel = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("weapon_model_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Weapons {
			if rel != ri {
				continue
			}

			ln := len(o.R.Weapons)
			if ln > 1 && i < ln-1 {
				o.R.Weapons[i] = o.R.Weapons[ln-1]
			}
			o.R.Weapons = o.R.Weapons[:ln-1]
			break
		}
	}

	return nil
}

// WeaponModels retrieves all the records using an executor.
func WeaponModels(mods ...qm.QueryMod) weaponModelQuery {
	mods = append(mods, qm.From("\"weapon_models\""))
	return weaponModelQuery{NewQuery(mods...)}
}

// FindWeaponModel retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWeaponModel(exec boil.Executor, iD string, selectCols ...string) (*WeaponModel, error) {
	weaponModelObj := &WeaponModel{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"weapon_models\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, weaponModelObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from weapon_models")
	}

	if err = weaponModelObj.doAfterSelectHooks(exec); err != nil {
		return weaponModelObj, err
	}

	return weaponModelObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WeaponModel) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no weapon_models provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(weaponModelColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	weaponModelInsertCacheMut.RLock()
	cache, cached := weaponModelInsertCache[key]
	weaponModelInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			weaponModelAllColumns,
			weaponModelColumnsWithDefault,
			weaponModelColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(weaponModelType, weaponModelMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(weaponModelType, weaponModelMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"weapon_models\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"weapon_models\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into weapon_models")
	}

	if !cached {
		weaponModelInsertCacheMut.Lock()
		weaponModelInsertCache[key] = cache
		weaponModelInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the WeaponModel.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WeaponModel) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	weaponModelUpdateCacheMut.RLock()
	cache, cached := weaponModelUpdateCache[key]
	weaponModelUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			weaponModelAllColumns,
			weaponModelPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update weapon_models, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"weapon_models\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, weaponModelPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(weaponModelType, weaponModelMapping, append(wl, weaponModelPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update weapon_models row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for weapon_models")
	}

	if !cached {
		weaponModelUpdateCacheMut.Lock()
		weaponModelUpdateCache[key] = cache
		weaponModelUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q weaponModelQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for weapon_models")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for weapon_models")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WeaponModelSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), weaponModelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"weapon_models\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, weaponModelPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in weaponModel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all weaponModel")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WeaponModel) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no weapon_models provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(weaponModelColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	weaponModelUpsertCacheMut.RLock()
	cache, cached := weaponModelUpsertCache[key]
	weaponModelUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			weaponModelAllColumns,
			weaponModelColumnsWithDefault,
			weaponModelColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			weaponModelAllColumns,
			weaponModelPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert weapon_models, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(weaponModelPrimaryKeyColumns))
			copy(conflict, weaponModelPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"weapon_models\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(weaponModelType, weaponModelMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(weaponModelType, weaponModelMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert weapon_models")
	}

	if !cached {
		weaponModelUpsertCacheMut.Lock()
		weaponModelUpsertCache[key] = cache
		weaponModelUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single WeaponModel record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WeaponModel) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no WeaponModel provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), weaponModelPrimaryKeyMapping)
	sql := "DELETE FROM \"weapon_models\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from weapon_models")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for weapon_models")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q weaponModelQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no weaponModelQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from weapon_models")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for weapon_models")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WeaponModelSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(weaponModelBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), weaponModelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"weapon_models\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, weaponModelPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from weaponModel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for weapon_models")
	}

	if len(weaponModelAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WeaponModel) Reload(exec boil.Executor) error {
	ret, err := FindWeaponModel(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WeaponModelSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WeaponModelSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), weaponModelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"weapon_models\".* FROM \"weapon_models\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, weaponModelPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in WeaponModelSlice")
	}

	*o = slice

	return nil
}

// WeaponModelExists checks if the WeaponModel row exists.
func WeaponModelExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"weapon_models\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if weapon_models exists")
	}

	return exists, nil
}
