// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TemplateChassis is an object representing the database table.
type TemplateChassis struct {
	ID                 string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Label              string    `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	Slug               string    `boiler:"slug" boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	ShieldRechargeRate int       `boiler:"shield_recharge_rate" boil:"shield_recharge_rate" json:"shieldRechargeRate" toml:"shieldRechargeRate" yaml:"shieldRechargeRate"`
	HP                 int       `boiler:"hp" boil:"hp" json:"hp" toml:"hp" yaml:"hp"`
	BrandID            string    `boiler:"brand_id" boil:"brand_id" json:"brandID" toml:"brandID" yaml:"brandID"`
	WeaponHardpoints   int       `boiler:"weapon_hardpoints" boil:"weapon_hardpoints" json:"weaponHardpoints" toml:"weaponHardpoints" yaml:"weaponHardpoints"`
	TurretHardpoints   int       `boiler:"turret_hardpoints" boil:"turret_hardpoints" json:"turretHardpoints" toml:"turretHardpoints" yaml:"turretHardpoints"`
	UtilitySlots       int       `boiler:"utility_slots" boil:"utility_slots" json:"utilitySlots" toml:"utilitySlots" yaml:"utilitySlots"`
	Speed              int       `boiler:"speed" boil:"speed" json:"speed" toml:"speed" yaml:"speed"`
	MaxHitpoints       int       `boiler:"max_hitpoints" boil:"max_hitpoints" json:"maxHitpoints" toml:"maxHitpoints" yaml:"maxHitpoints"`
	MaxShield          int       `boiler:"max_shield" boil:"max_shield" json:"maxShield" toml:"maxShield" yaml:"maxShield"`
	DeletedAt          null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deletedAt,omitempty" toml:"deletedAt" yaml:"deletedAt,omitempty"`
	UpdatedAt          time.Time `boiler:"updated_at" boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	CreatedAt          time.Time `boiler:"created_at" boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`

	R *templateChassisR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L templateChassisL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TemplateChassisColumns = struct {
	ID                 string
	Label              string
	Slug               string
	ShieldRechargeRate string
	HP                 string
	BrandID            string
	WeaponHardpoints   string
	TurretHardpoints   string
	UtilitySlots       string
	Speed              string
	MaxHitpoints       string
	MaxShield          string
	DeletedAt          string
	UpdatedAt          string
	CreatedAt          string
}{
	ID:                 "id",
	Label:              "label",
	Slug:               "slug",
	ShieldRechargeRate: "shield_recharge_rate",
	HP:                 "hp",
	BrandID:            "brand_id",
	WeaponHardpoints:   "weapon_hardpoints",
	TurretHardpoints:   "turret_hardpoints",
	UtilitySlots:       "utility_slots",
	Speed:              "speed",
	MaxHitpoints:       "max_hitpoints",
	MaxShield:          "max_shield",
	DeletedAt:          "deleted_at",
	UpdatedAt:          "updated_at",
	CreatedAt:          "created_at",
}

var TemplateChassisTableColumns = struct {
	ID                 string
	Label              string
	Slug               string
	ShieldRechargeRate string
	HP                 string
	BrandID            string
	WeaponHardpoints   string
	TurretHardpoints   string
	UtilitySlots       string
	Speed              string
	MaxHitpoints       string
	MaxShield          string
	DeletedAt          string
	UpdatedAt          string
	CreatedAt          string
}{
	ID:                 "template_chassis.id",
	Label:              "template_chassis.label",
	Slug:               "template_chassis.slug",
	ShieldRechargeRate: "template_chassis.shield_recharge_rate",
	HP:                 "template_chassis.hp",
	BrandID:            "template_chassis.brand_id",
	WeaponHardpoints:   "template_chassis.weapon_hardpoints",
	TurretHardpoints:   "template_chassis.turret_hardpoints",
	UtilitySlots:       "template_chassis.utility_slots",
	Speed:              "template_chassis.speed",
	MaxHitpoints:       "template_chassis.max_hitpoints",
	MaxShield:          "template_chassis.max_shield",
	DeletedAt:          "template_chassis.deleted_at",
	UpdatedAt:          "template_chassis.updated_at",
	CreatedAt:          "template_chassis.created_at",
}

// Generated where

var TemplateChassisWhere = struct {
	ID                 whereHelperstring
	Label              whereHelperstring
	Slug               whereHelperstring
	ShieldRechargeRate whereHelperint
	HP                 whereHelperint
	BrandID            whereHelperstring
	WeaponHardpoints   whereHelperint
	TurretHardpoints   whereHelperint
	UtilitySlots       whereHelperint
	Speed              whereHelperint
	MaxHitpoints       whereHelperint
	MaxShield          whereHelperint
	DeletedAt          whereHelpernull_Time
	UpdatedAt          whereHelpertime_Time
	CreatedAt          whereHelpertime_Time
}{
	ID:                 whereHelperstring{field: "\"template_chassis\".\"id\""},
	Label:              whereHelperstring{field: "\"template_chassis\".\"label\""},
	Slug:               whereHelperstring{field: "\"template_chassis\".\"slug\""},
	ShieldRechargeRate: whereHelperint{field: "\"template_chassis\".\"shield_recharge_rate\""},
	HP:                 whereHelperint{field: "\"template_chassis\".\"hp\""},
	BrandID:            whereHelperstring{field: "\"template_chassis\".\"brand_id\""},
	WeaponHardpoints:   whereHelperint{field: "\"template_chassis\".\"weapon_hardpoints\""},
	TurretHardpoints:   whereHelperint{field: "\"template_chassis\".\"turret_hardpoints\""},
	UtilitySlots:       whereHelperint{field: "\"template_chassis\".\"utility_slots\""},
	Speed:              whereHelperint{field: "\"template_chassis\".\"speed\""},
	MaxHitpoints:       whereHelperint{field: "\"template_chassis\".\"max_hitpoints\""},
	MaxShield:          whereHelperint{field: "\"template_chassis\".\"max_shield\""},
	DeletedAt:          whereHelpernull_Time{field: "\"template_chassis\".\"deleted_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"template_chassis\".\"updated_at\""},
	CreatedAt:          whereHelpertime_Time{field: "\"template_chassis\".\"created_at\""},
}

// TemplateChassisRels is where relationship names are stored.
var TemplateChassisRels = struct {
	Brand     string
	Templates string
}{
	Brand:     "Brand",
	Templates: "Templates",
}

// templateChassisR is where relationships are stored.
type templateChassisR struct {
	Brand     *Brand        `boiler:"Brand" boil:"Brand" json:"Brand" toml:"Brand" yaml:"Brand"`
	Templates TemplateSlice `boiler:"Templates" boil:"Templates" json:"Templates" toml:"Templates" yaml:"Templates"`
}

// NewStruct creates a new relationship struct
func (*templateChassisR) NewStruct() *templateChassisR {
	return &templateChassisR{}
}

// templateChassisL is where Load methods for each relationship are stored.
type templateChassisL struct{}

var (
	templateChassisAllColumns            = []string{"id", "label", "slug", "shield_recharge_rate", "hp", "brand_id", "weapon_hardpoints", "turret_hardpoints", "utility_slots", "speed", "max_hitpoints", "max_shield", "deleted_at", "updated_at", "created_at"}
	templateChassisColumnsWithoutDefault = []string{"label", "slug", "shield_recharge_rate", "hp", "brand_id", "weapon_hardpoints", "turret_hardpoints", "utility_slots", "speed", "max_hitpoints", "max_shield"}
	templateChassisColumnsWithDefault    = []string{"id", "deleted_at", "updated_at", "created_at"}
	templateChassisPrimaryKeyColumns     = []string{"id"}
	templateChassisGeneratedColumns      = []string{}
)

type (
	// TemplateChassisSlice is an alias for a slice of pointers to TemplateChassis.
	// This should almost always be used instead of []TemplateChassis.
	TemplateChassisSlice []*TemplateChassis
	// TemplateChassisHook is the signature for custom TemplateChassis hook methods
	TemplateChassisHook func(boil.Executor, *TemplateChassis) error

	templateChassisQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	templateChassisType                 = reflect.TypeOf(&TemplateChassis{})
	templateChassisMapping              = queries.MakeStructMapping(templateChassisType)
	templateChassisPrimaryKeyMapping, _ = queries.BindMapping(templateChassisType, templateChassisMapping, templateChassisPrimaryKeyColumns)
	templateChassisInsertCacheMut       sync.RWMutex
	templateChassisInsertCache          = make(map[string]insertCache)
	templateChassisUpdateCacheMut       sync.RWMutex
	templateChassisUpdateCache          = make(map[string]updateCache)
	templateChassisUpsertCacheMut       sync.RWMutex
	templateChassisUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var templateChassisAfterSelectHooks []TemplateChassisHook

var templateChassisBeforeInsertHooks []TemplateChassisHook
var templateChassisAfterInsertHooks []TemplateChassisHook

var templateChassisBeforeUpdateHooks []TemplateChassisHook
var templateChassisAfterUpdateHooks []TemplateChassisHook

var templateChassisBeforeDeleteHooks []TemplateChassisHook
var templateChassisAfterDeleteHooks []TemplateChassisHook

var templateChassisBeforeUpsertHooks []TemplateChassisHook
var templateChassisAfterUpsertHooks []TemplateChassisHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TemplateChassis) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range templateChassisAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TemplateChassis) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range templateChassisBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TemplateChassis) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range templateChassisAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TemplateChassis) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range templateChassisBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TemplateChassis) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range templateChassisAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TemplateChassis) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range templateChassisBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TemplateChassis) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range templateChassisAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TemplateChassis) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range templateChassisBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TemplateChassis) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range templateChassisAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTemplateChassisHook registers your hook function for all future operations.
func AddTemplateChassisHook(hookPoint boil.HookPoint, templateChassisHook TemplateChassisHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		templateChassisAfterSelectHooks = append(templateChassisAfterSelectHooks, templateChassisHook)
	case boil.BeforeInsertHook:
		templateChassisBeforeInsertHooks = append(templateChassisBeforeInsertHooks, templateChassisHook)
	case boil.AfterInsertHook:
		templateChassisAfterInsertHooks = append(templateChassisAfterInsertHooks, templateChassisHook)
	case boil.BeforeUpdateHook:
		templateChassisBeforeUpdateHooks = append(templateChassisBeforeUpdateHooks, templateChassisHook)
	case boil.AfterUpdateHook:
		templateChassisAfterUpdateHooks = append(templateChassisAfterUpdateHooks, templateChassisHook)
	case boil.BeforeDeleteHook:
		templateChassisBeforeDeleteHooks = append(templateChassisBeforeDeleteHooks, templateChassisHook)
	case boil.AfterDeleteHook:
		templateChassisAfterDeleteHooks = append(templateChassisAfterDeleteHooks, templateChassisHook)
	case boil.BeforeUpsertHook:
		templateChassisBeforeUpsertHooks = append(templateChassisBeforeUpsertHooks, templateChassisHook)
	case boil.AfterUpsertHook:
		templateChassisAfterUpsertHooks = append(templateChassisAfterUpsertHooks, templateChassisHook)
	}
}

// One returns a single templateChassis record from the query.
func (q templateChassisQuery) One(exec boil.Executor) (*TemplateChassis, error) {
	o := &TemplateChassis{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for template_chassis")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TemplateChassis records from the query.
func (q templateChassisQuery) All(exec boil.Executor) (TemplateChassisSlice, error) {
	var o []*TemplateChassis

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to TemplateChassis slice")
	}

	if len(templateChassisAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TemplateChassis records in the query.
func (q templateChassisQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count template_chassis rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q templateChassisQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if template_chassis exists")
	}

	return count > 0, nil
}

// Brand pointed to by the foreign key.
func (o *TemplateChassis) Brand(mods ...qm.QueryMod) brandQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BrandID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Brands(queryMods...)
	queries.SetFrom(query.Query, "\"brands\"")

	return query
}

// Templates retrieves all the template's Templates with an executor.
func (o *TemplateChassis) Templates(mods ...qm.QueryMod) templateQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"templates\".\"template_chassis_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"templates\".\"deleted_at\""),
	)

	query := Templates(queryMods...)
	queries.SetFrom(query.Query, "\"templates\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"templates\".*"})
	}

	return query
}

// LoadBrand allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (templateChassisL) LoadBrand(e boil.Executor, singular bool, maybeTemplateChassis interface{}, mods queries.Applicator) error {
	var slice []*TemplateChassis
	var object *TemplateChassis

	if singular {
		object = maybeTemplateChassis.(*TemplateChassis)
	} else {
		slice = *maybeTemplateChassis.(*[]*TemplateChassis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &templateChassisR{}
		}
		args = append(args, object.BrandID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &templateChassisR{}
			}

			for _, a := range args {
				if a == obj.BrandID {
					continue Outer
				}
			}

			args = append(args, obj.BrandID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`brands`),
		qm.WhereIn(`brands.id in ?`, args...),
		qmhelper.WhereIsNull(`brands.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Brand")
	}

	var resultSlice []*Brand
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Brand")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for brands")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for brands")
	}

	if len(templateChassisAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Brand = foreign
		if foreign.R == nil {
			foreign.R = &brandR{}
		}
		foreign.R.TemplateChasses = append(foreign.R.TemplateChasses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BrandID == foreign.ID {
				local.R.Brand = foreign
				if foreign.R == nil {
					foreign.R = &brandR{}
				}
				foreign.R.TemplateChasses = append(foreign.R.TemplateChasses, local)
				break
			}
		}
	}

	return nil
}

// LoadTemplates allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (templateChassisL) LoadTemplates(e boil.Executor, singular bool, maybeTemplateChassis interface{}, mods queries.Applicator) error {
	var slice []*TemplateChassis
	var object *TemplateChassis

	if singular {
		object = maybeTemplateChassis.(*TemplateChassis)
	} else {
		slice = *maybeTemplateChassis.(*[]*TemplateChassis)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &templateChassisR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &templateChassisR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`templates`),
		qm.WhereIn(`templates.template_chassis_id in ?`, args...),
		qmhelper.WhereIsNull(`templates.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load templates")
	}

	var resultSlice []*Template
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice templates")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on templates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for templates")
	}

	if len(templateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Templates = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &templateR{}
			}
			foreign.R.TemplateChassis = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TemplateChassisID {
				local.R.Templates = append(local.R.Templates, foreign)
				if foreign.R == nil {
					foreign.R = &templateR{}
				}
				foreign.R.TemplateChassis = local
				break
			}
		}
	}

	return nil
}

// SetBrand of the templateChassis to the related item.
// Sets o.R.Brand to related.
// Adds o to related.R.TemplateChasses.
func (o *TemplateChassis) SetBrand(exec boil.Executor, insert bool, related *Brand) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"template_chassis\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"brand_id"}),
		strmangle.WhereClause("\"", "\"", 2, templateChassisPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BrandID = related.ID
	if o.R == nil {
		o.R = &templateChassisR{
			Brand: related,
		}
	} else {
		o.R.Brand = related
	}

	if related.R == nil {
		related.R = &brandR{
			TemplateChasses: TemplateChassisSlice{o},
		}
	} else {
		related.R.TemplateChasses = append(related.R.TemplateChasses, o)
	}

	return nil
}

// AddTemplates adds the given related objects to the existing relationships
// of the template_chassis, optionally inserting them as new records.
// Appends related to o.R.Templates.
// Sets related.R.TemplateChassis appropriately.
func (o *TemplateChassis) AddTemplates(exec boil.Executor, insert bool, related ...*Template) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TemplateChassisID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"templates\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"template_chassis_id"}),
				strmangle.WhereClause("\"", "\"", 2, templatePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TemplateChassisID = o.ID
		}
	}

	if o.R == nil {
		o.R = &templateChassisR{
			Templates: related,
		}
	} else {
		o.R.Templates = append(o.R.Templates, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &templateR{
				TemplateChassis: o,
			}
		} else {
			rel.R.TemplateChassis = o
		}
	}
	return nil
}

// TemplateChasses retrieves all the records using an executor.
func TemplateChasses(mods ...qm.QueryMod) templateChassisQuery {
	mods = append(mods, qm.From("\"template_chassis\""), qmhelper.WhereIsNull("\"template_chassis\".\"deleted_at\""))
	return templateChassisQuery{NewQuery(mods...)}
}

// FindTemplateChassis retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTemplateChassis(exec boil.Executor, iD string, selectCols ...string) (*TemplateChassis, error) {
	templateChassisObj := &TemplateChassis{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"template_chassis\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, templateChassisObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from template_chassis")
	}

	if err = templateChassisObj.doAfterSelectHooks(exec); err != nil {
		return templateChassisObj, err
	}

	return templateChassisObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TemplateChassis) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no template_chassis provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(templateChassisColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	templateChassisInsertCacheMut.RLock()
	cache, cached := templateChassisInsertCache[key]
	templateChassisInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			templateChassisAllColumns,
			templateChassisColumnsWithDefault,
			templateChassisColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(templateChassisType, templateChassisMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(templateChassisType, templateChassisMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"template_chassis\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"template_chassis\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into template_chassis")
	}

	if !cached {
		templateChassisInsertCacheMut.Lock()
		templateChassisInsertCache[key] = cache
		templateChassisInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the TemplateChassis.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TemplateChassis) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	templateChassisUpdateCacheMut.RLock()
	cache, cached := templateChassisUpdateCache[key]
	templateChassisUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			templateChassisAllColumns,
			templateChassisPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update template_chassis, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"template_chassis\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, templateChassisPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(templateChassisType, templateChassisMapping, append(wl, templateChassisPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update template_chassis row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for template_chassis")
	}

	if !cached {
		templateChassisUpdateCacheMut.Lock()
		templateChassisUpdateCache[key] = cache
		templateChassisUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q templateChassisQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for template_chassis")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for template_chassis")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TemplateChassisSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), templateChassisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"template_chassis\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, templateChassisPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in templateChassis slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all templateChassis")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TemplateChassis) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no template_chassis provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(templateChassisColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	templateChassisUpsertCacheMut.RLock()
	cache, cached := templateChassisUpsertCache[key]
	templateChassisUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			templateChassisAllColumns,
			templateChassisColumnsWithDefault,
			templateChassisColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			templateChassisAllColumns,
			templateChassisPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert template_chassis, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(templateChassisPrimaryKeyColumns))
			copy(conflict, templateChassisPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"template_chassis\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(templateChassisType, templateChassisMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(templateChassisType, templateChassisMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert template_chassis")
	}

	if !cached {
		templateChassisUpsertCacheMut.Lock()
		templateChassisUpsertCache[key] = cache
		templateChassisUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single TemplateChassis record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TemplateChassis) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no TemplateChassis provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), templateChassisPrimaryKeyMapping)
		sql = "DELETE FROM \"template_chassis\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"template_chassis\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(templateChassisType, templateChassisMapping, append(wl, templateChassisPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from template_chassis")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for template_chassis")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q templateChassisQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no templateChassisQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from template_chassis")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for template_chassis")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TemplateChassisSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(templateChassisBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), templateChassisPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"template_chassis\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, templateChassisPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), templateChassisPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"template_chassis\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, templateChassisPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from templateChassis slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for template_chassis")
	}

	if len(templateChassisAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TemplateChassis) Reload(exec boil.Executor) error {
	ret, err := FindTemplateChassis(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TemplateChassisSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TemplateChassisSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), templateChassisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"template_chassis\".* FROM \"template_chassis\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, templateChassisPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in TemplateChassisSlice")
	}

	*o = slice

	return nil
}

// TemplateChassisExists checks if the TemplateChassis row exists.
func TemplateChassisExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"template_chassis\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if template_chassis exists")
	}

	return exists, nil
}
