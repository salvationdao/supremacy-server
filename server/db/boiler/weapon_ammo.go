// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// WeaponAmmo is an object representing the database table.
type WeaponAmmo struct {
	BlueprintAmmoID string    `boiler:"blueprint_ammo_id" boil:"blueprint_ammo_id" json:"blueprint_ammo_id" toml:"blueprint_ammo_id" yaml:"blueprint_ammo_id"`
	WeaponID        string    `boiler:"weapon_id" boil:"weapon_id" json:"weapon_id" toml:"weapon_id" yaml:"weapon_id"`
	Count           int       `boiler:"count" boil:"count" json:"count" toml:"count" yaml:"count"`
	CreatedAt       time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *weaponAmmoR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L weaponAmmoL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WeaponAmmoColumns = struct {
	BlueprintAmmoID string
	WeaponID        string
	Count           string
	CreatedAt       string
}{
	BlueprintAmmoID: "blueprint_ammo_id",
	WeaponID:        "weapon_id",
	Count:           "count",
	CreatedAt:       "created_at",
}

var WeaponAmmoTableColumns = struct {
	BlueprintAmmoID string
	WeaponID        string
	Count           string
	CreatedAt       string
}{
	BlueprintAmmoID: "weapon_ammo.blueprint_ammo_id",
	WeaponID:        "weapon_ammo.weapon_id",
	Count:           "weapon_ammo.count",
	CreatedAt:       "weapon_ammo.created_at",
}

// Generated where

var WeaponAmmoWhere = struct {
	BlueprintAmmoID whereHelperstring
	WeaponID        whereHelperstring
	Count           whereHelperint
	CreatedAt       whereHelpertime_Time
}{
	BlueprintAmmoID: whereHelperstring{field: "\"weapon_ammo\".\"blueprint_ammo_id\""},
	WeaponID:        whereHelperstring{field: "\"weapon_ammo\".\"weapon_id\""},
	Count:           whereHelperint{field: "\"weapon_ammo\".\"count\""},
	CreatedAt:       whereHelpertime_Time{field: "\"weapon_ammo\".\"created_at\""},
}

// WeaponAmmoRels is where relationship names are stored.
var WeaponAmmoRels = struct {
	BlueprintAmmo string
	Weapon        string
}{
	BlueprintAmmo: "BlueprintAmmo",
	Weapon:        "Weapon",
}

// weaponAmmoR is where relationships are stored.
type weaponAmmoR struct {
	BlueprintAmmo *BlueprintAmmo `boiler:"BlueprintAmmo" boil:"BlueprintAmmo" json:"BlueprintAmmo" toml:"BlueprintAmmo" yaml:"BlueprintAmmo"`
	Weapon        *Weapon        `boiler:"Weapon" boil:"Weapon" json:"Weapon" toml:"Weapon" yaml:"Weapon"`
}

// NewStruct creates a new relationship struct
func (*weaponAmmoR) NewStruct() *weaponAmmoR {
	return &weaponAmmoR{}
}

// weaponAmmoL is where Load methods for each relationship are stored.
type weaponAmmoL struct{}

var (
	weaponAmmoAllColumns            = []string{"blueprint_ammo_id", "weapon_id", "count", "created_at"}
	weaponAmmoColumnsWithoutDefault = []string{"blueprint_ammo_id", "weapon_id"}
	weaponAmmoColumnsWithDefault    = []string{"count", "created_at"}
	weaponAmmoPrimaryKeyColumns     = []string{"blueprint_ammo_id", "weapon_id"}
	weaponAmmoGeneratedColumns      = []string{}
)

type (
	// WeaponAmmoSlice is an alias for a slice of pointers to WeaponAmmo.
	// This should almost always be used instead of []WeaponAmmo.
	WeaponAmmoSlice []*WeaponAmmo
	// WeaponAmmoHook is the signature for custom WeaponAmmo hook methods
	WeaponAmmoHook func(boil.Executor, *WeaponAmmo) error

	weaponAmmoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	weaponAmmoType                 = reflect.TypeOf(&WeaponAmmo{})
	weaponAmmoMapping              = queries.MakeStructMapping(weaponAmmoType)
	weaponAmmoPrimaryKeyMapping, _ = queries.BindMapping(weaponAmmoType, weaponAmmoMapping, weaponAmmoPrimaryKeyColumns)
	weaponAmmoInsertCacheMut       sync.RWMutex
	weaponAmmoInsertCache          = make(map[string]insertCache)
	weaponAmmoUpdateCacheMut       sync.RWMutex
	weaponAmmoUpdateCache          = make(map[string]updateCache)
	weaponAmmoUpsertCacheMut       sync.RWMutex
	weaponAmmoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var weaponAmmoAfterSelectHooks []WeaponAmmoHook

var weaponAmmoBeforeInsertHooks []WeaponAmmoHook
var weaponAmmoAfterInsertHooks []WeaponAmmoHook

var weaponAmmoBeforeUpdateHooks []WeaponAmmoHook
var weaponAmmoAfterUpdateHooks []WeaponAmmoHook

var weaponAmmoBeforeDeleteHooks []WeaponAmmoHook
var weaponAmmoAfterDeleteHooks []WeaponAmmoHook

var weaponAmmoBeforeUpsertHooks []WeaponAmmoHook
var weaponAmmoAfterUpsertHooks []WeaponAmmoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *WeaponAmmo) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponAmmoAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *WeaponAmmo) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponAmmoBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *WeaponAmmo) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponAmmoAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *WeaponAmmo) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponAmmoBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *WeaponAmmo) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponAmmoAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *WeaponAmmo) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponAmmoBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *WeaponAmmo) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponAmmoAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *WeaponAmmo) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponAmmoBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *WeaponAmmo) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range weaponAmmoAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWeaponAmmoHook registers your hook function for all future operations.
func AddWeaponAmmoHook(hookPoint boil.HookPoint, weaponAmmoHook WeaponAmmoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		weaponAmmoAfterSelectHooks = append(weaponAmmoAfterSelectHooks, weaponAmmoHook)
	case boil.BeforeInsertHook:
		weaponAmmoBeforeInsertHooks = append(weaponAmmoBeforeInsertHooks, weaponAmmoHook)
	case boil.AfterInsertHook:
		weaponAmmoAfterInsertHooks = append(weaponAmmoAfterInsertHooks, weaponAmmoHook)
	case boil.BeforeUpdateHook:
		weaponAmmoBeforeUpdateHooks = append(weaponAmmoBeforeUpdateHooks, weaponAmmoHook)
	case boil.AfterUpdateHook:
		weaponAmmoAfterUpdateHooks = append(weaponAmmoAfterUpdateHooks, weaponAmmoHook)
	case boil.BeforeDeleteHook:
		weaponAmmoBeforeDeleteHooks = append(weaponAmmoBeforeDeleteHooks, weaponAmmoHook)
	case boil.AfterDeleteHook:
		weaponAmmoAfterDeleteHooks = append(weaponAmmoAfterDeleteHooks, weaponAmmoHook)
	case boil.BeforeUpsertHook:
		weaponAmmoBeforeUpsertHooks = append(weaponAmmoBeforeUpsertHooks, weaponAmmoHook)
	case boil.AfterUpsertHook:
		weaponAmmoAfterUpsertHooks = append(weaponAmmoAfterUpsertHooks, weaponAmmoHook)
	}
}

// One returns a single weaponAmmo record from the query.
func (q weaponAmmoQuery) One(exec boil.Executor) (*WeaponAmmo, error) {
	o := &WeaponAmmo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for weapon_ammo")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all WeaponAmmo records from the query.
func (q weaponAmmoQuery) All(exec boil.Executor) (WeaponAmmoSlice, error) {
	var o []*WeaponAmmo

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to WeaponAmmo slice")
	}

	if len(weaponAmmoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all WeaponAmmo records in the query.
func (q weaponAmmoQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count weapon_ammo rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q weaponAmmoQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if weapon_ammo exists")
	}

	return count > 0, nil
}

// BlueprintAmmo pointed to by the foreign key.
func (o *WeaponAmmo) BlueprintAmmo(mods ...qm.QueryMod) blueprintAmmoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BlueprintAmmoID),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintAmmos(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_ammo\"")

	return query
}

// Weapon pointed to by the foreign key.
func (o *WeaponAmmo) Weapon(mods ...qm.QueryMod) weaponQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.WeaponID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Weapons(queryMods...)
	queries.SetFrom(query.Query, "\"weapons\"")

	return query
}

// LoadBlueprintAmmo allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (weaponAmmoL) LoadBlueprintAmmo(e boil.Executor, singular bool, maybeWeaponAmmo interface{}, mods queries.Applicator) error {
	var slice []*WeaponAmmo
	var object *WeaponAmmo

	if singular {
		object = maybeWeaponAmmo.(*WeaponAmmo)
	} else {
		slice = *maybeWeaponAmmo.(*[]*WeaponAmmo)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &weaponAmmoR{}
		}
		args = append(args, object.BlueprintAmmoID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &weaponAmmoR{}
			}

			for _, a := range args {
				if a == obj.BlueprintAmmoID {
					continue Outer
				}
			}

			args = append(args, obj.BlueprintAmmoID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_ammo`),
		qm.WhereIn(`blueprint_ammo.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintAmmo")
	}

	var resultSlice []*BlueprintAmmo
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintAmmo")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_ammo")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_ammo")
	}

	if len(weaponAmmoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BlueprintAmmo = foreign
		if foreign.R == nil {
			foreign.R = &blueprintAmmoR{}
		}
		foreign.R.WeaponAmmos = append(foreign.R.WeaponAmmos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlueprintAmmoID == foreign.ID {
				local.R.BlueprintAmmo = foreign
				if foreign.R == nil {
					foreign.R = &blueprintAmmoR{}
				}
				foreign.R.WeaponAmmos = append(foreign.R.WeaponAmmos, local)
				break
			}
		}
	}

	return nil
}

// LoadWeapon allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (weaponAmmoL) LoadWeapon(e boil.Executor, singular bool, maybeWeaponAmmo interface{}, mods queries.Applicator) error {
	var slice []*WeaponAmmo
	var object *WeaponAmmo

	if singular {
		object = maybeWeaponAmmo.(*WeaponAmmo)
	} else {
		slice = *maybeWeaponAmmo.(*[]*WeaponAmmo)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &weaponAmmoR{}
		}
		args = append(args, object.WeaponID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &weaponAmmoR{}
			}

			for _, a := range args {
				if a == obj.WeaponID {
					continue Outer
				}
			}

			args = append(args, obj.WeaponID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`weapons`),
		qm.WhereIn(`weapons.id in ?`, args...),
		qmhelper.WhereIsNull(`weapons.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Weapon")
	}

	var resultSlice []*Weapon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Weapon")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for weapons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for weapons")
	}

	if len(weaponAmmoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Weapon = foreign
		if foreign.R == nil {
			foreign.R = &weaponR{}
		}
		foreign.R.WeaponAmmos = append(foreign.R.WeaponAmmos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WeaponID == foreign.ID {
				local.R.Weapon = foreign
				if foreign.R == nil {
					foreign.R = &weaponR{}
				}
				foreign.R.WeaponAmmos = append(foreign.R.WeaponAmmos, local)
				break
			}
		}
	}

	return nil
}

// SetBlueprintAmmo of the weaponAmmo to the related item.
// Sets o.R.BlueprintAmmo to related.
// Adds o to related.R.WeaponAmmos.
func (o *WeaponAmmo) SetBlueprintAmmo(exec boil.Executor, insert bool, related *BlueprintAmmo) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"weapon_ammo\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_ammo_id"}),
		strmangle.WhereClause("\"", "\"", 2, weaponAmmoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.BlueprintAmmoID, o.WeaponID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlueprintAmmoID = related.ID
	if o.R == nil {
		o.R = &weaponAmmoR{
			BlueprintAmmo: related,
		}
	} else {
		o.R.BlueprintAmmo = related
	}

	if related.R == nil {
		related.R = &blueprintAmmoR{
			WeaponAmmos: WeaponAmmoSlice{o},
		}
	} else {
		related.R.WeaponAmmos = append(related.R.WeaponAmmos, o)
	}

	return nil
}

// SetWeapon of the weaponAmmo to the related item.
// Sets o.R.Weapon to related.
// Adds o to related.R.WeaponAmmos.
func (o *WeaponAmmo) SetWeapon(exec boil.Executor, insert bool, related *Weapon) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"weapon_ammo\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"weapon_id"}),
		strmangle.WhereClause("\"", "\"", 2, weaponAmmoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.BlueprintAmmoID, o.WeaponID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.WeaponID = related.ID
	if o.R == nil {
		o.R = &weaponAmmoR{
			Weapon: related,
		}
	} else {
		o.R.Weapon = related
	}

	if related.R == nil {
		related.R = &weaponR{
			WeaponAmmos: WeaponAmmoSlice{o},
		}
	} else {
		related.R.WeaponAmmos = append(related.R.WeaponAmmos, o)
	}

	return nil
}

// WeaponAmmos retrieves all the records using an executor.
func WeaponAmmos(mods ...qm.QueryMod) weaponAmmoQuery {
	mods = append(mods, qm.From("\"weapon_ammo\""))
	return weaponAmmoQuery{NewQuery(mods...)}
}

// FindWeaponAmmo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWeaponAmmo(exec boil.Executor, blueprintAmmoID string, weaponID string, selectCols ...string) (*WeaponAmmo, error) {
	weaponAmmoObj := &WeaponAmmo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"weapon_ammo\" where \"blueprint_ammo_id\"=$1 AND \"weapon_id\"=$2", sel,
	)

	q := queries.Raw(query, blueprintAmmoID, weaponID)

	err := q.Bind(nil, exec, weaponAmmoObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from weapon_ammo")
	}

	if err = weaponAmmoObj.doAfterSelectHooks(exec); err != nil {
		return weaponAmmoObj, err
	}

	return weaponAmmoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WeaponAmmo) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no weapon_ammo provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(weaponAmmoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	weaponAmmoInsertCacheMut.RLock()
	cache, cached := weaponAmmoInsertCache[key]
	weaponAmmoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			weaponAmmoAllColumns,
			weaponAmmoColumnsWithDefault,
			weaponAmmoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(weaponAmmoType, weaponAmmoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(weaponAmmoType, weaponAmmoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"weapon_ammo\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"weapon_ammo\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into weapon_ammo")
	}

	if !cached {
		weaponAmmoInsertCacheMut.Lock()
		weaponAmmoInsertCache[key] = cache
		weaponAmmoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the WeaponAmmo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WeaponAmmo) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	weaponAmmoUpdateCacheMut.RLock()
	cache, cached := weaponAmmoUpdateCache[key]
	weaponAmmoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			weaponAmmoAllColumns,
			weaponAmmoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update weapon_ammo, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"weapon_ammo\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, weaponAmmoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(weaponAmmoType, weaponAmmoMapping, append(wl, weaponAmmoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update weapon_ammo row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for weapon_ammo")
	}

	if !cached {
		weaponAmmoUpdateCacheMut.Lock()
		weaponAmmoUpdateCache[key] = cache
		weaponAmmoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q weaponAmmoQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for weapon_ammo")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for weapon_ammo")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WeaponAmmoSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), weaponAmmoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"weapon_ammo\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, weaponAmmoPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in weaponAmmo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all weaponAmmo")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WeaponAmmo) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no weapon_ammo provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(weaponAmmoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	weaponAmmoUpsertCacheMut.RLock()
	cache, cached := weaponAmmoUpsertCache[key]
	weaponAmmoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			weaponAmmoAllColumns,
			weaponAmmoColumnsWithDefault,
			weaponAmmoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			weaponAmmoAllColumns,
			weaponAmmoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert weapon_ammo, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(weaponAmmoPrimaryKeyColumns))
			copy(conflict, weaponAmmoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"weapon_ammo\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(weaponAmmoType, weaponAmmoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(weaponAmmoType, weaponAmmoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert weapon_ammo")
	}

	if !cached {
		weaponAmmoUpsertCacheMut.Lock()
		weaponAmmoUpsertCache[key] = cache
		weaponAmmoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single WeaponAmmo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WeaponAmmo) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no WeaponAmmo provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), weaponAmmoPrimaryKeyMapping)
	sql := "DELETE FROM \"weapon_ammo\" WHERE \"blueprint_ammo_id\"=$1 AND \"weapon_id\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from weapon_ammo")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for weapon_ammo")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q weaponAmmoQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no weaponAmmoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from weapon_ammo")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for weapon_ammo")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WeaponAmmoSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(weaponAmmoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), weaponAmmoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"weapon_ammo\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, weaponAmmoPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from weaponAmmo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for weapon_ammo")
	}

	if len(weaponAmmoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WeaponAmmo) Reload(exec boil.Executor) error {
	ret, err := FindWeaponAmmo(exec, o.BlueprintAmmoID, o.WeaponID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WeaponAmmoSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WeaponAmmoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), weaponAmmoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"weapon_ammo\".* FROM \"weapon_ammo\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, weaponAmmoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in WeaponAmmoSlice")
	}

	*o = slice

	return nil
}

// WeaponAmmoExists checks if the WeaponAmmo row exists.
func WeaponAmmoExists(exec boil.Executor, blueprintAmmoID string, weaponID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"weapon_ammo\" where \"blueprint_ammo_id\"=$1 AND \"weapon_id\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, blueprintAmmoID, weaponID)
	}
	row := exec.QueryRow(sql, blueprintAmmoID, weaponID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if weapon_ammo exists")
	}

	return exists, nil
}
