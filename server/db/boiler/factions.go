// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Faction is an object representing the database table.
type Faction struct {
	ID             string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	VotePrice      string      `boiler:"vote_price" boil:"vote_price" json:"votePrice" toml:"votePrice" yaml:"votePrice"`
	ContractReward string      `boiler:"contract_reward" boil:"contract_reward" json:"contractReward" toml:"contractReward" yaml:"contractReward"`
	Label          string      `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	GuildID        null.String `boiler:"guild_id" boil:"guild_id" json:"guildID,omitempty" toml:"guildID" yaml:"guildID,omitempty"`
	DeletedAt      null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deletedAt,omitempty" toml:"deletedAt" yaml:"deletedAt,omitempty"`
	UpdatedAt      time.Time   `boiler:"updated_at" boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	CreatedAt      time.Time   `boiler:"created_at" boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`

	R *factionR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L factionL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FactionColumns = struct {
	ID             string
	VotePrice      string
	ContractReward string
	Label          string
	GuildID        string
	DeletedAt      string
	UpdatedAt      string
	CreatedAt      string
}{
	ID:             "id",
	VotePrice:      "vote_price",
	ContractReward: "contract_reward",
	Label:          "label",
	GuildID:        "guild_id",
	DeletedAt:      "deleted_at",
	UpdatedAt:      "updated_at",
	CreatedAt:      "created_at",
}

var FactionTableColumns = struct {
	ID             string
	VotePrice      string
	ContractReward string
	Label          string
	GuildID        string
	DeletedAt      string
	UpdatedAt      string
	CreatedAt      string
}{
	ID:             "factions.id",
	VotePrice:      "factions.vote_price",
	ContractReward: "factions.contract_reward",
	Label:          "factions.label",
	GuildID:        "factions.guild_id",
	DeletedAt:      "factions.deleted_at",
	UpdatedAt:      "factions.updated_at",
	CreatedAt:      "factions.created_at",
}

// Generated where

var FactionWhere = struct {
	ID             whereHelperstring
	VotePrice      whereHelperstring
	ContractReward whereHelperstring
	Label          whereHelperstring
	GuildID        whereHelpernull_String
	DeletedAt      whereHelpernull_Time
	UpdatedAt      whereHelpertime_Time
	CreatedAt      whereHelpertime_Time
}{
	ID:             whereHelperstring{field: "\"factions\".\"id\""},
	VotePrice:      whereHelperstring{field: "\"factions\".\"vote_price\""},
	ContractReward: whereHelperstring{field: "\"factions\".\"contract_reward\""},
	Label:          whereHelperstring{field: "\"factions\".\"label\""},
	GuildID:        whereHelpernull_String{field: "\"factions\".\"guild_id\""},
	DeletedAt:      whereHelpernull_Time{field: "\"factions\".\"deleted_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"factions\".\"updated_at\""},
	CreatedAt:      whereHelpertime_Time{field: "\"factions\".\"created_at\""},
}

// FactionRels is where relationship names are stored.
var FactionRels = struct {
	Brands    string
	Players   string
	Templates string
}{
	Brands:    "Brands",
	Players:   "Players",
	Templates: "Templates",
}

// factionR is where relationships are stored.
type factionR struct {
	Brands    BrandSlice    `boiler:"Brands" boil:"Brands" json:"Brands" toml:"Brands" yaml:"Brands"`
	Players   PlayerSlice   `boiler:"Players" boil:"Players" json:"Players" toml:"Players" yaml:"Players"`
	Templates TemplateSlice `boiler:"Templates" boil:"Templates" json:"Templates" toml:"Templates" yaml:"Templates"`
}

// NewStruct creates a new relationship struct
func (*factionR) NewStruct() *factionR {
	return &factionR{}
}

// factionL is where Load methods for each relationship are stored.
type factionL struct{}

var (
	factionAllColumns            = []string{"id", "vote_price", "contract_reward", "label", "guild_id", "deleted_at", "updated_at", "created_at"}
	factionColumnsWithoutDefault = []string{"label"}
	factionColumnsWithDefault    = []string{"id", "vote_price", "contract_reward", "guild_id", "deleted_at", "updated_at", "created_at"}
	factionPrimaryKeyColumns     = []string{"id"}
	factionGeneratedColumns      = []string{}
)

type (
	// FactionSlice is an alias for a slice of pointers to Faction.
	// This should almost always be used instead of []Faction.
	FactionSlice []*Faction
	// FactionHook is the signature for custom Faction hook methods
	FactionHook func(boil.Executor, *Faction) error

	factionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	factionType                 = reflect.TypeOf(&Faction{})
	factionMapping              = queries.MakeStructMapping(factionType)
	factionPrimaryKeyMapping, _ = queries.BindMapping(factionType, factionMapping, factionPrimaryKeyColumns)
	factionInsertCacheMut       sync.RWMutex
	factionInsertCache          = make(map[string]insertCache)
	factionUpdateCacheMut       sync.RWMutex
	factionUpdateCache          = make(map[string]updateCache)
	factionUpsertCacheMut       sync.RWMutex
	factionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var factionAfterSelectHooks []FactionHook

var factionBeforeInsertHooks []FactionHook
var factionAfterInsertHooks []FactionHook

var factionBeforeUpdateHooks []FactionHook
var factionAfterUpdateHooks []FactionHook

var factionBeforeDeleteHooks []FactionHook
var factionAfterDeleteHooks []FactionHook

var factionBeforeUpsertHooks []FactionHook
var factionAfterUpsertHooks []FactionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Faction) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range factionAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Faction) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range factionBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Faction) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range factionAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Faction) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range factionBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Faction) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range factionAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Faction) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range factionBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Faction) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range factionAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Faction) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range factionBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Faction) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range factionAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFactionHook registers your hook function for all future operations.
func AddFactionHook(hookPoint boil.HookPoint, factionHook FactionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		factionAfterSelectHooks = append(factionAfterSelectHooks, factionHook)
	case boil.BeforeInsertHook:
		factionBeforeInsertHooks = append(factionBeforeInsertHooks, factionHook)
	case boil.AfterInsertHook:
		factionAfterInsertHooks = append(factionAfterInsertHooks, factionHook)
	case boil.BeforeUpdateHook:
		factionBeforeUpdateHooks = append(factionBeforeUpdateHooks, factionHook)
	case boil.AfterUpdateHook:
		factionAfterUpdateHooks = append(factionAfterUpdateHooks, factionHook)
	case boil.BeforeDeleteHook:
		factionBeforeDeleteHooks = append(factionBeforeDeleteHooks, factionHook)
	case boil.AfterDeleteHook:
		factionAfterDeleteHooks = append(factionAfterDeleteHooks, factionHook)
	case boil.BeforeUpsertHook:
		factionBeforeUpsertHooks = append(factionBeforeUpsertHooks, factionHook)
	case boil.AfterUpsertHook:
		factionAfterUpsertHooks = append(factionAfterUpsertHooks, factionHook)
	}
}

// One returns a single faction record from the query.
func (q factionQuery) One(exec boil.Executor) (*Faction, error) {
	o := &Faction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for factions")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Faction records from the query.
func (q factionQuery) All(exec boil.Executor) (FactionSlice, error) {
	var o []*Faction

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Faction slice")
	}

	if len(factionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Faction records in the query.
func (q factionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count factions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q factionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if factions exists")
	}

	return count > 0, nil
}

// Brands retrieves all the brand's Brands with an executor.
func (o *Faction) Brands(mods ...qm.QueryMod) brandQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"brands\".\"faction_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"brands\".\"deleted_at\""),
	)

	query := Brands(queryMods...)
	queries.SetFrom(query.Query, "\"brands\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"brands\".*"})
	}

	return query
}

// Players retrieves all the player's Players with an executor.
func (o *Faction) Players(mods ...qm.QueryMod) playerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"players\".\"faction_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"players\".\"deleted_at\""),
	)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"players\".*"})
	}

	return query
}

// Templates retrieves all the template's Templates with an executor.
func (o *Faction) Templates(mods ...qm.QueryMod) templateQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"templates\".\"faction_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"templates\".\"deleted_at\""),
	)

	query := Templates(queryMods...)
	queries.SetFrom(query.Query, "\"templates\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"templates\".*"})
	}

	return query
}

// LoadBrands allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (factionL) LoadBrands(e boil.Executor, singular bool, maybeFaction interface{}, mods queries.Applicator) error {
	var slice []*Faction
	var object *Faction

	if singular {
		object = maybeFaction.(*Faction)
	} else {
		slice = *maybeFaction.(*[]*Faction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &factionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &factionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`brands`),
		qm.WhereIn(`brands.faction_id in ?`, args...),
		qmhelper.WhereIsNull(`brands.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load brands")
	}

	var resultSlice []*Brand
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice brands")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on brands")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for brands")
	}

	if len(brandAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Brands = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &brandR{}
			}
			foreign.R.Faction = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FactionID {
				local.R.Brands = append(local.R.Brands, foreign)
				if foreign.R == nil {
					foreign.R = &brandR{}
				}
				foreign.R.Faction = local
				break
			}
		}
	}

	return nil
}

// LoadPlayers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (factionL) LoadPlayers(e boil.Executor, singular bool, maybeFaction interface{}, mods queries.Applicator) error {
	var slice []*Faction
	var object *Faction

	if singular {
		object = maybeFaction.(*Faction)
	} else {
		slice = *maybeFaction.(*[]*Faction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &factionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &factionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.faction_id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load players")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice players")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(playerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Players = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playerR{}
			}
			foreign.R.Faction = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.FactionID) {
				local.R.Players = append(local.R.Players, foreign)
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.Faction = local
				break
			}
		}
	}

	return nil
}

// LoadTemplates allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (factionL) LoadTemplates(e boil.Executor, singular bool, maybeFaction interface{}, mods queries.Applicator) error {
	var slice []*Faction
	var object *Faction

	if singular {
		object = maybeFaction.(*Faction)
	} else {
		slice = *maybeFaction.(*[]*Faction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &factionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &factionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`templates`),
		qm.WhereIn(`templates.faction_id in ?`, args...),
		qmhelper.WhereIsNull(`templates.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load templates")
	}

	var resultSlice []*Template
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice templates")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on templates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for templates")
	}

	if len(templateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Templates = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &templateR{}
			}
			foreign.R.Faction = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FactionID {
				local.R.Templates = append(local.R.Templates, foreign)
				if foreign.R == nil {
					foreign.R = &templateR{}
				}
				foreign.R.Faction = local
				break
			}
		}
	}

	return nil
}

// AddBrands adds the given related objects to the existing relationships
// of the faction, optionally inserting them as new records.
// Appends related to o.R.Brands.
// Sets related.R.Faction appropriately.
func (o *Faction) AddBrands(exec boil.Executor, insert bool, related ...*Brand) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FactionID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"brands\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"faction_id"}),
				strmangle.WhereClause("\"", "\"", 2, brandPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FactionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &factionR{
			Brands: related,
		}
	} else {
		o.R.Brands = append(o.R.Brands, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &brandR{
				Faction: o,
			}
		} else {
			rel.R.Faction = o
		}
	}
	return nil
}

// AddPlayers adds the given related objects to the existing relationships
// of the faction, optionally inserting them as new records.
// Appends related to o.R.Players.
// Sets related.R.Faction appropriately.
func (o *Faction) AddPlayers(exec boil.Executor, insert bool, related ...*Player) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.FactionID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"players\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"faction_id"}),
				strmangle.WhereClause("\"", "\"", 2, playerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.FactionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &factionR{
			Players: related,
		}
	} else {
		o.R.Players = append(o.R.Players, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playerR{
				Faction: o,
			}
		} else {
			rel.R.Faction = o
		}
	}
	return nil
}

// SetPlayers removes all previously related items of the
// faction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Faction's Players accordingly.
// Replaces o.R.Players with related.
// Sets related.R.Faction's Players accordingly.
func (o *Faction) SetPlayers(exec boil.Executor, insert bool, related ...*Player) error {
	query := "update \"players\" set \"faction_id\" = null where \"faction_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Players {
			queries.SetScanner(&rel.FactionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Faction = nil
		}

		o.R.Players = nil
	}
	return o.AddPlayers(exec, insert, related...)
}

// RemovePlayers relationships from objects passed in.
// Removes related items from R.Players (uses pointer comparison, removal does not keep order)
// Sets related.R.Faction.
func (o *Faction) RemovePlayers(exec boil.Executor, related ...*Player) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.FactionID, nil)
		if rel.R != nil {
			rel.R.Faction = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("faction_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Players {
			if rel != ri {
				continue
			}

			ln := len(o.R.Players)
			if ln > 1 && i < ln-1 {
				o.R.Players[i] = o.R.Players[ln-1]
			}
			o.R.Players = o.R.Players[:ln-1]
			break
		}
	}

	return nil
}

// AddTemplates adds the given related objects to the existing relationships
// of the faction, optionally inserting them as new records.
// Appends related to o.R.Templates.
// Sets related.R.Faction appropriately.
func (o *Faction) AddTemplates(exec boil.Executor, insert bool, related ...*Template) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FactionID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"templates\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"faction_id"}),
				strmangle.WhereClause("\"", "\"", 2, templatePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FactionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &factionR{
			Templates: related,
		}
	} else {
		o.R.Templates = append(o.R.Templates, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &templateR{
				Faction: o,
			}
		} else {
			rel.R.Faction = o
		}
	}
	return nil
}

// Factions retrieves all the records using an executor.
func Factions(mods ...qm.QueryMod) factionQuery {
	mods = append(mods, qm.From("\"factions\""), qmhelper.WhereIsNull("\"factions\".\"deleted_at\""))
	return factionQuery{NewQuery(mods...)}
}

// FindFaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFaction(exec boil.Executor, iD string, selectCols ...string) (*Faction, error) {
	factionObj := &Faction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"factions\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, factionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from factions")
	}

	if err = factionObj.doAfterSelectHooks(exec); err != nil {
		return factionObj, err
	}

	return factionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Faction) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no factions provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(factionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	factionInsertCacheMut.RLock()
	cache, cached := factionInsertCache[key]
	factionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			factionAllColumns,
			factionColumnsWithDefault,
			factionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(factionType, factionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(factionType, factionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"factions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"factions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into factions")
	}

	if !cached {
		factionInsertCacheMut.Lock()
		factionInsertCache[key] = cache
		factionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Faction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Faction) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	factionUpdateCacheMut.RLock()
	cache, cached := factionUpdateCache[key]
	factionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			factionAllColumns,
			factionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update factions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"factions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, factionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(factionType, factionMapping, append(wl, factionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update factions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for factions")
	}

	if !cached {
		factionUpdateCacheMut.Lock()
		factionUpdateCache[key] = cache
		factionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q factionQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for factions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for factions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FactionSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"factions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, factionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in faction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all faction")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Faction) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no factions provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(factionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	factionUpsertCacheMut.RLock()
	cache, cached := factionUpsertCache[key]
	factionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			factionAllColumns,
			factionColumnsWithDefault,
			factionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			factionAllColumns,
			factionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert factions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(factionPrimaryKeyColumns))
			copy(conflict, factionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"factions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(factionType, factionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(factionType, factionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert factions")
	}

	if !cached {
		factionUpsertCacheMut.Lock()
		factionUpsertCache[key] = cache
		factionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Faction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Faction) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Faction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), factionPrimaryKeyMapping)
		sql = "DELETE FROM \"factions\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"factions\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(factionType, factionMapping, append(wl, factionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from factions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for factions")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q factionQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no factionQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from factions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for factions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FactionSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(factionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factionPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"factions\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, factionPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factionPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"factions\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, factionPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from faction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for factions")
	}

	if len(factionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Faction) Reload(exec boil.Executor) error {
	ret, err := FindFaction(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FactionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), factionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"factions\".* FROM \"factions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, factionPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in FactionSlice")
	}

	*o = slice

	return nil
}

// FactionExists checks if the Faction row exists.
func FactionExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"factions\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if factions exists")
	}

	return exists, nil
}
