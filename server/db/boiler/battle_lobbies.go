// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BattleLobby is an object representing the database table.
type BattleLobby struct {
	ID                    string          `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	HostByID              string          `boiler:"host_by_id" boil:"host_by_id" json:"host_by_id" toml:"host_by_id" yaml:"host_by_id"`
	EntryFee              decimal.Decimal `boiler:"entry_fee" boil:"entry_fee" json:"entry_fee" toml:"entry_fee" yaml:"entry_fee"`
	FirstFactionCut       decimal.Decimal `boiler:"first_faction_cut" boil:"first_faction_cut" json:"first_faction_cut" toml:"first_faction_cut" yaml:"first_faction_cut"`
	SecondFactionCut      decimal.Decimal `boiler:"second_faction_cut" boil:"second_faction_cut" json:"second_faction_cut" toml:"second_faction_cut" yaml:"second_faction_cut"`
	ThirdFactionCut       decimal.Decimal `boiler:"third_faction_cut" boil:"third_faction_cut" json:"third_faction_cut" toml:"third_faction_cut" yaml:"third_faction_cut"`
	EachFactionMechAmount int             `boiler:"each_faction_mech_amount" boil:"each_faction_mech_amount" json:"each_faction_mech_amount" toml:"each_faction_mech_amount" yaml:"each_faction_mech_amount"`
	Password              null.String     `boiler:"password" boil:"password" json:"password,omitempty" toml:"password" yaml:"password,omitempty"`
	ReadyAt               null.Time       `boiler:"ready_at" boil:"ready_at" json:"ready_at,omitempty" toml:"ready_at" yaml:"ready_at,omitempty"`
	JoinedBattleID        null.String     `boiler:"joined_battle_id" boil:"joined_battle_id" json:"joined_battle_id,omitempty" toml:"joined_battle_id" yaml:"joined_battle_id,omitempty"`
	FinishedAt            null.Time       `boiler:"finished_at" boil:"finished_at" json:"finished_at,omitempty" toml:"finished_at" yaml:"finished_at,omitempty"`
	CreatedAt             time.Time       `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt             time.Time       `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt             null.Time       `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *battleLobbyR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L battleLobbyL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattleLobbyColumns = struct {
	ID                    string
	HostByID              string
	EntryFee              string
	FirstFactionCut       string
	SecondFactionCut      string
	ThirdFactionCut       string
	EachFactionMechAmount string
	Password              string
	ReadyAt               string
	JoinedBattleID        string
	FinishedAt            string
	CreatedAt             string
	UpdatedAt             string
	DeletedAt             string
}{
	ID:                    "id",
	HostByID:              "host_by_id",
	EntryFee:              "entry_fee",
	FirstFactionCut:       "first_faction_cut",
	SecondFactionCut:      "second_faction_cut",
	ThirdFactionCut:       "third_faction_cut",
	EachFactionMechAmount: "each_faction_mech_amount",
	Password:              "password",
	ReadyAt:               "ready_at",
	JoinedBattleID:        "joined_battle_id",
	FinishedAt:            "finished_at",
	CreatedAt:             "created_at",
	UpdatedAt:             "updated_at",
	DeletedAt:             "deleted_at",
}

var BattleLobbyTableColumns = struct {
	ID                    string
	HostByID              string
	EntryFee              string
	FirstFactionCut       string
	SecondFactionCut      string
	ThirdFactionCut       string
	EachFactionMechAmount string
	Password              string
	ReadyAt               string
	JoinedBattleID        string
	FinishedAt            string
	CreatedAt             string
	UpdatedAt             string
	DeletedAt             string
}{
	ID:                    "battle_lobbies.id",
	HostByID:              "battle_lobbies.host_by_id",
	EntryFee:              "battle_lobbies.entry_fee",
	FirstFactionCut:       "battle_lobbies.first_faction_cut",
	SecondFactionCut:      "battle_lobbies.second_faction_cut",
	ThirdFactionCut:       "battle_lobbies.third_faction_cut",
	EachFactionMechAmount: "battle_lobbies.each_faction_mech_amount",
	Password:              "battle_lobbies.password",
	ReadyAt:               "battle_lobbies.ready_at",
	JoinedBattleID:        "battle_lobbies.joined_battle_id",
	FinishedAt:            "battle_lobbies.finished_at",
	CreatedAt:             "battle_lobbies.created_at",
	UpdatedAt:             "battle_lobbies.updated_at",
	DeletedAt:             "battle_lobbies.deleted_at",
}

// Generated where

var BattleLobbyWhere = struct {
	ID                    whereHelperstring
	HostByID              whereHelperstring
	EntryFee              whereHelperdecimal_Decimal
	FirstFactionCut       whereHelperdecimal_Decimal
	SecondFactionCut      whereHelperdecimal_Decimal
	ThirdFactionCut       whereHelperdecimal_Decimal
	EachFactionMechAmount whereHelperint
	Password              whereHelpernull_String
	ReadyAt               whereHelpernull_Time
	JoinedBattleID        whereHelpernull_String
	FinishedAt            whereHelpernull_Time
	CreatedAt             whereHelpertime_Time
	UpdatedAt             whereHelpertime_Time
	DeletedAt             whereHelpernull_Time
}{
	ID:                    whereHelperstring{field: "\"battle_lobbies\".\"id\""},
	HostByID:              whereHelperstring{field: "\"battle_lobbies\".\"host_by_id\""},
	EntryFee:              whereHelperdecimal_Decimal{field: "\"battle_lobbies\".\"entry_fee\""},
	FirstFactionCut:       whereHelperdecimal_Decimal{field: "\"battle_lobbies\".\"first_faction_cut\""},
	SecondFactionCut:      whereHelperdecimal_Decimal{field: "\"battle_lobbies\".\"second_faction_cut\""},
	ThirdFactionCut:       whereHelperdecimal_Decimal{field: "\"battle_lobbies\".\"third_faction_cut\""},
	EachFactionMechAmount: whereHelperint{field: "\"battle_lobbies\".\"each_faction_mech_amount\""},
	Password:              whereHelpernull_String{field: "\"battle_lobbies\".\"password\""},
	ReadyAt:               whereHelpernull_Time{field: "\"battle_lobbies\".\"ready_at\""},
	JoinedBattleID:        whereHelpernull_String{field: "\"battle_lobbies\".\"joined_battle_id\""},
	FinishedAt:            whereHelpernull_Time{field: "\"battle_lobbies\".\"finished_at\""},
	CreatedAt:             whereHelpertime_Time{field: "\"battle_lobbies\".\"created_at\""},
	UpdatedAt:             whereHelpertime_Time{field: "\"battle_lobbies\".\"updated_at\""},
	DeletedAt:             whereHelpernull_Time{field: "\"battle_lobbies\".\"deleted_at\""},
}

// BattleLobbyRels is where relationship names are stored.
var BattleLobbyRels = struct {
	HostBy              string
	JoinedBattle        string
	BattleLobbiesMechs  string
	BattleLobbyBounties string
}{
	HostBy:              "HostBy",
	JoinedBattle:        "JoinedBattle",
	BattleLobbiesMechs:  "BattleLobbiesMechs",
	BattleLobbyBounties: "BattleLobbyBounties",
}

// battleLobbyR is where relationships are stored.
type battleLobbyR struct {
	HostBy              *Player                `boiler:"HostBy" boil:"HostBy" json:"HostBy" toml:"HostBy" yaml:"HostBy"`
	JoinedBattle        *Battle                `boiler:"JoinedBattle" boil:"JoinedBattle" json:"JoinedBattle" toml:"JoinedBattle" yaml:"JoinedBattle"`
	BattleLobbiesMechs  BattleLobbiesMechSlice `boiler:"BattleLobbiesMechs" boil:"BattleLobbiesMechs" json:"BattleLobbiesMechs" toml:"BattleLobbiesMechs" yaml:"BattleLobbiesMechs"`
	BattleLobbyBounties BattleLobbyBountySlice `boiler:"BattleLobbyBounties" boil:"BattleLobbyBounties" json:"BattleLobbyBounties" toml:"BattleLobbyBounties" yaml:"BattleLobbyBounties"`
}

// NewStruct creates a new relationship struct
func (*battleLobbyR) NewStruct() *battleLobbyR {
	return &battleLobbyR{}
}

// battleLobbyL is where Load methods for each relationship are stored.
type battleLobbyL struct{}

var (
	battleLobbyAllColumns            = []string{"id", "host_by_id", "entry_fee", "first_faction_cut", "second_faction_cut", "third_faction_cut", "each_faction_mech_amount", "password", "ready_at", "joined_battle_id", "finished_at", "created_at", "updated_at", "deleted_at"}
	battleLobbyColumnsWithoutDefault = []string{"host_by_id"}
	battleLobbyColumnsWithDefault    = []string{"id", "entry_fee", "first_faction_cut", "second_faction_cut", "third_faction_cut", "each_faction_mech_amount", "password", "ready_at", "joined_battle_id", "finished_at", "created_at", "updated_at", "deleted_at"}
	battleLobbyPrimaryKeyColumns     = []string{"id"}
	battleLobbyGeneratedColumns      = []string{}
)

type (
	// BattleLobbySlice is an alias for a slice of pointers to BattleLobby.
	// This should almost always be used instead of []BattleLobby.
	BattleLobbySlice []*BattleLobby
	// BattleLobbyHook is the signature for custom BattleLobby hook methods
	BattleLobbyHook func(boil.Executor, *BattleLobby) error

	battleLobbyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battleLobbyType                 = reflect.TypeOf(&BattleLobby{})
	battleLobbyMapping              = queries.MakeStructMapping(battleLobbyType)
	battleLobbyPrimaryKeyMapping, _ = queries.BindMapping(battleLobbyType, battleLobbyMapping, battleLobbyPrimaryKeyColumns)
	battleLobbyInsertCacheMut       sync.RWMutex
	battleLobbyInsertCache          = make(map[string]insertCache)
	battleLobbyUpdateCacheMut       sync.RWMutex
	battleLobbyUpdateCache          = make(map[string]updateCache)
	battleLobbyUpsertCacheMut       sync.RWMutex
	battleLobbyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battleLobbyAfterSelectHooks []BattleLobbyHook

var battleLobbyBeforeInsertHooks []BattleLobbyHook
var battleLobbyAfterInsertHooks []BattleLobbyHook

var battleLobbyBeforeUpdateHooks []BattleLobbyHook
var battleLobbyAfterUpdateHooks []BattleLobbyHook

var battleLobbyBeforeDeleteHooks []BattleLobbyHook
var battleLobbyAfterDeleteHooks []BattleLobbyHook

var battleLobbyBeforeUpsertHooks []BattleLobbyHook
var battleLobbyAfterUpsertHooks []BattleLobbyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BattleLobby) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbyAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BattleLobby) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbyBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BattleLobby) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbyAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BattleLobby) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbyBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BattleLobby) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbyAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BattleLobby) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbyBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BattleLobby) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbyAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BattleLobby) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbyBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BattleLobby) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbyAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattleLobbyHook registers your hook function for all future operations.
func AddBattleLobbyHook(hookPoint boil.HookPoint, battleLobbyHook BattleLobbyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		battleLobbyAfterSelectHooks = append(battleLobbyAfterSelectHooks, battleLobbyHook)
	case boil.BeforeInsertHook:
		battleLobbyBeforeInsertHooks = append(battleLobbyBeforeInsertHooks, battleLobbyHook)
	case boil.AfterInsertHook:
		battleLobbyAfterInsertHooks = append(battleLobbyAfterInsertHooks, battleLobbyHook)
	case boil.BeforeUpdateHook:
		battleLobbyBeforeUpdateHooks = append(battleLobbyBeforeUpdateHooks, battleLobbyHook)
	case boil.AfterUpdateHook:
		battleLobbyAfterUpdateHooks = append(battleLobbyAfterUpdateHooks, battleLobbyHook)
	case boil.BeforeDeleteHook:
		battleLobbyBeforeDeleteHooks = append(battleLobbyBeforeDeleteHooks, battleLobbyHook)
	case boil.AfterDeleteHook:
		battleLobbyAfterDeleteHooks = append(battleLobbyAfterDeleteHooks, battleLobbyHook)
	case boil.BeforeUpsertHook:
		battleLobbyBeforeUpsertHooks = append(battleLobbyBeforeUpsertHooks, battleLobbyHook)
	case boil.AfterUpsertHook:
		battleLobbyAfterUpsertHooks = append(battleLobbyAfterUpsertHooks, battleLobbyHook)
	}
}

// One returns a single battleLobby record from the query.
func (q battleLobbyQuery) One(exec boil.Executor) (*BattleLobby, error) {
	o := &BattleLobby{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for battle_lobbies")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BattleLobby records from the query.
func (q battleLobbyQuery) All(exec boil.Executor) (BattleLobbySlice, error) {
	var o []*BattleLobby

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BattleLobby slice")
	}

	if len(battleLobbyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BattleLobby records in the query.
func (q battleLobbyQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count battle_lobbies rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battleLobbyQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if battle_lobbies exists")
	}

	return count > 0, nil
}

// HostBy pointed to by the foreign key.
func (o *BattleLobby) HostBy(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.HostByID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// JoinedBattle pointed to by the foreign key.
func (o *BattleLobby) JoinedBattle(mods ...qm.QueryMod) battleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.JoinedBattleID),
	}

	queryMods = append(queryMods, mods...)

	query := Battles(queryMods...)
	queries.SetFrom(query.Query, "\"battles\"")

	return query
}

// BattleLobbiesMechs retrieves all the battle_lobbies_mech's BattleLobbiesMechs with an executor.
func (o *BattleLobby) BattleLobbiesMechs(mods ...qm.QueryMod) battleLobbiesMechQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_lobbies_mechs\".\"battle_lobby_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"battle_lobbies_mechs\".\"deleted_at\""),
	)

	query := BattleLobbiesMechs(queryMods...)
	queries.SetFrom(query.Query, "\"battle_lobbies_mechs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_lobbies_mechs\".*"})
	}

	return query
}

// BattleLobbyBounties retrieves all the battle_lobby_bounty's BattleLobbyBounties with an executor.
func (o *BattleLobby) BattleLobbyBounties(mods ...qm.QueryMod) battleLobbyBountyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_lobby_bounties\".\"battle_lobby_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"battle_lobby_bounties\".\"deleted_at\""),
	)

	query := BattleLobbyBounties(queryMods...)
	queries.SetFrom(query.Query, "\"battle_lobby_bounties\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_lobby_bounties\".*"})
	}

	return query
}

// LoadHostBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleLobbyL) LoadHostBy(e boil.Executor, singular bool, maybeBattleLobby interface{}, mods queries.Applicator) error {
	var slice []*BattleLobby
	var object *BattleLobby

	if singular {
		object = maybeBattleLobby.(*BattleLobby)
	} else {
		slice = *maybeBattleLobby.(*[]*BattleLobby)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleLobbyR{}
		}
		args = append(args, object.HostByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleLobbyR{}
			}

			for _, a := range args {
				if a == obj.HostByID {
					continue Outer
				}
			}

			args = append(args, obj.HostByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(battleLobbyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.HostBy = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.HostByBattleLobbies = append(foreign.R.HostByBattleLobbies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.HostByID == foreign.ID {
				local.R.HostBy = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.HostByBattleLobbies = append(foreign.R.HostByBattleLobbies, local)
				break
			}
		}
	}

	return nil
}

// LoadJoinedBattle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleLobbyL) LoadJoinedBattle(e boil.Executor, singular bool, maybeBattleLobby interface{}, mods queries.Applicator) error {
	var slice []*BattleLobby
	var object *BattleLobby

	if singular {
		object = maybeBattleLobby.(*BattleLobby)
	} else {
		slice = *maybeBattleLobby.(*[]*BattleLobby)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleLobbyR{}
		}
		if !queries.IsNil(object.JoinedBattleID) {
			args = append(args, object.JoinedBattleID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleLobbyR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.JoinedBattleID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.JoinedBattleID) {
				args = append(args, obj.JoinedBattleID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battles`),
		qm.WhereIn(`battles.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Battle")
	}

	var resultSlice []*Battle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Battle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battles")
	}

	if len(battleLobbyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.JoinedBattle = foreign
		if foreign.R == nil {
			foreign.R = &battleR{}
		}
		foreign.R.JoinedBattleBattleLobbies = append(foreign.R.JoinedBattleBattleLobbies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.JoinedBattleID, foreign.ID) {
				local.R.JoinedBattle = foreign
				if foreign.R == nil {
					foreign.R = &battleR{}
				}
				foreign.R.JoinedBattleBattleLobbies = append(foreign.R.JoinedBattleBattleLobbies, local)
				break
			}
		}
	}

	return nil
}

// LoadBattleLobbiesMechs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleLobbyL) LoadBattleLobbiesMechs(e boil.Executor, singular bool, maybeBattleLobby interface{}, mods queries.Applicator) error {
	var slice []*BattleLobby
	var object *BattleLobby

	if singular {
		object = maybeBattleLobby.(*BattleLobby)
	} else {
		slice = *maybeBattleLobby.(*[]*BattleLobby)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleLobbyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleLobbyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_lobbies_mechs`),
		qm.WhereIn(`battle_lobbies_mechs.battle_lobby_id in ?`, args...),
		qmhelper.WhereIsNull(`battle_lobbies_mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_lobbies_mechs")
	}

	var resultSlice []*BattleLobbiesMech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_lobbies_mechs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_lobbies_mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_lobbies_mechs")
	}

	if len(battleLobbiesMechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleLobbiesMechs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleLobbiesMechR{}
			}
			foreign.R.BattleLobby = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BattleLobbyID {
				local.R.BattleLobbiesMechs = append(local.R.BattleLobbiesMechs, foreign)
				if foreign.R == nil {
					foreign.R = &battleLobbiesMechR{}
				}
				foreign.R.BattleLobby = local
				break
			}
		}
	}

	return nil
}

// LoadBattleLobbyBounties allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (battleLobbyL) LoadBattleLobbyBounties(e boil.Executor, singular bool, maybeBattleLobby interface{}, mods queries.Applicator) error {
	var slice []*BattleLobby
	var object *BattleLobby

	if singular {
		object = maybeBattleLobby.(*BattleLobby)
	} else {
		slice = *maybeBattleLobby.(*[]*BattleLobby)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleLobbyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleLobbyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_lobby_bounties`),
		qm.WhereIn(`battle_lobby_bounties.battle_lobby_id in ?`, args...),
		qmhelper.WhereIsNull(`battle_lobby_bounties.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_lobby_bounties")
	}

	var resultSlice []*BattleLobbyBounty
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_lobby_bounties")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_lobby_bounties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_lobby_bounties")
	}

	if len(battleLobbyBountyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleLobbyBounties = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleLobbyBountyR{}
			}
			foreign.R.BattleLobby = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BattleLobbyID {
				local.R.BattleLobbyBounties = append(local.R.BattleLobbyBounties, foreign)
				if foreign.R == nil {
					foreign.R = &battleLobbyBountyR{}
				}
				foreign.R.BattleLobby = local
				break
			}
		}
	}

	return nil
}

// SetHostBy of the battleLobby to the related item.
// Sets o.R.HostBy to related.
// Adds o to related.R.HostByBattleLobbies.
func (o *BattleLobby) SetHostBy(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_lobbies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"host_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleLobbyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.HostByID = related.ID
	if o.R == nil {
		o.R = &battleLobbyR{
			HostBy: related,
		}
	} else {
		o.R.HostBy = related
	}

	if related.R == nil {
		related.R = &playerR{
			HostByBattleLobbies: BattleLobbySlice{o},
		}
	} else {
		related.R.HostByBattleLobbies = append(related.R.HostByBattleLobbies, o)
	}

	return nil
}

// SetJoinedBattle of the battleLobby to the related item.
// Sets o.R.JoinedBattle to related.
// Adds o to related.R.JoinedBattleBattleLobbies.
func (o *BattleLobby) SetJoinedBattle(exec boil.Executor, insert bool, related *Battle) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_lobbies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"joined_battle_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleLobbyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.JoinedBattleID, related.ID)
	if o.R == nil {
		o.R = &battleLobbyR{
			JoinedBattle: related,
		}
	} else {
		o.R.JoinedBattle = related
	}

	if related.R == nil {
		related.R = &battleR{
			JoinedBattleBattleLobbies: BattleLobbySlice{o},
		}
	} else {
		related.R.JoinedBattleBattleLobbies = append(related.R.JoinedBattleBattleLobbies, o)
	}

	return nil
}

// RemoveJoinedBattle relationship.
// Sets o.R.JoinedBattle to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BattleLobby) RemoveJoinedBattle(exec boil.Executor, related *Battle) error {
	var err error

	queries.SetScanner(&o.JoinedBattleID, nil)
	if _, err = o.Update(exec, boil.Whitelist("joined_battle_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.JoinedBattle = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.JoinedBattleBattleLobbies {
		if queries.Equal(o.JoinedBattleID, ri.JoinedBattleID) {
			continue
		}

		ln := len(related.R.JoinedBattleBattleLobbies)
		if ln > 1 && i < ln-1 {
			related.R.JoinedBattleBattleLobbies[i] = related.R.JoinedBattleBattleLobbies[ln-1]
		}
		related.R.JoinedBattleBattleLobbies = related.R.JoinedBattleBattleLobbies[:ln-1]
		break
	}
	return nil
}

// AddBattleLobbiesMechs adds the given related objects to the existing relationships
// of the battle_lobby, optionally inserting them as new records.
// Appends related to o.R.BattleLobbiesMechs.
// Sets related.R.BattleLobby appropriately.
func (o *BattleLobby) AddBattleLobbiesMechs(exec boil.Executor, insert bool, related ...*BattleLobbiesMech) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BattleLobbyID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_lobbies_mechs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"battle_lobby_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleLobbiesMechPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.BattleLobbyID, rel.MechID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BattleLobbyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &battleLobbyR{
			BattleLobbiesMechs: related,
		}
	} else {
		o.R.BattleLobbiesMechs = append(o.R.BattleLobbiesMechs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleLobbiesMechR{
				BattleLobby: o,
			}
		} else {
			rel.R.BattleLobby = o
		}
	}
	return nil
}

// AddBattleLobbyBounties adds the given related objects to the existing relationships
// of the battle_lobby, optionally inserting them as new records.
// Appends related to o.R.BattleLobbyBounties.
// Sets related.R.BattleLobby appropriately.
func (o *BattleLobby) AddBattleLobbyBounties(exec boil.Executor, insert bool, related ...*BattleLobbyBounty) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BattleLobbyID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_lobby_bounties\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"battle_lobby_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleLobbyBountyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.BattleLobbyID, rel.OfferedByID, rel.TargetMechID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BattleLobbyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &battleLobbyR{
			BattleLobbyBounties: related,
		}
	} else {
		o.R.BattleLobbyBounties = append(o.R.BattleLobbyBounties, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleLobbyBountyR{
				BattleLobby: o,
			}
		} else {
			rel.R.BattleLobby = o
		}
	}
	return nil
}

// BattleLobbies retrieves all the records using an executor.
func BattleLobbies(mods ...qm.QueryMod) battleLobbyQuery {
	mods = append(mods, qm.From("\"battle_lobbies\""), qmhelper.WhereIsNull("\"battle_lobbies\".\"deleted_at\""))
	return battleLobbyQuery{NewQuery(mods...)}
}

// FindBattleLobby retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattleLobby(exec boil.Executor, iD string, selectCols ...string) (*BattleLobby, error) {
	battleLobbyObj := &BattleLobby{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battle_lobbies\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, battleLobbyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from battle_lobbies")
	}

	if err = battleLobbyObj.doAfterSelectHooks(exec); err != nil {
		return battleLobbyObj, err
	}

	return battleLobbyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BattleLobby) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_lobbies provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleLobbyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battleLobbyInsertCacheMut.RLock()
	cache, cached := battleLobbyInsertCache[key]
	battleLobbyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battleLobbyAllColumns,
			battleLobbyColumnsWithDefault,
			battleLobbyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battleLobbyType, battleLobbyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battleLobbyType, battleLobbyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battle_lobbies\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battle_lobbies\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into battle_lobbies")
	}

	if !cached {
		battleLobbyInsertCacheMut.Lock()
		battleLobbyInsertCache[key] = cache
		battleLobbyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BattleLobby.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BattleLobby) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battleLobbyUpdateCacheMut.RLock()
	cache, cached := battleLobbyUpdateCache[key]
	battleLobbyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battleLobbyAllColumns,
			battleLobbyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update battle_lobbies, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battle_lobbies\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battleLobbyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battleLobbyType, battleLobbyMapping, append(wl, battleLobbyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update battle_lobbies row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for battle_lobbies")
	}

	if !cached {
		battleLobbyUpdateCacheMut.Lock()
		battleLobbyUpdateCache[key] = cache
		battleLobbyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battleLobbyQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for battle_lobbies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for battle_lobbies")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattleLobbySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleLobbyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battle_lobbies\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battleLobbyPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in battleLobby slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all battleLobby")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BattleLobby) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_lobbies provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleLobbyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battleLobbyUpsertCacheMut.RLock()
	cache, cached := battleLobbyUpsertCache[key]
	battleLobbyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battleLobbyAllColumns,
			battleLobbyColumnsWithDefault,
			battleLobbyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			battleLobbyAllColumns,
			battleLobbyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert battle_lobbies, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battleLobbyPrimaryKeyColumns))
			copy(conflict, battleLobbyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battle_lobbies\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battleLobbyType, battleLobbyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battleLobbyType, battleLobbyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert battle_lobbies")
	}

	if !cached {
		battleLobbyUpsertCacheMut.Lock()
		battleLobbyUpsertCache[key] = cache
		battleLobbyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BattleLobby record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BattleLobby) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BattleLobby provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battleLobbyPrimaryKeyMapping)
		sql = "DELETE FROM \"battle_lobbies\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"battle_lobbies\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(battleLobbyType, battleLobbyMapping, append(wl, battleLobbyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from battle_lobbies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for battle_lobbies")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battleLobbyQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no battleLobbyQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battle_lobbies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_lobbies")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattleLobbySlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(battleLobbyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleLobbyPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"battle_lobbies\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleLobbyPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleLobbyPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"battle_lobbies\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, battleLobbyPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battleLobby slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_lobbies")
	}

	if len(battleLobbyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BattleLobby) Reload(exec boil.Executor) error {
	ret, err := FindBattleLobby(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattleLobbySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattleLobbySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleLobbyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battle_lobbies\".* FROM \"battle_lobbies\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleLobbyPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BattleLobbySlice")
	}

	*o = slice

	return nil
}

// BattleLobbyExists checks if the BattleLobby row exists.
func BattleLobbyExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battle_lobbies\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if battle_lobbies exists")
	}

	return exists, nil
}
