// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BlueprintMechAnimation is an object representing the database table.
type BlueprintMechAnimation struct {
	ID               string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Collection       string      `boiler:"collection" boil:"collection" json:"collection" toml:"collection" yaml:"collection"`
	Label            string      `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	MechModel        string      `boiler:"mech_model" boil:"mech_model" json:"mech_model" toml:"mech_model" yaml:"mech_model"`
	Tier             string      `boiler:"tier" boil:"tier" json:"tier" toml:"tier" yaml:"tier"`
	IntroAnimation   null.Bool   `boiler:"intro_animation" boil:"intro_animation" json:"intro_animation,omitempty" toml:"intro_animation" yaml:"intro_animation,omitempty"`
	OutroAnimation   null.Bool   `boiler:"outro_animation" boil:"outro_animation" json:"outro_animation,omitempty" toml:"outro_animation" yaml:"outro_animation,omitempty"`
	CreatedAt        time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ImageURL         null.String `boiler:"image_url" boil:"image_url" json:"image_url,omitempty" toml:"image_url" yaml:"image_url,omitempty"`
	CardAnimationURL null.String `boiler:"card_animation_url" boil:"card_animation_url" json:"card_animation_url,omitempty" toml:"card_animation_url" yaml:"card_animation_url,omitempty"`
	AvatarURL        null.String `boiler:"avatar_url" boil:"avatar_url" json:"avatar_url,omitempty" toml:"avatar_url" yaml:"avatar_url,omitempty"`
	LargeImageURL    null.String `boiler:"large_image_url" boil:"large_image_url" json:"large_image_url,omitempty" toml:"large_image_url" yaml:"large_image_url,omitempty"`
	BackgroundColor  null.String `boiler:"background_color" boil:"background_color" json:"background_color,omitempty" toml:"background_color" yaml:"background_color,omitempty"`
	AnimationURL     null.String `boiler:"animation_url" boil:"animation_url" json:"animation_url,omitempty" toml:"animation_url" yaml:"animation_url,omitempty"`
	YoutubeURL       null.String `boiler:"youtube_url" boil:"youtube_url" json:"youtube_url,omitempty" toml:"youtube_url" yaml:"youtube_url,omitempty"`

	R *blueprintMechAnimationR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L blueprintMechAnimationL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlueprintMechAnimationColumns = struct {
	ID               string
	Collection       string
	Label            string
	MechModel        string
	Tier             string
	IntroAnimation   string
	OutroAnimation   string
	CreatedAt        string
	ImageURL         string
	CardAnimationURL string
	AvatarURL        string
	LargeImageURL    string
	BackgroundColor  string
	AnimationURL     string
	YoutubeURL       string
}{
	ID:               "id",
	Collection:       "collection",
	Label:            "label",
	MechModel:        "mech_model",
	Tier:             "tier",
	IntroAnimation:   "intro_animation",
	OutroAnimation:   "outro_animation",
	CreatedAt:        "created_at",
	ImageURL:         "image_url",
	CardAnimationURL: "card_animation_url",
	AvatarURL:        "avatar_url",
	LargeImageURL:    "large_image_url",
	BackgroundColor:  "background_color",
	AnimationURL:     "animation_url",
	YoutubeURL:       "youtube_url",
}

var BlueprintMechAnimationTableColumns = struct {
	ID               string
	Collection       string
	Label            string
	MechModel        string
	Tier             string
	IntroAnimation   string
	OutroAnimation   string
	CreatedAt        string
	ImageURL         string
	CardAnimationURL string
	AvatarURL        string
	LargeImageURL    string
	BackgroundColor  string
	AnimationURL     string
	YoutubeURL       string
}{
	ID:               "blueprint_mech_animation.id",
	Collection:       "blueprint_mech_animation.collection",
	Label:            "blueprint_mech_animation.label",
	MechModel:        "blueprint_mech_animation.mech_model",
	Tier:             "blueprint_mech_animation.tier",
	IntroAnimation:   "blueprint_mech_animation.intro_animation",
	OutroAnimation:   "blueprint_mech_animation.outro_animation",
	CreatedAt:        "blueprint_mech_animation.created_at",
	ImageURL:         "blueprint_mech_animation.image_url",
	CardAnimationURL: "blueprint_mech_animation.card_animation_url",
	AvatarURL:        "blueprint_mech_animation.avatar_url",
	LargeImageURL:    "blueprint_mech_animation.large_image_url",
	BackgroundColor:  "blueprint_mech_animation.background_color",
	AnimationURL:     "blueprint_mech_animation.animation_url",
	YoutubeURL:       "blueprint_mech_animation.youtube_url",
}

// Generated where

var BlueprintMechAnimationWhere = struct {
	ID               whereHelperstring
	Collection       whereHelperstring
	Label            whereHelperstring
	MechModel        whereHelperstring
	Tier             whereHelperstring
	IntroAnimation   whereHelpernull_Bool
	OutroAnimation   whereHelpernull_Bool
	CreatedAt        whereHelpertime_Time
	ImageURL         whereHelpernull_String
	CardAnimationURL whereHelpernull_String
	AvatarURL        whereHelpernull_String
	LargeImageURL    whereHelpernull_String
	BackgroundColor  whereHelpernull_String
	AnimationURL     whereHelpernull_String
	YoutubeURL       whereHelpernull_String
}{
	ID:               whereHelperstring{field: "\"blueprint_mech_animation\".\"id\""},
	Collection:       whereHelperstring{field: "\"blueprint_mech_animation\".\"collection\""},
	Label:            whereHelperstring{field: "\"blueprint_mech_animation\".\"label\""},
	MechModel:        whereHelperstring{field: "\"blueprint_mech_animation\".\"mech_model\""},
	Tier:             whereHelperstring{field: "\"blueprint_mech_animation\".\"tier\""},
	IntroAnimation:   whereHelpernull_Bool{field: "\"blueprint_mech_animation\".\"intro_animation\""},
	OutroAnimation:   whereHelpernull_Bool{field: "\"blueprint_mech_animation\".\"outro_animation\""},
	CreatedAt:        whereHelpertime_Time{field: "\"blueprint_mech_animation\".\"created_at\""},
	ImageURL:         whereHelpernull_String{field: "\"blueprint_mech_animation\".\"image_url\""},
	CardAnimationURL: whereHelpernull_String{field: "\"blueprint_mech_animation\".\"card_animation_url\""},
	AvatarURL:        whereHelpernull_String{field: "\"blueprint_mech_animation\".\"avatar_url\""},
	LargeImageURL:    whereHelpernull_String{field: "\"blueprint_mech_animation\".\"large_image_url\""},
	BackgroundColor:  whereHelpernull_String{field: "\"blueprint_mech_animation\".\"background_color\""},
	AnimationURL:     whereHelpernull_String{field: "\"blueprint_mech_animation\".\"animation_url\""},
	YoutubeURL:       whereHelpernull_String{field: "\"blueprint_mech_animation\".\"youtube_url\""},
}

// BlueprintMechAnimationRels is where relationship names are stored.
var BlueprintMechAnimationRels = struct {
	BlueprintMechAnimationMechModel string
	BlueprintMechAnimations         string
}{
	BlueprintMechAnimationMechModel: "BlueprintMechAnimationMechModel",
	BlueprintMechAnimations:         "BlueprintMechAnimations",
}

// blueprintMechAnimationR is where relationships are stored.
type blueprintMechAnimationR struct {
	BlueprintMechAnimationMechModel *MechModel         `boiler:"BlueprintMechAnimationMechModel" boil:"BlueprintMechAnimationMechModel" json:"BlueprintMechAnimationMechModel" toml:"BlueprintMechAnimationMechModel" yaml:"BlueprintMechAnimationMechModel"`
	BlueprintMechAnimations         MechAnimationSlice `boiler:"BlueprintMechAnimations" boil:"BlueprintMechAnimations" json:"BlueprintMechAnimations" toml:"BlueprintMechAnimations" yaml:"BlueprintMechAnimations"`
}

// NewStruct creates a new relationship struct
func (*blueprintMechAnimationR) NewStruct() *blueprintMechAnimationR {
	return &blueprintMechAnimationR{}
}

// blueprintMechAnimationL is where Load methods for each relationship are stored.
type blueprintMechAnimationL struct{}

var (
	blueprintMechAnimationAllColumns            = []string{"id", "collection", "label", "mech_model", "tier", "intro_animation", "outro_animation", "created_at", "image_url", "card_animation_url", "avatar_url", "large_image_url", "background_color", "animation_url", "youtube_url"}
	blueprintMechAnimationColumnsWithoutDefault = []string{"label", "mech_model"}
	blueprintMechAnimationColumnsWithDefault    = []string{"id", "collection", "tier", "intro_animation", "outro_animation", "created_at", "image_url", "card_animation_url", "avatar_url", "large_image_url", "background_color", "animation_url", "youtube_url"}
	blueprintMechAnimationPrimaryKeyColumns     = []string{"id"}
	blueprintMechAnimationGeneratedColumns      = []string{}
)

type (
	// BlueprintMechAnimationSlice is an alias for a slice of pointers to BlueprintMechAnimation.
	// This should almost always be used instead of []BlueprintMechAnimation.
	BlueprintMechAnimationSlice []*BlueprintMechAnimation
	// BlueprintMechAnimationHook is the signature for custom BlueprintMechAnimation hook methods
	BlueprintMechAnimationHook func(boil.Executor, *BlueprintMechAnimation) error

	blueprintMechAnimationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blueprintMechAnimationType                 = reflect.TypeOf(&BlueprintMechAnimation{})
	blueprintMechAnimationMapping              = queries.MakeStructMapping(blueprintMechAnimationType)
	blueprintMechAnimationPrimaryKeyMapping, _ = queries.BindMapping(blueprintMechAnimationType, blueprintMechAnimationMapping, blueprintMechAnimationPrimaryKeyColumns)
	blueprintMechAnimationInsertCacheMut       sync.RWMutex
	blueprintMechAnimationInsertCache          = make(map[string]insertCache)
	blueprintMechAnimationUpdateCacheMut       sync.RWMutex
	blueprintMechAnimationUpdateCache          = make(map[string]updateCache)
	blueprintMechAnimationUpsertCacheMut       sync.RWMutex
	blueprintMechAnimationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var blueprintMechAnimationAfterSelectHooks []BlueprintMechAnimationHook

var blueprintMechAnimationBeforeInsertHooks []BlueprintMechAnimationHook
var blueprintMechAnimationAfterInsertHooks []BlueprintMechAnimationHook

var blueprintMechAnimationBeforeUpdateHooks []BlueprintMechAnimationHook
var blueprintMechAnimationAfterUpdateHooks []BlueprintMechAnimationHook

var blueprintMechAnimationBeforeDeleteHooks []BlueprintMechAnimationHook
var blueprintMechAnimationAfterDeleteHooks []BlueprintMechAnimationHook

var blueprintMechAnimationBeforeUpsertHooks []BlueprintMechAnimationHook
var blueprintMechAnimationAfterUpsertHooks []BlueprintMechAnimationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BlueprintMechAnimation) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechAnimationAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BlueprintMechAnimation) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechAnimationBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BlueprintMechAnimation) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechAnimationAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BlueprintMechAnimation) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechAnimationBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BlueprintMechAnimation) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechAnimationAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BlueprintMechAnimation) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechAnimationBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BlueprintMechAnimation) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechAnimationAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BlueprintMechAnimation) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechAnimationBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BlueprintMechAnimation) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintMechAnimationAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBlueprintMechAnimationHook registers your hook function for all future operations.
func AddBlueprintMechAnimationHook(hookPoint boil.HookPoint, blueprintMechAnimationHook BlueprintMechAnimationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		blueprintMechAnimationAfterSelectHooks = append(blueprintMechAnimationAfterSelectHooks, blueprintMechAnimationHook)
	case boil.BeforeInsertHook:
		blueprintMechAnimationBeforeInsertHooks = append(blueprintMechAnimationBeforeInsertHooks, blueprintMechAnimationHook)
	case boil.AfterInsertHook:
		blueprintMechAnimationAfterInsertHooks = append(blueprintMechAnimationAfterInsertHooks, blueprintMechAnimationHook)
	case boil.BeforeUpdateHook:
		blueprintMechAnimationBeforeUpdateHooks = append(blueprintMechAnimationBeforeUpdateHooks, blueprintMechAnimationHook)
	case boil.AfterUpdateHook:
		blueprintMechAnimationAfterUpdateHooks = append(blueprintMechAnimationAfterUpdateHooks, blueprintMechAnimationHook)
	case boil.BeforeDeleteHook:
		blueprintMechAnimationBeforeDeleteHooks = append(blueprintMechAnimationBeforeDeleteHooks, blueprintMechAnimationHook)
	case boil.AfterDeleteHook:
		blueprintMechAnimationAfterDeleteHooks = append(blueprintMechAnimationAfterDeleteHooks, blueprintMechAnimationHook)
	case boil.BeforeUpsertHook:
		blueprintMechAnimationBeforeUpsertHooks = append(blueprintMechAnimationBeforeUpsertHooks, blueprintMechAnimationHook)
	case boil.AfterUpsertHook:
		blueprintMechAnimationAfterUpsertHooks = append(blueprintMechAnimationAfterUpsertHooks, blueprintMechAnimationHook)
	}
}

// One returns a single blueprintMechAnimation record from the query.
func (q blueprintMechAnimationQuery) One(exec boil.Executor) (*BlueprintMechAnimation, error) {
	o := &BlueprintMechAnimation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for blueprint_mech_animation")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BlueprintMechAnimation records from the query.
func (q blueprintMechAnimationQuery) All(exec boil.Executor) (BlueprintMechAnimationSlice, error) {
	var o []*BlueprintMechAnimation

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BlueprintMechAnimation slice")
	}

	if len(blueprintMechAnimationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BlueprintMechAnimation records in the query.
func (q blueprintMechAnimationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count blueprint_mech_animation rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q blueprintMechAnimationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if blueprint_mech_animation exists")
	}

	return count > 0, nil
}

// BlueprintMechAnimationMechModel pointed to by the foreign key.
func (o *BlueprintMechAnimation) BlueprintMechAnimationMechModel(mods ...qm.QueryMod) mechModelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MechModel),
	}

	queryMods = append(queryMods, mods...)

	query := MechModels(queryMods...)
	queries.SetFrom(query.Query, "\"mech_model\"")

	return query
}

// BlueprintMechAnimations retrieves all the mech_animation's MechAnimations with an executor via blueprint_id column.
func (o *BlueprintMechAnimation) BlueprintMechAnimations(mods ...qm.QueryMod) mechAnimationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mech_animation\".\"blueprint_id\"=?", o.ID),
	)

	query := MechAnimations(queryMods...)
	queries.SetFrom(query.Query, "\"mech_animation\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mech_animation\".*"})
	}

	return query
}

// LoadBlueprintMechAnimationMechModel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blueprintMechAnimationL) LoadBlueprintMechAnimationMechModel(e boil.Executor, singular bool, maybeBlueprintMechAnimation interface{}, mods queries.Applicator) error {
	var slice []*BlueprintMechAnimation
	var object *BlueprintMechAnimation

	if singular {
		object = maybeBlueprintMechAnimation.(*BlueprintMechAnimation)
	} else {
		slice = *maybeBlueprintMechAnimation.(*[]*BlueprintMechAnimation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintMechAnimationR{}
		}
		args = append(args, object.MechModel)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintMechAnimationR{}
			}

			for _, a := range args {
				if a == obj.MechModel {
					continue Outer
				}
			}

			args = append(args, obj.MechModel)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_model`),
		qm.WhereIn(`mech_model.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MechModel")
	}

	var resultSlice []*MechModel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MechModel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mech_model")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_model")
	}

	if len(blueprintMechAnimationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BlueprintMechAnimationMechModel = foreign
		if foreign.R == nil {
			foreign.R = &mechModelR{}
		}
		foreign.R.BlueprintMechAnimations = append(foreign.R.BlueprintMechAnimations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MechModel == foreign.ID {
				local.R.BlueprintMechAnimationMechModel = foreign
				if foreign.R == nil {
					foreign.R = &mechModelR{}
				}
				foreign.R.BlueprintMechAnimations = append(foreign.R.BlueprintMechAnimations, local)
				break
			}
		}
	}

	return nil
}

// LoadBlueprintMechAnimations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blueprintMechAnimationL) LoadBlueprintMechAnimations(e boil.Executor, singular bool, maybeBlueprintMechAnimation interface{}, mods queries.Applicator) error {
	var slice []*BlueprintMechAnimation
	var object *BlueprintMechAnimation

	if singular {
		object = maybeBlueprintMechAnimation.(*BlueprintMechAnimation)
	} else {
		slice = *maybeBlueprintMechAnimation.(*[]*BlueprintMechAnimation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintMechAnimationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintMechAnimationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_animation`),
		qm.WhereIn(`mech_animation.blueprint_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mech_animation")
	}

	var resultSlice []*MechAnimation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mech_animation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mech_animation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_animation")
	}

	if len(mechAnimationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlueprintMechAnimations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mechAnimationR{}
			}
			foreign.R.Blueprint = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BlueprintID {
				local.R.BlueprintMechAnimations = append(local.R.BlueprintMechAnimations, foreign)
				if foreign.R == nil {
					foreign.R = &mechAnimationR{}
				}
				foreign.R.Blueprint = local
				break
			}
		}
	}

	return nil
}

// SetBlueprintMechAnimationMechModel of the blueprintMechAnimation to the related item.
// Sets o.R.BlueprintMechAnimationMechModel to related.
// Adds o to related.R.BlueprintMechAnimations.
func (o *BlueprintMechAnimation) SetBlueprintMechAnimationMechModel(exec boil.Executor, insert bool, related *MechModel) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"blueprint_mech_animation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mech_model"}),
		strmangle.WhereClause("\"", "\"", 2, blueprintMechAnimationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MechModel = related.ID
	if o.R == nil {
		o.R = &blueprintMechAnimationR{
			BlueprintMechAnimationMechModel: related,
		}
	} else {
		o.R.BlueprintMechAnimationMechModel = related
	}

	if related.R == nil {
		related.R = &mechModelR{
			BlueprintMechAnimations: BlueprintMechAnimationSlice{o},
		}
	} else {
		related.R.BlueprintMechAnimations = append(related.R.BlueprintMechAnimations, o)
	}

	return nil
}

// AddBlueprintMechAnimations adds the given related objects to the existing relationships
// of the blueprint_mech_animation, optionally inserting them as new records.
// Appends related to o.R.BlueprintMechAnimations.
// Sets related.R.Blueprint appropriately.
func (o *BlueprintMechAnimation) AddBlueprintMechAnimations(exec boil.Executor, insert bool, related ...*MechAnimation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BlueprintID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mech_animation\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_id"}),
				strmangle.WhereClause("\"", "\"", 2, mechAnimationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BlueprintID = o.ID
		}
	}

	if o.R == nil {
		o.R = &blueprintMechAnimationR{
			BlueprintMechAnimations: related,
		}
	} else {
		o.R.BlueprintMechAnimations = append(o.R.BlueprintMechAnimations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mechAnimationR{
				Blueprint: o,
			}
		} else {
			rel.R.Blueprint = o
		}
	}
	return nil
}

// BlueprintMechAnimations retrieves all the records using an executor.
func BlueprintMechAnimations(mods ...qm.QueryMod) blueprintMechAnimationQuery {
	mods = append(mods, qm.From("\"blueprint_mech_animation\""))
	return blueprintMechAnimationQuery{NewQuery(mods...)}
}

// FindBlueprintMechAnimation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlueprintMechAnimation(exec boil.Executor, iD string, selectCols ...string) (*BlueprintMechAnimation, error) {
	blueprintMechAnimationObj := &BlueprintMechAnimation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"blueprint_mech_animation\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, blueprintMechAnimationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from blueprint_mech_animation")
	}

	if err = blueprintMechAnimationObj.doAfterSelectHooks(exec); err != nil {
		return blueprintMechAnimationObj, err
	}

	return blueprintMechAnimationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlueprintMechAnimation) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_mech_animation provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintMechAnimationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blueprintMechAnimationInsertCacheMut.RLock()
	cache, cached := blueprintMechAnimationInsertCache[key]
	blueprintMechAnimationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blueprintMechAnimationAllColumns,
			blueprintMechAnimationColumnsWithDefault,
			blueprintMechAnimationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blueprintMechAnimationType, blueprintMechAnimationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blueprintMechAnimationType, blueprintMechAnimationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"blueprint_mech_animation\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"blueprint_mech_animation\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into blueprint_mech_animation")
	}

	if !cached {
		blueprintMechAnimationInsertCacheMut.Lock()
		blueprintMechAnimationInsertCache[key] = cache
		blueprintMechAnimationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BlueprintMechAnimation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlueprintMechAnimation) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	blueprintMechAnimationUpdateCacheMut.RLock()
	cache, cached := blueprintMechAnimationUpdateCache[key]
	blueprintMechAnimationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blueprintMechAnimationAllColumns,
			blueprintMechAnimationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update blueprint_mech_animation, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"blueprint_mech_animation\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, blueprintMechAnimationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blueprintMechAnimationType, blueprintMechAnimationMapping, append(wl, blueprintMechAnimationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update blueprint_mech_animation row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for blueprint_mech_animation")
	}

	if !cached {
		blueprintMechAnimationUpdateCacheMut.Lock()
		blueprintMechAnimationUpdateCache[key] = cache
		blueprintMechAnimationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q blueprintMechAnimationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for blueprint_mech_animation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for blueprint_mech_animation")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlueprintMechAnimationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintMechAnimationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"blueprint_mech_animation\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, blueprintMechAnimationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in blueprintMechAnimation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all blueprintMechAnimation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlueprintMechAnimation) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_mech_animation provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintMechAnimationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blueprintMechAnimationUpsertCacheMut.RLock()
	cache, cached := blueprintMechAnimationUpsertCache[key]
	blueprintMechAnimationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blueprintMechAnimationAllColumns,
			blueprintMechAnimationColumnsWithDefault,
			blueprintMechAnimationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			blueprintMechAnimationAllColumns,
			blueprintMechAnimationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert blueprint_mech_animation, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(blueprintMechAnimationPrimaryKeyColumns))
			copy(conflict, blueprintMechAnimationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"blueprint_mech_animation\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(blueprintMechAnimationType, blueprintMechAnimationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blueprintMechAnimationType, blueprintMechAnimationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert blueprint_mech_animation")
	}

	if !cached {
		blueprintMechAnimationUpsertCacheMut.Lock()
		blueprintMechAnimationUpsertCache[key] = cache
		blueprintMechAnimationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BlueprintMechAnimation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlueprintMechAnimation) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BlueprintMechAnimation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blueprintMechAnimationPrimaryKeyMapping)
	sql := "DELETE FROM \"blueprint_mech_animation\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from blueprint_mech_animation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for blueprint_mech_animation")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q blueprintMechAnimationQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no blueprintMechAnimationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprint_mech_animation")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_mech_animation")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlueprintMechAnimationSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(blueprintMechAnimationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintMechAnimationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"blueprint_mech_animation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintMechAnimationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprintMechAnimation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_mech_animation")
	}

	if len(blueprintMechAnimationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlueprintMechAnimation) Reload(exec boil.Executor) error {
	ret, err := FindBlueprintMechAnimation(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlueprintMechAnimationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlueprintMechAnimationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintMechAnimationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"blueprint_mech_animation\".* FROM \"blueprint_mech_animation\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintMechAnimationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BlueprintMechAnimationSlice")
	}

	*o = slice

	return nil
}

// BlueprintMechAnimationExists checks if the BlueprintMechAnimation row exists.
func BlueprintMechAnimationExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"blueprint_mech_animation\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if blueprint_mech_animation exists")
	}

	return exists, nil
}
