// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PlayersQuest is an object representing the database table.
type PlayersQuest struct {
	PlayerID  string    `boiler:"player_id" boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	QuestID   string    `boiler:"quest_id" boil:"quest_id" json:"quest_id" toml:"quest_id" yaml:"quest_id"`
	CreatedAt time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *playersQuestR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L playersQuestL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlayersQuestColumns = struct {
	PlayerID  string
	QuestID   string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	PlayerID:  "player_id",
	QuestID:   "quest_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var PlayersQuestTableColumns = struct {
	PlayerID  string
	QuestID   string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	PlayerID:  "players_quests.player_id",
	QuestID:   "players_quests.quest_id",
	CreatedAt: "players_quests.created_at",
	UpdatedAt: "players_quests.updated_at",
	DeletedAt: "players_quests.deleted_at",
}

// Generated where

var PlayersQuestWhere = struct {
	PlayerID  whereHelperstring
	QuestID   whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
}{
	PlayerID:  whereHelperstring{field: "\"players_quests\".\"player_id\""},
	QuestID:   whereHelperstring{field: "\"players_quests\".\"quest_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"players_quests\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"players_quests\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"players_quests\".\"deleted_at\""},
}

// PlayersQuestRels is where relationship names are stored.
var PlayersQuestRels = struct {
	Player string
	Quest  string
}{
	Player: "Player",
	Quest:  "Quest",
}

// playersQuestR is where relationships are stored.
type playersQuestR struct {
	Player *Player `boiler:"Player" boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
	Quest  *Quest  `boiler:"Quest" boil:"Quest" json:"Quest" toml:"Quest" yaml:"Quest"`
}

// NewStruct creates a new relationship struct
func (*playersQuestR) NewStruct() *playersQuestR {
	return &playersQuestR{}
}

// playersQuestL is where Load methods for each relationship are stored.
type playersQuestL struct{}

var (
	playersQuestAllColumns            = []string{"player_id", "quest_id", "created_at", "updated_at", "deleted_at"}
	playersQuestColumnsWithoutDefault = []string{"player_id", "quest_id"}
	playersQuestColumnsWithDefault    = []string{"created_at", "updated_at", "deleted_at"}
	playersQuestPrimaryKeyColumns     = []string{"player_id", "quest_id"}
	playersQuestGeneratedColumns      = []string{}
)

type (
	// PlayersQuestSlice is an alias for a slice of pointers to PlayersQuest.
	// This should almost always be used instead of []PlayersQuest.
	PlayersQuestSlice []*PlayersQuest
	// PlayersQuestHook is the signature for custom PlayersQuest hook methods
	PlayersQuestHook func(boil.Executor, *PlayersQuest) error

	playersQuestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playersQuestType                 = reflect.TypeOf(&PlayersQuest{})
	playersQuestMapping              = queries.MakeStructMapping(playersQuestType)
	playersQuestPrimaryKeyMapping, _ = queries.BindMapping(playersQuestType, playersQuestMapping, playersQuestPrimaryKeyColumns)
	playersQuestInsertCacheMut       sync.RWMutex
	playersQuestInsertCache          = make(map[string]insertCache)
	playersQuestUpdateCacheMut       sync.RWMutex
	playersQuestUpdateCache          = make(map[string]updateCache)
	playersQuestUpsertCacheMut       sync.RWMutex
	playersQuestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var playersQuestAfterSelectHooks []PlayersQuestHook

var playersQuestBeforeInsertHooks []PlayersQuestHook
var playersQuestAfterInsertHooks []PlayersQuestHook

var playersQuestBeforeUpdateHooks []PlayersQuestHook
var playersQuestAfterUpdateHooks []PlayersQuestHook

var playersQuestBeforeDeleteHooks []PlayersQuestHook
var playersQuestAfterDeleteHooks []PlayersQuestHook

var playersQuestBeforeUpsertHooks []PlayersQuestHook
var playersQuestAfterUpsertHooks []PlayersQuestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PlayersQuest) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range playersQuestAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PlayersQuest) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playersQuestBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PlayersQuest) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playersQuestAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PlayersQuest) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range playersQuestBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PlayersQuest) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range playersQuestAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PlayersQuest) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range playersQuestBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PlayersQuest) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range playersQuestAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PlayersQuest) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playersQuestBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PlayersQuest) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playersQuestAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlayersQuestHook registers your hook function for all future operations.
func AddPlayersQuestHook(hookPoint boil.HookPoint, playersQuestHook PlayersQuestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		playersQuestAfterSelectHooks = append(playersQuestAfterSelectHooks, playersQuestHook)
	case boil.BeforeInsertHook:
		playersQuestBeforeInsertHooks = append(playersQuestBeforeInsertHooks, playersQuestHook)
	case boil.AfterInsertHook:
		playersQuestAfterInsertHooks = append(playersQuestAfterInsertHooks, playersQuestHook)
	case boil.BeforeUpdateHook:
		playersQuestBeforeUpdateHooks = append(playersQuestBeforeUpdateHooks, playersQuestHook)
	case boil.AfterUpdateHook:
		playersQuestAfterUpdateHooks = append(playersQuestAfterUpdateHooks, playersQuestHook)
	case boil.BeforeDeleteHook:
		playersQuestBeforeDeleteHooks = append(playersQuestBeforeDeleteHooks, playersQuestHook)
	case boil.AfterDeleteHook:
		playersQuestAfterDeleteHooks = append(playersQuestAfterDeleteHooks, playersQuestHook)
	case boil.BeforeUpsertHook:
		playersQuestBeforeUpsertHooks = append(playersQuestBeforeUpsertHooks, playersQuestHook)
	case boil.AfterUpsertHook:
		playersQuestAfterUpsertHooks = append(playersQuestAfterUpsertHooks, playersQuestHook)
	}
}

// One returns a single playersQuest record from the query.
func (q playersQuestQuery) One(exec boil.Executor) (*PlayersQuest, error) {
	o := &PlayersQuest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for players_quests")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PlayersQuest records from the query.
func (q playersQuestQuery) All(exec boil.Executor) (PlayersQuestSlice, error) {
	var o []*PlayersQuest

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to PlayersQuest slice")
	}

	if len(playersQuestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PlayersQuest records in the query.
func (q playersQuestQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count players_quests rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q playersQuestQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if players_quests exists")
	}

	return count > 0, nil
}

// Player pointed to by the foreign key.
func (o *PlayersQuest) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// Quest pointed to by the foreign key.
func (o *PlayersQuest) Quest(mods ...qm.QueryMod) questQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.QuestID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Quests(queryMods...)
	queries.SetFrom(query.Query, "\"quests\"")

	return query
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playersQuestL) LoadPlayer(e boil.Executor, singular bool, maybePlayersQuest interface{}, mods queries.Applicator) error {
	var slice []*PlayersQuest
	var object *PlayersQuest

	if singular {
		object = maybePlayersQuest.(*PlayersQuest)
	} else {
		slice = *maybePlayersQuest.(*[]*PlayersQuest)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playersQuestR{}
		}
		args = append(args, object.PlayerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playersQuestR{}
			}

			for _, a := range args {
				if a == obj.PlayerID {
					continue Outer
				}
			}

			args = append(args, obj.PlayerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(playersQuestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.PlayersQuests = append(foreign.R.PlayersQuests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.ID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.PlayersQuests = append(foreign.R.PlayersQuests, local)
				break
			}
		}
	}

	return nil
}

// LoadQuest allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playersQuestL) LoadQuest(e boil.Executor, singular bool, maybePlayersQuest interface{}, mods queries.Applicator) error {
	var slice []*PlayersQuest
	var object *PlayersQuest

	if singular {
		object = maybePlayersQuest.(*PlayersQuest)
	} else {
		slice = *maybePlayersQuest.(*[]*PlayersQuest)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playersQuestR{}
		}
		args = append(args, object.QuestID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playersQuestR{}
			}

			for _, a := range args {
				if a == obj.QuestID {
					continue Outer
				}
			}

			args = append(args, obj.QuestID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`quests`),
		qm.WhereIn(`quests.id in ?`, args...),
		qmhelper.WhereIsNull(`quests.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Quest")
	}

	var resultSlice []*Quest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Quest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for quests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for quests")
	}

	if len(playersQuestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Quest = foreign
		if foreign.R == nil {
			foreign.R = &questR{}
		}
		foreign.R.PlayersQuests = append(foreign.R.PlayersQuests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.QuestID == foreign.ID {
				local.R.Quest = foreign
				if foreign.R == nil {
					foreign.R = &questR{}
				}
				foreign.R.PlayersQuests = append(foreign.R.PlayersQuests, local)
				break
			}
		}
	}

	return nil
}

// SetPlayer of the playersQuest to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.PlayersQuests.
func (o *PlayersQuest) SetPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"players_quests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, playersQuestPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.PlayerID, o.QuestID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.ID
	if o.R == nil {
		o.R = &playersQuestR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			PlayersQuests: PlayersQuestSlice{o},
		}
	} else {
		related.R.PlayersQuests = append(related.R.PlayersQuests, o)
	}

	return nil
}

// SetQuest of the playersQuest to the related item.
// Sets o.R.Quest to related.
// Adds o to related.R.PlayersQuests.
func (o *PlayersQuest) SetQuest(exec boil.Executor, insert bool, related *Quest) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"players_quests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"quest_id"}),
		strmangle.WhereClause("\"", "\"", 2, playersQuestPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.PlayerID, o.QuestID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.QuestID = related.ID
	if o.R == nil {
		o.R = &playersQuestR{
			Quest: related,
		}
	} else {
		o.R.Quest = related
	}

	if related.R == nil {
		related.R = &questR{
			PlayersQuests: PlayersQuestSlice{o},
		}
	} else {
		related.R.PlayersQuests = append(related.R.PlayersQuests, o)
	}

	return nil
}

// PlayersQuests retrieves all the records using an executor.
func PlayersQuests(mods ...qm.QueryMod) playersQuestQuery {
	mods = append(mods, qm.From("\"players_quests\""), qmhelper.WhereIsNull("\"players_quests\".\"deleted_at\""))
	return playersQuestQuery{NewQuery(mods...)}
}

// FindPlayersQuest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlayersQuest(exec boil.Executor, playerID string, questID string, selectCols ...string) (*PlayersQuest, error) {
	playersQuestObj := &PlayersQuest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"players_quests\" where \"player_id\"=$1 AND \"quest_id\"=$2 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, playerID, questID)

	err := q.Bind(nil, exec, playersQuestObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from players_quests")
	}

	if err = playersQuestObj.doAfterSelectHooks(exec); err != nil {
		return playersQuestObj, err
	}

	return playersQuestObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PlayersQuest) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no players_quests provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playersQuestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	playersQuestInsertCacheMut.RLock()
	cache, cached := playersQuestInsertCache[key]
	playersQuestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			playersQuestAllColumns,
			playersQuestColumnsWithDefault,
			playersQuestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(playersQuestType, playersQuestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(playersQuestType, playersQuestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"players_quests\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"players_quests\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into players_quests")
	}

	if !cached {
		playersQuestInsertCacheMut.Lock()
		playersQuestInsertCache[key] = cache
		playersQuestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the PlayersQuest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PlayersQuest) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	playersQuestUpdateCacheMut.RLock()
	cache, cached := playersQuestUpdateCache[key]
	playersQuestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			playersQuestAllColumns,
			playersQuestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update players_quests, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"players_quests\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, playersQuestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(playersQuestType, playersQuestMapping, append(wl, playersQuestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update players_quests row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for players_quests")
	}

	if !cached {
		playersQuestUpdateCacheMut.Lock()
		playersQuestUpdateCache[key] = cache
		playersQuestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q playersQuestQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for players_quests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for players_quests")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlayersQuestSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playersQuestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"players_quests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, playersQuestPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in playersQuest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all playersQuest")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PlayersQuest) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no players_quests provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playersQuestColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	playersQuestUpsertCacheMut.RLock()
	cache, cached := playersQuestUpsertCache[key]
	playersQuestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			playersQuestAllColumns,
			playersQuestColumnsWithDefault,
			playersQuestColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			playersQuestAllColumns,
			playersQuestPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert players_quests, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(playersQuestPrimaryKeyColumns))
			copy(conflict, playersQuestPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"players_quests\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(playersQuestType, playersQuestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(playersQuestType, playersQuestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert players_quests")
	}

	if !cached {
		playersQuestUpsertCacheMut.Lock()
		playersQuestUpsertCache[key] = cache
		playersQuestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single PlayersQuest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PlayersQuest) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no PlayersQuest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), playersQuestPrimaryKeyMapping)
		sql = "DELETE FROM \"players_quests\" WHERE \"player_id\"=$1 AND \"quest_id\"=$2"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"players_quests\" SET %s WHERE \"player_id\"=$2 AND \"quest_id\"=$3",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(playersQuestType, playersQuestMapping, append(wl, playersQuestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from players_quests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for players_quests")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q playersQuestQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no playersQuestQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from players_quests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for players_quests")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlayersQuestSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(playersQuestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playersQuestPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"players_quests\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playersQuestPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playersQuestPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"players_quests\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, playersQuestPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from playersQuest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for players_quests")
	}

	if len(playersQuestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PlayersQuest) Reload(exec boil.Executor) error {
	ret, err := FindPlayersQuest(exec, o.PlayerID, o.QuestID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlayersQuestSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlayersQuestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playersQuestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"players_quests\".* FROM \"players_quests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playersQuestPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in PlayersQuestSlice")
	}

	*o = slice

	return nil
}

// PlayersQuestExists checks if the PlayersQuest row exists.
func PlayersQuestExists(exec boil.Executor, playerID string, questID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"players_quests\" where \"player_id\"=$1 AND \"quest_id\"=$2 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, playerID, questID)
	}
	row := exec.QueryRow(sql, playerID, questID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if players_quests exists")
	}

	return exists, nil
}
