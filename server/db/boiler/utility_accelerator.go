// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UtilityAccelerator is an object representing the database table.
type UtilityAccelerator struct {
	UtilityID    string `boiler:"utility_id" boil:"utility_id" json:"utility_id" toml:"utility_id" yaml:"utility_id"`
	EnergyCost   int    `boiler:"energy_cost" boil:"energy_cost" json:"energy_cost" toml:"energy_cost" yaml:"energy_cost"`
	BoostSeconds int    `boiler:"boost_seconds" boil:"boost_seconds" json:"boost_seconds" toml:"boost_seconds" yaml:"boost_seconds"`
	BoostAmount  int    `boiler:"boost_amount" boil:"boost_amount" json:"boost_amount" toml:"boost_amount" yaml:"boost_amount"`

	R *utilityAcceleratorR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L utilityAcceleratorL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UtilityAcceleratorColumns = struct {
	UtilityID    string
	EnergyCost   string
	BoostSeconds string
	BoostAmount  string
}{
	UtilityID:    "utility_id",
	EnergyCost:   "energy_cost",
	BoostSeconds: "boost_seconds",
	BoostAmount:  "boost_amount",
}

var UtilityAcceleratorTableColumns = struct {
	UtilityID    string
	EnergyCost   string
	BoostSeconds string
	BoostAmount  string
}{
	UtilityID:    "utility_accelerator.utility_id",
	EnergyCost:   "utility_accelerator.energy_cost",
	BoostSeconds: "utility_accelerator.boost_seconds",
	BoostAmount:  "utility_accelerator.boost_amount",
}

// Generated where

var UtilityAcceleratorWhere = struct {
	UtilityID    whereHelperstring
	EnergyCost   whereHelperint
	BoostSeconds whereHelperint
	BoostAmount  whereHelperint
}{
	UtilityID:    whereHelperstring{field: "\"utility_accelerator\".\"utility_id\""},
	EnergyCost:   whereHelperint{field: "\"utility_accelerator\".\"energy_cost\""},
	BoostSeconds: whereHelperint{field: "\"utility_accelerator\".\"boost_seconds\""},
	BoostAmount:  whereHelperint{field: "\"utility_accelerator\".\"boost_amount\""},
}

// UtilityAcceleratorRels is where relationship names are stored.
var UtilityAcceleratorRels = struct {
	Utility string
}{
	Utility: "Utility",
}

// utilityAcceleratorR is where relationships are stored.
type utilityAcceleratorR struct {
	Utility *Utility `boiler:"Utility" boil:"Utility" json:"Utility" toml:"Utility" yaml:"Utility"`
}

// NewStruct creates a new relationship struct
func (*utilityAcceleratorR) NewStruct() *utilityAcceleratorR {
	return &utilityAcceleratorR{}
}

// utilityAcceleratorL is where Load methods for each relationship are stored.
type utilityAcceleratorL struct{}

var (
	utilityAcceleratorAllColumns            = []string{"utility_id", "energy_cost", "boost_seconds", "boost_amount"}
	utilityAcceleratorColumnsWithoutDefault = []string{"utility_id", "energy_cost", "boost_seconds", "boost_amount"}
	utilityAcceleratorColumnsWithDefault    = []string{}
	utilityAcceleratorPrimaryKeyColumns     = []string{"utility_id"}
	utilityAcceleratorGeneratedColumns      = []string{}
)

type (
	// UtilityAcceleratorSlice is an alias for a slice of pointers to UtilityAccelerator.
	// This should almost always be used instead of []UtilityAccelerator.
	UtilityAcceleratorSlice []*UtilityAccelerator
	// UtilityAcceleratorHook is the signature for custom UtilityAccelerator hook methods
	UtilityAcceleratorHook func(boil.Executor, *UtilityAccelerator) error

	utilityAcceleratorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	utilityAcceleratorType                 = reflect.TypeOf(&UtilityAccelerator{})
	utilityAcceleratorMapping              = queries.MakeStructMapping(utilityAcceleratorType)
	utilityAcceleratorPrimaryKeyMapping, _ = queries.BindMapping(utilityAcceleratorType, utilityAcceleratorMapping, utilityAcceleratorPrimaryKeyColumns)
	utilityAcceleratorInsertCacheMut       sync.RWMutex
	utilityAcceleratorInsertCache          = make(map[string]insertCache)
	utilityAcceleratorUpdateCacheMut       sync.RWMutex
	utilityAcceleratorUpdateCache          = make(map[string]updateCache)
	utilityAcceleratorUpsertCacheMut       sync.RWMutex
	utilityAcceleratorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var utilityAcceleratorAfterSelectHooks []UtilityAcceleratorHook

var utilityAcceleratorBeforeInsertHooks []UtilityAcceleratorHook
var utilityAcceleratorAfterInsertHooks []UtilityAcceleratorHook

var utilityAcceleratorBeforeUpdateHooks []UtilityAcceleratorHook
var utilityAcceleratorAfterUpdateHooks []UtilityAcceleratorHook

var utilityAcceleratorBeforeDeleteHooks []UtilityAcceleratorHook
var utilityAcceleratorAfterDeleteHooks []UtilityAcceleratorHook

var utilityAcceleratorBeforeUpsertHooks []UtilityAcceleratorHook
var utilityAcceleratorAfterUpsertHooks []UtilityAcceleratorHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UtilityAccelerator) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range utilityAcceleratorAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UtilityAccelerator) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range utilityAcceleratorBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UtilityAccelerator) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range utilityAcceleratorAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UtilityAccelerator) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range utilityAcceleratorBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UtilityAccelerator) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range utilityAcceleratorAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UtilityAccelerator) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range utilityAcceleratorBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UtilityAccelerator) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range utilityAcceleratorAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UtilityAccelerator) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range utilityAcceleratorBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UtilityAccelerator) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range utilityAcceleratorAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUtilityAcceleratorHook registers your hook function for all future operations.
func AddUtilityAcceleratorHook(hookPoint boil.HookPoint, utilityAcceleratorHook UtilityAcceleratorHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		utilityAcceleratorAfterSelectHooks = append(utilityAcceleratorAfterSelectHooks, utilityAcceleratorHook)
	case boil.BeforeInsertHook:
		utilityAcceleratorBeforeInsertHooks = append(utilityAcceleratorBeforeInsertHooks, utilityAcceleratorHook)
	case boil.AfterInsertHook:
		utilityAcceleratorAfterInsertHooks = append(utilityAcceleratorAfterInsertHooks, utilityAcceleratorHook)
	case boil.BeforeUpdateHook:
		utilityAcceleratorBeforeUpdateHooks = append(utilityAcceleratorBeforeUpdateHooks, utilityAcceleratorHook)
	case boil.AfterUpdateHook:
		utilityAcceleratorAfterUpdateHooks = append(utilityAcceleratorAfterUpdateHooks, utilityAcceleratorHook)
	case boil.BeforeDeleteHook:
		utilityAcceleratorBeforeDeleteHooks = append(utilityAcceleratorBeforeDeleteHooks, utilityAcceleratorHook)
	case boil.AfterDeleteHook:
		utilityAcceleratorAfterDeleteHooks = append(utilityAcceleratorAfterDeleteHooks, utilityAcceleratorHook)
	case boil.BeforeUpsertHook:
		utilityAcceleratorBeforeUpsertHooks = append(utilityAcceleratorBeforeUpsertHooks, utilityAcceleratorHook)
	case boil.AfterUpsertHook:
		utilityAcceleratorAfterUpsertHooks = append(utilityAcceleratorAfterUpsertHooks, utilityAcceleratorHook)
	}
}

// One returns a single utilityAccelerator record from the query.
func (q utilityAcceleratorQuery) One(exec boil.Executor) (*UtilityAccelerator, error) {
	o := &UtilityAccelerator{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for utility_accelerator")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UtilityAccelerator records from the query.
func (q utilityAcceleratorQuery) All(exec boil.Executor) (UtilityAcceleratorSlice, error) {
	var o []*UtilityAccelerator

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to UtilityAccelerator slice")
	}

	if len(utilityAcceleratorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UtilityAccelerator records in the query.
func (q utilityAcceleratorQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count utility_accelerator rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q utilityAcceleratorQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if utility_accelerator exists")
	}

	return count > 0, nil
}

// Utility pointed to by the foreign key.
func (o *UtilityAccelerator) Utility(mods ...qm.QueryMod) utilityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UtilityID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Utilities(queryMods...)
	queries.SetFrom(query.Query, "\"utility\"")

	return query
}

// LoadUtility allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (utilityAcceleratorL) LoadUtility(e boil.Executor, singular bool, maybeUtilityAccelerator interface{}, mods queries.Applicator) error {
	var slice []*UtilityAccelerator
	var object *UtilityAccelerator

	if singular {
		object = maybeUtilityAccelerator.(*UtilityAccelerator)
	} else {
		slice = *maybeUtilityAccelerator.(*[]*UtilityAccelerator)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &utilityAcceleratorR{}
		}
		args = append(args, object.UtilityID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &utilityAcceleratorR{}
			}

			for _, a := range args {
				if a == obj.UtilityID {
					continue Outer
				}
			}

			args = append(args, obj.UtilityID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`utility`),
		qm.WhereIn(`utility.id in ?`, args...),
		qmhelper.WhereIsNull(`utility.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Utility")
	}

	var resultSlice []*Utility
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Utility")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for utility")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for utility")
	}

	if len(utilityAcceleratorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Utility = foreign
		if foreign.R == nil {
			foreign.R = &utilityR{}
		}
		foreign.R.UtilityAccelerator = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UtilityID == foreign.ID {
				local.R.Utility = foreign
				if foreign.R == nil {
					foreign.R = &utilityR{}
				}
				foreign.R.UtilityAccelerator = local
				break
			}
		}
	}

	return nil
}

// SetUtility of the utilityAccelerator to the related item.
// Sets o.R.Utility to related.
// Adds o to related.R.UtilityAccelerator.
func (o *UtilityAccelerator) SetUtility(exec boil.Executor, insert bool, related *Utility) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"utility_accelerator\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"utility_id"}),
		strmangle.WhereClause("\"", "\"", 2, utilityAcceleratorPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UtilityID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UtilityID = related.ID
	if o.R == nil {
		o.R = &utilityAcceleratorR{
			Utility: related,
		}
	} else {
		o.R.Utility = related
	}

	if related.R == nil {
		related.R = &utilityR{
			UtilityAccelerator: o,
		}
	} else {
		related.R.UtilityAccelerator = o
	}

	return nil
}

// UtilityAccelerators retrieves all the records using an executor.
func UtilityAccelerators(mods ...qm.QueryMod) utilityAcceleratorQuery {
	mods = append(mods, qm.From("\"utility_accelerator\""))
	return utilityAcceleratorQuery{NewQuery(mods...)}
}

// FindUtilityAccelerator retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUtilityAccelerator(exec boil.Executor, utilityID string, selectCols ...string) (*UtilityAccelerator, error) {
	utilityAcceleratorObj := &UtilityAccelerator{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"utility_accelerator\" where \"utility_id\"=$1", sel,
	)

	q := queries.Raw(query, utilityID)

	err := q.Bind(nil, exec, utilityAcceleratorObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from utility_accelerator")
	}

	if err = utilityAcceleratorObj.doAfterSelectHooks(exec); err != nil {
		return utilityAcceleratorObj, err
	}

	return utilityAcceleratorObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UtilityAccelerator) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no utility_accelerator provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(utilityAcceleratorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	utilityAcceleratorInsertCacheMut.RLock()
	cache, cached := utilityAcceleratorInsertCache[key]
	utilityAcceleratorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			utilityAcceleratorAllColumns,
			utilityAcceleratorColumnsWithDefault,
			utilityAcceleratorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(utilityAcceleratorType, utilityAcceleratorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(utilityAcceleratorType, utilityAcceleratorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"utility_accelerator\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"utility_accelerator\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into utility_accelerator")
	}

	if !cached {
		utilityAcceleratorInsertCacheMut.Lock()
		utilityAcceleratorInsertCache[key] = cache
		utilityAcceleratorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the UtilityAccelerator.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UtilityAccelerator) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	utilityAcceleratorUpdateCacheMut.RLock()
	cache, cached := utilityAcceleratorUpdateCache[key]
	utilityAcceleratorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			utilityAcceleratorAllColumns,
			utilityAcceleratorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update utility_accelerator, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"utility_accelerator\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, utilityAcceleratorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(utilityAcceleratorType, utilityAcceleratorMapping, append(wl, utilityAcceleratorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update utility_accelerator row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for utility_accelerator")
	}

	if !cached {
		utilityAcceleratorUpdateCacheMut.Lock()
		utilityAcceleratorUpdateCache[key] = cache
		utilityAcceleratorUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q utilityAcceleratorQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for utility_accelerator")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for utility_accelerator")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UtilityAcceleratorSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), utilityAcceleratorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"utility_accelerator\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, utilityAcceleratorPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in utilityAccelerator slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all utilityAccelerator")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UtilityAccelerator) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no utility_accelerator provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(utilityAcceleratorColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	utilityAcceleratorUpsertCacheMut.RLock()
	cache, cached := utilityAcceleratorUpsertCache[key]
	utilityAcceleratorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			utilityAcceleratorAllColumns,
			utilityAcceleratorColumnsWithDefault,
			utilityAcceleratorColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			utilityAcceleratorAllColumns,
			utilityAcceleratorPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert utility_accelerator, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(utilityAcceleratorPrimaryKeyColumns))
			copy(conflict, utilityAcceleratorPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"utility_accelerator\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(utilityAcceleratorType, utilityAcceleratorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(utilityAcceleratorType, utilityAcceleratorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert utility_accelerator")
	}

	if !cached {
		utilityAcceleratorUpsertCacheMut.Lock()
		utilityAcceleratorUpsertCache[key] = cache
		utilityAcceleratorUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single UtilityAccelerator record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UtilityAccelerator) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no UtilityAccelerator provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), utilityAcceleratorPrimaryKeyMapping)
	sql := "DELETE FROM \"utility_accelerator\" WHERE \"utility_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from utility_accelerator")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for utility_accelerator")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q utilityAcceleratorQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no utilityAcceleratorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from utility_accelerator")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for utility_accelerator")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UtilityAcceleratorSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(utilityAcceleratorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), utilityAcceleratorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"utility_accelerator\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, utilityAcceleratorPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from utilityAccelerator slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for utility_accelerator")
	}

	if len(utilityAcceleratorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UtilityAccelerator) Reload(exec boil.Executor) error {
	ret, err := FindUtilityAccelerator(exec, o.UtilityID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UtilityAcceleratorSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UtilityAcceleratorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), utilityAcceleratorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"utility_accelerator\".* FROM \"utility_accelerator\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, utilityAcceleratorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in UtilityAcceleratorSlice")
	}

	*o = slice

	return nil
}

// UtilityAcceleratorExists checks if the UtilityAccelerator row exists.
func UtilityAcceleratorExists(exec boil.Executor, utilityID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"utility_accelerator\" where \"utility_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, utilityID)
	}
	row := exec.QueryRow(sql, utilityID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if utility_accelerator exists")
	}

	return exists, nil
}
