// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PunishedPlayer is an object representing the database table.
type PunishedPlayer struct {
	ID                  string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	PlayerID            string      `boiler:"player_id" boil:"player_id" json:"player_id" toml:"player_id" yaml:"player_id"`
	PunishOptionID      string      `boiler:"punish_option_id" boil:"punish_option_id" json:"punish_option_id" toml:"punish_option_id" yaml:"punish_option_id"`
	PunishUntil         time.Time   `boiler:"punish_until" boil:"punish_until" json:"punish_until" toml:"punish_until" yaml:"punish_until"`
	RelatedPunishVoteID null.String `boiler:"related_punish_vote_id" boil:"related_punish_vote_id" json:"related_punish_vote_id,omitempty" toml:"related_punish_vote_id" yaml:"related_punish_vote_id,omitempty"`
	CreatedAt           time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt           time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt           null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *punishedPlayerR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L punishedPlayerL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PunishedPlayerColumns = struct {
	ID                  string
	PlayerID            string
	PunishOptionID      string
	PunishUntil         string
	RelatedPunishVoteID string
	CreatedAt           string
	UpdatedAt           string
	DeletedAt           string
}{
	ID:                  "id",
	PlayerID:            "player_id",
	PunishOptionID:      "punish_option_id",
	PunishUntil:         "punish_until",
	RelatedPunishVoteID: "related_punish_vote_id",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
	DeletedAt:           "deleted_at",
}

var PunishedPlayerTableColumns = struct {
	ID                  string
	PlayerID            string
	PunishOptionID      string
	PunishUntil         string
	RelatedPunishVoteID string
	CreatedAt           string
	UpdatedAt           string
	DeletedAt           string
}{
	ID:                  "punished_players.id",
	PlayerID:            "punished_players.player_id",
	PunishOptionID:      "punished_players.punish_option_id",
	PunishUntil:         "punished_players.punish_until",
	RelatedPunishVoteID: "punished_players.related_punish_vote_id",
	CreatedAt:           "punished_players.created_at",
	UpdatedAt:           "punished_players.updated_at",
	DeletedAt:           "punished_players.deleted_at",
}

// Generated where

var PunishedPlayerWhere = struct {
	ID                  whereHelperstring
	PlayerID            whereHelperstring
	PunishOptionID      whereHelperstring
	PunishUntil         whereHelpertime_Time
	RelatedPunishVoteID whereHelpernull_String
	CreatedAt           whereHelpertime_Time
	UpdatedAt           whereHelpertime_Time
	DeletedAt           whereHelpernull_Time
}{
	ID:                  whereHelperstring{field: "\"punished_players\".\"id\""},
	PlayerID:            whereHelperstring{field: "\"punished_players\".\"player_id\""},
	PunishOptionID:      whereHelperstring{field: "\"punished_players\".\"punish_option_id\""},
	PunishUntil:         whereHelpertime_Time{field: "\"punished_players\".\"punish_until\""},
	RelatedPunishVoteID: whereHelpernull_String{field: "\"punished_players\".\"related_punish_vote_id\""},
	CreatedAt:           whereHelpertime_Time{field: "\"punished_players\".\"created_at\""},
	UpdatedAt:           whereHelpertime_Time{field: "\"punished_players\".\"updated_at\""},
	DeletedAt:           whereHelpernull_Time{field: "\"punished_players\".\"deleted_at\""},
}

// PunishedPlayerRels is where relationship names are stored.
var PunishedPlayerRels = struct {
	Player            string
	PunishOption      string
	RelatedPunishVote string
}{
	Player:            "Player",
	PunishOption:      "PunishOption",
	RelatedPunishVote: "RelatedPunishVote",
}

// punishedPlayerR is where relationships are stored.
type punishedPlayerR struct {
	Player            *Player       `boiler:"Player" boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
	PunishOption      *PunishOption `boiler:"PunishOption" boil:"PunishOption" json:"PunishOption" toml:"PunishOption" yaml:"PunishOption"`
	RelatedPunishVote *PunishVote   `boiler:"RelatedPunishVote" boil:"RelatedPunishVote" json:"RelatedPunishVote" toml:"RelatedPunishVote" yaml:"RelatedPunishVote"`
}

// NewStruct creates a new relationship struct
func (*punishedPlayerR) NewStruct() *punishedPlayerR {
	return &punishedPlayerR{}
}

// punishedPlayerL is where Load methods for each relationship are stored.
type punishedPlayerL struct{}

var (
	punishedPlayerAllColumns            = []string{"id", "player_id", "punish_option_id", "punish_until", "related_punish_vote_id", "created_at", "updated_at", "deleted_at"}
	punishedPlayerColumnsWithoutDefault = []string{"player_id", "punish_option_id", "punish_until"}
	punishedPlayerColumnsWithDefault    = []string{"id", "related_punish_vote_id", "created_at", "updated_at", "deleted_at"}
	punishedPlayerPrimaryKeyColumns     = []string{"id"}
	punishedPlayerGeneratedColumns      = []string{}
)

type (
	// PunishedPlayerSlice is an alias for a slice of pointers to PunishedPlayer.
	// This should almost always be used instead of []PunishedPlayer.
	PunishedPlayerSlice []*PunishedPlayer
	// PunishedPlayerHook is the signature for custom PunishedPlayer hook methods
	PunishedPlayerHook func(boil.Executor, *PunishedPlayer) error

	punishedPlayerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	punishedPlayerType                 = reflect.TypeOf(&PunishedPlayer{})
	punishedPlayerMapping              = queries.MakeStructMapping(punishedPlayerType)
	punishedPlayerPrimaryKeyMapping, _ = queries.BindMapping(punishedPlayerType, punishedPlayerMapping, punishedPlayerPrimaryKeyColumns)
	punishedPlayerInsertCacheMut       sync.RWMutex
	punishedPlayerInsertCache          = make(map[string]insertCache)
	punishedPlayerUpdateCacheMut       sync.RWMutex
	punishedPlayerUpdateCache          = make(map[string]updateCache)
	punishedPlayerUpsertCacheMut       sync.RWMutex
	punishedPlayerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var punishedPlayerAfterSelectHooks []PunishedPlayerHook

var punishedPlayerBeforeInsertHooks []PunishedPlayerHook
var punishedPlayerAfterInsertHooks []PunishedPlayerHook

var punishedPlayerBeforeUpdateHooks []PunishedPlayerHook
var punishedPlayerAfterUpdateHooks []PunishedPlayerHook

var punishedPlayerBeforeDeleteHooks []PunishedPlayerHook
var punishedPlayerAfterDeleteHooks []PunishedPlayerHook

var punishedPlayerBeforeUpsertHooks []PunishedPlayerHook
var punishedPlayerAfterUpsertHooks []PunishedPlayerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PunishedPlayer) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range punishedPlayerAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PunishedPlayer) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range punishedPlayerBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PunishedPlayer) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range punishedPlayerAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PunishedPlayer) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range punishedPlayerBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PunishedPlayer) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range punishedPlayerAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PunishedPlayer) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range punishedPlayerBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PunishedPlayer) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range punishedPlayerAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PunishedPlayer) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range punishedPlayerBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PunishedPlayer) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range punishedPlayerAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPunishedPlayerHook registers your hook function for all future operations.
func AddPunishedPlayerHook(hookPoint boil.HookPoint, punishedPlayerHook PunishedPlayerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		punishedPlayerAfterSelectHooks = append(punishedPlayerAfterSelectHooks, punishedPlayerHook)
	case boil.BeforeInsertHook:
		punishedPlayerBeforeInsertHooks = append(punishedPlayerBeforeInsertHooks, punishedPlayerHook)
	case boil.AfterInsertHook:
		punishedPlayerAfterInsertHooks = append(punishedPlayerAfterInsertHooks, punishedPlayerHook)
	case boil.BeforeUpdateHook:
		punishedPlayerBeforeUpdateHooks = append(punishedPlayerBeforeUpdateHooks, punishedPlayerHook)
	case boil.AfterUpdateHook:
		punishedPlayerAfterUpdateHooks = append(punishedPlayerAfterUpdateHooks, punishedPlayerHook)
	case boil.BeforeDeleteHook:
		punishedPlayerBeforeDeleteHooks = append(punishedPlayerBeforeDeleteHooks, punishedPlayerHook)
	case boil.AfterDeleteHook:
		punishedPlayerAfterDeleteHooks = append(punishedPlayerAfterDeleteHooks, punishedPlayerHook)
	case boil.BeforeUpsertHook:
		punishedPlayerBeforeUpsertHooks = append(punishedPlayerBeforeUpsertHooks, punishedPlayerHook)
	case boil.AfterUpsertHook:
		punishedPlayerAfterUpsertHooks = append(punishedPlayerAfterUpsertHooks, punishedPlayerHook)
	}
}

// One returns a single punishedPlayer record from the query.
func (q punishedPlayerQuery) One(exec boil.Executor) (*PunishedPlayer, error) {
	o := &PunishedPlayer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for punished_players")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PunishedPlayer records from the query.
func (q punishedPlayerQuery) All(exec boil.Executor) (PunishedPlayerSlice, error) {
	var o []*PunishedPlayer

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to PunishedPlayer slice")
	}

	if len(punishedPlayerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PunishedPlayer records in the query.
func (q punishedPlayerQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count punished_players rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q punishedPlayerQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if punished_players exists")
	}

	return count > 0, nil
}

// Player pointed to by the foreign key.
func (o *PunishedPlayer) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// PunishOption pointed to by the foreign key.
func (o *PunishedPlayer) PunishOption(mods ...qm.QueryMod) punishOptionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PunishOptionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := PunishOptions(queryMods...)
	queries.SetFrom(query.Query, "\"punish_options\"")

	return query
}

// RelatedPunishVote pointed to by the foreign key.
func (o *PunishedPlayer) RelatedPunishVote(mods ...qm.QueryMod) punishVoteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RelatedPunishVoteID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := PunishVotes(queryMods...)
	queries.SetFrom(query.Query, "\"punish_votes\"")

	return query
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (punishedPlayerL) LoadPlayer(e boil.Executor, singular bool, maybePunishedPlayer interface{}, mods queries.Applicator) error {
	var slice []*PunishedPlayer
	var object *PunishedPlayer

	if singular {
		object = maybePunishedPlayer.(*PunishedPlayer)
	} else {
		slice = *maybePunishedPlayer.(*[]*PunishedPlayer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &punishedPlayerR{}
		}
		args = append(args, object.PlayerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &punishedPlayerR{}
			}

			for _, a := range args {
				if a == obj.PlayerID {
					continue Outer
				}
			}

			args = append(args, obj.PlayerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(punishedPlayerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.PunishedPlayers = append(foreign.R.PunishedPlayers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerID == foreign.ID {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.PunishedPlayers = append(foreign.R.PunishedPlayers, local)
				break
			}
		}
	}

	return nil
}

// LoadPunishOption allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (punishedPlayerL) LoadPunishOption(e boil.Executor, singular bool, maybePunishedPlayer interface{}, mods queries.Applicator) error {
	var slice []*PunishedPlayer
	var object *PunishedPlayer

	if singular {
		object = maybePunishedPlayer.(*PunishedPlayer)
	} else {
		slice = *maybePunishedPlayer.(*[]*PunishedPlayer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &punishedPlayerR{}
		}
		args = append(args, object.PunishOptionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &punishedPlayerR{}
			}

			for _, a := range args {
				if a == obj.PunishOptionID {
					continue Outer
				}
			}

			args = append(args, obj.PunishOptionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`punish_options`),
		qm.WhereIn(`punish_options.id in ?`, args...),
		qmhelper.WhereIsNull(`punish_options.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PunishOption")
	}

	var resultSlice []*PunishOption
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PunishOption")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for punish_options")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for punish_options")
	}

	if len(punishedPlayerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PunishOption = foreign
		if foreign.R == nil {
			foreign.R = &punishOptionR{}
		}
		foreign.R.PunishedPlayers = append(foreign.R.PunishedPlayers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PunishOptionID == foreign.ID {
				local.R.PunishOption = foreign
				if foreign.R == nil {
					foreign.R = &punishOptionR{}
				}
				foreign.R.PunishedPlayers = append(foreign.R.PunishedPlayers, local)
				break
			}
		}
	}

	return nil
}

// LoadRelatedPunishVote allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (punishedPlayerL) LoadRelatedPunishVote(e boil.Executor, singular bool, maybePunishedPlayer interface{}, mods queries.Applicator) error {
	var slice []*PunishedPlayer
	var object *PunishedPlayer

	if singular {
		object = maybePunishedPlayer.(*PunishedPlayer)
	} else {
		slice = *maybePunishedPlayer.(*[]*PunishedPlayer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &punishedPlayerR{}
		}
		if !queries.IsNil(object.RelatedPunishVoteID) {
			args = append(args, object.RelatedPunishVoteID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &punishedPlayerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RelatedPunishVoteID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RelatedPunishVoteID) {
				args = append(args, obj.RelatedPunishVoteID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`punish_votes`),
		qm.WhereIn(`punish_votes.id in ?`, args...),
		qmhelper.WhereIsNull(`punish_votes.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PunishVote")
	}

	var resultSlice []*PunishVote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PunishVote")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for punish_votes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for punish_votes")
	}

	if len(punishedPlayerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RelatedPunishVote = foreign
		if foreign.R == nil {
			foreign.R = &punishVoteR{}
		}
		foreign.R.RelatedPunishVotePunishedPlayers = append(foreign.R.RelatedPunishVotePunishedPlayers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RelatedPunishVoteID, foreign.ID) {
				local.R.RelatedPunishVote = foreign
				if foreign.R == nil {
					foreign.R = &punishVoteR{}
				}
				foreign.R.RelatedPunishVotePunishedPlayers = append(foreign.R.RelatedPunishVotePunishedPlayers, local)
				break
			}
		}
	}

	return nil
}

// SetPlayer of the punishedPlayer to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.PunishedPlayers.
func (o *PunishedPlayer) SetPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"punished_players\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, punishedPlayerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerID = related.ID
	if o.R == nil {
		o.R = &punishedPlayerR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			PunishedPlayers: PunishedPlayerSlice{o},
		}
	} else {
		related.R.PunishedPlayers = append(related.R.PunishedPlayers, o)
	}

	return nil
}

// SetPunishOption of the punishedPlayer to the related item.
// Sets o.R.PunishOption to related.
// Adds o to related.R.PunishedPlayers.
func (o *PunishedPlayer) SetPunishOption(exec boil.Executor, insert bool, related *PunishOption) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"punished_players\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"punish_option_id"}),
		strmangle.WhereClause("\"", "\"", 2, punishedPlayerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PunishOptionID = related.ID
	if o.R == nil {
		o.R = &punishedPlayerR{
			PunishOption: related,
		}
	} else {
		o.R.PunishOption = related
	}

	if related.R == nil {
		related.R = &punishOptionR{
			PunishedPlayers: PunishedPlayerSlice{o},
		}
	} else {
		related.R.PunishedPlayers = append(related.R.PunishedPlayers, o)
	}

	return nil
}

// SetRelatedPunishVote of the punishedPlayer to the related item.
// Sets o.R.RelatedPunishVote to related.
// Adds o to related.R.RelatedPunishVotePunishedPlayers.
func (o *PunishedPlayer) SetRelatedPunishVote(exec boil.Executor, insert bool, related *PunishVote) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"punished_players\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"related_punish_vote_id"}),
		strmangle.WhereClause("\"", "\"", 2, punishedPlayerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RelatedPunishVoteID, related.ID)
	if o.R == nil {
		o.R = &punishedPlayerR{
			RelatedPunishVote: related,
		}
	} else {
		o.R.RelatedPunishVote = related
	}

	if related.R == nil {
		related.R = &punishVoteR{
			RelatedPunishVotePunishedPlayers: PunishedPlayerSlice{o},
		}
	} else {
		related.R.RelatedPunishVotePunishedPlayers = append(related.R.RelatedPunishVotePunishedPlayers, o)
	}

	return nil
}

// RemoveRelatedPunishVote relationship.
// Sets o.R.RelatedPunishVote to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *PunishedPlayer) RemoveRelatedPunishVote(exec boil.Executor, related *PunishVote) error {
	var err error

	queries.SetScanner(&o.RelatedPunishVoteID, nil)
	if _, err = o.Update(exec, boil.Whitelist("related_punish_vote_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.RelatedPunishVote = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RelatedPunishVotePunishedPlayers {
		if queries.Equal(o.RelatedPunishVoteID, ri.RelatedPunishVoteID) {
			continue
		}

		ln := len(related.R.RelatedPunishVotePunishedPlayers)
		if ln > 1 && i < ln-1 {
			related.R.RelatedPunishVotePunishedPlayers[i] = related.R.RelatedPunishVotePunishedPlayers[ln-1]
		}
		related.R.RelatedPunishVotePunishedPlayers = related.R.RelatedPunishVotePunishedPlayers[:ln-1]
		break
	}
	return nil
}

// PunishedPlayers retrieves all the records using an executor.
func PunishedPlayers(mods ...qm.QueryMod) punishedPlayerQuery {
	mods = append(mods, qm.From("\"punished_players\""), qmhelper.WhereIsNull("\"punished_players\".\"deleted_at\""))
	return punishedPlayerQuery{NewQuery(mods...)}
}

// FindPunishedPlayer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPunishedPlayer(exec boil.Executor, iD string, selectCols ...string) (*PunishedPlayer, error) {
	punishedPlayerObj := &PunishedPlayer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"punished_players\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, punishedPlayerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from punished_players")
	}

	if err = punishedPlayerObj.doAfterSelectHooks(exec); err != nil {
		return punishedPlayerObj, err
	}

	return punishedPlayerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PunishedPlayer) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no punished_players provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(punishedPlayerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	punishedPlayerInsertCacheMut.RLock()
	cache, cached := punishedPlayerInsertCache[key]
	punishedPlayerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			punishedPlayerAllColumns,
			punishedPlayerColumnsWithDefault,
			punishedPlayerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(punishedPlayerType, punishedPlayerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(punishedPlayerType, punishedPlayerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"punished_players\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"punished_players\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into punished_players")
	}

	if !cached {
		punishedPlayerInsertCacheMut.Lock()
		punishedPlayerInsertCache[key] = cache
		punishedPlayerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the PunishedPlayer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PunishedPlayer) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	punishedPlayerUpdateCacheMut.RLock()
	cache, cached := punishedPlayerUpdateCache[key]
	punishedPlayerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			punishedPlayerAllColumns,
			punishedPlayerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update punished_players, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"punished_players\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, punishedPlayerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(punishedPlayerType, punishedPlayerMapping, append(wl, punishedPlayerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update punished_players row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for punished_players")
	}

	if !cached {
		punishedPlayerUpdateCacheMut.Lock()
		punishedPlayerUpdateCache[key] = cache
		punishedPlayerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q punishedPlayerQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for punished_players")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for punished_players")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PunishedPlayerSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), punishedPlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"punished_players\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, punishedPlayerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in punishedPlayer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all punishedPlayer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PunishedPlayer) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no punished_players provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(punishedPlayerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	punishedPlayerUpsertCacheMut.RLock()
	cache, cached := punishedPlayerUpsertCache[key]
	punishedPlayerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			punishedPlayerAllColumns,
			punishedPlayerColumnsWithDefault,
			punishedPlayerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			punishedPlayerAllColumns,
			punishedPlayerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert punished_players, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(punishedPlayerPrimaryKeyColumns))
			copy(conflict, punishedPlayerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"punished_players\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(punishedPlayerType, punishedPlayerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(punishedPlayerType, punishedPlayerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert punished_players")
	}

	if !cached {
		punishedPlayerUpsertCacheMut.Lock()
		punishedPlayerUpsertCache[key] = cache
		punishedPlayerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single PunishedPlayer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PunishedPlayer) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no PunishedPlayer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), punishedPlayerPrimaryKeyMapping)
		sql = "DELETE FROM \"punished_players\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"punished_players\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(punishedPlayerType, punishedPlayerMapping, append(wl, punishedPlayerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from punished_players")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for punished_players")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q punishedPlayerQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no punishedPlayerQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from punished_players")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for punished_players")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PunishedPlayerSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(punishedPlayerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), punishedPlayerPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"punished_players\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, punishedPlayerPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), punishedPlayerPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"punished_players\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, punishedPlayerPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from punishedPlayer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for punished_players")
	}

	if len(punishedPlayerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PunishedPlayer) Reload(exec boil.Executor) error {
	ret, err := FindPunishedPlayer(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PunishedPlayerSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PunishedPlayerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), punishedPlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"punished_players\".* FROM \"punished_players\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, punishedPlayerPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in PunishedPlayerSlice")
	}

	*o = slice

	return nil
}

// PunishedPlayerExists checks if the PunishedPlayer row exists.
func PunishedPlayerExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"punished_players\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if punished_players exists")
	}

	return exists, nil
}
