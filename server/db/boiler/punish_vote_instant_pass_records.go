// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PunishVoteInstantPassRecord is an object representing the database table.
type PunishVoteInstantPassRecord struct {
	ID             string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	PunishVoteID   string      `boiler:"punish_vote_id" boil:"punish_vote_id" json:"punish_vote_id" toml:"punish_vote_id" yaml:"punish_vote_id"`
	VoteByPlayerID string      `boiler:"vote_by_player_id" boil:"vote_by_player_id" json:"vote_by_player_id" toml:"vote_by_player_id" yaml:"vote_by_player_id"`
	TXID           null.String `boiler:"tx_id" boil:"tx_id" json:"tx_id,omitempty" toml:"tx_id" yaml:"tx_id,omitempty"`
	CreatedAt      time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt      null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *punishVoteInstantPassRecordR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L punishVoteInstantPassRecordL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PunishVoteInstantPassRecordColumns = struct {
	ID             string
	PunishVoteID   string
	VoteByPlayerID string
	TXID           string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ID:             "id",
	PunishVoteID:   "punish_vote_id",
	VoteByPlayerID: "vote_by_player_id",
	TXID:           "tx_id",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
}

var PunishVoteInstantPassRecordTableColumns = struct {
	ID             string
	PunishVoteID   string
	VoteByPlayerID string
	TXID           string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ID:             "punish_vote_instant_pass_records.id",
	PunishVoteID:   "punish_vote_instant_pass_records.punish_vote_id",
	VoteByPlayerID: "punish_vote_instant_pass_records.vote_by_player_id",
	TXID:           "punish_vote_instant_pass_records.tx_id",
	CreatedAt:      "punish_vote_instant_pass_records.created_at",
	UpdatedAt:      "punish_vote_instant_pass_records.updated_at",
	DeletedAt:      "punish_vote_instant_pass_records.deleted_at",
}

// Generated where

var PunishVoteInstantPassRecordWhere = struct {
	ID             whereHelperstring
	PunishVoteID   whereHelperstring
	VoteByPlayerID whereHelperstring
	TXID           whereHelpernull_String
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	DeletedAt      whereHelpernull_Time
}{
	ID:             whereHelperstring{field: "\"punish_vote_instant_pass_records\".\"id\""},
	PunishVoteID:   whereHelperstring{field: "\"punish_vote_instant_pass_records\".\"punish_vote_id\""},
	VoteByPlayerID: whereHelperstring{field: "\"punish_vote_instant_pass_records\".\"vote_by_player_id\""},
	TXID:           whereHelpernull_String{field: "\"punish_vote_instant_pass_records\".\"tx_id\""},
	CreatedAt:      whereHelpertime_Time{field: "\"punish_vote_instant_pass_records\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"punish_vote_instant_pass_records\".\"updated_at\""},
	DeletedAt:      whereHelpernull_Time{field: "\"punish_vote_instant_pass_records\".\"deleted_at\""},
}

// PunishVoteInstantPassRecordRels is where relationship names are stored.
var PunishVoteInstantPassRecordRels = struct {
	PunishVote   string
	VoteByPlayer string
}{
	PunishVote:   "PunishVote",
	VoteByPlayer: "VoteByPlayer",
}

// punishVoteInstantPassRecordR is where relationships are stored.
type punishVoteInstantPassRecordR struct {
	PunishVote   *PunishVote `boiler:"PunishVote" boil:"PunishVote" json:"PunishVote" toml:"PunishVote" yaml:"PunishVote"`
	VoteByPlayer *Player     `boiler:"VoteByPlayer" boil:"VoteByPlayer" json:"VoteByPlayer" toml:"VoteByPlayer" yaml:"VoteByPlayer"`
}

// NewStruct creates a new relationship struct
func (*punishVoteInstantPassRecordR) NewStruct() *punishVoteInstantPassRecordR {
	return &punishVoteInstantPassRecordR{}
}

// punishVoteInstantPassRecordL is where Load methods for each relationship are stored.
type punishVoteInstantPassRecordL struct{}

var (
	punishVoteInstantPassRecordAllColumns            = []string{"id", "punish_vote_id", "vote_by_player_id", "tx_id", "created_at", "updated_at", "deleted_at"}
	punishVoteInstantPassRecordColumnsWithoutDefault = []string{"punish_vote_id", "vote_by_player_id"}
	punishVoteInstantPassRecordColumnsWithDefault    = []string{"id", "tx_id", "created_at", "updated_at", "deleted_at"}
	punishVoteInstantPassRecordPrimaryKeyColumns     = []string{"id"}
	punishVoteInstantPassRecordGeneratedColumns      = []string{}
)

type (
	// PunishVoteInstantPassRecordSlice is an alias for a slice of pointers to PunishVoteInstantPassRecord.
	// This should almost always be used instead of []PunishVoteInstantPassRecord.
	PunishVoteInstantPassRecordSlice []*PunishVoteInstantPassRecord
	// PunishVoteInstantPassRecordHook is the signature for custom PunishVoteInstantPassRecord hook methods
	PunishVoteInstantPassRecordHook func(boil.Executor, *PunishVoteInstantPassRecord) error

	punishVoteInstantPassRecordQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	punishVoteInstantPassRecordType                 = reflect.TypeOf(&PunishVoteInstantPassRecord{})
	punishVoteInstantPassRecordMapping              = queries.MakeStructMapping(punishVoteInstantPassRecordType)
	punishVoteInstantPassRecordPrimaryKeyMapping, _ = queries.BindMapping(punishVoteInstantPassRecordType, punishVoteInstantPassRecordMapping, punishVoteInstantPassRecordPrimaryKeyColumns)
	punishVoteInstantPassRecordInsertCacheMut       sync.RWMutex
	punishVoteInstantPassRecordInsertCache          = make(map[string]insertCache)
	punishVoteInstantPassRecordUpdateCacheMut       sync.RWMutex
	punishVoteInstantPassRecordUpdateCache          = make(map[string]updateCache)
	punishVoteInstantPassRecordUpsertCacheMut       sync.RWMutex
	punishVoteInstantPassRecordUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var punishVoteInstantPassRecordAfterSelectHooks []PunishVoteInstantPassRecordHook

var punishVoteInstantPassRecordBeforeInsertHooks []PunishVoteInstantPassRecordHook
var punishVoteInstantPassRecordAfterInsertHooks []PunishVoteInstantPassRecordHook

var punishVoteInstantPassRecordBeforeUpdateHooks []PunishVoteInstantPassRecordHook
var punishVoteInstantPassRecordAfterUpdateHooks []PunishVoteInstantPassRecordHook

var punishVoteInstantPassRecordBeforeDeleteHooks []PunishVoteInstantPassRecordHook
var punishVoteInstantPassRecordAfterDeleteHooks []PunishVoteInstantPassRecordHook

var punishVoteInstantPassRecordBeforeUpsertHooks []PunishVoteInstantPassRecordHook
var punishVoteInstantPassRecordAfterUpsertHooks []PunishVoteInstantPassRecordHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PunishVoteInstantPassRecord) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range punishVoteInstantPassRecordAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PunishVoteInstantPassRecord) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range punishVoteInstantPassRecordBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PunishVoteInstantPassRecord) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range punishVoteInstantPassRecordAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PunishVoteInstantPassRecord) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range punishVoteInstantPassRecordBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PunishVoteInstantPassRecord) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range punishVoteInstantPassRecordAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PunishVoteInstantPassRecord) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range punishVoteInstantPassRecordBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PunishVoteInstantPassRecord) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range punishVoteInstantPassRecordAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PunishVoteInstantPassRecord) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range punishVoteInstantPassRecordBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PunishVoteInstantPassRecord) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range punishVoteInstantPassRecordAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPunishVoteInstantPassRecordHook registers your hook function for all future operations.
func AddPunishVoteInstantPassRecordHook(hookPoint boil.HookPoint, punishVoteInstantPassRecordHook PunishVoteInstantPassRecordHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		punishVoteInstantPassRecordAfterSelectHooks = append(punishVoteInstantPassRecordAfterSelectHooks, punishVoteInstantPassRecordHook)
	case boil.BeforeInsertHook:
		punishVoteInstantPassRecordBeforeInsertHooks = append(punishVoteInstantPassRecordBeforeInsertHooks, punishVoteInstantPassRecordHook)
	case boil.AfterInsertHook:
		punishVoteInstantPassRecordAfterInsertHooks = append(punishVoteInstantPassRecordAfterInsertHooks, punishVoteInstantPassRecordHook)
	case boil.BeforeUpdateHook:
		punishVoteInstantPassRecordBeforeUpdateHooks = append(punishVoteInstantPassRecordBeforeUpdateHooks, punishVoteInstantPassRecordHook)
	case boil.AfterUpdateHook:
		punishVoteInstantPassRecordAfterUpdateHooks = append(punishVoteInstantPassRecordAfterUpdateHooks, punishVoteInstantPassRecordHook)
	case boil.BeforeDeleteHook:
		punishVoteInstantPassRecordBeforeDeleteHooks = append(punishVoteInstantPassRecordBeforeDeleteHooks, punishVoteInstantPassRecordHook)
	case boil.AfterDeleteHook:
		punishVoteInstantPassRecordAfterDeleteHooks = append(punishVoteInstantPassRecordAfterDeleteHooks, punishVoteInstantPassRecordHook)
	case boil.BeforeUpsertHook:
		punishVoteInstantPassRecordBeforeUpsertHooks = append(punishVoteInstantPassRecordBeforeUpsertHooks, punishVoteInstantPassRecordHook)
	case boil.AfterUpsertHook:
		punishVoteInstantPassRecordAfterUpsertHooks = append(punishVoteInstantPassRecordAfterUpsertHooks, punishVoteInstantPassRecordHook)
	}
}

// One returns a single punishVoteInstantPassRecord record from the query.
func (q punishVoteInstantPassRecordQuery) One(exec boil.Executor) (*PunishVoteInstantPassRecord, error) {
	o := &PunishVoteInstantPassRecord{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for punish_vote_instant_pass_records")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PunishVoteInstantPassRecord records from the query.
func (q punishVoteInstantPassRecordQuery) All(exec boil.Executor) (PunishVoteInstantPassRecordSlice, error) {
	var o []*PunishVoteInstantPassRecord

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to PunishVoteInstantPassRecord slice")
	}

	if len(punishVoteInstantPassRecordAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PunishVoteInstantPassRecord records in the query.
func (q punishVoteInstantPassRecordQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count punish_vote_instant_pass_records rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q punishVoteInstantPassRecordQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if punish_vote_instant_pass_records exists")
	}

	return count > 0, nil
}

// PunishVote pointed to by the foreign key.
func (o *PunishVoteInstantPassRecord) PunishVote(mods ...qm.QueryMod) punishVoteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PunishVoteID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := PunishVotes(queryMods...)
	queries.SetFrom(query.Query, "\"punish_votes\"")

	return query
}

// VoteByPlayer pointed to by the foreign key.
func (o *PunishVoteInstantPassRecord) VoteByPlayer(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VoteByPlayerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// LoadPunishVote allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (punishVoteInstantPassRecordL) LoadPunishVote(e boil.Executor, singular bool, maybePunishVoteInstantPassRecord interface{}, mods queries.Applicator) error {
	var slice []*PunishVoteInstantPassRecord
	var object *PunishVoteInstantPassRecord

	if singular {
		object = maybePunishVoteInstantPassRecord.(*PunishVoteInstantPassRecord)
	} else {
		slice = *maybePunishVoteInstantPassRecord.(*[]*PunishVoteInstantPassRecord)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &punishVoteInstantPassRecordR{}
		}
		args = append(args, object.PunishVoteID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &punishVoteInstantPassRecordR{}
			}

			for _, a := range args {
				if a == obj.PunishVoteID {
					continue Outer
				}
			}

			args = append(args, obj.PunishVoteID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`punish_votes`),
		qm.WhereIn(`punish_votes.id in ?`, args...),
		qmhelper.WhereIsNull(`punish_votes.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PunishVote")
	}

	var resultSlice []*PunishVote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PunishVote")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for punish_votes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for punish_votes")
	}

	if len(punishVoteInstantPassRecordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PunishVote = foreign
		if foreign.R == nil {
			foreign.R = &punishVoteR{}
		}
		foreign.R.PunishVoteInstantPassRecords = append(foreign.R.PunishVoteInstantPassRecords, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PunishVoteID == foreign.ID {
				local.R.PunishVote = foreign
				if foreign.R == nil {
					foreign.R = &punishVoteR{}
				}
				foreign.R.PunishVoteInstantPassRecords = append(foreign.R.PunishVoteInstantPassRecords, local)
				break
			}
		}
	}

	return nil
}

// LoadVoteByPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (punishVoteInstantPassRecordL) LoadVoteByPlayer(e boil.Executor, singular bool, maybePunishVoteInstantPassRecord interface{}, mods queries.Applicator) error {
	var slice []*PunishVoteInstantPassRecord
	var object *PunishVoteInstantPassRecord

	if singular {
		object = maybePunishVoteInstantPassRecord.(*PunishVoteInstantPassRecord)
	} else {
		slice = *maybePunishVoteInstantPassRecord.(*[]*PunishVoteInstantPassRecord)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &punishVoteInstantPassRecordR{}
		}
		args = append(args, object.VoteByPlayerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &punishVoteInstantPassRecordR{}
			}

			for _, a := range args {
				if a == obj.VoteByPlayerID {
					continue Outer
				}
			}

			args = append(args, obj.VoteByPlayerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(punishVoteInstantPassRecordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VoteByPlayer = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.VoteByPlayerPunishVoteInstantPassRecords = append(foreign.R.VoteByPlayerPunishVoteInstantPassRecords, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VoteByPlayerID == foreign.ID {
				local.R.VoteByPlayer = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.VoteByPlayerPunishVoteInstantPassRecords = append(foreign.R.VoteByPlayerPunishVoteInstantPassRecords, local)
				break
			}
		}
	}

	return nil
}

// SetPunishVote of the punishVoteInstantPassRecord to the related item.
// Sets o.R.PunishVote to related.
// Adds o to related.R.PunishVoteInstantPassRecords.
func (o *PunishVoteInstantPassRecord) SetPunishVote(exec boil.Executor, insert bool, related *PunishVote) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"punish_vote_instant_pass_records\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"punish_vote_id"}),
		strmangle.WhereClause("\"", "\"", 2, punishVoteInstantPassRecordPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PunishVoteID = related.ID
	if o.R == nil {
		o.R = &punishVoteInstantPassRecordR{
			PunishVote: related,
		}
	} else {
		o.R.PunishVote = related
	}

	if related.R == nil {
		related.R = &punishVoteR{
			PunishVoteInstantPassRecords: PunishVoteInstantPassRecordSlice{o},
		}
	} else {
		related.R.PunishVoteInstantPassRecords = append(related.R.PunishVoteInstantPassRecords, o)
	}

	return nil
}

// SetVoteByPlayer of the punishVoteInstantPassRecord to the related item.
// Sets o.R.VoteByPlayer to related.
// Adds o to related.R.VoteByPlayerPunishVoteInstantPassRecords.
func (o *PunishVoteInstantPassRecord) SetVoteByPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"punish_vote_instant_pass_records\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"vote_by_player_id"}),
		strmangle.WhereClause("\"", "\"", 2, punishVoteInstantPassRecordPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VoteByPlayerID = related.ID
	if o.R == nil {
		o.R = &punishVoteInstantPassRecordR{
			VoteByPlayer: related,
		}
	} else {
		o.R.VoteByPlayer = related
	}

	if related.R == nil {
		related.R = &playerR{
			VoteByPlayerPunishVoteInstantPassRecords: PunishVoteInstantPassRecordSlice{o},
		}
	} else {
		related.R.VoteByPlayerPunishVoteInstantPassRecords = append(related.R.VoteByPlayerPunishVoteInstantPassRecords, o)
	}

	return nil
}

// PunishVoteInstantPassRecords retrieves all the records using an executor.
func PunishVoteInstantPassRecords(mods ...qm.QueryMod) punishVoteInstantPassRecordQuery {
	mods = append(mods, qm.From("\"punish_vote_instant_pass_records\""), qmhelper.WhereIsNull("\"punish_vote_instant_pass_records\".\"deleted_at\""))
	return punishVoteInstantPassRecordQuery{NewQuery(mods...)}
}

// FindPunishVoteInstantPassRecord retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPunishVoteInstantPassRecord(exec boil.Executor, iD string, selectCols ...string) (*PunishVoteInstantPassRecord, error) {
	punishVoteInstantPassRecordObj := &PunishVoteInstantPassRecord{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"punish_vote_instant_pass_records\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, punishVoteInstantPassRecordObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from punish_vote_instant_pass_records")
	}

	if err = punishVoteInstantPassRecordObj.doAfterSelectHooks(exec); err != nil {
		return punishVoteInstantPassRecordObj, err
	}

	return punishVoteInstantPassRecordObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PunishVoteInstantPassRecord) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no punish_vote_instant_pass_records provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(punishVoteInstantPassRecordColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	punishVoteInstantPassRecordInsertCacheMut.RLock()
	cache, cached := punishVoteInstantPassRecordInsertCache[key]
	punishVoteInstantPassRecordInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			punishVoteInstantPassRecordAllColumns,
			punishVoteInstantPassRecordColumnsWithDefault,
			punishVoteInstantPassRecordColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(punishVoteInstantPassRecordType, punishVoteInstantPassRecordMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(punishVoteInstantPassRecordType, punishVoteInstantPassRecordMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"punish_vote_instant_pass_records\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"punish_vote_instant_pass_records\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into punish_vote_instant_pass_records")
	}

	if !cached {
		punishVoteInstantPassRecordInsertCacheMut.Lock()
		punishVoteInstantPassRecordInsertCache[key] = cache
		punishVoteInstantPassRecordInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the PunishVoteInstantPassRecord.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PunishVoteInstantPassRecord) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	punishVoteInstantPassRecordUpdateCacheMut.RLock()
	cache, cached := punishVoteInstantPassRecordUpdateCache[key]
	punishVoteInstantPassRecordUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			punishVoteInstantPassRecordAllColumns,
			punishVoteInstantPassRecordPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update punish_vote_instant_pass_records, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"punish_vote_instant_pass_records\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, punishVoteInstantPassRecordPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(punishVoteInstantPassRecordType, punishVoteInstantPassRecordMapping, append(wl, punishVoteInstantPassRecordPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update punish_vote_instant_pass_records row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for punish_vote_instant_pass_records")
	}

	if !cached {
		punishVoteInstantPassRecordUpdateCacheMut.Lock()
		punishVoteInstantPassRecordUpdateCache[key] = cache
		punishVoteInstantPassRecordUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q punishVoteInstantPassRecordQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for punish_vote_instant_pass_records")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for punish_vote_instant_pass_records")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PunishVoteInstantPassRecordSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), punishVoteInstantPassRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"punish_vote_instant_pass_records\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, punishVoteInstantPassRecordPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in punishVoteInstantPassRecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all punishVoteInstantPassRecord")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PunishVoteInstantPassRecord) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no punish_vote_instant_pass_records provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(punishVoteInstantPassRecordColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	punishVoteInstantPassRecordUpsertCacheMut.RLock()
	cache, cached := punishVoteInstantPassRecordUpsertCache[key]
	punishVoteInstantPassRecordUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			punishVoteInstantPassRecordAllColumns,
			punishVoteInstantPassRecordColumnsWithDefault,
			punishVoteInstantPassRecordColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			punishVoteInstantPassRecordAllColumns,
			punishVoteInstantPassRecordPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert punish_vote_instant_pass_records, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(punishVoteInstantPassRecordPrimaryKeyColumns))
			copy(conflict, punishVoteInstantPassRecordPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"punish_vote_instant_pass_records\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(punishVoteInstantPassRecordType, punishVoteInstantPassRecordMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(punishVoteInstantPassRecordType, punishVoteInstantPassRecordMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert punish_vote_instant_pass_records")
	}

	if !cached {
		punishVoteInstantPassRecordUpsertCacheMut.Lock()
		punishVoteInstantPassRecordUpsertCache[key] = cache
		punishVoteInstantPassRecordUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single PunishVoteInstantPassRecord record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PunishVoteInstantPassRecord) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no PunishVoteInstantPassRecord provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), punishVoteInstantPassRecordPrimaryKeyMapping)
		sql = "DELETE FROM \"punish_vote_instant_pass_records\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"punish_vote_instant_pass_records\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(punishVoteInstantPassRecordType, punishVoteInstantPassRecordMapping, append(wl, punishVoteInstantPassRecordPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from punish_vote_instant_pass_records")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for punish_vote_instant_pass_records")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q punishVoteInstantPassRecordQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no punishVoteInstantPassRecordQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from punish_vote_instant_pass_records")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for punish_vote_instant_pass_records")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PunishVoteInstantPassRecordSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(punishVoteInstantPassRecordBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), punishVoteInstantPassRecordPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"punish_vote_instant_pass_records\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, punishVoteInstantPassRecordPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), punishVoteInstantPassRecordPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"punish_vote_instant_pass_records\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, punishVoteInstantPassRecordPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from punishVoteInstantPassRecord slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for punish_vote_instant_pass_records")
	}

	if len(punishVoteInstantPassRecordAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PunishVoteInstantPassRecord) Reload(exec boil.Executor) error {
	ret, err := FindPunishVoteInstantPassRecord(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PunishVoteInstantPassRecordSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PunishVoteInstantPassRecordSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), punishVoteInstantPassRecordPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"punish_vote_instant_pass_records\".* FROM \"punish_vote_instant_pass_records\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, punishVoteInstantPassRecordPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in PunishVoteInstantPassRecordSlice")
	}

	*o = slice

	return nil
}

// PunishVoteInstantPassRecordExists checks if the PunishVoteInstantPassRecord row exists.
func PunishVoteInstantPassRecordExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"punish_vote_instant_pass_records\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if punish_vote_instant_pass_records exists")
	}

	return exists, nil
}
