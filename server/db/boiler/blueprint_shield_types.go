// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BlueprintShieldType is an object representing the database table.
type BlueprintShieldType struct {
	ID          string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Label       string    `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	Description string    `boiler:"description" boil:"description" json:"description" toml:"description" yaml:"description"`
	DeletedAt   null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt   time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt   time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *blueprintShieldTypeR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L blueprintShieldTypeL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlueprintShieldTypeColumns = struct {
	ID          string
	Label       string
	Description string
	DeletedAt   string
	UpdatedAt   string
	CreatedAt   string
}{
	ID:          "id",
	Label:       "label",
	Description: "description",
	DeletedAt:   "deleted_at",
	UpdatedAt:   "updated_at",
	CreatedAt:   "created_at",
}

var BlueprintShieldTypeTableColumns = struct {
	ID          string
	Label       string
	Description string
	DeletedAt   string
	UpdatedAt   string
	CreatedAt   string
}{
	ID:          "blueprint_shield_types.id",
	Label:       "blueprint_shield_types.label",
	Description: "blueprint_shield_types.description",
	DeletedAt:   "blueprint_shield_types.deleted_at",
	UpdatedAt:   "blueprint_shield_types.updated_at",
	CreatedAt:   "blueprint_shield_types.created_at",
}

// Generated where

var BlueprintShieldTypeWhere = struct {
	ID          whereHelperstring
	Label       whereHelperstring
	Description whereHelperstring
	DeletedAt   whereHelpernull_Time
	UpdatedAt   whereHelpertime_Time
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperstring{field: "\"blueprint_shield_types\".\"id\""},
	Label:       whereHelperstring{field: "\"blueprint_shield_types\".\"label\""},
	Description: whereHelperstring{field: "\"blueprint_shield_types\".\"description\""},
	DeletedAt:   whereHelpernull_Time{field: "\"blueprint_shield_types\".\"deleted_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"blueprint_shield_types\".\"updated_at\""},
	CreatedAt:   whereHelpertime_Time{field: "\"blueprint_shield_types\".\"created_at\""},
}

// BlueprintShieldTypeRels is where relationship names are stored.
var BlueprintShieldTypeRels = struct {
	ShieldTypeBlueprintMechs string
}{
	ShieldTypeBlueprintMechs: "ShieldTypeBlueprintMechs",
}

// blueprintShieldTypeR is where relationships are stored.
type blueprintShieldTypeR struct {
	ShieldTypeBlueprintMechs BlueprintMechSlice `boiler:"ShieldTypeBlueprintMechs" boil:"ShieldTypeBlueprintMechs" json:"ShieldTypeBlueprintMechs" toml:"ShieldTypeBlueprintMechs" yaml:"ShieldTypeBlueprintMechs"`
}

// NewStruct creates a new relationship struct
func (*blueprintShieldTypeR) NewStruct() *blueprintShieldTypeR {
	return &blueprintShieldTypeR{}
}

// blueprintShieldTypeL is where Load methods for each relationship are stored.
type blueprintShieldTypeL struct{}

var (
	blueprintShieldTypeAllColumns            = []string{"id", "label", "description", "deleted_at", "updated_at", "created_at"}
	blueprintShieldTypeColumnsWithoutDefault = []string{"label", "description"}
	blueprintShieldTypeColumnsWithDefault    = []string{"id", "deleted_at", "updated_at", "created_at"}
	blueprintShieldTypePrimaryKeyColumns     = []string{"id"}
	blueprintShieldTypeGeneratedColumns      = []string{}
)

type (
	// BlueprintShieldTypeSlice is an alias for a slice of pointers to BlueprintShieldType.
	// This should almost always be used instead of []BlueprintShieldType.
	BlueprintShieldTypeSlice []*BlueprintShieldType
	// BlueprintShieldTypeHook is the signature for custom BlueprintShieldType hook methods
	BlueprintShieldTypeHook func(boil.Executor, *BlueprintShieldType) error

	blueprintShieldTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blueprintShieldTypeType                 = reflect.TypeOf(&BlueprintShieldType{})
	blueprintShieldTypeMapping              = queries.MakeStructMapping(blueprintShieldTypeType)
	blueprintShieldTypePrimaryKeyMapping, _ = queries.BindMapping(blueprintShieldTypeType, blueprintShieldTypeMapping, blueprintShieldTypePrimaryKeyColumns)
	blueprintShieldTypeInsertCacheMut       sync.RWMutex
	blueprintShieldTypeInsertCache          = make(map[string]insertCache)
	blueprintShieldTypeUpdateCacheMut       sync.RWMutex
	blueprintShieldTypeUpdateCache          = make(map[string]updateCache)
	blueprintShieldTypeUpsertCacheMut       sync.RWMutex
	blueprintShieldTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var blueprintShieldTypeAfterSelectHooks []BlueprintShieldTypeHook

var blueprintShieldTypeBeforeInsertHooks []BlueprintShieldTypeHook
var blueprintShieldTypeAfterInsertHooks []BlueprintShieldTypeHook

var blueprintShieldTypeBeforeUpdateHooks []BlueprintShieldTypeHook
var blueprintShieldTypeAfterUpdateHooks []BlueprintShieldTypeHook

var blueprintShieldTypeBeforeDeleteHooks []BlueprintShieldTypeHook
var blueprintShieldTypeAfterDeleteHooks []BlueprintShieldTypeHook

var blueprintShieldTypeBeforeUpsertHooks []BlueprintShieldTypeHook
var blueprintShieldTypeAfterUpsertHooks []BlueprintShieldTypeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BlueprintShieldType) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintShieldTypeAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BlueprintShieldType) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintShieldTypeBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BlueprintShieldType) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintShieldTypeAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BlueprintShieldType) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintShieldTypeBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BlueprintShieldType) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintShieldTypeAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BlueprintShieldType) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintShieldTypeBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BlueprintShieldType) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintShieldTypeAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BlueprintShieldType) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintShieldTypeBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BlueprintShieldType) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintShieldTypeAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBlueprintShieldTypeHook registers your hook function for all future operations.
func AddBlueprintShieldTypeHook(hookPoint boil.HookPoint, blueprintShieldTypeHook BlueprintShieldTypeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		blueprintShieldTypeAfterSelectHooks = append(blueprintShieldTypeAfterSelectHooks, blueprintShieldTypeHook)
	case boil.BeforeInsertHook:
		blueprintShieldTypeBeforeInsertHooks = append(blueprintShieldTypeBeforeInsertHooks, blueprintShieldTypeHook)
	case boil.AfterInsertHook:
		blueprintShieldTypeAfterInsertHooks = append(blueprintShieldTypeAfterInsertHooks, blueprintShieldTypeHook)
	case boil.BeforeUpdateHook:
		blueprintShieldTypeBeforeUpdateHooks = append(blueprintShieldTypeBeforeUpdateHooks, blueprintShieldTypeHook)
	case boil.AfterUpdateHook:
		blueprintShieldTypeAfterUpdateHooks = append(blueprintShieldTypeAfterUpdateHooks, blueprintShieldTypeHook)
	case boil.BeforeDeleteHook:
		blueprintShieldTypeBeforeDeleteHooks = append(blueprintShieldTypeBeforeDeleteHooks, blueprintShieldTypeHook)
	case boil.AfterDeleteHook:
		blueprintShieldTypeAfterDeleteHooks = append(blueprintShieldTypeAfterDeleteHooks, blueprintShieldTypeHook)
	case boil.BeforeUpsertHook:
		blueprintShieldTypeBeforeUpsertHooks = append(blueprintShieldTypeBeforeUpsertHooks, blueprintShieldTypeHook)
	case boil.AfterUpsertHook:
		blueprintShieldTypeAfterUpsertHooks = append(blueprintShieldTypeAfterUpsertHooks, blueprintShieldTypeHook)
	}
}

// One returns a single blueprintShieldType record from the query.
func (q blueprintShieldTypeQuery) One(exec boil.Executor) (*BlueprintShieldType, error) {
	o := &BlueprintShieldType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for blueprint_shield_types")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BlueprintShieldType records from the query.
func (q blueprintShieldTypeQuery) All(exec boil.Executor) (BlueprintShieldTypeSlice, error) {
	var o []*BlueprintShieldType

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BlueprintShieldType slice")
	}

	if len(blueprintShieldTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BlueprintShieldType records in the query.
func (q blueprintShieldTypeQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count blueprint_shield_types rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q blueprintShieldTypeQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if blueprint_shield_types exists")
	}

	return count > 0, nil
}

// ShieldTypeBlueprintMechs retrieves all the blueprint_mech's BlueprintMechs with an executor via shield_type_id column.
func (o *BlueprintShieldType) ShieldTypeBlueprintMechs(mods ...qm.QueryMod) blueprintMechQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"blueprint_mechs\".\"shield_type_id\"=?", o.ID),
	)

	query := BlueprintMechs(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_mechs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"blueprint_mechs\".*"})
	}

	return query
}

// LoadShieldTypeBlueprintMechs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blueprintShieldTypeL) LoadShieldTypeBlueprintMechs(e boil.Executor, singular bool, maybeBlueprintShieldType interface{}, mods queries.Applicator) error {
	var slice []*BlueprintShieldType
	var object *BlueprintShieldType

	if singular {
		object = maybeBlueprintShieldType.(*BlueprintShieldType)
	} else {
		slice = *maybeBlueprintShieldType.(*[]*BlueprintShieldType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintShieldTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintShieldTypeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_mechs`),
		qm.WhereIn(`blueprint_mechs.shield_type_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blueprint_mechs")
	}

	var resultSlice []*BlueprintMech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blueprint_mechs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blueprint_mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_mechs")
	}

	if len(blueprintMechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ShieldTypeBlueprintMechs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blueprintMechR{}
			}
			foreign.R.ShieldType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ShieldTypeID {
				local.R.ShieldTypeBlueprintMechs = append(local.R.ShieldTypeBlueprintMechs, foreign)
				if foreign.R == nil {
					foreign.R = &blueprintMechR{}
				}
				foreign.R.ShieldType = local
				break
			}
		}
	}

	return nil
}

// AddShieldTypeBlueprintMechs adds the given related objects to the existing relationships
// of the blueprint_shield_type, optionally inserting them as new records.
// Appends related to o.R.ShieldTypeBlueprintMechs.
// Sets related.R.ShieldType appropriately.
func (o *BlueprintShieldType) AddShieldTypeBlueprintMechs(exec boil.Executor, insert bool, related ...*BlueprintMech) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ShieldTypeID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"blueprint_mechs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shield_type_id"}),
				strmangle.WhereClause("\"", "\"", 2, blueprintMechPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ShieldTypeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &blueprintShieldTypeR{
			ShieldTypeBlueprintMechs: related,
		}
	} else {
		o.R.ShieldTypeBlueprintMechs = append(o.R.ShieldTypeBlueprintMechs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blueprintMechR{
				ShieldType: o,
			}
		} else {
			rel.R.ShieldType = o
		}
	}
	return nil
}

// BlueprintShieldTypes retrieves all the records using an executor.
func BlueprintShieldTypes(mods ...qm.QueryMod) blueprintShieldTypeQuery {
	mods = append(mods, qm.From("\"blueprint_shield_types\""), qmhelper.WhereIsNull("\"blueprint_shield_types\".\"deleted_at\""))
	return blueprintShieldTypeQuery{NewQuery(mods...)}
}

// FindBlueprintShieldType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlueprintShieldType(exec boil.Executor, iD string, selectCols ...string) (*BlueprintShieldType, error) {
	blueprintShieldTypeObj := &BlueprintShieldType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"blueprint_shield_types\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, blueprintShieldTypeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from blueprint_shield_types")
	}

	if err = blueprintShieldTypeObj.doAfterSelectHooks(exec); err != nil {
		return blueprintShieldTypeObj, err
	}

	return blueprintShieldTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlueprintShieldType) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_shield_types provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintShieldTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blueprintShieldTypeInsertCacheMut.RLock()
	cache, cached := blueprintShieldTypeInsertCache[key]
	blueprintShieldTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blueprintShieldTypeAllColumns,
			blueprintShieldTypeColumnsWithDefault,
			blueprintShieldTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blueprintShieldTypeType, blueprintShieldTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blueprintShieldTypeType, blueprintShieldTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"blueprint_shield_types\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"blueprint_shield_types\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into blueprint_shield_types")
	}

	if !cached {
		blueprintShieldTypeInsertCacheMut.Lock()
		blueprintShieldTypeInsertCache[key] = cache
		blueprintShieldTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BlueprintShieldType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlueprintShieldType) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	blueprintShieldTypeUpdateCacheMut.RLock()
	cache, cached := blueprintShieldTypeUpdateCache[key]
	blueprintShieldTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blueprintShieldTypeAllColumns,
			blueprintShieldTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update blueprint_shield_types, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"blueprint_shield_types\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, blueprintShieldTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blueprintShieldTypeType, blueprintShieldTypeMapping, append(wl, blueprintShieldTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update blueprint_shield_types row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for blueprint_shield_types")
	}

	if !cached {
		blueprintShieldTypeUpdateCacheMut.Lock()
		blueprintShieldTypeUpdateCache[key] = cache
		blueprintShieldTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q blueprintShieldTypeQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for blueprint_shield_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for blueprint_shield_types")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlueprintShieldTypeSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintShieldTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"blueprint_shield_types\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, blueprintShieldTypePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in blueprintShieldType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all blueprintShieldType")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlueprintShieldType) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_shield_types provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintShieldTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blueprintShieldTypeUpsertCacheMut.RLock()
	cache, cached := blueprintShieldTypeUpsertCache[key]
	blueprintShieldTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blueprintShieldTypeAllColumns,
			blueprintShieldTypeColumnsWithDefault,
			blueprintShieldTypeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			blueprintShieldTypeAllColumns,
			blueprintShieldTypePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert blueprint_shield_types, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(blueprintShieldTypePrimaryKeyColumns))
			copy(conflict, blueprintShieldTypePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"blueprint_shield_types\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(blueprintShieldTypeType, blueprintShieldTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blueprintShieldTypeType, blueprintShieldTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert blueprint_shield_types")
	}

	if !cached {
		blueprintShieldTypeUpsertCacheMut.Lock()
		blueprintShieldTypeUpsertCache[key] = cache
		blueprintShieldTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BlueprintShieldType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlueprintShieldType) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BlueprintShieldType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blueprintShieldTypePrimaryKeyMapping)
		sql = "DELETE FROM \"blueprint_shield_types\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"blueprint_shield_types\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(blueprintShieldTypeType, blueprintShieldTypeMapping, append(wl, blueprintShieldTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from blueprint_shield_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for blueprint_shield_types")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q blueprintShieldTypeQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no blueprintShieldTypeQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprint_shield_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_shield_types")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlueprintShieldTypeSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(blueprintShieldTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintShieldTypePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"blueprint_shield_types\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintShieldTypePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintShieldTypePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"blueprint_shield_types\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, blueprintShieldTypePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprintShieldType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_shield_types")
	}

	if len(blueprintShieldTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlueprintShieldType) Reload(exec boil.Executor) error {
	ret, err := FindBlueprintShieldType(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlueprintShieldTypeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlueprintShieldTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintShieldTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"blueprint_shield_types\".* FROM \"blueprint_shield_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintShieldTypePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BlueprintShieldTypeSlice")
	}

	*o = slice

	return nil
}

// BlueprintShieldTypeExists checks if the BlueprintShieldType row exists.
func BlueprintShieldTypeExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"blueprint_shield_types\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if blueprint_shield_types exists")
	}

	return exists, nil
}
