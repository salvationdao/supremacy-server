// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MechStat is an object representing the database table.
type MechStat struct {
	MechID          string `boiler:"mech_id" boil:"mech_id" json:"mech_id" toml:"mech_id" yaml:"mech_id"`
	TotalWins       int    `boiler:"total_wins" boil:"total_wins" json:"total_wins" toml:"total_wins" yaml:"total_wins"`
	TotalDeaths     int    `boiler:"total_deaths" boil:"total_deaths" json:"total_deaths" toml:"total_deaths" yaml:"total_deaths"`
	TotalKills      int    `boiler:"total_kills" boil:"total_kills" json:"total_kills" toml:"total_kills" yaml:"total_kills"`
	BattlesSurvived int    `boiler:"battles_survived" boil:"battles_survived" json:"battles_survived" toml:"battles_survived" yaml:"battles_survived"`
	TotalLosses     int    `boiler:"total_losses" boil:"total_losses" json:"total_losses" toml:"total_losses" yaml:"total_losses"`

	R *mechStatR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L mechStatL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MechStatColumns = struct {
	MechID          string
	TotalWins       string
	TotalDeaths     string
	TotalKills      string
	BattlesSurvived string
	TotalLosses     string
}{
	MechID:          "mech_id",
	TotalWins:       "total_wins",
	TotalDeaths:     "total_deaths",
	TotalKills:      "total_kills",
	BattlesSurvived: "battles_survived",
	TotalLosses:     "total_losses",
}

var MechStatTableColumns = struct {
	MechID          string
	TotalWins       string
	TotalDeaths     string
	TotalKills      string
	BattlesSurvived string
	TotalLosses     string
}{
	MechID:          "mech_stats.mech_id",
	TotalWins:       "mech_stats.total_wins",
	TotalDeaths:     "mech_stats.total_deaths",
	TotalKills:      "mech_stats.total_kills",
	BattlesSurvived: "mech_stats.battles_survived",
	TotalLosses:     "mech_stats.total_losses",
}

// Generated where

var MechStatWhere = struct {
	MechID          whereHelperstring
	TotalWins       whereHelperint
	TotalDeaths     whereHelperint
	TotalKills      whereHelperint
	BattlesSurvived whereHelperint
	TotalLosses     whereHelperint
}{
	MechID:          whereHelperstring{field: "\"mech_stats\".\"mech_id\""},
	TotalWins:       whereHelperint{field: "\"mech_stats\".\"total_wins\""},
	TotalDeaths:     whereHelperint{field: "\"mech_stats\".\"total_deaths\""},
	TotalKills:      whereHelperint{field: "\"mech_stats\".\"total_kills\""},
	BattlesSurvived: whereHelperint{field: "\"mech_stats\".\"battles_survived\""},
	TotalLosses:     whereHelperint{field: "\"mech_stats\".\"total_losses\""},
}

// MechStatRels is where relationship names are stored.
var MechStatRels = struct {
	Mech string
}{
	Mech: "Mech",
}

// mechStatR is where relationships are stored.
type mechStatR struct {
	Mech *Mech `boiler:"Mech" boil:"Mech" json:"Mech" toml:"Mech" yaml:"Mech"`
}

// NewStruct creates a new relationship struct
func (*mechStatR) NewStruct() *mechStatR {
	return &mechStatR{}
}

// mechStatL is where Load methods for each relationship are stored.
type mechStatL struct{}

var (
	mechStatAllColumns            = []string{"mech_id", "total_wins", "total_deaths", "total_kills", "battles_survived", "total_losses"}
	mechStatColumnsWithoutDefault = []string{"mech_id"}
	mechStatColumnsWithDefault    = []string{"total_wins", "total_deaths", "total_kills", "battles_survived", "total_losses"}
	mechStatPrimaryKeyColumns     = []string{"mech_id"}
	mechStatGeneratedColumns      = []string{}
)

type (
	// MechStatSlice is an alias for a slice of pointers to MechStat.
	// This should almost always be used instead of []MechStat.
	MechStatSlice []*MechStat
	// MechStatHook is the signature for custom MechStat hook methods
	MechStatHook func(boil.Executor, *MechStat) error

	mechStatQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mechStatType                 = reflect.TypeOf(&MechStat{})
	mechStatMapping              = queries.MakeStructMapping(mechStatType)
	mechStatPrimaryKeyMapping, _ = queries.BindMapping(mechStatType, mechStatMapping, mechStatPrimaryKeyColumns)
	mechStatInsertCacheMut       sync.RWMutex
	mechStatInsertCache          = make(map[string]insertCache)
	mechStatUpdateCacheMut       sync.RWMutex
	mechStatUpdateCache          = make(map[string]updateCache)
	mechStatUpsertCacheMut       sync.RWMutex
	mechStatUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mechStatAfterSelectHooks []MechStatHook

var mechStatBeforeInsertHooks []MechStatHook
var mechStatAfterInsertHooks []MechStatHook

var mechStatBeforeUpdateHooks []MechStatHook
var mechStatAfterUpdateHooks []MechStatHook

var mechStatBeforeDeleteHooks []MechStatHook
var mechStatAfterDeleteHooks []MechStatHook

var mechStatBeforeUpsertHooks []MechStatHook
var mechStatAfterUpsertHooks []MechStatHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MechStat) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range mechStatAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MechStat) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechStatBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MechStat) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechStatAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MechStat) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechStatBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MechStat) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechStatAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MechStat) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechStatBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MechStat) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechStatAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MechStat) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechStatBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MechStat) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechStatAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMechStatHook registers your hook function for all future operations.
func AddMechStatHook(hookPoint boil.HookPoint, mechStatHook MechStatHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mechStatAfterSelectHooks = append(mechStatAfterSelectHooks, mechStatHook)
	case boil.BeforeInsertHook:
		mechStatBeforeInsertHooks = append(mechStatBeforeInsertHooks, mechStatHook)
	case boil.AfterInsertHook:
		mechStatAfterInsertHooks = append(mechStatAfterInsertHooks, mechStatHook)
	case boil.BeforeUpdateHook:
		mechStatBeforeUpdateHooks = append(mechStatBeforeUpdateHooks, mechStatHook)
	case boil.AfterUpdateHook:
		mechStatAfterUpdateHooks = append(mechStatAfterUpdateHooks, mechStatHook)
	case boil.BeforeDeleteHook:
		mechStatBeforeDeleteHooks = append(mechStatBeforeDeleteHooks, mechStatHook)
	case boil.AfterDeleteHook:
		mechStatAfterDeleteHooks = append(mechStatAfterDeleteHooks, mechStatHook)
	case boil.BeforeUpsertHook:
		mechStatBeforeUpsertHooks = append(mechStatBeforeUpsertHooks, mechStatHook)
	case boil.AfterUpsertHook:
		mechStatAfterUpsertHooks = append(mechStatAfterUpsertHooks, mechStatHook)
	}
}

// One returns a single mechStat record from the query.
func (q mechStatQuery) One(exec boil.Executor) (*MechStat, error) {
	o := &MechStat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for mech_stats")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MechStat records from the query.
func (q mechStatQuery) All(exec boil.Executor) (MechStatSlice, error) {
	var o []*MechStat

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to MechStat slice")
	}

	if len(mechStatAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MechStat records in the query.
func (q mechStatQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count mech_stats rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mechStatQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if mech_stats exists")
	}

	return count > 0, nil
}

// Mech pointed to by the foreign key.
func (o *MechStat) Mech(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MechID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// LoadMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechStatL) LoadMech(e boil.Executor, singular bool, maybeMechStat interface{}, mods queries.Applicator) error {
	var slice []*MechStat
	var object *MechStat

	if singular {
		object = maybeMechStat.(*MechStat)
	} else {
		slice = *maybeMechStat.(*[]*MechStat)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechStatR{}
		}
		args = append(args, object.MechID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechStatR{}
			}

			for _, a := range args {
				if a == obj.MechID {
					continue Outer
				}
			}

			args = append(args, obj.MechID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(mechStatAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Mech = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.MechStat = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MechID == foreign.ID {
				local.R.Mech = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.MechStat = local
				break
			}
		}
	}

	return nil
}

// SetMech of the mechStat to the related item.
// Sets o.R.Mech to related.
// Adds o to related.R.MechStat.
func (o *MechStat) SetMech(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mech_stats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechStatPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MechID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MechID = related.ID
	if o.R == nil {
		o.R = &mechStatR{
			Mech: related,
		}
	} else {
		o.R.Mech = related
	}

	if related.R == nil {
		related.R = &mechR{
			MechStat: o,
		}
	} else {
		related.R.MechStat = o
	}

	return nil
}

// MechStats retrieves all the records using an executor.
func MechStats(mods ...qm.QueryMod) mechStatQuery {
	mods = append(mods, qm.From("\"mech_stats\""))
	return mechStatQuery{NewQuery(mods...)}
}

// FindMechStat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMechStat(exec boil.Executor, mechID string, selectCols ...string) (*MechStat, error) {
	mechStatObj := &MechStat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mech_stats\" where \"mech_id\"=$1", sel,
	)

	q := queries.Raw(query, mechID)

	err := q.Bind(nil, exec, mechStatObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from mech_stats")
	}

	if err = mechStatObj.doAfterSelectHooks(exec); err != nil {
		return mechStatObj, err
	}

	return mechStatObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MechStat) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mech_stats provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechStatColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mechStatInsertCacheMut.RLock()
	cache, cached := mechStatInsertCache[key]
	mechStatInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mechStatAllColumns,
			mechStatColumnsWithDefault,
			mechStatColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mechStatType, mechStatMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mechStatType, mechStatMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mech_stats\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mech_stats\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into mech_stats")
	}

	if !cached {
		mechStatInsertCacheMut.Lock()
		mechStatInsertCache[key] = cache
		mechStatInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the MechStat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MechStat) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mechStatUpdateCacheMut.RLock()
	cache, cached := mechStatUpdateCache[key]
	mechStatUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mechStatAllColumns,
			mechStatPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update mech_stats, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mech_stats\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mechStatPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mechStatType, mechStatMapping, append(wl, mechStatPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update mech_stats row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for mech_stats")
	}

	if !cached {
		mechStatUpdateCacheMut.Lock()
		mechStatUpdateCache[key] = cache
		mechStatUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mechStatQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for mech_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for mech_stats")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MechStatSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mech_stats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mechStatPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in mechStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all mechStat")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MechStat) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mech_stats provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechStatColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mechStatUpsertCacheMut.RLock()
	cache, cached := mechStatUpsertCache[key]
	mechStatUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mechStatAllColumns,
			mechStatColumnsWithDefault,
			mechStatColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mechStatAllColumns,
			mechStatPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert mech_stats, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mechStatPrimaryKeyColumns))
			copy(conflict, mechStatPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mech_stats\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mechStatType, mechStatMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mechStatType, mechStatMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert mech_stats")
	}

	if !cached {
		mechStatUpsertCacheMut.Lock()
		mechStatUpsertCache[key] = cache
		mechStatUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single MechStat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MechStat) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no MechStat provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mechStatPrimaryKeyMapping)
	sql := "DELETE FROM \"mech_stats\" WHERE \"mech_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from mech_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for mech_stats")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mechStatQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no mechStatQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mech_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mech_stats")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MechStatSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mechStatBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"mech_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechStatPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mechStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mech_stats")
	}

	if len(mechStatAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MechStat) Reload(exec boil.Executor) error {
	ret, err := FindMechStat(exec, o.MechID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MechStatSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MechStatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mech_stats\".* FROM \"mech_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechStatPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in MechStatSlice")
	}

	*o = slice

	return nil
}

// MechStatExists checks if the MechStat row exists.
func MechStatExists(exec boil.Executor, mechID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mech_stats\" where \"mech_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, mechID)
	}
	row := exec.QueryRow(sql, mechID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if mech_stats exists")
	}

	return exists, nil
}
