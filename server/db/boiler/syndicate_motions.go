// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SyndicateMotion is an object representing the database table.
type SyndicateMotion struct {
	ID                              string              `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	SyndicateID                     string              `boiler:"syndicate_id" boil:"syndicate_id" json:"syndicate_id" toml:"syndicate_id" yaml:"syndicate_id"`
	Type                            string              `boiler:"type" boil:"type" json:"type" toml:"type" yaml:"type"`
	IssuedByID                      string              `boiler:"issued_by_id" boil:"issued_by_id" json:"issued_by_id" toml:"issued_by_id" yaml:"issued_by_id"`
	Reason                          string              `boiler:"reason" boil:"reason" json:"reason" toml:"reason" yaml:"reason"`
	OldSymbol                       null.String         `boiler:"old_symbol" boil:"old_symbol" json:"old_symbol,omitempty" toml:"old_symbol" yaml:"old_symbol,omitempty"`
	NewSymbol                       null.String         `boiler:"new_symbol" boil:"new_symbol" json:"new_symbol,omitempty" toml:"new_symbol" yaml:"new_symbol,omitempty"`
	OldSyndicateName                null.String         `boiler:"old_syndicate_name" boil:"old_syndicate_name" json:"old_syndicate_name,omitempty" toml:"old_syndicate_name" yaml:"old_syndicate_name,omitempty"`
	NewSyndicateName                null.String         `boiler:"new_syndicate_name" boil:"new_syndicate_name" json:"new_syndicate_name,omitempty" toml:"new_syndicate_name" yaml:"new_syndicate_name,omitempty"`
	OldNamingConvention             null.String         `boiler:"old_naming_convention" boil:"old_naming_convention" json:"old_naming_convention,omitempty" toml:"old_naming_convention" yaml:"old_naming_convention,omitempty"`
	NewNamingConvention             null.String         `boiler:"new_naming_convention" boil:"new_naming_convention" json:"new_naming_convention,omitempty" toml:"new_naming_convention" yaml:"new_naming_convention,omitempty"`
	OldJoinFee                      decimal.NullDecimal `boiler:"old_join_fee" boil:"old_join_fee" json:"old_join_fee,omitempty" toml:"old_join_fee" yaml:"old_join_fee,omitempty"`
	NewJoinFee                      decimal.NullDecimal `boiler:"new_join_fee" boil:"new_join_fee" json:"new_join_fee,omitempty" toml:"new_join_fee" yaml:"new_join_fee,omitempty"`
	OldExitFee                      decimal.NullDecimal `boiler:"old_exit_fee" boil:"old_exit_fee" json:"old_exit_fee,omitempty" toml:"old_exit_fee" yaml:"old_exit_fee,omitempty"`
	NewExitFee                      decimal.NullDecimal `boiler:"new_exit_fee" boil:"new_exit_fee" json:"new_exit_fee,omitempty" toml:"new_exit_fee" yaml:"new_exit_fee,omitempty"`
	OldDeployingMemberCutPercentage decimal.NullDecimal `boiler:"old_deploying_member_cut_percentage" boil:"old_deploying_member_cut_percentage" json:"old_deploying_member_cut_percentage,omitempty" toml:"old_deploying_member_cut_percentage" yaml:"old_deploying_member_cut_percentage,omitempty"`
	NewDeployingMemberCutPercentage decimal.NullDecimal `boiler:"new_deploying_member_cut_percentage" boil:"new_deploying_member_cut_percentage" json:"new_deploying_member_cut_percentage,omitempty" toml:"new_deploying_member_cut_percentage" yaml:"new_deploying_member_cut_percentage,omitempty"`
	OldMemberAssistCutPercentage    decimal.NullDecimal `boiler:"old_member_assist_cut_percentage" boil:"old_member_assist_cut_percentage" json:"old_member_assist_cut_percentage,omitempty" toml:"old_member_assist_cut_percentage" yaml:"old_member_assist_cut_percentage,omitempty"`
	NewMemberAssistCutPercentage    decimal.NullDecimal `boiler:"new_member_assist_cut_percentage" boil:"new_member_assist_cut_percentage" json:"new_member_assist_cut_percentage,omitempty" toml:"new_member_assist_cut_percentage" yaml:"new_member_assist_cut_percentage,omitempty"`
	OldMechOwnerCutPercentage       decimal.NullDecimal `boiler:"old_mech_owner_cut_percentage" boil:"old_mech_owner_cut_percentage" json:"old_mech_owner_cut_percentage,omitempty" toml:"old_mech_owner_cut_percentage" yaml:"old_mech_owner_cut_percentage,omitempty"`
	NewMechOwnerCutPercentage       decimal.NullDecimal `boiler:"new_mech_owner_cut_percentage" boil:"new_mech_owner_cut_percentage" json:"new_mech_owner_cut_percentage,omitempty" toml:"new_mech_owner_cut_percentage" yaml:"new_mech_owner_cut_percentage,omitempty"`
	OldSyndicateCutPercentage       decimal.NullDecimal `boiler:"old_syndicate_cut_percentage" boil:"old_syndicate_cut_percentage" json:"old_syndicate_cut_percentage,omitempty" toml:"old_syndicate_cut_percentage" yaml:"old_syndicate_cut_percentage,omitempty"`
	NewSyndicateCutPercentage       decimal.NullDecimal `boiler:"new_syndicate_cut_percentage" boil:"new_syndicate_cut_percentage" json:"new_syndicate_cut_percentage,omitempty" toml:"new_syndicate_cut_percentage" yaml:"new_syndicate_cut_percentage,omitempty"`
	RuleID                          null.String         `boiler:"rule_id" boil:"rule_id" json:"rule_id,omitempty" toml:"rule_id" yaml:"rule_id,omitempty"`
	OldRuleNumber                   null.Int            `boiler:"old_rule_number" boil:"old_rule_number" json:"old_rule_number,omitempty" toml:"old_rule_number" yaml:"old_rule_number,omitempty"`
	NewRuleNumber                   null.Int            `boiler:"new_rule_number" boil:"new_rule_number" json:"new_rule_number,omitempty" toml:"new_rule_number" yaml:"new_rule_number,omitempty"`
	OldRuleContent                  null.String         `boiler:"old_rule_content" boil:"old_rule_content" json:"old_rule_content,omitempty" toml:"old_rule_content" yaml:"old_rule_content,omitempty"`
	NewRuleContent                  null.String         `boiler:"new_rule_content" boil:"new_rule_content" json:"new_rule_content,omitempty" toml:"new_rule_content" yaml:"new_rule_content,omitempty"`
	DirectorID                      null.String         `boiler:"director_id" boil:"director_id" json:"director_id,omitempty" toml:"director_id" yaml:"director_id,omitempty"`
	Result                          null.String         `boiler:"result" boil:"result" json:"result,omitempty" toml:"result" yaml:"result,omitempty"`
	EndedAt                         time.Time           `boiler:"ended_at" boil:"ended_at" json:"ended_at" toml:"ended_at" yaml:"ended_at"`
	ActualEndedAt                   null.Time           `boiler:"actual_ended_at" boil:"actual_ended_at" json:"actual_ended_at,omitempty" toml:"actual_ended_at" yaml:"actual_ended_at,omitempty"`
	CreatedAt                       time.Time           `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                       time.Time           `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt                       null.Time           `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *syndicateMotionR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L syndicateMotionL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SyndicateMotionColumns = struct {
	ID                              string
	SyndicateID                     string
	Type                            string
	IssuedByID                      string
	Reason                          string
	OldSymbol                       string
	NewSymbol                       string
	OldSyndicateName                string
	NewSyndicateName                string
	OldNamingConvention             string
	NewNamingConvention             string
	OldJoinFee                      string
	NewJoinFee                      string
	OldExitFee                      string
	NewExitFee                      string
	OldDeployingMemberCutPercentage string
	NewDeployingMemberCutPercentage string
	OldMemberAssistCutPercentage    string
	NewMemberAssistCutPercentage    string
	OldMechOwnerCutPercentage       string
	NewMechOwnerCutPercentage       string
	OldSyndicateCutPercentage       string
	NewSyndicateCutPercentage       string
	RuleID                          string
	OldRuleNumber                   string
	NewRuleNumber                   string
	OldRuleContent                  string
	NewRuleContent                  string
	DirectorID                      string
	Result                          string
	EndedAt                         string
	ActualEndedAt                   string
	CreatedAt                       string
	UpdatedAt                       string
	DeletedAt                       string
}{
	ID:                              "id",
	SyndicateID:                     "syndicate_id",
	Type:                            "type",
	IssuedByID:                      "issued_by_id",
	Reason:                          "reason",
	OldSymbol:                       "old_symbol",
	NewSymbol:                       "new_symbol",
	OldSyndicateName:                "old_syndicate_name",
	NewSyndicateName:                "new_syndicate_name",
	OldNamingConvention:             "old_naming_convention",
	NewNamingConvention:             "new_naming_convention",
	OldJoinFee:                      "old_join_fee",
	NewJoinFee:                      "new_join_fee",
	OldExitFee:                      "old_exit_fee",
	NewExitFee:                      "new_exit_fee",
	OldDeployingMemberCutPercentage: "old_deploying_member_cut_percentage",
	NewDeployingMemberCutPercentage: "new_deploying_member_cut_percentage",
	OldMemberAssistCutPercentage:    "old_member_assist_cut_percentage",
	NewMemberAssistCutPercentage:    "new_member_assist_cut_percentage",
	OldMechOwnerCutPercentage:       "old_mech_owner_cut_percentage",
	NewMechOwnerCutPercentage:       "new_mech_owner_cut_percentage",
	OldSyndicateCutPercentage:       "old_syndicate_cut_percentage",
	NewSyndicateCutPercentage:       "new_syndicate_cut_percentage",
	RuleID:                          "rule_id",
	OldRuleNumber:                   "old_rule_number",
	NewRuleNumber:                   "new_rule_number",
	OldRuleContent:                  "old_rule_content",
	NewRuleContent:                  "new_rule_content",
	DirectorID:                      "director_id",
	Result:                          "result",
	EndedAt:                         "ended_at",
	ActualEndedAt:                   "actual_ended_at",
	CreatedAt:                       "created_at",
	UpdatedAt:                       "updated_at",
	DeletedAt:                       "deleted_at",
}

var SyndicateMotionTableColumns = struct {
	ID                              string
	SyndicateID                     string
	Type                            string
	IssuedByID                      string
	Reason                          string
	OldSymbol                       string
	NewSymbol                       string
	OldSyndicateName                string
	NewSyndicateName                string
	OldNamingConvention             string
	NewNamingConvention             string
	OldJoinFee                      string
	NewJoinFee                      string
	OldExitFee                      string
	NewExitFee                      string
	OldDeployingMemberCutPercentage string
	NewDeployingMemberCutPercentage string
	OldMemberAssistCutPercentage    string
	NewMemberAssistCutPercentage    string
	OldMechOwnerCutPercentage       string
	NewMechOwnerCutPercentage       string
	OldSyndicateCutPercentage       string
	NewSyndicateCutPercentage       string
	RuleID                          string
	OldRuleNumber                   string
	NewRuleNumber                   string
	OldRuleContent                  string
	NewRuleContent                  string
	DirectorID                      string
	Result                          string
	EndedAt                         string
	ActualEndedAt                   string
	CreatedAt                       string
	UpdatedAt                       string
	DeletedAt                       string
}{
	ID:                              "syndicate_motions.id",
	SyndicateID:                     "syndicate_motions.syndicate_id",
	Type:                            "syndicate_motions.type",
	IssuedByID:                      "syndicate_motions.issued_by_id",
	Reason:                          "syndicate_motions.reason",
	OldSymbol:                       "syndicate_motions.old_symbol",
	NewSymbol:                       "syndicate_motions.new_symbol",
	OldSyndicateName:                "syndicate_motions.old_syndicate_name",
	NewSyndicateName:                "syndicate_motions.new_syndicate_name",
	OldNamingConvention:             "syndicate_motions.old_naming_convention",
	NewNamingConvention:             "syndicate_motions.new_naming_convention",
	OldJoinFee:                      "syndicate_motions.old_join_fee",
	NewJoinFee:                      "syndicate_motions.new_join_fee",
	OldExitFee:                      "syndicate_motions.old_exit_fee",
	NewExitFee:                      "syndicate_motions.new_exit_fee",
	OldDeployingMemberCutPercentage: "syndicate_motions.old_deploying_member_cut_percentage",
	NewDeployingMemberCutPercentage: "syndicate_motions.new_deploying_member_cut_percentage",
	OldMemberAssistCutPercentage:    "syndicate_motions.old_member_assist_cut_percentage",
	NewMemberAssistCutPercentage:    "syndicate_motions.new_member_assist_cut_percentage",
	OldMechOwnerCutPercentage:       "syndicate_motions.old_mech_owner_cut_percentage",
	NewMechOwnerCutPercentage:       "syndicate_motions.new_mech_owner_cut_percentage",
	OldSyndicateCutPercentage:       "syndicate_motions.old_syndicate_cut_percentage",
	NewSyndicateCutPercentage:       "syndicate_motions.new_syndicate_cut_percentage",
	RuleID:                          "syndicate_motions.rule_id",
	OldRuleNumber:                   "syndicate_motions.old_rule_number",
	NewRuleNumber:                   "syndicate_motions.new_rule_number",
	OldRuleContent:                  "syndicate_motions.old_rule_content",
	NewRuleContent:                  "syndicate_motions.new_rule_content",
	DirectorID:                      "syndicate_motions.director_id",
	Result:                          "syndicate_motions.result",
	EndedAt:                         "syndicate_motions.ended_at",
	ActualEndedAt:                   "syndicate_motions.actual_ended_at",
	CreatedAt:                       "syndicate_motions.created_at",
	UpdatedAt:                       "syndicate_motions.updated_at",
	DeletedAt:                       "syndicate_motions.deleted_at",
}

// Generated where

var SyndicateMotionWhere = struct {
	ID                              whereHelperstring
	SyndicateID                     whereHelperstring
	Type                            whereHelperstring
	IssuedByID                      whereHelperstring
	Reason                          whereHelperstring
	OldSymbol                       whereHelpernull_String
	NewSymbol                       whereHelpernull_String
	OldSyndicateName                whereHelpernull_String
	NewSyndicateName                whereHelpernull_String
	OldNamingConvention             whereHelpernull_String
	NewNamingConvention             whereHelpernull_String
	OldJoinFee                      whereHelperdecimal_NullDecimal
	NewJoinFee                      whereHelperdecimal_NullDecimal
	OldExitFee                      whereHelperdecimal_NullDecimal
	NewExitFee                      whereHelperdecimal_NullDecimal
	OldDeployingMemberCutPercentage whereHelperdecimal_NullDecimal
	NewDeployingMemberCutPercentage whereHelperdecimal_NullDecimal
	OldMemberAssistCutPercentage    whereHelperdecimal_NullDecimal
	NewMemberAssistCutPercentage    whereHelperdecimal_NullDecimal
	OldMechOwnerCutPercentage       whereHelperdecimal_NullDecimal
	NewMechOwnerCutPercentage       whereHelperdecimal_NullDecimal
	OldSyndicateCutPercentage       whereHelperdecimal_NullDecimal
	NewSyndicateCutPercentage       whereHelperdecimal_NullDecimal
	RuleID                          whereHelpernull_String
	OldRuleNumber                   whereHelpernull_Int
	NewRuleNumber                   whereHelpernull_Int
	OldRuleContent                  whereHelpernull_String
	NewRuleContent                  whereHelpernull_String
	DirectorID                      whereHelpernull_String
	Result                          whereHelpernull_String
	EndedAt                         whereHelpertime_Time
	ActualEndedAt                   whereHelpernull_Time
	CreatedAt                       whereHelpertime_Time
	UpdatedAt                       whereHelpertime_Time
	DeletedAt                       whereHelpernull_Time
}{
	ID:                              whereHelperstring{field: "\"syndicate_motions\".\"id\""},
	SyndicateID:                     whereHelperstring{field: "\"syndicate_motions\".\"syndicate_id\""},
	Type:                            whereHelperstring{field: "\"syndicate_motions\".\"type\""},
	IssuedByID:                      whereHelperstring{field: "\"syndicate_motions\".\"issued_by_id\""},
	Reason:                          whereHelperstring{field: "\"syndicate_motions\".\"reason\""},
	OldSymbol:                       whereHelpernull_String{field: "\"syndicate_motions\".\"old_symbol\""},
	NewSymbol:                       whereHelpernull_String{field: "\"syndicate_motions\".\"new_symbol\""},
	OldSyndicateName:                whereHelpernull_String{field: "\"syndicate_motions\".\"old_syndicate_name\""},
	NewSyndicateName:                whereHelpernull_String{field: "\"syndicate_motions\".\"new_syndicate_name\""},
	OldNamingConvention:             whereHelpernull_String{field: "\"syndicate_motions\".\"old_naming_convention\""},
	NewNamingConvention:             whereHelpernull_String{field: "\"syndicate_motions\".\"new_naming_convention\""},
	OldJoinFee:                      whereHelperdecimal_NullDecimal{field: "\"syndicate_motions\".\"old_join_fee\""},
	NewJoinFee:                      whereHelperdecimal_NullDecimal{field: "\"syndicate_motions\".\"new_join_fee\""},
	OldExitFee:                      whereHelperdecimal_NullDecimal{field: "\"syndicate_motions\".\"old_exit_fee\""},
	NewExitFee:                      whereHelperdecimal_NullDecimal{field: "\"syndicate_motions\".\"new_exit_fee\""},
	OldDeployingMemberCutPercentage: whereHelperdecimal_NullDecimal{field: "\"syndicate_motions\".\"old_deploying_member_cut_percentage\""},
	NewDeployingMemberCutPercentage: whereHelperdecimal_NullDecimal{field: "\"syndicate_motions\".\"new_deploying_member_cut_percentage\""},
	OldMemberAssistCutPercentage:    whereHelperdecimal_NullDecimal{field: "\"syndicate_motions\".\"old_member_assist_cut_percentage\""},
	NewMemberAssistCutPercentage:    whereHelperdecimal_NullDecimal{field: "\"syndicate_motions\".\"new_member_assist_cut_percentage\""},
	OldMechOwnerCutPercentage:       whereHelperdecimal_NullDecimal{field: "\"syndicate_motions\".\"old_mech_owner_cut_percentage\""},
	NewMechOwnerCutPercentage:       whereHelperdecimal_NullDecimal{field: "\"syndicate_motions\".\"new_mech_owner_cut_percentage\""},
	OldSyndicateCutPercentage:       whereHelperdecimal_NullDecimal{field: "\"syndicate_motions\".\"old_syndicate_cut_percentage\""},
	NewSyndicateCutPercentage:       whereHelperdecimal_NullDecimal{field: "\"syndicate_motions\".\"new_syndicate_cut_percentage\""},
	RuleID:                          whereHelpernull_String{field: "\"syndicate_motions\".\"rule_id\""},
	OldRuleNumber:                   whereHelpernull_Int{field: "\"syndicate_motions\".\"old_rule_number\""},
	NewRuleNumber:                   whereHelpernull_Int{field: "\"syndicate_motions\".\"new_rule_number\""},
	OldRuleContent:                  whereHelpernull_String{field: "\"syndicate_motions\".\"old_rule_content\""},
	NewRuleContent:                  whereHelpernull_String{field: "\"syndicate_motions\".\"new_rule_content\""},
	DirectorID:                      whereHelpernull_String{field: "\"syndicate_motions\".\"director_id\""},
	Result:                          whereHelpernull_String{field: "\"syndicate_motions\".\"result\""},
	EndedAt:                         whereHelpertime_Time{field: "\"syndicate_motions\".\"ended_at\""},
	ActualEndedAt:                   whereHelpernull_Time{field: "\"syndicate_motions\".\"actual_ended_at\""},
	CreatedAt:                       whereHelpertime_Time{field: "\"syndicate_motions\".\"created_at\""},
	UpdatedAt:                       whereHelpertime_Time{field: "\"syndicate_motions\".\"updated_at\""},
	DeletedAt:                       whereHelpernull_Time{field: "\"syndicate_motions\".\"deleted_at\""},
}

// SyndicateMotionRels is where relationship names are stored.
var SyndicateMotionRels = struct {
	Director                   string
	IssuedBy                   string
	Rule                       string
	Syndicate                  string
	MotionSyndicateMotionVotes string
}{
	Director:                   "Director",
	IssuedBy:                   "IssuedBy",
	Rule:                       "Rule",
	Syndicate:                  "Syndicate",
	MotionSyndicateMotionVotes: "MotionSyndicateMotionVotes",
}

// syndicateMotionR is where relationships are stored.
type syndicateMotionR struct {
	Director                   *Player                  `boiler:"Director" boil:"Director" json:"Director" toml:"Director" yaml:"Director"`
	IssuedBy                   *Player                  `boiler:"IssuedBy" boil:"IssuedBy" json:"IssuedBy" toml:"IssuedBy" yaml:"IssuedBy"`
	Rule                       *SyndicateRule           `boiler:"Rule" boil:"Rule" json:"Rule" toml:"Rule" yaml:"Rule"`
	Syndicate                  *Syndicate               `boiler:"Syndicate" boil:"Syndicate" json:"Syndicate" toml:"Syndicate" yaml:"Syndicate"`
	MotionSyndicateMotionVotes SyndicateMotionVoteSlice `boiler:"MotionSyndicateMotionVotes" boil:"MotionSyndicateMotionVotes" json:"MotionSyndicateMotionVotes" toml:"MotionSyndicateMotionVotes" yaml:"MotionSyndicateMotionVotes"`
}

// NewStruct creates a new relationship struct
func (*syndicateMotionR) NewStruct() *syndicateMotionR {
	return &syndicateMotionR{}
}

// syndicateMotionL is where Load methods for each relationship are stored.
type syndicateMotionL struct{}

var (
	syndicateMotionAllColumns            = []string{"id", "syndicate_id", "type", "issued_by_id", "reason", "old_symbol", "new_symbol", "old_syndicate_name", "new_syndicate_name", "old_naming_convention", "new_naming_convention", "old_join_fee", "new_join_fee", "old_exit_fee", "new_exit_fee", "old_deploying_member_cut_percentage", "new_deploying_member_cut_percentage", "old_member_assist_cut_percentage", "new_member_assist_cut_percentage", "old_mech_owner_cut_percentage", "new_mech_owner_cut_percentage", "old_syndicate_cut_percentage", "new_syndicate_cut_percentage", "rule_id", "old_rule_number", "new_rule_number", "old_rule_content", "new_rule_content", "director_id", "result", "ended_at", "actual_ended_at", "created_at", "updated_at", "deleted_at"}
	syndicateMotionColumnsWithoutDefault = []string{"syndicate_id", "type", "issued_by_id", "reason", "ended_at"}
	syndicateMotionColumnsWithDefault    = []string{"id", "old_symbol", "new_symbol", "old_syndicate_name", "new_syndicate_name", "old_naming_convention", "new_naming_convention", "old_join_fee", "new_join_fee", "old_exit_fee", "new_exit_fee", "old_deploying_member_cut_percentage", "new_deploying_member_cut_percentage", "old_member_assist_cut_percentage", "new_member_assist_cut_percentage", "old_mech_owner_cut_percentage", "new_mech_owner_cut_percentage", "old_syndicate_cut_percentage", "new_syndicate_cut_percentage", "rule_id", "old_rule_number", "new_rule_number", "old_rule_content", "new_rule_content", "director_id", "result", "actual_ended_at", "created_at", "updated_at", "deleted_at"}
	syndicateMotionPrimaryKeyColumns     = []string{"id"}
	syndicateMotionGeneratedColumns      = []string{}
)

type (
	// SyndicateMotionSlice is an alias for a slice of pointers to SyndicateMotion.
	// This should almost always be used instead of []SyndicateMotion.
	SyndicateMotionSlice []*SyndicateMotion
	// SyndicateMotionHook is the signature for custom SyndicateMotion hook methods
	SyndicateMotionHook func(boil.Executor, *SyndicateMotion) error

	syndicateMotionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	syndicateMotionType                 = reflect.TypeOf(&SyndicateMotion{})
	syndicateMotionMapping              = queries.MakeStructMapping(syndicateMotionType)
	syndicateMotionPrimaryKeyMapping, _ = queries.BindMapping(syndicateMotionType, syndicateMotionMapping, syndicateMotionPrimaryKeyColumns)
	syndicateMotionInsertCacheMut       sync.RWMutex
	syndicateMotionInsertCache          = make(map[string]insertCache)
	syndicateMotionUpdateCacheMut       sync.RWMutex
	syndicateMotionUpdateCache          = make(map[string]updateCache)
	syndicateMotionUpsertCacheMut       sync.RWMutex
	syndicateMotionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var syndicateMotionAfterSelectHooks []SyndicateMotionHook

var syndicateMotionBeforeInsertHooks []SyndicateMotionHook
var syndicateMotionAfterInsertHooks []SyndicateMotionHook

var syndicateMotionBeforeUpdateHooks []SyndicateMotionHook
var syndicateMotionAfterUpdateHooks []SyndicateMotionHook

var syndicateMotionBeforeDeleteHooks []SyndicateMotionHook
var syndicateMotionAfterDeleteHooks []SyndicateMotionHook

var syndicateMotionBeforeUpsertHooks []SyndicateMotionHook
var syndicateMotionAfterUpsertHooks []SyndicateMotionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SyndicateMotion) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateMotionAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SyndicateMotion) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateMotionBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SyndicateMotion) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateMotionAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SyndicateMotion) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateMotionBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SyndicateMotion) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateMotionAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SyndicateMotion) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateMotionBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SyndicateMotion) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateMotionAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SyndicateMotion) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateMotionBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SyndicateMotion) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range syndicateMotionAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSyndicateMotionHook registers your hook function for all future operations.
func AddSyndicateMotionHook(hookPoint boil.HookPoint, syndicateMotionHook SyndicateMotionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		syndicateMotionAfterSelectHooks = append(syndicateMotionAfterSelectHooks, syndicateMotionHook)
	case boil.BeforeInsertHook:
		syndicateMotionBeforeInsertHooks = append(syndicateMotionBeforeInsertHooks, syndicateMotionHook)
	case boil.AfterInsertHook:
		syndicateMotionAfterInsertHooks = append(syndicateMotionAfterInsertHooks, syndicateMotionHook)
	case boil.BeforeUpdateHook:
		syndicateMotionBeforeUpdateHooks = append(syndicateMotionBeforeUpdateHooks, syndicateMotionHook)
	case boil.AfterUpdateHook:
		syndicateMotionAfterUpdateHooks = append(syndicateMotionAfterUpdateHooks, syndicateMotionHook)
	case boil.BeforeDeleteHook:
		syndicateMotionBeforeDeleteHooks = append(syndicateMotionBeforeDeleteHooks, syndicateMotionHook)
	case boil.AfterDeleteHook:
		syndicateMotionAfterDeleteHooks = append(syndicateMotionAfterDeleteHooks, syndicateMotionHook)
	case boil.BeforeUpsertHook:
		syndicateMotionBeforeUpsertHooks = append(syndicateMotionBeforeUpsertHooks, syndicateMotionHook)
	case boil.AfterUpsertHook:
		syndicateMotionAfterUpsertHooks = append(syndicateMotionAfterUpsertHooks, syndicateMotionHook)
	}
}

// One returns a single syndicateMotion record from the query.
func (q syndicateMotionQuery) One(exec boil.Executor) (*SyndicateMotion, error) {
	o := &SyndicateMotion{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for syndicate_motions")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SyndicateMotion records from the query.
func (q syndicateMotionQuery) All(exec boil.Executor) (SyndicateMotionSlice, error) {
	var o []*SyndicateMotion

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to SyndicateMotion slice")
	}

	if len(syndicateMotionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SyndicateMotion records in the query.
func (q syndicateMotionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count syndicate_motions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q syndicateMotionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if syndicate_motions exists")
	}

	return count > 0, nil
}

// Director pointed to by the foreign key.
func (o *SyndicateMotion) Director(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DirectorID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// IssuedBy pointed to by the foreign key.
func (o *SyndicateMotion) IssuedBy(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IssuedByID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// Rule pointed to by the foreign key.
func (o *SyndicateMotion) Rule(mods ...qm.QueryMod) syndicateRuleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RuleID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := SyndicateRules(queryMods...)
	queries.SetFrom(query.Query, "\"syndicate_rules\"")

	return query
}

// Syndicate pointed to by the foreign key.
func (o *SyndicateMotion) Syndicate(mods ...qm.QueryMod) syndicateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SyndicateID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Syndicates(queryMods...)
	queries.SetFrom(query.Query, "\"syndicates\"")

	return query
}

// MotionSyndicateMotionVotes retrieves all the syndicate_motion_vote's SyndicateMotionVotes with an executor via motion_id column.
func (o *SyndicateMotion) MotionSyndicateMotionVotes(mods ...qm.QueryMod) syndicateMotionVoteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"syndicate_motion_votes\".\"motion_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"syndicate_motion_votes\".\"deleted_at\""),
	)

	query := SyndicateMotionVotes(queryMods...)
	queries.SetFrom(query.Query, "\"syndicate_motion_votes\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"syndicate_motion_votes\".*"})
	}

	return query
}

// LoadDirector allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateMotionL) LoadDirector(e boil.Executor, singular bool, maybeSyndicateMotion interface{}, mods queries.Applicator) error {
	var slice []*SyndicateMotion
	var object *SyndicateMotion

	if singular {
		object = maybeSyndicateMotion.(*SyndicateMotion)
	} else {
		slice = *maybeSyndicateMotion.(*[]*SyndicateMotion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateMotionR{}
		}
		if !queries.IsNil(object.DirectorID) {
			args = append(args, object.DirectorID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateMotionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DirectorID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DirectorID) {
				args = append(args, obj.DirectorID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(syndicateMotionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Director = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.DirectorSyndicateMotions = append(foreign.R.DirectorSyndicateMotions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DirectorID, foreign.ID) {
				local.R.Director = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.DirectorSyndicateMotions = append(foreign.R.DirectorSyndicateMotions, local)
				break
			}
		}
	}

	return nil
}

// LoadIssuedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateMotionL) LoadIssuedBy(e boil.Executor, singular bool, maybeSyndicateMotion interface{}, mods queries.Applicator) error {
	var slice []*SyndicateMotion
	var object *SyndicateMotion

	if singular {
		object = maybeSyndicateMotion.(*SyndicateMotion)
	} else {
		slice = *maybeSyndicateMotion.(*[]*SyndicateMotion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateMotionR{}
		}
		args = append(args, object.IssuedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateMotionR{}
			}

			for _, a := range args {
				if a == obj.IssuedByID {
					continue Outer
				}
			}

			args = append(args, obj.IssuedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(syndicateMotionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IssuedBy = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.IssuedBySyndicateMotions = append(foreign.R.IssuedBySyndicateMotions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IssuedByID == foreign.ID {
				local.R.IssuedBy = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.IssuedBySyndicateMotions = append(foreign.R.IssuedBySyndicateMotions, local)
				break
			}
		}
	}

	return nil
}

// LoadRule allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateMotionL) LoadRule(e boil.Executor, singular bool, maybeSyndicateMotion interface{}, mods queries.Applicator) error {
	var slice []*SyndicateMotion
	var object *SyndicateMotion

	if singular {
		object = maybeSyndicateMotion.(*SyndicateMotion)
	} else {
		slice = *maybeSyndicateMotion.(*[]*SyndicateMotion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateMotionR{}
		}
		if !queries.IsNil(object.RuleID) {
			args = append(args, object.RuleID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateMotionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RuleID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RuleID) {
				args = append(args, obj.RuleID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicate_rules`),
		qm.WhereIn(`syndicate_rules.id in ?`, args...),
		qmhelper.WhereIsNull(`syndicate_rules.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SyndicateRule")
	}

	var resultSlice []*SyndicateRule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SyndicateRule")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for syndicate_rules")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicate_rules")
	}

	if len(syndicateMotionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Rule = foreign
		if foreign.R == nil {
			foreign.R = &syndicateRuleR{}
		}
		foreign.R.RuleSyndicateMotions = append(foreign.R.RuleSyndicateMotions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RuleID, foreign.ID) {
				local.R.Rule = foreign
				if foreign.R == nil {
					foreign.R = &syndicateRuleR{}
				}
				foreign.R.RuleSyndicateMotions = append(foreign.R.RuleSyndicateMotions, local)
				break
			}
		}
	}

	return nil
}

// LoadSyndicate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syndicateMotionL) LoadSyndicate(e boil.Executor, singular bool, maybeSyndicateMotion interface{}, mods queries.Applicator) error {
	var slice []*SyndicateMotion
	var object *SyndicateMotion

	if singular {
		object = maybeSyndicateMotion.(*SyndicateMotion)
	} else {
		slice = *maybeSyndicateMotion.(*[]*SyndicateMotion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateMotionR{}
		}
		args = append(args, object.SyndicateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateMotionR{}
			}

			for _, a := range args {
				if a == obj.SyndicateID {
					continue Outer
				}
			}

			args = append(args, obj.SyndicateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicates`),
		qm.WhereIn(`syndicates.id in ?`, args...),
		qmhelper.WhereIsNull(`syndicates.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Syndicate")
	}

	var resultSlice []*Syndicate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Syndicate")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for syndicates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicates")
	}

	if len(syndicateMotionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Syndicate = foreign
		if foreign.R == nil {
			foreign.R = &syndicateR{}
		}
		foreign.R.SyndicateMotions = append(foreign.R.SyndicateMotions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SyndicateID == foreign.ID {
				local.R.Syndicate = foreign
				if foreign.R == nil {
					foreign.R = &syndicateR{}
				}
				foreign.R.SyndicateMotions = append(foreign.R.SyndicateMotions, local)
				break
			}
		}
	}

	return nil
}

// LoadMotionSyndicateMotionVotes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (syndicateMotionL) LoadMotionSyndicateMotionVotes(e boil.Executor, singular bool, maybeSyndicateMotion interface{}, mods queries.Applicator) error {
	var slice []*SyndicateMotion
	var object *SyndicateMotion

	if singular {
		object = maybeSyndicateMotion.(*SyndicateMotion)
	} else {
		slice = *maybeSyndicateMotion.(*[]*SyndicateMotion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &syndicateMotionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syndicateMotionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`syndicate_motion_votes`),
		qm.WhereIn(`syndicate_motion_votes.motion_id in ?`, args...),
		qmhelper.WhereIsNull(`syndicate_motion_votes.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load syndicate_motion_votes")
	}

	var resultSlice []*SyndicateMotionVote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice syndicate_motion_votes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on syndicate_motion_votes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for syndicate_motion_votes")
	}

	if len(syndicateMotionVoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MotionSyndicateMotionVotes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &syndicateMotionVoteR{}
			}
			foreign.R.Motion = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MotionID {
				local.R.MotionSyndicateMotionVotes = append(local.R.MotionSyndicateMotionVotes, foreign)
				if foreign.R == nil {
					foreign.R = &syndicateMotionVoteR{}
				}
				foreign.R.Motion = local
				break
			}
		}
	}

	return nil
}

// SetDirector of the syndicateMotion to the related item.
// Sets o.R.Director to related.
// Adds o to related.R.DirectorSyndicateMotions.
func (o *SyndicateMotion) SetDirector(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicate_motions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"director_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicateMotionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DirectorID, related.ID)
	if o.R == nil {
		o.R = &syndicateMotionR{
			Director: related,
		}
	} else {
		o.R.Director = related
	}

	if related.R == nil {
		related.R = &playerR{
			DirectorSyndicateMotions: SyndicateMotionSlice{o},
		}
	} else {
		related.R.DirectorSyndicateMotions = append(related.R.DirectorSyndicateMotions, o)
	}

	return nil
}

// RemoveDirector relationship.
// Sets o.R.Director to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *SyndicateMotion) RemoveDirector(exec boil.Executor, related *Player) error {
	var err error

	queries.SetScanner(&o.DirectorID, nil)
	if _, err = o.Update(exec, boil.Whitelist("director_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Director = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.DirectorSyndicateMotions {
		if queries.Equal(o.DirectorID, ri.DirectorID) {
			continue
		}

		ln := len(related.R.DirectorSyndicateMotions)
		if ln > 1 && i < ln-1 {
			related.R.DirectorSyndicateMotions[i] = related.R.DirectorSyndicateMotions[ln-1]
		}
		related.R.DirectorSyndicateMotions = related.R.DirectorSyndicateMotions[:ln-1]
		break
	}
	return nil
}

// SetIssuedBy of the syndicateMotion to the related item.
// Sets o.R.IssuedBy to related.
// Adds o to related.R.IssuedBySyndicateMotions.
func (o *SyndicateMotion) SetIssuedBy(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicate_motions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"issued_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicateMotionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IssuedByID = related.ID
	if o.R == nil {
		o.R = &syndicateMotionR{
			IssuedBy: related,
		}
	} else {
		o.R.IssuedBy = related
	}

	if related.R == nil {
		related.R = &playerR{
			IssuedBySyndicateMotions: SyndicateMotionSlice{o},
		}
	} else {
		related.R.IssuedBySyndicateMotions = append(related.R.IssuedBySyndicateMotions, o)
	}

	return nil
}

// SetRule of the syndicateMotion to the related item.
// Sets o.R.Rule to related.
// Adds o to related.R.RuleSyndicateMotions.
func (o *SyndicateMotion) SetRule(exec boil.Executor, insert bool, related *SyndicateRule) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicate_motions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"rule_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicateMotionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RuleID, related.ID)
	if o.R == nil {
		o.R = &syndicateMotionR{
			Rule: related,
		}
	} else {
		o.R.Rule = related
	}

	if related.R == nil {
		related.R = &syndicateRuleR{
			RuleSyndicateMotions: SyndicateMotionSlice{o},
		}
	} else {
		related.R.RuleSyndicateMotions = append(related.R.RuleSyndicateMotions, o)
	}

	return nil
}

// RemoveRule relationship.
// Sets o.R.Rule to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *SyndicateMotion) RemoveRule(exec boil.Executor, related *SyndicateRule) error {
	var err error

	queries.SetScanner(&o.RuleID, nil)
	if _, err = o.Update(exec, boil.Whitelist("rule_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Rule = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RuleSyndicateMotions {
		if queries.Equal(o.RuleID, ri.RuleID) {
			continue
		}

		ln := len(related.R.RuleSyndicateMotions)
		if ln > 1 && i < ln-1 {
			related.R.RuleSyndicateMotions[i] = related.R.RuleSyndicateMotions[ln-1]
		}
		related.R.RuleSyndicateMotions = related.R.RuleSyndicateMotions[:ln-1]
		break
	}
	return nil
}

// SetSyndicate of the syndicateMotion to the related item.
// Sets o.R.Syndicate to related.
// Adds o to related.R.SyndicateMotions.
func (o *SyndicateMotion) SetSyndicate(exec boil.Executor, insert bool, related *Syndicate) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"syndicate_motions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"syndicate_id"}),
		strmangle.WhereClause("\"", "\"", 2, syndicateMotionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SyndicateID = related.ID
	if o.R == nil {
		o.R = &syndicateMotionR{
			Syndicate: related,
		}
	} else {
		o.R.Syndicate = related
	}

	if related.R == nil {
		related.R = &syndicateR{
			SyndicateMotions: SyndicateMotionSlice{o},
		}
	} else {
		related.R.SyndicateMotions = append(related.R.SyndicateMotions, o)
	}

	return nil
}

// AddMotionSyndicateMotionVotes adds the given related objects to the existing relationships
// of the syndicate_motion, optionally inserting them as new records.
// Appends related to o.R.MotionSyndicateMotionVotes.
// Sets related.R.Motion appropriately.
func (o *SyndicateMotion) AddMotionSyndicateMotionVotes(exec boil.Executor, insert bool, related ...*SyndicateMotionVote) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MotionID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"syndicate_motion_votes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"motion_id"}),
				strmangle.WhereClause("\"", "\"", 2, syndicateMotionVotePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MotionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &syndicateMotionR{
			MotionSyndicateMotionVotes: related,
		}
	} else {
		o.R.MotionSyndicateMotionVotes = append(o.R.MotionSyndicateMotionVotes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &syndicateMotionVoteR{
				Motion: o,
			}
		} else {
			rel.R.Motion = o
		}
	}
	return nil
}

// SyndicateMotions retrieves all the records using an executor.
func SyndicateMotions(mods ...qm.QueryMod) syndicateMotionQuery {
	mods = append(mods, qm.From("\"syndicate_motions\""), qmhelper.WhereIsNull("\"syndicate_motions\".\"deleted_at\""))
	return syndicateMotionQuery{NewQuery(mods...)}
}

// FindSyndicateMotion retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSyndicateMotion(exec boil.Executor, iD string, selectCols ...string) (*SyndicateMotion, error) {
	syndicateMotionObj := &SyndicateMotion{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"syndicate_motions\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, syndicateMotionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from syndicate_motions")
	}

	if err = syndicateMotionObj.doAfterSelectHooks(exec); err != nil {
		return syndicateMotionObj, err
	}

	return syndicateMotionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SyndicateMotion) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no syndicate_motions provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syndicateMotionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	syndicateMotionInsertCacheMut.RLock()
	cache, cached := syndicateMotionInsertCache[key]
	syndicateMotionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			syndicateMotionAllColumns,
			syndicateMotionColumnsWithDefault,
			syndicateMotionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(syndicateMotionType, syndicateMotionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(syndicateMotionType, syndicateMotionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"syndicate_motions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"syndicate_motions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into syndicate_motions")
	}

	if !cached {
		syndicateMotionInsertCacheMut.Lock()
		syndicateMotionInsertCache[key] = cache
		syndicateMotionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the SyndicateMotion.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SyndicateMotion) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	syndicateMotionUpdateCacheMut.RLock()
	cache, cached := syndicateMotionUpdateCache[key]
	syndicateMotionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			syndicateMotionAllColumns,
			syndicateMotionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update syndicate_motions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"syndicate_motions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, syndicateMotionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(syndicateMotionType, syndicateMotionMapping, append(wl, syndicateMotionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update syndicate_motions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for syndicate_motions")
	}

	if !cached {
		syndicateMotionUpdateCacheMut.Lock()
		syndicateMotionUpdateCache[key] = cache
		syndicateMotionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q syndicateMotionQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for syndicate_motions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for syndicate_motions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SyndicateMotionSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateMotionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"syndicate_motions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, syndicateMotionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in syndicateMotion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all syndicateMotion")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SyndicateMotion) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no syndicate_motions provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syndicateMotionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	syndicateMotionUpsertCacheMut.RLock()
	cache, cached := syndicateMotionUpsertCache[key]
	syndicateMotionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			syndicateMotionAllColumns,
			syndicateMotionColumnsWithDefault,
			syndicateMotionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			syndicateMotionAllColumns,
			syndicateMotionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert syndicate_motions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(syndicateMotionPrimaryKeyColumns))
			copy(conflict, syndicateMotionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"syndicate_motions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(syndicateMotionType, syndicateMotionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(syndicateMotionType, syndicateMotionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert syndicate_motions")
	}

	if !cached {
		syndicateMotionUpsertCacheMut.Lock()
		syndicateMotionUpsertCache[key] = cache
		syndicateMotionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single SyndicateMotion record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SyndicateMotion) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no SyndicateMotion provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), syndicateMotionPrimaryKeyMapping)
		sql = "DELETE FROM \"syndicate_motions\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"syndicate_motions\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(syndicateMotionType, syndicateMotionMapping, append(wl, syndicateMotionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from syndicate_motions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for syndicate_motions")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q syndicateMotionQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no syndicateMotionQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from syndicate_motions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for syndicate_motions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SyndicateMotionSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(syndicateMotionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateMotionPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"syndicate_motions\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syndicateMotionPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateMotionPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"syndicate_motions\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, syndicateMotionPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from syndicateMotion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for syndicate_motions")
	}

	if len(syndicateMotionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SyndicateMotion) Reload(exec boil.Executor) error {
	ret, err := FindSyndicateMotion(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SyndicateMotionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SyndicateMotionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syndicateMotionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"syndicate_motions\".* FROM \"syndicate_motions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syndicateMotionPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in SyndicateMotionSlice")
	}

	*o = slice

	return nil
}

// SyndicateMotionExists checks if the SyndicateMotion row exists.
func SyndicateMotionExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"syndicate_motions\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if syndicate_motions exists")
	}

	return exists, nil
}
