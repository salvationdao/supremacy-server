// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Availability is an object representing the database table.
type Availability struct {
	ID         string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Reason     string    `boiler:"reason" boil:"reason" json:"reason" toml:"reason" yaml:"reason"`
	AvaiableAt time.Time `boiler:"avaiable_at" boil:"avaiable_at" json:"avaiable_at" toml:"avaiable_at" yaml:"avaiable_at"`

	R *availabilityR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L availabilityL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AvailabilityColumns = struct {
	ID         string
	Reason     string
	AvaiableAt string
}{
	ID:         "id",
	Reason:     "reason",
	AvaiableAt: "avaiable_at",
}

var AvailabilityTableColumns = struct {
	ID         string
	Reason     string
	AvaiableAt string
}{
	ID:         "availabilities.id",
	Reason:     "availabilities.reason",
	AvaiableAt: "availabilities.avaiable_at",
}

// Generated where

var AvailabilityWhere = struct {
	ID         whereHelperstring
	Reason     whereHelperstring
	AvaiableAt whereHelpertime_Time
}{
	ID:         whereHelperstring{field: "\"availabilities\".\"id\""},
	Reason:     whereHelperstring{field: "\"availabilities\".\"reason\""},
	AvaiableAt: whereHelpertime_Time{field: "\"availabilities\".\"avaiable_at\""},
}

// AvailabilityRels is where relationship names are stored.
var AvailabilityRels = struct {
	BlueprintMechs string
}{
	BlueprintMechs: "BlueprintMechs",
}

// availabilityR is where relationships are stored.
type availabilityR struct {
	BlueprintMechs BlueprintMechSlice `boiler:"BlueprintMechs" boil:"BlueprintMechs" json:"BlueprintMechs" toml:"BlueprintMechs" yaml:"BlueprintMechs"`
}

// NewStruct creates a new relationship struct
func (*availabilityR) NewStruct() *availabilityR {
	return &availabilityR{}
}

// availabilityL is where Load methods for each relationship are stored.
type availabilityL struct{}

var (
	availabilityAllColumns            = []string{"id", "reason", "avaiable_at"}
	availabilityColumnsWithoutDefault = []string{"reason", "avaiable_at"}
	availabilityColumnsWithDefault    = []string{"id"}
	availabilityPrimaryKeyColumns     = []string{"id"}
	availabilityGeneratedColumns      = []string{}
)

type (
	// AvailabilitySlice is an alias for a slice of pointers to Availability.
	// This should almost always be used instead of []Availability.
	AvailabilitySlice []*Availability
	// AvailabilityHook is the signature for custom Availability hook methods
	AvailabilityHook func(boil.Executor, *Availability) error

	availabilityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	availabilityType                 = reflect.TypeOf(&Availability{})
	availabilityMapping              = queries.MakeStructMapping(availabilityType)
	availabilityPrimaryKeyMapping, _ = queries.BindMapping(availabilityType, availabilityMapping, availabilityPrimaryKeyColumns)
	availabilityInsertCacheMut       sync.RWMutex
	availabilityInsertCache          = make(map[string]insertCache)
	availabilityUpdateCacheMut       sync.RWMutex
	availabilityUpdateCache          = make(map[string]updateCache)
	availabilityUpsertCacheMut       sync.RWMutex
	availabilityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var availabilityAfterSelectHooks []AvailabilityHook

var availabilityBeforeInsertHooks []AvailabilityHook
var availabilityAfterInsertHooks []AvailabilityHook

var availabilityBeforeUpdateHooks []AvailabilityHook
var availabilityAfterUpdateHooks []AvailabilityHook

var availabilityBeforeDeleteHooks []AvailabilityHook
var availabilityAfterDeleteHooks []AvailabilityHook

var availabilityBeforeUpsertHooks []AvailabilityHook
var availabilityAfterUpsertHooks []AvailabilityHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Availability) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range availabilityAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Availability) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range availabilityBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Availability) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range availabilityAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Availability) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range availabilityBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Availability) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range availabilityAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Availability) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range availabilityBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Availability) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range availabilityAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Availability) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range availabilityBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Availability) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range availabilityAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAvailabilityHook registers your hook function for all future operations.
func AddAvailabilityHook(hookPoint boil.HookPoint, availabilityHook AvailabilityHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		availabilityAfterSelectHooks = append(availabilityAfterSelectHooks, availabilityHook)
	case boil.BeforeInsertHook:
		availabilityBeforeInsertHooks = append(availabilityBeforeInsertHooks, availabilityHook)
	case boil.AfterInsertHook:
		availabilityAfterInsertHooks = append(availabilityAfterInsertHooks, availabilityHook)
	case boil.BeforeUpdateHook:
		availabilityBeforeUpdateHooks = append(availabilityBeforeUpdateHooks, availabilityHook)
	case boil.AfterUpdateHook:
		availabilityAfterUpdateHooks = append(availabilityAfterUpdateHooks, availabilityHook)
	case boil.BeforeDeleteHook:
		availabilityBeforeDeleteHooks = append(availabilityBeforeDeleteHooks, availabilityHook)
	case boil.AfterDeleteHook:
		availabilityAfterDeleteHooks = append(availabilityAfterDeleteHooks, availabilityHook)
	case boil.BeforeUpsertHook:
		availabilityBeforeUpsertHooks = append(availabilityBeforeUpsertHooks, availabilityHook)
	case boil.AfterUpsertHook:
		availabilityAfterUpsertHooks = append(availabilityAfterUpsertHooks, availabilityHook)
	}
}

// One returns a single availability record from the query.
func (q availabilityQuery) One(exec boil.Executor) (*Availability, error) {
	o := &Availability{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for availabilities")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Availability records from the query.
func (q availabilityQuery) All(exec boil.Executor) (AvailabilitySlice, error) {
	var o []*Availability

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Availability slice")
	}

	if len(availabilityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Availability records in the query.
func (q availabilityQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count availabilities rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q availabilityQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if availabilities exists")
	}

	return count > 0, nil
}

// BlueprintMechs retrieves all the blueprint_mech's BlueprintMechs with an executor.
func (o *Availability) BlueprintMechs(mods ...qm.QueryMod) blueprintMechQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"blueprint_mechs\".\"availability_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"blueprint_mechs\".\"deleted_at\""),
	)

	query := BlueprintMechs(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_mechs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"blueprint_mechs\".*"})
	}

	return query
}

// LoadBlueprintMechs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (availabilityL) LoadBlueprintMechs(e boil.Executor, singular bool, maybeAvailability interface{}, mods queries.Applicator) error {
	var slice []*Availability
	var object *Availability

	if singular {
		object = maybeAvailability.(*Availability)
	} else {
		slice = *maybeAvailability.(*[]*Availability)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &availabilityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &availabilityR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_mechs`),
		qm.WhereIn(`blueprint_mechs.availability_id in ?`, args...),
		qmhelper.WhereIsNull(`blueprint_mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blueprint_mechs")
	}

	var resultSlice []*BlueprintMech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blueprint_mechs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blueprint_mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_mechs")
	}

	if len(blueprintMechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlueprintMechs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blueprintMechR{}
			}
			foreign.R.Availability = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AvailabilityID) {
				local.R.BlueprintMechs = append(local.R.BlueprintMechs, foreign)
				if foreign.R == nil {
					foreign.R = &blueprintMechR{}
				}
				foreign.R.Availability = local
				break
			}
		}
	}

	return nil
}

// AddBlueprintMechs adds the given related objects to the existing relationships
// of the availability, optionally inserting them as new records.
// Appends related to o.R.BlueprintMechs.
// Sets related.R.Availability appropriately.
func (o *Availability) AddBlueprintMechs(exec boil.Executor, insert bool, related ...*BlueprintMech) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AvailabilityID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"blueprint_mechs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"availability_id"}),
				strmangle.WhereClause("\"", "\"", 2, blueprintMechPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AvailabilityID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &availabilityR{
			BlueprintMechs: related,
		}
	} else {
		o.R.BlueprintMechs = append(o.R.BlueprintMechs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blueprintMechR{
				Availability: o,
			}
		} else {
			rel.R.Availability = o
		}
	}
	return nil
}

// SetBlueprintMechs removes all previously related items of the
// availability replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Availability's BlueprintMechs accordingly.
// Replaces o.R.BlueprintMechs with related.
// Sets related.R.Availability's BlueprintMechs accordingly.
func (o *Availability) SetBlueprintMechs(exec boil.Executor, insert bool, related ...*BlueprintMech) error {
	query := "update \"blueprint_mechs\" set \"availability_id\" = null where \"availability_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BlueprintMechs {
			queries.SetScanner(&rel.AvailabilityID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Availability = nil
		}

		o.R.BlueprintMechs = nil
	}
	return o.AddBlueprintMechs(exec, insert, related...)
}

// RemoveBlueprintMechs relationships from objects passed in.
// Removes related items from R.BlueprintMechs (uses pointer comparison, removal does not keep order)
// Sets related.R.Availability.
func (o *Availability) RemoveBlueprintMechs(exec boil.Executor, related ...*BlueprintMech) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AvailabilityID, nil)
		if rel.R != nil {
			rel.R.Availability = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("availability_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BlueprintMechs {
			if rel != ri {
				continue
			}

			ln := len(o.R.BlueprintMechs)
			if ln > 1 && i < ln-1 {
				o.R.BlueprintMechs[i] = o.R.BlueprintMechs[ln-1]
			}
			o.R.BlueprintMechs = o.R.BlueprintMechs[:ln-1]
			break
		}
	}

	return nil
}

// Availabilities retrieves all the records using an executor.
func Availabilities(mods ...qm.QueryMod) availabilityQuery {
	mods = append(mods, qm.From("\"availabilities\""))
	return availabilityQuery{NewQuery(mods...)}
}

// FindAvailability retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAvailability(exec boil.Executor, iD string, selectCols ...string) (*Availability, error) {
	availabilityObj := &Availability{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"availabilities\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, availabilityObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from availabilities")
	}

	if err = availabilityObj.doAfterSelectHooks(exec); err != nil {
		return availabilityObj, err
	}

	return availabilityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Availability) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no availabilities provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(availabilityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	availabilityInsertCacheMut.RLock()
	cache, cached := availabilityInsertCache[key]
	availabilityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			availabilityAllColumns,
			availabilityColumnsWithDefault,
			availabilityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(availabilityType, availabilityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(availabilityType, availabilityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"availabilities\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"availabilities\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into availabilities")
	}

	if !cached {
		availabilityInsertCacheMut.Lock()
		availabilityInsertCache[key] = cache
		availabilityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Availability.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Availability) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	availabilityUpdateCacheMut.RLock()
	cache, cached := availabilityUpdateCache[key]
	availabilityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			availabilityAllColumns,
			availabilityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update availabilities, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"availabilities\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, availabilityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(availabilityType, availabilityMapping, append(wl, availabilityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update availabilities row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for availabilities")
	}

	if !cached {
		availabilityUpdateCacheMut.Lock()
		availabilityUpdateCache[key] = cache
		availabilityUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q availabilityQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for availabilities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for availabilities")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AvailabilitySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), availabilityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"availabilities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, availabilityPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in availability slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all availability")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Availability) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no availabilities provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(availabilityColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	availabilityUpsertCacheMut.RLock()
	cache, cached := availabilityUpsertCache[key]
	availabilityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			availabilityAllColumns,
			availabilityColumnsWithDefault,
			availabilityColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			availabilityAllColumns,
			availabilityPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert availabilities, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(availabilityPrimaryKeyColumns))
			copy(conflict, availabilityPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"availabilities\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(availabilityType, availabilityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(availabilityType, availabilityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert availabilities")
	}

	if !cached {
		availabilityUpsertCacheMut.Lock()
		availabilityUpsertCache[key] = cache
		availabilityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Availability record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Availability) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Availability provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), availabilityPrimaryKeyMapping)
	sql := "DELETE FROM \"availabilities\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from availabilities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for availabilities")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q availabilityQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no availabilityQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from availabilities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for availabilities")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AvailabilitySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(availabilityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), availabilityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"availabilities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, availabilityPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from availability slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for availabilities")
	}

	if len(availabilityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Availability) Reload(exec boil.Executor) error {
	ret, err := FindAvailability(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AvailabilitySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AvailabilitySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), availabilityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"availabilities\".* FROM \"availabilities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, availabilityPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in AvailabilitySlice")
	}

	*o = slice

	return nil
}

// AvailabilityExists checks if the Availability row exists.
func AvailabilityExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"availabilities\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if availabilities exists")
	}

	return exists, nil
}
