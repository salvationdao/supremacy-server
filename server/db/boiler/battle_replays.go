// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BattleReplay is an object representing the database table.
type BattleReplay struct {
	ID               string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	StreamID         null.String `boiler:"stream_id" boil:"stream_id" json:"stream_id,omitempty" toml:"stream_id" yaml:"stream_id,omitempty"`
	ArenaID          string      `boiler:"arena_id" boil:"arena_id" json:"arena_id" toml:"arena_id" yaml:"arena_id"`
	BattleID         string      `boiler:"battle_id" boil:"battle_id" json:"battle_id" toml:"battle_id" yaml:"battle_id"`
	IsCompleteBattle bool        `boiler:"is_complete_battle" boil:"is_complete_battle" json:"is_complete_battle" toml:"is_complete_battle" yaml:"is_complete_battle"`
	RecordingStatus  string      `boiler:"recording_status" boil:"recording_status" json:"recording_status" toml:"recording_status" yaml:"recording_status"`
	StartedAt        null.Time   `boiler:"started_at" boil:"started_at" json:"started_at,omitempty" toml:"started_at" yaml:"started_at,omitempty"`
	StoppedAt        null.Time   `boiler:"stopped_at" boil:"stopped_at" json:"stopped_at,omitempty" toml:"stopped_at" yaml:"stopped_at,omitempty"`
	BattleEvents     null.JSON   `boiler:"battle_events" boil:"battle_events" json:"battle_events,omitempty" toml:"battle_events" yaml:"battle_events,omitempty"`
	CreatedAt        time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	IntroEndedAt     null.Time   `boiler:"intro_ended_at" boil:"intro_ended_at" json:"intro_ended_at,omitempty" toml:"intro_ended_at" yaml:"intro_ended_at,omitempty"`
	DisabledAt       null.Time   `boiler:"disabled_at" boil:"disabled_at" json:"disabled_at,omitempty" toml:"disabled_at" yaml:"disabled_at,omitempty"`

	R *battleReplayR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L battleReplayL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattleReplayColumns = struct {
	ID               string
	StreamID         string
	ArenaID          string
	BattleID         string
	IsCompleteBattle string
	RecordingStatus  string
	StartedAt        string
	StoppedAt        string
	BattleEvents     string
	CreatedAt        string
	IntroEndedAt     string
	DisabledAt       string
}{
	ID:               "id",
	StreamID:         "stream_id",
	ArenaID:          "arena_id",
	BattleID:         "battle_id",
	IsCompleteBattle: "is_complete_battle",
	RecordingStatus:  "recording_status",
	StartedAt:        "started_at",
	StoppedAt:        "stopped_at",
	BattleEvents:     "battle_events",
	CreatedAt:        "created_at",
	IntroEndedAt:     "intro_ended_at",
	DisabledAt:       "disabled_at",
}

var BattleReplayTableColumns = struct {
	ID               string
	StreamID         string
	ArenaID          string
	BattleID         string
	IsCompleteBattle string
	RecordingStatus  string
	StartedAt        string
	StoppedAt        string
	BattleEvents     string
	CreatedAt        string
	IntroEndedAt     string
	DisabledAt       string
}{
	ID:               "battle_replays.id",
	StreamID:         "battle_replays.stream_id",
	ArenaID:          "battle_replays.arena_id",
	BattleID:         "battle_replays.battle_id",
	IsCompleteBattle: "battle_replays.is_complete_battle",
	RecordingStatus:  "battle_replays.recording_status",
	StartedAt:        "battle_replays.started_at",
	StoppedAt:        "battle_replays.stopped_at",
	BattleEvents:     "battle_replays.battle_events",
	CreatedAt:        "battle_replays.created_at",
	IntroEndedAt:     "battle_replays.intro_ended_at",
	DisabledAt:       "battle_replays.disabled_at",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var BattleReplayWhere = struct {
	ID               whereHelperstring
	StreamID         whereHelpernull_String
	ArenaID          whereHelperstring
	BattleID         whereHelperstring
	IsCompleteBattle whereHelperbool
	RecordingStatus  whereHelperstring
	StartedAt        whereHelpernull_Time
	StoppedAt        whereHelpernull_Time
	BattleEvents     whereHelpernull_JSON
	CreatedAt        whereHelpertime_Time
	IntroEndedAt     whereHelpernull_Time
	DisabledAt       whereHelpernull_Time
}{
	ID:               whereHelperstring{field: "\"battle_replays\".\"id\""},
	StreamID:         whereHelpernull_String{field: "\"battle_replays\".\"stream_id\""},
	ArenaID:          whereHelperstring{field: "\"battle_replays\".\"arena_id\""},
	BattleID:         whereHelperstring{field: "\"battle_replays\".\"battle_id\""},
	IsCompleteBattle: whereHelperbool{field: "\"battle_replays\".\"is_complete_battle\""},
	RecordingStatus:  whereHelperstring{field: "\"battle_replays\".\"recording_status\""},
	StartedAt:        whereHelpernull_Time{field: "\"battle_replays\".\"started_at\""},
	StoppedAt:        whereHelpernull_Time{field: "\"battle_replays\".\"stopped_at\""},
	BattleEvents:     whereHelpernull_JSON{field: "\"battle_replays\".\"battle_events\""},
	CreatedAt:        whereHelpertime_Time{field: "\"battle_replays\".\"created_at\""},
	IntroEndedAt:     whereHelpernull_Time{field: "\"battle_replays\".\"intro_ended_at\""},
	DisabledAt:       whereHelpernull_Time{field: "\"battle_replays\".\"disabled_at\""},
}

// BattleReplayRels is where relationship names are stored.
var BattleReplayRels = struct {
	Arena  string
	Battle string
}{
	Arena:  "Arena",
	Battle: "Battle",
}

// battleReplayR is where relationships are stored.
type battleReplayR struct {
	Arena  *BattleArena `boiler:"Arena" boil:"Arena" json:"Arena" toml:"Arena" yaml:"Arena"`
	Battle *Battle      `boiler:"Battle" boil:"Battle" json:"Battle" toml:"Battle" yaml:"Battle"`
}

// NewStruct creates a new relationship struct
func (*battleReplayR) NewStruct() *battleReplayR {
	return &battleReplayR{}
}

// battleReplayL is where Load methods for each relationship are stored.
type battleReplayL struct{}

var (
	battleReplayAllColumns            = []string{"id", "stream_id", "arena_id", "battle_id", "is_complete_battle", "recording_status", "started_at", "stopped_at", "battle_events", "created_at", "intro_ended_at", "disabled_at"}
	battleReplayColumnsWithoutDefault = []string{"arena_id", "battle_id"}
	battleReplayColumnsWithDefault    = []string{"id", "stream_id", "is_complete_battle", "recording_status", "started_at", "stopped_at", "battle_events", "created_at", "intro_ended_at", "disabled_at"}
	battleReplayPrimaryKeyColumns     = []string{"id"}
	battleReplayGeneratedColumns      = []string{}
)

type (
	// BattleReplaySlice is an alias for a slice of pointers to BattleReplay.
	// This should almost always be used instead of []BattleReplay.
	BattleReplaySlice []*BattleReplay
	// BattleReplayHook is the signature for custom BattleReplay hook methods
	BattleReplayHook func(boil.Executor, *BattleReplay) error

	battleReplayQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battleReplayType                 = reflect.TypeOf(&BattleReplay{})
	battleReplayMapping              = queries.MakeStructMapping(battleReplayType)
	battleReplayPrimaryKeyMapping, _ = queries.BindMapping(battleReplayType, battleReplayMapping, battleReplayPrimaryKeyColumns)
	battleReplayInsertCacheMut       sync.RWMutex
	battleReplayInsertCache          = make(map[string]insertCache)
	battleReplayUpdateCacheMut       sync.RWMutex
	battleReplayUpdateCache          = make(map[string]updateCache)
	battleReplayUpsertCacheMut       sync.RWMutex
	battleReplayUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battleReplayAfterSelectHooks []BattleReplayHook

var battleReplayBeforeInsertHooks []BattleReplayHook
var battleReplayAfterInsertHooks []BattleReplayHook

var battleReplayBeforeUpdateHooks []BattleReplayHook
var battleReplayAfterUpdateHooks []BattleReplayHook

var battleReplayBeforeDeleteHooks []BattleReplayHook
var battleReplayAfterDeleteHooks []BattleReplayHook

var battleReplayBeforeUpsertHooks []BattleReplayHook
var battleReplayAfterUpsertHooks []BattleReplayHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BattleReplay) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range battleReplayAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BattleReplay) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleReplayBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BattleReplay) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleReplayAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BattleReplay) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleReplayBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BattleReplay) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleReplayAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BattleReplay) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleReplayBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BattleReplay) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleReplayAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BattleReplay) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleReplayBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BattleReplay) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleReplayAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattleReplayHook registers your hook function for all future operations.
func AddBattleReplayHook(hookPoint boil.HookPoint, battleReplayHook BattleReplayHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		battleReplayAfterSelectHooks = append(battleReplayAfterSelectHooks, battleReplayHook)
	case boil.BeforeInsertHook:
		battleReplayBeforeInsertHooks = append(battleReplayBeforeInsertHooks, battleReplayHook)
	case boil.AfterInsertHook:
		battleReplayAfterInsertHooks = append(battleReplayAfterInsertHooks, battleReplayHook)
	case boil.BeforeUpdateHook:
		battleReplayBeforeUpdateHooks = append(battleReplayBeforeUpdateHooks, battleReplayHook)
	case boil.AfterUpdateHook:
		battleReplayAfterUpdateHooks = append(battleReplayAfterUpdateHooks, battleReplayHook)
	case boil.BeforeDeleteHook:
		battleReplayBeforeDeleteHooks = append(battleReplayBeforeDeleteHooks, battleReplayHook)
	case boil.AfterDeleteHook:
		battleReplayAfterDeleteHooks = append(battleReplayAfterDeleteHooks, battleReplayHook)
	case boil.BeforeUpsertHook:
		battleReplayBeforeUpsertHooks = append(battleReplayBeforeUpsertHooks, battleReplayHook)
	case boil.AfterUpsertHook:
		battleReplayAfterUpsertHooks = append(battleReplayAfterUpsertHooks, battleReplayHook)
	}
}

// One returns a single battleReplay record from the query.
func (q battleReplayQuery) One(exec boil.Executor) (*BattleReplay, error) {
	o := &BattleReplay{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for battle_replays")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BattleReplay records from the query.
func (q battleReplayQuery) All(exec boil.Executor) (BattleReplaySlice, error) {
	var o []*BattleReplay

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BattleReplay slice")
	}

	if len(battleReplayAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BattleReplay records in the query.
func (q battleReplayQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count battle_replays rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battleReplayQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if battle_replays exists")
	}

	return count > 0, nil
}

// Arena pointed to by the foreign key.
func (o *BattleReplay) Arena(mods ...qm.QueryMod) battleArenaQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ArenaID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := BattleArenas(queryMods...)
	queries.SetFrom(query.Query, "\"battle_arena\"")

	return query
}

// Battle pointed to by the foreign key.
func (o *BattleReplay) Battle(mods ...qm.QueryMod) battleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BattleID),
	}

	queryMods = append(queryMods, mods...)

	query := Battles(queryMods...)
	queries.SetFrom(query.Query, "\"battles\"")

	return query
}

// LoadArena allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleReplayL) LoadArena(e boil.Executor, singular bool, maybeBattleReplay interface{}, mods queries.Applicator) error {
	var slice []*BattleReplay
	var object *BattleReplay

	if singular {
		object = maybeBattleReplay.(*BattleReplay)
	} else {
		slice = *maybeBattleReplay.(*[]*BattleReplay)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleReplayR{}
		}
		args = append(args, object.ArenaID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleReplayR{}
			}

			for _, a := range args {
				if a == obj.ArenaID {
					continue Outer
				}
			}

			args = append(args, obj.ArenaID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_arena`),
		qm.WhereIn(`battle_arena.id in ?`, args...),
		qmhelper.WhereIsNull(`battle_arena.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BattleArena")
	}

	var resultSlice []*BattleArena
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BattleArena")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battle_arena")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_arena")
	}

	if len(battleReplayAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Arena = foreign
		if foreign.R == nil {
			foreign.R = &battleArenaR{}
		}
		foreign.R.ArenaBattleReplays = append(foreign.R.ArenaBattleReplays, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ArenaID == foreign.ID {
				local.R.Arena = foreign
				if foreign.R == nil {
					foreign.R = &battleArenaR{}
				}
				foreign.R.ArenaBattleReplays = append(foreign.R.ArenaBattleReplays, local)
				break
			}
		}
	}

	return nil
}

// LoadBattle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleReplayL) LoadBattle(e boil.Executor, singular bool, maybeBattleReplay interface{}, mods queries.Applicator) error {
	var slice []*BattleReplay
	var object *BattleReplay

	if singular {
		object = maybeBattleReplay.(*BattleReplay)
	} else {
		slice = *maybeBattleReplay.(*[]*BattleReplay)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleReplayR{}
		}
		args = append(args, object.BattleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleReplayR{}
			}

			for _, a := range args {
				if a == obj.BattleID {
					continue Outer
				}
			}

			args = append(args, obj.BattleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battles`),
		qm.WhereIn(`battles.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Battle")
	}

	var resultSlice []*Battle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Battle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battles")
	}

	if len(battleReplayAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Battle = foreign
		if foreign.R == nil {
			foreign.R = &battleR{}
		}
		foreign.R.BattleReplays = append(foreign.R.BattleReplays, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BattleID == foreign.ID {
				local.R.Battle = foreign
				if foreign.R == nil {
					foreign.R = &battleR{}
				}
				foreign.R.BattleReplays = append(foreign.R.BattleReplays, local)
				break
			}
		}
	}

	return nil
}

// SetArena of the battleReplay to the related item.
// Sets o.R.Arena to related.
// Adds o to related.R.ArenaBattleReplays.
func (o *BattleReplay) SetArena(exec boil.Executor, insert bool, related *BattleArena) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_replays\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"arena_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleReplayPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ArenaID = related.ID
	if o.R == nil {
		o.R = &battleReplayR{
			Arena: related,
		}
	} else {
		o.R.Arena = related
	}

	if related.R == nil {
		related.R = &battleArenaR{
			ArenaBattleReplays: BattleReplaySlice{o},
		}
	} else {
		related.R.ArenaBattleReplays = append(related.R.ArenaBattleReplays, o)
	}

	return nil
}

// SetBattle of the battleReplay to the related item.
// Sets o.R.Battle to related.
// Adds o to related.R.BattleReplays.
func (o *BattleReplay) SetBattle(exec boil.Executor, insert bool, related *Battle) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_replays\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleReplayPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BattleID = related.ID
	if o.R == nil {
		o.R = &battleReplayR{
			Battle: related,
		}
	} else {
		o.R.Battle = related
	}

	if related.R == nil {
		related.R = &battleR{
			BattleReplays: BattleReplaySlice{o},
		}
	} else {
		related.R.BattleReplays = append(related.R.BattleReplays, o)
	}

	return nil
}

// BattleReplays retrieves all the records using an executor.
func BattleReplays(mods ...qm.QueryMod) battleReplayQuery {
	mods = append(mods, qm.From("\"battle_replays\""))
	return battleReplayQuery{NewQuery(mods...)}
}

// FindBattleReplay retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattleReplay(exec boil.Executor, iD string, selectCols ...string) (*BattleReplay, error) {
	battleReplayObj := &BattleReplay{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battle_replays\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, battleReplayObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from battle_replays")
	}

	if err = battleReplayObj.doAfterSelectHooks(exec); err != nil {
		return battleReplayObj, err
	}

	return battleReplayObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BattleReplay) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_replays provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleReplayColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battleReplayInsertCacheMut.RLock()
	cache, cached := battleReplayInsertCache[key]
	battleReplayInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battleReplayAllColumns,
			battleReplayColumnsWithDefault,
			battleReplayColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battleReplayType, battleReplayMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battleReplayType, battleReplayMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battle_replays\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battle_replays\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into battle_replays")
	}

	if !cached {
		battleReplayInsertCacheMut.Lock()
		battleReplayInsertCache[key] = cache
		battleReplayInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BattleReplay.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BattleReplay) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battleReplayUpdateCacheMut.RLock()
	cache, cached := battleReplayUpdateCache[key]
	battleReplayUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battleReplayAllColumns,
			battleReplayPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update battle_replays, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battle_replays\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battleReplayPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battleReplayType, battleReplayMapping, append(wl, battleReplayPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update battle_replays row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for battle_replays")
	}

	if !cached {
		battleReplayUpdateCacheMut.Lock()
		battleReplayUpdateCache[key] = cache
		battleReplayUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battleReplayQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for battle_replays")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for battle_replays")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattleReplaySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleReplayPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battle_replays\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battleReplayPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in battleReplay slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all battleReplay")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BattleReplay) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_replays provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleReplayColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battleReplayUpsertCacheMut.RLock()
	cache, cached := battleReplayUpsertCache[key]
	battleReplayUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battleReplayAllColumns,
			battleReplayColumnsWithDefault,
			battleReplayColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			battleReplayAllColumns,
			battleReplayPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert battle_replays, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battleReplayPrimaryKeyColumns))
			copy(conflict, battleReplayPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battle_replays\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battleReplayType, battleReplayMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battleReplayType, battleReplayMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert battle_replays")
	}

	if !cached {
		battleReplayUpsertCacheMut.Lock()
		battleReplayUpsertCache[key] = cache
		battleReplayUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BattleReplay record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BattleReplay) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BattleReplay provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battleReplayPrimaryKeyMapping)
	sql := "DELETE FROM \"battle_replays\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from battle_replays")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for battle_replays")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battleReplayQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no battleReplayQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battle_replays")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_replays")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattleReplaySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(battleReplayBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleReplayPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"battle_replays\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleReplayPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battleReplay slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_replays")
	}

	if len(battleReplayAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BattleReplay) Reload(exec boil.Executor) error {
	ret, err := FindBattleReplay(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattleReplaySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattleReplaySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleReplayPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battle_replays\".* FROM \"battle_replays\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleReplayPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BattleReplaySlice")
	}

	*o = slice

	return nil
}

// BattleReplayExists checks if the BattleReplay row exists.
func BattleReplayExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battle_replays\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if battle_replays exists")
	}

	return exists, nil
}
