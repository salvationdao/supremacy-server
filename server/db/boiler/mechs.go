// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Mech is an object representing the database table.
type Mech struct {
	ID         string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	OwnerID    string    `boiler:"owner_id" boil:"owner_id" json:"ownerID" toml:"ownerID" yaml:"ownerID"`
	TemplateID string    `boiler:"template_id" boil:"template_id" json:"templateID" toml:"templateID" yaml:"templateID"`
	BrandID    string    `boiler:"brand_id" boil:"brand_id" json:"brandID" toml:"brandID" yaml:"brandID"`
	ChassisID  string    `boiler:"chassis_id" boil:"chassis_id" json:"chassisID" toml:"chassisID" yaml:"chassisID"`
	Hash       string    `boiler:"hash" boil:"hash" json:"hash" toml:"hash" yaml:"hash"`
	Label      string    `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	Skin       string    `boiler:"skin" boil:"skin" json:"skin" toml:"skin" yaml:"skin"`
	Model      string    `boiler:"model" boil:"model" json:"model" toml:"model" yaml:"model"`
	Slug       string    `boiler:"slug" boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	DeletedAt  null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deletedAt,omitempty" toml:"deletedAt" yaml:"deletedAt,omitempty"`
	UpdatedAt  time.Time `boiler:"updated_at" boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	CreatedAt  time.Time `boiler:"created_at" boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`

	R *mechR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L mechL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MechColumns = struct {
	ID         string
	OwnerID    string
	TemplateID string
	BrandID    string
	ChassisID  string
	Hash       string
	Label      string
	Skin       string
	Model      string
	Slug       string
	DeletedAt  string
	UpdatedAt  string
	CreatedAt  string
}{
	ID:         "id",
	OwnerID:    "owner_id",
	TemplateID: "template_id",
	BrandID:    "brand_id",
	ChassisID:  "chassis_id",
	Hash:       "hash",
	Label:      "label",
	Skin:       "skin",
	Model:      "model",
	Slug:       "slug",
	DeletedAt:  "deleted_at",
	UpdatedAt:  "updated_at",
	CreatedAt:  "created_at",
}

var MechTableColumns = struct {
	ID         string
	OwnerID    string
	TemplateID string
	BrandID    string
	ChassisID  string
	Hash       string
	Label      string
	Skin       string
	Model      string
	Slug       string
	DeletedAt  string
	UpdatedAt  string
	CreatedAt  string
}{
	ID:         "mechs.id",
	OwnerID:    "mechs.owner_id",
	TemplateID: "mechs.template_id",
	BrandID:    "mechs.brand_id",
	ChassisID:  "mechs.chassis_id",
	Hash:       "mechs.hash",
	Label:      "mechs.label",
	Skin:       "mechs.skin",
	Model:      "mechs.model",
	Slug:       "mechs.slug",
	DeletedAt:  "mechs.deleted_at",
	UpdatedAt:  "mechs.updated_at",
	CreatedAt:  "mechs.created_at",
}

// Generated where

var MechWhere = struct {
	ID         whereHelperstring
	OwnerID    whereHelperstring
	TemplateID whereHelperstring
	BrandID    whereHelperstring
	ChassisID  whereHelperstring
	Hash       whereHelperstring
	Label      whereHelperstring
	Skin       whereHelperstring
	Model      whereHelperstring
	Slug       whereHelperstring
	DeletedAt  whereHelpernull_Time
	UpdatedAt  whereHelpertime_Time
	CreatedAt  whereHelpertime_Time
}{
	ID:         whereHelperstring{field: "\"mechs\".\"id\""},
	OwnerID:    whereHelperstring{field: "\"mechs\".\"owner_id\""},
	TemplateID: whereHelperstring{field: "\"mechs\".\"template_id\""},
	BrandID:    whereHelperstring{field: "\"mechs\".\"brand_id\""},
	ChassisID:  whereHelperstring{field: "\"mechs\".\"chassis_id\""},
	Hash:       whereHelperstring{field: "\"mechs\".\"hash\""},
	Label:      whereHelperstring{field: "\"mechs\".\"label\""},
	Skin:       whereHelperstring{field: "\"mechs\".\"skin\""},
	Model:      whereHelperstring{field: "\"mechs\".\"model\""},
	Slug:       whereHelperstring{field: "\"mechs\".\"slug\""},
	DeletedAt:  whereHelpernull_Time{field: "\"mechs\".\"deleted_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"mechs\".\"updated_at\""},
	CreatedAt:  whereHelpertime_Time{field: "\"mechs\".\"created_at\""},
}

// MechRels is where relationship names are stored.
var MechRels = struct {
	Brand        string
	Chassis      string
	Owner        string
	Template     string
	MechsModules string
	MechsWeapons string
}{
	Brand:        "Brand",
	Chassis:      "Chassis",
	Owner:        "Owner",
	Template:     "Template",
	MechsModules: "MechsModules",
	MechsWeapons: "MechsWeapons",
}

// mechR is where relationships are stored.
type mechR struct {
	Brand        *Brand           `boiler:"Brand" boil:"Brand" json:"Brand" toml:"Brand" yaml:"Brand"`
	Chassis      *Chassis         `boiler:"Chassis" boil:"Chassis" json:"Chassis" toml:"Chassis" yaml:"Chassis"`
	Owner        *Player          `boiler:"Owner" boil:"Owner" json:"Owner" toml:"Owner" yaml:"Owner"`
	Template     *Template        `boiler:"Template" boil:"Template" json:"Template" toml:"Template" yaml:"Template"`
	MechsModules MechsModuleSlice `boiler:"MechsModules" boil:"MechsModules" json:"MechsModules" toml:"MechsModules" yaml:"MechsModules"`
	MechsWeapons MechsWeaponSlice `boiler:"MechsWeapons" boil:"MechsWeapons" json:"MechsWeapons" toml:"MechsWeapons" yaml:"MechsWeapons"`
}

// NewStruct creates a new relationship struct
func (*mechR) NewStruct() *mechR {
	return &mechR{}
}

// mechL is where Load methods for each relationship are stored.
type mechL struct{}

var (
	mechAllColumns            = []string{"id", "owner_id", "template_id", "brand_id", "chassis_id", "hash", "label", "skin", "model", "slug", "deleted_at", "updated_at", "created_at"}
	mechColumnsWithoutDefault = []string{"owner_id", "template_id", "brand_id", "chassis_id", "hash", "label", "skin", "model", "slug"}
	mechColumnsWithDefault    = []string{"id", "deleted_at", "updated_at", "created_at"}
	mechPrimaryKeyColumns     = []string{"id"}
	mechGeneratedColumns      = []string{}
)

type (
	// MechSlice is an alias for a slice of pointers to Mech.
	// This should almost always be used instead of []Mech.
	MechSlice []*Mech
	// MechHook is the signature for custom Mech hook methods
	MechHook func(boil.Executor, *Mech) error

	mechQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mechType                 = reflect.TypeOf(&Mech{})
	mechMapping              = queries.MakeStructMapping(mechType)
	mechPrimaryKeyMapping, _ = queries.BindMapping(mechType, mechMapping, mechPrimaryKeyColumns)
	mechInsertCacheMut       sync.RWMutex
	mechInsertCache          = make(map[string]insertCache)
	mechUpdateCacheMut       sync.RWMutex
	mechUpdateCache          = make(map[string]updateCache)
	mechUpsertCacheMut       sync.RWMutex
	mechUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mechAfterSelectHooks []MechHook

var mechBeforeInsertHooks []MechHook
var mechAfterInsertHooks []MechHook

var mechBeforeUpdateHooks []MechHook
var mechAfterUpdateHooks []MechHook

var mechBeforeDeleteHooks []MechHook
var mechAfterDeleteHooks []MechHook

var mechBeforeUpsertHooks []MechHook
var mechAfterUpsertHooks []MechHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Mech) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Mech) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Mech) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Mech) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Mech) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Mech) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Mech) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Mech) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Mech) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMechHook registers your hook function for all future operations.
func AddMechHook(hookPoint boil.HookPoint, mechHook MechHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mechAfterSelectHooks = append(mechAfterSelectHooks, mechHook)
	case boil.BeforeInsertHook:
		mechBeforeInsertHooks = append(mechBeforeInsertHooks, mechHook)
	case boil.AfterInsertHook:
		mechAfterInsertHooks = append(mechAfterInsertHooks, mechHook)
	case boil.BeforeUpdateHook:
		mechBeforeUpdateHooks = append(mechBeforeUpdateHooks, mechHook)
	case boil.AfterUpdateHook:
		mechAfterUpdateHooks = append(mechAfterUpdateHooks, mechHook)
	case boil.BeforeDeleteHook:
		mechBeforeDeleteHooks = append(mechBeforeDeleteHooks, mechHook)
	case boil.AfterDeleteHook:
		mechAfterDeleteHooks = append(mechAfterDeleteHooks, mechHook)
	case boil.BeforeUpsertHook:
		mechBeforeUpsertHooks = append(mechBeforeUpsertHooks, mechHook)
	case boil.AfterUpsertHook:
		mechAfterUpsertHooks = append(mechAfterUpsertHooks, mechHook)
	}
}

// One returns a single mech record from the query.
func (q mechQuery) One(exec boil.Executor) (*Mech, error) {
	o := &Mech{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for mechs")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Mech records from the query.
func (q mechQuery) All(exec boil.Executor) (MechSlice, error) {
	var o []*Mech

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Mech slice")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Mech records in the query.
func (q mechQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count mechs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mechQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if mechs exists")
	}

	return count > 0, nil
}

// Brand pointed to by the foreign key.
func (o *Mech) Brand(mods ...qm.QueryMod) brandQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BrandID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Brands(queryMods...)
	queries.SetFrom(query.Query, "\"brands\"")

	return query
}

// Chassis pointed to by the foreign key.
func (o *Mech) Chassis(mods ...qm.QueryMod) chassisQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ChassisID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Chasses(queryMods...)
	queries.SetFrom(query.Query, "\"chassis\"")

	return query
}

// Owner pointed to by the foreign key.
func (o *Mech) Owner(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OwnerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// Template pointed to by the foreign key.
func (o *Mech) Template(mods ...qm.QueryMod) templateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TemplateID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Templates(queryMods...)
	queries.SetFrom(query.Query, "\"templates\"")

	return query
}

// MechsModules retrieves all the mechs_module's MechsModules with an executor.
func (o *Mech) MechsModules(mods ...qm.QueryMod) mechsModuleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mechs_modules\".\"mech_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"mechs_modules\".\"deleted_at\""),
	)

	query := MechsModules(queryMods...)
	queries.SetFrom(query.Query, "\"mechs_modules\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mechs_modules\".*"})
	}

	return query
}

// MechsWeapons retrieves all the mechs_weapon's MechsWeapons with an executor.
func (o *Mech) MechsWeapons(mods ...qm.QueryMod) mechsWeaponQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mechs_weapons\".\"mech_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"mechs_weapons\".\"deleted_at\""),
	)

	query := MechsWeapons(queryMods...)
	queries.SetFrom(query.Query, "\"mechs_weapons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mechs_weapons\".*"})
	}

	return query
}

// LoadBrand allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechL) LoadBrand(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.BrandID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.BrandID {
					continue Outer
				}
			}

			args = append(args, obj.BrandID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`brands`),
		qm.WhereIn(`brands.id in ?`, args...),
		qmhelper.WhereIsNull(`brands.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Brand")
	}

	var resultSlice []*Brand
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Brand")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for brands")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for brands")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Brand = foreign
		if foreign.R == nil {
			foreign.R = &brandR{}
		}
		foreign.R.Mechs = append(foreign.R.Mechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BrandID == foreign.ID {
				local.R.Brand = foreign
				if foreign.R == nil {
					foreign.R = &brandR{}
				}
				foreign.R.Mechs = append(foreign.R.Mechs, local)
				break
			}
		}
	}

	return nil
}

// LoadChassis allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechL) LoadChassis(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ChassisID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ChassisID {
					continue Outer
				}
			}

			args = append(args, obj.ChassisID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`chassis`),
		qm.WhereIn(`chassis.id in ?`, args...),
		qmhelper.WhereIsNull(`chassis.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Chassis")
	}

	var resultSlice []*Chassis
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Chassis")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for chassis")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chassis")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Chassis = foreign
		if foreign.R == nil {
			foreign.R = &chassisR{}
		}
		foreign.R.Mechs = append(foreign.R.Mechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChassisID == foreign.ID {
				local.R.Chassis = foreign
				if foreign.R == nil {
					foreign.R = &chassisR{}
				}
				foreign.R.Mechs = append(foreign.R.Mechs, local)
				break
			}
		}
	}

	return nil
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechL) LoadOwner(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.OwnerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.OwnerID {
					continue Outer
				}
			}

			args = append(args, obj.OwnerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Owner = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.OwnerMechs = append(foreign.R.OwnerMechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerID == foreign.ID {
				local.R.Owner = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.OwnerMechs = append(foreign.R.OwnerMechs, local)
				break
			}
		}
	}

	return nil
}

// LoadTemplate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechL) LoadTemplate(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.TemplateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.TemplateID {
					continue Outer
				}
			}

			args = append(args, obj.TemplateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`templates`),
		qm.WhereIn(`templates.id in ?`, args...),
		qmhelper.WhereIsNull(`templates.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Template")
	}

	var resultSlice []*Template
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Template")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for templates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for templates")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Template = foreign
		if foreign.R == nil {
			foreign.R = &templateR{}
		}
		foreign.R.Mechs = append(foreign.R.Mechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TemplateID == foreign.ID {
				local.R.Template = foreign
				if foreign.R == nil {
					foreign.R = &templateR{}
				}
				foreign.R.Mechs = append(foreign.R.Mechs, local)
				break
			}
		}
	}

	return nil
}

// LoadMechsModules allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadMechsModules(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs_modules`),
		qm.WhereIn(`mechs_modules.mech_id in ?`, args...),
		qmhelper.WhereIsNull(`mechs_modules.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mechs_modules")
	}

	var resultSlice []*MechsModule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mechs_modules")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mechs_modules")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs_modules")
	}

	if len(mechsModuleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MechsModules = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mechsModuleR{}
			}
			foreign.R.Mech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MechID {
				local.R.MechsModules = append(local.R.MechsModules, foreign)
				if foreign.R == nil {
					foreign.R = &mechsModuleR{}
				}
				foreign.R.Mech = local
				break
			}
		}
	}

	return nil
}

// LoadMechsWeapons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadMechsWeapons(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs_weapons`),
		qm.WhereIn(`mechs_weapons.mech_id in ?`, args...),
		qmhelper.WhereIsNull(`mechs_weapons.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mechs_weapons")
	}

	var resultSlice []*MechsWeapon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mechs_weapons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mechs_weapons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs_weapons")
	}

	if len(mechsWeaponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MechsWeapons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mechsWeaponR{}
			}
			foreign.R.Mech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MechID {
				local.R.MechsWeapons = append(local.R.MechsWeapons, foreign)
				if foreign.R == nil {
					foreign.R = &mechsWeaponR{}
				}
				foreign.R.Mech = local
				break
			}
		}
	}

	return nil
}

// SetBrand of the mech to the related item.
// Sets o.R.Brand to related.
// Adds o to related.R.Mechs.
func (o *Mech) SetBrand(exec boil.Executor, insert bool, related *Brand) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"brand_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BrandID = related.ID
	if o.R == nil {
		o.R = &mechR{
			Brand: related,
		}
	} else {
		o.R.Brand = related
	}

	if related.R == nil {
		related.R = &brandR{
			Mechs: MechSlice{o},
		}
	} else {
		related.R.Mechs = append(related.R.Mechs, o)
	}

	return nil
}

// SetChassis of the mech to the related item.
// Sets o.R.Chassis to related.
// Adds o to related.R.Mechs.
func (o *Mech) SetChassis(exec boil.Executor, insert bool, related *Chassis) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"chassis_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChassisID = related.ID
	if o.R == nil {
		o.R = &mechR{
			Chassis: related,
		}
	} else {
		o.R.Chassis = related
	}

	if related.R == nil {
		related.R = &chassisR{
			Mechs: MechSlice{o},
		}
	} else {
		related.R.Mechs = append(related.R.Mechs, o)
	}

	return nil
}

// SetOwner of the mech to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerMechs.
func (o *Mech) SetOwner(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerID = related.ID
	if o.R == nil {
		o.R = &mechR{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &playerR{
			OwnerMechs: MechSlice{o},
		}
	} else {
		related.R.OwnerMechs = append(related.R.OwnerMechs, o)
	}

	return nil
}

// SetTemplate of the mech to the related item.
// Sets o.R.Template to related.
// Adds o to related.R.Mechs.
func (o *Mech) SetTemplate(exec boil.Executor, insert bool, related *Template) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"template_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TemplateID = related.ID
	if o.R == nil {
		o.R = &mechR{
			Template: related,
		}
	} else {
		o.R.Template = related
	}

	if related.R == nil {
		related.R = &templateR{
			Mechs: MechSlice{o},
		}
	} else {
		related.R.Mechs = append(related.R.Mechs, o)
	}

	return nil
}

// AddMechsModules adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.MechsModules.
// Sets related.R.Mech appropriately.
func (o *Mech) AddMechsModules(exec boil.Executor, insert bool, related ...*MechsModule) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MechID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mechs_modules\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
				strmangle.WhereClause("\"", "\"", 2, mechsModulePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MechID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechR{
			MechsModules: related,
		}
	} else {
		o.R.MechsModules = append(o.R.MechsModules, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mechsModuleR{
				Mech: o,
			}
		} else {
			rel.R.Mech = o
		}
	}
	return nil
}

// AddMechsWeapons adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.MechsWeapons.
// Sets related.R.Mech appropriately.
func (o *Mech) AddMechsWeapons(exec boil.Executor, insert bool, related ...*MechsWeapon) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MechID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mechs_weapons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
				strmangle.WhereClause("\"", "\"", 2, mechsWeaponPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MechID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechR{
			MechsWeapons: related,
		}
	} else {
		o.R.MechsWeapons = append(o.R.MechsWeapons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mechsWeaponR{
				Mech: o,
			}
		} else {
			rel.R.Mech = o
		}
	}
	return nil
}

// Mechs retrieves all the records using an executor.
func Mechs(mods ...qm.QueryMod) mechQuery {
	mods = append(mods, qm.From("\"mechs\""), qmhelper.WhereIsNull("\"mechs\".\"deleted_at\""))
	return mechQuery{NewQuery(mods...)}
}

// FindMech retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMech(exec boil.Executor, iD string, selectCols ...string) (*Mech, error) {
	mechObj := &Mech{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mechs\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, mechObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from mechs")
	}

	if err = mechObj.doAfterSelectHooks(exec); err != nil {
		return mechObj, err
	}

	return mechObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Mech) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mechs provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mechInsertCacheMut.RLock()
	cache, cached := mechInsertCache[key]
	mechInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mechAllColumns,
			mechColumnsWithDefault,
			mechColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mechType, mechMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mechType, mechMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mechs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mechs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into mechs")
	}

	if !cached {
		mechInsertCacheMut.Lock()
		mechInsertCache[key] = cache
		mechInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Mech.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Mech) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mechUpdateCacheMut.RLock()
	cache, cached := mechUpdateCache[key]
	mechUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mechAllColumns,
			mechPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update mechs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mechs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mechPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mechType, mechMapping, append(wl, mechPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update mechs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for mechs")
	}

	if !cached {
		mechUpdateCacheMut.Lock()
		mechUpdateCache[key] = cache
		mechUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mechQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for mechs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for mechs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MechSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mechPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in mech slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all mech")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Mech) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mechs provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mechUpsertCacheMut.RLock()
	cache, cached := mechUpsertCache[key]
	mechUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mechAllColumns,
			mechColumnsWithDefault,
			mechColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mechAllColumns,
			mechPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert mechs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mechPrimaryKeyColumns))
			copy(conflict, mechPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mechs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mechType, mechMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mechType, mechMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert mechs")
	}

	if !cached {
		mechUpsertCacheMut.Lock()
		mechUpsertCache[key] = cache
		mechUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Mech record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Mech) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Mech provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mechPrimaryKeyMapping)
		sql = "DELETE FROM \"mechs\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"mechs\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(mechType, mechMapping, append(wl, mechPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from mechs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for mechs")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mechQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no mechQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mechs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mechs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MechSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mechBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"mechs\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"mechs\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, mechPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mech slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mechs")
	}

	if len(mechAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Mech) Reload(exec boil.Executor) error {
	ret, err := FindMech(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MechSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MechSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mechs\".* FROM \"mechs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in MechSlice")
	}

	*o = slice

	return nil
}

// MechExists checks if the Mech row exists.
func MechExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mechs\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if mechs exists")
	}

	return exists, nil
}
