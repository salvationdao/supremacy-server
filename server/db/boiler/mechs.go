// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Mech is an object representing the database table.
type Mech struct {
	ID                   string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BrandID              string      `boiler:"brand_id" boil:"brand_id" json:"brand_id" toml:"brand_id" yaml:"brand_id"`
	Label                string      `boiler:"label" boil:"label" json:"label" toml:"label" yaml:"label"`
	WeaponHardpoints     int         `boiler:"weapon_hardpoints" boil:"weapon_hardpoints" json:"weapon_hardpoints" toml:"weapon_hardpoints" yaml:"weapon_hardpoints"`
	UtilitySlots         int         `boiler:"utility_slots" boil:"utility_slots" json:"utility_slots" toml:"utility_slots" yaml:"utility_slots"`
	Speed                int         `boiler:"speed" boil:"speed" json:"speed" toml:"speed" yaml:"speed"`
	MaxHitpoints         int         `boiler:"max_hitpoints" boil:"max_hitpoints" json:"max_hitpoints" toml:"max_hitpoints" yaml:"max_hitpoints"`
	DeletedAt            null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt            time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt            time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	BlueprintID          string      `boiler:"blueprint_id" boil:"blueprint_id" json:"blueprint_id" toml:"blueprint_id" yaml:"blueprint_id"`
	IsDefault            bool        `boiler:"is_default" boil:"is_default" json:"is_default" toml:"is_default" yaml:"is_default"`
	IsInsured            bool        `boiler:"is_insured" boil:"is_insured" json:"is_insured" toml:"is_insured" yaml:"is_insured"`
	Name                 string      `boiler:"name" boil:"name" json:"name" toml:"name" yaml:"name"`
	ModelID              string      `boiler:"model_id" boil:"model_id" json:"model_id" toml:"model_id" yaml:"model_id"`
	CollectionItemID     string      `boiler:"collection_item_id" boil:"collection_item_id" json:"collection_item_id" toml:"collection_item_id" yaml:"collection_item_id"`
	GenesisTokenID       null.Int    `boiler:"genesis_token_id" boil:"genesis_token_id" json:"genesis_token_id,omitempty" toml:"genesis_token_id" yaml:"genesis_token_id,omitempty"`
	OwnerID              string      `boiler:"owner_id" boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	EnergyCoreSize       string      `boiler:"energy_core_size" boil:"energy_core_size" json:"energy_core_size" toml:"energy_core_size" yaml:"energy_core_size"`
	DefaultChassisSkinID string      `boiler:"default_chassis_skin_id" boil:"default_chassis_skin_id" json:"default_chassis_skin_id" toml:"default_chassis_skin_id" yaml:"default_chassis_skin_id"`
	Tier                 null.String `boiler:"tier" boil:"tier" json:"tier,omitempty" toml:"tier" yaml:"tier,omitempty"`
	ChassisSkinID        null.String `boiler:"chassis_skin_id" boil:"chassis_skin_id" json:"chassis_skin_id,omitempty" toml:"chassis_skin_id" yaml:"chassis_skin_id,omitempty"`
	EnergyCoreID         null.String `boiler:"energy_core_id" boil:"energy_core_id" json:"energy_core_id,omitempty" toml:"energy_core_id" yaml:"energy_core_id,omitempty"`
	IntroAnimationID     null.String `boiler:"intro_animation_id" boil:"intro_animation_id" json:"intro_animation_id,omitempty" toml:"intro_animation_id" yaml:"intro_animation_id,omitempty"`
	OutroAnimationID     null.String `boiler:"outro_animation_id" boil:"outro_animation_id" json:"outro_animation_id,omitempty" toml:"outro_animation_id" yaml:"outro_animation_id,omitempty"`

	R *mechR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L mechL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MechColumns = struct {
	ID                   string
	BrandID              string
	Label                string
	WeaponHardpoints     string
	UtilitySlots         string
	Speed                string
	MaxHitpoints         string
	DeletedAt            string
	UpdatedAt            string
	CreatedAt            string
	BlueprintID          string
	IsDefault            string
	IsInsured            string
	Name                 string
	ModelID              string
	CollectionItemID     string
	GenesisTokenID       string
	OwnerID              string
	EnergyCoreSize       string
	DefaultChassisSkinID string
	Tier                 string
	ChassisSkinID        string
	EnergyCoreID         string
	IntroAnimationID     string
	OutroAnimationID     string
}{
	ID:                   "id",
	BrandID:              "brand_id",
	Label:                "label",
	WeaponHardpoints:     "weapon_hardpoints",
	UtilitySlots:         "utility_slots",
	Speed:                "speed",
	MaxHitpoints:         "max_hitpoints",
	DeletedAt:            "deleted_at",
	UpdatedAt:            "updated_at",
	CreatedAt:            "created_at",
	BlueprintID:          "blueprint_id",
	IsDefault:            "is_default",
	IsInsured:            "is_insured",
	Name:                 "name",
	ModelID:              "model_id",
	CollectionItemID:     "collection_item_id",
	GenesisTokenID:       "genesis_token_id",
	OwnerID:              "owner_id",
	EnergyCoreSize:       "energy_core_size",
	DefaultChassisSkinID: "default_chassis_skin_id",
	Tier:                 "tier",
	ChassisSkinID:        "chassis_skin_id",
	EnergyCoreID:         "energy_core_id",
	IntroAnimationID:     "intro_animation_id",
	OutroAnimationID:     "outro_animation_id",
}

var MechTableColumns = struct {
	ID                   string
	BrandID              string
	Label                string
	WeaponHardpoints     string
	UtilitySlots         string
	Speed                string
	MaxHitpoints         string
	DeletedAt            string
	UpdatedAt            string
	CreatedAt            string
	BlueprintID          string
	IsDefault            string
	IsInsured            string
	Name                 string
	ModelID              string
	CollectionItemID     string
	GenesisTokenID       string
	OwnerID              string
	EnergyCoreSize       string
	DefaultChassisSkinID string
	Tier                 string
	ChassisSkinID        string
	EnergyCoreID         string
	IntroAnimationID     string
	OutroAnimationID     string
}{
	ID:                   "mechs.id",
	BrandID:              "mechs.brand_id",
	Label:                "mechs.label",
	WeaponHardpoints:     "mechs.weapon_hardpoints",
	UtilitySlots:         "mechs.utility_slots",
	Speed:                "mechs.speed",
	MaxHitpoints:         "mechs.max_hitpoints",
	DeletedAt:            "mechs.deleted_at",
	UpdatedAt:            "mechs.updated_at",
	CreatedAt:            "mechs.created_at",
	BlueprintID:          "mechs.blueprint_id",
	IsDefault:            "mechs.is_default",
	IsInsured:            "mechs.is_insured",
	Name:                 "mechs.name",
	ModelID:              "mechs.model_id",
	CollectionItemID:     "mechs.collection_item_id",
	GenesisTokenID:       "mechs.genesis_token_id",
	OwnerID:              "mechs.owner_id",
	EnergyCoreSize:       "mechs.energy_core_size",
	DefaultChassisSkinID: "mechs.default_chassis_skin_id",
	Tier:                 "mechs.tier",
	ChassisSkinID:        "mechs.chassis_skin_id",
	EnergyCoreID:         "mechs.energy_core_id",
	IntroAnimationID:     "mechs.intro_animation_id",
	OutroAnimationID:     "mechs.outro_animation_id",
}

// Generated where

var MechWhere = struct {
	ID                   whereHelperstring
	BrandID              whereHelperstring
	Label                whereHelperstring
	WeaponHardpoints     whereHelperint
	UtilitySlots         whereHelperint
	Speed                whereHelperint
	MaxHitpoints         whereHelperint
	DeletedAt            whereHelpernull_Time
	UpdatedAt            whereHelpertime_Time
	CreatedAt            whereHelpertime_Time
	BlueprintID          whereHelperstring
	IsDefault            whereHelperbool
	IsInsured            whereHelperbool
	Name                 whereHelperstring
	ModelID              whereHelperstring
	CollectionItemID     whereHelperstring
	GenesisTokenID       whereHelpernull_Int
	OwnerID              whereHelperstring
	EnergyCoreSize       whereHelperstring
	DefaultChassisSkinID whereHelperstring
	Tier                 whereHelpernull_String
	ChassisSkinID        whereHelpernull_String
	EnergyCoreID         whereHelpernull_String
	IntroAnimationID     whereHelpernull_String
	OutroAnimationID     whereHelpernull_String
}{
	ID:                   whereHelperstring{field: "\"mechs\".\"id\""},
	BrandID:              whereHelperstring{field: "\"mechs\".\"brand_id\""},
	Label:                whereHelperstring{field: "\"mechs\".\"label\""},
	WeaponHardpoints:     whereHelperint{field: "\"mechs\".\"weapon_hardpoints\""},
	UtilitySlots:         whereHelperint{field: "\"mechs\".\"utility_slots\""},
	Speed:                whereHelperint{field: "\"mechs\".\"speed\""},
	MaxHitpoints:         whereHelperint{field: "\"mechs\".\"max_hitpoints\""},
	DeletedAt:            whereHelpernull_Time{field: "\"mechs\".\"deleted_at\""},
	UpdatedAt:            whereHelpertime_Time{field: "\"mechs\".\"updated_at\""},
	CreatedAt:            whereHelpertime_Time{field: "\"mechs\".\"created_at\""},
	BlueprintID:          whereHelperstring{field: "\"mechs\".\"blueprint_id\""},
	IsDefault:            whereHelperbool{field: "\"mechs\".\"is_default\""},
	IsInsured:            whereHelperbool{field: "\"mechs\".\"is_insured\""},
	Name:                 whereHelperstring{field: "\"mechs\".\"name\""},
	ModelID:              whereHelperstring{field: "\"mechs\".\"model_id\""},
	CollectionItemID:     whereHelperstring{field: "\"mechs\".\"collection_item_id\""},
	GenesisTokenID:       whereHelpernull_Int{field: "\"mechs\".\"genesis_token_id\""},
	OwnerID:              whereHelperstring{field: "\"mechs\".\"owner_id\""},
	EnergyCoreSize:       whereHelperstring{field: "\"mechs\".\"energy_core_size\""},
	DefaultChassisSkinID: whereHelperstring{field: "\"mechs\".\"default_chassis_skin_id\""},
	Tier:                 whereHelpernull_String{field: "\"mechs\".\"tier\""},
	ChassisSkinID:        whereHelpernull_String{field: "\"mechs\".\"chassis_skin_id\""},
	EnergyCoreID:         whereHelpernull_String{field: "\"mechs\".\"energy_core_id\""},
	IntroAnimationID:     whereHelpernull_String{field: "\"mechs\".\"intro_animation_id\""},
	OutroAnimationID:     whereHelpernull_String{field: "\"mechs\".\"outro_animation_id\""},
}

// MechRels is where relationship names are stored.
var MechRels = struct {
	Blueprint                         string
	Brand                             string
	ChassisSkin                       string
	CollectionItem                    string
	DefaultChassisSkin                string
	EnergyCore                        string
	IntroAnimation                    string
	Model                             string
	OutroAnimation                    string
	Owner                             string
	BattleQueue                       string
	MechStat                          string
	BattleContracts                   string
	WarMachineOneBattleHistories      string
	WarMachineTwoBattleHistories      string
	BattleKills                       string
	KilledBattleKills                 string
	BattleMechs                       string
	KilledByBattleMechs               string
	BattleQueueNotifications          string
	BattleWins                        string
	EquippedOnBlueprintMechAnimations string
	EquippedOnEnergyCores             string
	EquippedOnMechAnimations          string
	MechRepairs                       string
	EquippedOnMechSkins               string
	ChassisMechUtilities              string
	ChassisMechWeapons                string
	EquippedOnUtilities               string
	EquippedOnWeaponSkins             string
}{
	Blueprint:                         "Blueprint",
	Brand:                             "Brand",
	ChassisSkin:                       "ChassisSkin",
	CollectionItem:                    "CollectionItem",
	DefaultChassisSkin:                "DefaultChassisSkin",
	EnergyCore:                        "EnergyCore",
	IntroAnimation:                    "IntroAnimation",
	Model:                             "Model",
	OutroAnimation:                    "OutroAnimation",
	Owner:                             "Owner",
	BattleQueue:                       "BattleQueue",
	MechStat:                          "MechStat",
	BattleContracts:                   "BattleContracts",
	WarMachineOneBattleHistories:      "WarMachineOneBattleHistories",
	WarMachineTwoBattleHistories:      "WarMachineTwoBattleHistories",
	BattleKills:                       "BattleKills",
	KilledBattleKills:                 "KilledBattleKills",
	BattleMechs:                       "BattleMechs",
	KilledByBattleMechs:               "KilledByBattleMechs",
	BattleQueueNotifications:          "BattleQueueNotifications",
	BattleWins:                        "BattleWins",
	EquippedOnBlueprintMechAnimations: "EquippedOnBlueprintMechAnimations",
	EquippedOnEnergyCores:             "EquippedOnEnergyCores",
	EquippedOnMechAnimations:          "EquippedOnMechAnimations",
	MechRepairs:                       "MechRepairs",
	EquippedOnMechSkins:               "EquippedOnMechSkins",
	ChassisMechUtilities:              "ChassisMechUtilities",
	ChassisMechWeapons:                "ChassisMechWeapons",
	EquippedOnUtilities:               "EquippedOnUtilities",
	EquippedOnWeaponSkins:             "EquippedOnWeaponSkins",
}

// mechR is where relationships are stored.
type mechR struct {
	Blueprint                         *BlueprintMech               `boiler:"Blueprint" boil:"Blueprint" json:"Blueprint" toml:"Blueprint" yaml:"Blueprint"`
	Brand                             *Brand                       `boiler:"Brand" boil:"Brand" json:"Brand" toml:"Brand" yaml:"Brand"`
	ChassisSkin                       *MechSkin                    `boiler:"ChassisSkin" boil:"ChassisSkin" json:"ChassisSkin" toml:"ChassisSkin" yaml:"ChassisSkin"`
	CollectionItem                    *CollectionItem              `boiler:"CollectionItem" boil:"CollectionItem" json:"CollectionItem" toml:"CollectionItem" yaml:"CollectionItem"`
	DefaultChassisSkin                *BlueprintMechSkin           `boiler:"DefaultChassisSkin" boil:"DefaultChassisSkin" json:"DefaultChassisSkin" toml:"DefaultChassisSkin" yaml:"DefaultChassisSkin"`
	EnergyCore                        *EnergyCore                  `boiler:"EnergyCore" boil:"EnergyCore" json:"EnergyCore" toml:"EnergyCore" yaml:"EnergyCore"`
	IntroAnimation                    *MechAnimation               `boiler:"IntroAnimation" boil:"IntroAnimation" json:"IntroAnimation" toml:"IntroAnimation" yaml:"IntroAnimation"`
	Model                             *MechModel                   `boiler:"Model" boil:"Model" json:"Model" toml:"Model" yaml:"Model"`
	OutroAnimation                    *MechAnimation               `boiler:"OutroAnimation" boil:"OutroAnimation" json:"OutroAnimation" toml:"OutroAnimation" yaml:"OutroAnimation"`
	Owner                             *Player                      `boiler:"Owner" boil:"Owner" json:"Owner" toml:"Owner" yaml:"Owner"`
	BattleQueue                       *BattleQueue                 `boiler:"BattleQueue" boil:"BattleQueue" json:"BattleQueue" toml:"BattleQueue" yaml:"BattleQueue"`
	MechStat                          *MechStat                    `boiler:"MechStat" boil:"MechStat" json:"MechStat" toml:"MechStat" yaml:"MechStat"`
	BattleContracts                   BattleContractSlice          `boiler:"BattleContracts" boil:"BattleContracts" json:"BattleContracts" toml:"BattleContracts" yaml:"BattleContracts"`
	WarMachineOneBattleHistories      BattleHistorySlice           `boiler:"WarMachineOneBattleHistories" boil:"WarMachineOneBattleHistories" json:"WarMachineOneBattleHistories" toml:"WarMachineOneBattleHistories" yaml:"WarMachineOneBattleHistories"`
	WarMachineTwoBattleHistories      BattleHistorySlice           `boiler:"WarMachineTwoBattleHistories" boil:"WarMachineTwoBattleHistories" json:"WarMachineTwoBattleHistories" toml:"WarMachineTwoBattleHistories" yaml:"WarMachineTwoBattleHistories"`
	BattleKills                       BattleKillSlice              `boiler:"BattleKills" boil:"BattleKills" json:"BattleKills" toml:"BattleKills" yaml:"BattleKills"`
	KilledBattleKills                 BattleKillSlice              `boiler:"KilledBattleKills" boil:"KilledBattleKills" json:"KilledBattleKills" toml:"KilledBattleKills" yaml:"KilledBattleKills"`
	BattleMechs                       BattleMechSlice              `boiler:"BattleMechs" boil:"BattleMechs" json:"BattleMechs" toml:"BattleMechs" yaml:"BattleMechs"`
	KilledByBattleMechs               BattleMechSlice              `boiler:"KilledByBattleMechs" boil:"KilledByBattleMechs" json:"KilledByBattleMechs" toml:"KilledByBattleMechs" yaml:"KilledByBattleMechs"`
	BattleQueueNotifications          BattleQueueNotificationSlice `boiler:"BattleQueueNotifications" boil:"BattleQueueNotifications" json:"BattleQueueNotifications" toml:"BattleQueueNotifications" yaml:"BattleQueueNotifications"`
	BattleWins                        BattleWinSlice               `boiler:"BattleWins" boil:"BattleWins" json:"BattleWins" toml:"BattleWins" yaml:"BattleWins"`
	EquippedOnBlueprintMechAnimations BlueprintMechAnimationSlice  `boiler:"EquippedOnBlueprintMechAnimations" boil:"EquippedOnBlueprintMechAnimations" json:"EquippedOnBlueprintMechAnimations" toml:"EquippedOnBlueprintMechAnimations" yaml:"EquippedOnBlueprintMechAnimations"`
	EquippedOnEnergyCores             EnergyCoreSlice              `boiler:"EquippedOnEnergyCores" boil:"EquippedOnEnergyCores" json:"EquippedOnEnergyCores" toml:"EquippedOnEnergyCores" yaml:"EquippedOnEnergyCores"`
	EquippedOnMechAnimations          MechAnimationSlice           `boiler:"EquippedOnMechAnimations" boil:"EquippedOnMechAnimations" json:"EquippedOnMechAnimations" toml:"EquippedOnMechAnimations" yaml:"EquippedOnMechAnimations"`
	MechRepairs                       MechRepairSlice              `boiler:"MechRepairs" boil:"MechRepairs" json:"MechRepairs" toml:"MechRepairs" yaml:"MechRepairs"`
	EquippedOnMechSkins               MechSkinSlice                `boiler:"EquippedOnMechSkins" boil:"EquippedOnMechSkins" json:"EquippedOnMechSkins" toml:"EquippedOnMechSkins" yaml:"EquippedOnMechSkins"`
	ChassisMechUtilities              MechUtilitySlice             `boiler:"ChassisMechUtilities" boil:"ChassisMechUtilities" json:"ChassisMechUtilities" toml:"ChassisMechUtilities" yaml:"ChassisMechUtilities"`
	ChassisMechWeapons                MechWeaponSlice              `boiler:"ChassisMechWeapons" boil:"ChassisMechWeapons" json:"ChassisMechWeapons" toml:"ChassisMechWeapons" yaml:"ChassisMechWeapons"`
	EquippedOnUtilities               UtilitySlice                 `boiler:"EquippedOnUtilities" boil:"EquippedOnUtilities" json:"EquippedOnUtilities" toml:"EquippedOnUtilities" yaml:"EquippedOnUtilities"`
	EquippedOnWeaponSkins             WeaponSkinSlice              `boiler:"EquippedOnWeaponSkins" boil:"EquippedOnWeaponSkins" json:"EquippedOnWeaponSkins" toml:"EquippedOnWeaponSkins" yaml:"EquippedOnWeaponSkins"`
}

// NewStruct creates a new relationship struct
func (*mechR) NewStruct() *mechR {
	return &mechR{}
}

// mechL is where Load methods for each relationship are stored.
type mechL struct{}

var (
	mechAllColumns            = []string{"id", "brand_id", "label", "weapon_hardpoints", "utility_slots", "speed", "max_hitpoints", "deleted_at", "updated_at", "created_at", "blueprint_id", "is_default", "is_insured", "name", "model_id", "collection_item_id", "genesis_token_id", "owner_id", "energy_core_size", "default_chassis_skin_id", "tier", "chassis_skin_id", "energy_core_id", "intro_animation_id", "outro_animation_id"}
	mechColumnsWithoutDefault = []string{"brand_id", "label", "weapon_hardpoints", "utility_slots", "speed", "max_hitpoints", "blueprint_id", "model_id", "collection_item_id", "owner_id", "default_chassis_skin_id"}
	mechColumnsWithDefault    = []string{"id", "deleted_at", "updated_at", "created_at", "is_default", "is_insured", "name", "genesis_token_id", "energy_core_size", "tier", "chassis_skin_id", "energy_core_id", "intro_animation_id", "outro_animation_id"}
	mechPrimaryKeyColumns     = []string{"id"}
	mechGeneratedColumns      = []string{}
)

type (
	// MechSlice is an alias for a slice of pointers to Mech.
	// This should almost always be used instead of []Mech.
	MechSlice []*Mech
	// MechHook is the signature for custom Mech hook methods
	MechHook func(boil.Executor, *Mech) error

	mechQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mechType                 = reflect.TypeOf(&Mech{})
	mechMapping              = queries.MakeStructMapping(mechType)
	mechPrimaryKeyMapping, _ = queries.BindMapping(mechType, mechMapping, mechPrimaryKeyColumns)
	mechInsertCacheMut       sync.RWMutex
	mechInsertCache          = make(map[string]insertCache)
	mechUpdateCacheMut       sync.RWMutex
	mechUpdateCache          = make(map[string]updateCache)
	mechUpsertCacheMut       sync.RWMutex
	mechUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mechAfterSelectHooks []MechHook

var mechBeforeInsertHooks []MechHook
var mechAfterInsertHooks []MechHook

var mechBeforeUpdateHooks []MechHook
var mechAfterUpdateHooks []MechHook

var mechBeforeDeleteHooks []MechHook
var mechAfterDeleteHooks []MechHook

var mechBeforeUpsertHooks []MechHook
var mechAfterUpsertHooks []MechHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Mech) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Mech) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Mech) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Mech) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Mech) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Mech) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Mech) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Mech) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Mech) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMechHook registers your hook function for all future operations.
func AddMechHook(hookPoint boil.HookPoint, mechHook MechHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mechAfterSelectHooks = append(mechAfterSelectHooks, mechHook)
	case boil.BeforeInsertHook:
		mechBeforeInsertHooks = append(mechBeforeInsertHooks, mechHook)
	case boil.AfterInsertHook:
		mechAfterInsertHooks = append(mechAfterInsertHooks, mechHook)
	case boil.BeforeUpdateHook:
		mechBeforeUpdateHooks = append(mechBeforeUpdateHooks, mechHook)
	case boil.AfterUpdateHook:
		mechAfterUpdateHooks = append(mechAfterUpdateHooks, mechHook)
	case boil.BeforeDeleteHook:
		mechBeforeDeleteHooks = append(mechBeforeDeleteHooks, mechHook)
	case boil.AfterDeleteHook:
		mechAfterDeleteHooks = append(mechAfterDeleteHooks, mechHook)
	case boil.BeforeUpsertHook:
		mechBeforeUpsertHooks = append(mechBeforeUpsertHooks, mechHook)
	case boil.AfterUpsertHook:
		mechAfterUpsertHooks = append(mechAfterUpsertHooks, mechHook)
	}
}

// One returns a single mech record from the query.
func (q mechQuery) One(exec boil.Executor) (*Mech, error) {
	o := &Mech{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for mechs")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Mech records from the query.
func (q mechQuery) All(exec boil.Executor) (MechSlice, error) {
	var o []*Mech

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Mech slice")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Mech records in the query.
func (q mechQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count mechs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mechQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if mechs exists")
	}

	return count > 0, nil
}

// Blueprint pointed to by the foreign key.
func (o *Mech) Blueprint(mods ...qm.QueryMod) blueprintMechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BlueprintID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintMechs(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_mechs\"")

	return query
}

// Brand pointed to by the foreign key.
func (o *Mech) Brand(mods ...qm.QueryMod) brandQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BrandID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Brands(queryMods...)
	queries.SetFrom(query.Query, "\"brands\"")

	return query
}

// ChassisSkin pointed to by the foreign key.
func (o *Mech) ChassisSkin(mods ...qm.QueryMod) mechSkinQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ChassisSkinID),
	}

	queryMods = append(queryMods, mods...)

	query := MechSkins(queryMods...)
	queries.SetFrom(query.Query, "\"mech_skin\"")

	return query
}

// CollectionItem pointed to by the foreign key.
func (o *Mech) CollectionItem(mods ...qm.QueryMod) collectionItemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CollectionItemID),
	}

	queryMods = append(queryMods, mods...)

	query := CollectionItems(queryMods...)
	queries.SetFrom(query.Query, "\"collection_items\"")

	return query
}

// DefaultChassisSkin pointed to by the foreign key.
func (o *Mech) DefaultChassisSkin(mods ...qm.QueryMod) blueprintMechSkinQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DefaultChassisSkinID),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintMechSkins(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_mech_skin\"")

	return query
}

// EnergyCore pointed to by the foreign key.
func (o *Mech) EnergyCore(mods ...qm.QueryMod) energyCoreQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EnergyCoreID),
	}

	queryMods = append(queryMods, mods...)

	query := EnergyCores(queryMods...)
	queries.SetFrom(query.Query, "\"energy_cores\"")

	return query
}

// IntroAnimation pointed to by the foreign key.
func (o *Mech) IntroAnimation(mods ...qm.QueryMod) mechAnimationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IntroAnimationID),
	}

	queryMods = append(queryMods, mods...)

	query := MechAnimations(queryMods...)
	queries.SetFrom(query.Query, "\"mech_animation\"")

	return query
}

// Model pointed to by the foreign key.
func (o *Mech) Model(mods ...qm.QueryMod) mechModelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ModelID),
	}

	queryMods = append(queryMods, mods...)

	query := MechModels(queryMods...)
	queries.SetFrom(query.Query, "\"mech_model\"")

	return query
}

// OutroAnimation pointed to by the foreign key.
func (o *Mech) OutroAnimation(mods ...qm.QueryMod) mechAnimationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OutroAnimationID),
	}

	queryMods = append(queryMods, mods...)

	query := MechAnimations(queryMods...)
	queries.SetFrom(query.Query, "\"mech_animation\"")

	return query
}

// Owner pointed to by the foreign key.
func (o *Mech) Owner(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OwnerID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// BattleQueue pointed to by the foreign key.
func (o *Mech) BattleQueue(mods ...qm.QueryMod) battleQueueQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"mech_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := BattleQueues(queryMods...)
	queries.SetFrom(query.Query, "\"battle_queue\"")

	return query
}

// MechStat pointed to by the foreign key.
func (o *Mech) MechStat(mods ...qm.QueryMod) mechStatQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"mech_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := MechStats(queryMods...)
	queries.SetFrom(query.Query, "\"mech_stats\"")

	return query
}

// BattleContracts retrieves all the battle_contract's BattleContracts with an executor.
func (o *Mech) BattleContracts(mods ...qm.QueryMod) battleContractQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_contracts\".\"mech_id\"=?", o.ID),
	)

	query := BattleContracts(queryMods...)
	queries.SetFrom(query.Query, "\"battle_contracts\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_contracts\".*"})
	}

	return query
}

// WarMachineOneBattleHistories retrieves all the battle_history's BattleHistories with an executor via war_machine_one_id column.
func (o *Mech) WarMachineOneBattleHistories(mods ...qm.QueryMod) battleHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_history\".\"war_machine_one_id\"=?", o.ID),
	)

	query := BattleHistories(queryMods...)
	queries.SetFrom(query.Query, "\"battle_history\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_history\".*"})
	}

	return query
}

// WarMachineTwoBattleHistories retrieves all the battle_history's BattleHistories with an executor via war_machine_two_id column.
func (o *Mech) WarMachineTwoBattleHistories(mods ...qm.QueryMod) battleHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_history\".\"war_machine_two_id\"=?", o.ID),
	)

	query := BattleHistories(queryMods...)
	queries.SetFrom(query.Query, "\"battle_history\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_history\".*"})
	}

	return query
}

// BattleKills retrieves all the battle_kill's BattleKills with an executor.
func (o *Mech) BattleKills(mods ...qm.QueryMod) battleKillQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_kills\".\"mech_id\"=?", o.ID),
	)

	query := BattleKills(queryMods...)
	queries.SetFrom(query.Query, "\"battle_kills\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_kills\".*"})
	}

	return query
}

// KilledBattleKills retrieves all the battle_kill's BattleKills with an executor via killed_id column.
func (o *Mech) KilledBattleKills(mods ...qm.QueryMod) battleKillQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_kills\".\"killed_id\"=?", o.ID),
	)

	query := BattleKills(queryMods...)
	queries.SetFrom(query.Query, "\"battle_kills\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_kills\".*"})
	}

	return query
}

// BattleMechs retrieves all the battle_mech's BattleMechs with an executor.
func (o *Mech) BattleMechs(mods ...qm.QueryMod) battleMechQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_mechs\".\"mech_id\"=?", o.ID),
	)

	query := BattleMechs(queryMods...)
	queries.SetFrom(query.Query, "\"battle_mechs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_mechs\".*"})
	}

	return query
}

// KilledByBattleMechs retrieves all the battle_mech's BattleMechs with an executor via killed_by_id column.
func (o *Mech) KilledByBattleMechs(mods ...qm.QueryMod) battleMechQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_mechs\".\"killed_by_id\"=?", o.ID),
	)

	query := BattleMechs(queryMods...)
	queries.SetFrom(query.Query, "\"battle_mechs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_mechs\".*"})
	}

	return query
}

// BattleQueueNotifications retrieves all the battle_queue_notification's BattleQueueNotifications with an executor.
func (o *Mech) BattleQueueNotifications(mods ...qm.QueryMod) battleQueueNotificationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_queue_notifications\".\"mech_id\"=?", o.ID),
	)

	query := BattleQueueNotifications(queryMods...)
	queries.SetFrom(query.Query, "\"battle_queue_notifications\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_queue_notifications\".*"})
	}

	return query
}

// BattleWins retrieves all the battle_win's BattleWins with an executor.
func (o *Mech) BattleWins(mods ...qm.QueryMod) battleWinQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_wins\".\"mech_id\"=?", o.ID),
	)

	query := BattleWins(queryMods...)
	queries.SetFrom(query.Query, "\"battle_wins\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_wins\".*"})
	}

	return query
}

// EquippedOnBlueprintMechAnimations retrieves all the blueprint_mech_animation's BlueprintMechAnimations with an executor via equipped_on column.
func (o *Mech) EquippedOnBlueprintMechAnimations(mods ...qm.QueryMod) blueprintMechAnimationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"blueprint_mech_animation\".\"equipped_on\"=?", o.ID),
	)

	query := BlueprintMechAnimations(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_mech_animation\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"blueprint_mech_animation\".*"})
	}

	return query
}

// EquippedOnEnergyCores retrieves all the energy_core's EnergyCores with an executor via equipped_on column.
func (o *Mech) EquippedOnEnergyCores(mods ...qm.QueryMod) energyCoreQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"energy_cores\".\"equipped_on\"=?", o.ID),
	)

	query := EnergyCores(queryMods...)
	queries.SetFrom(query.Query, "\"energy_cores\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"energy_cores\".*"})
	}

	return query
}

// EquippedOnMechAnimations retrieves all the mech_animation's MechAnimations with an executor via equipped_on column.
func (o *Mech) EquippedOnMechAnimations(mods ...qm.QueryMod) mechAnimationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mech_animation\".\"equipped_on\"=?", o.ID),
	)

	query := MechAnimations(queryMods...)
	queries.SetFrom(query.Query, "\"mech_animation\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mech_animation\".*"})
	}

	return query
}

// MechRepairs retrieves all the mech_repair's MechRepairs with an executor.
func (o *Mech) MechRepairs(mods ...qm.QueryMod) mechRepairQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mech_repair\".\"mech_id\"=?", o.ID),
	)

	query := MechRepairs(queryMods...)
	queries.SetFrom(query.Query, "\"mech_repair\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mech_repair\".*"})
	}

	return query
}

// EquippedOnMechSkins retrieves all the mech_skin's MechSkins with an executor via equipped_on column.
func (o *Mech) EquippedOnMechSkins(mods ...qm.QueryMod) mechSkinQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mech_skin\".\"equipped_on\"=?", o.ID),
	)

	query := MechSkins(queryMods...)
	queries.SetFrom(query.Query, "\"mech_skin\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mech_skin\".*"})
	}

	return query
}

// ChassisMechUtilities retrieves all the mech_utility's MechUtilities with an executor via chassis_id column.
func (o *Mech) ChassisMechUtilities(mods ...qm.QueryMod) mechUtilityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mech_utility\".\"chassis_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"mech_utility\".\"deleted_at\""),
	)

	query := MechUtilities(queryMods...)
	queries.SetFrom(query.Query, "\"mech_utility\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mech_utility\".*"})
	}

	return query
}

// ChassisMechWeapons retrieves all the mech_weapon's MechWeapons with an executor via chassis_id column.
func (o *Mech) ChassisMechWeapons(mods ...qm.QueryMod) mechWeaponQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mech_weapons\".\"chassis_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"mech_weapons\".\"deleted_at\""),
	)

	query := MechWeapons(queryMods...)
	queries.SetFrom(query.Query, "\"mech_weapons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mech_weapons\".*"})
	}

	return query
}

// EquippedOnUtilities retrieves all the utility's Utilities with an executor via equipped_on column.
func (o *Mech) EquippedOnUtilities(mods ...qm.QueryMod) utilityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"utility\".\"equipped_on\"=?", o.ID),
		qmhelper.WhereIsNull("\"utility\".\"deleted_at\""),
	)

	query := Utilities(queryMods...)
	queries.SetFrom(query.Query, "\"utility\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"utility\".*"})
	}

	return query
}

// EquippedOnWeaponSkins retrieves all the weapon_skin's WeaponSkins with an executor via equipped_on column.
func (o *Mech) EquippedOnWeaponSkins(mods ...qm.QueryMod) weaponSkinQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"weapon_skin\".\"equipped_on\"=?", o.ID),
	)

	query := WeaponSkins(queryMods...)
	queries.SetFrom(query.Query, "\"weapon_skin\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"weapon_skin\".*"})
	}

	return query
}

// LoadBlueprint allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechL) LoadBlueprint(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.BlueprintID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.BlueprintID {
					continue Outer
				}
			}

			args = append(args, obj.BlueprintID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_mechs`),
		qm.WhereIn(`blueprint_mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`blueprint_mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintMech")
	}

	var resultSlice []*BlueprintMech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintMech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_mechs")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Blueprint = foreign
		if foreign.R == nil {
			foreign.R = &blueprintMechR{}
		}
		foreign.R.BlueprintMechs = append(foreign.R.BlueprintMechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlueprintID == foreign.ID {
				local.R.Blueprint = foreign
				if foreign.R == nil {
					foreign.R = &blueprintMechR{}
				}
				foreign.R.BlueprintMechs = append(foreign.R.BlueprintMechs, local)
				break
			}
		}
	}

	return nil
}

// LoadBrand allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechL) LoadBrand(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.BrandID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.BrandID {
					continue Outer
				}
			}

			args = append(args, obj.BrandID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`brands`),
		qm.WhereIn(`brands.id in ?`, args...),
		qmhelper.WhereIsNull(`brands.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Brand")
	}

	var resultSlice []*Brand
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Brand")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for brands")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for brands")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Brand = foreign
		if foreign.R == nil {
			foreign.R = &brandR{}
		}
		foreign.R.Mechs = append(foreign.R.Mechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BrandID == foreign.ID {
				local.R.Brand = foreign
				if foreign.R == nil {
					foreign.R = &brandR{}
				}
				foreign.R.Mechs = append(foreign.R.Mechs, local)
				break
			}
		}
	}

	return nil
}

// LoadChassisSkin allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechL) LoadChassisSkin(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		if !queries.IsNil(object.ChassisSkinID) {
			args = append(args, object.ChassisSkinID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ChassisSkinID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ChassisSkinID) {
				args = append(args, obj.ChassisSkinID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_skin`),
		qm.WhereIn(`mech_skin.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MechSkin")
	}

	var resultSlice []*MechSkin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MechSkin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mech_skin")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_skin")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChassisSkin = foreign
		if foreign.R == nil {
			foreign.R = &mechSkinR{}
		}
		foreign.R.ChassisSkinMechs = append(foreign.R.ChassisSkinMechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ChassisSkinID, foreign.ID) {
				local.R.ChassisSkin = foreign
				if foreign.R == nil {
					foreign.R = &mechSkinR{}
				}
				foreign.R.ChassisSkinMechs = append(foreign.R.ChassisSkinMechs, local)
				break
			}
		}
	}

	return nil
}

// LoadCollectionItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechL) LoadCollectionItem(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.CollectionItemID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.CollectionItemID {
					continue Outer
				}
			}

			args = append(args, obj.CollectionItemID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`collection_items`),
		qm.WhereIn(`collection_items.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CollectionItem")
	}

	var resultSlice []*CollectionItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CollectionItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for collection_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collection_items")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CollectionItem = foreign
		if foreign.R == nil {
			foreign.R = &collectionItemR{}
		}
		foreign.R.Mechs = append(foreign.R.Mechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CollectionItemID == foreign.ID {
				local.R.CollectionItem = foreign
				if foreign.R == nil {
					foreign.R = &collectionItemR{}
				}
				foreign.R.Mechs = append(foreign.R.Mechs, local)
				break
			}
		}
	}

	return nil
}

// LoadDefaultChassisSkin allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechL) LoadDefaultChassisSkin(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.DefaultChassisSkinID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.DefaultChassisSkinID {
					continue Outer
				}
			}

			args = append(args, obj.DefaultChassisSkinID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_mech_skin`),
		qm.WhereIn(`blueprint_mech_skin.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintMechSkin")
	}

	var resultSlice []*BlueprintMechSkin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintMechSkin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_mech_skin")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_mech_skin")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DefaultChassisSkin = foreign
		if foreign.R == nil {
			foreign.R = &blueprintMechSkinR{}
		}
		foreign.R.DefaultChassisSkinMechs = append(foreign.R.DefaultChassisSkinMechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DefaultChassisSkinID == foreign.ID {
				local.R.DefaultChassisSkin = foreign
				if foreign.R == nil {
					foreign.R = &blueprintMechSkinR{}
				}
				foreign.R.DefaultChassisSkinMechs = append(foreign.R.DefaultChassisSkinMechs, local)
				break
			}
		}
	}

	return nil
}

// LoadEnergyCore allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechL) LoadEnergyCore(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		if !queries.IsNil(object.EnergyCoreID) {
			args = append(args, object.EnergyCoreID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.EnergyCoreID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.EnergyCoreID) {
				args = append(args, obj.EnergyCoreID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`energy_cores`),
		qm.WhereIn(`energy_cores.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load EnergyCore")
	}

	var resultSlice []*EnergyCore
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice EnergyCore")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for energy_cores")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for energy_cores")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EnergyCore = foreign
		if foreign.R == nil {
			foreign.R = &energyCoreR{}
		}
		foreign.R.Mechs = append(foreign.R.Mechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.EnergyCoreID, foreign.ID) {
				local.R.EnergyCore = foreign
				if foreign.R == nil {
					foreign.R = &energyCoreR{}
				}
				foreign.R.Mechs = append(foreign.R.Mechs, local)
				break
			}
		}
	}

	return nil
}

// LoadIntroAnimation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechL) LoadIntroAnimation(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		if !queries.IsNil(object.IntroAnimationID) {
			args = append(args, object.IntroAnimationID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.IntroAnimationID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.IntroAnimationID) {
				args = append(args, obj.IntroAnimationID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_animation`),
		qm.WhereIn(`mech_animation.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MechAnimation")
	}

	var resultSlice []*MechAnimation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MechAnimation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mech_animation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_animation")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IntroAnimation = foreign
		if foreign.R == nil {
			foreign.R = &mechAnimationR{}
		}
		foreign.R.IntroAnimationMechs = append(foreign.R.IntroAnimationMechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.IntroAnimationID, foreign.ID) {
				local.R.IntroAnimation = foreign
				if foreign.R == nil {
					foreign.R = &mechAnimationR{}
				}
				foreign.R.IntroAnimationMechs = append(foreign.R.IntroAnimationMechs, local)
				break
			}
		}
	}

	return nil
}

// LoadModel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechL) LoadModel(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ModelID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ModelID {
					continue Outer
				}
			}

			args = append(args, obj.ModelID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_model`),
		qm.WhereIn(`mech_model.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MechModel")
	}

	var resultSlice []*MechModel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MechModel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mech_model")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_model")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Model = foreign
		if foreign.R == nil {
			foreign.R = &mechModelR{}
		}
		foreign.R.ModelMechs = append(foreign.R.ModelMechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ModelID == foreign.ID {
				local.R.Model = foreign
				if foreign.R == nil {
					foreign.R = &mechModelR{}
				}
				foreign.R.ModelMechs = append(foreign.R.ModelMechs, local)
				break
			}
		}
	}

	return nil
}

// LoadOutroAnimation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechL) LoadOutroAnimation(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		if !queries.IsNil(object.OutroAnimationID) {
			args = append(args, object.OutroAnimationID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OutroAnimationID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OutroAnimationID) {
				args = append(args, obj.OutroAnimationID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_animation`),
		qm.WhereIn(`mech_animation.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MechAnimation")
	}

	var resultSlice []*MechAnimation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MechAnimation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mech_animation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_animation")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OutroAnimation = foreign
		if foreign.R == nil {
			foreign.R = &mechAnimationR{}
		}
		foreign.R.OutroAnimationMechs = append(foreign.R.OutroAnimationMechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OutroAnimationID, foreign.ID) {
				local.R.OutroAnimation = foreign
				if foreign.R == nil {
					foreign.R = &mechAnimationR{}
				}
				foreign.R.OutroAnimationMechs = append(foreign.R.OutroAnimationMechs, local)
				break
			}
		}
	}

	return nil
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechL) LoadOwner(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.OwnerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.OwnerID {
					continue Outer
				}
			}

			args = append(args, obj.OwnerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Owner = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.OwnerMechs = append(foreign.R.OwnerMechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerID == foreign.ID {
				local.R.Owner = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.OwnerMechs = append(foreign.R.OwnerMechs, local)
				break
			}
		}
	}

	return nil
}

// LoadBattleQueue allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (mechL) LoadBattleQueue(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_queue`),
		qm.WhereIn(`battle_queue.mech_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BattleQueue")
	}

	var resultSlice []*BattleQueue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BattleQueue")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battle_queue")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_queue")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BattleQueue = foreign
		if foreign.R == nil {
			foreign.R = &battleQueueR{}
		}
		foreign.R.Mech = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.MechID {
				local.R.BattleQueue = foreign
				if foreign.R == nil {
					foreign.R = &battleQueueR{}
				}
				foreign.R.Mech = local
				break
			}
		}
	}

	return nil
}

// LoadMechStat allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (mechL) LoadMechStat(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_stats`),
		qm.WhereIn(`mech_stats.mech_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MechStat")
	}

	var resultSlice []*MechStat
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MechStat")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mech_stats")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_stats")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MechStat = foreign
		if foreign.R == nil {
			foreign.R = &mechStatR{}
		}
		foreign.R.Mech = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.MechID {
				local.R.MechStat = foreign
				if foreign.R == nil {
					foreign.R = &mechStatR{}
				}
				foreign.R.Mech = local
				break
			}
		}
	}

	return nil
}

// LoadBattleContracts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadBattleContracts(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_contracts`),
		qm.WhereIn(`battle_contracts.mech_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_contracts")
	}

	var resultSlice []*BattleContract
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_contracts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_contracts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_contracts")
	}

	if len(battleContractAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleContracts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleContractR{}
			}
			foreign.R.Mech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MechID {
				local.R.BattleContracts = append(local.R.BattleContracts, foreign)
				if foreign.R == nil {
					foreign.R = &battleContractR{}
				}
				foreign.R.Mech = local
				break
			}
		}
	}

	return nil
}

// LoadWarMachineOneBattleHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadWarMachineOneBattleHistories(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_history`),
		qm.WhereIn(`battle_history.war_machine_one_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_history")
	}

	var resultSlice []*BattleHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_history")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_history")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_history")
	}

	if len(battleHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WarMachineOneBattleHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleHistoryR{}
			}
			foreign.R.WarMachineOne = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.WarMachineOneID {
				local.R.WarMachineOneBattleHistories = append(local.R.WarMachineOneBattleHistories, foreign)
				if foreign.R == nil {
					foreign.R = &battleHistoryR{}
				}
				foreign.R.WarMachineOne = local
				break
			}
		}
	}

	return nil
}

// LoadWarMachineTwoBattleHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadWarMachineTwoBattleHistories(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_history`),
		qm.WhereIn(`battle_history.war_machine_two_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_history")
	}

	var resultSlice []*BattleHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_history")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_history")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_history")
	}

	if len(battleHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WarMachineTwoBattleHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleHistoryR{}
			}
			foreign.R.WarMachineTwo = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.WarMachineTwoID) {
				local.R.WarMachineTwoBattleHistories = append(local.R.WarMachineTwoBattleHistories, foreign)
				if foreign.R == nil {
					foreign.R = &battleHistoryR{}
				}
				foreign.R.WarMachineTwo = local
				break
			}
		}
	}

	return nil
}

// LoadBattleKills allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadBattleKills(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_kills`),
		qm.WhereIn(`battle_kills.mech_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_kills")
	}

	var resultSlice []*BattleKill
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_kills")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_kills")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_kills")
	}

	if len(battleKillAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleKills = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleKillR{}
			}
			foreign.R.Mech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MechID {
				local.R.BattleKills = append(local.R.BattleKills, foreign)
				if foreign.R == nil {
					foreign.R = &battleKillR{}
				}
				foreign.R.Mech = local
				break
			}
		}
	}

	return nil
}

// LoadKilledBattleKills allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadKilledBattleKills(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_kills`),
		qm.WhereIn(`battle_kills.killed_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_kills")
	}

	var resultSlice []*BattleKill
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_kills")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_kills")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_kills")
	}

	if len(battleKillAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.KilledBattleKills = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleKillR{}
			}
			foreign.R.Killed = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.KilledID {
				local.R.KilledBattleKills = append(local.R.KilledBattleKills, foreign)
				if foreign.R == nil {
					foreign.R = &battleKillR{}
				}
				foreign.R.Killed = local
				break
			}
		}
	}

	return nil
}

// LoadBattleMechs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadBattleMechs(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_mechs`),
		qm.WhereIn(`battle_mechs.mech_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_mechs")
	}

	var resultSlice []*BattleMech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_mechs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_mechs")
	}

	if len(battleMechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleMechs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleMechR{}
			}
			foreign.R.Mech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MechID {
				local.R.BattleMechs = append(local.R.BattleMechs, foreign)
				if foreign.R == nil {
					foreign.R = &battleMechR{}
				}
				foreign.R.Mech = local
				break
			}
		}
	}

	return nil
}

// LoadKilledByBattleMechs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadKilledByBattleMechs(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_mechs`),
		qm.WhereIn(`battle_mechs.killed_by_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_mechs")
	}

	var resultSlice []*BattleMech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_mechs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_mechs")
	}

	if len(battleMechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.KilledByBattleMechs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleMechR{}
			}
			foreign.R.KilledBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.KilledByID) {
				local.R.KilledByBattleMechs = append(local.R.KilledByBattleMechs, foreign)
				if foreign.R == nil {
					foreign.R = &battleMechR{}
				}
				foreign.R.KilledBy = local
				break
			}
		}
	}

	return nil
}

// LoadBattleQueueNotifications allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadBattleQueueNotifications(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_queue_notifications`),
		qm.WhereIn(`battle_queue_notifications.mech_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_queue_notifications")
	}

	var resultSlice []*BattleQueueNotification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_queue_notifications")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_queue_notifications")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_queue_notifications")
	}

	if len(battleQueueNotificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleQueueNotifications = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleQueueNotificationR{}
			}
			foreign.R.Mech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MechID {
				local.R.BattleQueueNotifications = append(local.R.BattleQueueNotifications, foreign)
				if foreign.R == nil {
					foreign.R = &battleQueueNotificationR{}
				}
				foreign.R.Mech = local
				break
			}
		}
	}

	return nil
}

// LoadBattleWins allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadBattleWins(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_wins`),
		qm.WhereIn(`battle_wins.mech_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_wins")
	}

	var resultSlice []*BattleWin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_wins")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_wins")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_wins")
	}

	if len(battleWinAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleWins = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleWinR{}
			}
			foreign.R.Mech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MechID {
				local.R.BattleWins = append(local.R.BattleWins, foreign)
				if foreign.R == nil {
					foreign.R = &battleWinR{}
				}
				foreign.R.Mech = local
				break
			}
		}
	}

	return nil
}

// LoadEquippedOnBlueprintMechAnimations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadEquippedOnBlueprintMechAnimations(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_mech_animation`),
		qm.WhereIn(`blueprint_mech_animation.equipped_on in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load blueprint_mech_animation")
	}

	var resultSlice []*BlueprintMechAnimation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice blueprint_mech_animation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on blueprint_mech_animation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_mech_animation")
	}

	if len(blueprintMechAnimationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EquippedOnBlueprintMechAnimations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &blueprintMechAnimationR{}
			}
			foreign.R.EquippedOnMech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.EquippedOn) {
				local.R.EquippedOnBlueprintMechAnimations = append(local.R.EquippedOnBlueprintMechAnimations, foreign)
				if foreign.R == nil {
					foreign.R = &blueprintMechAnimationR{}
				}
				foreign.R.EquippedOnMech = local
				break
			}
		}
	}

	return nil
}

// LoadEquippedOnEnergyCores allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadEquippedOnEnergyCores(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`energy_cores`),
		qm.WhereIn(`energy_cores.equipped_on in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load energy_cores")
	}

	var resultSlice []*EnergyCore
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice energy_cores")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on energy_cores")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for energy_cores")
	}

	if len(energyCoreAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EquippedOnEnergyCores = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &energyCoreR{}
			}
			foreign.R.EquippedOnMech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.EquippedOn) {
				local.R.EquippedOnEnergyCores = append(local.R.EquippedOnEnergyCores, foreign)
				if foreign.R == nil {
					foreign.R = &energyCoreR{}
				}
				foreign.R.EquippedOnMech = local
				break
			}
		}
	}

	return nil
}

// LoadEquippedOnMechAnimations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadEquippedOnMechAnimations(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_animation`),
		qm.WhereIn(`mech_animation.equipped_on in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mech_animation")
	}

	var resultSlice []*MechAnimation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mech_animation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mech_animation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_animation")
	}

	if len(mechAnimationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EquippedOnMechAnimations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mechAnimationR{}
			}
			foreign.R.EquippedOnMech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.EquippedOn) {
				local.R.EquippedOnMechAnimations = append(local.R.EquippedOnMechAnimations, foreign)
				if foreign.R == nil {
					foreign.R = &mechAnimationR{}
				}
				foreign.R.EquippedOnMech = local
				break
			}
		}
	}

	return nil
}

// LoadMechRepairs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadMechRepairs(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_repair`),
		qm.WhereIn(`mech_repair.mech_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mech_repair")
	}

	var resultSlice []*MechRepair
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mech_repair")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mech_repair")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_repair")
	}

	if len(mechRepairAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MechRepairs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mechRepairR{}
			}
			foreign.R.Mech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MechID {
				local.R.MechRepairs = append(local.R.MechRepairs, foreign)
				if foreign.R == nil {
					foreign.R = &mechRepairR{}
				}
				foreign.R.Mech = local
				break
			}
		}
	}

	return nil
}

// LoadEquippedOnMechSkins allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadEquippedOnMechSkins(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_skin`),
		qm.WhereIn(`mech_skin.equipped_on in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mech_skin")
	}

	var resultSlice []*MechSkin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mech_skin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mech_skin")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_skin")
	}

	if len(mechSkinAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EquippedOnMechSkins = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mechSkinR{}
			}
			foreign.R.EquippedOnMech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.EquippedOn) {
				local.R.EquippedOnMechSkins = append(local.R.EquippedOnMechSkins, foreign)
				if foreign.R == nil {
					foreign.R = &mechSkinR{}
				}
				foreign.R.EquippedOnMech = local
				break
			}
		}
	}

	return nil
}

// LoadChassisMechUtilities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadChassisMechUtilities(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_utility`),
		qm.WhereIn(`mech_utility.chassis_id in ?`, args...),
		qmhelper.WhereIsNull(`mech_utility.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mech_utility")
	}

	var resultSlice []*MechUtility
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mech_utility")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mech_utility")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_utility")
	}

	if len(mechUtilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChassisMechUtilities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mechUtilityR{}
			}
			foreign.R.Chassis = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChassisID {
				local.R.ChassisMechUtilities = append(local.R.ChassisMechUtilities, foreign)
				if foreign.R == nil {
					foreign.R = &mechUtilityR{}
				}
				foreign.R.Chassis = local
				break
			}
		}
	}

	return nil
}

// LoadChassisMechWeapons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadChassisMechWeapons(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_weapons`),
		qm.WhereIn(`mech_weapons.chassis_id in ?`, args...),
		qmhelper.WhereIsNull(`mech_weapons.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mech_weapons")
	}

	var resultSlice []*MechWeapon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mech_weapons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mech_weapons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_weapons")
	}

	if len(mechWeaponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChassisMechWeapons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mechWeaponR{}
			}
			foreign.R.Chassis = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChassisID {
				local.R.ChassisMechWeapons = append(local.R.ChassisMechWeapons, foreign)
				if foreign.R == nil {
					foreign.R = &mechWeaponR{}
				}
				foreign.R.Chassis = local
				break
			}
		}
	}

	return nil
}

// LoadEquippedOnUtilities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadEquippedOnUtilities(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`utility`),
		qm.WhereIn(`utility.equipped_on in ?`, args...),
		qmhelper.WhereIsNull(`utility.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load utility")
	}

	var resultSlice []*Utility
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice utility")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on utility")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for utility")
	}

	if len(utilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EquippedOnUtilities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &utilityR{}
			}
			foreign.R.EquippedOnMech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.EquippedOn) {
				local.R.EquippedOnUtilities = append(local.R.EquippedOnUtilities, foreign)
				if foreign.R == nil {
					foreign.R = &utilityR{}
				}
				foreign.R.EquippedOnMech = local
				break
			}
		}
	}

	return nil
}

// LoadEquippedOnWeaponSkins allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadEquippedOnWeaponSkins(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`weapon_skin`),
		qm.WhereIn(`weapon_skin.equipped_on in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load weapon_skin")
	}

	var resultSlice []*WeaponSkin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice weapon_skin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on weapon_skin")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for weapon_skin")
	}

	if len(weaponSkinAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EquippedOnWeaponSkins = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &weaponSkinR{}
			}
			foreign.R.EquippedOnMech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.EquippedOn) {
				local.R.EquippedOnWeaponSkins = append(local.R.EquippedOnWeaponSkins, foreign)
				if foreign.R == nil {
					foreign.R = &weaponSkinR{}
				}
				foreign.R.EquippedOnMech = local
				break
			}
		}
	}

	return nil
}

// SetBlueprint of the mech to the related item.
// Sets o.R.Blueprint to related.
// Adds o to related.R.BlueprintMechs.
func (o *Mech) SetBlueprint(exec boil.Executor, insert bool, related *BlueprintMech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlueprintID = related.ID
	if o.R == nil {
		o.R = &mechR{
			Blueprint: related,
		}
	} else {
		o.R.Blueprint = related
	}

	if related.R == nil {
		related.R = &blueprintMechR{
			BlueprintMechs: MechSlice{o},
		}
	} else {
		related.R.BlueprintMechs = append(related.R.BlueprintMechs, o)
	}

	return nil
}

// SetBrand of the mech to the related item.
// Sets o.R.Brand to related.
// Adds o to related.R.Mechs.
func (o *Mech) SetBrand(exec boil.Executor, insert bool, related *Brand) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"brand_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BrandID = related.ID
	if o.R == nil {
		o.R = &mechR{
			Brand: related,
		}
	} else {
		o.R.Brand = related
	}

	if related.R == nil {
		related.R = &brandR{
			Mechs: MechSlice{o},
		}
	} else {
		related.R.Mechs = append(related.R.Mechs, o)
	}

	return nil
}

// SetChassisSkin of the mech to the related item.
// Sets o.R.ChassisSkin to related.
// Adds o to related.R.ChassisSkinMechs.
func (o *Mech) SetChassisSkin(exec boil.Executor, insert bool, related *MechSkin) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"chassis_skin_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ChassisSkinID, related.ID)
	if o.R == nil {
		o.R = &mechR{
			ChassisSkin: related,
		}
	} else {
		o.R.ChassisSkin = related
	}

	if related.R == nil {
		related.R = &mechSkinR{
			ChassisSkinMechs: MechSlice{o},
		}
	} else {
		related.R.ChassisSkinMechs = append(related.R.ChassisSkinMechs, o)
	}

	return nil
}

// RemoveChassisSkin relationship.
// Sets o.R.ChassisSkin to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Mech) RemoveChassisSkin(exec boil.Executor, related *MechSkin) error {
	var err error

	queries.SetScanner(&o.ChassisSkinID, nil)
	if _, err = o.Update(exec, boil.Whitelist("chassis_skin_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ChassisSkin = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ChassisSkinMechs {
		if queries.Equal(o.ChassisSkinID, ri.ChassisSkinID) {
			continue
		}

		ln := len(related.R.ChassisSkinMechs)
		if ln > 1 && i < ln-1 {
			related.R.ChassisSkinMechs[i] = related.R.ChassisSkinMechs[ln-1]
		}
		related.R.ChassisSkinMechs = related.R.ChassisSkinMechs[:ln-1]
		break
	}
	return nil
}

// SetCollectionItem of the mech to the related item.
// Sets o.R.CollectionItem to related.
// Adds o to related.R.Mechs.
func (o *Mech) SetCollectionItem(exec boil.Executor, insert bool, related *CollectionItem) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"collection_item_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CollectionItemID = related.ID
	if o.R == nil {
		o.R = &mechR{
			CollectionItem: related,
		}
	} else {
		o.R.CollectionItem = related
	}

	if related.R == nil {
		related.R = &collectionItemR{
			Mechs: MechSlice{o},
		}
	} else {
		related.R.Mechs = append(related.R.Mechs, o)
	}

	return nil
}

// SetDefaultChassisSkin of the mech to the related item.
// Sets o.R.DefaultChassisSkin to related.
// Adds o to related.R.DefaultChassisSkinMechs.
func (o *Mech) SetDefaultChassisSkin(exec boil.Executor, insert bool, related *BlueprintMechSkin) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"default_chassis_skin_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DefaultChassisSkinID = related.ID
	if o.R == nil {
		o.R = &mechR{
			DefaultChassisSkin: related,
		}
	} else {
		o.R.DefaultChassisSkin = related
	}

	if related.R == nil {
		related.R = &blueprintMechSkinR{
			DefaultChassisSkinMechs: MechSlice{o},
		}
	} else {
		related.R.DefaultChassisSkinMechs = append(related.R.DefaultChassisSkinMechs, o)
	}

	return nil
}

// SetEnergyCore of the mech to the related item.
// Sets o.R.EnergyCore to related.
// Adds o to related.R.Mechs.
func (o *Mech) SetEnergyCore(exec boil.Executor, insert bool, related *EnergyCore) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"energy_core_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.EnergyCoreID, related.ID)
	if o.R == nil {
		o.R = &mechR{
			EnergyCore: related,
		}
	} else {
		o.R.EnergyCore = related
	}

	if related.R == nil {
		related.R = &energyCoreR{
			Mechs: MechSlice{o},
		}
	} else {
		related.R.Mechs = append(related.R.Mechs, o)
	}

	return nil
}

// RemoveEnergyCore relationship.
// Sets o.R.EnergyCore to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Mech) RemoveEnergyCore(exec boil.Executor, related *EnergyCore) error {
	var err error

	queries.SetScanner(&o.EnergyCoreID, nil)
	if _, err = o.Update(exec, boil.Whitelist("energy_core_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.EnergyCore = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Mechs {
		if queries.Equal(o.EnergyCoreID, ri.EnergyCoreID) {
			continue
		}

		ln := len(related.R.Mechs)
		if ln > 1 && i < ln-1 {
			related.R.Mechs[i] = related.R.Mechs[ln-1]
		}
		related.R.Mechs = related.R.Mechs[:ln-1]
		break
	}
	return nil
}

// SetIntroAnimation of the mech to the related item.
// Sets o.R.IntroAnimation to related.
// Adds o to related.R.IntroAnimationMechs.
func (o *Mech) SetIntroAnimation(exec boil.Executor, insert bool, related *MechAnimation) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"intro_animation_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.IntroAnimationID, related.ID)
	if o.R == nil {
		o.R = &mechR{
			IntroAnimation: related,
		}
	} else {
		o.R.IntroAnimation = related
	}

	if related.R == nil {
		related.R = &mechAnimationR{
			IntroAnimationMechs: MechSlice{o},
		}
	} else {
		related.R.IntroAnimationMechs = append(related.R.IntroAnimationMechs, o)
	}

	return nil
}

// RemoveIntroAnimation relationship.
// Sets o.R.IntroAnimation to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Mech) RemoveIntroAnimation(exec boil.Executor, related *MechAnimation) error {
	var err error

	queries.SetScanner(&o.IntroAnimationID, nil)
	if _, err = o.Update(exec, boil.Whitelist("intro_animation_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.IntroAnimation = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.IntroAnimationMechs {
		if queries.Equal(o.IntroAnimationID, ri.IntroAnimationID) {
			continue
		}

		ln := len(related.R.IntroAnimationMechs)
		if ln > 1 && i < ln-1 {
			related.R.IntroAnimationMechs[i] = related.R.IntroAnimationMechs[ln-1]
		}
		related.R.IntroAnimationMechs = related.R.IntroAnimationMechs[:ln-1]
		break
	}
	return nil
}

// SetModel of the mech to the related item.
// Sets o.R.Model to related.
// Adds o to related.R.ModelMechs.
func (o *Mech) SetModel(exec boil.Executor, insert bool, related *MechModel) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"model_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ModelID = related.ID
	if o.R == nil {
		o.R = &mechR{
			Model: related,
		}
	} else {
		o.R.Model = related
	}

	if related.R == nil {
		related.R = &mechModelR{
			ModelMechs: MechSlice{o},
		}
	} else {
		related.R.ModelMechs = append(related.R.ModelMechs, o)
	}

	return nil
}

// SetOutroAnimation of the mech to the related item.
// Sets o.R.OutroAnimation to related.
// Adds o to related.R.OutroAnimationMechs.
func (o *Mech) SetOutroAnimation(exec boil.Executor, insert bool, related *MechAnimation) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"outro_animation_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OutroAnimationID, related.ID)
	if o.R == nil {
		o.R = &mechR{
			OutroAnimation: related,
		}
	} else {
		o.R.OutroAnimation = related
	}

	if related.R == nil {
		related.R = &mechAnimationR{
			OutroAnimationMechs: MechSlice{o},
		}
	} else {
		related.R.OutroAnimationMechs = append(related.R.OutroAnimationMechs, o)
	}

	return nil
}

// RemoveOutroAnimation relationship.
// Sets o.R.OutroAnimation to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Mech) RemoveOutroAnimation(exec boil.Executor, related *MechAnimation) error {
	var err error

	queries.SetScanner(&o.OutroAnimationID, nil)
	if _, err = o.Update(exec, boil.Whitelist("outro_animation_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OutroAnimation = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OutroAnimationMechs {
		if queries.Equal(o.OutroAnimationID, ri.OutroAnimationID) {
			continue
		}

		ln := len(related.R.OutroAnimationMechs)
		if ln > 1 && i < ln-1 {
			related.R.OutroAnimationMechs[i] = related.R.OutroAnimationMechs[ln-1]
		}
		related.R.OutroAnimationMechs = related.R.OutroAnimationMechs[:ln-1]
		break
	}
	return nil
}

// SetOwner of the mech to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerMechs.
func (o *Mech) SetOwner(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerID = related.ID
	if o.R == nil {
		o.R = &mechR{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &playerR{
			OwnerMechs: MechSlice{o},
		}
	} else {
		related.R.OwnerMechs = append(related.R.OwnerMechs, o)
	}

	return nil
}

// SetBattleQueue of the mech to the related item.
// Sets o.R.BattleQueue to related.
// Adds o to related.R.Mech.
func (o *Mech) SetBattleQueue(exec boil.Executor, insert bool, related *BattleQueue) error {
	var err error

	if insert {
		related.MechID = o.ID

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"battle_queue\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
			strmangle.WhereClause("\"", "\"", 2, battleQueuePrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.MechID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.MechID = o.ID

	}

	if o.R == nil {
		o.R = &mechR{
			BattleQueue: related,
		}
	} else {
		o.R.BattleQueue = related
	}

	if related.R == nil {
		related.R = &battleQueueR{
			Mech: o,
		}
	} else {
		related.R.Mech = o
	}
	return nil
}

// SetMechStat of the mech to the related item.
// Sets o.R.MechStat to related.
// Adds o to related.R.Mech.
func (o *Mech) SetMechStat(exec boil.Executor, insert bool, related *MechStat) error {
	var err error

	if insert {
		related.MechID = o.ID

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"mech_stats\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
			strmangle.WhereClause("\"", "\"", 2, mechStatPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.MechID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.MechID = o.ID

	}

	if o.R == nil {
		o.R = &mechR{
			MechStat: related,
		}
	} else {
		o.R.MechStat = related
	}

	if related.R == nil {
		related.R = &mechStatR{
			Mech: o,
		}
	} else {
		related.R.Mech = o
	}
	return nil
}

// AddBattleContracts adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.BattleContracts.
// Sets related.R.Mech appropriately.
func (o *Mech) AddBattleContracts(exec boil.Executor, insert bool, related ...*BattleContract) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MechID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_contracts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleContractPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MechID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechR{
			BattleContracts: related,
		}
	} else {
		o.R.BattleContracts = append(o.R.BattleContracts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleContractR{
				Mech: o,
			}
		} else {
			rel.R.Mech = o
		}
	}
	return nil
}

// AddWarMachineOneBattleHistories adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.WarMachineOneBattleHistories.
// Sets related.R.WarMachineOne appropriately.
func (o *Mech) AddWarMachineOneBattleHistories(exec boil.Executor, insert bool, related ...*BattleHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.WarMachineOneID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_history\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"war_machine_one_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.WarMachineOneID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechR{
			WarMachineOneBattleHistories: related,
		}
	} else {
		o.R.WarMachineOneBattleHistories = append(o.R.WarMachineOneBattleHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleHistoryR{
				WarMachineOne: o,
			}
		} else {
			rel.R.WarMachineOne = o
		}
	}
	return nil
}

// AddWarMachineTwoBattleHistories adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.WarMachineTwoBattleHistories.
// Sets related.R.WarMachineTwo appropriately.
func (o *Mech) AddWarMachineTwoBattleHistories(exec boil.Executor, insert bool, related ...*BattleHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.WarMachineTwoID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_history\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"war_machine_two_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.WarMachineTwoID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mechR{
			WarMachineTwoBattleHistories: related,
		}
	} else {
		o.R.WarMachineTwoBattleHistories = append(o.R.WarMachineTwoBattleHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleHistoryR{
				WarMachineTwo: o,
			}
		} else {
			rel.R.WarMachineTwo = o
		}
	}
	return nil
}

// SetWarMachineTwoBattleHistories removes all previously related items of the
// mech replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.WarMachineTwo's WarMachineTwoBattleHistories accordingly.
// Replaces o.R.WarMachineTwoBattleHistories with related.
// Sets related.R.WarMachineTwo's WarMachineTwoBattleHistories accordingly.
func (o *Mech) SetWarMachineTwoBattleHistories(exec boil.Executor, insert bool, related ...*BattleHistory) error {
	query := "update \"battle_history\" set \"war_machine_two_id\" = null where \"war_machine_two_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.WarMachineTwoBattleHistories {
			queries.SetScanner(&rel.WarMachineTwoID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.WarMachineTwo = nil
		}

		o.R.WarMachineTwoBattleHistories = nil
	}
	return o.AddWarMachineTwoBattleHistories(exec, insert, related...)
}

// RemoveWarMachineTwoBattleHistories relationships from objects passed in.
// Removes related items from R.WarMachineTwoBattleHistories (uses pointer comparison, removal does not keep order)
// Sets related.R.WarMachineTwo.
func (o *Mech) RemoveWarMachineTwoBattleHistories(exec boil.Executor, related ...*BattleHistory) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.WarMachineTwoID, nil)
		if rel.R != nil {
			rel.R.WarMachineTwo = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("war_machine_two_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.WarMachineTwoBattleHistories {
			if rel != ri {
				continue
			}

			ln := len(o.R.WarMachineTwoBattleHistories)
			if ln > 1 && i < ln-1 {
				o.R.WarMachineTwoBattleHistories[i] = o.R.WarMachineTwoBattleHistories[ln-1]
			}
			o.R.WarMachineTwoBattleHistories = o.R.WarMachineTwoBattleHistories[:ln-1]
			break
		}
	}

	return nil
}

// AddBattleKills adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.BattleKills.
// Sets related.R.Mech appropriately.
func (o *Mech) AddBattleKills(exec boil.Executor, insert bool, related ...*BattleKill) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MechID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_kills\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleKillPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.BattleID, rel.MechID, rel.KilledID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MechID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechR{
			BattleKills: related,
		}
	} else {
		o.R.BattleKills = append(o.R.BattleKills, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleKillR{
				Mech: o,
			}
		} else {
			rel.R.Mech = o
		}
	}
	return nil
}

// AddKilledBattleKills adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.KilledBattleKills.
// Sets related.R.Killed appropriately.
func (o *Mech) AddKilledBattleKills(exec boil.Executor, insert bool, related ...*BattleKill) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.KilledID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_kills\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"killed_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleKillPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.BattleID, rel.MechID, rel.KilledID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.KilledID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechR{
			KilledBattleKills: related,
		}
	} else {
		o.R.KilledBattleKills = append(o.R.KilledBattleKills, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleKillR{
				Killed: o,
			}
		} else {
			rel.R.Killed = o
		}
	}
	return nil
}

// AddBattleMechs adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.BattleMechs.
// Sets related.R.Mech appropriately.
func (o *Mech) AddBattleMechs(exec boil.Executor, insert bool, related ...*BattleMech) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MechID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_mechs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleMechPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.BattleID, rel.MechID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MechID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechR{
			BattleMechs: related,
		}
	} else {
		o.R.BattleMechs = append(o.R.BattleMechs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleMechR{
				Mech: o,
			}
		} else {
			rel.R.Mech = o
		}
	}
	return nil
}

// AddKilledByBattleMechs adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.KilledByBattleMechs.
// Sets related.R.KilledBy appropriately.
func (o *Mech) AddKilledByBattleMechs(exec boil.Executor, insert bool, related ...*BattleMech) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.KilledByID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_mechs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"killed_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleMechPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.BattleID, rel.MechID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.KilledByID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mechR{
			KilledByBattleMechs: related,
		}
	} else {
		o.R.KilledByBattleMechs = append(o.R.KilledByBattleMechs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleMechR{
				KilledBy: o,
			}
		} else {
			rel.R.KilledBy = o
		}
	}
	return nil
}

// SetKilledByBattleMechs removes all previously related items of the
// mech replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.KilledBy's KilledByBattleMechs accordingly.
// Replaces o.R.KilledByBattleMechs with related.
// Sets related.R.KilledBy's KilledByBattleMechs accordingly.
func (o *Mech) SetKilledByBattleMechs(exec boil.Executor, insert bool, related ...*BattleMech) error {
	query := "update \"battle_mechs\" set \"killed_by_id\" = null where \"killed_by_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.KilledByBattleMechs {
			queries.SetScanner(&rel.KilledByID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.KilledBy = nil
		}

		o.R.KilledByBattleMechs = nil
	}
	return o.AddKilledByBattleMechs(exec, insert, related...)
}

// RemoveKilledByBattleMechs relationships from objects passed in.
// Removes related items from R.KilledByBattleMechs (uses pointer comparison, removal does not keep order)
// Sets related.R.KilledBy.
func (o *Mech) RemoveKilledByBattleMechs(exec boil.Executor, related ...*BattleMech) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.KilledByID, nil)
		if rel.R != nil {
			rel.R.KilledBy = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("killed_by_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.KilledByBattleMechs {
			if rel != ri {
				continue
			}

			ln := len(o.R.KilledByBattleMechs)
			if ln > 1 && i < ln-1 {
				o.R.KilledByBattleMechs[i] = o.R.KilledByBattleMechs[ln-1]
			}
			o.R.KilledByBattleMechs = o.R.KilledByBattleMechs[:ln-1]
			break
		}
	}

	return nil
}

// AddBattleQueueNotifications adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.BattleQueueNotifications.
// Sets related.R.Mech appropriately.
func (o *Mech) AddBattleQueueNotifications(exec boil.Executor, insert bool, related ...*BattleQueueNotification) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MechID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_queue_notifications\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleQueueNotificationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MechID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechR{
			BattleQueueNotifications: related,
		}
	} else {
		o.R.BattleQueueNotifications = append(o.R.BattleQueueNotifications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleQueueNotificationR{
				Mech: o,
			}
		} else {
			rel.R.Mech = o
		}
	}
	return nil
}

// AddBattleWins adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.BattleWins.
// Sets related.R.Mech appropriately.
func (o *Mech) AddBattleWins(exec boil.Executor, insert bool, related ...*BattleWin) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MechID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_wins\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleWinPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.BattleID, rel.MechID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MechID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechR{
			BattleWins: related,
		}
	} else {
		o.R.BattleWins = append(o.R.BattleWins, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleWinR{
				Mech: o,
			}
		} else {
			rel.R.Mech = o
		}
	}
	return nil
}

// AddEquippedOnBlueprintMechAnimations adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.EquippedOnBlueprintMechAnimations.
// Sets related.R.EquippedOnMech appropriately.
func (o *Mech) AddEquippedOnBlueprintMechAnimations(exec boil.Executor, insert bool, related ...*BlueprintMechAnimation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EquippedOn, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"blueprint_mech_animation\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"equipped_on"}),
				strmangle.WhereClause("\"", "\"", 2, blueprintMechAnimationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EquippedOn, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mechR{
			EquippedOnBlueprintMechAnimations: related,
		}
	} else {
		o.R.EquippedOnBlueprintMechAnimations = append(o.R.EquippedOnBlueprintMechAnimations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blueprintMechAnimationR{
				EquippedOnMech: o,
			}
		} else {
			rel.R.EquippedOnMech = o
		}
	}
	return nil
}

// SetEquippedOnBlueprintMechAnimations removes all previously related items of the
// mech replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.EquippedOnMech's EquippedOnBlueprintMechAnimations accordingly.
// Replaces o.R.EquippedOnBlueprintMechAnimations with related.
// Sets related.R.EquippedOnMech's EquippedOnBlueprintMechAnimations accordingly.
func (o *Mech) SetEquippedOnBlueprintMechAnimations(exec boil.Executor, insert bool, related ...*BlueprintMechAnimation) error {
	query := "update \"blueprint_mech_animation\" set \"equipped_on\" = null where \"equipped_on\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.EquippedOnBlueprintMechAnimations {
			queries.SetScanner(&rel.EquippedOn, nil)
			if rel.R == nil {
				continue
			}

			rel.R.EquippedOnMech = nil
		}

		o.R.EquippedOnBlueprintMechAnimations = nil
	}
	return o.AddEquippedOnBlueprintMechAnimations(exec, insert, related...)
}

// RemoveEquippedOnBlueprintMechAnimations relationships from objects passed in.
// Removes related items from R.EquippedOnBlueprintMechAnimations (uses pointer comparison, removal does not keep order)
// Sets related.R.EquippedOnMech.
func (o *Mech) RemoveEquippedOnBlueprintMechAnimations(exec boil.Executor, related ...*BlueprintMechAnimation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EquippedOn, nil)
		if rel.R != nil {
			rel.R.EquippedOnMech = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("equipped_on")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.EquippedOnBlueprintMechAnimations {
			if rel != ri {
				continue
			}

			ln := len(o.R.EquippedOnBlueprintMechAnimations)
			if ln > 1 && i < ln-1 {
				o.R.EquippedOnBlueprintMechAnimations[i] = o.R.EquippedOnBlueprintMechAnimations[ln-1]
			}
			o.R.EquippedOnBlueprintMechAnimations = o.R.EquippedOnBlueprintMechAnimations[:ln-1]
			break
		}
	}

	return nil
}

// AddEquippedOnEnergyCores adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.EquippedOnEnergyCores.
// Sets related.R.EquippedOnMech appropriately.
func (o *Mech) AddEquippedOnEnergyCores(exec boil.Executor, insert bool, related ...*EnergyCore) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EquippedOn, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"energy_cores\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"equipped_on"}),
				strmangle.WhereClause("\"", "\"", 2, energyCorePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EquippedOn, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mechR{
			EquippedOnEnergyCores: related,
		}
	} else {
		o.R.EquippedOnEnergyCores = append(o.R.EquippedOnEnergyCores, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &energyCoreR{
				EquippedOnMech: o,
			}
		} else {
			rel.R.EquippedOnMech = o
		}
	}
	return nil
}

// SetEquippedOnEnergyCores removes all previously related items of the
// mech replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.EquippedOnMech's EquippedOnEnergyCores accordingly.
// Replaces o.R.EquippedOnEnergyCores with related.
// Sets related.R.EquippedOnMech's EquippedOnEnergyCores accordingly.
func (o *Mech) SetEquippedOnEnergyCores(exec boil.Executor, insert bool, related ...*EnergyCore) error {
	query := "update \"energy_cores\" set \"equipped_on\" = null where \"equipped_on\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.EquippedOnEnergyCores {
			queries.SetScanner(&rel.EquippedOn, nil)
			if rel.R == nil {
				continue
			}

			rel.R.EquippedOnMech = nil
		}

		o.R.EquippedOnEnergyCores = nil
	}
	return o.AddEquippedOnEnergyCores(exec, insert, related...)
}

// RemoveEquippedOnEnergyCores relationships from objects passed in.
// Removes related items from R.EquippedOnEnergyCores (uses pointer comparison, removal does not keep order)
// Sets related.R.EquippedOnMech.
func (o *Mech) RemoveEquippedOnEnergyCores(exec boil.Executor, related ...*EnergyCore) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EquippedOn, nil)
		if rel.R != nil {
			rel.R.EquippedOnMech = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("equipped_on")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.EquippedOnEnergyCores {
			if rel != ri {
				continue
			}

			ln := len(o.R.EquippedOnEnergyCores)
			if ln > 1 && i < ln-1 {
				o.R.EquippedOnEnergyCores[i] = o.R.EquippedOnEnergyCores[ln-1]
			}
			o.R.EquippedOnEnergyCores = o.R.EquippedOnEnergyCores[:ln-1]
			break
		}
	}

	return nil
}

// AddEquippedOnMechAnimations adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.EquippedOnMechAnimations.
// Sets related.R.EquippedOnMech appropriately.
func (o *Mech) AddEquippedOnMechAnimations(exec boil.Executor, insert bool, related ...*MechAnimation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EquippedOn, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mech_animation\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"equipped_on"}),
				strmangle.WhereClause("\"", "\"", 2, mechAnimationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EquippedOn, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mechR{
			EquippedOnMechAnimations: related,
		}
	} else {
		o.R.EquippedOnMechAnimations = append(o.R.EquippedOnMechAnimations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mechAnimationR{
				EquippedOnMech: o,
			}
		} else {
			rel.R.EquippedOnMech = o
		}
	}
	return nil
}

// SetEquippedOnMechAnimations removes all previously related items of the
// mech replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.EquippedOnMech's EquippedOnMechAnimations accordingly.
// Replaces o.R.EquippedOnMechAnimations with related.
// Sets related.R.EquippedOnMech's EquippedOnMechAnimations accordingly.
func (o *Mech) SetEquippedOnMechAnimations(exec boil.Executor, insert bool, related ...*MechAnimation) error {
	query := "update \"mech_animation\" set \"equipped_on\" = null where \"equipped_on\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.EquippedOnMechAnimations {
			queries.SetScanner(&rel.EquippedOn, nil)
			if rel.R == nil {
				continue
			}

			rel.R.EquippedOnMech = nil
		}

		o.R.EquippedOnMechAnimations = nil
	}
	return o.AddEquippedOnMechAnimations(exec, insert, related...)
}

// RemoveEquippedOnMechAnimations relationships from objects passed in.
// Removes related items from R.EquippedOnMechAnimations (uses pointer comparison, removal does not keep order)
// Sets related.R.EquippedOnMech.
func (o *Mech) RemoveEquippedOnMechAnimations(exec boil.Executor, related ...*MechAnimation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EquippedOn, nil)
		if rel.R != nil {
			rel.R.EquippedOnMech = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("equipped_on")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.EquippedOnMechAnimations {
			if rel != ri {
				continue
			}

			ln := len(o.R.EquippedOnMechAnimations)
			if ln > 1 && i < ln-1 {
				o.R.EquippedOnMechAnimations[i] = o.R.EquippedOnMechAnimations[ln-1]
			}
			o.R.EquippedOnMechAnimations = o.R.EquippedOnMechAnimations[:ln-1]
			break
		}
	}

	return nil
}

// AddMechRepairs adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.MechRepairs.
// Sets related.R.Mech appropriately.
func (o *Mech) AddMechRepairs(exec boil.Executor, insert bool, related ...*MechRepair) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MechID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mech_repair\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
				strmangle.WhereClause("\"", "\"", 2, mechRepairPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MechID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechR{
			MechRepairs: related,
		}
	} else {
		o.R.MechRepairs = append(o.R.MechRepairs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mechRepairR{
				Mech: o,
			}
		} else {
			rel.R.Mech = o
		}
	}
	return nil
}

// AddEquippedOnMechSkins adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.EquippedOnMechSkins.
// Sets related.R.EquippedOnMech appropriately.
func (o *Mech) AddEquippedOnMechSkins(exec boil.Executor, insert bool, related ...*MechSkin) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EquippedOn, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mech_skin\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"equipped_on"}),
				strmangle.WhereClause("\"", "\"", 2, mechSkinPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EquippedOn, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mechR{
			EquippedOnMechSkins: related,
		}
	} else {
		o.R.EquippedOnMechSkins = append(o.R.EquippedOnMechSkins, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mechSkinR{
				EquippedOnMech: o,
			}
		} else {
			rel.R.EquippedOnMech = o
		}
	}
	return nil
}

// SetEquippedOnMechSkins removes all previously related items of the
// mech replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.EquippedOnMech's EquippedOnMechSkins accordingly.
// Replaces o.R.EquippedOnMechSkins with related.
// Sets related.R.EquippedOnMech's EquippedOnMechSkins accordingly.
func (o *Mech) SetEquippedOnMechSkins(exec boil.Executor, insert bool, related ...*MechSkin) error {
	query := "update \"mech_skin\" set \"equipped_on\" = null where \"equipped_on\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.EquippedOnMechSkins {
			queries.SetScanner(&rel.EquippedOn, nil)
			if rel.R == nil {
				continue
			}

			rel.R.EquippedOnMech = nil
		}

		o.R.EquippedOnMechSkins = nil
	}
	return o.AddEquippedOnMechSkins(exec, insert, related...)
}

// RemoveEquippedOnMechSkins relationships from objects passed in.
// Removes related items from R.EquippedOnMechSkins (uses pointer comparison, removal does not keep order)
// Sets related.R.EquippedOnMech.
func (o *Mech) RemoveEquippedOnMechSkins(exec boil.Executor, related ...*MechSkin) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EquippedOn, nil)
		if rel.R != nil {
			rel.R.EquippedOnMech = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("equipped_on")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.EquippedOnMechSkins {
			if rel != ri {
				continue
			}

			ln := len(o.R.EquippedOnMechSkins)
			if ln > 1 && i < ln-1 {
				o.R.EquippedOnMechSkins[i] = o.R.EquippedOnMechSkins[ln-1]
			}
			o.R.EquippedOnMechSkins = o.R.EquippedOnMechSkins[:ln-1]
			break
		}
	}

	return nil
}

// AddChassisMechUtilities adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.ChassisMechUtilities.
// Sets related.R.Chassis appropriately.
func (o *Mech) AddChassisMechUtilities(exec boil.Executor, insert bool, related ...*MechUtility) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChassisID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mech_utility\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"chassis_id"}),
				strmangle.WhereClause("\"", "\"", 2, mechUtilityPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChassisID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechR{
			ChassisMechUtilities: related,
		}
	} else {
		o.R.ChassisMechUtilities = append(o.R.ChassisMechUtilities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mechUtilityR{
				Chassis: o,
			}
		} else {
			rel.R.Chassis = o
		}
	}
	return nil
}

// AddChassisMechWeapons adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.ChassisMechWeapons.
// Sets related.R.Chassis appropriately.
func (o *Mech) AddChassisMechWeapons(exec boil.Executor, insert bool, related ...*MechWeapon) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChassisID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mech_weapons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"chassis_id"}),
				strmangle.WhereClause("\"", "\"", 2, mechWeaponPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChassisID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechR{
			ChassisMechWeapons: related,
		}
	} else {
		o.R.ChassisMechWeapons = append(o.R.ChassisMechWeapons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mechWeaponR{
				Chassis: o,
			}
		} else {
			rel.R.Chassis = o
		}
	}
	return nil
}

// AddEquippedOnUtilities adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.EquippedOnUtilities.
// Sets related.R.EquippedOnMech appropriately.
func (o *Mech) AddEquippedOnUtilities(exec boil.Executor, insert bool, related ...*Utility) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EquippedOn, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"utility\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"equipped_on"}),
				strmangle.WhereClause("\"", "\"", 2, utilityPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EquippedOn, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mechR{
			EquippedOnUtilities: related,
		}
	} else {
		o.R.EquippedOnUtilities = append(o.R.EquippedOnUtilities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &utilityR{
				EquippedOnMech: o,
			}
		} else {
			rel.R.EquippedOnMech = o
		}
	}
	return nil
}

// SetEquippedOnUtilities removes all previously related items of the
// mech replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.EquippedOnMech's EquippedOnUtilities accordingly.
// Replaces o.R.EquippedOnUtilities with related.
// Sets related.R.EquippedOnMech's EquippedOnUtilities accordingly.
func (o *Mech) SetEquippedOnUtilities(exec boil.Executor, insert bool, related ...*Utility) error {
	query := "update \"utility\" set \"equipped_on\" = null where \"equipped_on\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.EquippedOnUtilities {
			queries.SetScanner(&rel.EquippedOn, nil)
			if rel.R == nil {
				continue
			}

			rel.R.EquippedOnMech = nil
		}

		o.R.EquippedOnUtilities = nil
	}
	return o.AddEquippedOnUtilities(exec, insert, related...)
}

// RemoveEquippedOnUtilities relationships from objects passed in.
// Removes related items from R.EquippedOnUtilities (uses pointer comparison, removal does not keep order)
// Sets related.R.EquippedOnMech.
func (o *Mech) RemoveEquippedOnUtilities(exec boil.Executor, related ...*Utility) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EquippedOn, nil)
		if rel.R != nil {
			rel.R.EquippedOnMech = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("equipped_on")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.EquippedOnUtilities {
			if rel != ri {
				continue
			}

			ln := len(o.R.EquippedOnUtilities)
			if ln > 1 && i < ln-1 {
				o.R.EquippedOnUtilities[i] = o.R.EquippedOnUtilities[ln-1]
			}
			o.R.EquippedOnUtilities = o.R.EquippedOnUtilities[:ln-1]
			break
		}
	}

	return nil
}

// AddEquippedOnWeaponSkins adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.EquippedOnWeaponSkins.
// Sets related.R.EquippedOnMech appropriately.
func (o *Mech) AddEquippedOnWeaponSkins(exec boil.Executor, insert bool, related ...*WeaponSkin) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EquippedOn, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"weapon_skin\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"equipped_on"}),
				strmangle.WhereClause("\"", "\"", 2, weaponSkinPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EquippedOn, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mechR{
			EquippedOnWeaponSkins: related,
		}
	} else {
		o.R.EquippedOnWeaponSkins = append(o.R.EquippedOnWeaponSkins, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &weaponSkinR{
				EquippedOnMech: o,
			}
		} else {
			rel.R.EquippedOnMech = o
		}
	}
	return nil
}

// SetEquippedOnWeaponSkins removes all previously related items of the
// mech replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.EquippedOnMech's EquippedOnWeaponSkins accordingly.
// Replaces o.R.EquippedOnWeaponSkins with related.
// Sets related.R.EquippedOnMech's EquippedOnWeaponSkins accordingly.
func (o *Mech) SetEquippedOnWeaponSkins(exec boil.Executor, insert bool, related ...*WeaponSkin) error {
	query := "update \"weapon_skin\" set \"equipped_on\" = null where \"equipped_on\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.EquippedOnWeaponSkins {
			queries.SetScanner(&rel.EquippedOn, nil)
			if rel.R == nil {
				continue
			}

			rel.R.EquippedOnMech = nil
		}

		o.R.EquippedOnWeaponSkins = nil
	}
	return o.AddEquippedOnWeaponSkins(exec, insert, related...)
}

// RemoveEquippedOnWeaponSkins relationships from objects passed in.
// Removes related items from R.EquippedOnWeaponSkins (uses pointer comparison, removal does not keep order)
// Sets related.R.EquippedOnMech.
func (o *Mech) RemoveEquippedOnWeaponSkins(exec boil.Executor, related ...*WeaponSkin) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EquippedOn, nil)
		if rel.R != nil {
			rel.R.EquippedOnMech = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("equipped_on")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.EquippedOnWeaponSkins {
			if rel != ri {
				continue
			}

			ln := len(o.R.EquippedOnWeaponSkins)
			if ln > 1 && i < ln-1 {
				o.R.EquippedOnWeaponSkins[i] = o.R.EquippedOnWeaponSkins[ln-1]
			}
			o.R.EquippedOnWeaponSkins = o.R.EquippedOnWeaponSkins[:ln-1]
			break
		}
	}

	return nil
}

// Mechs retrieves all the records using an executor.
func Mechs(mods ...qm.QueryMod) mechQuery {
	mods = append(mods, qm.From("\"mechs\""), qmhelper.WhereIsNull("\"mechs\".\"deleted_at\""))
	return mechQuery{NewQuery(mods...)}
}

// FindMech retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMech(exec boil.Executor, iD string, selectCols ...string) (*Mech, error) {
	mechObj := &Mech{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mechs\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, mechObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from mechs")
	}

	if err = mechObj.doAfterSelectHooks(exec); err != nil {
		return mechObj, err
	}

	return mechObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Mech) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mechs provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mechInsertCacheMut.RLock()
	cache, cached := mechInsertCache[key]
	mechInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mechAllColumns,
			mechColumnsWithDefault,
			mechColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mechType, mechMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mechType, mechMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mechs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mechs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into mechs")
	}

	if !cached {
		mechInsertCacheMut.Lock()
		mechInsertCache[key] = cache
		mechInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Mech.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Mech) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mechUpdateCacheMut.RLock()
	cache, cached := mechUpdateCache[key]
	mechUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mechAllColumns,
			mechPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update mechs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mechs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mechPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mechType, mechMapping, append(wl, mechPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update mechs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for mechs")
	}

	if !cached {
		mechUpdateCacheMut.Lock()
		mechUpdateCache[key] = cache
		mechUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mechQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for mechs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for mechs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MechSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mechPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in mech slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all mech")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Mech) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mechs provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mechUpsertCacheMut.RLock()
	cache, cached := mechUpsertCache[key]
	mechUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mechAllColumns,
			mechColumnsWithDefault,
			mechColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mechAllColumns,
			mechPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert mechs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mechPrimaryKeyColumns))
			copy(conflict, mechPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mechs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mechType, mechMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mechType, mechMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert mechs")
	}

	if !cached {
		mechUpsertCacheMut.Lock()
		mechUpsertCache[key] = cache
		mechUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Mech record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Mech) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Mech provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mechPrimaryKeyMapping)
		sql = "DELETE FROM \"mechs\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"mechs\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(mechType, mechMapping, append(wl, mechPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from mechs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for mechs")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mechQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no mechQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mechs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mechs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MechSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mechBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"mechs\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"mechs\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, mechPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mech slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mechs")
	}

	if len(mechAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Mech) Reload(exec boil.Executor) error {
	ret, err := FindMech(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MechSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MechSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mechs\".* FROM \"mechs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in MechSlice")
	}

	*o = slice

	return nil
}

// MechExists checks if the Mech row exists.
func MechExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mechs\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if mechs exists")
	}

	return exists, nil
}
