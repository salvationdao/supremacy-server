// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Mech is an object representing the database table.
type Mech struct {
	ID                      string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	WeaponHardpointsDontUse int         `boiler:"weapon_hardpoints_dont_use" boil:"weapon_hardpoints_dont_use" json:"weapon_hardpoints_dont_use" toml:"weapon_hardpoints_dont_use" yaml:"weapon_hardpoints_dont_use"`
	UtilitySlotsDontUse     int         `boiler:"utility_slots_dont_use" boil:"utility_slots_dont_use" json:"utility_slots_dont_use" toml:"utility_slots_dont_use" yaml:"utility_slots_dont_use"`
	SpeedDontUse            int         `boiler:"speed_dont_use" boil:"speed_dont_use" json:"speed_dont_use" toml:"speed_dont_use" yaml:"speed_dont_use"`
	MaxHitpointsDontUse     int         `boiler:"max_hitpoints_dont_use" boil:"max_hitpoints_dont_use" json:"max_hitpoints_dont_use" toml:"max_hitpoints_dont_use" yaml:"max_hitpoints_dont_use"`
	DeletedAt               null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt               time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt               time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	BlueprintID             string      `boiler:"blueprint_id" boil:"blueprint_id" json:"blueprint_id" toml:"blueprint_id" yaml:"blueprint_id"`
	IsDefault               bool        `boiler:"is_default" boil:"is_default" json:"is_default" toml:"is_default" yaml:"is_default"`
	IsInsured               bool        `boiler:"is_insured" boil:"is_insured" json:"is_insured" toml:"is_insured" yaml:"is_insured"`
	Name                    string      `boiler:"name" boil:"name" json:"name" toml:"name" yaml:"name"`
	GenesisTokenID          null.Int64  `boiler:"genesis_token_id" boil:"genesis_token_id" json:"genesis_token_id,omitempty" toml:"genesis_token_id" yaml:"genesis_token_id,omitempty"`
	LimitedReleaseTokenID   null.Int64  `boiler:"limited_release_token_id" boil:"limited_release_token_id" json:"limited_release_token_id,omitempty" toml:"limited_release_token_id" yaml:"limited_release_token_id,omitempty"`
	PowerCoreSizeDontUse    string      `boiler:"power_core_size_dont_use" boil:"power_core_size_dont_use" json:"power_core_size_dont_use" toml:"power_core_size_dont_use" yaml:"power_core_size_dont_use"`
	ChassisSkinID           string      `boiler:"chassis_skin_id" boil:"chassis_skin_id" json:"chassis_skin_id" toml:"chassis_skin_id" yaml:"chassis_skin_id"`
	PowerCoreID             null.String `boiler:"power_core_id" boil:"power_core_id" json:"power_core_id,omitempty" toml:"power_core_id" yaml:"power_core_id,omitempty"`
	IntroAnimationID        null.String `boiler:"intro_animation_id" boil:"intro_animation_id" json:"intro_animation_id,omitempty" toml:"intro_animation_id" yaml:"intro_animation_id,omitempty"`
	OutroAnimationID        null.String `boiler:"outro_animation_id" boil:"outro_animation_id" json:"outro_animation_id,omitempty" toml:"outro_animation_id" yaml:"outro_animation_id,omitempty"`
	BlueprintIDOld          null.String `boiler:"blueprint_id_old" boil:"blueprint_id_old" json:"blueprint_id_old,omitempty" toml:"blueprint_id_old" yaml:"blueprint_id_old,omitempty"`

	R *mechR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L mechL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MechColumns = struct {
	ID                      string
	WeaponHardpointsDontUse string
	UtilitySlotsDontUse     string
	SpeedDontUse            string
	MaxHitpointsDontUse     string
	DeletedAt               string
	UpdatedAt               string
	CreatedAt               string
	BlueprintID             string
	IsDefault               string
	IsInsured               string
	Name                    string
	GenesisTokenID          string
	LimitedReleaseTokenID   string
	PowerCoreSizeDontUse    string
	ChassisSkinID           string
	PowerCoreID             string
	IntroAnimationID        string
	OutroAnimationID        string
	BlueprintIDOld          string
}{
	ID:                      "id",
	WeaponHardpointsDontUse: "weapon_hardpoints_dont_use",
	UtilitySlotsDontUse:     "utility_slots_dont_use",
	SpeedDontUse:            "speed_dont_use",
	MaxHitpointsDontUse:     "max_hitpoints_dont_use",
	DeletedAt:               "deleted_at",
	UpdatedAt:               "updated_at",
	CreatedAt:               "created_at",
	BlueprintID:             "blueprint_id",
	IsDefault:               "is_default",
	IsInsured:               "is_insured",
	Name:                    "name",
	GenesisTokenID:          "genesis_token_id",
	LimitedReleaseTokenID:   "limited_release_token_id",
	PowerCoreSizeDontUse:    "power_core_size_dont_use",
	ChassisSkinID:           "chassis_skin_id",
	PowerCoreID:             "power_core_id",
	IntroAnimationID:        "intro_animation_id",
	OutroAnimationID:        "outro_animation_id",
	BlueprintIDOld:          "blueprint_id_old",
}

var MechTableColumns = struct {
	ID                      string
	WeaponHardpointsDontUse string
	UtilitySlotsDontUse     string
	SpeedDontUse            string
	MaxHitpointsDontUse     string
	DeletedAt               string
	UpdatedAt               string
	CreatedAt               string
	BlueprintID             string
	IsDefault               string
	IsInsured               string
	Name                    string
	GenesisTokenID          string
	LimitedReleaseTokenID   string
	PowerCoreSizeDontUse    string
	ChassisSkinID           string
	PowerCoreID             string
	IntroAnimationID        string
	OutroAnimationID        string
	BlueprintIDOld          string
}{
	ID:                      "mechs.id",
	WeaponHardpointsDontUse: "mechs.weapon_hardpoints_dont_use",
	UtilitySlotsDontUse:     "mechs.utility_slots_dont_use",
	SpeedDontUse:            "mechs.speed_dont_use",
	MaxHitpointsDontUse:     "mechs.max_hitpoints_dont_use",
	DeletedAt:               "mechs.deleted_at",
	UpdatedAt:               "mechs.updated_at",
	CreatedAt:               "mechs.created_at",
	BlueprintID:             "mechs.blueprint_id",
	IsDefault:               "mechs.is_default",
	IsInsured:               "mechs.is_insured",
	Name:                    "mechs.name",
	GenesisTokenID:          "mechs.genesis_token_id",
	LimitedReleaseTokenID:   "mechs.limited_release_token_id",
	PowerCoreSizeDontUse:    "mechs.power_core_size_dont_use",
	ChassisSkinID:           "mechs.chassis_skin_id",
	PowerCoreID:             "mechs.power_core_id",
	IntroAnimationID:        "mechs.intro_animation_id",
	OutroAnimationID:        "mechs.outro_animation_id",
	BlueprintIDOld:          "mechs.blueprint_id_old",
}

// Generated where

var MechWhere = struct {
	ID                      whereHelperstring
	WeaponHardpointsDontUse whereHelperint
	UtilitySlotsDontUse     whereHelperint
	SpeedDontUse            whereHelperint
	MaxHitpointsDontUse     whereHelperint
	DeletedAt               whereHelpernull_Time
	UpdatedAt               whereHelpertime_Time
	CreatedAt               whereHelpertime_Time
	BlueprintID             whereHelperstring
	IsDefault               whereHelperbool
	IsInsured               whereHelperbool
	Name                    whereHelperstring
	GenesisTokenID          whereHelpernull_Int64
	LimitedReleaseTokenID   whereHelpernull_Int64
	PowerCoreSizeDontUse    whereHelperstring
	ChassisSkinID           whereHelperstring
	PowerCoreID             whereHelpernull_String
	IntroAnimationID        whereHelpernull_String
	OutroAnimationID        whereHelpernull_String
	BlueprintIDOld          whereHelpernull_String
}{
	ID:                      whereHelperstring{field: "\"mechs\".\"id\""},
	WeaponHardpointsDontUse: whereHelperint{field: "\"mechs\".\"weapon_hardpoints_dont_use\""},
	UtilitySlotsDontUse:     whereHelperint{field: "\"mechs\".\"utility_slots_dont_use\""},
	SpeedDontUse:            whereHelperint{field: "\"mechs\".\"speed_dont_use\""},
	MaxHitpointsDontUse:     whereHelperint{field: "\"mechs\".\"max_hitpoints_dont_use\""},
	DeletedAt:               whereHelpernull_Time{field: "\"mechs\".\"deleted_at\""},
	UpdatedAt:               whereHelpertime_Time{field: "\"mechs\".\"updated_at\""},
	CreatedAt:               whereHelpertime_Time{field: "\"mechs\".\"created_at\""},
	BlueprintID:             whereHelperstring{field: "\"mechs\".\"blueprint_id\""},
	IsDefault:               whereHelperbool{field: "\"mechs\".\"is_default\""},
	IsInsured:               whereHelperbool{field: "\"mechs\".\"is_insured\""},
	Name:                    whereHelperstring{field: "\"mechs\".\"name\""},
	GenesisTokenID:          whereHelpernull_Int64{field: "\"mechs\".\"genesis_token_id\""},
	LimitedReleaseTokenID:   whereHelpernull_Int64{field: "\"mechs\".\"limited_release_token_id\""},
	PowerCoreSizeDontUse:    whereHelperstring{field: "\"mechs\".\"power_core_size_dont_use\""},
	ChassisSkinID:           whereHelperstring{field: "\"mechs\".\"chassis_skin_id\""},
	PowerCoreID:             whereHelpernull_String{field: "\"mechs\".\"power_core_id\""},
	IntroAnimationID:        whereHelpernull_String{field: "\"mechs\".\"intro_animation_id\""},
	OutroAnimationID:        whereHelpernull_String{field: "\"mechs\".\"outro_animation_id\""},
	BlueprintIDOld:          whereHelpernull_String{field: "\"mechs\".\"blueprint_id_old\""},
}

// MechRels is where relationship names are stored.
var MechRels = struct {
	Blueprint                    string
	ChassisSkin                  string
	IntroAnimation               string
	OutroAnimation               string
	PowerCore                    string
	BattleQueueOld               string
	MechStat                     string
	ChassisMechsOld              string
	OnMechBattleAbilityTriggers  string
	TargetedMechBattleBounties   string
	BattleContracts              string
	WarMachineOneBattleHistories string
	WarMachineTwoBattleHistories string
	BattleKills                  string
	KilledBattleKills            string
	BattleLobbiesMechs           string
	BattleMechs                  string
	KilledByBattleMechs          string
	BattleQueueFeesOlds          string
	BattleQueueNotifications     string
	BattleWins                   string
	MechAbilityTriggerLogsOlds   string
	EquippedOnMechAnimations     string
	MechMoveCommandLogs          string
	EquippedOnMechSkins          string
	ChassisMechUtilities         string
	ChassisMechWeapons           string
	PlayerMechRepairSlots        string
	EquippedOnPowerCores         string
	RepairCases                  string
	EquippedOnUtilities          string
	EquippedOnWeapons            string
}{
	Blueprint:                    "Blueprint",
	ChassisSkin:                  "ChassisSkin",
	IntroAnimation:               "IntroAnimation",
	OutroAnimation:               "OutroAnimation",
	PowerCore:                    "PowerCore",
	BattleQueueOld:               "BattleQueueOld",
	MechStat:                     "MechStat",
	ChassisMechsOld:              "ChassisMechsOld",
	OnMechBattleAbilityTriggers:  "OnMechBattleAbilityTriggers",
	TargetedMechBattleBounties:   "TargetedMechBattleBounties",
	BattleContracts:              "BattleContracts",
	WarMachineOneBattleHistories: "WarMachineOneBattleHistories",
	WarMachineTwoBattleHistories: "WarMachineTwoBattleHistories",
	BattleKills:                  "BattleKills",
	KilledBattleKills:            "KilledBattleKills",
	BattleLobbiesMechs:           "BattleLobbiesMechs",
	BattleMechs:                  "BattleMechs",
	KilledByBattleMechs:          "KilledByBattleMechs",
	BattleQueueFeesOlds:          "BattleQueueFeesOlds",
	BattleQueueNotifications:     "BattleQueueNotifications",
	BattleWins:                   "BattleWins",
	MechAbilityTriggerLogsOlds:   "MechAbilityTriggerLogsOlds",
	EquippedOnMechAnimations:     "EquippedOnMechAnimations",
	MechMoveCommandLogs:          "MechMoveCommandLogs",
	EquippedOnMechSkins:          "EquippedOnMechSkins",
	ChassisMechUtilities:         "ChassisMechUtilities",
	ChassisMechWeapons:           "ChassisMechWeapons",
	PlayerMechRepairSlots:        "PlayerMechRepairSlots",
	EquippedOnPowerCores:         "EquippedOnPowerCores",
	RepairCases:                  "RepairCases",
	EquippedOnUtilities:          "EquippedOnUtilities",
	EquippedOnWeapons:            "EquippedOnWeapons",
}

// mechR is where relationships are stored.
type mechR struct {
	Blueprint                    *BlueprintMech                 `boiler:"Blueprint" boil:"Blueprint" json:"Blueprint" toml:"Blueprint" yaml:"Blueprint"`
	ChassisSkin                  *MechSkin                      `boiler:"ChassisSkin" boil:"ChassisSkin" json:"ChassisSkin" toml:"ChassisSkin" yaml:"ChassisSkin"`
	IntroAnimation               *MechAnimation                 `boiler:"IntroAnimation" boil:"IntroAnimation" json:"IntroAnimation" toml:"IntroAnimation" yaml:"IntroAnimation"`
	OutroAnimation               *MechAnimation                 `boiler:"OutroAnimation" boil:"OutroAnimation" json:"OutroAnimation" toml:"OutroAnimation" yaml:"OutroAnimation"`
	PowerCore                    *PowerCore                     `boiler:"PowerCore" boil:"PowerCore" json:"PowerCore" toml:"PowerCore" yaml:"PowerCore"`
	BattleQueueOld               *BattleQueueOld                `boiler:"BattleQueueOld" boil:"BattleQueueOld" json:"BattleQueueOld" toml:"BattleQueueOld" yaml:"BattleQueueOld"`
	MechStat                     *MechStat                      `boiler:"MechStat" boil:"MechStat" json:"MechStat" toml:"MechStat" yaml:"MechStat"`
	ChassisMechsOld              *MechsOld                      `boiler:"ChassisMechsOld" boil:"ChassisMechsOld" json:"ChassisMechsOld" toml:"ChassisMechsOld" yaml:"ChassisMechsOld"`
	OnMechBattleAbilityTriggers  BattleAbilityTriggerSlice      `boiler:"OnMechBattleAbilityTriggers" boil:"OnMechBattleAbilityTriggers" json:"OnMechBattleAbilityTriggers" toml:"OnMechBattleAbilityTriggers" yaml:"OnMechBattleAbilityTriggers"`
	TargetedMechBattleBounties   BattleBountySlice              `boiler:"TargetedMechBattleBounties" boil:"TargetedMechBattleBounties" json:"TargetedMechBattleBounties" toml:"TargetedMechBattleBounties" yaml:"TargetedMechBattleBounties"`
	BattleContracts              BattleContractSlice            `boiler:"BattleContracts" boil:"BattleContracts" json:"BattleContracts" toml:"BattleContracts" yaml:"BattleContracts"`
	WarMachineOneBattleHistories BattleHistorySlice             `boiler:"WarMachineOneBattleHistories" boil:"WarMachineOneBattleHistories" json:"WarMachineOneBattleHistories" toml:"WarMachineOneBattleHistories" yaml:"WarMachineOneBattleHistories"`
	WarMachineTwoBattleHistories BattleHistorySlice             `boiler:"WarMachineTwoBattleHistories" boil:"WarMachineTwoBattleHistories" json:"WarMachineTwoBattleHistories" toml:"WarMachineTwoBattleHistories" yaml:"WarMachineTwoBattleHistories"`
	BattleKills                  BattleKillSlice                `boiler:"BattleKills" boil:"BattleKills" json:"BattleKills" toml:"BattleKills" yaml:"BattleKills"`
	KilledBattleKills            BattleKillSlice                `boiler:"KilledBattleKills" boil:"KilledBattleKills" json:"KilledBattleKills" toml:"KilledBattleKills" yaml:"KilledBattleKills"`
	BattleLobbiesMechs           BattleLobbiesMechSlice         `boiler:"BattleLobbiesMechs" boil:"BattleLobbiesMechs" json:"BattleLobbiesMechs" toml:"BattleLobbiesMechs" yaml:"BattleLobbiesMechs"`
	BattleMechs                  BattleMechSlice                `boiler:"BattleMechs" boil:"BattleMechs" json:"BattleMechs" toml:"BattleMechs" yaml:"BattleMechs"`
	KilledByBattleMechs          BattleMechSlice                `boiler:"KilledByBattleMechs" boil:"KilledByBattleMechs" json:"KilledByBattleMechs" toml:"KilledByBattleMechs" yaml:"KilledByBattleMechs"`
	BattleQueueFeesOlds          BattleQueueFeesOldSlice        `boiler:"BattleQueueFeesOlds" boil:"BattleQueueFeesOlds" json:"BattleQueueFeesOlds" toml:"BattleQueueFeesOlds" yaml:"BattleQueueFeesOlds"`
	BattleQueueNotifications     BattleQueueNotificationSlice   `boiler:"BattleQueueNotifications" boil:"BattleQueueNotifications" json:"BattleQueueNotifications" toml:"BattleQueueNotifications" yaml:"BattleQueueNotifications"`
	BattleWins                   BattleWinSlice                 `boiler:"BattleWins" boil:"BattleWins" json:"BattleWins" toml:"BattleWins" yaml:"BattleWins"`
	MechAbilityTriggerLogsOlds   MechAbilityTriggerLogsOldSlice `boiler:"MechAbilityTriggerLogsOlds" boil:"MechAbilityTriggerLogsOlds" json:"MechAbilityTriggerLogsOlds" toml:"MechAbilityTriggerLogsOlds" yaml:"MechAbilityTriggerLogsOlds"`
	EquippedOnMechAnimations     MechAnimationSlice             `boiler:"EquippedOnMechAnimations" boil:"EquippedOnMechAnimations" json:"EquippedOnMechAnimations" toml:"EquippedOnMechAnimations" yaml:"EquippedOnMechAnimations"`
	MechMoveCommandLogs          MechMoveCommandLogSlice        `boiler:"MechMoveCommandLogs" boil:"MechMoveCommandLogs" json:"MechMoveCommandLogs" toml:"MechMoveCommandLogs" yaml:"MechMoveCommandLogs"`
	EquippedOnMechSkins          MechSkinSlice                  `boiler:"EquippedOnMechSkins" boil:"EquippedOnMechSkins" json:"EquippedOnMechSkins" toml:"EquippedOnMechSkins" yaml:"EquippedOnMechSkins"`
	ChassisMechUtilities         MechUtilitySlice               `boiler:"ChassisMechUtilities" boil:"ChassisMechUtilities" json:"ChassisMechUtilities" toml:"ChassisMechUtilities" yaml:"ChassisMechUtilities"`
	ChassisMechWeapons           MechWeaponSlice                `boiler:"ChassisMechWeapons" boil:"ChassisMechWeapons" json:"ChassisMechWeapons" toml:"ChassisMechWeapons" yaml:"ChassisMechWeapons"`
	PlayerMechRepairSlots        PlayerMechRepairSlotSlice      `boiler:"PlayerMechRepairSlots" boil:"PlayerMechRepairSlots" json:"PlayerMechRepairSlots" toml:"PlayerMechRepairSlots" yaml:"PlayerMechRepairSlots"`
	EquippedOnPowerCores         PowerCoreSlice                 `boiler:"EquippedOnPowerCores" boil:"EquippedOnPowerCores" json:"EquippedOnPowerCores" toml:"EquippedOnPowerCores" yaml:"EquippedOnPowerCores"`
	RepairCases                  RepairCaseSlice                `boiler:"RepairCases" boil:"RepairCases" json:"RepairCases" toml:"RepairCases" yaml:"RepairCases"`
	EquippedOnUtilities          UtilitySlice                   `boiler:"EquippedOnUtilities" boil:"EquippedOnUtilities" json:"EquippedOnUtilities" toml:"EquippedOnUtilities" yaml:"EquippedOnUtilities"`
	EquippedOnWeapons            WeaponSlice                    `boiler:"EquippedOnWeapons" boil:"EquippedOnWeapons" json:"EquippedOnWeapons" toml:"EquippedOnWeapons" yaml:"EquippedOnWeapons"`
}

// NewStruct creates a new relationship struct
func (*mechR) NewStruct() *mechR {
	return &mechR{}
}

// mechL is where Load methods for each relationship are stored.
type mechL struct{}

var (
	mechAllColumns            = []string{"id", "weapon_hardpoints_dont_use", "utility_slots_dont_use", "speed_dont_use", "max_hitpoints_dont_use", "deleted_at", "updated_at", "created_at", "blueprint_id", "is_default", "is_insured", "name", "genesis_token_id", "limited_release_token_id", "power_core_size_dont_use", "chassis_skin_id", "power_core_id", "intro_animation_id", "outro_animation_id", "blueprint_id_old"}
	mechColumnsWithoutDefault = []string{"weapon_hardpoints_dont_use", "utility_slots_dont_use", "speed_dont_use", "max_hitpoints_dont_use", "blueprint_id", "chassis_skin_id"}
	mechColumnsWithDefault    = []string{"id", "deleted_at", "updated_at", "created_at", "is_default", "is_insured", "name", "genesis_token_id", "limited_release_token_id", "power_core_size_dont_use", "power_core_id", "intro_animation_id", "outro_animation_id", "blueprint_id_old"}
	mechPrimaryKeyColumns     = []string{"id"}
	mechGeneratedColumns      = []string{}
)

type (
	// MechSlice is an alias for a slice of pointers to Mech.
	// This should almost always be used instead of []Mech.
	MechSlice []*Mech
	// MechHook is the signature for custom Mech hook methods
	MechHook func(boil.Executor, *Mech) error

	mechQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mechType                 = reflect.TypeOf(&Mech{})
	mechMapping              = queries.MakeStructMapping(mechType)
	mechPrimaryKeyMapping, _ = queries.BindMapping(mechType, mechMapping, mechPrimaryKeyColumns)
	mechInsertCacheMut       sync.RWMutex
	mechInsertCache          = make(map[string]insertCache)
	mechUpdateCacheMut       sync.RWMutex
	mechUpdateCache          = make(map[string]updateCache)
	mechUpsertCacheMut       sync.RWMutex
	mechUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mechAfterSelectHooks []MechHook

var mechBeforeInsertHooks []MechHook
var mechAfterInsertHooks []MechHook

var mechBeforeUpdateHooks []MechHook
var mechAfterUpdateHooks []MechHook

var mechBeforeDeleteHooks []MechHook
var mechAfterDeleteHooks []MechHook

var mechBeforeUpsertHooks []MechHook
var mechAfterUpsertHooks []MechHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Mech) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Mech) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Mech) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Mech) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Mech) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Mech) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Mech) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Mech) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Mech) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMechHook registers your hook function for all future operations.
func AddMechHook(hookPoint boil.HookPoint, mechHook MechHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mechAfterSelectHooks = append(mechAfterSelectHooks, mechHook)
	case boil.BeforeInsertHook:
		mechBeforeInsertHooks = append(mechBeforeInsertHooks, mechHook)
	case boil.AfterInsertHook:
		mechAfterInsertHooks = append(mechAfterInsertHooks, mechHook)
	case boil.BeforeUpdateHook:
		mechBeforeUpdateHooks = append(mechBeforeUpdateHooks, mechHook)
	case boil.AfterUpdateHook:
		mechAfterUpdateHooks = append(mechAfterUpdateHooks, mechHook)
	case boil.BeforeDeleteHook:
		mechBeforeDeleteHooks = append(mechBeforeDeleteHooks, mechHook)
	case boil.AfterDeleteHook:
		mechAfterDeleteHooks = append(mechAfterDeleteHooks, mechHook)
	case boil.BeforeUpsertHook:
		mechBeforeUpsertHooks = append(mechBeforeUpsertHooks, mechHook)
	case boil.AfterUpsertHook:
		mechAfterUpsertHooks = append(mechAfterUpsertHooks, mechHook)
	}
}

// One returns a single mech record from the query.
func (q mechQuery) One(exec boil.Executor) (*Mech, error) {
	o := &Mech{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for mechs")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Mech records from the query.
func (q mechQuery) All(exec boil.Executor) (MechSlice, error) {
	var o []*Mech

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Mech slice")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Mech records in the query.
func (q mechQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count mechs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mechQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if mechs exists")
	}

	return count > 0, nil
}

// Blueprint pointed to by the foreign key.
func (o *Mech) Blueprint(mods ...qm.QueryMod) blueprintMechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BlueprintID),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintMechs(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_mechs\"")

	return query
}

// ChassisSkin pointed to by the foreign key.
func (o *Mech) ChassisSkin(mods ...qm.QueryMod) mechSkinQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ChassisSkinID),
	}

	queryMods = append(queryMods, mods...)

	query := MechSkins(queryMods...)
	queries.SetFrom(query.Query, "\"mech_skin\"")

	return query
}

// IntroAnimation pointed to by the foreign key.
func (o *Mech) IntroAnimation(mods ...qm.QueryMod) mechAnimationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IntroAnimationID),
	}

	queryMods = append(queryMods, mods...)

	query := MechAnimations(queryMods...)
	queries.SetFrom(query.Query, "\"mech_animation\"")

	return query
}

// OutroAnimation pointed to by the foreign key.
func (o *Mech) OutroAnimation(mods ...qm.QueryMod) mechAnimationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OutroAnimationID),
	}

	queryMods = append(queryMods, mods...)

	query := MechAnimations(queryMods...)
	queries.SetFrom(query.Query, "\"mech_animation\"")

	return query
}

// PowerCore pointed to by the foreign key.
func (o *Mech) PowerCore(mods ...qm.QueryMod) powerCoreQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PowerCoreID),
	}

	queryMods = append(queryMods, mods...)

	query := PowerCores(queryMods...)
	queries.SetFrom(query.Query, "\"power_cores\"")

	return query
}

// BattleQueueOld pointed to by the foreign key.
func (o *Mech) BattleQueueOld(mods ...qm.QueryMod) battleQueueOldQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"mech_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := BattleQueueOlds(queryMods...)
	queries.SetFrom(query.Query, "\"battle_queue_old\"")

	return query
}

// MechStat pointed to by the foreign key.
func (o *Mech) MechStat(mods ...qm.QueryMod) mechStatQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"mech_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := MechStats(queryMods...)
	queries.SetFrom(query.Query, "\"mech_stats\"")

	return query
}

// ChassisMechsOld pointed to by the foreign key.
func (o *Mech) ChassisMechsOld(mods ...qm.QueryMod) mechsOldQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"chassis_id\" = ?", o.ID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := MechsOlds(queryMods...)
	queries.SetFrom(query.Query, "\"mechs_old\"")

	return query
}

// OnMechBattleAbilityTriggers retrieves all the battle_ability_trigger's BattleAbilityTriggers with an executor via on_mech_id column.
func (o *Mech) OnMechBattleAbilityTriggers(mods ...qm.QueryMod) battleAbilityTriggerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_ability_triggers\".\"on_mech_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"battle_ability_triggers\".\"deleted_at\""),
	)

	query := BattleAbilityTriggers(queryMods...)
	queries.SetFrom(query.Query, "\"battle_ability_triggers\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_ability_triggers\".*"})
	}

	return query
}

// TargetedMechBattleBounties retrieves all the battle_bounty's BattleBounties with an executor via targeted_mech_id column.
func (o *Mech) TargetedMechBattleBounties(mods ...qm.QueryMod) battleBountyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_bounties\".\"targeted_mech_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"battle_bounties\".\"deleted_at\""),
	)

	query := BattleBounties(queryMods...)
	queries.SetFrom(query.Query, "\"battle_bounties\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_bounties\".*"})
	}

	return query
}

// BattleContracts retrieves all the battle_contract's BattleContracts with an executor.
func (o *Mech) BattleContracts(mods ...qm.QueryMod) battleContractQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_contracts\".\"mech_id\"=?", o.ID),
	)

	query := BattleContracts(queryMods...)
	queries.SetFrom(query.Query, "\"battle_contracts\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_contracts\".*"})
	}

	return query
}

// WarMachineOneBattleHistories retrieves all the battle_history's BattleHistories with an executor via war_machine_one_id column.
func (o *Mech) WarMachineOneBattleHistories(mods ...qm.QueryMod) battleHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_history\".\"war_machine_one_id\"=?", o.ID),
	)

	query := BattleHistories(queryMods...)
	queries.SetFrom(query.Query, "\"battle_history\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_history\".*"})
	}

	return query
}

// WarMachineTwoBattleHistories retrieves all the battle_history's BattleHistories with an executor via war_machine_two_id column.
func (o *Mech) WarMachineTwoBattleHistories(mods ...qm.QueryMod) battleHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_history\".\"war_machine_two_id\"=?", o.ID),
	)

	query := BattleHistories(queryMods...)
	queries.SetFrom(query.Query, "\"battle_history\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_history\".*"})
	}

	return query
}

// BattleKills retrieves all the battle_kill's BattleKills with an executor.
func (o *Mech) BattleKills(mods ...qm.QueryMod) battleKillQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_kills\".\"mech_id\"=?", o.ID),
	)

	query := BattleKills(queryMods...)
	queries.SetFrom(query.Query, "\"battle_kills\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_kills\".*"})
	}

	return query
}

// KilledBattleKills retrieves all the battle_kill's BattleKills with an executor via killed_id column.
func (o *Mech) KilledBattleKills(mods ...qm.QueryMod) battleKillQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_kills\".\"killed_id\"=?", o.ID),
	)

	query := BattleKills(queryMods...)
	queries.SetFrom(query.Query, "\"battle_kills\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_kills\".*"})
	}

	return query
}

// BattleLobbiesMechs retrieves all the battle_lobbies_mech's BattleLobbiesMechs with an executor.
func (o *Mech) BattleLobbiesMechs(mods ...qm.QueryMod) battleLobbiesMechQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_lobbies_mechs\".\"mech_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"battle_lobbies_mechs\".\"deleted_at\""),
	)

	query := BattleLobbiesMechs(queryMods...)
	queries.SetFrom(query.Query, "\"battle_lobbies_mechs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_lobbies_mechs\".*"})
	}

	return query
}

// BattleMechs retrieves all the battle_mech's BattleMechs with an executor.
func (o *Mech) BattleMechs(mods ...qm.QueryMod) battleMechQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_mechs\".\"mech_id\"=?", o.ID),
	)

	query := BattleMechs(queryMods...)
	queries.SetFrom(query.Query, "\"battle_mechs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_mechs\".*"})
	}

	return query
}

// KilledByBattleMechs retrieves all the battle_mech's BattleMechs with an executor via killed_by_id column.
func (o *Mech) KilledByBattleMechs(mods ...qm.QueryMod) battleMechQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_mechs\".\"killed_by_id\"=?", o.ID),
	)

	query := BattleMechs(queryMods...)
	queries.SetFrom(query.Query, "\"battle_mechs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_mechs\".*"})
	}

	return query
}

// BattleQueueFeesOlds retrieves all the battle_queue_fees_old's BattleQueueFeesOlds with an executor.
func (o *Mech) BattleQueueFeesOlds(mods ...qm.QueryMod) battleQueueFeesOldQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_queue_fees_old\".\"mech_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"battle_queue_fees_old\".\"deleted_at\""),
	)

	query := BattleQueueFeesOlds(queryMods...)
	queries.SetFrom(query.Query, "\"battle_queue_fees_old\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_queue_fees_old\".*"})
	}

	return query
}

// BattleQueueNotifications retrieves all the battle_queue_notification's BattleQueueNotifications with an executor.
func (o *Mech) BattleQueueNotifications(mods ...qm.QueryMod) battleQueueNotificationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_queue_notifications\".\"mech_id\"=?", o.ID),
	)

	query := BattleQueueNotifications(queryMods...)
	queries.SetFrom(query.Query, "\"battle_queue_notifications\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_queue_notifications\".*"})
	}

	return query
}

// BattleWins retrieves all the battle_win's BattleWins with an executor.
func (o *Mech) BattleWins(mods ...qm.QueryMod) battleWinQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"battle_wins\".\"mech_id\"=?", o.ID),
	)

	query := BattleWins(queryMods...)
	queries.SetFrom(query.Query, "\"battle_wins\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"battle_wins\".*"})
	}

	return query
}

// MechAbilityTriggerLogsOlds retrieves all the mech_ability_trigger_logs_old's MechAbilityTriggerLogsOlds with an executor.
func (o *Mech) MechAbilityTriggerLogsOlds(mods ...qm.QueryMod) mechAbilityTriggerLogsOldQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mech_ability_trigger_logs_old\".\"mech_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"mech_ability_trigger_logs_old\".\"deleted_at\""),
	)

	query := MechAbilityTriggerLogsOlds(queryMods...)
	queries.SetFrom(query.Query, "\"mech_ability_trigger_logs_old\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mech_ability_trigger_logs_old\".*"})
	}

	return query
}

// EquippedOnMechAnimations retrieves all the mech_animation's MechAnimations with an executor via equipped_on column.
func (o *Mech) EquippedOnMechAnimations(mods ...qm.QueryMod) mechAnimationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mech_animation\".\"equipped_on\"=?", o.ID),
	)

	query := MechAnimations(queryMods...)
	queries.SetFrom(query.Query, "\"mech_animation\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mech_animation\".*"})
	}

	return query
}

// MechMoveCommandLogs retrieves all the mech_move_command_log's MechMoveCommandLogs with an executor.
func (o *Mech) MechMoveCommandLogs(mods ...qm.QueryMod) mechMoveCommandLogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mech_move_command_logs\".\"mech_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"mech_move_command_logs\".\"deleted_at\""),
	)

	query := MechMoveCommandLogs(queryMods...)
	queries.SetFrom(query.Query, "\"mech_move_command_logs\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mech_move_command_logs\".*"})
	}

	return query
}

// EquippedOnMechSkins retrieves all the mech_skin's MechSkins with an executor via equipped_on column.
func (o *Mech) EquippedOnMechSkins(mods ...qm.QueryMod) mechSkinQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mech_skin\".\"equipped_on\"=?", o.ID),
	)

	query := MechSkins(queryMods...)
	queries.SetFrom(query.Query, "\"mech_skin\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mech_skin\".*"})
	}

	return query
}

// ChassisMechUtilities retrieves all the mech_utility's MechUtilities with an executor via chassis_id column.
func (o *Mech) ChassisMechUtilities(mods ...qm.QueryMod) mechUtilityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mech_utility\".\"chassis_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"mech_utility\".\"deleted_at\""),
	)

	query := MechUtilities(queryMods...)
	queries.SetFrom(query.Query, "\"mech_utility\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mech_utility\".*"})
	}

	return query
}

// ChassisMechWeapons retrieves all the mech_weapon's MechWeapons with an executor via chassis_id column.
func (o *Mech) ChassisMechWeapons(mods ...qm.QueryMod) mechWeaponQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mech_weapons\".\"chassis_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"mech_weapons\".\"deleted_at\""),
	)

	query := MechWeapons(queryMods...)
	queries.SetFrom(query.Query, "\"mech_weapons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mech_weapons\".*"})
	}

	return query
}

// PlayerMechRepairSlots retrieves all the player_mech_repair_slot's PlayerMechRepairSlots with an executor.
func (o *Mech) PlayerMechRepairSlots(mods ...qm.QueryMod) playerMechRepairSlotQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"player_mech_repair_slots\".\"mech_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"player_mech_repair_slots\".\"deleted_at\""),
	)

	query := PlayerMechRepairSlots(queryMods...)
	queries.SetFrom(query.Query, "\"player_mech_repair_slots\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"player_mech_repair_slots\".*"})
	}

	return query
}

// EquippedOnPowerCores retrieves all the power_core's PowerCores with an executor via equipped_on column.
func (o *Mech) EquippedOnPowerCores(mods ...qm.QueryMod) powerCoreQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"power_cores\".\"equipped_on\"=?", o.ID),
	)

	query := PowerCores(queryMods...)
	queries.SetFrom(query.Query, "\"power_cores\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"power_cores\".*"})
	}

	return query
}

// RepairCases retrieves all the repair_case's RepairCases with an executor.
func (o *Mech) RepairCases(mods ...qm.QueryMod) repairCaseQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"repair_cases\".\"mech_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"repair_cases\".\"deleted_at\""),
	)

	query := RepairCases(queryMods...)
	queries.SetFrom(query.Query, "\"repair_cases\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"repair_cases\".*"})
	}

	return query
}

// EquippedOnUtilities retrieves all the utility's Utilities with an executor via equipped_on column.
func (o *Mech) EquippedOnUtilities(mods ...qm.QueryMod) utilityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"utility\".\"equipped_on\"=?", o.ID),
		qmhelper.WhereIsNull("\"utility\".\"deleted_at\""),
	)

	query := Utilities(queryMods...)
	queries.SetFrom(query.Query, "\"utility\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"utility\".*"})
	}

	return query
}

// EquippedOnWeapons retrieves all the weapon's Weapons with an executor via equipped_on column.
func (o *Mech) EquippedOnWeapons(mods ...qm.QueryMod) weaponQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"weapons\".\"equipped_on\"=?", o.ID),
		qmhelper.WhereIsNull("\"weapons\".\"deleted_at\""),
	)

	query := Weapons(queryMods...)
	queries.SetFrom(query.Query, "\"weapons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"weapons\".*"})
	}

	return query
}

// LoadBlueprint allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechL) LoadBlueprint(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.BlueprintID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.BlueprintID {
					continue Outer
				}
			}

			args = append(args, obj.BlueprintID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_mechs`),
		qm.WhereIn(`blueprint_mechs.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintMech")
	}

	var resultSlice []*BlueprintMech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintMech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_mechs")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Blueprint = foreign
		if foreign.R == nil {
			foreign.R = &blueprintMechR{}
		}
		foreign.R.BlueprintMechs = append(foreign.R.BlueprintMechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlueprintID == foreign.ID {
				local.R.Blueprint = foreign
				if foreign.R == nil {
					foreign.R = &blueprintMechR{}
				}
				foreign.R.BlueprintMechs = append(foreign.R.BlueprintMechs, local)
				break
			}
		}
	}

	return nil
}

// LoadChassisSkin allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechL) LoadChassisSkin(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ChassisSkinID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ChassisSkinID {
					continue Outer
				}
			}

			args = append(args, obj.ChassisSkinID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_skin`),
		qm.WhereIn(`mech_skin.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MechSkin")
	}

	var resultSlice []*MechSkin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MechSkin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mech_skin")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_skin")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChassisSkin = foreign
		if foreign.R == nil {
			foreign.R = &mechSkinR{}
		}
		foreign.R.ChassisSkinMechs = append(foreign.R.ChassisSkinMechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChassisSkinID == foreign.ID {
				local.R.ChassisSkin = foreign
				if foreign.R == nil {
					foreign.R = &mechSkinR{}
				}
				foreign.R.ChassisSkinMechs = append(foreign.R.ChassisSkinMechs, local)
				break
			}
		}
	}

	return nil
}

// LoadIntroAnimation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechL) LoadIntroAnimation(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		if !queries.IsNil(object.IntroAnimationID) {
			args = append(args, object.IntroAnimationID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.IntroAnimationID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.IntroAnimationID) {
				args = append(args, obj.IntroAnimationID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_animation`),
		qm.WhereIn(`mech_animation.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MechAnimation")
	}

	var resultSlice []*MechAnimation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MechAnimation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mech_animation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_animation")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IntroAnimation = foreign
		if foreign.R == nil {
			foreign.R = &mechAnimationR{}
		}
		foreign.R.IntroAnimationMechs = append(foreign.R.IntroAnimationMechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.IntroAnimationID, foreign.ID) {
				local.R.IntroAnimation = foreign
				if foreign.R == nil {
					foreign.R = &mechAnimationR{}
				}
				foreign.R.IntroAnimationMechs = append(foreign.R.IntroAnimationMechs, local)
				break
			}
		}
	}

	return nil
}

// LoadOutroAnimation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechL) LoadOutroAnimation(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		if !queries.IsNil(object.OutroAnimationID) {
			args = append(args, object.OutroAnimationID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OutroAnimationID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OutroAnimationID) {
				args = append(args, obj.OutroAnimationID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_animation`),
		qm.WhereIn(`mech_animation.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MechAnimation")
	}

	var resultSlice []*MechAnimation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MechAnimation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mech_animation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_animation")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OutroAnimation = foreign
		if foreign.R == nil {
			foreign.R = &mechAnimationR{}
		}
		foreign.R.OutroAnimationMechs = append(foreign.R.OutroAnimationMechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OutroAnimationID, foreign.ID) {
				local.R.OutroAnimation = foreign
				if foreign.R == nil {
					foreign.R = &mechAnimationR{}
				}
				foreign.R.OutroAnimationMechs = append(foreign.R.OutroAnimationMechs, local)
				break
			}
		}
	}

	return nil
}

// LoadPowerCore allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechL) LoadPowerCore(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		if !queries.IsNil(object.PowerCoreID) {
			args = append(args, object.PowerCoreID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PowerCoreID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PowerCoreID) {
				args = append(args, obj.PowerCoreID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`power_cores`),
		qm.WhereIn(`power_cores.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PowerCore")
	}

	var resultSlice []*PowerCore
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PowerCore")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for power_cores")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for power_cores")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PowerCore = foreign
		if foreign.R == nil {
			foreign.R = &powerCoreR{}
		}
		foreign.R.Mechs = append(foreign.R.Mechs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PowerCoreID, foreign.ID) {
				local.R.PowerCore = foreign
				if foreign.R == nil {
					foreign.R = &powerCoreR{}
				}
				foreign.R.Mechs = append(foreign.R.Mechs, local)
				break
			}
		}
	}

	return nil
}

// LoadBattleQueueOld allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (mechL) LoadBattleQueueOld(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_queue_old`),
		qm.WhereIn(`battle_queue_old.mech_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BattleQueueOld")
	}

	var resultSlice []*BattleQueueOld
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BattleQueueOld")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battle_queue_old")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_queue_old")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BattleQueueOld = foreign
		if foreign.R == nil {
			foreign.R = &battleQueueOldR{}
		}
		foreign.R.Mech = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.MechID {
				local.R.BattleQueueOld = foreign
				if foreign.R == nil {
					foreign.R = &battleQueueOldR{}
				}
				foreign.R.Mech = local
				break
			}
		}
	}

	return nil
}

// LoadMechStat allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (mechL) LoadMechStat(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_stats`),
		qm.WhereIn(`mech_stats.mech_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MechStat")
	}

	var resultSlice []*MechStat
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MechStat")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mech_stats")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_stats")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MechStat = foreign
		if foreign.R == nil {
			foreign.R = &mechStatR{}
		}
		foreign.R.Mech = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.MechID {
				local.R.MechStat = foreign
				if foreign.R == nil {
					foreign.R = &mechStatR{}
				}
				foreign.R.Mech = local
				break
			}
		}
	}

	return nil
}

// LoadChassisMechsOld allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (mechL) LoadChassisMechsOld(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs_old`),
		qm.WhereIn(`mechs_old.chassis_id in ?`, args...),
		qmhelper.WhereIsNull(`mechs_old.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MechsOld")
	}

	var resultSlice []*MechsOld
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MechsOld")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs_old")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs_old")
	}

	if len(mechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChassisMechsOld = foreign
		if foreign.R == nil {
			foreign.R = &mechsOldR{}
		}
		foreign.R.Chassis = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.ChassisID {
				local.R.ChassisMechsOld = foreign
				if foreign.R == nil {
					foreign.R = &mechsOldR{}
				}
				foreign.R.Chassis = local
				break
			}
		}
	}

	return nil
}

// LoadOnMechBattleAbilityTriggers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadOnMechBattleAbilityTriggers(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_ability_triggers`),
		qm.WhereIn(`battle_ability_triggers.on_mech_id in ?`, args...),
		qmhelper.WhereIsNull(`battle_ability_triggers.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_ability_triggers")
	}

	var resultSlice []*BattleAbilityTrigger
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_ability_triggers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_ability_triggers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_ability_triggers")
	}

	if len(battleAbilityTriggerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OnMechBattleAbilityTriggers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleAbilityTriggerR{}
			}
			foreign.R.OnMech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.OnMechID) {
				local.R.OnMechBattleAbilityTriggers = append(local.R.OnMechBattleAbilityTriggers, foreign)
				if foreign.R == nil {
					foreign.R = &battleAbilityTriggerR{}
				}
				foreign.R.OnMech = local
				break
			}
		}
	}

	return nil
}

// LoadTargetedMechBattleBounties allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadTargetedMechBattleBounties(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_bounties`),
		qm.WhereIn(`battle_bounties.targeted_mech_id in ?`, args...),
		qmhelper.WhereIsNull(`battle_bounties.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_bounties")
	}

	var resultSlice []*BattleBounty
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_bounties")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_bounties")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_bounties")
	}

	if len(battleBountyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TargetedMechBattleBounties = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleBountyR{}
			}
			foreign.R.TargetedMech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TargetedMechID {
				local.R.TargetedMechBattleBounties = append(local.R.TargetedMechBattleBounties, foreign)
				if foreign.R == nil {
					foreign.R = &battleBountyR{}
				}
				foreign.R.TargetedMech = local
				break
			}
		}
	}

	return nil
}

// LoadBattleContracts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadBattleContracts(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_contracts`),
		qm.WhereIn(`battle_contracts.mech_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_contracts")
	}

	var resultSlice []*BattleContract
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_contracts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_contracts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_contracts")
	}

	if len(battleContractAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleContracts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleContractR{}
			}
			foreign.R.Mech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MechID {
				local.R.BattleContracts = append(local.R.BattleContracts, foreign)
				if foreign.R == nil {
					foreign.R = &battleContractR{}
				}
				foreign.R.Mech = local
				break
			}
		}
	}

	return nil
}

// LoadWarMachineOneBattleHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadWarMachineOneBattleHistories(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_history`),
		qm.WhereIn(`battle_history.war_machine_one_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_history")
	}

	var resultSlice []*BattleHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_history")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_history")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_history")
	}

	if len(battleHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WarMachineOneBattleHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleHistoryR{}
			}
			foreign.R.WarMachineOne = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.WarMachineOneID {
				local.R.WarMachineOneBattleHistories = append(local.R.WarMachineOneBattleHistories, foreign)
				if foreign.R == nil {
					foreign.R = &battleHistoryR{}
				}
				foreign.R.WarMachineOne = local
				break
			}
		}
	}

	return nil
}

// LoadWarMachineTwoBattleHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadWarMachineTwoBattleHistories(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_history`),
		qm.WhereIn(`battle_history.war_machine_two_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_history")
	}

	var resultSlice []*BattleHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_history")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_history")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_history")
	}

	if len(battleHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WarMachineTwoBattleHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleHistoryR{}
			}
			foreign.R.WarMachineTwo = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.WarMachineTwoID) {
				local.R.WarMachineTwoBattleHistories = append(local.R.WarMachineTwoBattleHistories, foreign)
				if foreign.R == nil {
					foreign.R = &battleHistoryR{}
				}
				foreign.R.WarMachineTwo = local
				break
			}
		}
	}

	return nil
}

// LoadBattleKills allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadBattleKills(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_kills`),
		qm.WhereIn(`battle_kills.mech_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_kills")
	}

	var resultSlice []*BattleKill
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_kills")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_kills")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_kills")
	}

	if len(battleKillAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleKills = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleKillR{}
			}
			foreign.R.Mech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MechID {
				local.R.BattleKills = append(local.R.BattleKills, foreign)
				if foreign.R == nil {
					foreign.R = &battleKillR{}
				}
				foreign.R.Mech = local
				break
			}
		}
	}

	return nil
}

// LoadKilledBattleKills allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadKilledBattleKills(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_kills`),
		qm.WhereIn(`battle_kills.killed_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_kills")
	}

	var resultSlice []*BattleKill
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_kills")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_kills")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_kills")
	}

	if len(battleKillAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.KilledBattleKills = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleKillR{}
			}
			foreign.R.Killed = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.KilledID {
				local.R.KilledBattleKills = append(local.R.KilledBattleKills, foreign)
				if foreign.R == nil {
					foreign.R = &battleKillR{}
				}
				foreign.R.Killed = local
				break
			}
		}
	}

	return nil
}

// LoadBattleLobbiesMechs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadBattleLobbiesMechs(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_lobbies_mechs`),
		qm.WhereIn(`battle_lobbies_mechs.mech_id in ?`, args...),
		qmhelper.WhereIsNull(`battle_lobbies_mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_lobbies_mechs")
	}

	var resultSlice []*BattleLobbiesMech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_lobbies_mechs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_lobbies_mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_lobbies_mechs")
	}

	if len(battleLobbiesMechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleLobbiesMechs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleLobbiesMechR{}
			}
			foreign.R.Mech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MechID {
				local.R.BattleLobbiesMechs = append(local.R.BattleLobbiesMechs, foreign)
				if foreign.R == nil {
					foreign.R = &battleLobbiesMechR{}
				}
				foreign.R.Mech = local
				break
			}
		}
	}

	return nil
}

// LoadBattleMechs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadBattleMechs(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_mechs`),
		qm.WhereIn(`battle_mechs.mech_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_mechs")
	}

	var resultSlice []*BattleMech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_mechs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_mechs")
	}

	if len(battleMechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleMechs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleMechR{}
			}
			foreign.R.Mech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MechID {
				local.R.BattleMechs = append(local.R.BattleMechs, foreign)
				if foreign.R == nil {
					foreign.R = &battleMechR{}
				}
				foreign.R.Mech = local
				break
			}
		}
	}

	return nil
}

// LoadKilledByBattleMechs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadKilledByBattleMechs(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_mechs`),
		qm.WhereIn(`battle_mechs.killed_by_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_mechs")
	}

	var resultSlice []*BattleMech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_mechs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_mechs")
	}

	if len(battleMechAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.KilledByBattleMechs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleMechR{}
			}
			foreign.R.KilledBy = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.KilledByID) {
				local.R.KilledByBattleMechs = append(local.R.KilledByBattleMechs, foreign)
				if foreign.R == nil {
					foreign.R = &battleMechR{}
				}
				foreign.R.KilledBy = local
				break
			}
		}
	}

	return nil
}

// LoadBattleQueueFeesOlds allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadBattleQueueFeesOlds(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_queue_fees_old`),
		qm.WhereIn(`battle_queue_fees_old.mech_id in ?`, args...),
		qmhelper.WhereIsNull(`battle_queue_fees_old.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_queue_fees_old")
	}

	var resultSlice []*BattleQueueFeesOld
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_queue_fees_old")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_queue_fees_old")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_queue_fees_old")
	}

	if len(battleQueueFeesOldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleQueueFeesOlds = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleQueueFeesOldR{}
			}
			foreign.R.Mech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MechID {
				local.R.BattleQueueFeesOlds = append(local.R.BattleQueueFeesOlds, foreign)
				if foreign.R == nil {
					foreign.R = &battleQueueFeesOldR{}
				}
				foreign.R.Mech = local
				break
			}
		}
	}

	return nil
}

// LoadBattleQueueNotifications allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadBattleQueueNotifications(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_queue_notifications`),
		qm.WhereIn(`battle_queue_notifications.mech_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_queue_notifications")
	}

	var resultSlice []*BattleQueueNotification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_queue_notifications")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_queue_notifications")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_queue_notifications")
	}

	if len(battleQueueNotificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleQueueNotifications = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleQueueNotificationR{}
			}
			foreign.R.Mech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MechID {
				local.R.BattleQueueNotifications = append(local.R.BattleQueueNotifications, foreign)
				if foreign.R == nil {
					foreign.R = &battleQueueNotificationR{}
				}
				foreign.R.Mech = local
				break
			}
		}
	}

	return nil
}

// LoadBattleWins allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadBattleWins(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_wins`),
		qm.WhereIn(`battle_wins.mech_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load battle_wins")
	}

	var resultSlice []*BattleWin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice battle_wins")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on battle_wins")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_wins")
	}

	if len(battleWinAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BattleWins = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &battleWinR{}
			}
			foreign.R.Mech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MechID {
				local.R.BattleWins = append(local.R.BattleWins, foreign)
				if foreign.R == nil {
					foreign.R = &battleWinR{}
				}
				foreign.R.Mech = local
				break
			}
		}
	}

	return nil
}

// LoadMechAbilityTriggerLogsOlds allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadMechAbilityTriggerLogsOlds(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_ability_trigger_logs_old`),
		qm.WhereIn(`mech_ability_trigger_logs_old.mech_id in ?`, args...),
		qmhelper.WhereIsNull(`mech_ability_trigger_logs_old.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mech_ability_trigger_logs_old")
	}

	var resultSlice []*MechAbilityTriggerLogsOld
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mech_ability_trigger_logs_old")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mech_ability_trigger_logs_old")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_ability_trigger_logs_old")
	}

	if len(mechAbilityTriggerLogsOldAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MechAbilityTriggerLogsOlds = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mechAbilityTriggerLogsOldR{}
			}
			foreign.R.Mech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MechID {
				local.R.MechAbilityTriggerLogsOlds = append(local.R.MechAbilityTriggerLogsOlds, foreign)
				if foreign.R == nil {
					foreign.R = &mechAbilityTriggerLogsOldR{}
				}
				foreign.R.Mech = local
				break
			}
		}
	}

	return nil
}

// LoadEquippedOnMechAnimations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadEquippedOnMechAnimations(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_animation`),
		qm.WhereIn(`mech_animation.equipped_on in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mech_animation")
	}

	var resultSlice []*MechAnimation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mech_animation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mech_animation")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_animation")
	}

	if len(mechAnimationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EquippedOnMechAnimations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mechAnimationR{}
			}
			foreign.R.EquippedOnMech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.EquippedOn) {
				local.R.EquippedOnMechAnimations = append(local.R.EquippedOnMechAnimations, foreign)
				if foreign.R == nil {
					foreign.R = &mechAnimationR{}
				}
				foreign.R.EquippedOnMech = local
				break
			}
		}
	}

	return nil
}

// LoadMechMoveCommandLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadMechMoveCommandLogs(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_move_command_logs`),
		qm.WhereIn(`mech_move_command_logs.mech_id in ?`, args...),
		qmhelper.WhereIsNull(`mech_move_command_logs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mech_move_command_logs")
	}

	var resultSlice []*MechMoveCommandLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mech_move_command_logs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mech_move_command_logs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_move_command_logs")
	}

	if len(mechMoveCommandLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MechMoveCommandLogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mechMoveCommandLogR{}
			}
			foreign.R.Mech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MechID {
				local.R.MechMoveCommandLogs = append(local.R.MechMoveCommandLogs, foreign)
				if foreign.R == nil {
					foreign.R = &mechMoveCommandLogR{}
				}
				foreign.R.Mech = local
				break
			}
		}
	}

	return nil
}

// LoadEquippedOnMechSkins allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadEquippedOnMechSkins(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_skin`),
		qm.WhereIn(`mech_skin.equipped_on in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mech_skin")
	}

	var resultSlice []*MechSkin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mech_skin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mech_skin")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_skin")
	}

	if len(mechSkinAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EquippedOnMechSkins = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mechSkinR{}
			}
			foreign.R.EquippedOnMech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.EquippedOn) {
				local.R.EquippedOnMechSkins = append(local.R.EquippedOnMechSkins, foreign)
				if foreign.R == nil {
					foreign.R = &mechSkinR{}
				}
				foreign.R.EquippedOnMech = local
				break
			}
		}
	}

	return nil
}

// LoadChassisMechUtilities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadChassisMechUtilities(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_utility`),
		qm.WhereIn(`mech_utility.chassis_id in ?`, args...),
		qmhelper.WhereIsNull(`mech_utility.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mech_utility")
	}

	var resultSlice []*MechUtility
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mech_utility")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mech_utility")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_utility")
	}

	if len(mechUtilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChassisMechUtilities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mechUtilityR{}
			}
			foreign.R.Chassis = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChassisID {
				local.R.ChassisMechUtilities = append(local.R.ChassisMechUtilities, foreign)
				if foreign.R == nil {
					foreign.R = &mechUtilityR{}
				}
				foreign.R.Chassis = local
				break
			}
		}
	}

	return nil
}

// LoadChassisMechWeapons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadChassisMechWeapons(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mech_weapons`),
		qm.WhereIn(`mech_weapons.chassis_id in ?`, args...),
		qmhelper.WhereIsNull(`mech_weapons.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mech_weapons")
	}

	var resultSlice []*MechWeapon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mech_weapons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mech_weapons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mech_weapons")
	}

	if len(mechWeaponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChassisMechWeapons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mechWeaponR{}
			}
			foreign.R.Chassis = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChassisID {
				local.R.ChassisMechWeapons = append(local.R.ChassisMechWeapons, foreign)
				if foreign.R == nil {
					foreign.R = &mechWeaponR{}
				}
				foreign.R.Chassis = local
				break
			}
		}
	}

	return nil
}

// LoadPlayerMechRepairSlots allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadPlayerMechRepairSlots(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`player_mech_repair_slots`),
		qm.WhereIn(`player_mech_repair_slots.mech_id in ?`, args...),
		qmhelper.WhereIsNull(`player_mech_repair_slots.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load player_mech_repair_slots")
	}

	var resultSlice []*PlayerMechRepairSlot
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice player_mech_repair_slots")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on player_mech_repair_slots")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for player_mech_repair_slots")
	}

	if len(playerMechRepairSlotAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PlayerMechRepairSlots = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playerMechRepairSlotR{}
			}
			foreign.R.Mech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MechID {
				local.R.PlayerMechRepairSlots = append(local.R.PlayerMechRepairSlots, foreign)
				if foreign.R == nil {
					foreign.R = &playerMechRepairSlotR{}
				}
				foreign.R.Mech = local
				break
			}
		}
	}

	return nil
}

// LoadEquippedOnPowerCores allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadEquippedOnPowerCores(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`power_cores`),
		qm.WhereIn(`power_cores.equipped_on in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load power_cores")
	}

	var resultSlice []*PowerCore
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice power_cores")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on power_cores")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for power_cores")
	}

	if len(powerCoreAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EquippedOnPowerCores = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &powerCoreR{}
			}
			foreign.R.EquippedOnMech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.EquippedOn) {
				local.R.EquippedOnPowerCores = append(local.R.EquippedOnPowerCores, foreign)
				if foreign.R == nil {
					foreign.R = &powerCoreR{}
				}
				foreign.R.EquippedOnMech = local
				break
			}
		}
	}

	return nil
}

// LoadRepairCases allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadRepairCases(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`repair_cases`),
		qm.WhereIn(`repair_cases.mech_id in ?`, args...),
		qmhelper.WhereIsNull(`repair_cases.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load repair_cases")
	}

	var resultSlice []*RepairCase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice repair_cases")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on repair_cases")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for repair_cases")
	}

	if len(repairCaseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RepairCases = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &repairCaseR{}
			}
			foreign.R.Mech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MechID {
				local.R.RepairCases = append(local.R.RepairCases, foreign)
				if foreign.R == nil {
					foreign.R = &repairCaseR{}
				}
				foreign.R.Mech = local
				break
			}
		}
	}

	return nil
}

// LoadEquippedOnUtilities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadEquippedOnUtilities(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`utility`),
		qm.WhereIn(`utility.equipped_on in ?`, args...),
		qmhelper.WhereIsNull(`utility.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load utility")
	}

	var resultSlice []*Utility
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice utility")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on utility")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for utility")
	}

	if len(utilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EquippedOnUtilities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &utilityR{}
			}
			foreign.R.EquippedOnMech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.EquippedOn) {
				local.R.EquippedOnUtilities = append(local.R.EquippedOnUtilities, foreign)
				if foreign.R == nil {
					foreign.R = &utilityR{}
				}
				foreign.R.EquippedOnMech = local
				break
			}
		}
	}

	return nil
}

// LoadEquippedOnWeapons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mechL) LoadEquippedOnWeapons(e boil.Executor, singular bool, maybeMech interface{}, mods queries.Applicator) error {
	var slice []*Mech
	var object *Mech

	if singular {
		object = maybeMech.(*Mech)
	} else {
		slice = *maybeMech.(*[]*Mech)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`weapons`),
		qm.WhereIn(`weapons.equipped_on in ?`, args...),
		qmhelper.WhereIsNull(`weapons.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load weapons")
	}

	var resultSlice []*Weapon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice weapons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on weapons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for weapons")
	}

	if len(weaponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EquippedOnWeapons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &weaponR{}
			}
			foreign.R.EquippedOnMech = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.EquippedOn) {
				local.R.EquippedOnWeapons = append(local.R.EquippedOnWeapons, foreign)
				if foreign.R == nil {
					foreign.R = &weaponR{}
				}
				foreign.R.EquippedOnMech = local
				break
			}
		}
	}

	return nil
}

// SetBlueprint of the mech to the related item.
// Sets o.R.Blueprint to related.
// Adds o to related.R.BlueprintMechs.
func (o *Mech) SetBlueprint(exec boil.Executor, insert bool, related *BlueprintMech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlueprintID = related.ID
	if o.R == nil {
		o.R = &mechR{
			Blueprint: related,
		}
	} else {
		o.R.Blueprint = related
	}

	if related.R == nil {
		related.R = &blueprintMechR{
			BlueprintMechs: MechSlice{o},
		}
	} else {
		related.R.BlueprintMechs = append(related.R.BlueprintMechs, o)
	}

	return nil
}

// SetChassisSkin of the mech to the related item.
// Sets o.R.ChassisSkin to related.
// Adds o to related.R.ChassisSkinMechs.
func (o *Mech) SetChassisSkin(exec boil.Executor, insert bool, related *MechSkin) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"chassis_skin_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChassisSkinID = related.ID
	if o.R == nil {
		o.R = &mechR{
			ChassisSkin: related,
		}
	} else {
		o.R.ChassisSkin = related
	}

	if related.R == nil {
		related.R = &mechSkinR{
			ChassisSkinMechs: MechSlice{o},
		}
	} else {
		related.R.ChassisSkinMechs = append(related.R.ChassisSkinMechs, o)
	}

	return nil
}

// SetIntroAnimation of the mech to the related item.
// Sets o.R.IntroAnimation to related.
// Adds o to related.R.IntroAnimationMechs.
func (o *Mech) SetIntroAnimation(exec boil.Executor, insert bool, related *MechAnimation) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"intro_animation_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.IntroAnimationID, related.ID)
	if o.R == nil {
		o.R = &mechR{
			IntroAnimation: related,
		}
	} else {
		o.R.IntroAnimation = related
	}

	if related.R == nil {
		related.R = &mechAnimationR{
			IntroAnimationMechs: MechSlice{o},
		}
	} else {
		related.R.IntroAnimationMechs = append(related.R.IntroAnimationMechs, o)
	}

	return nil
}

// RemoveIntroAnimation relationship.
// Sets o.R.IntroAnimation to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Mech) RemoveIntroAnimation(exec boil.Executor, related *MechAnimation) error {
	var err error

	queries.SetScanner(&o.IntroAnimationID, nil)
	if _, err = o.Update(exec, boil.Whitelist("intro_animation_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.IntroAnimation = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.IntroAnimationMechs {
		if queries.Equal(o.IntroAnimationID, ri.IntroAnimationID) {
			continue
		}

		ln := len(related.R.IntroAnimationMechs)
		if ln > 1 && i < ln-1 {
			related.R.IntroAnimationMechs[i] = related.R.IntroAnimationMechs[ln-1]
		}
		related.R.IntroAnimationMechs = related.R.IntroAnimationMechs[:ln-1]
		break
	}
	return nil
}

// SetOutroAnimation of the mech to the related item.
// Sets o.R.OutroAnimation to related.
// Adds o to related.R.OutroAnimationMechs.
func (o *Mech) SetOutroAnimation(exec boil.Executor, insert bool, related *MechAnimation) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"outro_animation_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OutroAnimationID, related.ID)
	if o.R == nil {
		o.R = &mechR{
			OutroAnimation: related,
		}
	} else {
		o.R.OutroAnimation = related
	}

	if related.R == nil {
		related.R = &mechAnimationR{
			OutroAnimationMechs: MechSlice{o},
		}
	} else {
		related.R.OutroAnimationMechs = append(related.R.OutroAnimationMechs, o)
	}

	return nil
}

// RemoveOutroAnimation relationship.
// Sets o.R.OutroAnimation to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Mech) RemoveOutroAnimation(exec boil.Executor, related *MechAnimation) error {
	var err error

	queries.SetScanner(&o.OutroAnimationID, nil)
	if _, err = o.Update(exec, boil.Whitelist("outro_animation_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OutroAnimation = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OutroAnimationMechs {
		if queries.Equal(o.OutroAnimationID, ri.OutroAnimationID) {
			continue
		}

		ln := len(related.R.OutroAnimationMechs)
		if ln > 1 && i < ln-1 {
			related.R.OutroAnimationMechs[i] = related.R.OutroAnimationMechs[ln-1]
		}
		related.R.OutroAnimationMechs = related.R.OutroAnimationMechs[:ln-1]
		break
	}
	return nil
}

// SetPowerCore of the mech to the related item.
// Sets o.R.PowerCore to related.
// Adds o to related.R.Mechs.
func (o *Mech) SetPowerCore(exec boil.Executor, insert bool, related *PowerCore) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"power_core_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PowerCoreID, related.ID)
	if o.R == nil {
		o.R = &mechR{
			PowerCore: related,
		}
	} else {
		o.R.PowerCore = related
	}

	if related.R == nil {
		related.R = &powerCoreR{
			Mechs: MechSlice{o},
		}
	} else {
		related.R.Mechs = append(related.R.Mechs, o)
	}

	return nil
}

// RemovePowerCore relationship.
// Sets o.R.PowerCore to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Mech) RemovePowerCore(exec boil.Executor, related *PowerCore) error {
	var err error

	queries.SetScanner(&o.PowerCoreID, nil)
	if _, err = o.Update(exec, boil.Whitelist("power_core_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PowerCore = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Mechs {
		if queries.Equal(o.PowerCoreID, ri.PowerCoreID) {
			continue
		}

		ln := len(related.R.Mechs)
		if ln > 1 && i < ln-1 {
			related.R.Mechs[i] = related.R.Mechs[ln-1]
		}
		related.R.Mechs = related.R.Mechs[:ln-1]
		break
	}
	return nil
}

// SetBattleQueueOld of the mech to the related item.
// Sets o.R.BattleQueueOld to related.
// Adds o to related.R.Mech.
func (o *Mech) SetBattleQueueOld(exec boil.Executor, insert bool, related *BattleQueueOld) error {
	var err error

	if insert {
		related.MechID = o.ID

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"battle_queue_old\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
			strmangle.WhereClause("\"", "\"", 2, battleQueueOldPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.MechID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.MechID = o.ID

	}

	if o.R == nil {
		o.R = &mechR{
			BattleQueueOld: related,
		}
	} else {
		o.R.BattleQueueOld = related
	}

	if related.R == nil {
		related.R = &battleQueueOldR{
			Mech: o,
		}
	} else {
		related.R.Mech = o
	}
	return nil
}

// SetMechStat of the mech to the related item.
// Sets o.R.MechStat to related.
// Adds o to related.R.Mech.
func (o *Mech) SetMechStat(exec boil.Executor, insert bool, related *MechStat) error {
	var err error

	if insert {
		related.MechID = o.ID

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"mech_stats\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
			strmangle.WhereClause("\"", "\"", 2, mechStatPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.MechID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.MechID = o.ID

	}

	if o.R == nil {
		o.R = &mechR{
			MechStat: related,
		}
	} else {
		o.R.MechStat = related
	}

	if related.R == nil {
		related.R = &mechStatR{
			Mech: o,
		}
	} else {
		related.R.Mech = o
	}
	return nil
}

// SetChassisMechsOld of the mech to the related item.
// Sets o.R.ChassisMechsOld to related.
// Adds o to related.R.Chassis.
func (o *Mech) SetChassisMechsOld(exec boil.Executor, insert bool, related *MechsOld) error {
	var err error

	if insert {
		related.ChassisID = o.ID

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"mechs_old\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"chassis_id"}),
			strmangle.WhereClause("\"", "\"", 2, mechsOldPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}
		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ChassisID = o.ID

	}

	if o.R == nil {
		o.R = &mechR{
			ChassisMechsOld: related,
		}
	} else {
		o.R.ChassisMechsOld = related
	}

	if related.R == nil {
		related.R = &mechsOldR{
			Chassis: o,
		}
	} else {
		related.R.Chassis = o
	}
	return nil
}

// AddOnMechBattleAbilityTriggers adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.OnMechBattleAbilityTriggers.
// Sets related.R.OnMech appropriately.
func (o *Mech) AddOnMechBattleAbilityTriggers(exec boil.Executor, insert bool, related ...*BattleAbilityTrigger) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OnMechID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_ability_triggers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"on_mech_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleAbilityTriggerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OnMechID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mechR{
			OnMechBattleAbilityTriggers: related,
		}
	} else {
		o.R.OnMechBattleAbilityTriggers = append(o.R.OnMechBattleAbilityTriggers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleAbilityTriggerR{
				OnMech: o,
			}
		} else {
			rel.R.OnMech = o
		}
	}
	return nil
}

// SetOnMechBattleAbilityTriggers removes all previously related items of the
// mech replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OnMech's OnMechBattleAbilityTriggers accordingly.
// Replaces o.R.OnMechBattleAbilityTriggers with related.
// Sets related.R.OnMech's OnMechBattleAbilityTriggers accordingly.
func (o *Mech) SetOnMechBattleAbilityTriggers(exec boil.Executor, insert bool, related ...*BattleAbilityTrigger) error {
	query := "update \"battle_ability_triggers\" set \"on_mech_id\" = null where \"on_mech_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OnMechBattleAbilityTriggers {
			queries.SetScanner(&rel.OnMechID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OnMech = nil
		}

		o.R.OnMechBattleAbilityTriggers = nil
	}
	return o.AddOnMechBattleAbilityTriggers(exec, insert, related...)
}

// RemoveOnMechBattleAbilityTriggers relationships from objects passed in.
// Removes related items from R.OnMechBattleAbilityTriggers (uses pointer comparison, removal does not keep order)
// Sets related.R.OnMech.
func (o *Mech) RemoveOnMechBattleAbilityTriggers(exec boil.Executor, related ...*BattleAbilityTrigger) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OnMechID, nil)
		if rel.R != nil {
			rel.R.OnMech = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("on_mech_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OnMechBattleAbilityTriggers {
			if rel != ri {
				continue
			}

			ln := len(o.R.OnMechBattleAbilityTriggers)
			if ln > 1 && i < ln-1 {
				o.R.OnMechBattleAbilityTriggers[i] = o.R.OnMechBattleAbilityTriggers[ln-1]
			}
			o.R.OnMechBattleAbilityTriggers = o.R.OnMechBattleAbilityTriggers[:ln-1]
			break
		}
	}

	return nil
}

// AddTargetedMechBattleBounties adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.TargetedMechBattleBounties.
// Sets related.R.TargetedMech appropriately.
func (o *Mech) AddTargetedMechBattleBounties(exec boil.Executor, insert bool, related ...*BattleBounty) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TargetedMechID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_bounties\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"targeted_mech_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleBountyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TargetedMechID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechR{
			TargetedMechBattleBounties: related,
		}
	} else {
		o.R.TargetedMechBattleBounties = append(o.R.TargetedMechBattleBounties, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleBountyR{
				TargetedMech: o,
			}
		} else {
			rel.R.TargetedMech = o
		}
	}
	return nil
}

// AddBattleContracts adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.BattleContracts.
// Sets related.R.Mech appropriately.
func (o *Mech) AddBattleContracts(exec boil.Executor, insert bool, related ...*BattleContract) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MechID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_contracts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleContractPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MechID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechR{
			BattleContracts: related,
		}
	} else {
		o.R.BattleContracts = append(o.R.BattleContracts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleContractR{
				Mech: o,
			}
		} else {
			rel.R.Mech = o
		}
	}
	return nil
}

// AddWarMachineOneBattleHistories adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.WarMachineOneBattleHistories.
// Sets related.R.WarMachineOne appropriately.
func (o *Mech) AddWarMachineOneBattleHistories(exec boil.Executor, insert bool, related ...*BattleHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.WarMachineOneID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_history\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"war_machine_one_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.WarMachineOneID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechR{
			WarMachineOneBattleHistories: related,
		}
	} else {
		o.R.WarMachineOneBattleHistories = append(o.R.WarMachineOneBattleHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleHistoryR{
				WarMachineOne: o,
			}
		} else {
			rel.R.WarMachineOne = o
		}
	}
	return nil
}

// AddWarMachineTwoBattleHistories adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.WarMachineTwoBattleHistories.
// Sets related.R.WarMachineTwo appropriately.
func (o *Mech) AddWarMachineTwoBattleHistories(exec boil.Executor, insert bool, related ...*BattleHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.WarMachineTwoID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_history\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"war_machine_two_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.WarMachineTwoID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mechR{
			WarMachineTwoBattleHistories: related,
		}
	} else {
		o.R.WarMachineTwoBattleHistories = append(o.R.WarMachineTwoBattleHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleHistoryR{
				WarMachineTwo: o,
			}
		} else {
			rel.R.WarMachineTwo = o
		}
	}
	return nil
}

// SetWarMachineTwoBattleHistories removes all previously related items of the
// mech replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.WarMachineTwo's WarMachineTwoBattleHistories accordingly.
// Replaces o.R.WarMachineTwoBattleHistories with related.
// Sets related.R.WarMachineTwo's WarMachineTwoBattleHistories accordingly.
func (o *Mech) SetWarMachineTwoBattleHistories(exec boil.Executor, insert bool, related ...*BattleHistory) error {
	query := "update \"battle_history\" set \"war_machine_two_id\" = null where \"war_machine_two_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.WarMachineTwoBattleHistories {
			queries.SetScanner(&rel.WarMachineTwoID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.WarMachineTwo = nil
		}

		o.R.WarMachineTwoBattleHistories = nil
	}
	return o.AddWarMachineTwoBattleHistories(exec, insert, related...)
}

// RemoveWarMachineTwoBattleHistories relationships from objects passed in.
// Removes related items from R.WarMachineTwoBattleHistories (uses pointer comparison, removal does not keep order)
// Sets related.R.WarMachineTwo.
func (o *Mech) RemoveWarMachineTwoBattleHistories(exec boil.Executor, related ...*BattleHistory) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.WarMachineTwoID, nil)
		if rel.R != nil {
			rel.R.WarMachineTwo = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("war_machine_two_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.WarMachineTwoBattleHistories {
			if rel != ri {
				continue
			}

			ln := len(o.R.WarMachineTwoBattleHistories)
			if ln > 1 && i < ln-1 {
				o.R.WarMachineTwoBattleHistories[i] = o.R.WarMachineTwoBattleHistories[ln-1]
			}
			o.R.WarMachineTwoBattleHistories = o.R.WarMachineTwoBattleHistories[:ln-1]
			break
		}
	}

	return nil
}

// AddBattleKills adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.BattleKills.
// Sets related.R.Mech appropriately.
func (o *Mech) AddBattleKills(exec boil.Executor, insert bool, related ...*BattleKill) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MechID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_kills\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleKillPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.BattleID, rel.MechID, rel.KilledID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MechID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechR{
			BattleKills: related,
		}
	} else {
		o.R.BattleKills = append(o.R.BattleKills, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleKillR{
				Mech: o,
			}
		} else {
			rel.R.Mech = o
		}
	}
	return nil
}

// AddKilledBattleKills adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.KilledBattleKills.
// Sets related.R.Killed appropriately.
func (o *Mech) AddKilledBattleKills(exec boil.Executor, insert bool, related ...*BattleKill) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.KilledID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_kills\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"killed_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleKillPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.BattleID, rel.MechID, rel.KilledID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.KilledID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechR{
			KilledBattleKills: related,
		}
	} else {
		o.R.KilledBattleKills = append(o.R.KilledBattleKills, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleKillR{
				Killed: o,
			}
		} else {
			rel.R.Killed = o
		}
	}
	return nil
}

// AddBattleLobbiesMechs adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.BattleLobbiesMechs.
// Sets related.R.Mech appropriately.
func (o *Mech) AddBattleLobbiesMechs(exec boil.Executor, insert bool, related ...*BattleLobbiesMech) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MechID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_lobbies_mechs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleLobbiesMechPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.BattleLobbyID, rel.MechID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MechID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechR{
			BattleLobbiesMechs: related,
		}
	} else {
		o.R.BattleLobbiesMechs = append(o.R.BattleLobbiesMechs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleLobbiesMechR{
				Mech: o,
			}
		} else {
			rel.R.Mech = o
		}
	}
	return nil
}

// AddBattleMechs adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.BattleMechs.
// Sets related.R.Mech appropriately.
func (o *Mech) AddBattleMechs(exec boil.Executor, insert bool, related ...*BattleMech) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MechID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_mechs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleMechPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.BattleID, rel.MechID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MechID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechR{
			BattleMechs: related,
		}
	} else {
		o.R.BattleMechs = append(o.R.BattleMechs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleMechR{
				Mech: o,
			}
		} else {
			rel.R.Mech = o
		}
	}
	return nil
}

// AddKilledByBattleMechs adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.KilledByBattleMechs.
// Sets related.R.KilledBy appropriately.
func (o *Mech) AddKilledByBattleMechs(exec boil.Executor, insert bool, related ...*BattleMech) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.KilledByID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_mechs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"killed_by_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleMechPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.BattleID, rel.MechID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.KilledByID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mechR{
			KilledByBattleMechs: related,
		}
	} else {
		o.R.KilledByBattleMechs = append(o.R.KilledByBattleMechs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleMechR{
				KilledBy: o,
			}
		} else {
			rel.R.KilledBy = o
		}
	}
	return nil
}

// SetKilledByBattleMechs removes all previously related items of the
// mech replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.KilledBy's KilledByBattleMechs accordingly.
// Replaces o.R.KilledByBattleMechs with related.
// Sets related.R.KilledBy's KilledByBattleMechs accordingly.
func (o *Mech) SetKilledByBattleMechs(exec boil.Executor, insert bool, related ...*BattleMech) error {
	query := "update \"battle_mechs\" set \"killed_by_id\" = null where \"killed_by_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.KilledByBattleMechs {
			queries.SetScanner(&rel.KilledByID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.KilledBy = nil
		}

		o.R.KilledByBattleMechs = nil
	}
	return o.AddKilledByBattleMechs(exec, insert, related...)
}

// RemoveKilledByBattleMechs relationships from objects passed in.
// Removes related items from R.KilledByBattleMechs (uses pointer comparison, removal does not keep order)
// Sets related.R.KilledBy.
func (o *Mech) RemoveKilledByBattleMechs(exec boil.Executor, related ...*BattleMech) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.KilledByID, nil)
		if rel.R != nil {
			rel.R.KilledBy = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("killed_by_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.KilledByBattleMechs {
			if rel != ri {
				continue
			}

			ln := len(o.R.KilledByBattleMechs)
			if ln > 1 && i < ln-1 {
				o.R.KilledByBattleMechs[i] = o.R.KilledByBattleMechs[ln-1]
			}
			o.R.KilledByBattleMechs = o.R.KilledByBattleMechs[:ln-1]
			break
		}
	}

	return nil
}

// AddBattleQueueFeesOlds adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.BattleQueueFeesOlds.
// Sets related.R.Mech appropriately.
func (o *Mech) AddBattleQueueFeesOlds(exec boil.Executor, insert bool, related ...*BattleQueueFeesOld) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MechID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_queue_fees_old\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleQueueFeesOldPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MechID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechR{
			BattleQueueFeesOlds: related,
		}
	} else {
		o.R.BattleQueueFeesOlds = append(o.R.BattleQueueFeesOlds, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleQueueFeesOldR{
				Mech: o,
			}
		} else {
			rel.R.Mech = o
		}
	}
	return nil
}

// AddBattleQueueNotifications adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.BattleQueueNotifications.
// Sets related.R.Mech appropriately.
func (o *Mech) AddBattleQueueNotifications(exec boil.Executor, insert bool, related ...*BattleQueueNotification) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MechID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_queue_notifications\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleQueueNotificationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MechID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechR{
			BattleQueueNotifications: related,
		}
	} else {
		o.R.BattleQueueNotifications = append(o.R.BattleQueueNotifications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleQueueNotificationR{
				Mech: o,
			}
		} else {
			rel.R.Mech = o
		}
	}
	return nil
}

// AddBattleWins adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.BattleWins.
// Sets related.R.Mech appropriately.
func (o *Mech) AddBattleWins(exec boil.Executor, insert bool, related ...*BattleWin) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MechID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"battle_wins\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
				strmangle.WhereClause("\"", "\"", 2, battleWinPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.BattleID, rel.MechID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MechID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechR{
			BattleWins: related,
		}
	} else {
		o.R.BattleWins = append(o.R.BattleWins, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &battleWinR{
				Mech: o,
			}
		} else {
			rel.R.Mech = o
		}
	}
	return nil
}

// AddMechAbilityTriggerLogsOlds adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.MechAbilityTriggerLogsOlds.
// Sets related.R.Mech appropriately.
func (o *Mech) AddMechAbilityTriggerLogsOlds(exec boil.Executor, insert bool, related ...*MechAbilityTriggerLogsOld) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MechID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mech_ability_trigger_logs_old\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
				strmangle.WhereClause("\"", "\"", 2, mechAbilityTriggerLogsOldPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MechID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechR{
			MechAbilityTriggerLogsOlds: related,
		}
	} else {
		o.R.MechAbilityTriggerLogsOlds = append(o.R.MechAbilityTriggerLogsOlds, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mechAbilityTriggerLogsOldR{
				Mech: o,
			}
		} else {
			rel.R.Mech = o
		}
	}
	return nil
}

// AddEquippedOnMechAnimations adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.EquippedOnMechAnimations.
// Sets related.R.EquippedOnMech appropriately.
func (o *Mech) AddEquippedOnMechAnimations(exec boil.Executor, insert bool, related ...*MechAnimation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EquippedOn, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mech_animation\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"equipped_on"}),
				strmangle.WhereClause("\"", "\"", 2, mechAnimationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EquippedOn, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mechR{
			EquippedOnMechAnimations: related,
		}
	} else {
		o.R.EquippedOnMechAnimations = append(o.R.EquippedOnMechAnimations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mechAnimationR{
				EquippedOnMech: o,
			}
		} else {
			rel.R.EquippedOnMech = o
		}
	}
	return nil
}

// SetEquippedOnMechAnimations removes all previously related items of the
// mech replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.EquippedOnMech's EquippedOnMechAnimations accordingly.
// Replaces o.R.EquippedOnMechAnimations with related.
// Sets related.R.EquippedOnMech's EquippedOnMechAnimations accordingly.
func (o *Mech) SetEquippedOnMechAnimations(exec boil.Executor, insert bool, related ...*MechAnimation) error {
	query := "update \"mech_animation\" set \"equipped_on\" = null where \"equipped_on\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.EquippedOnMechAnimations {
			queries.SetScanner(&rel.EquippedOn, nil)
			if rel.R == nil {
				continue
			}

			rel.R.EquippedOnMech = nil
		}

		o.R.EquippedOnMechAnimations = nil
	}
	return o.AddEquippedOnMechAnimations(exec, insert, related...)
}

// RemoveEquippedOnMechAnimations relationships from objects passed in.
// Removes related items from R.EquippedOnMechAnimations (uses pointer comparison, removal does not keep order)
// Sets related.R.EquippedOnMech.
func (o *Mech) RemoveEquippedOnMechAnimations(exec boil.Executor, related ...*MechAnimation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EquippedOn, nil)
		if rel.R != nil {
			rel.R.EquippedOnMech = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("equipped_on")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.EquippedOnMechAnimations {
			if rel != ri {
				continue
			}

			ln := len(o.R.EquippedOnMechAnimations)
			if ln > 1 && i < ln-1 {
				o.R.EquippedOnMechAnimations[i] = o.R.EquippedOnMechAnimations[ln-1]
			}
			o.R.EquippedOnMechAnimations = o.R.EquippedOnMechAnimations[:ln-1]
			break
		}
	}

	return nil
}

// AddMechMoveCommandLogs adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.MechMoveCommandLogs.
// Sets related.R.Mech appropriately.
func (o *Mech) AddMechMoveCommandLogs(exec boil.Executor, insert bool, related ...*MechMoveCommandLog) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MechID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mech_move_command_logs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
				strmangle.WhereClause("\"", "\"", 2, mechMoveCommandLogPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MechID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechR{
			MechMoveCommandLogs: related,
		}
	} else {
		o.R.MechMoveCommandLogs = append(o.R.MechMoveCommandLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mechMoveCommandLogR{
				Mech: o,
			}
		} else {
			rel.R.Mech = o
		}
	}
	return nil
}

// AddEquippedOnMechSkins adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.EquippedOnMechSkins.
// Sets related.R.EquippedOnMech appropriately.
func (o *Mech) AddEquippedOnMechSkins(exec boil.Executor, insert bool, related ...*MechSkin) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EquippedOn, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mech_skin\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"equipped_on"}),
				strmangle.WhereClause("\"", "\"", 2, mechSkinPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EquippedOn, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mechR{
			EquippedOnMechSkins: related,
		}
	} else {
		o.R.EquippedOnMechSkins = append(o.R.EquippedOnMechSkins, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mechSkinR{
				EquippedOnMech: o,
			}
		} else {
			rel.R.EquippedOnMech = o
		}
	}
	return nil
}

// SetEquippedOnMechSkins removes all previously related items of the
// mech replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.EquippedOnMech's EquippedOnMechSkins accordingly.
// Replaces o.R.EquippedOnMechSkins with related.
// Sets related.R.EquippedOnMech's EquippedOnMechSkins accordingly.
func (o *Mech) SetEquippedOnMechSkins(exec boil.Executor, insert bool, related ...*MechSkin) error {
	query := "update \"mech_skin\" set \"equipped_on\" = null where \"equipped_on\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.EquippedOnMechSkins {
			queries.SetScanner(&rel.EquippedOn, nil)
			if rel.R == nil {
				continue
			}

			rel.R.EquippedOnMech = nil
		}

		o.R.EquippedOnMechSkins = nil
	}
	return o.AddEquippedOnMechSkins(exec, insert, related...)
}

// RemoveEquippedOnMechSkins relationships from objects passed in.
// Removes related items from R.EquippedOnMechSkins (uses pointer comparison, removal does not keep order)
// Sets related.R.EquippedOnMech.
func (o *Mech) RemoveEquippedOnMechSkins(exec boil.Executor, related ...*MechSkin) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EquippedOn, nil)
		if rel.R != nil {
			rel.R.EquippedOnMech = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("equipped_on")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.EquippedOnMechSkins {
			if rel != ri {
				continue
			}

			ln := len(o.R.EquippedOnMechSkins)
			if ln > 1 && i < ln-1 {
				o.R.EquippedOnMechSkins[i] = o.R.EquippedOnMechSkins[ln-1]
			}
			o.R.EquippedOnMechSkins = o.R.EquippedOnMechSkins[:ln-1]
			break
		}
	}

	return nil
}

// AddChassisMechUtilities adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.ChassisMechUtilities.
// Sets related.R.Chassis appropriately.
func (o *Mech) AddChassisMechUtilities(exec boil.Executor, insert bool, related ...*MechUtility) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChassisID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mech_utility\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"chassis_id"}),
				strmangle.WhereClause("\"", "\"", 2, mechUtilityPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChassisID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechR{
			ChassisMechUtilities: related,
		}
	} else {
		o.R.ChassisMechUtilities = append(o.R.ChassisMechUtilities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mechUtilityR{
				Chassis: o,
			}
		} else {
			rel.R.Chassis = o
		}
	}
	return nil
}

// AddChassisMechWeapons adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.ChassisMechWeapons.
// Sets related.R.Chassis appropriately.
func (o *Mech) AddChassisMechWeapons(exec boil.Executor, insert bool, related ...*MechWeapon) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChassisID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mech_weapons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"chassis_id"}),
				strmangle.WhereClause("\"", "\"", 2, mechWeaponPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChassisID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechR{
			ChassisMechWeapons: related,
		}
	} else {
		o.R.ChassisMechWeapons = append(o.R.ChassisMechWeapons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mechWeaponR{
				Chassis: o,
			}
		} else {
			rel.R.Chassis = o
		}
	}
	return nil
}

// AddPlayerMechRepairSlots adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.PlayerMechRepairSlots.
// Sets related.R.Mech appropriately.
func (o *Mech) AddPlayerMechRepairSlots(exec boil.Executor, insert bool, related ...*PlayerMechRepairSlot) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MechID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"player_mech_repair_slots\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
				strmangle.WhereClause("\"", "\"", 2, playerMechRepairSlotPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MechID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechR{
			PlayerMechRepairSlots: related,
		}
	} else {
		o.R.PlayerMechRepairSlots = append(o.R.PlayerMechRepairSlots, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playerMechRepairSlotR{
				Mech: o,
			}
		} else {
			rel.R.Mech = o
		}
	}
	return nil
}

// AddEquippedOnPowerCores adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.EquippedOnPowerCores.
// Sets related.R.EquippedOnMech appropriately.
func (o *Mech) AddEquippedOnPowerCores(exec boil.Executor, insert bool, related ...*PowerCore) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EquippedOn, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"power_cores\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"equipped_on"}),
				strmangle.WhereClause("\"", "\"", 2, powerCorePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EquippedOn, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mechR{
			EquippedOnPowerCores: related,
		}
	} else {
		o.R.EquippedOnPowerCores = append(o.R.EquippedOnPowerCores, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &powerCoreR{
				EquippedOnMech: o,
			}
		} else {
			rel.R.EquippedOnMech = o
		}
	}
	return nil
}

// SetEquippedOnPowerCores removes all previously related items of the
// mech replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.EquippedOnMech's EquippedOnPowerCores accordingly.
// Replaces o.R.EquippedOnPowerCores with related.
// Sets related.R.EquippedOnMech's EquippedOnPowerCores accordingly.
func (o *Mech) SetEquippedOnPowerCores(exec boil.Executor, insert bool, related ...*PowerCore) error {
	query := "update \"power_cores\" set \"equipped_on\" = null where \"equipped_on\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.EquippedOnPowerCores {
			queries.SetScanner(&rel.EquippedOn, nil)
			if rel.R == nil {
				continue
			}

			rel.R.EquippedOnMech = nil
		}

		o.R.EquippedOnPowerCores = nil
	}
	return o.AddEquippedOnPowerCores(exec, insert, related...)
}

// RemoveEquippedOnPowerCores relationships from objects passed in.
// Removes related items from R.EquippedOnPowerCores (uses pointer comparison, removal does not keep order)
// Sets related.R.EquippedOnMech.
func (o *Mech) RemoveEquippedOnPowerCores(exec boil.Executor, related ...*PowerCore) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EquippedOn, nil)
		if rel.R != nil {
			rel.R.EquippedOnMech = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("equipped_on")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.EquippedOnPowerCores {
			if rel != ri {
				continue
			}

			ln := len(o.R.EquippedOnPowerCores)
			if ln > 1 && i < ln-1 {
				o.R.EquippedOnPowerCores[i] = o.R.EquippedOnPowerCores[ln-1]
			}
			o.R.EquippedOnPowerCores = o.R.EquippedOnPowerCores[:ln-1]
			break
		}
	}

	return nil
}

// AddRepairCases adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.RepairCases.
// Sets related.R.Mech appropriately.
func (o *Mech) AddRepairCases(exec boil.Executor, insert bool, related ...*RepairCase) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MechID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"repair_cases\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
				strmangle.WhereClause("\"", "\"", 2, repairCasePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MechID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mechR{
			RepairCases: related,
		}
	} else {
		o.R.RepairCases = append(o.R.RepairCases, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &repairCaseR{
				Mech: o,
			}
		} else {
			rel.R.Mech = o
		}
	}
	return nil
}

// AddEquippedOnUtilities adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.EquippedOnUtilities.
// Sets related.R.EquippedOnMech appropriately.
func (o *Mech) AddEquippedOnUtilities(exec boil.Executor, insert bool, related ...*Utility) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EquippedOn, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"utility\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"equipped_on"}),
				strmangle.WhereClause("\"", "\"", 2, utilityPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EquippedOn, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mechR{
			EquippedOnUtilities: related,
		}
	} else {
		o.R.EquippedOnUtilities = append(o.R.EquippedOnUtilities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &utilityR{
				EquippedOnMech: o,
			}
		} else {
			rel.R.EquippedOnMech = o
		}
	}
	return nil
}

// SetEquippedOnUtilities removes all previously related items of the
// mech replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.EquippedOnMech's EquippedOnUtilities accordingly.
// Replaces o.R.EquippedOnUtilities with related.
// Sets related.R.EquippedOnMech's EquippedOnUtilities accordingly.
func (o *Mech) SetEquippedOnUtilities(exec boil.Executor, insert bool, related ...*Utility) error {
	query := "update \"utility\" set \"equipped_on\" = null where \"equipped_on\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.EquippedOnUtilities {
			queries.SetScanner(&rel.EquippedOn, nil)
			if rel.R == nil {
				continue
			}

			rel.R.EquippedOnMech = nil
		}

		o.R.EquippedOnUtilities = nil
	}
	return o.AddEquippedOnUtilities(exec, insert, related...)
}

// RemoveEquippedOnUtilities relationships from objects passed in.
// Removes related items from R.EquippedOnUtilities (uses pointer comparison, removal does not keep order)
// Sets related.R.EquippedOnMech.
func (o *Mech) RemoveEquippedOnUtilities(exec boil.Executor, related ...*Utility) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EquippedOn, nil)
		if rel.R != nil {
			rel.R.EquippedOnMech = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("equipped_on")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.EquippedOnUtilities {
			if rel != ri {
				continue
			}

			ln := len(o.R.EquippedOnUtilities)
			if ln > 1 && i < ln-1 {
				o.R.EquippedOnUtilities[i] = o.R.EquippedOnUtilities[ln-1]
			}
			o.R.EquippedOnUtilities = o.R.EquippedOnUtilities[:ln-1]
			break
		}
	}

	return nil
}

// AddEquippedOnWeapons adds the given related objects to the existing relationships
// of the mech, optionally inserting them as new records.
// Appends related to o.R.EquippedOnWeapons.
// Sets related.R.EquippedOnMech appropriately.
func (o *Mech) AddEquippedOnWeapons(exec boil.Executor, insert bool, related ...*Weapon) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EquippedOn, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"weapons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"equipped_on"}),
				strmangle.WhereClause("\"", "\"", 2, weaponPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EquippedOn, o.ID)
		}
	}

	if o.R == nil {
		o.R = &mechR{
			EquippedOnWeapons: related,
		}
	} else {
		o.R.EquippedOnWeapons = append(o.R.EquippedOnWeapons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &weaponR{
				EquippedOnMech: o,
			}
		} else {
			rel.R.EquippedOnMech = o
		}
	}
	return nil
}

// SetEquippedOnWeapons removes all previously related items of the
// mech replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.EquippedOnMech's EquippedOnWeapons accordingly.
// Replaces o.R.EquippedOnWeapons with related.
// Sets related.R.EquippedOnMech's EquippedOnWeapons accordingly.
func (o *Mech) SetEquippedOnWeapons(exec boil.Executor, insert bool, related ...*Weapon) error {
	query := "update \"weapons\" set \"equipped_on\" = null where \"equipped_on\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.EquippedOnWeapons {
			queries.SetScanner(&rel.EquippedOn, nil)
			if rel.R == nil {
				continue
			}

			rel.R.EquippedOnMech = nil
		}

		o.R.EquippedOnWeapons = nil
	}
	return o.AddEquippedOnWeapons(exec, insert, related...)
}

// RemoveEquippedOnWeapons relationships from objects passed in.
// Removes related items from R.EquippedOnWeapons (uses pointer comparison, removal does not keep order)
// Sets related.R.EquippedOnMech.
func (o *Mech) RemoveEquippedOnWeapons(exec boil.Executor, related ...*Weapon) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EquippedOn, nil)
		if rel.R != nil {
			rel.R.EquippedOnMech = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("equipped_on")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.EquippedOnWeapons {
			if rel != ri {
				continue
			}

			ln := len(o.R.EquippedOnWeapons)
			if ln > 1 && i < ln-1 {
				o.R.EquippedOnWeapons[i] = o.R.EquippedOnWeapons[ln-1]
			}
			o.R.EquippedOnWeapons = o.R.EquippedOnWeapons[:ln-1]
			break
		}
	}

	return nil
}

// Mechs retrieves all the records using an executor.
func Mechs(mods ...qm.QueryMod) mechQuery {
	mods = append(mods, qm.From("\"mechs\""), qmhelper.WhereIsNull("\"mechs\".\"deleted_at\""))
	return mechQuery{NewQuery(mods...)}
}

// FindMech retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMech(exec boil.Executor, iD string, selectCols ...string) (*Mech, error) {
	mechObj := &Mech{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mechs\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, mechObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from mechs")
	}

	if err = mechObj.doAfterSelectHooks(exec); err != nil {
		return mechObj, err
	}

	return mechObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Mech) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mechs provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mechInsertCacheMut.RLock()
	cache, cached := mechInsertCache[key]
	mechInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mechAllColumns,
			mechColumnsWithDefault,
			mechColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mechType, mechMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mechType, mechMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mechs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mechs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into mechs")
	}

	if !cached {
		mechInsertCacheMut.Lock()
		mechInsertCache[key] = cache
		mechInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Mech.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Mech) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mechUpdateCacheMut.RLock()
	cache, cached := mechUpdateCache[key]
	mechUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mechAllColumns,
			mechPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update mechs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mechs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mechPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mechType, mechMapping, append(wl, mechPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update mechs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for mechs")
	}

	if !cached {
		mechUpdateCacheMut.Lock()
		mechUpdateCache[key] = cache
		mechUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mechQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for mechs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for mechs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MechSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mechs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mechPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in mech slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all mech")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Mech) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mechs provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mechUpsertCacheMut.RLock()
	cache, cached := mechUpsertCache[key]
	mechUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mechAllColumns,
			mechColumnsWithDefault,
			mechColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mechAllColumns,
			mechPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert mechs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mechPrimaryKeyColumns))
			copy(conflict, mechPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mechs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mechType, mechMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mechType, mechMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert mechs")
	}

	if !cached {
		mechUpsertCacheMut.Lock()
		mechUpsertCache[key] = cache
		mechUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Mech record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Mech) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Mech provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mechPrimaryKeyMapping)
		sql = "DELETE FROM \"mechs\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"mechs\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(mechType, mechMapping, append(wl, mechPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from mechs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for mechs")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mechQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no mechQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mechs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mechs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MechSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mechBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"mechs\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"mechs\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, mechPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mech slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mechs")
	}

	if len(mechAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Mech) Reload(exec boil.Executor) error {
	ret, err := FindMech(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MechSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MechSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mechs\".* FROM \"mechs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in MechSlice")
	}

	*o = slice

	return nil
}

// MechExists checks if the Mech row exists.
func MechExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mechs\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if mechs exists")
	}

	return exists, nil
}
