// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BlueprintChassisBlueprintModule is an object representing the database table.
type BlueprintChassisBlueprintModule struct {
	ID                 string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BlueprintModuleID  string    `boiler:"blueprint_module_id" boil:"blueprint_module_id" json:"blueprint_module_id" toml:"blueprint_module_id" yaml:"blueprint_module_id"`
	BlueprintChassisID string    `boiler:"blueprint_chassis_id" boil:"blueprint_chassis_id" json:"blueprint_chassis_id" toml:"blueprint_chassis_id" yaml:"blueprint_chassis_id"`
	SlotNumber         int       `boiler:"slot_number" boil:"slot_number" json:"slot_number" toml:"slot_number" yaml:"slot_number"`
	DeletedAt          null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt          time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt          time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *blueprintChassisBlueprintModuleR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L blueprintChassisBlueprintModuleL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlueprintChassisBlueprintModuleColumns = struct {
	ID                 string
	BlueprintModuleID  string
	BlueprintChassisID string
	SlotNumber         string
	DeletedAt          string
	UpdatedAt          string
	CreatedAt          string
}{
	ID:                 "id",
	BlueprintModuleID:  "blueprint_module_id",
	BlueprintChassisID: "blueprint_chassis_id",
	SlotNumber:         "slot_number",
	DeletedAt:          "deleted_at",
	UpdatedAt:          "updated_at",
	CreatedAt:          "created_at",
}

var BlueprintChassisBlueprintModuleTableColumns = struct {
	ID                 string
	BlueprintModuleID  string
	BlueprintChassisID string
	SlotNumber         string
	DeletedAt          string
	UpdatedAt          string
	CreatedAt          string
}{
	ID:                 "blueprint_chassis_blueprint_modules.id",
	BlueprintModuleID:  "blueprint_chassis_blueprint_modules.blueprint_module_id",
	BlueprintChassisID: "blueprint_chassis_blueprint_modules.blueprint_chassis_id",
	SlotNumber:         "blueprint_chassis_blueprint_modules.slot_number",
	DeletedAt:          "blueprint_chassis_blueprint_modules.deleted_at",
	UpdatedAt:          "blueprint_chassis_blueprint_modules.updated_at",
	CreatedAt:          "blueprint_chassis_blueprint_modules.created_at",
}

// Generated where

var BlueprintChassisBlueprintModuleWhere = struct {
	ID                 whereHelperstring
	BlueprintModuleID  whereHelperstring
	BlueprintChassisID whereHelperstring
	SlotNumber         whereHelperint
	DeletedAt          whereHelpernull_Time
	UpdatedAt          whereHelpertime_Time
	CreatedAt          whereHelpertime_Time
}{
	ID:                 whereHelperstring{field: "\"blueprint_chassis_blueprint_modules\".\"id\""},
	BlueprintModuleID:  whereHelperstring{field: "\"blueprint_chassis_blueprint_modules\".\"blueprint_module_id\""},
	BlueprintChassisID: whereHelperstring{field: "\"blueprint_chassis_blueprint_modules\".\"blueprint_chassis_id\""},
	SlotNumber:         whereHelperint{field: "\"blueprint_chassis_blueprint_modules\".\"slot_number\""},
	DeletedAt:          whereHelpernull_Time{field: "\"blueprint_chassis_blueprint_modules\".\"deleted_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"blueprint_chassis_blueprint_modules\".\"updated_at\""},
	CreatedAt:          whereHelpertime_Time{field: "\"blueprint_chassis_blueprint_modules\".\"created_at\""},
}

// BlueprintChassisBlueprintModuleRels is where relationship names are stored.
var BlueprintChassisBlueprintModuleRels = struct {
	BlueprintChassis string
	BlueprintModule  string
}{
	BlueprintChassis: "BlueprintChassis",
	BlueprintModule:  "BlueprintModule",
}

// blueprintChassisBlueprintModuleR is where relationships are stored.
type blueprintChassisBlueprintModuleR struct {
	BlueprintChassis *BlueprintChassis `boiler:"BlueprintChassis" boil:"BlueprintChassis" json:"BlueprintChassis" toml:"BlueprintChassis" yaml:"BlueprintChassis"`
	BlueprintModule  *BlueprintModule  `boiler:"BlueprintModule" boil:"BlueprintModule" json:"BlueprintModule" toml:"BlueprintModule" yaml:"BlueprintModule"`
}

// NewStruct creates a new relationship struct
func (*blueprintChassisBlueprintModuleR) NewStruct() *blueprintChassisBlueprintModuleR {
	return &blueprintChassisBlueprintModuleR{}
}

// blueprintChassisBlueprintModuleL is where Load methods for each relationship are stored.
type blueprintChassisBlueprintModuleL struct{}

var (
	blueprintChassisBlueprintModuleAllColumns            = []string{"id", "blueprint_module_id", "blueprint_chassis_id", "slot_number", "deleted_at", "updated_at", "created_at"}
	blueprintChassisBlueprintModuleColumnsWithoutDefault = []string{"blueprint_module_id", "blueprint_chassis_id", "slot_number"}
	blueprintChassisBlueprintModuleColumnsWithDefault    = []string{"id", "deleted_at", "updated_at", "created_at"}
	blueprintChassisBlueprintModulePrimaryKeyColumns     = []string{"id"}
	blueprintChassisBlueprintModuleGeneratedColumns      = []string{}
)

type (
	// BlueprintChassisBlueprintModuleSlice is an alias for a slice of pointers to BlueprintChassisBlueprintModule.
	// This should almost always be used instead of []BlueprintChassisBlueprintModule.
	BlueprintChassisBlueprintModuleSlice []*BlueprintChassisBlueprintModule
	// BlueprintChassisBlueprintModuleHook is the signature for custom BlueprintChassisBlueprintModule hook methods
	BlueprintChassisBlueprintModuleHook func(boil.Executor, *BlueprintChassisBlueprintModule) error

	blueprintChassisBlueprintModuleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blueprintChassisBlueprintModuleType                 = reflect.TypeOf(&BlueprintChassisBlueprintModule{})
	blueprintChassisBlueprintModuleMapping              = queries.MakeStructMapping(blueprintChassisBlueprintModuleType)
	blueprintChassisBlueprintModulePrimaryKeyMapping, _ = queries.BindMapping(blueprintChassisBlueprintModuleType, blueprintChassisBlueprintModuleMapping, blueprintChassisBlueprintModulePrimaryKeyColumns)
	blueprintChassisBlueprintModuleInsertCacheMut       sync.RWMutex
	blueprintChassisBlueprintModuleInsertCache          = make(map[string]insertCache)
	blueprintChassisBlueprintModuleUpdateCacheMut       sync.RWMutex
	blueprintChassisBlueprintModuleUpdateCache          = make(map[string]updateCache)
	blueprintChassisBlueprintModuleUpsertCacheMut       sync.RWMutex
	blueprintChassisBlueprintModuleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var blueprintChassisBlueprintModuleAfterSelectHooks []BlueprintChassisBlueprintModuleHook

var blueprintChassisBlueprintModuleBeforeInsertHooks []BlueprintChassisBlueprintModuleHook
var blueprintChassisBlueprintModuleAfterInsertHooks []BlueprintChassisBlueprintModuleHook

var blueprintChassisBlueprintModuleBeforeUpdateHooks []BlueprintChassisBlueprintModuleHook
var blueprintChassisBlueprintModuleAfterUpdateHooks []BlueprintChassisBlueprintModuleHook

var blueprintChassisBlueprintModuleBeforeDeleteHooks []BlueprintChassisBlueprintModuleHook
var blueprintChassisBlueprintModuleAfterDeleteHooks []BlueprintChassisBlueprintModuleHook

var blueprintChassisBlueprintModuleBeforeUpsertHooks []BlueprintChassisBlueprintModuleHook
var blueprintChassisBlueprintModuleAfterUpsertHooks []BlueprintChassisBlueprintModuleHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BlueprintChassisBlueprintModule) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisBlueprintModuleAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BlueprintChassisBlueprintModule) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisBlueprintModuleBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BlueprintChassisBlueprintModule) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisBlueprintModuleAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BlueprintChassisBlueprintModule) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisBlueprintModuleBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BlueprintChassisBlueprintModule) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisBlueprintModuleAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BlueprintChassisBlueprintModule) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisBlueprintModuleBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BlueprintChassisBlueprintModule) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisBlueprintModuleAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BlueprintChassisBlueprintModule) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisBlueprintModuleBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BlueprintChassisBlueprintModule) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisBlueprintModuleAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBlueprintChassisBlueprintModuleHook registers your hook function for all future operations.
func AddBlueprintChassisBlueprintModuleHook(hookPoint boil.HookPoint, blueprintChassisBlueprintModuleHook BlueprintChassisBlueprintModuleHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		blueprintChassisBlueprintModuleAfterSelectHooks = append(blueprintChassisBlueprintModuleAfterSelectHooks, blueprintChassisBlueprintModuleHook)
	case boil.BeforeInsertHook:
		blueprintChassisBlueprintModuleBeforeInsertHooks = append(blueprintChassisBlueprintModuleBeforeInsertHooks, blueprintChassisBlueprintModuleHook)
	case boil.AfterInsertHook:
		blueprintChassisBlueprintModuleAfterInsertHooks = append(blueprintChassisBlueprintModuleAfterInsertHooks, blueprintChassisBlueprintModuleHook)
	case boil.BeforeUpdateHook:
		blueprintChassisBlueprintModuleBeforeUpdateHooks = append(blueprintChassisBlueprintModuleBeforeUpdateHooks, blueprintChassisBlueprintModuleHook)
	case boil.AfterUpdateHook:
		blueprintChassisBlueprintModuleAfterUpdateHooks = append(blueprintChassisBlueprintModuleAfterUpdateHooks, blueprintChassisBlueprintModuleHook)
	case boil.BeforeDeleteHook:
		blueprintChassisBlueprintModuleBeforeDeleteHooks = append(blueprintChassisBlueprintModuleBeforeDeleteHooks, blueprintChassisBlueprintModuleHook)
	case boil.AfterDeleteHook:
		blueprintChassisBlueprintModuleAfterDeleteHooks = append(blueprintChassisBlueprintModuleAfterDeleteHooks, blueprintChassisBlueprintModuleHook)
	case boil.BeforeUpsertHook:
		blueprintChassisBlueprintModuleBeforeUpsertHooks = append(blueprintChassisBlueprintModuleBeforeUpsertHooks, blueprintChassisBlueprintModuleHook)
	case boil.AfterUpsertHook:
		blueprintChassisBlueprintModuleAfterUpsertHooks = append(blueprintChassisBlueprintModuleAfterUpsertHooks, blueprintChassisBlueprintModuleHook)
	}
}

// One returns a single blueprintChassisBlueprintModule record from the query.
func (q blueprintChassisBlueprintModuleQuery) One(exec boil.Executor) (*BlueprintChassisBlueprintModule, error) {
	o := &BlueprintChassisBlueprintModule{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for blueprint_chassis_blueprint_modules")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BlueprintChassisBlueprintModule records from the query.
func (q blueprintChassisBlueprintModuleQuery) All(exec boil.Executor) (BlueprintChassisBlueprintModuleSlice, error) {
	var o []*BlueprintChassisBlueprintModule

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BlueprintChassisBlueprintModule slice")
	}

	if len(blueprintChassisBlueprintModuleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BlueprintChassisBlueprintModule records in the query.
func (q blueprintChassisBlueprintModuleQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count blueprint_chassis_blueprint_modules rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q blueprintChassisBlueprintModuleQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if blueprint_chassis_blueprint_modules exists")
	}

	return count > 0, nil
}

// BlueprintChassis pointed to by the foreign key.
func (o *BlueprintChassisBlueprintModule) BlueprintChassis(mods ...qm.QueryMod) blueprintChassisQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BlueprintChassisID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintChasses(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_chassis\"")

	return query
}

// BlueprintModule pointed to by the foreign key.
func (o *BlueprintChassisBlueprintModule) BlueprintModule(mods ...qm.QueryMod) blueprintModuleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BlueprintModuleID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintModules(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_modules\"")

	return query
}

// LoadBlueprintChassis allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blueprintChassisBlueprintModuleL) LoadBlueprintChassis(e boil.Executor, singular bool, maybeBlueprintChassisBlueprintModule interface{}, mods queries.Applicator) error {
	var slice []*BlueprintChassisBlueprintModule
	var object *BlueprintChassisBlueprintModule

	if singular {
		object = maybeBlueprintChassisBlueprintModule.(*BlueprintChassisBlueprintModule)
	} else {
		slice = *maybeBlueprintChassisBlueprintModule.(*[]*BlueprintChassisBlueprintModule)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintChassisBlueprintModuleR{}
		}
		args = append(args, object.BlueprintChassisID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintChassisBlueprintModuleR{}
			}

			for _, a := range args {
				if a == obj.BlueprintChassisID {
					continue Outer
				}
			}

			args = append(args, obj.BlueprintChassisID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_chassis`),
		qm.WhereIn(`blueprint_chassis.id in ?`, args...),
		qmhelper.WhereIsNull(`blueprint_chassis.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintChassis")
	}

	var resultSlice []*BlueprintChassis
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintChassis")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_chassis")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_chassis")
	}

	if len(blueprintChassisBlueprintModuleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BlueprintChassis = foreign
		if foreign.R == nil {
			foreign.R = &blueprintChassisR{}
		}
		foreign.R.BlueprintChassisBlueprintModules = append(foreign.R.BlueprintChassisBlueprintModules, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlueprintChassisID == foreign.ID {
				local.R.BlueprintChassis = foreign
				if foreign.R == nil {
					foreign.R = &blueprintChassisR{}
				}
				foreign.R.BlueprintChassisBlueprintModules = append(foreign.R.BlueprintChassisBlueprintModules, local)
				break
			}
		}
	}

	return nil
}

// LoadBlueprintModule allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blueprintChassisBlueprintModuleL) LoadBlueprintModule(e boil.Executor, singular bool, maybeBlueprintChassisBlueprintModule interface{}, mods queries.Applicator) error {
	var slice []*BlueprintChassisBlueprintModule
	var object *BlueprintChassisBlueprintModule

	if singular {
		object = maybeBlueprintChassisBlueprintModule.(*BlueprintChassisBlueprintModule)
	} else {
		slice = *maybeBlueprintChassisBlueprintModule.(*[]*BlueprintChassisBlueprintModule)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintChassisBlueprintModuleR{}
		}
		args = append(args, object.BlueprintModuleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintChassisBlueprintModuleR{}
			}

			for _, a := range args {
				if a == obj.BlueprintModuleID {
					continue Outer
				}
			}

			args = append(args, obj.BlueprintModuleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_modules`),
		qm.WhereIn(`blueprint_modules.id in ?`, args...),
		qmhelper.WhereIsNull(`blueprint_modules.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintModule")
	}

	var resultSlice []*BlueprintModule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintModule")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_modules")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_modules")
	}

	if len(blueprintChassisBlueprintModuleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BlueprintModule = foreign
		if foreign.R == nil {
			foreign.R = &blueprintModuleR{}
		}
		foreign.R.BlueprintChassisBlueprintModules = append(foreign.R.BlueprintChassisBlueprintModules, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlueprintModuleID == foreign.ID {
				local.R.BlueprintModule = foreign
				if foreign.R == nil {
					foreign.R = &blueprintModuleR{}
				}
				foreign.R.BlueprintChassisBlueprintModules = append(foreign.R.BlueprintChassisBlueprintModules, local)
				break
			}
		}
	}

	return nil
}

// SetBlueprintChassis of the blueprintChassisBlueprintModule to the related item.
// Sets o.R.BlueprintChassis to related.
// Adds o to related.R.BlueprintChassisBlueprintModules.
func (o *BlueprintChassisBlueprintModule) SetBlueprintChassis(exec boil.Executor, insert bool, related *BlueprintChassis) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"blueprint_chassis_blueprint_modules\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_chassis_id"}),
		strmangle.WhereClause("\"", "\"", 2, blueprintChassisBlueprintModulePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlueprintChassisID = related.ID
	if o.R == nil {
		o.R = &blueprintChassisBlueprintModuleR{
			BlueprintChassis: related,
		}
	} else {
		o.R.BlueprintChassis = related
	}

	if related.R == nil {
		related.R = &blueprintChassisR{
			BlueprintChassisBlueprintModules: BlueprintChassisBlueprintModuleSlice{o},
		}
	} else {
		related.R.BlueprintChassisBlueprintModules = append(related.R.BlueprintChassisBlueprintModules, o)
	}

	return nil
}

// SetBlueprintModule of the blueprintChassisBlueprintModule to the related item.
// Sets o.R.BlueprintModule to related.
// Adds o to related.R.BlueprintChassisBlueprintModules.
func (o *BlueprintChassisBlueprintModule) SetBlueprintModule(exec boil.Executor, insert bool, related *BlueprintModule) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"blueprint_chassis_blueprint_modules\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_module_id"}),
		strmangle.WhereClause("\"", "\"", 2, blueprintChassisBlueprintModulePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlueprintModuleID = related.ID
	if o.R == nil {
		o.R = &blueprintChassisBlueprintModuleR{
			BlueprintModule: related,
		}
	} else {
		o.R.BlueprintModule = related
	}

	if related.R == nil {
		related.R = &blueprintModuleR{
			BlueprintChassisBlueprintModules: BlueprintChassisBlueprintModuleSlice{o},
		}
	} else {
		related.R.BlueprintChassisBlueprintModules = append(related.R.BlueprintChassisBlueprintModules, o)
	}

	return nil
}

// BlueprintChassisBlueprintModules retrieves all the records using an executor.
func BlueprintChassisBlueprintModules(mods ...qm.QueryMod) blueprintChassisBlueprintModuleQuery {
	mods = append(mods, qm.From("\"blueprint_chassis_blueprint_modules\""), qmhelper.WhereIsNull("\"blueprint_chassis_blueprint_modules\".\"deleted_at\""))
	return blueprintChassisBlueprintModuleQuery{NewQuery(mods...)}
}

// FindBlueprintChassisBlueprintModule retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlueprintChassisBlueprintModule(exec boil.Executor, iD string, selectCols ...string) (*BlueprintChassisBlueprintModule, error) {
	blueprintChassisBlueprintModuleObj := &BlueprintChassisBlueprintModule{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"blueprint_chassis_blueprint_modules\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, blueprintChassisBlueprintModuleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from blueprint_chassis_blueprint_modules")
	}

	if err = blueprintChassisBlueprintModuleObj.doAfterSelectHooks(exec); err != nil {
		return blueprintChassisBlueprintModuleObj, err
	}

	return blueprintChassisBlueprintModuleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlueprintChassisBlueprintModule) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_chassis_blueprint_modules provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintChassisBlueprintModuleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blueprintChassisBlueprintModuleInsertCacheMut.RLock()
	cache, cached := blueprintChassisBlueprintModuleInsertCache[key]
	blueprintChassisBlueprintModuleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blueprintChassisBlueprintModuleAllColumns,
			blueprintChassisBlueprintModuleColumnsWithDefault,
			blueprintChassisBlueprintModuleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blueprintChassisBlueprintModuleType, blueprintChassisBlueprintModuleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blueprintChassisBlueprintModuleType, blueprintChassisBlueprintModuleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"blueprint_chassis_blueprint_modules\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"blueprint_chassis_blueprint_modules\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into blueprint_chassis_blueprint_modules")
	}

	if !cached {
		blueprintChassisBlueprintModuleInsertCacheMut.Lock()
		blueprintChassisBlueprintModuleInsertCache[key] = cache
		blueprintChassisBlueprintModuleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BlueprintChassisBlueprintModule.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlueprintChassisBlueprintModule) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	blueprintChassisBlueprintModuleUpdateCacheMut.RLock()
	cache, cached := blueprintChassisBlueprintModuleUpdateCache[key]
	blueprintChassisBlueprintModuleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blueprintChassisBlueprintModuleAllColumns,
			blueprintChassisBlueprintModulePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update blueprint_chassis_blueprint_modules, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"blueprint_chassis_blueprint_modules\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, blueprintChassisBlueprintModulePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blueprintChassisBlueprintModuleType, blueprintChassisBlueprintModuleMapping, append(wl, blueprintChassisBlueprintModulePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update blueprint_chassis_blueprint_modules row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for blueprint_chassis_blueprint_modules")
	}

	if !cached {
		blueprintChassisBlueprintModuleUpdateCacheMut.Lock()
		blueprintChassisBlueprintModuleUpdateCache[key] = cache
		blueprintChassisBlueprintModuleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q blueprintChassisBlueprintModuleQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for blueprint_chassis_blueprint_modules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for blueprint_chassis_blueprint_modules")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlueprintChassisBlueprintModuleSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintChassisBlueprintModulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"blueprint_chassis_blueprint_modules\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, blueprintChassisBlueprintModulePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in blueprintChassisBlueprintModule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all blueprintChassisBlueprintModule")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlueprintChassisBlueprintModule) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_chassis_blueprint_modules provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintChassisBlueprintModuleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blueprintChassisBlueprintModuleUpsertCacheMut.RLock()
	cache, cached := blueprintChassisBlueprintModuleUpsertCache[key]
	blueprintChassisBlueprintModuleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blueprintChassisBlueprintModuleAllColumns,
			blueprintChassisBlueprintModuleColumnsWithDefault,
			blueprintChassisBlueprintModuleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			blueprintChassisBlueprintModuleAllColumns,
			blueprintChassisBlueprintModulePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert blueprint_chassis_blueprint_modules, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(blueprintChassisBlueprintModulePrimaryKeyColumns))
			copy(conflict, blueprintChassisBlueprintModulePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"blueprint_chassis_blueprint_modules\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(blueprintChassisBlueprintModuleType, blueprintChassisBlueprintModuleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blueprintChassisBlueprintModuleType, blueprintChassisBlueprintModuleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert blueprint_chassis_blueprint_modules")
	}

	if !cached {
		blueprintChassisBlueprintModuleUpsertCacheMut.Lock()
		blueprintChassisBlueprintModuleUpsertCache[key] = cache
		blueprintChassisBlueprintModuleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BlueprintChassisBlueprintModule record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlueprintChassisBlueprintModule) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BlueprintChassisBlueprintModule provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blueprintChassisBlueprintModulePrimaryKeyMapping)
		sql = "DELETE FROM \"blueprint_chassis_blueprint_modules\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"blueprint_chassis_blueprint_modules\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(blueprintChassisBlueprintModuleType, blueprintChassisBlueprintModuleMapping, append(wl, blueprintChassisBlueprintModulePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from blueprint_chassis_blueprint_modules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for blueprint_chassis_blueprint_modules")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q blueprintChassisBlueprintModuleQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no blueprintChassisBlueprintModuleQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprint_chassis_blueprint_modules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_chassis_blueprint_modules")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlueprintChassisBlueprintModuleSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(blueprintChassisBlueprintModuleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintChassisBlueprintModulePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"blueprint_chassis_blueprint_modules\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintChassisBlueprintModulePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintChassisBlueprintModulePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"blueprint_chassis_blueprint_modules\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, blueprintChassisBlueprintModulePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprintChassisBlueprintModule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_chassis_blueprint_modules")
	}

	if len(blueprintChassisBlueprintModuleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlueprintChassisBlueprintModule) Reload(exec boil.Executor) error {
	ret, err := FindBlueprintChassisBlueprintModule(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlueprintChassisBlueprintModuleSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlueprintChassisBlueprintModuleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintChassisBlueprintModulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"blueprint_chassis_blueprint_modules\".* FROM \"blueprint_chassis_blueprint_modules\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintChassisBlueprintModulePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BlueprintChassisBlueprintModuleSlice")
	}

	*o = slice

	return nil
}

// BlueprintChassisBlueprintModuleExists checks if the BlueprintChassisBlueprintModule row exists.
func BlueprintChassisBlueprintModuleExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"blueprint_chassis_blueprint_modules\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if blueprint_chassis_blueprint_modules exists")
	}

	return exists, nil
}
