// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShoppingCart is an object representing the database table.
type ShoppingCart struct {
	ID        string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID    string    `boiler:"user_id" boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Locked    bool      `boiler:"locked" boil:"locked" json:"locked" toml:"locked" yaml:"locked"`
	CreatedAt time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ExpiresAt time.Time `boiler:"expires_at" boil:"expires_at" json:"expires_at" toml:"expires_at" yaml:"expires_at"`

	R *shoppingCartR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L shoppingCartL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShoppingCartColumns = struct {
	ID        string
	UserID    string
	Locked    string
	CreatedAt string
	ExpiresAt string
}{
	ID:        "id",
	UserID:    "user_id",
	Locked:    "locked",
	CreatedAt: "created_at",
	ExpiresAt: "expires_at",
}

var ShoppingCartTableColumns = struct {
	ID        string
	UserID    string
	Locked    string
	CreatedAt string
	ExpiresAt string
}{
	ID:        "shopping_carts.id",
	UserID:    "shopping_carts.user_id",
	Locked:    "shopping_carts.locked",
	CreatedAt: "shopping_carts.created_at",
	ExpiresAt: "shopping_carts.expires_at",
}

// Generated where

var ShoppingCartWhere = struct {
	ID        whereHelperstring
	UserID    whereHelperstring
	Locked    whereHelperbool
	CreatedAt whereHelpertime_Time
	ExpiresAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"shopping_carts\".\"id\""},
	UserID:    whereHelperstring{field: "\"shopping_carts\".\"user_id\""},
	Locked:    whereHelperbool{field: "\"shopping_carts\".\"locked\""},
	CreatedAt: whereHelpertime_Time{field: "\"shopping_carts\".\"created_at\""},
	ExpiresAt: whereHelpertime_Time{field: "\"shopping_carts\".\"expires_at\""},
}

// ShoppingCartRels is where relationship names are stored.
var ShoppingCartRels = struct {
	User              string
	ShoppingCartItems string
}{
	User:              "User",
	ShoppingCartItems: "ShoppingCartItems",
}

// shoppingCartR is where relationships are stored.
type shoppingCartR struct {
	User              *Player               `boiler:"User" boil:"User" json:"User" toml:"User" yaml:"User"`
	ShoppingCartItems ShoppingCartItemSlice `boiler:"ShoppingCartItems" boil:"ShoppingCartItems" json:"ShoppingCartItems" toml:"ShoppingCartItems" yaml:"ShoppingCartItems"`
}

// NewStruct creates a new relationship struct
func (*shoppingCartR) NewStruct() *shoppingCartR {
	return &shoppingCartR{}
}

// shoppingCartL is where Load methods for each relationship are stored.
type shoppingCartL struct{}

var (
	shoppingCartAllColumns            = []string{"id", "user_id", "locked", "created_at", "expires_at"}
	shoppingCartColumnsWithoutDefault = []string{"user_id", "expires_at"}
	shoppingCartColumnsWithDefault    = []string{"id", "locked", "created_at"}
	shoppingCartPrimaryKeyColumns     = []string{"id"}
	shoppingCartGeneratedColumns      = []string{}
)

type (
	// ShoppingCartSlice is an alias for a slice of pointers to ShoppingCart.
	// This should almost always be used instead of []ShoppingCart.
	ShoppingCartSlice []*ShoppingCart
	// ShoppingCartHook is the signature for custom ShoppingCart hook methods
	ShoppingCartHook func(boil.Executor, *ShoppingCart) error

	shoppingCartQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shoppingCartType                 = reflect.TypeOf(&ShoppingCart{})
	shoppingCartMapping              = queries.MakeStructMapping(shoppingCartType)
	shoppingCartPrimaryKeyMapping, _ = queries.BindMapping(shoppingCartType, shoppingCartMapping, shoppingCartPrimaryKeyColumns)
	shoppingCartInsertCacheMut       sync.RWMutex
	shoppingCartInsertCache          = make(map[string]insertCache)
	shoppingCartUpdateCacheMut       sync.RWMutex
	shoppingCartUpdateCache          = make(map[string]updateCache)
	shoppingCartUpsertCacheMut       sync.RWMutex
	shoppingCartUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var shoppingCartAfterSelectHooks []ShoppingCartHook

var shoppingCartBeforeInsertHooks []ShoppingCartHook
var shoppingCartAfterInsertHooks []ShoppingCartHook

var shoppingCartBeforeUpdateHooks []ShoppingCartHook
var shoppingCartAfterUpdateHooks []ShoppingCartHook

var shoppingCartBeforeDeleteHooks []ShoppingCartHook
var shoppingCartAfterDeleteHooks []ShoppingCartHook

var shoppingCartBeforeUpsertHooks []ShoppingCartHook
var shoppingCartAfterUpsertHooks []ShoppingCartHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ShoppingCart) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range shoppingCartAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ShoppingCart) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range shoppingCartBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ShoppingCart) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range shoppingCartAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ShoppingCart) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range shoppingCartBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ShoppingCart) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range shoppingCartAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ShoppingCart) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range shoppingCartBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ShoppingCart) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range shoppingCartAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ShoppingCart) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range shoppingCartBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ShoppingCart) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range shoppingCartAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShoppingCartHook registers your hook function for all future operations.
func AddShoppingCartHook(hookPoint boil.HookPoint, shoppingCartHook ShoppingCartHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		shoppingCartAfterSelectHooks = append(shoppingCartAfterSelectHooks, shoppingCartHook)
	case boil.BeforeInsertHook:
		shoppingCartBeforeInsertHooks = append(shoppingCartBeforeInsertHooks, shoppingCartHook)
	case boil.AfterInsertHook:
		shoppingCartAfterInsertHooks = append(shoppingCartAfterInsertHooks, shoppingCartHook)
	case boil.BeforeUpdateHook:
		shoppingCartBeforeUpdateHooks = append(shoppingCartBeforeUpdateHooks, shoppingCartHook)
	case boil.AfterUpdateHook:
		shoppingCartAfterUpdateHooks = append(shoppingCartAfterUpdateHooks, shoppingCartHook)
	case boil.BeforeDeleteHook:
		shoppingCartBeforeDeleteHooks = append(shoppingCartBeforeDeleteHooks, shoppingCartHook)
	case boil.AfterDeleteHook:
		shoppingCartAfterDeleteHooks = append(shoppingCartAfterDeleteHooks, shoppingCartHook)
	case boil.BeforeUpsertHook:
		shoppingCartBeforeUpsertHooks = append(shoppingCartBeforeUpsertHooks, shoppingCartHook)
	case boil.AfterUpsertHook:
		shoppingCartAfterUpsertHooks = append(shoppingCartAfterUpsertHooks, shoppingCartHook)
	}
}

// One returns a single shoppingCart record from the query.
func (q shoppingCartQuery) One(exec boil.Executor) (*ShoppingCart, error) {
	o := &ShoppingCart{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for shopping_carts")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ShoppingCart records from the query.
func (q shoppingCartQuery) All(exec boil.Executor) (ShoppingCartSlice, error) {
	var o []*ShoppingCart

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to ShoppingCart slice")
	}

	if len(shoppingCartAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ShoppingCart records in the query.
func (q shoppingCartQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count shopping_carts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shoppingCartQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if shopping_carts exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *ShoppingCart) User(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// ShoppingCartItems retrieves all the shopping_cart_item's ShoppingCartItems with an executor.
func (o *ShoppingCart) ShoppingCartItems(mods ...qm.QueryMod) shoppingCartItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shopping_cart_items\".\"shopping_cart_id\"=?", o.ID),
	)

	query := ShoppingCartItems(queryMods...)
	queries.SetFrom(query.Query, "\"shopping_cart_items\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"shopping_cart_items\".*"})
	}

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shoppingCartL) LoadUser(e boil.Executor, singular bool, maybeShoppingCart interface{}, mods queries.Applicator) error {
	var slice []*ShoppingCart
	var object *ShoppingCart

	if singular {
		object = maybeShoppingCart.(*ShoppingCart)
	} else {
		slice = *maybeShoppingCart.(*[]*ShoppingCart)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shoppingCartR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shoppingCartR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(shoppingCartAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.UserShoppingCart = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.UserShoppingCart = local
				break
			}
		}
	}

	return nil
}

// LoadShoppingCartItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shoppingCartL) LoadShoppingCartItems(e boil.Executor, singular bool, maybeShoppingCart interface{}, mods queries.Applicator) error {
	var slice []*ShoppingCart
	var object *ShoppingCart

	if singular {
		object = maybeShoppingCart.(*ShoppingCart)
	} else {
		slice = *maybeShoppingCart.(*[]*ShoppingCart)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shoppingCartR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shoppingCartR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shopping_cart_items`),
		qm.WhereIn(`shopping_cart_items.shopping_cart_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shopping_cart_items")
	}

	var resultSlice []*ShoppingCartItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shopping_cart_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shopping_cart_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shopping_cart_items")
	}

	if len(shoppingCartItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ShoppingCartItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shoppingCartItemR{}
			}
			foreign.R.ShoppingCart = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ShoppingCartID {
				local.R.ShoppingCartItems = append(local.R.ShoppingCartItems, foreign)
				if foreign.R == nil {
					foreign.R = &shoppingCartItemR{}
				}
				foreign.R.ShoppingCart = local
				break
			}
		}
	}

	return nil
}

// SetUser of the shoppingCart to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserShoppingCart.
func (o *ShoppingCart) SetUser(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shopping_carts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, shoppingCartPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &shoppingCartR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &playerR{
			UserShoppingCart: o,
		}
	} else {
		related.R.UserShoppingCart = o
	}

	return nil
}

// AddShoppingCartItems adds the given related objects to the existing relationships
// of the shopping_cart, optionally inserting them as new records.
// Appends related to o.R.ShoppingCartItems.
// Sets related.R.ShoppingCart appropriately.
func (o *ShoppingCart) AddShoppingCartItems(exec boil.Executor, insert bool, related ...*ShoppingCartItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ShoppingCartID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shopping_cart_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shopping_cart_id"}),
				strmangle.WhereClause("\"", "\"", 2, shoppingCartItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ShoppingCartID = o.ID
		}
	}

	if o.R == nil {
		o.R = &shoppingCartR{
			ShoppingCartItems: related,
		}
	} else {
		o.R.ShoppingCartItems = append(o.R.ShoppingCartItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shoppingCartItemR{
				ShoppingCart: o,
			}
		} else {
			rel.R.ShoppingCart = o
		}
	}
	return nil
}

// ShoppingCarts retrieves all the records using an executor.
func ShoppingCarts(mods ...qm.QueryMod) shoppingCartQuery {
	mods = append(mods, qm.From("\"shopping_carts\""))
	return shoppingCartQuery{NewQuery(mods...)}
}

// FindShoppingCart retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShoppingCart(exec boil.Executor, iD string, selectCols ...string) (*ShoppingCart, error) {
	shoppingCartObj := &ShoppingCart{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shopping_carts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, shoppingCartObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from shopping_carts")
	}

	if err = shoppingCartObj.doAfterSelectHooks(exec); err != nil {
		return shoppingCartObj, err
	}

	return shoppingCartObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShoppingCart) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no shopping_carts provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shoppingCartColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shoppingCartInsertCacheMut.RLock()
	cache, cached := shoppingCartInsertCache[key]
	shoppingCartInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shoppingCartAllColumns,
			shoppingCartColumnsWithDefault,
			shoppingCartColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shoppingCartType, shoppingCartMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shoppingCartType, shoppingCartMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shopping_carts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shopping_carts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into shopping_carts")
	}

	if !cached {
		shoppingCartInsertCacheMut.Lock()
		shoppingCartInsertCache[key] = cache
		shoppingCartInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the ShoppingCart.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShoppingCart) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	shoppingCartUpdateCacheMut.RLock()
	cache, cached := shoppingCartUpdateCache[key]
	shoppingCartUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shoppingCartAllColumns,
			shoppingCartPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update shopping_carts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shopping_carts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shoppingCartPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shoppingCartType, shoppingCartMapping, append(wl, shoppingCartPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update shopping_carts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for shopping_carts")
	}

	if !cached {
		shoppingCartUpdateCacheMut.Lock()
		shoppingCartUpdateCache[key] = cache
		shoppingCartUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q shoppingCartQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for shopping_carts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for shopping_carts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShoppingCartSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shoppingCartPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shopping_carts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shoppingCartPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in shoppingCart slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all shoppingCart")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShoppingCart) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no shopping_carts provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shoppingCartColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shoppingCartUpsertCacheMut.RLock()
	cache, cached := shoppingCartUpsertCache[key]
	shoppingCartUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			shoppingCartAllColumns,
			shoppingCartColumnsWithDefault,
			shoppingCartColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shoppingCartAllColumns,
			shoppingCartPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert shopping_carts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(shoppingCartPrimaryKeyColumns))
			copy(conflict, shoppingCartPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shopping_carts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(shoppingCartType, shoppingCartMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shoppingCartType, shoppingCartMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert shopping_carts")
	}

	if !cached {
		shoppingCartUpsertCacheMut.Lock()
		shoppingCartUpsertCache[key] = cache
		shoppingCartUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single ShoppingCart record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShoppingCart) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no ShoppingCart provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shoppingCartPrimaryKeyMapping)
	sql := "DELETE FROM \"shopping_carts\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from shopping_carts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for shopping_carts")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shoppingCartQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no shoppingCartQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from shopping_carts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for shopping_carts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShoppingCartSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(shoppingCartBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shoppingCartPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shopping_carts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shoppingCartPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from shoppingCart slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for shopping_carts")
	}

	if len(shoppingCartAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShoppingCart) Reload(exec boil.Executor) error {
	ret, err := FindShoppingCart(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShoppingCartSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShoppingCartSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shoppingCartPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shopping_carts\".* FROM \"shopping_carts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shoppingCartPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in ShoppingCartSlice")
	}

	*o = slice

	return nil
}

// ShoppingCartExists checks if the ShoppingCart row exists.
func ShoppingCartExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shopping_carts\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if shopping_carts exists")
	}

	return exists, nil
}
