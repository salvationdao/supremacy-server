// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RepairAgent is an object representing the database table.
type RepairAgent struct {
	RepairOfferID string    `boiler:"repair_offer_id" boil:"repair_offer_id" json:"repair_offer_id" toml:"repair_offer_id" yaml:"repair_offer_id"`
	AgentID       string    `boiler:"agent_id" boil:"agent_id" json:"agent_id" toml:"agent_id" yaml:"agent_id"`
	Status        string    `boiler:"status" boil:"status" json:"status" toml:"status" yaml:"status"`
	Progress      int       `boiler:"progress" boil:"progress" json:"progress" toml:"progress" yaml:"progress"`
	CompleteAt    null.Time `boiler:"complete_at" boil:"complete_at" json:"complete_at,omitempty" toml:"complete_at" yaml:"complete_at,omitempty"`
	CreatedAt     time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt     null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *repairAgentR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L repairAgentL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RepairAgentColumns = struct {
	RepairOfferID string
	AgentID       string
	Status        string
	Progress      string
	CompleteAt    string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	RepairOfferID: "repair_offer_id",
	AgentID:       "agent_id",
	Status:        "status",
	Progress:      "progress",
	CompleteAt:    "complete_at",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	DeletedAt:     "deleted_at",
}

var RepairAgentTableColumns = struct {
	RepairOfferID string
	AgentID       string
	Status        string
	Progress      string
	CompleteAt    string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	RepairOfferID: "repair_agents.repair_offer_id",
	AgentID:       "repair_agents.agent_id",
	Status:        "repair_agents.status",
	Progress:      "repair_agents.progress",
	CompleteAt:    "repair_agents.complete_at",
	CreatedAt:     "repair_agents.created_at",
	UpdatedAt:     "repair_agents.updated_at",
	DeletedAt:     "repair_agents.deleted_at",
}

// Generated where

var RepairAgentWhere = struct {
	RepairOfferID whereHelperstring
	AgentID       whereHelperstring
	Status        whereHelperstring
	Progress      whereHelperint
	CompleteAt    whereHelpernull_Time
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	DeletedAt     whereHelpernull_Time
}{
	RepairOfferID: whereHelperstring{field: "\"repair_agents\".\"repair_offer_id\""},
	AgentID:       whereHelperstring{field: "\"repair_agents\".\"agent_id\""},
	Status:        whereHelperstring{field: "\"repair_agents\".\"status\""},
	Progress:      whereHelperint{field: "\"repair_agents\".\"progress\""},
	CompleteAt:    whereHelpernull_Time{field: "\"repair_agents\".\"complete_at\""},
	CreatedAt:     whereHelpertime_Time{field: "\"repair_agents\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"repair_agents\".\"updated_at\""},
	DeletedAt:     whereHelpernull_Time{field: "\"repair_agents\".\"deleted_at\""},
}

// RepairAgentRels is where relationship names are stored.
var RepairAgentRels = struct {
	Agent       string
	RepairOffer string
}{
	Agent:       "Agent",
	RepairOffer: "RepairOffer",
}

// repairAgentR is where relationships are stored.
type repairAgentR struct {
	Agent       *Player      `boiler:"Agent" boil:"Agent" json:"Agent" toml:"Agent" yaml:"Agent"`
	RepairOffer *RepairOffer `boiler:"RepairOffer" boil:"RepairOffer" json:"RepairOffer" toml:"RepairOffer" yaml:"RepairOffer"`
}

// NewStruct creates a new relationship struct
func (*repairAgentR) NewStruct() *repairAgentR {
	return &repairAgentR{}
}

// repairAgentL is where Load methods for each relationship are stored.
type repairAgentL struct{}

var (
	repairAgentAllColumns            = []string{"repair_offer_id", "agent_id", "status", "progress", "complete_at", "created_at", "updated_at", "deleted_at"}
	repairAgentColumnsWithoutDefault = []string{"repair_offer_id", "agent_id"}
	repairAgentColumnsWithDefault    = []string{"status", "progress", "complete_at", "created_at", "updated_at", "deleted_at"}
	repairAgentPrimaryKeyColumns     = []string{"repair_offer_id", "agent_id"}
	repairAgentGeneratedColumns      = []string{}
)

type (
	// RepairAgentSlice is an alias for a slice of pointers to RepairAgent.
	// This should almost always be used instead of []RepairAgent.
	RepairAgentSlice []*RepairAgent
	// RepairAgentHook is the signature for custom RepairAgent hook methods
	RepairAgentHook func(boil.Executor, *RepairAgent) error

	repairAgentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	repairAgentType                 = reflect.TypeOf(&RepairAgent{})
	repairAgentMapping              = queries.MakeStructMapping(repairAgentType)
	repairAgentPrimaryKeyMapping, _ = queries.BindMapping(repairAgentType, repairAgentMapping, repairAgentPrimaryKeyColumns)
	repairAgentInsertCacheMut       sync.RWMutex
	repairAgentInsertCache          = make(map[string]insertCache)
	repairAgentUpdateCacheMut       sync.RWMutex
	repairAgentUpdateCache          = make(map[string]updateCache)
	repairAgentUpsertCacheMut       sync.RWMutex
	repairAgentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var repairAgentAfterSelectHooks []RepairAgentHook

var repairAgentBeforeInsertHooks []RepairAgentHook
var repairAgentAfterInsertHooks []RepairAgentHook

var repairAgentBeforeUpdateHooks []RepairAgentHook
var repairAgentAfterUpdateHooks []RepairAgentHook

var repairAgentBeforeDeleteHooks []RepairAgentHook
var repairAgentAfterDeleteHooks []RepairAgentHook

var repairAgentBeforeUpsertHooks []RepairAgentHook
var repairAgentAfterUpsertHooks []RepairAgentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RepairAgent) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range repairAgentAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RepairAgent) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range repairAgentBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RepairAgent) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range repairAgentAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RepairAgent) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range repairAgentBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RepairAgent) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range repairAgentAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RepairAgent) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range repairAgentBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RepairAgent) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range repairAgentAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RepairAgent) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range repairAgentBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RepairAgent) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range repairAgentAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRepairAgentHook registers your hook function for all future operations.
func AddRepairAgentHook(hookPoint boil.HookPoint, repairAgentHook RepairAgentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		repairAgentAfterSelectHooks = append(repairAgentAfterSelectHooks, repairAgentHook)
	case boil.BeforeInsertHook:
		repairAgentBeforeInsertHooks = append(repairAgentBeforeInsertHooks, repairAgentHook)
	case boil.AfterInsertHook:
		repairAgentAfterInsertHooks = append(repairAgentAfterInsertHooks, repairAgentHook)
	case boil.BeforeUpdateHook:
		repairAgentBeforeUpdateHooks = append(repairAgentBeforeUpdateHooks, repairAgentHook)
	case boil.AfterUpdateHook:
		repairAgentAfterUpdateHooks = append(repairAgentAfterUpdateHooks, repairAgentHook)
	case boil.BeforeDeleteHook:
		repairAgentBeforeDeleteHooks = append(repairAgentBeforeDeleteHooks, repairAgentHook)
	case boil.AfterDeleteHook:
		repairAgentAfterDeleteHooks = append(repairAgentAfterDeleteHooks, repairAgentHook)
	case boil.BeforeUpsertHook:
		repairAgentBeforeUpsertHooks = append(repairAgentBeforeUpsertHooks, repairAgentHook)
	case boil.AfterUpsertHook:
		repairAgentAfterUpsertHooks = append(repairAgentAfterUpsertHooks, repairAgentHook)
	}
}

// One returns a single repairAgent record from the query.
func (q repairAgentQuery) One(exec boil.Executor) (*RepairAgent, error) {
	o := &RepairAgent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for repair_agents")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RepairAgent records from the query.
func (q repairAgentQuery) All(exec boil.Executor) (RepairAgentSlice, error) {
	var o []*RepairAgent

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to RepairAgent slice")
	}

	if len(repairAgentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RepairAgent records in the query.
func (q repairAgentQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count repair_agents rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q repairAgentQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if repair_agents exists")
	}

	return count > 0, nil
}

// Agent pointed to by the foreign key.
func (o *RepairAgent) Agent(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AgentID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// RepairOffer pointed to by the foreign key.
func (o *RepairAgent) RepairOffer(mods ...qm.QueryMod) repairOfferQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RepairOfferID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := RepairOffers(queryMods...)
	queries.SetFrom(query.Query, "\"repair_offers\"")

	return query
}

// LoadAgent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (repairAgentL) LoadAgent(e boil.Executor, singular bool, maybeRepairAgent interface{}, mods queries.Applicator) error {
	var slice []*RepairAgent
	var object *RepairAgent

	if singular {
		object = maybeRepairAgent.(*RepairAgent)
	} else {
		slice = *maybeRepairAgent.(*[]*RepairAgent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &repairAgentR{}
		}
		args = append(args, object.AgentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &repairAgentR{}
			}

			for _, a := range args {
				if a == obj.AgentID {
					continue Outer
				}
			}

			args = append(args, obj.AgentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(repairAgentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Agent = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.AgentRepairAgents = append(foreign.R.AgentRepairAgents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AgentID == foreign.ID {
				local.R.Agent = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.AgentRepairAgents = append(foreign.R.AgentRepairAgents, local)
				break
			}
		}
	}

	return nil
}

// LoadRepairOffer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (repairAgentL) LoadRepairOffer(e boil.Executor, singular bool, maybeRepairAgent interface{}, mods queries.Applicator) error {
	var slice []*RepairAgent
	var object *RepairAgent

	if singular {
		object = maybeRepairAgent.(*RepairAgent)
	} else {
		slice = *maybeRepairAgent.(*[]*RepairAgent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &repairAgentR{}
		}
		args = append(args, object.RepairOfferID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &repairAgentR{}
			}

			for _, a := range args {
				if a == obj.RepairOfferID {
					continue Outer
				}
			}

			args = append(args, obj.RepairOfferID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`repair_offers`),
		qm.WhereIn(`repair_offers.id in ?`, args...),
		qmhelper.WhereIsNull(`repair_offers.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RepairOffer")
	}

	var resultSlice []*RepairOffer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RepairOffer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for repair_offers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for repair_offers")
	}

	if len(repairAgentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RepairOffer = foreign
		if foreign.R == nil {
			foreign.R = &repairOfferR{}
		}
		foreign.R.RepairAgents = append(foreign.R.RepairAgents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RepairOfferID == foreign.ID {
				local.R.RepairOffer = foreign
				if foreign.R == nil {
					foreign.R = &repairOfferR{}
				}
				foreign.R.RepairAgents = append(foreign.R.RepairAgents, local)
				break
			}
		}
	}

	return nil
}

// SetAgent of the repairAgent to the related item.
// Sets o.R.Agent to related.
// Adds o to related.R.AgentRepairAgents.
func (o *RepairAgent) SetAgent(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"repair_agents\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"agent_id"}),
		strmangle.WhereClause("\"", "\"", 2, repairAgentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.RepairOfferID, o.AgentID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AgentID = related.ID
	if o.R == nil {
		o.R = &repairAgentR{
			Agent: related,
		}
	} else {
		o.R.Agent = related
	}

	if related.R == nil {
		related.R = &playerR{
			AgentRepairAgents: RepairAgentSlice{o},
		}
	} else {
		related.R.AgentRepairAgents = append(related.R.AgentRepairAgents, o)
	}

	return nil
}

// SetRepairOffer of the repairAgent to the related item.
// Sets o.R.RepairOffer to related.
// Adds o to related.R.RepairAgents.
func (o *RepairAgent) SetRepairOffer(exec boil.Executor, insert bool, related *RepairOffer) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"repair_agents\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"repair_offer_id"}),
		strmangle.WhereClause("\"", "\"", 2, repairAgentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.RepairOfferID, o.AgentID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RepairOfferID = related.ID
	if o.R == nil {
		o.R = &repairAgentR{
			RepairOffer: related,
		}
	} else {
		o.R.RepairOffer = related
	}

	if related.R == nil {
		related.R = &repairOfferR{
			RepairAgents: RepairAgentSlice{o},
		}
	} else {
		related.R.RepairAgents = append(related.R.RepairAgents, o)
	}

	return nil
}

// RepairAgents retrieves all the records using an executor.
func RepairAgents(mods ...qm.QueryMod) repairAgentQuery {
	mods = append(mods, qm.From("\"repair_agents\""), qmhelper.WhereIsNull("\"repair_agents\".\"deleted_at\""))
	return repairAgentQuery{NewQuery(mods...)}
}

// FindRepairAgent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRepairAgent(exec boil.Executor, repairOfferID string, agentID string, selectCols ...string) (*RepairAgent, error) {
	repairAgentObj := &RepairAgent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"repair_agents\" where \"repair_offer_id\"=$1 AND \"agent_id\"=$2 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, repairOfferID, agentID)

	err := q.Bind(nil, exec, repairAgentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from repair_agents")
	}

	if err = repairAgentObj.doAfterSelectHooks(exec); err != nil {
		return repairAgentObj, err
	}

	return repairAgentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RepairAgent) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no repair_agents provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(repairAgentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	repairAgentInsertCacheMut.RLock()
	cache, cached := repairAgentInsertCache[key]
	repairAgentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			repairAgentAllColumns,
			repairAgentColumnsWithDefault,
			repairAgentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(repairAgentType, repairAgentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(repairAgentType, repairAgentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"repair_agents\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"repair_agents\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into repair_agents")
	}

	if !cached {
		repairAgentInsertCacheMut.Lock()
		repairAgentInsertCache[key] = cache
		repairAgentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the RepairAgent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RepairAgent) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	repairAgentUpdateCacheMut.RLock()
	cache, cached := repairAgentUpdateCache[key]
	repairAgentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			repairAgentAllColumns,
			repairAgentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update repair_agents, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"repair_agents\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, repairAgentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(repairAgentType, repairAgentMapping, append(wl, repairAgentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update repair_agents row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for repair_agents")
	}

	if !cached {
		repairAgentUpdateCacheMut.Lock()
		repairAgentUpdateCache[key] = cache
		repairAgentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q repairAgentQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for repair_agents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for repair_agents")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RepairAgentSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repairAgentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"repair_agents\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, repairAgentPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in repairAgent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all repairAgent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RepairAgent) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no repair_agents provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(repairAgentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	repairAgentUpsertCacheMut.RLock()
	cache, cached := repairAgentUpsertCache[key]
	repairAgentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			repairAgentAllColumns,
			repairAgentColumnsWithDefault,
			repairAgentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			repairAgentAllColumns,
			repairAgentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert repair_agents, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(repairAgentPrimaryKeyColumns))
			copy(conflict, repairAgentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"repair_agents\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(repairAgentType, repairAgentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(repairAgentType, repairAgentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert repair_agents")
	}

	if !cached {
		repairAgentUpsertCacheMut.Lock()
		repairAgentUpsertCache[key] = cache
		repairAgentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single RepairAgent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RepairAgent) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no RepairAgent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), repairAgentPrimaryKeyMapping)
		sql = "DELETE FROM \"repair_agents\" WHERE \"repair_offer_id\"=$1 AND \"agent_id\"=$2"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"repair_agents\" SET %s WHERE \"repair_offer_id\"=$2 AND \"agent_id\"=$3",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(repairAgentType, repairAgentMapping, append(wl, repairAgentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from repair_agents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for repair_agents")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q repairAgentQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no repairAgentQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from repair_agents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for repair_agents")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RepairAgentSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(repairAgentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repairAgentPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"repair_agents\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, repairAgentPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repairAgentPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"repair_agents\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, repairAgentPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from repairAgent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for repair_agents")
	}

	if len(repairAgentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RepairAgent) Reload(exec boil.Executor) error {
	ret, err := FindRepairAgent(exec, o.RepairOfferID, o.AgentID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RepairAgentSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RepairAgentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repairAgentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"repair_agents\".* FROM \"repair_agents\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, repairAgentPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in RepairAgentSlice")
	}

	*o = slice

	return nil
}

// RepairAgentExists checks if the RepairAgent row exists.
func RepairAgentExists(exec boil.Executor, repairOfferID string, agentID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"repair_agents\" where \"repair_offer_id\"=$1 AND \"agent_id\"=$2 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, repairOfferID, agentID)
	}
	row := exec.QueryRow(sql, repairOfferID, agentID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if repair_agents exists")
	}

	return exists, nil
}
