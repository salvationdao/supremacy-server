// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BattleHistory is an object representing the database table.
type BattleHistory struct {
	ID                      string      `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BattleID                string      `boiler:"battle_id" boil:"battle_id" json:"battle_id" toml:"battle_id" yaml:"battle_id"`
	BattleAbilityOfferingID null.String `boiler:"battle_ability_offering_id" boil:"battle_ability_offering_id" json:"battle_ability_offering_id,omitempty" toml:"battle_ability_offering_id" yaml:"battle_ability_offering_id,omitempty"`
	EventType               string      `boiler:"event_type" boil:"event_type" json:"event_type" toml:"event_type" yaml:"event_type"`
	CreatedAt               time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	WarMachineOneID         string      `boiler:"war_machine_one_id" boil:"war_machine_one_id" json:"war_machine_one_id" toml:"war_machine_one_id" yaml:"war_machine_one_id"`
	WarMachineTwoID         null.String `boiler:"war_machine_two_id" boil:"war_machine_two_id" json:"war_machine_two_id,omitempty" toml:"war_machine_two_id" yaml:"war_machine_two_id,omitempty"`
	PlayerAbilityOfferingID null.String `boiler:"player_ability_offering_id" boil:"player_ability_offering_id" json:"player_ability_offering_id,omitempty" toml:"player_ability_offering_id" yaml:"player_ability_offering_id,omitempty"`

	R *battleHistoryR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L battleHistoryL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattleHistoryColumns = struct {
	ID                      string
	BattleID                string
	BattleAbilityOfferingID string
	EventType               string
	CreatedAt               string
	WarMachineOneID         string
	WarMachineTwoID         string
	PlayerAbilityOfferingID string
}{
	ID:                      "id",
	BattleID:                "battle_id",
	BattleAbilityOfferingID: "battle_ability_offering_id",
	EventType:               "event_type",
	CreatedAt:               "created_at",
	WarMachineOneID:         "war_machine_one_id",
	WarMachineTwoID:         "war_machine_two_id",
	PlayerAbilityOfferingID: "player_ability_offering_id",
}

var BattleHistoryTableColumns = struct {
	ID                      string
	BattleID                string
	BattleAbilityOfferingID string
	EventType               string
	CreatedAt               string
	WarMachineOneID         string
	WarMachineTwoID         string
	PlayerAbilityOfferingID string
}{
	ID:                      "battle_history.id",
	BattleID:                "battle_history.battle_id",
	BattleAbilityOfferingID: "battle_history.battle_ability_offering_id",
	EventType:               "battle_history.event_type",
	CreatedAt:               "battle_history.created_at",
	WarMachineOneID:         "battle_history.war_machine_one_id",
	WarMachineTwoID:         "battle_history.war_machine_two_id",
	PlayerAbilityOfferingID: "battle_history.player_ability_offering_id",
}

// Generated where

var BattleHistoryWhere = struct {
	ID                      whereHelperstring
	BattleID                whereHelperstring
	BattleAbilityOfferingID whereHelpernull_String
	EventType               whereHelperstring
	CreatedAt               whereHelpertime_Time
	WarMachineOneID         whereHelperstring
	WarMachineTwoID         whereHelpernull_String
	PlayerAbilityOfferingID whereHelpernull_String
}{
	ID:                      whereHelperstring{field: "\"battle_history\".\"id\""},
	BattleID:                whereHelperstring{field: "\"battle_history\".\"battle_id\""},
	BattleAbilityOfferingID: whereHelpernull_String{field: "\"battle_history\".\"battle_ability_offering_id\""},
	EventType:               whereHelperstring{field: "\"battle_history\".\"event_type\""},
	CreatedAt:               whereHelpertime_Time{field: "\"battle_history\".\"created_at\""},
	WarMachineOneID:         whereHelperstring{field: "\"battle_history\".\"war_machine_one_id\""},
	WarMachineTwoID:         whereHelpernull_String{field: "\"battle_history\".\"war_machine_two_id\""},
	PlayerAbilityOfferingID: whereHelpernull_String{field: "\"battle_history\".\"player_ability_offering_id\""},
}

// BattleHistoryRels is where relationship names are stored.
var BattleHistoryRels = struct {
	Battle        string
	WarMachineOne string
	WarMachineTwo string
}{
	Battle:        "Battle",
	WarMachineOne: "WarMachineOne",
	WarMachineTwo: "WarMachineTwo",
}

// battleHistoryR is where relationships are stored.
type battleHistoryR struct {
	Battle        *Battle `boiler:"Battle" boil:"Battle" json:"Battle" toml:"Battle" yaml:"Battle"`
	WarMachineOne *Mech   `boiler:"WarMachineOne" boil:"WarMachineOne" json:"WarMachineOne" toml:"WarMachineOne" yaml:"WarMachineOne"`
	WarMachineTwo *Mech   `boiler:"WarMachineTwo" boil:"WarMachineTwo" json:"WarMachineTwo" toml:"WarMachineTwo" yaml:"WarMachineTwo"`
}

// NewStruct creates a new relationship struct
func (*battleHistoryR) NewStruct() *battleHistoryR {
	return &battleHistoryR{}
}

// battleHistoryL is where Load methods for each relationship are stored.
type battleHistoryL struct{}

var (
	battleHistoryAllColumns            = []string{"id", "battle_id", "battle_ability_offering_id", "event_type", "created_at", "war_machine_one_id", "war_machine_two_id", "player_ability_offering_id"}
	battleHistoryColumnsWithoutDefault = []string{"battle_id", "event_type", "war_machine_one_id"}
	battleHistoryColumnsWithDefault    = []string{"id", "battle_ability_offering_id", "created_at", "war_machine_two_id", "player_ability_offering_id"}
	battleHistoryPrimaryKeyColumns     = []string{"id"}
	battleHistoryGeneratedColumns      = []string{}
)

type (
	// BattleHistorySlice is an alias for a slice of pointers to BattleHistory.
	// This should almost always be used instead of []BattleHistory.
	BattleHistorySlice []*BattleHistory
	// BattleHistoryHook is the signature for custom BattleHistory hook methods
	BattleHistoryHook func(boil.Executor, *BattleHistory) error

	battleHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battleHistoryType                 = reflect.TypeOf(&BattleHistory{})
	battleHistoryMapping              = queries.MakeStructMapping(battleHistoryType)
	battleHistoryPrimaryKeyMapping, _ = queries.BindMapping(battleHistoryType, battleHistoryMapping, battleHistoryPrimaryKeyColumns)
	battleHistoryInsertCacheMut       sync.RWMutex
	battleHistoryInsertCache          = make(map[string]insertCache)
	battleHistoryUpdateCacheMut       sync.RWMutex
	battleHistoryUpdateCache          = make(map[string]updateCache)
	battleHistoryUpsertCacheMut       sync.RWMutex
	battleHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battleHistoryAfterSelectHooks []BattleHistoryHook

var battleHistoryBeforeInsertHooks []BattleHistoryHook
var battleHistoryAfterInsertHooks []BattleHistoryHook

var battleHistoryBeforeUpdateHooks []BattleHistoryHook
var battleHistoryAfterUpdateHooks []BattleHistoryHook

var battleHistoryBeforeDeleteHooks []BattleHistoryHook
var battleHistoryAfterDeleteHooks []BattleHistoryHook

var battleHistoryBeforeUpsertHooks []BattleHistoryHook
var battleHistoryAfterUpsertHooks []BattleHistoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BattleHistory) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range battleHistoryAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BattleHistory) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleHistoryBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BattleHistory) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleHistoryAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BattleHistory) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleHistoryBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BattleHistory) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleHistoryAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BattleHistory) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleHistoryBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BattleHistory) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleHistoryAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BattleHistory) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleHistoryBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BattleHistory) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleHistoryAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattleHistoryHook registers your hook function for all future operations.
func AddBattleHistoryHook(hookPoint boil.HookPoint, battleHistoryHook BattleHistoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		battleHistoryAfterSelectHooks = append(battleHistoryAfterSelectHooks, battleHistoryHook)
	case boil.BeforeInsertHook:
		battleHistoryBeforeInsertHooks = append(battleHistoryBeforeInsertHooks, battleHistoryHook)
	case boil.AfterInsertHook:
		battleHistoryAfterInsertHooks = append(battleHistoryAfterInsertHooks, battleHistoryHook)
	case boil.BeforeUpdateHook:
		battleHistoryBeforeUpdateHooks = append(battleHistoryBeforeUpdateHooks, battleHistoryHook)
	case boil.AfterUpdateHook:
		battleHistoryAfterUpdateHooks = append(battleHistoryAfterUpdateHooks, battleHistoryHook)
	case boil.BeforeDeleteHook:
		battleHistoryBeforeDeleteHooks = append(battleHistoryBeforeDeleteHooks, battleHistoryHook)
	case boil.AfterDeleteHook:
		battleHistoryAfterDeleteHooks = append(battleHistoryAfterDeleteHooks, battleHistoryHook)
	case boil.BeforeUpsertHook:
		battleHistoryBeforeUpsertHooks = append(battleHistoryBeforeUpsertHooks, battleHistoryHook)
	case boil.AfterUpsertHook:
		battleHistoryAfterUpsertHooks = append(battleHistoryAfterUpsertHooks, battleHistoryHook)
	}
}

// One returns a single battleHistory record from the query.
func (q battleHistoryQuery) One(exec boil.Executor) (*BattleHistory, error) {
	o := &BattleHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for battle_history")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BattleHistory records from the query.
func (q battleHistoryQuery) All(exec boil.Executor) (BattleHistorySlice, error) {
	var o []*BattleHistory

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BattleHistory slice")
	}

	if len(battleHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BattleHistory records in the query.
func (q battleHistoryQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count battle_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battleHistoryQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if battle_history exists")
	}

	return count > 0, nil
}

// Battle pointed to by the foreign key.
func (o *BattleHistory) Battle(mods ...qm.QueryMod) battleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BattleID),
	}

	queryMods = append(queryMods, mods...)

	query := Battles(queryMods...)
	queries.SetFrom(query.Query, "\"battles\"")

	return query
}

// WarMachineOne pointed to by the foreign key.
func (o *BattleHistory) WarMachineOne(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.WarMachineOneID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// WarMachineTwo pointed to by the foreign key.
func (o *BattleHistory) WarMachineTwo(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.WarMachineTwoID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// LoadBattle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleHistoryL) LoadBattle(e boil.Executor, singular bool, maybeBattleHistory interface{}, mods queries.Applicator) error {
	var slice []*BattleHistory
	var object *BattleHistory

	if singular {
		object = maybeBattleHistory.(*BattleHistory)
	} else {
		slice = *maybeBattleHistory.(*[]*BattleHistory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleHistoryR{}
		}
		args = append(args, object.BattleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleHistoryR{}
			}

			for _, a := range args {
				if a == obj.BattleID {
					continue Outer
				}
			}

			args = append(args, obj.BattleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battles`),
		qm.WhereIn(`battles.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Battle")
	}

	var resultSlice []*Battle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Battle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battles")
	}

	if len(battleHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Battle = foreign
		if foreign.R == nil {
			foreign.R = &battleR{}
		}
		foreign.R.BattleHistories = append(foreign.R.BattleHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BattleID == foreign.ID {
				local.R.Battle = foreign
				if foreign.R == nil {
					foreign.R = &battleR{}
				}
				foreign.R.BattleHistories = append(foreign.R.BattleHistories, local)
				break
			}
		}
	}

	return nil
}

// LoadWarMachineOne allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleHistoryL) LoadWarMachineOne(e boil.Executor, singular bool, maybeBattleHistory interface{}, mods queries.Applicator) error {
	var slice []*BattleHistory
	var object *BattleHistory

	if singular {
		object = maybeBattleHistory.(*BattleHistory)
	} else {
		slice = *maybeBattleHistory.(*[]*BattleHistory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleHistoryR{}
		}
		args = append(args, object.WarMachineOneID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleHistoryR{}
			}

			for _, a := range args {
				if a == obj.WarMachineOneID {
					continue Outer
				}
			}

			args = append(args, obj.WarMachineOneID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(battleHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.WarMachineOne = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.WarMachineOneBattleHistories = append(foreign.R.WarMachineOneBattleHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WarMachineOneID == foreign.ID {
				local.R.WarMachineOne = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.WarMachineOneBattleHistories = append(foreign.R.WarMachineOneBattleHistories, local)
				break
			}
		}
	}

	return nil
}

// LoadWarMachineTwo allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleHistoryL) LoadWarMachineTwo(e boil.Executor, singular bool, maybeBattleHistory interface{}, mods queries.Applicator) error {
	var slice []*BattleHistory
	var object *BattleHistory

	if singular {
		object = maybeBattleHistory.(*BattleHistory)
	} else {
		slice = *maybeBattleHistory.(*[]*BattleHistory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleHistoryR{}
		}
		if !queries.IsNil(object.WarMachineTwoID) {
			args = append(args, object.WarMachineTwoID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleHistoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.WarMachineTwoID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.WarMachineTwoID) {
				args = append(args, obj.WarMachineTwoID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(battleHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.WarMachineTwo = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.WarMachineTwoBattleHistories = append(foreign.R.WarMachineTwoBattleHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.WarMachineTwoID, foreign.ID) {
				local.R.WarMachineTwo = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.WarMachineTwoBattleHistories = append(foreign.R.WarMachineTwoBattleHistories, local)
				break
			}
		}
	}

	return nil
}

// SetBattle of the battleHistory to the related item.
// Sets o.R.Battle to related.
// Adds o to related.R.BattleHistories.
func (o *BattleHistory) SetBattle(exec boil.Executor, insert bool, related *Battle) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BattleID = related.ID
	if o.R == nil {
		o.R = &battleHistoryR{
			Battle: related,
		}
	} else {
		o.R.Battle = related
	}

	if related.R == nil {
		related.R = &battleR{
			BattleHistories: BattleHistorySlice{o},
		}
	} else {
		related.R.BattleHistories = append(related.R.BattleHistories, o)
	}

	return nil
}

// SetWarMachineOne of the battleHistory to the related item.
// Sets o.R.WarMachineOne to related.
// Adds o to related.R.WarMachineOneBattleHistories.
func (o *BattleHistory) SetWarMachineOne(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"war_machine_one_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.WarMachineOneID = related.ID
	if o.R == nil {
		o.R = &battleHistoryR{
			WarMachineOne: related,
		}
	} else {
		o.R.WarMachineOne = related
	}

	if related.R == nil {
		related.R = &mechR{
			WarMachineOneBattleHistories: BattleHistorySlice{o},
		}
	} else {
		related.R.WarMachineOneBattleHistories = append(related.R.WarMachineOneBattleHistories, o)
	}

	return nil
}

// SetWarMachineTwo of the battleHistory to the related item.
// Sets o.R.WarMachineTwo to related.
// Adds o to related.R.WarMachineTwoBattleHistories.
func (o *BattleHistory) SetWarMachineTwo(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"war_machine_two_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.WarMachineTwoID, related.ID)
	if o.R == nil {
		o.R = &battleHistoryR{
			WarMachineTwo: related,
		}
	} else {
		o.R.WarMachineTwo = related
	}

	if related.R == nil {
		related.R = &mechR{
			WarMachineTwoBattleHistories: BattleHistorySlice{o},
		}
	} else {
		related.R.WarMachineTwoBattleHistories = append(related.R.WarMachineTwoBattleHistories, o)
	}

	return nil
}

// RemoveWarMachineTwo relationship.
// Sets o.R.WarMachineTwo to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *BattleHistory) RemoveWarMachineTwo(exec boil.Executor, related *Mech) error {
	var err error

	queries.SetScanner(&o.WarMachineTwoID, nil)
	if _, err = o.Update(exec, boil.Whitelist("war_machine_two_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.WarMachineTwo = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.WarMachineTwoBattleHistories {
		if queries.Equal(o.WarMachineTwoID, ri.WarMachineTwoID) {
			continue
		}

		ln := len(related.R.WarMachineTwoBattleHistories)
		if ln > 1 && i < ln-1 {
			related.R.WarMachineTwoBattleHistories[i] = related.R.WarMachineTwoBattleHistories[ln-1]
		}
		related.R.WarMachineTwoBattleHistories = related.R.WarMachineTwoBattleHistories[:ln-1]
		break
	}
	return nil
}

// BattleHistories retrieves all the records using an executor.
func BattleHistories(mods ...qm.QueryMod) battleHistoryQuery {
	mods = append(mods, qm.From("\"battle_history\""))
	return battleHistoryQuery{NewQuery(mods...)}
}

// FindBattleHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattleHistory(exec boil.Executor, iD string, selectCols ...string) (*BattleHistory, error) {
	battleHistoryObj := &BattleHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battle_history\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, battleHistoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from battle_history")
	}

	if err = battleHistoryObj.doAfterSelectHooks(exec); err != nil {
		return battleHistoryObj, err
	}

	return battleHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BattleHistory) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_history provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battleHistoryInsertCacheMut.RLock()
	cache, cached := battleHistoryInsertCache[key]
	battleHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battleHistoryAllColumns,
			battleHistoryColumnsWithDefault,
			battleHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battleHistoryType, battleHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battleHistoryType, battleHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battle_history\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battle_history\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into battle_history")
	}

	if !cached {
		battleHistoryInsertCacheMut.Lock()
		battleHistoryInsertCache[key] = cache
		battleHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BattleHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BattleHistory) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battleHistoryUpdateCacheMut.RLock()
	cache, cached := battleHistoryUpdateCache[key]
	battleHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battleHistoryAllColumns,
			battleHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update battle_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battle_history\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battleHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battleHistoryType, battleHistoryMapping, append(wl, battleHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update battle_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for battle_history")
	}

	if !cached {
		battleHistoryUpdateCacheMut.Lock()
		battleHistoryUpdateCache[key] = cache
		battleHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battleHistoryQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for battle_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for battle_history")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattleHistorySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battle_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battleHistoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in battleHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all battleHistory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BattleHistory) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_history provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battleHistoryUpsertCacheMut.RLock()
	cache, cached := battleHistoryUpsertCache[key]
	battleHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battleHistoryAllColumns,
			battleHistoryColumnsWithDefault,
			battleHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			battleHistoryAllColumns,
			battleHistoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert battle_history, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battleHistoryPrimaryKeyColumns))
			copy(conflict, battleHistoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battle_history\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battleHistoryType, battleHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battleHistoryType, battleHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert battle_history")
	}

	if !cached {
		battleHistoryUpsertCacheMut.Lock()
		battleHistoryUpsertCache[key] = cache
		battleHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BattleHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BattleHistory) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BattleHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battleHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"battle_history\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from battle_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for battle_history")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battleHistoryQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no battleHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battle_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattleHistorySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(battleHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"battle_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleHistoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battleHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_history")
	}

	if len(battleHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BattleHistory) Reload(exec boil.Executor) error {
	ret, err := FindBattleHistory(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattleHistorySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattleHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battle_history\".* FROM \"battle_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BattleHistorySlice")
	}

	*o = slice

	return nil
}

// BattleHistoryExists checks if the BattleHistory row exists.
func BattleHistoryExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battle_history\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if battle_history exists")
	}

	return exists, nil
}
