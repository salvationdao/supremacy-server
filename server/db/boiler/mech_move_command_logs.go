// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MechMoveCommandLog is an object representing the database table.
type MechMoveCommandLog struct {
	ID            string          `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BattleID      string          `boiler:"battle_id" boil:"battle_id" json:"battle_id" toml:"battle_id" yaml:"battle_id"`
	MechID        string          `boiler:"mech_id" boil:"mech_id" json:"mech_id" toml:"mech_id" yaml:"mech_id"`
	TriggeredByID string          `boiler:"triggered_by_id" boil:"triggered_by_id" json:"triggered_by_id" toml:"triggered_by_id" yaml:"triggered_by_id"`
	CellX         decimal.Decimal `boiler:"cell_x" boil:"cell_x" json:"cell_x" toml:"cell_x" yaml:"cell_x"`
	CellY         decimal.Decimal `boiler:"cell_y" boil:"cell_y" json:"cell_y" toml:"cell_y" yaml:"cell_y"`
	CancelledAt   null.Time       `boiler:"cancelled_at" boil:"cancelled_at" json:"cancelled_at,omitempty" toml:"cancelled_at" yaml:"cancelled_at,omitempty"`
	ReachedAt     null.Time       `boiler:"reached_at" boil:"reached_at" json:"reached_at,omitempty" toml:"reached_at" yaml:"reached_at,omitempty"`
	CreatedAt     time.Time       `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time       `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt     null.Time       `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	IsMoving      bool            `boiler:"is_moving" boil:"is_moving" json:"is_moving" toml:"is_moving" yaml:"is_moving"`
	ArenaID       string          `boiler:"arena_id" boil:"arena_id" json:"arena_id" toml:"arena_id" yaml:"arena_id"`

	R *mechMoveCommandLogR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L mechMoveCommandLogL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MechMoveCommandLogColumns = struct {
	ID            string
	BattleID      string
	MechID        string
	TriggeredByID string
	CellX         string
	CellY         string
	CancelledAt   string
	ReachedAt     string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
	IsMoving      string
	ArenaID       string
}{
	ID:            "id",
	BattleID:      "battle_id",
	MechID:        "mech_id",
	TriggeredByID: "triggered_by_id",
	CellX:         "cell_x",
	CellY:         "cell_y",
	CancelledAt:   "cancelled_at",
	ReachedAt:     "reached_at",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	DeletedAt:     "deleted_at",
	IsMoving:      "is_moving",
	ArenaID:       "arena_id",
}

var MechMoveCommandLogTableColumns = struct {
	ID            string
	BattleID      string
	MechID        string
	TriggeredByID string
	CellX         string
	CellY         string
	CancelledAt   string
	ReachedAt     string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
	IsMoving      string
	ArenaID       string
}{
	ID:            "mech_move_command_logs.id",
	BattleID:      "mech_move_command_logs.battle_id",
	MechID:        "mech_move_command_logs.mech_id",
	TriggeredByID: "mech_move_command_logs.triggered_by_id",
	CellX:         "mech_move_command_logs.cell_x",
	CellY:         "mech_move_command_logs.cell_y",
	CancelledAt:   "mech_move_command_logs.cancelled_at",
	ReachedAt:     "mech_move_command_logs.reached_at",
	CreatedAt:     "mech_move_command_logs.created_at",
	UpdatedAt:     "mech_move_command_logs.updated_at",
	DeletedAt:     "mech_move_command_logs.deleted_at",
	IsMoving:      "mech_move_command_logs.is_moving",
	ArenaID:       "mech_move_command_logs.arena_id",
}

// Generated where

var MechMoveCommandLogWhere = struct {
	ID            whereHelperstring
	BattleID      whereHelperstring
	MechID        whereHelperstring
	TriggeredByID whereHelperstring
	CellX         whereHelperdecimal_Decimal
	CellY         whereHelperdecimal_Decimal
	CancelledAt   whereHelpernull_Time
	ReachedAt     whereHelpernull_Time
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	DeletedAt     whereHelpernull_Time
	IsMoving      whereHelperbool
	ArenaID       whereHelperstring
}{
	ID:            whereHelperstring{field: "\"mech_move_command_logs\".\"id\""},
	BattleID:      whereHelperstring{field: "\"mech_move_command_logs\".\"battle_id\""},
	MechID:        whereHelperstring{field: "\"mech_move_command_logs\".\"mech_id\""},
	TriggeredByID: whereHelperstring{field: "\"mech_move_command_logs\".\"triggered_by_id\""},
	CellX:         whereHelperdecimal_Decimal{field: "\"mech_move_command_logs\".\"cell_x\""},
	CellY:         whereHelperdecimal_Decimal{field: "\"mech_move_command_logs\".\"cell_y\""},
	CancelledAt:   whereHelpernull_Time{field: "\"mech_move_command_logs\".\"cancelled_at\""},
	ReachedAt:     whereHelpernull_Time{field: "\"mech_move_command_logs\".\"reached_at\""},
	CreatedAt:     whereHelpertime_Time{field: "\"mech_move_command_logs\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"mech_move_command_logs\".\"updated_at\""},
	DeletedAt:     whereHelpernull_Time{field: "\"mech_move_command_logs\".\"deleted_at\""},
	IsMoving:      whereHelperbool{field: "\"mech_move_command_logs\".\"is_moving\""},
	ArenaID:       whereHelperstring{field: "\"mech_move_command_logs\".\"arena_id\""},
}

// MechMoveCommandLogRels is where relationship names are stored.
var MechMoveCommandLogRels = struct {
	Arena       string
	Battle      string
	Mech        string
	TriggeredBy string
}{
	Arena:       "Arena",
	Battle:      "Battle",
	Mech:        "Mech",
	TriggeredBy: "TriggeredBy",
}

// mechMoveCommandLogR is where relationships are stored.
type mechMoveCommandLogR struct {
	Arena       *BattleArena `boiler:"Arena" boil:"Arena" json:"Arena" toml:"Arena" yaml:"Arena"`
	Battle      *Battle      `boiler:"Battle" boil:"Battle" json:"Battle" toml:"Battle" yaml:"Battle"`
	Mech        *Mech        `boiler:"Mech" boil:"Mech" json:"Mech" toml:"Mech" yaml:"Mech"`
	TriggeredBy *Player      `boiler:"TriggeredBy" boil:"TriggeredBy" json:"TriggeredBy" toml:"TriggeredBy" yaml:"TriggeredBy"`
}

// NewStruct creates a new relationship struct
func (*mechMoveCommandLogR) NewStruct() *mechMoveCommandLogR {
	return &mechMoveCommandLogR{}
}

// mechMoveCommandLogL is where Load methods for each relationship are stored.
type mechMoveCommandLogL struct{}

var (
	mechMoveCommandLogAllColumns            = []string{"id", "battle_id", "mech_id", "triggered_by_id", "cell_x", "cell_y", "cancelled_at", "reached_at", "created_at", "updated_at", "deleted_at", "is_moving", "arena_id"}
	mechMoveCommandLogColumnsWithoutDefault = []string{"battle_id", "mech_id", "triggered_by_id", "cell_x", "cell_y", "arena_id"}
	mechMoveCommandLogColumnsWithDefault    = []string{"id", "cancelled_at", "reached_at", "created_at", "updated_at", "deleted_at", "is_moving"}
	mechMoveCommandLogPrimaryKeyColumns     = []string{"id"}
	mechMoveCommandLogGeneratedColumns      = []string{}
)

type (
	// MechMoveCommandLogSlice is an alias for a slice of pointers to MechMoveCommandLog.
	// This should almost always be used instead of []MechMoveCommandLog.
	MechMoveCommandLogSlice []*MechMoveCommandLog
	// MechMoveCommandLogHook is the signature for custom MechMoveCommandLog hook methods
	MechMoveCommandLogHook func(boil.Executor, *MechMoveCommandLog) error

	mechMoveCommandLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mechMoveCommandLogType                 = reflect.TypeOf(&MechMoveCommandLog{})
	mechMoveCommandLogMapping              = queries.MakeStructMapping(mechMoveCommandLogType)
	mechMoveCommandLogPrimaryKeyMapping, _ = queries.BindMapping(mechMoveCommandLogType, mechMoveCommandLogMapping, mechMoveCommandLogPrimaryKeyColumns)
	mechMoveCommandLogInsertCacheMut       sync.RWMutex
	mechMoveCommandLogInsertCache          = make(map[string]insertCache)
	mechMoveCommandLogUpdateCacheMut       sync.RWMutex
	mechMoveCommandLogUpdateCache          = make(map[string]updateCache)
	mechMoveCommandLogUpsertCacheMut       sync.RWMutex
	mechMoveCommandLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mechMoveCommandLogAfterSelectHooks []MechMoveCommandLogHook

var mechMoveCommandLogBeforeInsertHooks []MechMoveCommandLogHook
var mechMoveCommandLogAfterInsertHooks []MechMoveCommandLogHook

var mechMoveCommandLogBeforeUpdateHooks []MechMoveCommandLogHook
var mechMoveCommandLogAfterUpdateHooks []MechMoveCommandLogHook

var mechMoveCommandLogBeforeDeleteHooks []MechMoveCommandLogHook
var mechMoveCommandLogAfterDeleteHooks []MechMoveCommandLogHook

var mechMoveCommandLogBeforeUpsertHooks []MechMoveCommandLogHook
var mechMoveCommandLogAfterUpsertHooks []MechMoveCommandLogHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MechMoveCommandLog) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range mechMoveCommandLogAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MechMoveCommandLog) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechMoveCommandLogBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MechMoveCommandLog) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechMoveCommandLogAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MechMoveCommandLog) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechMoveCommandLogBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MechMoveCommandLog) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechMoveCommandLogAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MechMoveCommandLog) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechMoveCommandLogBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MechMoveCommandLog) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechMoveCommandLogAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MechMoveCommandLog) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechMoveCommandLogBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MechMoveCommandLog) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechMoveCommandLogAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMechMoveCommandLogHook registers your hook function for all future operations.
func AddMechMoveCommandLogHook(hookPoint boil.HookPoint, mechMoveCommandLogHook MechMoveCommandLogHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mechMoveCommandLogAfterSelectHooks = append(mechMoveCommandLogAfterSelectHooks, mechMoveCommandLogHook)
	case boil.BeforeInsertHook:
		mechMoveCommandLogBeforeInsertHooks = append(mechMoveCommandLogBeforeInsertHooks, mechMoveCommandLogHook)
	case boil.AfterInsertHook:
		mechMoveCommandLogAfterInsertHooks = append(mechMoveCommandLogAfterInsertHooks, mechMoveCommandLogHook)
	case boil.BeforeUpdateHook:
		mechMoveCommandLogBeforeUpdateHooks = append(mechMoveCommandLogBeforeUpdateHooks, mechMoveCommandLogHook)
	case boil.AfterUpdateHook:
		mechMoveCommandLogAfterUpdateHooks = append(mechMoveCommandLogAfterUpdateHooks, mechMoveCommandLogHook)
	case boil.BeforeDeleteHook:
		mechMoveCommandLogBeforeDeleteHooks = append(mechMoveCommandLogBeforeDeleteHooks, mechMoveCommandLogHook)
	case boil.AfterDeleteHook:
		mechMoveCommandLogAfterDeleteHooks = append(mechMoveCommandLogAfterDeleteHooks, mechMoveCommandLogHook)
	case boil.BeforeUpsertHook:
		mechMoveCommandLogBeforeUpsertHooks = append(mechMoveCommandLogBeforeUpsertHooks, mechMoveCommandLogHook)
	case boil.AfterUpsertHook:
		mechMoveCommandLogAfterUpsertHooks = append(mechMoveCommandLogAfterUpsertHooks, mechMoveCommandLogHook)
	}
}

// One returns a single mechMoveCommandLog record from the query.
func (q mechMoveCommandLogQuery) One(exec boil.Executor) (*MechMoveCommandLog, error) {
	o := &MechMoveCommandLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for mech_move_command_logs")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MechMoveCommandLog records from the query.
func (q mechMoveCommandLogQuery) All(exec boil.Executor) (MechMoveCommandLogSlice, error) {
	var o []*MechMoveCommandLog

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to MechMoveCommandLog slice")
	}

	if len(mechMoveCommandLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MechMoveCommandLog records in the query.
func (q mechMoveCommandLogQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count mech_move_command_logs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mechMoveCommandLogQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if mech_move_command_logs exists")
	}

	return count > 0, nil
}

// Arena pointed to by the foreign key.
func (o *MechMoveCommandLog) Arena(mods ...qm.QueryMod) battleArenaQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ArenaID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := BattleArenas(queryMods...)
	queries.SetFrom(query.Query, "\"battle_arena\"")

	return query
}

// Battle pointed to by the foreign key.
func (o *MechMoveCommandLog) Battle(mods ...qm.QueryMod) battleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BattleID),
	}

	queryMods = append(queryMods, mods...)

	query := Battles(queryMods...)
	queries.SetFrom(query.Query, "\"battles\"")

	return query
}

// Mech pointed to by the foreign key.
func (o *MechMoveCommandLog) Mech(mods ...qm.QueryMod) mechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MechID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Mechs(queryMods...)
	queries.SetFrom(query.Query, "\"mechs\"")

	return query
}

// TriggeredBy pointed to by the foreign key.
func (o *MechMoveCommandLog) TriggeredBy(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TriggeredByID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// LoadArena allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechMoveCommandLogL) LoadArena(e boil.Executor, singular bool, maybeMechMoveCommandLog interface{}, mods queries.Applicator) error {
	var slice []*MechMoveCommandLog
	var object *MechMoveCommandLog

	if singular {
		object = maybeMechMoveCommandLog.(*MechMoveCommandLog)
	} else {
		slice = *maybeMechMoveCommandLog.(*[]*MechMoveCommandLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechMoveCommandLogR{}
		}
		args = append(args, object.ArenaID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechMoveCommandLogR{}
			}

			for _, a := range args {
				if a == obj.ArenaID {
					continue Outer
				}
			}

			args = append(args, obj.ArenaID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_arena`),
		qm.WhereIn(`battle_arena.id in ?`, args...),
		qmhelper.WhereIsNull(`battle_arena.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BattleArena")
	}

	var resultSlice []*BattleArena
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BattleArena")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battle_arena")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_arena")
	}

	if len(mechMoveCommandLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Arena = foreign
		if foreign.R == nil {
			foreign.R = &battleArenaR{}
		}
		foreign.R.ArenaMechMoveCommandLogs = append(foreign.R.ArenaMechMoveCommandLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ArenaID == foreign.ID {
				local.R.Arena = foreign
				if foreign.R == nil {
					foreign.R = &battleArenaR{}
				}
				foreign.R.ArenaMechMoveCommandLogs = append(foreign.R.ArenaMechMoveCommandLogs, local)
				break
			}
		}
	}

	return nil
}

// LoadBattle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechMoveCommandLogL) LoadBattle(e boil.Executor, singular bool, maybeMechMoveCommandLog interface{}, mods queries.Applicator) error {
	var slice []*MechMoveCommandLog
	var object *MechMoveCommandLog

	if singular {
		object = maybeMechMoveCommandLog.(*MechMoveCommandLog)
	} else {
		slice = *maybeMechMoveCommandLog.(*[]*MechMoveCommandLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechMoveCommandLogR{}
		}
		args = append(args, object.BattleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechMoveCommandLogR{}
			}

			for _, a := range args {
				if a == obj.BattleID {
					continue Outer
				}
			}

			args = append(args, obj.BattleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battles`),
		qm.WhereIn(`battles.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Battle")
	}

	var resultSlice []*Battle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Battle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battles")
	}

	if len(mechMoveCommandLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Battle = foreign
		if foreign.R == nil {
			foreign.R = &battleR{}
		}
		foreign.R.MechMoveCommandLogs = append(foreign.R.MechMoveCommandLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BattleID == foreign.ID {
				local.R.Battle = foreign
				if foreign.R == nil {
					foreign.R = &battleR{}
				}
				foreign.R.MechMoveCommandLogs = append(foreign.R.MechMoveCommandLogs, local)
				break
			}
		}
	}

	return nil
}

// LoadMech allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechMoveCommandLogL) LoadMech(e boil.Executor, singular bool, maybeMechMoveCommandLog interface{}, mods queries.Applicator) error {
	var slice []*MechMoveCommandLog
	var object *MechMoveCommandLog

	if singular {
		object = maybeMechMoveCommandLog.(*MechMoveCommandLog)
	} else {
		slice = *maybeMechMoveCommandLog.(*[]*MechMoveCommandLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechMoveCommandLogR{}
		}
		args = append(args, object.MechID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechMoveCommandLogR{}
			}

			for _, a := range args {
				if a == obj.MechID {
					continue Outer
				}
			}

			args = append(args, obj.MechID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mechs`),
		qm.WhereIn(`mechs.id in ?`, args...),
		qmhelper.WhereIsNull(`mechs.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Mech")
	}

	var resultSlice []*Mech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Mech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mechs")
	}

	if len(mechMoveCommandLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Mech = foreign
		if foreign.R == nil {
			foreign.R = &mechR{}
		}
		foreign.R.MechMoveCommandLogs = append(foreign.R.MechMoveCommandLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MechID == foreign.ID {
				local.R.Mech = foreign
				if foreign.R == nil {
					foreign.R = &mechR{}
				}
				foreign.R.MechMoveCommandLogs = append(foreign.R.MechMoveCommandLogs, local)
				break
			}
		}
	}

	return nil
}

// LoadTriggeredBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechMoveCommandLogL) LoadTriggeredBy(e boil.Executor, singular bool, maybeMechMoveCommandLog interface{}, mods queries.Applicator) error {
	var slice []*MechMoveCommandLog
	var object *MechMoveCommandLog

	if singular {
		object = maybeMechMoveCommandLog.(*MechMoveCommandLog)
	} else {
		slice = *maybeMechMoveCommandLog.(*[]*MechMoveCommandLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechMoveCommandLogR{}
		}
		args = append(args, object.TriggeredByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechMoveCommandLogR{}
			}

			for _, a := range args {
				if a == obj.TriggeredByID {
					continue Outer
				}
			}

			args = append(args, obj.TriggeredByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(mechMoveCommandLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TriggeredBy = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.TriggeredByMechMoveCommandLogs = append(foreign.R.TriggeredByMechMoveCommandLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TriggeredByID == foreign.ID {
				local.R.TriggeredBy = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.TriggeredByMechMoveCommandLogs = append(foreign.R.TriggeredByMechMoveCommandLogs, local)
				break
			}
		}
	}

	return nil
}

// SetArena of the mechMoveCommandLog to the related item.
// Sets o.R.Arena to related.
// Adds o to related.R.ArenaMechMoveCommandLogs.
func (o *MechMoveCommandLog) SetArena(exec boil.Executor, insert bool, related *BattleArena) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mech_move_command_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"arena_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechMoveCommandLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ArenaID = related.ID
	if o.R == nil {
		o.R = &mechMoveCommandLogR{
			Arena: related,
		}
	} else {
		o.R.Arena = related
	}

	if related.R == nil {
		related.R = &battleArenaR{
			ArenaMechMoveCommandLogs: MechMoveCommandLogSlice{o},
		}
	} else {
		related.R.ArenaMechMoveCommandLogs = append(related.R.ArenaMechMoveCommandLogs, o)
	}

	return nil
}

// SetBattle of the mechMoveCommandLog to the related item.
// Sets o.R.Battle to related.
// Adds o to related.R.MechMoveCommandLogs.
func (o *MechMoveCommandLog) SetBattle(exec boil.Executor, insert bool, related *Battle) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mech_move_command_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"battle_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechMoveCommandLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BattleID = related.ID
	if o.R == nil {
		o.R = &mechMoveCommandLogR{
			Battle: related,
		}
	} else {
		o.R.Battle = related
	}

	if related.R == nil {
		related.R = &battleR{
			MechMoveCommandLogs: MechMoveCommandLogSlice{o},
		}
	} else {
		related.R.MechMoveCommandLogs = append(related.R.MechMoveCommandLogs, o)
	}

	return nil
}

// SetMech of the mechMoveCommandLog to the related item.
// Sets o.R.Mech to related.
// Adds o to related.R.MechMoveCommandLogs.
func (o *MechMoveCommandLog) SetMech(exec boil.Executor, insert bool, related *Mech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mech_move_command_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mech_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechMoveCommandLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MechID = related.ID
	if o.R == nil {
		o.R = &mechMoveCommandLogR{
			Mech: related,
		}
	} else {
		o.R.Mech = related
	}

	if related.R == nil {
		related.R = &mechR{
			MechMoveCommandLogs: MechMoveCommandLogSlice{o},
		}
	} else {
		related.R.MechMoveCommandLogs = append(related.R.MechMoveCommandLogs, o)
	}

	return nil
}

// SetTriggeredBy of the mechMoveCommandLog to the related item.
// Sets o.R.TriggeredBy to related.
// Adds o to related.R.TriggeredByMechMoveCommandLogs.
func (o *MechMoveCommandLog) SetTriggeredBy(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mech_move_command_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"triggered_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechMoveCommandLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TriggeredByID = related.ID
	if o.R == nil {
		o.R = &mechMoveCommandLogR{
			TriggeredBy: related,
		}
	} else {
		o.R.TriggeredBy = related
	}

	if related.R == nil {
		related.R = &playerR{
			TriggeredByMechMoveCommandLogs: MechMoveCommandLogSlice{o},
		}
	} else {
		related.R.TriggeredByMechMoveCommandLogs = append(related.R.TriggeredByMechMoveCommandLogs, o)
	}

	return nil
}

// MechMoveCommandLogs retrieves all the records using an executor.
func MechMoveCommandLogs(mods ...qm.QueryMod) mechMoveCommandLogQuery {
	mods = append(mods, qm.From("\"mech_move_command_logs\""), qmhelper.WhereIsNull("\"mech_move_command_logs\".\"deleted_at\""))
	return mechMoveCommandLogQuery{NewQuery(mods...)}
}

// FindMechMoveCommandLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMechMoveCommandLog(exec boil.Executor, iD string, selectCols ...string) (*MechMoveCommandLog, error) {
	mechMoveCommandLogObj := &MechMoveCommandLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mech_move_command_logs\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, mechMoveCommandLogObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from mech_move_command_logs")
	}

	if err = mechMoveCommandLogObj.doAfterSelectHooks(exec); err != nil {
		return mechMoveCommandLogObj, err
	}

	return mechMoveCommandLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MechMoveCommandLog) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mech_move_command_logs provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechMoveCommandLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mechMoveCommandLogInsertCacheMut.RLock()
	cache, cached := mechMoveCommandLogInsertCache[key]
	mechMoveCommandLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mechMoveCommandLogAllColumns,
			mechMoveCommandLogColumnsWithDefault,
			mechMoveCommandLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mechMoveCommandLogType, mechMoveCommandLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mechMoveCommandLogType, mechMoveCommandLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mech_move_command_logs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mech_move_command_logs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into mech_move_command_logs")
	}

	if !cached {
		mechMoveCommandLogInsertCacheMut.Lock()
		mechMoveCommandLogInsertCache[key] = cache
		mechMoveCommandLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the MechMoveCommandLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MechMoveCommandLog) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mechMoveCommandLogUpdateCacheMut.RLock()
	cache, cached := mechMoveCommandLogUpdateCache[key]
	mechMoveCommandLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mechMoveCommandLogAllColumns,
			mechMoveCommandLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update mech_move_command_logs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mech_move_command_logs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mechMoveCommandLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mechMoveCommandLogType, mechMoveCommandLogMapping, append(wl, mechMoveCommandLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update mech_move_command_logs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for mech_move_command_logs")
	}

	if !cached {
		mechMoveCommandLogUpdateCacheMut.Lock()
		mechMoveCommandLogUpdateCache[key] = cache
		mechMoveCommandLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mechMoveCommandLogQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for mech_move_command_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for mech_move_command_logs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MechMoveCommandLogSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechMoveCommandLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mech_move_command_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mechMoveCommandLogPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in mechMoveCommandLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all mechMoveCommandLog")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MechMoveCommandLog) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mech_move_command_logs provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechMoveCommandLogColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mechMoveCommandLogUpsertCacheMut.RLock()
	cache, cached := mechMoveCommandLogUpsertCache[key]
	mechMoveCommandLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mechMoveCommandLogAllColumns,
			mechMoveCommandLogColumnsWithDefault,
			mechMoveCommandLogColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mechMoveCommandLogAllColumns,
			mechMoveCommandLogPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert mech_move_command_logs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mechMoveCommandLogPrimaryKeyColumns))
			copy(conflict, mechMoveCommandLogPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mech_move_command_logs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mechMoveCommandLogType, mechMoveCommandLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mechMoveCommandLogType, mechMoveCommandLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert mech_move_command_logs")
	}

	if !cached {
		mechMoveCommandLogUpsertCacheMut.Lock()
		mechMoveCommandLogUpsertCache[key] = cache
		mechMoveCommandLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single MechMoveCommandLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MechMoveCommandLog) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no MechMoveCommandLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mechMoveCommandLogPrimaryKeyMapping)
		sql = "DELETE FROM \"mech_move_command_logs\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"mech_move_command_logs\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(mechMoveCommandLogType, mechMoveCommandLogMapping, append(wl, mechMoveCommandLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from mech_move_command_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for mech_move_command_logs")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mechMoveCommandLogQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no mechMoveCommandLogQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mech_move_command_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mech_move_command_logs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MechMoveCommandLogSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mechMoveCommandLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechMoveCommandLogPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"mech_move_command_logs\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechMoveCommandLogPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechMoveCommandLogPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"mech_move_command_logs\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, mechMoveCommandLogPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mechMoveCommandLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mech_move_command_logs")
	}

	if len(mechMoveCommandLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MechMoveCommandLog) Reload(exec boil.Executor) error {
	ret, err := FindMechMoveCommandLog(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MechMoveCommandLogSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MechMoveCommandLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechMoveCommandLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mech_move_command_logs\".* FROM \"mech_move_command_logs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechMoveCommandLogPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in MechMoveCommandLogSlice")
	}

	*o = slice

	return nil
}

// MechMoveCommandLogExists checks if the MechMoveCommandLog row exists.
func MechMoveCommandLogExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mech_move_command_logs\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if mech_move_command_logs exists")
	}

	return exists, nil
}
