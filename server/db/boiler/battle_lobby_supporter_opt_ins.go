// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BattleLobbySupporterOptIn is an object representing the database table.
type BattleLobbySupporterOptIn struct {
	ID            string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	SupporterID   string    `boiler:"supporter_id" boil:"supporter_id" json:"supporter_id" toml:"supporter_id" yaml:"supporter_id"`
	FactionID     string    `boiler:"faction_id" boil:"faction_id" json:"faction_id" toml:"faction_id" yaml:"faction_id"`
	BattleLobbyID string    `boiler:"battle_lobby_id" boil:"battle_lobby_id" json:"battle_lobby_id" toml:"battle_lobby_id" yaml:"battle_lobby_id"`
	DeletedAt     null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt     time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt     time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *battleLobbySupporterOptInR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L battleLobbySupporterOptInL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BattleLobbySupporterOptInColumns = struct {
	ID            string
	SupporterID   string
	FactionID     string
	BattleLobbyID string
	DeletedAt     string
	UpdatedAt     string
	CreatedAt     string
}{
	ID:            "id",
	SupporterID:   "supporter_id",
	FactionID:     "faction_id",
	BattleLobbyID: "battle_lobby_id",
	DeletedAt:     "deleted_at",
	UpdatedAt:     "updated_at",
	CreatedAt:     "created_at",
}

var BattleLobbySupporterOptInTableColumns = struct {
	ID            string
	SupporterID   string
	FactionID     string
	BattleLobbyID string
	DeletedAt     string
	UpdatedAt     string
	CreatedAt     string
}{
	ID:            "battle_lobby_supporter_opt_ins.id",
	SupporterID:   "battle_lobby_supporter_opt_ins.supporter_id",
	FactionID:     "battle_lobby_supporter_opt_ins.faction_id",
	BattleLobbyID: "battle_lobby_supporter_opt_ins.battle_lobby_id",
	DeletedAt:     "battle_lobby_supporter_opt_ins.deleted_at",
	UpdatedAt:     "battle_lobby_supporter_opt_ins.updated_at",
	CreatedAt:     "battle_lobby_supporter_opt_ins.created_at",
}

// Generated where

var BattleLobbySupporterOptInWhere = struct {
	ID            whereHelperstring
	SupporterID   whereHelperstring
	FactionID     whereHelperstring
	BattleLobbyID whereHelperstring
	DeletedAt     whereHelpernull_Time
	UpdatedAt     whereHelpertime_Time
	CreatedAt     whereHelpertime_Time
}{
	ID:            whereHelperstring{field: "\"battle_lobby_supporter_opt_ins\".\"id\""},
	SupporterID:   whereHelperstring{field: "\"battle_lobby_supporter_opt_ins\".\"supporter_id\""},
	FactionID:     whereHelperstring{field: "\"battle_lobby_supporter_opt_ins\".\"faction_id\""},
	BattleLobbyID: whereHelperstring{field: "\"battle_lobby_supporter_opt_ins\".\"battle_lobby_id\""},
	DeletedAt:     whereHelpernull_Time{field: "\"battle_lobby_supporter_opt_ins\".\"deleted_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"battle_lobby_supporter_opt_ins\".\"updated_at\""},
	CreatedAt:     whereHelpertime_Time{field: "\"battle_lobby_supporter_opt_ins\".\"created_at\""},
}

// BattleLobbySupporterOptInRels is where relationship names are stored.
var BattleLobbySupporterOptInRels = struct {
	BattleLobby string
	Faction     string
	Supporter   string
}{
	BattleLobby: "BattleLobby",
	Faction:     "Faction",
	Supporter:   "Supporter",
}

// battleLobbySupporterOptInR is where relationships are stored.
type battleLobbySupporterOptInR struct {
	BattleLobby *BattleLobby `boiler:"BattleLobby" boil:"BattleLobby" json:"BattleLobby" toml:"BattleLobby" yaml:"BattleLobby"`
	Faction     *Faction     `boiler:"Faction" boil:"Faction" json:"Faction" toml:"Faction" yaml:"Faction"`
	Supporter   *Player      `boiler:"Supporter" boil:"Supporter" json:"Supporter" toml:"Supporter" yaml:"Supporter"`
}

// NewStruct creates a new relationship struct
func (*battleLobbySupporterOptInR) NewStruct() *battleLobbySupporterOptInR {
	return &battleLobbySupporterOptInR{}
}

// battleLobbySupporterOptInL is where Load methods for each relationship are stored.
type battleLobbySupporterOptInL struct{}

var (
	battleLobbySupporterOptInAllColumns            = []string{"id", "supporter_id", "faction_id", "battle_lobby_id", "deleted_at", "updated_at", "created_at"}
	battleLobbySupporterOptInColumnsWithoutDefault = []string{"supporter_id", "faction_id", "battle_lobby_id"}
	battleLobbySupporterOptInColumnsWithDefault    = []string{"id", "deleted_at", "updated_at", "created_at"}
	battleLobbySupporterOptInPrimaryKeyColumns     = []string{"id"}
	battleLobbySupporterOptInGeneratedColumns      = []string{}
)

type (
	// BattleLobbySupporterOptInSlice is an alias for a slice of pointers to BattleLobbySupporterOptIn.
	// This should almost always be used instead of []BattleLobbySupporterOptIn.
	BattleLobbySupporterOptInSlice []*BattleLobbySupporterOptIn
	// BattleLobbySupporterOptInHook is the signature for custom BattleLobbySupporterOptIn hook methods
	BattleLobbySupporterOptInHook func(boil.Executor, *BattleLobbySupporterOptIn) error

	battleLobbySupporterOptInQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	battleLobbySupporterOptInType                 = reflect.TypeOf(&BattleLobbySupporterOptIn{})
	battleLobbySupporterOptInMapping              = queries.MakeStructMapping(battleLobbySupporterOptInType)
	battleLobbySupporterOptInPrimaryKeyMapping, _ = queries.BindMapping(battleLobbySupporterOptInType, battleLobbySupporterOptInMapping, battleLobbySupporterOptInPrimaryKeyColumns)
	battleLobbySupporterOptInInsertCacheMut       sync.RWMutex
	battleLobbySupporterOptInInsertCache          = make(map[string]insertCache)
	battleLobbySupporterOptInUpdateCacheMut       sync.RWMutex
	battleLobbySupporterOptInUpdateCache          = make(map[string]updateCache)
	battleLobbySupporterOptInUpsertCacheMut       sync.RWMutex
	battleLobbySupporterOptInUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var battleLobbySupporterOptInAfterSelectHooks []BattleLobbySupporterOptInHook

var battleLobbySupporterOptInBeforeInsertHooks []BattleLobbySupporterOptInHook
var battleLobbySupporterOptInAfterInsertHooks []BattleLobbySupporterOptInHook

var battleLobbySupporterOptInBeforeUpdateHooks []BattleLobbySupporterOptInHook
var battleLobbySupporterOptInAfterUpdateHooks []BattleLobbySupporterOptInHook

var battleLobbySupporterOptInBeforeDeleteHooks []BattleLobbySupporterOptInHook
var battleLobbySupporterOptInAfterDeleteHooks []BattleLobbySupporterOptInHook

var battleLobbySupporterOptInBeforeUpsertHooks []BattleLobbySupporterOptInHook
var battleLobbySupporterOptInAfterUpsertHooks []BattleLobbySupporterOptInHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BattleLobbySupporterOptIn) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbySupporterOptInAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BattleLobbySupporterOptIn) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbySupporterOptInBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BattleLobbySupporterOptIn) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbySupporterOptInAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BattleLobbySupporterOptIn) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbySupporterOptInBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BattleLobbySupporterOptIn) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbySupporterOptInAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BattleLobbySupporterOptIn) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbySupporterOptInBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BattleLobbySupporterOptIn) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbySupporterOptInAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BattleLobbySupporterOptIn) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbySupporterOptInBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BattleLobbySupporterOptIn) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range battleLobbySupporterOptInAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBattleLobbySupporterOptInHook registers your hook function for all future operations.
func AddBattleLobbySupporterOptInHook(hookPoint boil.HookPoint, battleLobbySupporterOptInHook BattleLobbySupporterOptInHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		battleLobbySupporterOptInAfterSelectHooks = append(battleLobbySupporterOptInAfterSelectHooks, battleLobbySupporterOptInHook)
	case boil.BeforeInsertHook:
		battleLobbySupporterOptInBeforeInsertHooks = append(battleLobbySupporterOptInBeforeInsertHooks, battleLobbySupporterOptInHook)
	case boil.AfterInsertHook:
		battleLobbySupporterOptInAfterInsertHooks = append(battleLobbySupporterOptInAfterInsertHooks, battleLobbySupporterOptInHook)
	case boil.BeforeUpdateHook:
		battleLobbySupporterOptInBeforeUpdateHooks = append(battleLobbySupporterOptInBeforeUpdateHooks, battleLobbySupporterOptInHook)
	case boil.AfterUpdateHook:
		battleLobbySupporterOptInAfterUpdateHooks = append(battleLobbySupporterOptInAfterUpdateHooks, battleLobbySupporterOptInHook)
	case boil.BeforeDeleteHook:
		battleLobbySupporterOptInBeforeDeleteHooks = append(battleLobbySupporterOptInBeforeDeleteHooks, battleLobbySupporterOptInHook)
	case boil.AfterDeleteHook:
		battleLobbySupporterOptInAfterDeleteHooks = append(battleLobbySupporterOptInAfterDeleteHooks, battleLobbySupporterOptInHook)
	case boil.BeforeUpsertHook:
		battleLobbySupporterOptInBeforeUpsertHooks = append(battleLobbySupporterOptInBeforeUpsertHooks, battleLobbySupporterOptInHook)
	case boil.AfterUpsertHook:
		battleLobbySupporterOptInAfterUpsertHooks = append(battleLobbySupporterOptInAfterUpsertHooks, battleLobbySupporterOptInHook)
	}
}

// One returns a single battleLobbySupporterOptIn record from the query.
func (q battleLobbySupporterOptInQuery) One(exec boil.Executor) (*BattleLobbySupporterOptIn, error) {
	o := &BattleLobbySupporterOptIn{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for battle_lobby_supporter_opt_ins")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BattleLobbySupporterOptIn records from the query.
func (q battleLobbySupporterOptInQuery) All(exec boil.Executor) (BattleLobbySupporterOptInSlice, error) {
	var o []*BattleLobbySupporterOptIn

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BattleLobbySupporterOptIn slice")
	}

	if len(battleLobbySupporterOptInAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BattleLobbySupporterOptIn records in the query.
func (q battleLobbySupporterOptInQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count battle_lobby_supporter_opt_ins rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q battleLobbySupporterOptInQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if battle_lobby_supporter_opt_ins exists")
	}

	return count > 0, nil
}

// BattleLobby pointed to by the foreign key.
func (o *BattleLobbySupporterOptIn) BattleLobby(mods ...qm.QueryMod) battleLobbyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BattleLobbyID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := BattleLobbies(queryMods...)
	queries.SetFrom(query.Query, "\"battle_lobbies\"")

	return query
}

// Faction pointed to by the foreign key.
func (o *BattleLobbySupporterOptIn) Faction(mods ...qm.QueryMod) factionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FactionID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Factions(queryMods...)
	queries.SetFrom(query.Query, "\"factions\"")

	return query
}

// Supporter pointed to by the foreign key.
func (o *BattleLobbySupporterOptIn) Supporter(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SupporterID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// LoadBattleLobby allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleLobbySupporterOptInL) LoadBattleLobby(e boil.Executor, singular bool, maybeBattleLobbySupporterOptIn interface{}, mods queries.Applicator) error {
	var slice []*BattleLobbySupporterOptIn
	var object *BattleLobbySupporterOptIn

	if singular {
		object = maybeBattleLobbySupporterOptIn.(*BattleLobbySupporterOptIn)
	} else {
		slice = *maybeBattleLobbySupporterOptIn.(*[]*BattleLobbySupporterOptIn)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleLobbySupporterOptInR{}
		}
		args = append(args, object.BattleLobbyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleLobbySupporterOptInR{}
			}

			for _, a := range args {
				if a == obj.BattleLobbyID {
					continue Outer
				}
			}

			args = append(args, obj.BattleLobbyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`battle_lobbies`),
		qm.WhereIn(`battle_lobbies.id in ?`, args...),
		qmhelper.WhereIsNull(`battle_lobbies.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BattleLobby")
	}

	var resultSlice []*BattleLobby
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BattleLobby")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for battle_lobbies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for battle_lobbies")
	}

	if len(battleLobbySupporterOptInAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BattleLobby = foreign
		if foreign.R == nil {
			foreign.R = &battleLobbyR{}
		}
		foreign.R.BattleLobbySupporterOptIns = append(foreign.R.BattleLobbySupporterOptIns, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BattleLobbyID == foreign.ID {
				local.R.BattleLobby = foreign
				if foreign.R == nil {
					foreign.R = &battleLobbyR{}
				}
				foreign.R.BattleLobbySupporterOptIns = append(foreign.R.BattleLobbySupporterOptIns, local)
				break
			}
		}
	}

	return nil
}

// LoadFaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleLobbySupporterOptInL) LoadFaction(e boil.Executor, singular bool, maybeBattleLobbySupporterOptIn interface{}, mods queries.Applicator) error {
	var slice []*BattleLobbySupporterOptIn
	var object *BattleLobbySupporterOptIn

	if singular {
		object = maybeBattleLobbySupporterOptIn.(*BattleLobbySupporterOptIn)
	} else {
		slice = *maybeBattleLobbySupporterOptIn.(*[]*BattleLobbySupporterOptIn)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleLobbySupporterOptInR{}
		}
		args = append(args, object.FactionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleLobbySupporterOptInR{}
			}

			for _, a := range args {
				if a == obj.FactionID {
					continue Outer
				}
			}

			args = append(args, obj.FactionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`factions`),
		qm.WhereIn(`factions.id in ?`, args...),
		qmhelper.WhereIsNull(`factions.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Faction")
	}

	var resultSlice []*Faction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Faction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for factions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for factions")
	}

	if len(battleLobbySupporterOptInAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Faction = foreign
		if foreign.R == nil {
			foreign.R = &factionR{}
		}
		foreign.R.BattleLobbySupporterOptIns = append(foreign.R.BattleLobbySupporterOptIns, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FactionID == foreign.ID {
				local.R.Faction = foreign
				if foreign.R == nil {
					foreign.R = &factionR{}
				}
				foreign.R.BattleLobbySupporterOptIns = append(foreign.R.BattleLobbySupporterOptIns, local)
				break
			}
		}
	}

	return nil
}

// LoadSupporter allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (battleLobbySupporterOptInL) LoadSupporter(e boil.Executor, singular bool, maybeBattleLobbySupporterOptIn interface{}, mods queries.Applicator) error {
	var slice []*BattleLobbySupporterOptIn
	var object *BattleLobbySupporterOptIn

	if singular {
		object = maybeBattleLobbySupporterOptIn.(*BattleLobbySupporterOptIn)
	} else {
		slice = *maybeBattleLobbySupporterOptIn.(*[]*BattleLobbySupporterOptIn)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &battleLobbySupporterOptInR{}
		}
		args = append(args, object.SupporterID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &battleLobbySupporterOptInR{}
			}

			for _, a := range args {
				if a == obj.SupporterID {
					continue Outer
				}
			}

			args = append(args, obj.SupporterID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(battleLobbySupporterOptInAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Supporter = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.SupporterBattleLobbySupporterOptIns = append(foreign.R.SupporterBattleLobbySupporterOptIns, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SupporterID == foreign.ID {
				local.R.Supporter = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.SupporterBattleLobbySupporterOptIns = append(foreign.R.SupporterBattleLobbySupporterOptIns, local)
				break
			}
		}
	}

	return nil
}

// SetBattleLobby of the battleLobbySupporterOptIn to the related item.
// Sets o.R.BattleLobby to related.
// Adds o to related.R.BattleLobbySupporterOptIns.
func (o *BattleLobbySupporterOptIn) SetBattleLobby(exec boil.Executor, insert bool, related *BattleLobby) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_lobby_supporter_opt_ins\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"battle_lobby_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleLobbySupporterOptInPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BattleLobbyID = related.ID
	if o.R == nil {
		o.R = &battleLobbySupporterOptInR{
			BattleLobby: related,
		}
	} else {
		o.R.BattleLobby = related
	}

	if related.R == nil {
		related.R = &battleLobbyR{
			BattleLobbySupporterOptIns: BattleLobbySupporterOptInSlice{o},
		}
	} else {
		related.R.BattleLobbySupporterOptIns = append(related.R.BattleLobbySupporterOptIns, o)
	}

	return nil
}

// SetFaction of the battleLobbySupporterOptIn to the related item.
// Sets o.R.Faction to related.
// Adds o to related.R.BattleLobbySupporterOptIns.
func (o *BattleLobbySupporterOptIn) SetFaction(exec boil.Executor, insert bool, related *Faction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_lobby_supporter_opt_ins\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"faction_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleLobbySupporterOptInPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FactionID = related.ID
	if o.R == nil {
		o.R = &battleLobbySupporterOptInR{
			Faction: related,
		}
	} else {
		o.R.Faction = related
	}

	if related.R == nil {
		related.R = &factionR{
			BattleLobbySupporterOptIns: BattleLobbySupporterOptInSlice{o},
		}
	} else {
		related.R.BattleLobbySupporterOptIns = append(related.R.BattleLobbySupporterOptIns, o)
	}

	return nil
}

// SetSupporter of the battleLobbySupporterOptIn to the related item.
// Sets o.R.Supporter to related.
// Adds o to related.R.SupporterBattleLobbySupporterOptIns.
func (o *BattleLobbySupporterOptIn) SetSupporter(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"battle_lobby_supporter_opt_ins\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"supporter_id"}),
		strmangle.WhereClause("\"", "\"", 2, battleLobbySupporterOptInPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SupporterID = related.ID
	if o.R == nil {
		o.R = &battleLobbySupporterOptInR{
			Supporter: related,
		}
	} else {
		o.R.Supporter = related
	}

	if related.R == nil {
		related.R = &playerR{
			SupporterBattleLobbySupporterOptIns: BattleLobbySupporterOptInSlice{o},
		}
	} else {
		related.R.SupporterBattleLobbySupporterOptIns = append(related.R.SupporterBattleLobbySupporterOptIns, o)
	}

	return nil
}

// BattleLobbySupporterOptIns retrieves all the records using an executor.
func BattleLobbySupporterOptIns(mods ...qm.QueryMod) battleLobbySupporterOptInQuery {
	mods = append(mods, qm.From("\"battle_lobby_supporter_opt_ins\""), qmhelper.WhereIsNull("\"battle_lobby_supporter_opt_ins\".\"deleted_at\""))
	return battleLobbySupporterOptInQuery{NewQuery(mods...)}
}

// FindBattleLobbySupporterOptIn retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBattleLobbySupporterOptIn(exec boil.Executor, iD string, selectCols ...string) (*BattleLobbySupporterOptIn, error) {
	battleLobbySupporterOptInObj := &BattleLobbySupporterOptIn{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"battle_lobby_supporter_opt_ins\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, battleLobbySupporterOptInObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from battle_lobby_supporter_opt_ins")
	}

	if err = battleLobbySupporterOptInObj.doAfterSelectHooks(exec); err != nil {
		return battleLobbySupporterOptInObj, err
	}

	return battleLobbySupporterOptInObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BattleLobbySupporterOptIn) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_lobby_supporter_opt_ins provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleLobbySupporterOptInColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	battleLobbySupporterOptInInsertCacheMut.RLock()
	cache, cached := battleLobbySupporterOptInInsertCache[key]
	battleLobbySupporterOptInInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			battleLobbySupporterOptInAllColumns,
			battleLobbySupporterOptInColumnsWithDefault,
			battleLobbySupporterOptInColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(battleLobbySupporterOptInType, battleLobbySupporterOptInMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(battleLobbySupporterOptInType, battleLobbySupporterOptInMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"battle_lobby_supporter_opt_ins\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"battle_lobby_supporter_opt_ins\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into battle_lobby_supporter_opt_ins")
	}

	if !cached {
		battleLobbySupporterOptInInsertCacheMut.Lock()
		battleLobbySupporterOptInInsertCache[key] = cache
		battleLobbySupporterOptInInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BattleLobbySupporterOptIn.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BattleLobbySupporterOptIn) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	battleLobbySupporterOptInUpdateCacheMut.RLock()
	cache, cached := battleLobbySupporterOptInUpdateCache[key]
	battleLobbySupporterOptInUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			battleLobbySupporterOptInAllColumns,
			battleLobbySupporterOptInPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update battle_lobby_supporter_opt_ins, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"battle_lobby_supporter_opt_ins\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, battleLobbySupporterOptInPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(battleLobbySupporterOptInType, battleLobbySupporterOptInMapping, append(wl, battleLobbySupporterOptInPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update battle_lobby_supporter_opt_ins row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for battle_lobby_supporter_opt_ins")
	}

	if !cached {
		battleLobbySupporterOptInUpdateCacheMut.Lock()
		battleLobbySupporterOptInUpdateCache[key] = cache
		battleLobbySupporterOptInUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q battleLobbySupporterOptInQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for battle_lobby_supporter_opt_ins")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for battle_lobby_supporter_opt_ins")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BattleLobbySupporterOptInSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleLobbySupporterOptInPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"battle_lobby_supporter_opt_ins\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, battleLobbySupporterOptInPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in battleLobbySupporterOptIn slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all battleLobbySupporterOptIn")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BattleLobbySupporterOptIn) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no battle_lobby_supporter_opt_ins provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(battleLobbySupporterOptInColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	battleLobbySupporterOptInUpsertCacheMut.RLock()
	cache, cached := battleLobbySupporterOptInUpsertCache[key]
	battleLobbySupporterOptInUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			battleLobbySupporterOptInAllColumns,
			battleLobbySupporterOptInColumnsWithDefault,
			battleLobbySupporterOptInColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			battleLobbySupporterOptInAllColumns,
			battleLobbySupporterOptInPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert battle_lobby_supporter_opt_ins, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(battleLobbySupporterOptInPrimaryKeyColumns))
			copy(conflict, battleLobbySupporterOptInPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"battle_lobby_supporter_opt_ins\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(battleLobbySupporterOptInType, battleLobbySupporterOptInMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(battleLobbySupporterOptInType, battleLobbySupporterOptInMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert battle_lobby_supporter_opt_ins")
	}

	if !cached {
		battleLobbySupporterOptInUpsertCacheMut.Lock()
		battleLobbySupporterOptInUpsertCache[key] = cache
		battleLobbySupporterOptInUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BattleLobbySupporterOptIn record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BattleLobbySupporterOptIn) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BattleLobbySupporterOptIn provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), battleLobbySupporterOptInPrimaryKeyMapping)
		sql = "DELETE FROM \"battle_lobby_supporter_opt_ins\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"battle_lobby_supporter_opt_ins\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(battleLobbySupporterOptInType, battleLobbySupporterOptInMapping, append(wl, battleLobbySupporterOptInPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from battle_lobby_supporter_opt_ins")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for battle_lobby_supporter_opt_ins")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q battleLobbySupporterOptInQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no battleLobbySupporterOptInQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battle_lobby_supporter_opt_ins")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_lobby_supporter_opt_ins")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BattleLobbySupporterOptInSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(battleLobbySupporterOptInBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleLobbySupporterOptInPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"battle_lobby_supporter_opt_ins\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleLobbySupporterOptInPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleLobbySupporterOptInPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"battle_lobby_supporter_opt_ins\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, battleLobbySupporterOptInPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from battleLobbySupporterOptIn slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for battle_lobby_supporter_opt_ins")
	}

	if len(battleLobbySupporterOptInAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BattleLobbySupporterOptIn) Reload(exec boil.Executor) error {
	ret, err := FindBattleLobbySupporterOptIn(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BattleLobbySupporterOptInSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BattleLobbySupporterOptInSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), battleLobbySupporterOptInPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"battle_lobby_supporter_opt_ins\".* FROM \"battle_lobby_supporter_opt_ins\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, battleLobbySupporterOptInPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BattleLobbySupporterOptInSlice")
	}

	*o = slice

	return nil
}

// BattleLobbySupporterOptInExists checks if the BattleLobbySupporterOptIn row exists.
func BattleLobbySupporterOptInExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"battle_lobby_supporter_opt_ins\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if battle_lobby_supporter_opt_ins exists")
	}

	return exists, nil
}
