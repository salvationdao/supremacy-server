// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MechModelSkinCompatibility is an object representing the database table.
type MechModelSkinCompatibility struct {
	BlueprintMechSkinID string      `boiler:"blueprint_mech_skin_id" boil:"blueprint_mech_skin_id" json:"blueprint_mech_skin_id" toml:"blueprint_mech_skin_id" yaml:"blueprint_mech_skin_id"`
	MechModelID         string      `boiler:"mech_model_id" boil:"mech_model_id" json:"mech_model_id" toml:"mech_model_id" yaml:"mech_model_id"`
	ImageURL            null.String `boiler:"image_url" boil:"image_url" json:"image_url,omitempty" toml:"image_url" yaml:"image_url,omitempty"`
	CardAnimationURL    null.String `boiler:"card_animation_url" boil:"card_animation_url" json:"card_animation_url,omitempty" toml:"card_animation_url" yaml:"card_animation_url,omitempty"`
	AvatarURL           null.String `boiler:"avatar_url" boil:"avatar_url" json:"avatar_url,omitempty" toml:"avatar_url" yaml:"avatar_url,omitempty"`
	LargeImageURL       null.String `boiler:"large_image_url" boil:"large_image_url" json:"large_image_url,omitempty" toml:"large_image_url" yaml:"large_image_url,omitempty"`
	BackgroundColor     null.String `boiler:"background_color" boil:"background_color" json:"background_color,omitempty" toml:"background_color" yaml:"background_color,omitempty"`
	AnimationURL        null.String `boiler:"animation_url" boil:"animation_url" json:"animation_url,omitempty" toml:"animation_url" yaml:"animation_url,omitempty"`
	YoutubeURL          null.String `boiler:"youtube_url" boil:"youtube_url" json:"youtube_url,omitempty" toml:"youtube_url" yaml:"youtube_url,omitempty"`
	DeletedAt           null.Time   `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt           time.Time   `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt           time.Time   `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *mechModelSkinCompatibilityR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L mechModelSkinCompatibilityL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MechModelSkinCompatibilityColumns = struct {
	BlueprintMechSkinID string
	MechModelID         string
	ImageURL            string
	CardAnimationURL    string
	AvatarURL           string
	LargeImageURL       string
	BackgroundColor     string
	AnimationURL        string
	YoutubeURL          string
	DeletedAt           string
	UpdatedAt           string
	CreatedAt           string
}{
	BlueprintMechSkinID: "blueprint_mech_skin_id",
	MechModelID:         "mech_model_id",
	ImageURL:            "image_url",
	CardAnimationURL:    "card_animation_url",
	AvatarURL:           "avatar_url",
	LargeImageURL:       "large_image_url",
	BackgroundColor:     "background_color",
	AnimationURL:        "animation_url",
	YoutubeURL:          "youtube_url",
	DeletedAt:           "deleted_at",
	UpdatedAt:           "updated_at",
	CreatedAt:           "created_at",
}

var MechModelSkinCompatibilityTableColumns = struct {
	BlueprintMechSkinID string
	MechModelID         string
	ImageURL            string
	CardAnimationURL    string
	AvatarURL           string
	LargeImageURL       string
	BackgroundColor     string
	AnimationURL        string
	YoutubeURL          string
	DeletedAt           string
	UpdatedAt           string
	CreatedAt           string
}{
	BlueprintMechSkinID: "mech_model_skin_compatibilities.blueprint_mech_skin_id",
	MechModelID:         "mech_model_skin_compatibilities.mech_model_id",
	ImageURL:            "mech_model_skin_compatibilities.image_url",
	CardAnimationURL:    "mech_model_skin_compatibilities.card_animation_url",
	AvatarURL:           "mech_model_skin_compatibilities.avatar_url",
	LargeImageURL:       "mech_model_skin_compatibilities.large_image_url",
	BackgroundColor:     "mech_model_skin_compatibilities.background_color",
	AnimationURL:        "mech_model_skin_compatibilities.animation_url",
	YoutubeURL:          "mech_model_skin_compatibilities.youtube_url",
	DeletedAt:           "mech_model_skin_compatibilities.deleted_at",
	UpdatedAt:           "mech_model_skin_compatibilities.updated_at",
	CreatedAt:           "mech_model_skin_compatibilities.created_at",
}

// Generated where

var MechModelSkinCompatibilityWhere = struct {
	BlueprintMechSkinID whereHelperstring
	MechModelID         whereHelperstring
	ImageURL            whereHelpernull_String
	CardAnimationURL    whereHelpernull_String
	AvatarURL           whereHelpernull_String
	LargeImageURL       whereHelpernull_String
	BackgroundColor     whereHelpernull_String
	AnimationURL        whereHelpernull_String
	YoutubeURL          whereHelpernull_String
	DeletedAt           whereHelpernull_Time
	UpdatedAt           whereHelpertime_Time
	CreatedAt           whereHelpertime_Time
}{
	BlueprintMechSkinID: whereHelperstring{field: "\"mech_model_skin_compatibilities\".\"blueprint_mech_skin_id\""},
	MechModelID:         whereHelperstring{field: "\"mech_model_skin_compatibilities\".\"mech_model_id\""},
	ImageURL:            whereHelpernull_String{field: "\"mech_model_skin_compatibilities\".\"image_url\""},
	CardAnimationURL:    whereHelpernull_String{field: "\"mech_model_skin_compatibilities\".\"card_animation_url\""},
	AvatarURL:           whereHelpernull_String{field: "\"mech_model_skin_compatibilities\".\"avatar_url\""},
	LargeImageURL:       whereHelpernull_String{field: "\"mech_model_skin_compatibilities\".\"large_image_url\""},
	BackgroundColor:     whereHelpernull_String{field: "\"mech_model_skin_compatibilities\".\"background_color\""},
	AnimationURL:        whereHelpernull_String{field: "\"mech_model_skin_compatibilities\".\"animation_url\""},
	YoutubeURL:          whereHelpernull_String{field: "\"mech_model_skin_compatibilities\".\"youtube_url\""},
	DeletedAt:           whereHelpernull_Time{field: "\"mech_model_skin_compatibilities\".\"deleted_at\""},
	UpdatedAt:           whereHelpertime_Time{field: "\"mech_model_skin_compatibilities\".\"updated_at\""},
	CreatedAt:           whereHelpertime_Time{field: "\"mech_model_skin_compatibilities\".\"created_at\""},
}

// MechModelSkinCompatibilityRels is where relationship names are stored.
var MechModelSkinCompatibilityRels = struct {
	BlueprintMechSkin string
	MechModel         string
}{
	BlueprintMechSkin: "BlueprintMechSkin",
	MechModel:         "MechModel",
}

// mechModelSkinCompatibilityR is where relationships are stored.
type mechModelSkinCompatibilityR struct {
	BlueprintMechSkin *BlueprintMechSkin `boiler:"BlueprintMechSkin" boil:"BlueprintMechSkin" json:"BlueprintMechSkin" toml:"BlueprintMechSkin" yaml:"BlueprintMechSkin"`
	MechModel         *BlueprintMech     `boiler:"MechModel" boil:"MechModel" json:"MechModel" toml:"MechModel" yaml:"MechModel"`
}

// NewStruct creates a new relationship struct
func (*mechModelSkinCompatibilityR) NewStruct() *mechModelSkinCompatibilityR {
	return &mechModelSkinCompatibilityR{}
}

// mechModelSkinCompatibilityL is where Load methods for each relationship are stored.
type mechModelSkinCompatibilityL struct{}

var (
	mechModelSkinCompatibilityAllColumns            = []string{"blueprint_mech_skin_id", "mech_model_id", "image_url", "card_animation_url", "avatar_url", "large_image_url", "background_color", "animation_url", "youtube_url", "deleted_at", "updated_at", "created_at"}
	mechModelSkinCompatibilityColumnsWithoutDefault = []string{"blueprint_mech_skin_id", "mech_model_id"}
	mechModelSkinCompatibilityColumnsWithDefault    = []string{"image_url", "card_animation_url", "avatar_url", "large_image_url", "background_color", "animation_url", "youtube_url", "deleted_at", "updated_at", "created_at"}
	mechModelSkinCompatibilityPrimaryKeyColumns     = []string{"blueprint_mech_skin_id", "mech_model_id"}
	mechModelSkinCompatibilityGeneratedColumns      = []string{}
)

type (
	// MechModelSkinCompatibilitySlice is an alias for a slice of pointers to MechModelSkinCompatibility.
	// This should almost always be used instead of []MechModelSkinCompatibility.
	MechModelSkinCompatibilitySlice []*MechModelSkinCompatibility
	// MechModelSkinCompatibilityHook is the signature for custom MechModelSkinCompatibility hook methods
	MechModelSkinCompatibilityHook func(boil.Executor, *MechModelSkinCompatibility) error

	mechModelSkinCompatibilityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mechModelSkinCompatibilityType                 = reflect.TypeOf(&MechModelSkinCompatibility{})
	mechModelSkinCompatibilityMapping              = queries.MakeStructMapping(mechModelSkinCompatibilityType)
	mechModelSkinCompatibilityPrimaryKeyMapping, _ = queries.BindMapping(mechModelSkinCompatibilityType, mechModelSkinCompatibilityMapping, mechModelSkinCompatibilityPrimaryKeyColumns)
	mechModelSkinCompatibilityInsertCacheMut       sync.RWMutex
	mechModelSkinCompatibilityInsertCache          = make(map[string]insertCache)
	mechModelSkinCompatibilityUpdateCacheMut       sync.RWMutex
	mechModelSkinCompatibilityUpdateCache          = make(map[string]updateCache)
	mechModelSkinCompatibilityUpsertCacheMut       sync.RWMutex
	mechModelSkinCompatibilityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mechModelSkinCompatibilityAfterSelectHooks []MechModelSkinCompatibilityHook

var mechModelSkinCompatibilityBeforeInsertHooks []MechModelSkinCompatibilityHook
var mechModelSkinCompatibilityAfterInsertHooks []MechModelSkinCompatibilityHook

var mechModelSkinCompatibilityBeforeUpdateHooks []MechModelSkinCompatibilityHook
var mechModelSkinCompatibilityAfterUpdateHooks []MechModelSkinCompatibilityHook

var mechModelSkinCompatibilityBeforeDeleteHooks []MechModelSkinCompatibilityHook
var mechModelSkinCompatibilityAfterDeleteHooks []MechModelSkinCompatibilityHook

var mechModelSkinCompatibilityBeforeUpsertHooks []MechModelSkinCompatibilityHook
var mechModelSkinCompatibilityAfterUpsertHooks []MechModelSkinCompatibilityHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MechModelSkinCompatibility) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range mechModelSkinCompatibilityAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MechModelSkinCompatibility) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechModelSkinCompatibilityBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MechModelSkinCompatibility) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechModelSkinCompatibilityAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MechModelSkinCompatibility) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechModelSkinCompatibilityBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MechModelSkinCompatibility) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mechModelSkinCompatibilityAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MechModelSkinCompatibility) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechModelSkinCompatibilityBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MechModelSkinCompatibility) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mechModelSkinCompatibilityAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MechModelSkinCompatibility) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechModelSkinCompatibilityBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MechModelSkinCompatibility) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mechModelSkinCompatibilityAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMechModelSkinCompatibilityHook registers your hook function for all future operations.
func AddMechModelSkinCompatibilityHook(hookPoint boil.HookPoint, mechModelSkinCompatibilityHook MechModelSkinCompatibilityHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mechModelSkinCompatibilityAfterSelectHooks = append(mechModelSkinCompatibilityAfterSelectHooks, mechModelSkinCompatibilityHook)
	case boil.BeforeInsertHook:
		mechModelSkinCompatibilityBeforeInsertHooks = append(mechModelSkinCompatibilityBeforeInsertHooks, mechModelSkinCompatibilityHook)
	case boil.AfterInsertHook:
		mechModelSkinCompatibilityAfterInsertHooks = append(mechModelSkinCompatibilityAfterInsertHooks, mechModelSkinCompatibilityHook)
	case boil.BeforeUpdateHook:
		mechModelSkinCompatibilityBeforeUpdateHooks = append(mechModelSkinCompatibilityBeforeUpdateHooks, mechModelSkinCompatibilityHook)
	case boil.AfterUpdateHook:
		mechModelSkinCompatibilityAfterUpdateHooks = append(mechModelSkinCompatibilityAfterUpdateHooks, mechModelSkinCompatibilityHook)
	case boil.BeforeDeleteHook:
		mechModelSkinCompatibilityBeforeDeleteHooks = append(mechModelSkinCompatibilityBeforeDeleteHooks, mechModelSkinCompatibilityHook)
	case boil.AfterDeleteHook:
		mechModelSkinCompatibilityAfterDeleteHooks = append(mechModelSkinCompatibilityAfterDeleteHooks, mechModelSkinCompatibilityHook)
	case boil.BeforeUpsertHook:
		mechModelSkinCompatibilityBeforeUpsertHooks = append(mechModelSkinCompatibilityBeforeUpsertHooks, mechModelSkinCompatibilityHook)
	case boil.AfterUpsertHook:
		mechModelSkinCompatibilityAfterUpsertHooks = append(mechModelSkinCompatibilityAfterUpsertHooks, mechModelSkinCompatibilityHook)
	}
}

// One returns a single mechModelSkinCompatibility record from the query.
func (q mechModelSkinCompatibilityQuery) One(exec boil.Executor) (*MechModelSkinCompatibility, error) {
	o := &MechModelSkinCompatibility{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for mech_model_skin_compatibilities")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MechModelSkinCompatibility records from the query.
func (q mechModelSkinCompatibilityQuery) All(exec boil.Executor) (MechModelSkinCompatibilitySlice, error) {
	var o []*MechModelSkinCompatibility

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to MechModelSkinCompatibility slice")
	}

	if len(mechModelSkinCompatibilityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MechModelSkinCompatibility records in the query.
func (q mechModelSkinCompatibilityQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count mech_model_skin_compatibilities rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mechModelSkinCompatibilityQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if mech_model_skin_compatibilities exists")
	}

	return count > 0, nil
}

// BlueprintMechSkin pointed to by the foreign key.
func (o *MechModelSkinCompatibility) BlueprintMechSkin(mods ...qm.QueryMod) blueprintMechSkinQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BlueprintMechSkinID),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintMechSkins(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_mech_skin\"")

	return query
}

// MechModel pointed to by the foreign key.
func (o *MechModelSkinCompatibility) MechModel(mods ...qm.QueryMod) blueprintMechQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MechModelID),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintMechs(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_mechs\"")

	return query
}

// LoadBlueprintMechSkin allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechModelSkinCompatibilityL) LoadBlueprintMechSkin(e boil.Executor, singular bool, maybeMechModelSkinCompatibility interface{}, mods queries.Applicator) error {
	var slice []*MechModelSkinCompatibility
	var object *MechModelSkinCompatibility

	if singular {
		object = maybeMechModelSkinCompatibility.(*MechModelSkinCompatibility)
	} else {
		slice = *maybeMechModelSkinCompatibility.(*[]*MechModelSkinCompatibility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechModelSkinCompatibilityR{}
		}
		args = append(args, object.BlueprintMechSkinID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechModelSkinCompatibilityR{}
			}

			for _, a := range args {
				if a == obj.BlueprintMechSkinID {
					continue Outer
				}
			}

			args = append(args, obj.BlueprintMechSkinID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_mech_skin`),
		qm.WhereIn(`blueprint_mech_skin.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintMechSkin")
	}

	var resultSlice []*BlueprintMechSkin
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintMechSkin")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_mech_skin")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_mech_skin")
	}

	if len(mechModelSkinCompatibilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BlueprintMechSkin = foreign
		if foreign.R == nil {
			foreign.R = &blueprintMechSkinR{}
		}
		foreign.R.MechModelSkinCompatibilities = append(foreign.R.MechModelSkinCompatibilities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlueprintMechSkinID == foreign.ID {
				local.R.BlueprintMechSkin = foreign
				if foreign.R == nil {
					foreign.R = &blueprintMechSkinR{}
				}
				foreign.R.MechModelSkinCompatibilities = append(foreign.R.MechModelSkinCompatibilities, local)
				break
			}
		}
	}

	return nil
}

// LoadMechModel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mechModelSkinCompatibilityL) LoadMechModel(e boil.Executor, singular bool, maybeMechModelSkinCompatibility interface{}, mods queries.Applicator) error {
	var slice []*MechModelSkinCompatibility
	var object *MechModelSkinCompatibility

	if singular {
		object = maybeMechModelSkinCompatibility.(*MechModelSkinCompatibility)
	} else {
		slice = *maybeMechModelSkinCompatibility.(*[]*MechModelSkinCompatibility)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mechModelSkinCompatibilityR{}
		}
		args = append(args, object.MechModelID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mechModelSkinCompatibilityR{}
			}

			for _, a := range args {
				if a == obj.MechModelID {
					continue Outer
				}
			}

			args = append(args, obj.MechModelID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_mechs`),
		qm.WhereIn(`blueprint_mechs.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintMech")
	}

	var resultSlice []*BlueprintMech
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintMech")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_mechs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_mechs")
	}

	if len(mechModelSkinCompatibilityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MechModel = foreign
		if foreign.R == nil {
			foreign.R = &blueprintMechR{}
		}
		foreign.R.MechModelMechModelSkinCompatibilities = append(foreign.R.MechModelMechModelSkinCompatibilities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MechModelID == foreign.ID {
				local.R.MechModel = foreign
				if foreign.R == nil {
					foreign.R = &blueprintMechR{}
				}
				foreign.R.MechModelMechModelSkinCompatibilities = append(foreign.R.MechModelMechModelSkinCompatibilities, local)
				break
			}
		}
	}

	return nil
}

// SetBlueprintMechSkin of the mechModelSkinCompatibility to the related item.
// Sets o.R.BlueprintMechSkin to related.
// Adds o to related.R.MechModelSkinCompatibilities.
func (o *MechModelSkinCompatibility) SetBlueprintMechSkin(exec boil.Executor, insert bool, related *BlueprintMechSkin) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mech_model_skin_compatibilities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_mech_skin_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechModelSkinCompatibilityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.BlueprintMechSkinID, o.MechModelID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlueprintMechSkinID = related.ID
	if o.R == nil {
		o.R = &mechModelSkinCompatibilityR{
			BlueprintMechSkin: related,
		}
	} else {
		o.R.BlueprintMechSkin = related
	}

	if related.R == nil {
		related.R = &blueprintMechSkinR{
			MechModelSkinCompatibilities: MechModelSkinCompatibilitySlice{o},
		}
	} else {
		related.R.MechModelSkinCompatibilities = append(related.R.MechModelSkinCompatibilities, o)
	}

	return nil
}

// SetMechModel of the mechModelSkinCompatibility to the related item.
// Sets o.R.MechModel to related.
// Adds o to related.R.MechModelMechModelSkinCompatibilities.
func (o *MechModelSkinCompatibility) SetMechModel(exec boil.Executor, insert bool, related *BlueprintMech) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mech_model_skin_compatibilities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"mech_model_id"}),
		strmangle.WhereClause("\"", "\"", 2, mechModelSkinCompatibilityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.BlueprintMechSkinID, o.MechModelID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MechModelID = related.ID
	if o.R == nil {
		o.R = &mechModelSkinCompatibilityR{
			MechModel: related,
		}
	} else {
		o.R.MechModel = related
	}

	if related.R == nil {
		related.R = &blueprintMechR{
			MechModelMechModelSkinCompatibilities: MechModelSkinCompatibilitySlice{o},
		}
	} else {
		related.R.MechModelMechModelSkinCompatibilities = append(related.R.MechModelMechModelSkinCompatibilities, o)
	}

	return nil
}

// MechModelSkinCompatibilities retrieves all the records using an executor.
func MechModelSkinCompatibilities(mods ...qm.QueryMod) mechModelSkinCompatibilityQuery {
	mods = append(mods, qm.From("\"mech_model_skin_compatibilities\""), qmhelper.WhereIsNull("\"mech_model_skin_compatibilities\".\"deleted_at\""))
	return mechModelSkinCompatibilityQuery{NewQuery(mods...)}
}

// FindMechModelSkinCompatibility retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMechModelSkinCompatibility(exec boil.Executor, blueprintMechSkinID string, mechModelID string, selectCols ...string) (*MechModelSkinCompatibility, error) {
	mechModelSkinCompatibilityObj := &MechModelSkinCompatibility{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mech_model_skin_compatibilities\" where \"blueprint_mech_skin_id\"=$1 AND \"mech_model_id\"=$2 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, blueprintMechSkinID, mechModelID)

	err := q.Bind(nil, exec, mechModelSkinCompatibilityObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from mech_model_skin_compatibilities")
	}

	if err = mechModelSkinCompatibilityObj.doAfterSelectHooks(exec); err != nil {
		return mechModelSkinCompatibilityObj, err
	}

	return mechModelSkinCompatibilityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MechModelSkinCompatibility) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mech_model_skin_compatibilities provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechModelSkinCompatibilityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mechModelSkinCompatibilityInsertCacheMut.RLock()
	cache, cached := mechModelSkinCompatibilityInsertCache[key]
	mechModelSkinCompatibilityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mechModelSkinCompatibilityAllColumns,
			mechModelSkinCompatibilityColumnsWithDefault,
			mechModelSkinCompatibilityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mechModelSkinCompatibilityType, mechModelSkinCompatibilityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mechModelSkinCompatibilityType, mechModelSkinCompatibilityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mech_model_skin_compatibilities\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mech_model_skin_compatibilities\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into mech_model_skin_compatibilities")
	}

	if !cached {
		mechModelSkinCompatibilityInsertCacheMut.Lock()
		mechModelSkinCompatibilityInsertCache[key] = cache
		mechModelSkinCompatibilityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the MechModelSkinCompatibility.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MechModelSkinCompatibility) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mechModelSkinCompatibilityUpdateCacheMut.RLock()
	cache, cached := mechModelSkinCompatibilityUpdateCache[key]
	mechModelSkinCompatibilityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mechModelSkinCompatibilityAllColumns,
			mechModelSkinCompatibilityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update mech_model_skin_compatibilities, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mech_model_skin_compatibilities\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mechModelSkinCompatibilityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mechModelSkinCompatibilityType, mechModelSkinCompatibilityMapping, append(wl, mechModelSkinCompatibilityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update mech_model_skin_compatibilities row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for mech_model_skin_compatibilities")
	}

	if !cached {
		mechModelSkinCompatibilityUpdateCacheMut.Lock()
		mechModelSkinCompatibilityUpdateCache[key] = cache
		mechModelSkinCompatibilityUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mechModelSkinCompatibilityQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for mech_model_skin_compatibilities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for mech_model_skin_compatibilities")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MechModelSkinCompatibilitySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechModelSkinCompatibilityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mech_model_skin_compatibilities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mechModelSkinCompatibilityPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in mechModelSkinCompatibility slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all mechModelSkinCompatibility")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MechModelSkinCompatibility) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no mech_model_skin_compatibilities provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mechModelSkinCompatibilityColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mechModelSkinCompatibilityUpsertCacheMut.RLock()
	cache, cached := mechModelSkinCompatibilityUpsertCache[key]
	mechModelSkinCompatibilityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mechModelSkinCompatibilityAllColumns,
			mechModelSkinCompatibilityColumnsWithDefault,
			mechModelSkinCompatibilityColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mechModelSkinCompatibilityAllColumns,
			mechModelSkinCompatibilityPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert mech_model_skin_compatibilities, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mechModelSkinCompatibilityPrimaryKeyColumns))
			copy(conflict, mechModelSkinCompatibilityPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mech_model_skin_compatibilities\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mechModelSkinCompatibilityType, mechModelSkinCompatibilityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mechModelSkinCompatibilityType, mechModelSkinCompatibilityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert mech_model_skin_compatibilities")
	}

	if !cached {
		mechModelSkinCompatibilityUpsertCacheMut.Lock()
		mechModelSkinCompatibilityUpsertCache[key] = cache
		mechModelSkinCompatibilityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single MechModelSkinCompatibility record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MechModelSkinCompatibility) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no MechModelSkinCompatibility provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mechModelSkinCompatibilityPrimaryKeyMapping)
		sql = "DELETE FROM \"mech_model_skin_compatibilities\" WHERE \"blueprint_mech_skin_id\"=$1 AND \"mech_model_id\"=$2"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"mech_model_skin_compatibilities\" SET %s WHERE \"blueprint_mech_skin_id\"=$2 AND \"mech_model_id\"=$3",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(mechModelSkinCompatibilityType, mechModelSkinCompatibilityMapping, append(wl, mechModelSkinCompatibilityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from mech_model_skin_compatibilities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for mech_model_skin_compatibilities")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mechModelSkinCompatibilityQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no mechModelSkinCompatibilityQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mech_model_skin_compatibilities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mech_model_skin_compatibilities")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MechModelSkinCompatibilitySlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mechModelSkinCompatibilityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechModelSkinCompatibilityPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"mech_model_skin_compatibilities\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechModelSkinCompatibilityPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechModelSkinCompatibilityPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"mech_model_skin_compatibilities\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, mechModelSkinCompatibilityPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from mechModelSkinCompatibility slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for mech_model_skin_compatibilities")
	}

	if len(mechModelSkinCompatibilityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MechModelSkinCompatibility) Reload(exec boil.Executor) error {
	ret, err := FindMechModelSkinCompatibility(exec, o.BlueprintMechSkinID, o.MechModelID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MechModelSkinCompatibilitySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MechModelSkinCompatibilitySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mechModelSkinCompatibilityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mech_model_skin_compatibilities\".* FROM \"mech_model_skin_compatibilities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mechModelSkinCompatibilityPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in MechModelSkinCompatibilitySlice")
	}

	*o = slice

	return nil
}

// MechModelSkinCompatibilityExists checks if the MechModelSkinCompatibility row exists.
func MechModelSkinCompatibilityExists(exec boil.Executor, blueprintMechSkinID string, mechModelID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mech_model_skin_compatibilities\" where \"blueprint_mech_skin_id\"=$1 AND \"mech_model_id\"=$2 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, blueprintMechSkinID, mechModelID)
	}
	row := exec.QueryRow(sql, blueprintMechSkinID, mechModelID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if mech_model_skin_compatibilities exists")
	}

	return exists, nil
}
