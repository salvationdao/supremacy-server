// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/shopspring/decimal"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RepairOffer is an object representing the database table.
type RepairOffer struct {
	ID                string          `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	RepairCaseID      string          `boiler:"repair_case_id" boil:"repair_case_id" json:"repair_case_id" toml:"repair_case_id" yaml:"repair_case_id"`
	OfferedByID       null.String     `boiler:"offered_by_id" boil:"offered_by_id" json:"offered_by_id,omitempty" toml:"offered_by_id" yaml:"offered_by_id,omitempty"`
	BlocksTotal       int             `boiler:"blocks_total" boil:"blocks_total" json:"blocks_total" toml:"blocks_total" yaml:"blocks_total"`
	OfferedSupsAmount decimal.Decimal `boiler:"offered_sups_amount" boil:"offered_sups_amount" json:"offered_sups_amount" toml:"offered_sups_amount" yaml:"offered_sups_amount"`
	ExpiresAt         time.Time       `boiler:"expires_at" boil:"expires_at" json:"expires_at" toml:"expires_at" yaml:"expires_at"`
	FinishedReason    null.String     `boiler:"finished_reason" boil:"finished_reason" json:"finished_reason,omitempty" toml:"finished_reason" yaml:"finished_reason,omitempty"`
	ClosedAt          null.Time       `boiler:"closed_at" boil:"closed_at" json:"closed_at,omitempty" toml:"closed_at" yaml:"closed_at,omitempty"`
	PaidTXID          null.String     `boiler:"paid_tx_id" boil:"paid_tx_id" json:"paid_tx_id,omitempty" toml:"paid_tx_id" yaml:"paid_tx_id,omitempty"`
	TaxTXID           null.String     `boiler:"tax_tx_id" boil:"tax_tx_id" json:"tax_tx_id,omitempty" toml:"tax_tx_id" yaml:"tax_tx_id,omitempty"`
	CreatedAt         time.Time       `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt         time.Time       `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt         null.Time       `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *repairOfferR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L repairOfferL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RepairOfferColumns = struct {
	ID                string
	RepairCaseID      string
	OfferedByID       string
	BlocksTotal       string
	OfferedSupsAmount string
	ExpiresAt         string
	FinishedReason    string
	ClosedAt          string
	PaidTXID          string
	TaxTXID           string
	CreatedAt         string
	UpdatedAt         string
	DeletedAt         string
}{
	ID:                "id",
	RepairCaseID:      "repair_case_id",
	OfferedByID:       "offered_by_id",
	BlocksTotal:       "blocks_total",
	OfferedSupsAmount: "offered_sups_amount",
	ExpiresAt:         "expires_at",
	FinishedReason:    "finished_reason",
	ClosedAt:          "closed_at",
	PaidTXID:          "paid_tx_id",
	TaxTXID:           "tax_tx_id",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
	DeletedAt:         "deleted_at",
}

var RepairOfferTableColumns = struct {
	ID                string
	RepairCaseID      string
	OfferedByID       string
	BlocksTotal       string
	OfferedSupsAmount string
	ExpiresAt         string
	FinishedReason    string
	ClosedAt          string
	PaidTXID          string
	TaxTXID           string
	CreatedAt         string
	UpdatedAt         string
	DeletedAt         string
}{
	ID:                "repair_offers.id",
	RepairCaseID:      "repair_offers.repair_case_id",
	OfferedByID:       "repair_offers.offered_by_id",
	BlocksTotal:       "repair_offers.blocks_total",
	OfferedSupsAmount: "repair_offers.offered_sups_amount",
	ExpiresAt:         "repair_offers.expires_at",
	FinishedReason:    "repair_offers.finished_reason",
	ClosedAt:          "repair_offers.closed_at",
	PaidTXID:          "repair_offers.paid_tx_id",
	TaxTXID:           "repair_offers.tax_tx_id",
	CreatedAt:         "repair_offers.created_at",
	UpdatedAt:         "repair_offers.updated_at",
	DeletedAt:         "repair_offers.deleted_at",
}

// Generated where

var RepairOfferWhere = struct {
	ID                whereHelperstring
	RepairCaseID      whereHelperstring
	OfferedByID       whereHelpernull_String
	BlocksTotal       whereHelperint
	OfferedSupsAmount whereHelperdecimal_Decimal
	ExpiresAt         whereHelpertime_Time
	FinishedReason    whereHelpernull_String
	ClosedAt          whereHelpernull_Time
	PaidTXID          whereHelpernull_String
	TaxTXID           whereHelpernull_String
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpertime_Time
	DeletedAt         whereHelpernull_Time
}{
	ID:                whereHelperstring{field: "\"repair_offers\".\"id\""},
	RepairCaseID:      whereHelperstring{field: "\"repair_offers\".\"repair_case_id\""},
	OfferedByID:       whereHelpernull_String{field: "\"repair_offers\".\"offered_by_id\""},
	BlocksTotal:       whereHelperint{field: "\"repair_offers\".\"blocks_total\""},
	OfferedSupsAmount: whereHelperdecimal_Decimal{field: "\"repair_offers\".\"offered_sups_amount\""},
	ExpiresAt:         whereHelpertime_Time{field: "\"repair_offers\".\"expires_at\""},
	FinishedReason:    whereHelpernull_String{field: "\"repair_offers\".\"finished_reason\""},
	ClosedAt:          whereHelpernull_Time{field: "\"repair_offers\".\"closed_at\""},
	PaidTXID:          whereHelpernull_String{field: "\"repair_offers\".\"paid_tx_id\""},
	TaxTXID:           whereHelpernull_String{field: "\"repair_offers\".\"tax_tx_id\""},
	CreatedAt:         whereHelpertime_Time{field: "\"repair_offers\".\"created_at\""},
	UpdatedAt:         whereHelpertime_Time{field: "\"repair_offers\".\"updated_at\""},
	DeletedAt:         whereHelpernull_Time{field: "\"repair_offers\".\"deleted_at\""},
}

// RepairOfferRels is where relationship names are stored.
var RepairOfferRels = struct {
	OfferedBy    string
	RepairCase   string
	RepairAgents string
	RepairBlocks string
}{
	OfferedBy:    "OfferedBy",
	RepairCase:   "RepairCase",
	RepairAgents: "RepairAgents",
	RepairBlocks: "RepairBlocks",
}

// repairOfferR is where relationships are stored.
type repairOfferR struct {
	OfferedBy    *Player          `boiler:"OfferedBy" boil:"OfferedBy" json:"OfferedBy" toml:"OfferedBy" yaml:"OfferedBy"`
	RepairCase   *RepairCase      `boiler:"RepairCase" boil:"RepairCase" json:"RepairCase" toml:"RepairCase" yaml:"RepairCase"`
	RepairAgents RepairAgentSlice `boiler:"RepairAgents" boil:"RepairAgents" json:"RepairAgents" toml:"RepairAgents" yaml:"RepairAgents"`
	RepairBlocks RepairBlockSlice `boiler:"RepairBlocks" boil:"RepairBlocks" json:"RepairBlocks" toml:"RepairBlocks" yaml:"RepairBlocks"`
}

// NewStruct creates a new relationship struct
func (*repairOfferR) NewStruct() *repairOfferR {
	return &repairOfferR{}
}

// repairOfferL is where Load methods for each relationship are stored.
type repairOfferL struct{}

var (
	repairOfferAllColumns            = []string{"id", "repair_case_id", "offered_by_id", "blocks_total", "offered_sups_amount", "expires_at", "finished_reason", "closed_at", "paid_tx_id", "tax_tx_id", "created_at", "updated_at", "deleted_at"}
	repairOfferColumnsWithoutDefault = []string{"repair_case_id", "blocks_total", "offered_sups_amount", "expires_at"}
	repairOfferColumnsWithDefault    = []string{"id", "offered_by_id", "finished_reason", "closed_at", "paid_tx_id", "tax_tx_id", "created_at", "updated_at", "deleted_at"}
	repairOfferPrimaryKeyColumns     = []string{"id"}
	repairOfferGeneratedColumns      = []string{}
)

type (
	// RepairOfferSlice is an alias for a slice of pointers to RepairOffer.
	// This should almost always be used instead of []RepairOffer.
	RepairOfferSlice []*RepairOffer
	// RepairOfferHook is the signature for custom RepairOffer hook methods
	RepairOfferHook func(boil.Executor, *RepairOffer) error

	repairOfferQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	repairOfferType                 = reflect.TypeOf(&RepairOffer{})
	repairOfferMapping              = queries.MakeStructMapping(repairOfferType)
	repairOfferPrimaryKeyMapping, _ = queries.BindMapping(repairOfferType, repairOfferMapping, repairOfferPrimaryKeyColumns)
	repairOfferInsertCacheMut       sync.RWMutex
	repairOfferInsertCache          = make(map[string]insertCache)
	repairOfferUpdateCacheMut       sync.RWMutex
	repairOfferUpdateCache          = make(map[string]updateCache)
	repairOfferUpsertCacheMut       sync.RWMutex
	repairOfferUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var repairOfferAfterSelectHooks []RepairOfferHook

var repairOfferBeforeInsertHooks []RepairOfferHook
var repairOfferAfterInsertHooks []RepairOfferHook

var repairOfferBeforeUpdateHooks []RepairOfferHook
var repairOfferAfterUpdateHooks []RepairOfferHook

var repairOfferBeforeDeleteHooks []RepairOfferHook
var repairOfferAfterDeleteHooks []RepairOfferHook

var repairOfferBeforeUpsertHooks []RepairOfferHook
var repairOfferAfterUpsertHooks []RepairOfferHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RepairOffer) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range repairOfferAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RepairOffer) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range repairOfferBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RepairOffer) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range repairOfferAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RepairOffer) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range repairOfferBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RepairOffer) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range repairOfferAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RepairOffer) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range repairOfferBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RepairOffer) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range repairOfferAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RepairOffer) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range repairOfferBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RepairOffer) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range repairOfferAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRepairOfferHook registers your hook function for all future operations.
func AddRepairOfferHook(hookPoint boil.HookPoint, repairOfferHook RepairOfferHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		repairOfferAfterSelectHooks = append(repairOfferAfterSelectHooks, repairOfferHook)
	case boil.BeforeInsertHook:
		repairOfferBeforeInsertHooks = append(repairOfferBeforeInsertHooks, repairOfferHook)
	case boil.AfterInsertHook:
		repairOfferAfterInsertHooks = append(repairOfferAfterInsertHooks, repairOfferHook)
	case boil.BeforeUpdateHook:
		repairOfferBeforeUpdateHooks = append(repairOfferBeforeUpdateHooks, repairOfferHook)
	case boil.AfterUpdateHook:
		repairOfferAfterUpdateHooks = append(repairOfferAfterUpdateHooks, repairOfferHook)
	case boil.BeforeDeleteHook:
		repairOfferBeforeDeleteHooks = append(repairOfferBeforeDeleteHooks, repairOfferHook)
	case boil.AfterDeleteHook:
		repairOfferAfterDeleteHooks = append(repairOfferAfterDeleteHooks, repairOfferHook)
	case boil.BeforeUpsertHook:
		repairOfferBeforeUpsertHooks = append(repairOfferBeforeUpsertHooks, repairOfferHook)
	case boil.AfterUpsertHook:
		repairOfferAfterUpsertHooks = append(repairOfferAfterUpsertHooks, repairOfferHook)
	}
}

// One returns a single repairOffer record from the query.
func (q repairOfferQuery) One(exec boil.Executor) (*RepairOffer, error) {
	o := &RepairOffer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for repair_offers")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RepairOffer records from the query.
func (q repairOfferQuery) All(exec boil.Executor) (RepairOfferSlice, error) {
	var o []*RepairOffer

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to RepairOffer slice")
	}

	if len(repairOfferAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RepairOffer records in the query.
func (q repairOfferQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count repair_offers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q repairOfferQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if repair_offers exists")
	}

	return count > 0, nil
}

// OfferedBy pointed to by the foreign key.
func (o *RepairOffer) OfferedBy(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OfferedByID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"players\"")

	return query
}

// RepairCase pointed to by the foreign key.
func (o *RepairOffer) RepairCase(mods ...qm.QueryMod) repairCaseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RepairCaseID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := RepairCases(queryMods...)
	queries.SetFrom(query.Query, "\"repair_cases\"")

	return query
}

// RepairAgents retrieves all the repair_agent's RepairAgents with an executor.
func (o *RepairOffer) RepairAgents(mods ...qm.QueryMod) repairAgentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"repair_agents\".\"repair_offer_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"repair_agents\".\"deleted_at\""),
	)

	query := RepairAgents(queryMods...)
	queries.SetFrom(query.Query, "\"repair_agents\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"repair_agents\".*"})
	}

	return query
}

// RepairBlocks retrieves all the repair_block's RepairBlocks with an executor.
func (o *RepairOffer) RepairBlocks(mods ...qm.QueryMod) repairBlockQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"repair_blocks\".\"repair_offer_id\"=?", o.ID),
	)

	query := RepairBlocks(queryMods...)
	queries.SetFrom(query.Query, "\"repair_blocks\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"repair_blocks\".*"})
	}

	return query
}

// LoadOfferedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (repairOfferL) LoadOfferedBy(e boil.Executor, singular bool, maybeRepairOffer interface{}, mods queries.Applicator) error {
	var slice []*RepairOffer
	var object *RepairOffer

	if singular {
		object = maybeRepairOffer.(*RepairOffer)
	} else {
		slice = *maybeRepairOffer.(*[]*RepairOffer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &repairOfferR{}
		}
		if !queries.IsNil(object.OfferedByID) {
			args = append(args, object.OfferedByID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &repairOfferR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OfferedByID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OfferedByID) {
				args = append(args, obj.OfferedByID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`players`),
		qm.WhereIn(`players.id in ?`, args...),
		qmhelper.WhereIsNull(`players.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for players")
	}

	if len(repairOfferAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OfferedBy = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.OfferedByRepairOffers = append(foreign.R.OfferedByRepairOffers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OfferedByID, foreign.ID) {
				local.R.OfferedBy = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.OfferedByRepairOffers = append(foreign.R.OfferedByRepairOffers, local)
				break
			}
		}
	}

	return nil
}

// LoadRepairCase allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (repairOfferL) LoadRepairCase(e boil.Executor, singular bool, maybeRepairOffer interface{}, mods queries.Applicator) error {
	var slice []*RepairOffer
	var object *RepairOffer

	if singular {
		object = maybeRepairOffer.(*RepairOffer)
	} else {
		slice = *maybeRepairOffer.(*[]*RepairOffer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &repairOfferR{}
		}
		args = append(args, object.RepairCaseID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &repairOfferR{}
			}

			for _, a := range args {
				if a == obj.RepairCaseID {
					continue Outer
				}
			}

			args = append(args, obj.RepairCaseID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`repair_cases`),
		qm.WhereIn(`repair_cases.id in ?`, args...),
		qmhelper.WhereIsNull(`repair_cases.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RepairCase")
	}

	var resultSlice []*RepairCase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RepairCase")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for repair_cases")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for repair_cases")
	}

	if len(repairOfferAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RepairCase = foreign
		if foreign.R == nil {
			foreign.R = &repairCaseR{}
		}
		foreign.R.RepairOffers = append(foreign.R.RepairOffers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RepairCaseID == foreign.ID {
				local.R.RepairCase = foreign
				if foreign.R == nil {
					foreign.R = &repairCaseR{}
				}
				foreign.R.RepairOffers = append(foreign.R.RepairOffers, local)
				break
			}
		}
	}

	return nil
}

// LoadRepairAgents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (repairOfferL) LoadRepairAgents(e boil.Executor, singular bool, maybeRepairOffer interface{}, mods queries.Applicator) error {
	var slice []*RepairOffer
	var object *RepairOffer

	if singular {
		object = maybeRepairOffer.(*RepairOffer)
	} else {
		slice = *maybeRepairOffer.(*[]*RepairOffer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &repairOfferR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &repairOfferR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`repair_agents`),
		qm.WhereIn(`repair_agents.repair_offer_id in ?`, args...),
		qmhelper.WhereIsNull(`repair_agents.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load repair_agents")
	}

	var resultSlice []*RepairAgent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice repair_agents")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on repair_agents")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for repair_agents")
	}

	if len(repairAgentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RepairAgents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &repairAgentR{}
			}
			foreign.R.RepairOffer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RepairOfferID {
				local.R.RepairAgents = append(local.R.RepairAgents, foreign)
				if foreign.R == nil {
					foreign.R = &repairAgentR{}
				}
				foreign.R.RepairOffer = local
				break
			}
		}
	}

	return nil
}

// LoadRepairBlocks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (repairOfferL) LoadRepairBlocks(e boil.Executor, singular bool, maybeRepairOffer interface{}, mods queries.Applicator) error {
	var slice []*RepairOffer
	var object *RepairOffer

	if singular {
		object = maybeRepairOffer.(*RepairOffer)
	} else {
		slice = *maybeRepairOffer.(*[]*RepairOffer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &repairOfferR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &repairOfferR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`repair_blocks`),
		qm.WhereIn(`repair_blocks.repair_offer_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load repair_blocks")
	}

	var resultSlice []*RepairBlock
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice repair_blocks")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on repair_blocks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for repair_blocks")
	}

	if len(repairBlockAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RepairBlocks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &repairBlockR{}
			}
			foreign.R.RepairOffer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RepairOfferID {
				local.R.RepairBlocks = append(local.R.RepairBlocks, foreign)
				if foreign.R == nil {
					foreign.R = &repairBlockR{}
				}
				foreign.R.RepairOffer = local
				break
			}
		}
	}

	return nil
}

// SetOfferedBy of the repairOffer to the related item.
// Sets o.R.OfferedBy to related.
// Adds o to related.R.OfferedByRepairOffers.
func (o *RepairOffer) SetOfferedBy(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"repair_offers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"offered_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, repairOfferPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OfferedByID, related.ID)
	if o.R == nil {
		o.R = &repairOfferR{
			OfferedBy: related,
		}
	} else {
		o.R.OfferedBy = related
	}

	if related.R == nil {
		related.R = &playerR{
			OfferedByRepairOffers: RepairOfferSlice{o},
		}
	} else {
		related.R.OfferedByRepairOffers = append(related.R.OfferedByRepairOffers, o)
	}

	return nil
}

// RemoveOfferedBy relationship.
// Sets o.R.OfferedBy to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *RepairOffer) RemoveOfferedBy(exec boil.Executor, related *Player) error {
	var err error

	queries.SetScanner(&o.OfferedByID, nil)
	if _, err = o.Update(exec, boil.Whitelist("offered_by_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OfferedBy = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OfferedByRepairOffers {
		if queries.Equal(o.OfferedByID, ri.OfferedByID) {
			continue
		}

		ln := len(related.R.OfferedByRepairOffers)
		if ln > 1 && i < ln-1 {
			related.R.OfferedByRepairOffers[i] = related.R.OfferedByRepairOffers[ln-1]
		}
		related.R.OfferedByRepairOffers = related.R.OfferedByRepairOffers[:ln-1]
		break
	}
	return nil
}

// SetRepairCase of the repairOffer to the related item.
// Sets o.R.RepairCase to related.
// Adds o to related.R.RepairOffers.
func (o *RepairOffer) SetRepairCase(exec boil.Executor, insert bool, related *RepairCase) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"repair_offers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"repair_case_id"}),
		strmangle.WhereClause("\"", "\"", 2, repairOfferPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RepairCaseID = related.ID
	if o.R == nil {
		o.R = &repairOfferR{
			RepairCase: related,
		}
	} else {
		o.R.RepairCase = related
	}

	if related.R == nil {
		related.R = &repairCaseR{
			RepairOffers: RepairOfferSlice{o},
		}
	} else {
		related.R.RepairOffers = append(related.R.RepairOffers, o)
	}

	return nil
}

// AddRepairAgents adds the given related objects to the existing relationships
// of the repair_offer, optionally inserting them as new records.
// Appends related to o.R.RepairAgents.
// Sets related.R.RepairOffer appropriately.
func (o *RepairOffer) AddRepairAgents(exec boil.Executor, insert bool, related ...*RepairAgent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RepairOfferID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"repair_agents\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"repair_offer_id"}),
				strmangle.WhereClause("\"", "\"", 2, repairAgentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RepairOfferID = o.ID
		}
	}

	if o.R == nil {
		o.R = &repairOfferR{
			RepairAgents: related,
		}
	} else {
		o.R.RepairAgents = append(o.R.RepairAgents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &repairAgentR{
				RepairOffer: o,
			}
		} else {
			rel.R.RepairOffer = o
		}
	}
	return nil
}

// AddRepairBlocks adds the given related objects to the existing relationships
// of the repair_offer, optionally inserting them as new records.
// Appends related to o.R.RepairBlocks.
// Sets related.R.RepairOffer appropriately.
func (o *RepairOffer) AddRepairBlocks(exec boil.Executor, insert bool, related ...*RepairBlock) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RepairOfferID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"repair_blocks\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"repair_offer_id"}),
				strmangle.WhereClause("\"", "\"", 2, repairBlockPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RepairOfferID = o.ID
		}
	}

	if o.R == nil {
		o.R = &repairOfferR{
			RepairBlocks: related,
		}
	} else {
		o.R.RepairBlocks = append(o.R.RepairBlocks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &repairBlockR{
				RepairOffer: o,
			}
		} else {
			rel.R.RepairOffer = o
		}
	}
	return nil
}

// RepairOffers retrieves all the records using an executor.
func RepairOffers(mods ...qm.QueryMod) repairOfferQuery {
	mods = append(mods, qm.From("\"repair_offers\""), qmhelper.WhereIsNull("\"repair_offers\".\"deleted_at\""))
	return repairOfferQuery{NewQuery(mods...)}
}

// FindRepairOffer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRepairOffer(exec boil.Executor, iD string, selectCols ...string) (*RepairOffer, error) {
	repairOfferObj := &RepairOffer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"repair_offers\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, repairOfferObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from repair_offers")
	}

	if err = repairOfferObj.doAfterSelectHooks(exec); err != nil {
		return repairOfferObj, err
	}

	return repairOfferObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RepairOffer) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no repair_offers provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(repairOfferColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	repairOfferInsertCacheMut.RLock()
	cache, cached := repairOfferInsertCache[key]
	repairOfferInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			repairOfferAllColumns,
			repairOfferColumnsWithDefault,
			repairOfferColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(repairOfferType, repairOfferMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(repairOfferType, repairOfferMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"repair_offers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"repair_offers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into repair_offers")
	}

	if !cached {
		repairOfferInsertCacheMut.Lock()
		repairOfferInsertCache[key] = cache
		repairOfferInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the RepairOffer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RepairOffer) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	repairOfferUpdateCacheMut.RLock()
	cache, cached := repairOfferUpdateCache[key]
	repairOfferUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			repairOfferAllColumns,
			repairOfferPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update repair_offers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"repair_offers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, repairOfferPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(repairOfferType, repairOfferMapping, append(wl, repairOfferPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update repair_offers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for repair_offers")
	}

	if !cached {
		repairOfferUpdateCacheMut.Lock()
		repairOfferUpdateCache[key] = cache
		repairOfferUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q repairOfferQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for repair_offers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for repair_offers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RepairOfferSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repairOfferPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"repair_offers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, repairOfferPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in repairOffer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all repairOffer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RepairOffer) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no repair_offers provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(repairOfferColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	repairOfferUpsertCacheMut.RLock()
	cache, cached := repairOfferUpsertCache[key]
	repairOfferUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			repairOfferAllColumns,
			repairOfferColumnsWithDefault,
			repairOfferColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			repairOfferAllColumns,
			repairOfferPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert repair_offers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(repairOfferPrimaryKeyColumns))
			copy(conflict, repairOfferPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"repair_offers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(repairOfferType, repairOfferMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(repairOfferType, repairOfferMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert repair_offers")
	}

	if !cached {
		repairOfferUpsertCacheMut.Lock()
		repairOfferUpsertCache[key] = cache
		repairOfferUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single RepairOffer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RepairOffer) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no RepairOffer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), repairOfferPrimaryKeyMapping)
		sql = "DELETE FROM \"repair_offers\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"repair_offers\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(repairOfferType, repairOfferMapping, append(wl, repairOfferPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from repair_offers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for repair_offers")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q repairOfferQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no repairOfferQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from repair_offers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for repair_offers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RepairOfferSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(repairOfferBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repairOfferPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"repair_offers\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, repairOfferPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repairOfferPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"repair_offers\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, repairOfferPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from repairOffer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for repair_offers")
	}

	if len(repairOfferAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RepairOffer) Reload(exec boil.Executor) error {
	ret, err := FindRepairOffer(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RepairOfferSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RepairOfferSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), repairOfferPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"repair_offers\".* FROM \"repair_offers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, repairOfferPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in RepairOfferSlice")
	}

	*o = slice

	return nil
}

// RepairOfferExists checks if the RepairOffer row exists.
func RepairOfferExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"repair_offers\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if repair_offers exists")
	}

	return exists, nil
}
