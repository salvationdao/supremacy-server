// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BlueprintChassisBlueprintWeapon is an object representing the database table.
type BlueprintChassisBlueprintWeapon struct {
	ID                 string    `boiler:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	BlueprintWeaponID  string    `boiler:"blueprint_weapon_id" boil:"blueprint_weapon_id" json:"blueprint_weapon_id" toml:"blueprint_weapon_id" yaml:"blueprint_weapon_id"`
	BlueprintChassisID string    `boiler:"blueprint_chassis_id" boil:"blueprint_chassis_id" json:"blueprint_chassis_id" toml:"blueprint_chassis_id" yaml:"blueprint_chassis_id"`
	SlotNumber         int       `boiler:"slot_number" boil:"slot_number" json:"slot_number" toml:"slot_number" yaml:"slot_number"`
	MountLocation      string    `boiler:"mount_location" boil:"mount_location" json:"mount_location" toml:"mount_location" yaml:"mount_location"`
	DeletedAt          null.Time `boiler:"deleted_at" boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UpdatedAt          time.Time `boiler:"updated_at" boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt          time.Time `boiler:"created_at" boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *blueprintChassisBlueprintWeaponR `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L blueprintChassisBlueprintWeaponL  `boiler:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlueprintChassisBlueprintWeaponColumns = struct {
	ID                 string
	BlueprintWeaponID  string
	BlueprintChassisID string
	SlotNumber         string
	MountLocation      string
	DeletedAt          string
	UpdatedAt          string
	CreatedAt          string
}{
	ID:                 "id",
	BlueprintWeaponID:  "blueprint_weapon_id",
	BlueprintChassisID: "blueprint_chassis_id",
	SlotNumber:         "slot_number",
	MountLocation:      "mount_location",
	DeletedAt:          "deleted_at",
	UpdatedAt:          "updated_at",
	CreatedAt:          "created_at",
}

var BlueprintChassisBlueprintWeaponTableColumns = struct {
	ID                 string
	BlueprintWeaponID  string
	BlueprintChassisID string
	SlotNumber         string
	MountLocation      string
	DeletedAt          string
	UpdatedAt          string
	CreatedAt          string
}{
	ID:                 "blueprint_chassis_blueprint_weapons.id",
	BlueprintWeaponID:  "blueprint_chassis_blueprint_weapons.blueprint_weapon_id",
	BlueprintChassisID: "blueprint_chassis_blueprint_weapons.blueprint_chassis_id",
	SlotNumber:         "blueprint_chassis_blueprint_weapons.slot_number",
	MountLocation:      "blueprint_chassis_blueprint_weapons.mount_location",
	DeletedAt:          "blueprint_chassis_blueprint_weapons.deleted_at",
	UpdatedAt:          "blueprint_chassis_blueprint_weapons.updated_at",
	CreatedAt:          "blueprint_chassis_blueprint_weapons.created_at",
}

// Generated where

var BlueprintChassisBlueprintWeaponWhere = struct {
	ID                 whereHelperstring
	BlueprintWeaponID  whereHelperstring
	BlueprintChassisID whereHelperstring
	SlotNumber         whereHelperint
	MountLocation      whereHelperstring
	DeletedAt          whereHelpernull_Time
	UpdatedAt          whereHelpertime_Time
	CreatedAt          whereHelpertime_Time
}{
	ID:                 whereHelperstring{field: "\"blueprint_chassis_blueprint_weapons\".\"id\""},
	BlueprintWeaponID:  whereHelperstring{field: "\"blueprint_chassis_blueprint_weapons\".\"blueprint_weapon_id\""},
	BlueprintChassisID: whereHelperstring{field: "\"blueprint_chassis_blueprint_weapons\".\"blueprint_chassis_id\""},
	SlotNumber:         whereHelperint{field: "\"blueprint_chassis_blueprint_weapons\".\"slot_number\""},
	MountLocation:      whereHelperstring{field: "\"blueprint_chassis_blueprint_weapons\".\"mount_location\""},
	DeletedAt:          whereHelpernull_Time{field: "\"blueprint_chassis_blueprint_weapons\".\"deleted_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"blueprint_chassis_blueprint_weapons\".\"updated_at\""},
	CreatedAt:          whereHelpertime_Time{field: "\"blueprint_chassis_blueprint_weapons\".\"created_at\""},
}

// BlueprintChassisBlueprintWeaponRels is where relationship names are stored.
var BlueprintChassisBlueprintWeaponRels = struct {
	BlueprintChassis string
	BlueprintWeapon  string
}{
	BlueprintChassis: "BlueprintChassis",
	BlueprintWeapon:  "BlueprintWeapon",
}

// blueprintChassisBlueprintWeaponR is where relationships are stored.
type blueprintChassisBlueprintWeaponR struct {
	BlueprintChassis *BlueprintChassis `boiler:"BlueprintChassis" boil:"BlueprintChassis" json:"BlueprintChassis" toml:"BlueprintChassis" yaml:"BlueprintChassis"`
	BlueprintWeapon  *BlueprintWeapon  `boiler:"BlueprintWeapon" boil:"BlueprintWeapon" json:"BlueprintWeapon" toml:"BlueprintWeapon" yaml:"BlueprintWeapon"`
}

// NewStruct creates a new relationship struct
func (*blueprintChassisBlueprintWeaponR) NewStruct() *blueprintChassisBlueprintWeaponR {
	return &blueprintChassisBlueprintWeaponR{}
}

// blueprintChassisBlueprintWeaponL is where Load methods for each relationship are stored.
type blueprintChassisBlueprintWeaponL struct{}

var (
	blueprintChassisBlueprintWeaponAllColumns            = []string{"id", "blueprint_weapon_id", "blueprint_chassis_id", "slot_number", "mount_location", "deleted_at", "updated_at", "created_at"}
	blueprintChassisBlueprintWeaponColumnsWithoutDefault = []string{"blueprint_weapon_id", "blueprint_chassis_id", "slot_number", "mount_location"}
	blueprintChassisBlueprintWeaponColumnsWithDefault    = []string{"id", "deleted_at", "updated_at", "created_at"}
	blueprintChassisBlueprintWeaponPrimaryKeyColumns     = []string{"id"}
	blueprintChassisBlueprintWeaponGeneratedColumns      = []string{}
)

type (
	// BlueprintChassisBlueprintWeaponSlice is an alias for a slice of pointers to BlueprintChassisBlueprintWeapon.
	// This should almost always be used instead of []BlueprintChassisBlueprintWeapon.
	BlueprintChassisBlueprintWeaponSlice []*BlueprintChassisBlueprintWeapon
	// BlueprintChassisBlueprintWeaponHook is the signature for custom BlueprintChassisBlueprintWeapon hook methods
	BlueprintChassisBlueprintWeaponHook func(boil.Executor, *BlueprintChassisBlueprintWeapon) error

	blueprintChassisBlueprintWeaponQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blueprintChassisBlueprintWeaponType                 = reflect.TypeOf(&BlueprintChassisBlueprintWeapon{})
	blueprintChassisBlueprintWeaponMapping              = queries.MakeStructMapping(blueprintChassisBlueprintWeaponType)
	blueprintChassisBlueprintWeaponPrimaryKeyMapping, _ = queries.BindMapping(blueprintChassisBlueprintWeaponType, blueprintChassisBlueprintWeaponMapping, blueprintChassisBlueprintWeaponPrimaryKeyColumns)
	blueprintChassisBlueprintWeaponInsertCacheMut       sync.RWMutex
	blueprintChassisBlueprintWeaponInsertCache          = make(map[string]insertCache)
	blueprintChassisBlueprintWeaponUpdateCacheMut       sync.RWMutex
	blueprintChassisBlueprintWeaponUpdateCache          = make(map[string]updateCache)
	blueprintChassisBlueprintWeaponUpsertCacheMut       sync.RWMutex
	blueprintChassisBlueprintWeaponUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var blueprintChassisBlueprintWeaponAfterSelectHooks []BlueprintChassisBlueprintWeaponHook

var blueprintChassisBlueprintWeaponBeforeInsertHooks []BlueprintChassisBlueprintWeaponHook
var blueprintChassisBlueprintWeaponAfterInsertHooks []BlueprintChassisBlueprintWeaponHook

var blueprintChassisBlueprintWeaponBeforeUpdateHooks []BlueprintChassisBlueprintWeaponHook
var blueprintChassisBlueprintWeaponAfterUpdateHooks []BlueprintChassisBlueprintWeaponHook

var blueprintChassisBlueprintWeaponBeforeDeleteHooks []BlueprintChassisBlueprintWeaponHook
var blueprintChassisBlueprintWeaponAfterDeleteHooks []BlueprintChassisBlueprintWeaponHook

var blueprintChassisBlueprintWeaponBeforeUpsertHooks []BlueprintChassisBlueprintWeaponHook
var blueprintChassisBlueprintWeaponAfterUpsertHooks []BlueprintChassisBlueprintWeaponHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BlueprintChassisBlueprintWeapon) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisBlueprintWeaponAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BlueprintChassisBlueprintWeapon) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisBlueprintWeaponBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BlueprintChassisBlueprintWeapon) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisBlueprintWeaponAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BlueprintChassisBlueprintWeapon) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisBlueprintWeaponBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BlueprintChassisBlueprintWeapon) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisBlueprintWeaponAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BlueprintChassisBlueprintWeapon) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisBlueprintWeaponBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BlueprintChassisBlueprintWeapon) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisBlueprintWeaponAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BlueprintChassisBlueprintWeapon) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisBlueprintWeaponBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BlueprintChassisBlueprintWeapon) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range blueprintChassisBlueprintWeaponAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBlueprintChassisBlueprintWeaponHook registers your hook function for all future operations.
func AddBlueprintChassisBlueprintWeaponHook(hookPoint boil.HookPoint, blueprintChassisBlueprintWeaponHook BlueprintChassisBlueprintWeaponHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		blueprintChassisBlueprintWeaponAfterSelectHooks = append(blueprintChassisBlueprintWeaponAfterSelectHooks, blueprintChassisBlueprintWeaponHook)
	case boil.BeforeInsertHook:
		blueprintChassisBlueprintWeaponBeforeInsertHooks = append(blueprintChassisBlueprintWeaponBeforeInsertHooks, blueprintChassisBlueprintWeaponHook)
	case boil.AfterInsertHook:
		blueprintChassisBlueprintWeaponAfterInsertHooks = append(blueprintChassisBlueprintWeaponAfterInsertHooks, blueprintChassisBlueprintWeaponHook)
	case boil.BeforeUpdateHook:
		blueprintChassisBlueprintWeaponBeforeUpdateHooks = append(blueprintChassisBlueprintWeaponBeforeUpdateHooks, blueprintChassisBlueprintWeaponHook)
	case boil.AfterUpdateHook:
		blueprintChassisBlueprintWeaponAfterUpdateHooks = append(blueprintChassisBlueprintWeaponAfterUpdateHooks, blueprintChassisBlueprintWeaponHook)
	case boil.BeforeDeleteHook:
		blueprintChassisBlueprintWeaponBeforeDeleteHooks = append(blueprintChassisBlueprintWeaponBeforeDeleteHooks, blueprintChassisBlueprintWeaponHook)
	case boil.AfterDeleteHook:
		blueprintChassisBlueprintWeaponAfterDeleteHooks = append(blueprintChassisBlueprintWeaponAfterDeleteHooks, blueprintChassisBlueprintWeaponHook)
	case boil.BeforeUpsertHook:
		blueprintChassisBlueprintWeaponBeforeUpsertHooks = append(blueprintChassisBlueprintWeaponBeforeUpsertHooks, blueprintChassisBlueprintWeaponHook)
	case boil.AfterUpsertHook:
		blueprintChassisBlueprintWeaponAfterUpsertHooks = append(blueprintChassisBlueprintWeaponAfterUpsertHooks, blueprintChassisBlueprintWeaponHook)
	}
}

// One returns a single blueprintChassisBlueprintWeapon record from the query.
func (q blueprintChassisBlueprintWeaponQuery) One(exec boil.Executor) (*BlueprintChassisBlueprintWeapon, error) {
	o := &BlueprintChassisBlueprintWeapon{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for blueprint_chassis_blueprint_weapons")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BlueprintChassisBlueprintWeapon records from the query.
func (q blueprintChassisBlueprintWeaponQuery) All(exec boil.Executor) (BlueprintChassisBlueprintWeaponSlice, error) {
	var o []*BlueprintChassisBlueprintWeapon

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BlueprintChassisBlueprintWeapon slice")
	}

	if len(blueprintChassisBlueprintWeaponAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BlueprintChassisBlueprintWeapon records in the query.
func (q blueprintChassisBlueprintWeaponQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count blueprint_chassis_blueprint_weapons rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q blueprintChassisBlueprintWeaponQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if blueprint_chassis_blueprint_weapons exists")
	}

	return count > 0, nil
}

// BlueprintChassis pointed to by the foreign key.
func (o *BlueprintChassisBlueprintWeapon) BlueprintChassis(mods ...qm.QueryMod) blueprintChassisQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BlueprintChassisID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintChasses(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_chassis\"")

	return query
}

// BlueprintWeapon pointed to by the foreign key.
func (o *BlueprintChassisBlueprintWeapon) BlueprintWeapon(mods ...qm.QueryMod) blueprintWeaponQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BlueprintWeaponID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := BlueprintWeapons(queryMods...)
	queries.SetFrom(query.Query, "\"blueprint_weapons\"")

	return query
}

// LoadBlueprintChassis allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blueprintChassisBlueprintWeaponL) LoadBlueprintChassis(e boil.Executor, singular bool, maybeBlueprintChassisBlueprintWeapon interface{}, mods queries.Applicator) error {
	var slice []*BlueprintChassisBlueprintWeapon
	var object *BlueprintChassisBlueprintWeapon

	if singular {
		object = maybeBlueprintChassisBlueprintWeapon.(*BlueprintChassisBlueprintWeapon)
	} else {
		slice = *maybeBlueprintChassisBlueprintWeapon.(*[]*BlueprintChassisBlueprintWeapon)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintChassisBlueprintWeaponR{}
		}
		args = append(args, object.BlueprintChassisID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintChassisBlueprintWeaponR{}
			}

			for _, a := range args {
				if a == obj.BlueprintChassisID {
					continue Outer
				}
			}

			args = append(args, obj.BlueprintChassisID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_chassis`),
		qm.WhereIn(`blueprint_chassis.id in ?`, args...),
		qmhelper.WhereIsNull(`blueprint_chassis.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintChassis")
	}

	var resultSlice []*BlueprintChassis
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintChassis")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_chassis")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_chassis")
	}

	if len(blueprintChassisBlueprintWeaponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BlueprintChassis = foreign
		if foreign.R == nil {
			foreign.R = &blueprintChassisR{}
		}
		foreign.R.BlueprintChassisBlueprintWeapons = append(foreign.R.BlueprintChassisBlueprintWeapons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlueprintChassisID == foreign.ID {
				local.R.BlueprintChassis = foreign
				if foreign.R == nil {
					foreign.R = &blueprintChassisR{}
				}
				foreign.R.BlueprintChassisBlueprintWeapons = append(foreign.R.BlueprintChassisBlueprintWeapons, local)
				break
			}
		}
	}

	return nil
}

// LoadBlueprintWeapon allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blueprintChassisBlueprintWeaponL) LoadBlueprintWeapon(e boil.Executor, singular bool, maybeBlueprintChassisBlueprintWeapon interface{}, mods queries.Applicator) error {
	var slice []*BlueprintChassisBlueprintWeapon
	var object *BlueprintChassisBlueprintWeapon

	if singular {
		object = maybeBlueprintChassisBlueprintWeapon.(*BlueprintChassisBlueprintWeapon)
	} else {
		slice = *maybeBlueprintChassisBlueprintWeapon.(*[]*BlueprintChassisBlueprintWeapon)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blueprintChassisBlueprintWeaponR{}
		}
		args = append(args, object.BlueprintWeaponID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blueprintChassisBlueprintWeaponR{}
			}

			for _, a := range args {
				if a == obj.BlueprintWeaponID {
					continue Outer
				}
			}

			args = append(args, obj.BlueprintWeaponID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`blueprint_weapons`),
		qm.WhereIn(`blueprint_weapons.id in ?`, args...),
		qmhelper.WhereIsNull(`blueprint_weapons.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BlueprintWeapon")
	}

	var resultSlice []*BlueprintWeapon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BlueprintWeapon")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for blueprint_weapons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for blueprint_weapons")
	}

	if len(blueprintChassisBlueprintWeaponAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BlueprintWeapon = foreign
		if foreign.R == nil {
			foreign.R = &blueprintWeaponR{}
		}
		foreign.R.BlueprintChassisBlueprintWeapons = append(foreign.R.BlueprintChassisBlueprintWeapons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlueprintWeaponID == foreign.ID {
				local.R.BlueprintWeapon = foreign
				if foreign.R == nil {
					foreign.R = &blueprintWeaponR{}
				}
				foreign.R.BlueprintChassisBlueprintWeapons = append(foreign.R.BlueprintChassisBlueprintWeapons, local)
				break
			}
		}
	}

	return nil
}

// SetBlueprintChassis of the blueprintChassisBlueprintWeapon to the related item.
// Sets o.R.BlueprintChassis to related.
// Adds o to related.R.BlueprintChassisBlueprintWeapons.
func (o *BlueprintChassisBlueprintWeapon) SetBlueprintChassis(exec boil.Executor, insert bool, related *BlueprintChassis) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"blueprint_chassis_blueprint_weapons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_chassis_id"}),
		strmangle.WhereClause("\"", "\"", 2, blueprintChassisBlueprintWeaponPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlueprintChassisID = related.ID
	if o.R == nil {
		o.R = &blueprintChassisBlueprintWeaponR{
			BlueprintChassis: related,
		}
	} else {
		o.R.BlueprintChassis = related
	}

	if related.R == nil {
		related.R = &blueprintChassisR{
			BlueprintChassisBlueprintWeapons: BlueprintChassisBlueprintWeaponSlice{o},
		}
	} else {
		related.R.BlueprintChassisBlueprintWeapons = append(related.R.BlueprintChassisBlueprintWeapons, o)
	}

	return nil
}

// SetBlueprintWeapon of the blueprintChassisBlueprintWeapon to the related item.
// Sets o.R.BlueprintWeapon to related.
// Adds o to related.R.BlueprintChassisBlueprintWeapons.
func (o *BlueprintChassisBlueprintWeapon) SetBlueprintWeapon(exec boil.Executor, insert bool, related *BlueprintWeapon) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"blueprint_chassis_blueprint_weapons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"blueprint_weapon_id"}),
		strmangle.WhereClause("\"", "\"", 2, blueprintChassisBlueprintWeaponPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlueprintWeaponID = related.ID
	if o.R == nil {
		o.R = &blueprintChassisBlueprintWeaponR{
			BlueprintWeapon: related,
		}
	} else {
		o.R.BlueprintWeapon = related
	}

	if related.R == nil {
		related.R = &blueprintWeaponR{
			BlueprintChassisBlueprintWeapons: BlueprintChassisBlueprintWeaponSlice{o},
		}
	} else {
		related.R.BlueprintChassisBlueprintWeapons = append(related.R.BlueprintChassisBlueprintWeapons, o)
	}

	return nil
}

// BlueprintChassisBlueprintWeapons retrieves all the records using an executor.
func BlueprintChassisBlueprintWeapons(mods ...qm.QueryMod) blueprintChassisBlueprintWeaponQuery {
	mods = append(mods, qm.From("\"blueprint_chassis_blueprint_weapons\""), qmhelper.WhereIsNull("\"blueprint_chassis_blueprint_weapons\".\"deleted_at\""))
	return blueprintChassisBlueprintWeaponQuery{NewQuery(mods...)}
}

// FindBlueprintChassisBlueprintWeapon retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlueprintChassisBlueprintWeapon(exec boil.Executor, iD string, selectCols ...string) (*BlueprintChassisBlueprintWeapon, error) {
	blueprintChassisBlueprintWeaponObj := &BlueprintChassisBlueprintWeapon{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"blueprint_chassis_blueprint_weapons\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, blueprintChassisBlueprintWeaponObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from blueprint_chassis_blueprint_weapons")
	}

	if err = blueprintChassisBlueprintWeaponObj.doAfterSelectHooks(exec); err != nil {
		return blueprintChassisBlueprintWeaponObj, err
	}

	return blueprintChassisBlueprintWeaponObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlueprintChassisBlueprintWeapon) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_chassis_blueprint_weapons provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintChassisBlueprintWeaponColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blueprintChassisBlueprintWeaponInsertCacheMut.RLock()
	cache, cached := blueprintChassisBlueprintWeaponInsertCache[key]
	blueprintChassisBlueprintWeaponInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blueprintChassisBlueprintWeaponAllColumns,
			blueprintChassisBlueprintWeaponColumnsWithDefault,
			blueprintChassisBlueprintWeaponColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blueprintChassisBlueprintWeaponType, blueprintChassisBlueprintWeaponMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blueprintChassisBlueprintWeaponType, blueprintChassisBlueprintWeaponMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"blueprint_chassis_blueprint_weapons\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"blueprint_chassis_blueprint_weapons\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into blueprint_chassis_blueprint_weapons")
	}

	if !cached {
		blueprintChassisBlueprintWeaponInsertCacheMut.Lock()
		blueprintChassisBlueprintWeaponInsertCache[key] = cache
		blueprintChassisBlueprintWeaponInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the BlueprintChassisBlueprintWeapon.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlueprintChassisBlueprintWeapon) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	blueprintChassisBlueprintWeaponUpdateCacheMut.RLock()
	cache, cached := blueprintChassisBlueprintWeaponUpdateCache[key]
	blueprintChassisBlueprintWeaponUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blueprintChassisBlueprintWeaponAllColumns,
			blueprintChassisBlueprintWeaponPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update blueprint_chassis_blueprint_weapons, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"blueprint_chassis_blueprint_weapons\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, blueprintChassisBlueprintWeaponPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blueprintChassisBlueprintWeaponType, blueprintChassisBlueprintWeaponMapping, append(wl, blueprintChassisBlueprintWeaponPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update blueprint_chassis_blueprint_weapons row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for blueprint_chassis_blueprint_weapons")
	}

	if !cached {
		blueprintChassisBlueprintWeaponUpdateCacheMut.Lock()
		blueprintChassisBlueprintWeaponUpdateCache[key] = cache
		blueprintChassisBlueprintWeaponUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q blueprintChassisBlueprintWeaponQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for blueprint_chassis_blueprint_weapons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for blueprint_chassis_blueprint_weapons")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlueprintChassisBlueprintWeaponSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintChassisBlueprintWeaponPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"blueprint_chassis_blueprint_weapons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, blueprintChassisBlueprintWeaponPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in blueprintChassisBlueprintWeapon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all blueprintChassisBlueprintWeapon")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlueprintChassisBlueprintWeapon) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_chassis_blueprint_weapons provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime
	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintChassisBlueprintWeaponColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blueprintChassisBlueprintWeaponUpsertCacheMut.RLock()
	cache, cached := blueprintChassisBlueprintWeaponUpsertCache[key]
	blueprintChassisBlueprintWeaponUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blueprintChassisBlueprintWeaponAllColumns,
			blueprintChassisBlueprintWeaponColumnsWithDefault,
			blueprintChassisBlueprintWeaponColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			blueprintChassisBlueprintWeaponAllColumns,
			blueprintChassisBlueprintWeaponPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("boiler: unable to upsert blueprint_chassis_blueprint_weapons, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(blueprintChassisBlueprintWeaponPrimaryKeyColumns))
			copy(conflict, blueprintChassisBlueprintWeaponPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"blueprint_chassis_blueprint_weapons\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(blueprintChassisBlueprintWeaponType, blueprintChassisBlueprintWeaponMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blueprintChassisBlueprintWeaponType, blueprintChassisBlueprintWeaponMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert blueprint_chassis_blueprint_weapons")
	}

	if !cached {
		blueprintChassisBlueprintWeaponUpsertCacheMut.Lock()
		blueprintChassisBlueprintWeaponUpsertCache[key] = cache
		blueprintChassisBlueprintWeaponUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single BlueprintChassisBlueprintWeapon record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlueprintChassisBlueprintWeapon) Delete(exec boil.Executor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BlueprintChassisBlueprintWeapon provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blueprintChassisBlueprintWeaponPrimaryKeyMapping)
		sql = "DELETE FROM \"blueprint_chassis_blueprint_weapons\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"blueprint_chassis_blueprint_weapons\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(blueprintChassisBlueprintWeaponType, blueprintChassisBlueprintWeaponMapping, append(wl, blueprintChassisBlueprintWeaponPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from blueprint_chassis_blueprint_weapons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for blueprint_chassis_blueprint_weapons")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q blueprintChassisBlueprintWeaponQuery) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no blueprintChassisBlueprintWeaponQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprint_chassis_blueprint_weapons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_chassis_blueprint_weapons")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlueprintChassisBlueprintWeaponSlice) DeleteAll(exec boil.Executor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(blueprintChassisBlueprintWeaponBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintChassisBlueprintWeaponPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"blueprint_chassis_blueprint_weapons\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintChassisBlueprintWeaponPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintChassisBlueprintWeaponPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"blueprint_chassis_blueprint_weapons\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, blueprintChassisBlueprintWeaponPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprintChassisBlueprintWeapon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_chassis_blueprint_weapons")
	}

	if len(blueprintChassisBlueprintWeaponAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlueprintChassisBlueprintWeapon) Reload(exec boil.Executor) error {
	ret, err := FindBlueprintChassisBlueprintWeapon(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlueprintChassisBlueprintWeaponSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlueprintChassisBlueprintWeaponSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintChassisBlueprintWeaponPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"blueprint_chassis_blueprint_weapons\".* FROM \"blueprint_chassis_blueprint_weapons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blueprintChassisBlueprintWeaponPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BlueprintChassisBlueprintWeaponSlice")
	}

	*o = slice

	return nil
}

// BlueprintChassisBlueprintWeaponExists checks if the BlueprintChassisBlueprintWeapon row exists.
func BlueprintChassisBlueprintWeaponExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"blueprint_chassis_blueprint_weapons\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if blueprint_chassis_blueprint_weapons exists")
	}

	return exists, nil
}
