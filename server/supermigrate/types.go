package supermigrate

import (
	"time"

	"github.com/gofrs/uuid"
	"github.com/volatiletech/null/v8"
)

type AutoGenerated struct {
	AssetPayload    []AssetPayload    `json:"AssetPayload"`
	MetadataPayload []MetadataPayload `json:"MetadataPayload"`
	StorePayload    []StorePayload    `json:"StorePayload"`
	UserPayload     []UserPayload     `json:"UserPayload"`
	FactionPayload  []FactionPayload  `json:"FactionPayload"`
}
type FactionPayload struct {
	ID          uuid.UUID `json:"id"`
	Label       string    `json:"label"`
	Description string    `json:"mintingSignature"`
}
type AssetPayload struct {
	UserID           string        `json:"userID"`
	TransferredInAt  time.Time     `json:"transferredInAt"`
	FrozenByID       interface{}   `json:"frozenByID"`
	LockedByID       interface{}   `json:"lockedByID"`
	FrozenAt         interface{}   `json:"frozenAt"`
	MintingSignature string        `json:"mintingSignature"`
	TxHistory        []interface{} `json:"txHistory"`
	ExternalTokenID  string        `json:"externalTokenID"`
	CollectionID     string        `json:"collectionID"`
	MetadataHash     string        `json:"metadataHash"`
	SignatureExpiry  string        `json:"signatureExpiry"`
}
type Attributes struct {
	Value       interface{} `json:"value"`
	TraitType   string      `json:"trait_type"`
	DisplayType string      `json:"display_type,omitempty"`
}
type MetadataPayload struct {
	Name               string       `json:"name"`
	CollectionID       string       `json:"collectionID"`
	GameObject         interface{}  `json:"gameObject"`
	Description        interface{}  `json:"description"`
	ExternalURL        string       `json:"externalURL"`
	Image              string       `json:"image"`
	AnimationURL       string       `json:"animationURL"`
	Durability         int          `json:"durability"`
	Attributes         []Attributes `json:"attributes"`
	AdditionalMetadata interface{}  `json:"additionalMetadata"`
	Keywords           interface{}  `json:"keywords"`
	DeletedAt          interface{}  `json:"deletedAt"`
	UpdatedAt          time.Time    `json:"updatedAt"`
	CreatedAt          time.Time    `json:"createdAt"`
	Minted             bool         `json:"minted"`
	Hash               string       `json:"hash"`
	ExternalTokenID    string       `json:"externalTokenID"`
}
type StorePayload struct {
	ID                 string       `json:"id"`
	FactionID          string       `json:"factionID"`
	Name               string       `json:"name"`
	CollectionID       string       `json:"collectionID"`
	Description        string       `json:"description"`
	Image              string       `json:"image"`
	AnimationURL       string       `json:"animationURL"`
	Attributes         []Attributes `json:"attributes"`
	AdditionalMetadata interface{}  `json:"additionalMetadata"`
	Keywords           string       `json:"keywords"`
	UsdCentCost        int          `json:"usdCentCost"`
	AmountSold         int          `json:"amountSold"`
	AmountAvailable    int          `json:"amountAvailable"`
	SoldAfter          time.Time    `json:"soldAfter"`
	SoldBefore         time.Time    `json:"soldBefore"`
	DeletedAt          interface{}  `json:"deletedAt"`
	CreatedAt          time.Time    `json:"createdAt"`
	UpdatedAt          time.Time    `json:"updatedAt"`
	Restriction        string       `json:"restriction"`
}
type Metadata struct {
}
type UserPayload struct {
	ID                               string      `json:"id"`
	Username                         string      `json:"username"`
	RoleID                           string      `json:"roleID"`
	AvatarID                         interface{} `json:"avatarID"`
	FacebookID                       interface{} `json:"facebookID"`
	GoogleID                         interface{} `json:"googleID"`
	TwitchID                         interface{} `json:"twitchID"`
	TwitterID                        interface{} `json:"twitterID"`
	DiscordID                        interface{} `json:"discordID"`
	FactionID                        null.String `json:"factionID"`
	Email                            interface{} `json:"email"`
	FirstName                        string      `json:"firstName"`
	LastName                         string      `json:"lastName"`
	Verified                         bool        `json:"verified"`
	OldPasswordRequired              bool        `json:"oldPasswordRequired"`
	TwoFactorAuthenticationActivated bool        `json:"twoFactorAuthenticationActivated"`
	TwoFactorAuthenticationSecret    string      `json:"twoFactorAuthenticationSecret"`
	TwoFactorAuthenticationIsSet     bool        `json:"twoFactorAuthenticationIsSet"`
	Sups                             string      `json:"sups"`
	PublicAddress                    string      `json:"publicAddress"`
	PrivateAddress                   interface{} `json:"privateAddress"`
	Nonce                            interface{} `json:"nonce"`
	Keywords                         string      `json:"keywords"`
	DeletedAt                        interface{} `json:"deletedAt"`
	UpdatedAt                        time.Time   `json:"updatedAt"`
	CreatedAt                        time.Time   `json:"createdAt"`
	Metadata                         Metadata    `json:"metadata"`
}

var AssetProductMap = map[string]string{}

type ParsedAttributes struct {
	Brand                 string
	Model                 string
	SubModel              string
	Rarity                string
	AssetType             string
	MaxStructureHitPoints int
	MaxShieldHitPoints    int
	Name                  string
	Speed                 int
	WeaponHardpoints      int
	TurretHardpoints      int
	UtilitySlots          int
	WeaponOne             string
	WeaponTwo             string
	TurretOne             string
	TurretTwo             string
	UtilityOne            string
	ShieldRechargeRate    int
}

func GetAttributes(attributes []Attributes) *ParsedAttributes {
	result := &ParsedAttributes{}
	for _, att := range attributes {
		if att.TraitType == "Brand" {
			result.Brand = att.Value.(string)
		}
		if att.TraitType == "Model" {
			result.Model = att.Value.(string)
		}
		if att.TraitType == "SubModel" {
			result.SubModel = att.Value.(string)
		}
		if att.TraitType == "Rarity" {
			result.Rarity = att.Value.(string)
		}
		if att.TraitType == "Asset Type" {
			result.AssetType = att.Value.(string)
		}
		if att.TraitType == "Max Structure Hit Points" {
			result.MaxStructureHitPoints = int(att.Value.(float64))
		}
		if att.TraitType == "Max Shield Hit Points" {
			result.MaxShieldHitPoints = int(att.Value.(float64))
		}
		if att.TraitType == "Name" {
			result.Name = att.Value.(string)
		}
		if att.TraitType == "Speed" {
			result.Speed = int(att.Value.(float64))
		}
		if att.TraitType == "Weapon Hardpoints" {
			result.WeaponHardpoints = int(att.Value.(float64))
		}
		if att.TraitType == "Turret Hardpoints" {
			result.TurretHardpoints = int(att.Value.(float64))
		}
		if att.TraitType == "Utility Slots" {
			result.UtilitySlots = int(att.Value.(float64))
		}
		if att.TraitType == "Weapon One" {
			result.WeaponOne = att.Value.(string)
		}
		if att.TraitType == "Weapon Two" {
			result.WeaponTwo = att.Value.(string)
		}
		if att.TraitType == "Turret One" {
			result.TurretOne = att.Value.(string)
		}
		if att.TraitType == "Turret Two" {
			result.TurretTwo = att.Value.(string)
		}
		if att.TraitType == "Utility One" {
			result.UtilityOne = att.Value.(string)
		}
		if att.TraitType == "Shield Recharge Rate" {
			result.ShieldRechargeRate = int(att.Value.(float64))
		}
	}
	return result
}
